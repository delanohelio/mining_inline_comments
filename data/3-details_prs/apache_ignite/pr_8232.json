{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTAwNzE3", "number": 8232, "title": "IGNITE-13433 Benchmark confirms operation's latency drop decrease on Cellular switch comparing to PME-free switch", "bodyText": "Thank you for submitting the pull request to the Apache Ignite.\nIn order to streamline the review of the contribution\nwe ask you to ensure the following steps have been taken:\nThe Contribution Checklist\n\n There is a single JIRA ticket related to the pull request.\n The web-link to the pull request is attached to the JIRA ticket.\n The JIRA ticket has the Patch Available state.\n The pull request body describes changes that have been made.\nThe description explains WHAT and WHY was made instead of HOW.\n The pull request title is treated as the final commit message.\nThe following pattern must be used: IGNITE-XXXX Change summary where XXXX - number of JIRA issue.\n A reviewer has been mentioned through the JIRA comments\n(see the Maintainers list)\n The pull request has been checked by the Teamcity Bot and\nthe green visa attached to the JIRA ticket (see TC.Bot: Check PR)\n\nNotes\n\nHow to Contribute\nCoding abbreviation rules\nCoding Guidelines\nApache Ignite Teamcity Bot\n\nIf you need any help, please email dev@ignite.apache.org or ask an\u0443 advice on http://asf.slack.com #ignite channel.", "createdAt": "2020-09-09T19:54:28Z", "url": "https://github.com/apache/ignite/pull/8232", "merged": true, "mergeCommit": {"oid": "47d131124996cfc3f8a986a3b7406a364424bbf0"}, "closed": true, "closedAt": "2020-09-15T07:20:00Z", "author": {"login": "anton-vinogradov"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHRt6_gH2gAyNDgzMTAwNzE3OjZjNDdjMGUyYzk2ZTkyOGNmZDNmYzdhYzIxM2M2YjA5MDc5YzU2Zjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIv6p3AH2gAyNDgzMTAwNzE3Ojg5NTFjYzZmY2M1ZWI5MmY4YWExZjBkODg3OWZmMGZlMTdkMzI3MTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c47c0e2c96e928cfd3fc7ac213c6b09079c56f8", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/6c47c0e2c96e928cfd3fc7ac213c6b09079c56f8", "committedDate": "2020-09-09T19:53:15Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0255513d0a43ebc99470975eec8a740aba11322f", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/0255513d0a43ebc99470975eec8a740aba11322f", "committedDate": "2020-09-10T15:05:15Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef20b6a000a82ad06de73ddf7cf4b931f65f92a5", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/ef20b6a000a82ad06de73ddf7cf4b931f65f92a5", "committedDate": "2020-09-10T15:08:12Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dc1e0c65634c90f7570e80180fc65b4d7785b4f", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/8dc1e0c65634c90f7570e80180fc65b4d7785b4f", "committedDate": "2020-09-11T07:45:13Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/13393bba8c1bc45103b2cac8aa99cc870de284f3", "committedDate": "2020-09-11T09:32:20Z", "message": "cellular switch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzE2Mzk4", "url": "https://github.com/apache/ignite/pull/8232#pullrequestreview-486716398", "createdAt": "2020-09-11T11:13:57Z", "commit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMToxMzo1N1rOHQatdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1MTo1NlrOHQbvjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk3Njg4NQ==", "bodyText": "Can we replace 1 with 0?", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486976885", "createdAt": "2020-09-11T11:13:57Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -38,33 +41,54 @@ def __init__(self, context, config, java_class_name, params=\"\", timeout_sec=60,\n         self.servicejava_class_name = servicejava_class_name\n         self.java_class_name = java_class_name\n         self.timeout_sec = timeout_sec\n-        self.stop_timeout_sec = 10\n+        self.params = params\n \n     def start(self):\n         super().start()\n \n         self.logger.info(\"Waiting for Ignite aware Application (%s) to start...\" % self.java_class_name)\n \n         self.await_event(\"Topology snapshot\", self.timeout_sec, from_the_beginning=True)\n-        self.await_event(\"IGNITE_APPLICATION_INITIALIZED\\\\|IGNITE_APPLICATION_BROKEN\", self.timeout_sec,\n-                         from_the_beginning=True)\n \n-        try:\n-            self.await_event(\"IGNITE_APPLICATION_INITIALIZED\", 1, from_the_beginning=True)\n-        except Exception:\n-            raise Exception(\"Java application execution failed. %s\" % self.extract_result(\"ERROR\")) from None\n+        self.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.timeout_sec)\n \n-    # pylint: disable=W0221\n-    def stop_node(self, node, clean_shutdown=True, timeout_sec=20):\n-        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(node.account)))\n-        node.account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown, allow_fail=True)\n+    def stop_async(self, clean_shutdown=True):\n+        \"\"\"\n+        Stops node in async way.\n+        \"\"\"\n+        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(self.nodes[0].account)))\n+        self.nodes[0].account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown,\n+                                                  allow_fail=True)\n \n-        stopped = self.wait_node(node, timeout_sec=self.stop_timeout_sec)\n+    def await_stopped(self, timeout_sec=10):\n+        \"\"\"\n+        Awaits node stop finish.\n+        \"\"\"\n+        stopped = self.wait_node(self.nodes[0], timeout_sec=timeout_sec)\n         assert stopped, \"Node %s: did not stop within the specified timeout of %s seconds\" % \\\n-                        (str(node.account), str(self.stop_timeout_sec))\n+                        (str(self.nodes[0].account), str(timeout_sec))\n \n-        self.await_event(\"IGNITE_APPLICATION_FINISHED\\\\|IGNITE_APPLICATION_BROKEN\", from_the_beginning=True,\n-                         timeout_sec=timeout_sec)\n+        self.__check_status(\"IGNITE_APPLICATION_FINISHED\", timeout=timeout_sec)\n+\n+    # pylint: disable=W0221\n+    def stop_node(self, node, clean_shutdown=True, timeout_sec=10):\n+        assert node == self.nodes[0]\n+        self.stop_async(clean_shutdown)\n+        self.await_stopped(timeout_sec)\n+\n+    def __check_status(self, desired, timeout=1):\n+        self.await_event(\"%s\\\\|IGNITE_APPLICATION_BROKEN\" % desired, timeout, from_the_beginning=True)\n+\n+        try:\n+            self.await_event(\"IGNITE_APPLICATION_BROKEN\", 1, from_the_beginning=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk3NzU3MA==", "bodyText": "falied -> failed", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486977570", "createdAt": "2020-09-11T11:15:23Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -38,33 +41,54 @@ def __init__(self, context, config, java_class_name, params=\"\", timeout_sec=60,\n         self.servicejava_class_name = servicejava_class_name\n         self.java_class_name = java_class_name\n         self.timeout_sec = timeout_sec\n-        self.stop_timeout_sec = 10\n+        self.params = params\n \n     def start(self):\n         super().start()\n \n         self.logger.info(\"Waiting for Ignite aware Application (%s) to start...\" % self.java_class_name)\n \n         self.await_event(\"Topology snapshot\", self.timeout_sec, from_the_beginning=True)\n-        self.await_event(\"IGNITE_APPLICATION_INITIALIZED\\\\|IGNITE_APPLICATION_BROKEN\", self.timeout_sec,\n-                         from_the_beginning=True)\n \n-        try:\n-            self.await_event(\"IGNITE_APPLICATION_INITIALIZED\", 1, from_the_beginning=True)\n-        except Exception:\n-            raise Exception(\"Java application execution failed. %s\" % self.extract_result(\"ERROR\")) from None\n+        self.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.timeout_sec)\n \n-    # pylint: disable=W0221\n-    def stop_node(self, node, clean_shutdown=True, timeout_sec=20):\n-        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(node.account)))\n-        node.account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown, allow_fail=True)\n+    def stop_async(self, clean_shutdown=True):\n+        \"\"\"\n+        Stops node in async way.\n+        \"\"\"\n+        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(self.nodes[0].account)))\n+        self.nodes[0].account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown,\n+                                                  allow_fail=True)\n \n-        stopped = self.wait_node(node, timeout_sec=self.stop_timeout_sec)\n+    def await_stopped(self, timeout_sec=10):\n+        \"\"\"\n+        Awaits node stop finish.\n+        \"\"\"\n+        stopped = self.wait_node(self.nodes[0], timeout_sec=timeout_sec)\n         assert stopped, \"Node %s: did not stop within the specified timeout of %s seconds\" % \\\n-                        (str(node.account), str(self.stop_timeout_sec))\n+                        (str(self.nodes[0].account), str(timeout_sec))\n \n-        self.await_event(\"IGNITE_APPLICATION_FINISHED\\\\|IGNITE_APPLICATION_BROKEN\", from_the_beginning=True,\n-                         timeout_sec=timeout_sec)\n+        self.__check_status(\"IGNITE_APPLICATION_FINISHED\", timeout=timeout_sec)\n+\n+    # pylint: disable=W0221\n+    def stop_node(self, node, clean_shutdown=True, timeout_sec=10):\n+        assert node == self.nodes[0]\n+        self.stop_async(clean_shutdown)\n+        self.await_stopped(timeout_sec)\n+\n+    def __check_status(self, desired, timeout=1):\n+        self.await_event(\"%s\\\\|IGNITE_APPLICATION_BROKEN\" % desired, timeout, from_the_beginning=True)\n+\n+        try:\n+            self.await_event(\"IGNITE_APPLICATION_BROKEN\", 1, from_the_beginning=True)\n+            raise Exception(\"Java application execution failed. %s\" % self.extract_result(\"ERROR\"))\n+        except TimeoutError:\n+            pass\n+\n+        try:\n+            self.await_event(desired, 1, from_the_beginning=True)\n+        except Exception:\n+            raise Exception(\"Java application execution falied.\") from None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4NDUwMQ==", "bodyText": "How is it used?", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486984501", "createdAt": "2020-09-11T11:31:05Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -38,33 +41,54 @@ def __init__(self, context, config, java_class_name, params=\"\", timeout_sec=60,\n         self.servicejava_class_name = servicejava_class_name\n         self.java_class_name = java_class_name\n         self.timeout_sec = timeout_sec\n-        self.stop_timeout_sec = 10\n+        self.params = params", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4NDg3Ng==", "bodyText": "Why do you add ducktests to NodeSpec?", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486984876", "createdAt": "2020-09-11T11:31:55Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_spec.py", "diffHunk": "@@ -147,6 +146,8 @@ def __init__(self, modules, **kwargs):\n         libs.append(\"log4j\")\n         libs = list(map(lambda m: self.path.module(m) + \"/*\", libs))\n \n+        libs.append(IgnitePath(DEV_BRANCH).module(\"ducktests\") + \"/*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MDc3Nw==", "bodyText": "IgniteAwareApplication::start already catch any exception and mark app as broken", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486990777", "createdAt": "2020-09-11T11:45:02Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/PreparedTxStreamer.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.processors.cache.transactions.TransactionProxyImpl;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.transactions.Transaction;\n+\n+/**\n+ *\n+ */\n+public class PreparedTxStreamer extends IgniteAwareApplication {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        final String cacheName = jsonNode.get(\"cacheName\").asText();\n+        final String attr = jsonNode.get(\"attr\").asText();\n+        final String cell = jsonNode.get(\"cell\").asText();\n+        final int txCnt = jsonNode.get(\"txCnt\").asInt();\n+\n+        markInitialized();\n+\n+        waitForActivation();\n+\n+        IgniteCache<Integer, Integer> cache = ignite.getOrCreateCache(cacheName);\n+\n+        log.info(\"Starting Prepared Txs...\");\n+\n+        Affinity<Integer> aff = ignite.affinity(cacheName);\n+\n+        int cnt = 0;\n+        int i = -1; // Negative keys to have no intersection with load.\n+\n+        while (cnt != txCnt && !terminated()) {\n+            Collection<ClusterNode> nodes = aff.mapKeyToPrimaryAndBackups(i);\n+\n+            Map<Object, Long> stat = nodes.stream().collect(\n+                Collectors.groupingBy(n -> n.attributes().get(attr), Collectors.counting()));\n+\n+            assert 1 == stat.keySet().size() :\n+                \"Partition should be located on nodes from only one cell \" +\n+                    \"[key=\" + i + \", nodes=\" + nodes.size() + \", stat=\" + stat + \"]\";\n+\n+            if (stat.containsKey(cell)) {\n+                cnt++;\n+\n+                Transaction tx = ignite.transactions().txStart();\n+\n+                cache.put(i, i);\n+\n+                try {\n+                    ((TransactionProxyImpl<?, ?>)tx).tx().prepare(true);\n+                }\n+                catch (IgniteCheckedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MzcyMA==", "bodyText": "Could you please provide a short brief of the class", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486993720", "createdAt": "2020-09-11T11:51:43Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/TxStreamer.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5MzgwNw==", "bodyText": "Could you please provide a short brief of the class", "url": "https://github.com/apache/ignite/pull/8232#discussion_r486993807", "createdAt": "2020-09-11T11:51:56Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/PreparedTxStreamer.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.processors.cache.transactions.TransactionProxyImpl;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.transactions.Transaction;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13393bba8c1bc45103b2cac8aa99cc870de284f3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37895dde5d5a7d5d1f34e9f09184321a511b8048", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/37895dde5d5a7d5d1f34e9f09184321a511b8048", "committedDate": "2020-09-14T08:10:34Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c35cadaa72cffaf1839cb45155cfd9079d1c09b", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/8c35cadaa72cffaf1839cb45155cfd9079d1c09b", "committedDate": "2020-09-14T08:16:29Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/6bc686f3af44c0c90ca6efbaccf6cd5bf8006575", "committedDate": "2020-09-14T08:24:28Z", "message": "cellular switch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTM3MjM5", "url": "https://github.com/apache/ignite/pull/8232#pullrequestreview-487537239", "createdAt": "2020-09-14T08:38:04Z", "commit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozODowNVrOHRJkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozODowNVrOHRJkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0NDU3Mg==", "bodyText": "I suppose that this should be one-lined", "url": "https://github.com/apache/ignite/pull/8232#discussion_r487744572", "createdAt": "2020-09-14T08:38:05Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/CellularTxStreamer.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Streams transactions to specified cell.\n+ */\n+public class CellularTxStreamer extends IgniteAwareApplication {\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTM5MDI2", "url": "https://github.com/apache/ignite/pull/8232#pullrequestreview-487539026", "createdAt": "2020-09-14T08:40:23Z", "commit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0MDoyM1rOHRJpwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0MDoyM1rOHRJpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0NTk4Ng==", "bodyText": "Why 10_000_000? You never use this fact in the code.", "url": "https://github.com/apache/ignite/pull/8232#discussion_r487745986", "createdAt": "2020-09-14T08:40:23Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/CellularTxStreamer.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Streams transactions to specified cell.\n+ */\n+public class CellularTxStreamer extends IgniteAwareApplication {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override public void run(JsonNode jsonNode) throws Exception {\n+        String cacheName = jsonNode.get(\"cacheName\").asText();\n+        int warmup = jsonNode.get(\"warmup\").asInt();\n+        String cell = jsonNode.get(\"cell\").asText();\n+        String attr = jsonNode.get(\"attr\").asText();\n+\n+        markInitialized();\n+\n+        waitForActivation();\n+\n+        IgniteCache<Integer, Integer> cache = ignite.getOrCreateCache(cacheName);\n+\n+        long[] max = new long[20];\n+\n+        Arrays.fill(max, -1);\n+\n+        int key = 10_000_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTQwODE4", "url": "https://github.com/apache/ignite/pull/8232#pullrequestreview-487540818", "createdAt": "2020-09-14T08:42:46Z", "commit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0Mjo0N1rOHRJvNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0Mjo0N1rOHRJvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0NzM4Mg==", "bodyText": "Use PriorityQueue (binary heap) here", "url": "https://github.com/apache/ignite/pull/8232#discussion_r487747382", "createdAt": "2020-09-14T08:42:47Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/CellularTxStreamer.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Streams transactions to specified cell.\n+ */\n+public class CellularTxStreamer extends IgniteAwareApplication {\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override public void run(JsonNode jsonNode) throws Exception {\n+        String cacheName = jsonNode.get(\"cacheName\").asText();\n+        int warmup = jsonNode.get(\"warmup\").asInt();\n+        String cell = jsonNode.get(\"cell\").asText();\n+        String attr = jsonNode.get(\"attr\").asText();\n+\n+        markInitialized();\n+\n+        waitForActivation();\n+\n+        IgniteCache<Integer, Integer> cache = ignite.getOrCreateCache(cacheName);\n+\n+        long[] max = new long[20];\n+\n+        Arrays.fill(max, -1);\n+\n+        int key = 10_000_000;\n+\n+        int cnt = 0;\n+\n+        long initTime = 0;\n+\n+        boolean record = false;\n+\n+        Affinity<Integer> aff = ignite.affinity(cacheName);\n+\n+        while (!terminated()) {\n+            key++;\n+\n+            Collection<ClusterNode> nodes = aff.mapKeyToPrimaryAndBackups(key);\n+\n+            Map<Object, Long> stat = nodes.stream().collect(\n+                Collectors.groupingBy(n -> n.attributes().get(attr), Collectors.counting()));\n+\n+            if (!stat.containsKey(cell))\n+                continue;\n+\n+            cnt++;\n+\n+            long start = System.currentTimeMillis();\n+\n+            cache.put(key, key);\n+\n+            long finish = System.currentTimeMillis();\n+\n+            long time = finish - start;\n+\n+            if (!record && cnt > warmup) {\n+                record = true;\n+\n+                initTime = System.currentTimeMillis();\n+\n+                log.info(\"Warmup finished\");\n+            }\n+\n+            if (record) {\n+                for (int i = 0; i < max.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc686f3af44c0c90ca6efbaccf6cd5bf8006575"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11eba85966002e9d60512e22b04e29e9b29a5eb1", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/11eba85966002e9d60512e22b04e29e9b29a5eb1", "committedDate": "2020-09-14T09:01:31Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef4342f2c60e05881ad2518b2eb72b53a066f617", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/ef4342f2c60e05881ad2518b2eb72b53a066f617", "committedDate": "2020-09-14T09:29:56Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec53ea598ef3fd50766899d81cfb72bf42ccfbe7", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/ec53ea598ef3fd50766899d81cfb72bf42ccfbe7", "committedDate": "2020-09-14T09:30:33Z", "message": "cellular switch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8951cc6fcc5eb92f8aa1f0d8879ff0fe17d32710", "author": {"user": {"login": "anton-vinogradov", "name": "Anton Vinogradov"}}, "url": "https://github.com/apache/ignite/commit/8951cc6fcc5eb92f8aa1f0d8879ff0fe17d32710", "committedDate": "2020-09-14T09:38:14Z", "message": "cellular switch"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3156, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}