{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDc1MTQw", "number": 8252, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyNjozMFrOEk472w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowMjo1MlrOE9BRpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTE3MDE5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyNjozMFrOHUFQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo0NTo1N1rOHXbj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxOTgxMA==", "bodyText": "Why not 149?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490819810", "createdAt": "2020-09-18T09:26:30Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -879,6 +879,16 @@\n      */\n     public static final int EVT_BASELINE_AUTO_ADJUST_AWAITING_TIME_CHANGED = 148;\n \n+    /**\n+     * Built-in event type: query execution.\n+     * <p>\n+     * NOTE: all types in range <b>from 1 to 1000 are reserved</b> for\n+     * internal Ignite events and should not be used by user-defined events.\n+     *\n+     * @see QueryExecutionEvent\n+     */\n+    public static final int EVT_QUERY_EXECUTION = 150;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNTc0Nw==", "bodyText": "I suppose events should be grouped by tens. At least the first 100 looks grouped, then we have a mess of events. May be put this event as 95 (96 and 97 are cache query events)?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490905747", "createdAt": "2020-09-18T12:10:36Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -879,6 +879,16 @@\n      */\n     public static final int EVT_BASELINE_AUTO_ADJUST_AWAITING_TIME_CHANGED = 148;\n \n+    /**\n+     * Built-in event type: query execution.\n+     * <p>\n+     * NOTE: all types in range <b>from 1 to 1000 are reserved</b> for\n+     * internal Ignite events and should not be used by user-defined events.\n+     *\n+     * @see QueryExecutionEvent\n+     */\n+    public static final int EVT_QUERY_EXECUTION = 150;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxOTgxMA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMDg1MA==", "bodyText": "Looks like 150 is ok. Really strange sequence for cache query events. Let do not touch it.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494330850", "createdAt": "2020-09-24T13:45:57Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -879,6 +879,16 @@\n      */\n     public static final int EVT_BASELINE_AUTO_ADJUST_AWAITING_TIME_CHANGED = 148;\n \n+    /**\n+     * Built-in event type: query execution.\n+     * <p>\n+     * NOTE: all types in range <b>from 1 to 1000 are reserved</b> for\n+     * internal Ignite events and should not be used by user-defined events.\n+     *\n+     * @see QueryExecutionEvent\n+     */\n+    public static final int EVT_QUERY_EXECUTION = 150;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxOTgxMA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTE3ODk5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyOTowN1rOHUFWXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToxODoxMlrOHVLE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMTIxMg==", "bodyText": "Use 0L instead.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490821212", "createdAt": "2020-09-18T09:29:07Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2MzY0NQ==", "bodyText": "Done.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r491963645", "createdAt": "2020-09-21T11:18:12Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMTIxMg=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTI0NzE0OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTo0NTo0OVrOHUGAJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToxODowN1rOHVLE0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzMTkwOQ==", "bodyText": "Please reword it , a query is not executed yet in this moment.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490831909", "createdAt": "2020-09-18T09:45:49Z", "author": {"login": "timoninmaxim"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -1085,6 +1088,17 @@ private void checkClusterState(QueryParserResult parseRes) {\n                 // Check if cluster state is valid.\n                 checkClusterState(parseRes);\n \n+                if (ctx.event().isRecordable(EVT_QUERY_EXECUTION)) {\n+                    ctx.event().record(new QueryExecutionEvent<>(\n+                        ctx.discovery().localNode(),\n+                        CacheQueryType.SQL_FIELDS.name() + \" query executed.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2MzYwMA==", "bodyText": "Reworded.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r491963600", "createdAt": "2020-09-21T11:18:07Z", "author": {"login": "SomeFire"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -1085,6 +1088,17 @@ private void checkClusterState(QueryParserResult parseRes) {\n                 // Check if cluster state is valid.\n                 checkClusterState(parseRes);\n \n+                if (ctx.event().isRecordable(EVT_QUERY_EXECUTION)) {\n+                    ctx.event().record(new QueryExecutionEvent<>(\n+                        ctx.discovery().localNode(),\n+                        CacheQueryType.SQL_FIELDS.name() + \" query executed.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzMTkwOQ=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTQyNjExOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo0MDoyOFrOHUHq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDozMzowNlrOH2haCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA==", "bodyText": "I see trigger only for SQL_FIELDS event. What about others?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490859218", "createdAt": "2020-09-18T10:40:28Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2MzU0MQ==", "bodyText": "Added.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r491963541", "createdAt": "2020-09-21T11:17:58Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2ODE5OQ==", "bodyText": "I think we should trigger only SQL_FIELDS and SQL types. Other types are not about SQL.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494968199", "createdAt": "2020-09-25T12:56:20Z", "author": {"login": "joooger"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk4MzkzOQ==", "bodyText": "But we fire event for any query, isn't it?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494983939", "createdAt": "2020-09-25T13:23:14Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwMTM1Nw==", "bodyText": "@joooger @SomeFire hi, is there some understanding?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r507901357", "createdAt": "2020-10-19T16:47:31Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg3MjM2Nw==", "bodyText": "@joooger, I removed other types as you suggested.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r526872367", "createdAt": "2020-11-19T13:17:28Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNDQzMg==", "bodyText": "I still see all types in Java Doc :)", "url": "https://github.com/apache/ignite/pull/8252#discussion_r526914432", "createdAt": "2020-11-19T14:09:14Z", "author": {"login": "joooger"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNTYzNQ==", "bodyText": "also, what about SQL type?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r526915635", "createdAt": "2020-11-19T14:10:52Z", "author": {"login": "joooger"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyNjc5Mw==", "bodyText": "Actually I don't understand why are others queries skipped? Is SCAN query different to SQL from this point of view?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r526926793", "createdAt": "2020-11-19T14:25:31Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMjQ4OA==", "bodyText": "querySql() have querySqlFields() inside, so, no additions needed.\nI'll fix docs in a few minutes.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r526932488", "createdAt": "2020-11-19T14:33:06Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA=="}, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzkxMDg2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1NzoyM1rOHXcMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MjoyOFrOHXeWRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MTI0Nw==", "bodyText": "Skipped in docs. Also, do we need info about it? It's serializable, but actually does user matter about serialization when implement it? I mean is there a real case how one can use this filter later?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494341247", "createdAt": "2020-09-24T13:57:23Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Scan query filter. */\n+    @GridToStringInclude\n+    private final IgniteBiPredicate<K, V> scanQryFilter;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable IgniteBiPredicate<K, V> scanQryFilter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDkyMQ==", "bodyText": "I made it the same as in the CacheQueryExecutedEvent.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494374921", "createdAt": "2020-09-24T14:40:24Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Scan query filter. */\n+    @GridToStringInclude\n+    private final IgniteBiPredicate<K, V> scanQryFilter;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable IgniteBiPredicate<K, V> scanQryFilter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MTI0Nw=="}, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NjUxNw==", "bodyText": "Javadoc added.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494376517", "createdAt": "2020-09-24T14:42:28Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Scan query filter. */\n+    @GridToStringInclude\n+    private final IgniteBiPredicate<K, V> scanQryFilter;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable IgniteBiPredicate<K, V> scanQryFilter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MTI0Nw=="}, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA1NTgwOnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNzoxOVrOHXdoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MjowMFrOHXeUxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDY4Nw==", "bodyText": "Remove commented code.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494364687", "createdAt": "2020-09-24T14:27:19Z", "author": {"login": "timoninmaxim"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "diffHunk": "@@ -1545,6 +1555,98 @@ private void checkSqlQueryEvents() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testQueryExecutionEvents() throws Exception {\n+        CountDownLatch execLatch = new CountDownLatch(13);\n+\n+        IgnitePredicate<Event> lsnr = evt -> {\n+            assert evt instanceof QueryExecutionEvent;\n+\n+            System.out.println(\">>> EVENT: \" + evt);\n+\n+            QueryExecutionEvent qe = (QueryExecutionEvent)evt;\n+\n+            if (SQL_FIELDS.name().equals(qe.queryType()) ||\n+                TEXT.name().equals(qe.queryType())\n+            )\n+                assertNotNull(qe.queryType() + \" query clause is empty!\", qe.clause());\n+            else\n+                assertNull(qe.queryType() + \" query clause is not empty!\", qe.clause());\n+\n+            execLatch.countDown();\n+\n+            return true;\n+        };\n+\n+        ignite().events().localListen(lsnr, EVT_QUERY_EXECUTION);\n+\n+        String cacheName = \"CACHE_NAME\";\n+\n+        CacheConfiguration<String, String> ccfg = new CacheConfiguration<>();\n+\n+        ccfg.setName(cacheName);\n+        ccfg.setIndexedTypes(String.class, String.class);\n+\n+        ClientConfiguration cc = new ClientConfiguration().setAddresses(Config.SERVER);\n+\n+        try (IgniteClient client = Ignition.startClient(cc)) {\n+            ignite().createCache(ccfg).query(new TextQuery<>(String.class, \"text\"))\n+                .getAll();\n+\n+            ignite().getOrCreateCache(ccfg).query(new SpiQuery<Integer, Integer>())\n+                .getAll();\n+\n+            ignite().getOrCreateCache(ccfg).query(new ScanQuery<>())\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"create table TEST_TABLE(key int primary key, val int)\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"insert into TEST_TABLE values (?, ?)\").setArgs(1, 1))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"update TEST_TABLE set val = ?2 where key = ?1\").setArgs(1, 2))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"select * from TEST_TABLE\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"create index idx_1 on TEST_TABLE(key)\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"drop index idx_1\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"alter table TEST_TABLE add column val2 int\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"alter table TEST_TABLE drop val2\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"drop table TEST_TABLE\"))\n+                .getAll();\n+\n+            // Currently, not supported.\n+//            client.getOrCreateCache(cacheName).query(new TextQuery<>(String.class, \"text\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NjEzNA==", "bodyText": "Done.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494376134", "createdAt": "2020-09-24T14:42:00Z", "author": {"login": "SomeFire"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "diffHunk": "@@ -1545,6 +1555,98 @@ private void checkSqlQueryEvents() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testQueryExecutionEvents() throws Exception {\n+        CountDownLatch execLatch = new CountDownLatch(13);\n+\n+        IgnitePredicate<Event> lsnr = evt -> {\n+            assert evt instanceof QueryExecutionEvent;\n+\n+            System.out.println(\">>> EVENT: \" + evt);\n+\n+            QueryExecutionEvent qe = (QueryExecutionEvent)evt;\n+\n+            if (SQL_FIELDS.name().equals(qe.queryType()) ||\n+                TEXT.name().equals(qe.queryType())\n+            )\n+                assertNotNull(qe.queryType() + \" query clause is empty!\", qe.clause());\n+            else\n+                assertNull(qe.queryType() + \" query clause is not empty!\", qe.clause());\n+\n+            execLatch.countDown();\n+\n+            return true;\n+        };\n+\n+        ignite().events().localListen(lsnr, EVT_QUERY_EXECUTION);\n+\n+        String cacheName = \"CACHE_NAME\";\n+\n+        CacheConfiguration<String, String> ccfg = new CacheConfiguration<>();\n+\n+        ccfg.setName(cacheName);\n+        ccfg.setIndexedTypes(String.class, String.class);\n+\n+        ClientConfiguration cc = new ClientConfiguration().setAddresses(Config.SERVER);\n+\n+        try (IgniteClient client = Ignition.startClient(cc)) {\n+            ignite().createCache(ccfg).query(new TextQuery<>(String.class, \"text\"))\n+                .getAll();\n+\n+            ignite().getOrCreateCache(ccfg).query(new SpiQuery<Integer, Integer>())\n+                .getAll();\n+\n+            ignite().getOrCreateCache(ccfg).query(new ScanQuery<>())\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"create table TEST_TABLE(key int primary key, val int)\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"insert into TEST_TABLE values (?, ?)\").setArgs(1, 1))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"update TEST_TABLE set val = ?2 where key = ?1\").setArgs(1, 2))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"select * from TEST_TABLE\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"create index idx_1 on TEST_TABLE(key)\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"drop index idx_1\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"alter table TEST_TABLE add column val2 int\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"alter table TEST_TABLE drop val2\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"drop table TEST_TABLE\"))\n+                .getAll();\n+\n+            // Currently, not supported.\n+//            client.getOrCreateCache(cacheName).query(new TextQuery<>(String.class, \"text\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDY4Nw=="}, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzYzNDM0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0MjozMFrOH3FxcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTozMToxNVrOH3xhTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyODMwNA==", "bodyText": "Event type and event class name look like they reflect all types of the queries (SCAN, SQL, SQL_FIELDS, CONTINUOUS, TEXT), but, in fact, only SQL queries handled.\nWe should, either rename event id and class name or throw events for all types of queries.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527528304", "createdAt": "2020-11-20T08:42:30Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjIxNg==", "bodyText": "We have CacheQueryExecutedEvent, already.\nSo, let's rename as following:\nEVT_SQL_QUERY_EXECUTION\nSqlQueryExecutionEvent", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527532216", "createdAt": "2020-11-20T08:49:34Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyODMwNA=="}, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NTA3MQ==", "bodyText": "Renamed.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r528245071", "createdAt": "2020-11-21T21:31:15Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyODMwNA=="}, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzYzODY4OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Mzo0OFrOH3F0TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTozMTo0MFrOH3xhew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTAzNg==", "bodyText": "AFAIK this is not correct secSubjId.\nWhat if SQL query executed from thin client?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527529036", "createdAt": "2020-11-20T08:43:48Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -1114,6 +1117,17 @@ private void checkClusterState(QueryParserResult parseRes) {\n                     // Check if cluster state is valid.\n                     checkClusterState(parseRes);\n \n+                    if (ctx.event().isRecordable(EVT_QUERY_EXECUTION)) {\n+                        ctx.event().record(new QueryExecutionEvent<>(\n+                            ctx.discovery().localNode(),\n+                            CacheQueryType.SQL_FIELDS.name() + \" query execution.\",\n+                            EVT_QUERY_EXECUTION,\n+                            CacheQueryType.SQL_FIELDS.name(),\n+                            newQryDesc.sql(),\n+                            newQryParams.arguments(),\n+                            ctx.localNodeId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NTExNQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r528245115", "createdAt": "2020-11-21T21:31:40Z", "author": {"login": "SomeFire"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -1114,6 +1117,17 @@ private void checkClusterState(QueryParserResult parseRes) {\n                     // Check if cluster state is valid.\n                     checkClusterState(parseRes);\n \n+                    if (ctx.event().isRecordable(EVT_QUERY_EXECUTION)) {\n+                        ctx.event().record(new QueryExecutionEvent<>(\n+                            ctx.discovery().localNode(),\n+                            CacheQueryType.SQL_FIELDS.name() + \" query execution.\",\n+                            EVT_QUERY_EXECUTION,\n+                            CacheQueryType.SQL_FIELDS.name(),\n+                            newQryDesc.sql(),\n+                            newQryParams.arguments(),\n+                            ctx.localNodeId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTAzNg=="}, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY0MDY2OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0NDoyN1rOH3F1jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTozMjowNFrOH3xhog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTM1Ng==", "bodyText": "Please, remove System.out.println from test code.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527529356", "createdAt": "2020-11-20T08:44:27Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "diffHunk": "@@ -1545,6 +1544,66 @@ private void checkSqlQueryEvents() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testClientQueryExecutedEvents() throws Exception {\n+        CountDownLatch execLatch = new CountDownLatch(9);\n+\n+        IgnitePredicate<Event> lsnr = evt -> {\n+            assert evt instanceof QueryExecutionEvent;\n+\n+            System.out.println(\">>> EVENT: \" + evt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NTE1NA==", "bodyText": "Replaced by log.info().", "url": "https://github.com/apache/ignite/pull/8252#discussion_r528245154", "createdAt": "2020-11-21T21:32:04Z", "author": {"login": "SomeFire"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "diffHunk": "@@ -1545,6 +1544,66 @@ private void checkSqlQueryEvents() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testClientQueryExecutedEvents() throws Exception {\n+        CountDownLatch execLatch = new CountDownLatch(9);\n+\n+        IgnitePredicate<Event> lsnr = evt -> {\n+            assert evt instanceof QueryExecutionEvent;\n+\n+            System.out.println(\">>> EVENT: \" + evt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTM1Ng=="}, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY0OTQ5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Njo1NVrOH3F6_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTowMDoyN1rOH3GZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDc0OA==", "bodyText": "Let's rename clause to the text.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527530748", "createdAt": "2020-11-20T08:46:55Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzODQ1Ng==", "bodyText": "It is the same as in CacheQueryExecutedEvent. I think we should keep similarity.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527538456", "createdAt": "2020-11-20T09:00:27Z", "author": {"login": "SomeFire"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDc0OA=="}, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE4OTM4OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo1OTo1OVrOH5fHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo1MToxOVrOH5lSuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDczNw==", "bodyText": "It seems to me, this Javadoc is just a copy&paste and it looks useless.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530040737", "createdAt": "2020-11-25T00:59:59Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MTg4MA==", "bodyText": "Thanks, @sk0x50!\nYour patch for this issue is welcome.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530141880", "createdAt": "2020-11-25T06:51:19Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDczNw=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE5MDE1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowMDoyM1rOH5fIIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo1MTo1N1rOH9pb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDg2NQ==", "bodyText": "Could you please provide a comprehensive description of this event?\nThe current Javadoc gives no clue on this event. Moreover, SqlQueryExecutionEvent itself does not provide any specific information too.\nAt least, it would be useful to clearly state the phase of query execution that triggers this event and etc.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530040865", "createdAt": "2020-11-25T01:00:23Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -922,6 +922,16 @@\n      */\n     public static final int EVT_CLUSTER_SNAPSHOT_FAILED = 151;\n \n+    /**\n+     * Built-in event type: query execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MjgzMA==", "bodyText": "Thanks, @sk0x50!\nYour patch for this issue is welcome.\n\nSqlQueryExecutionEvent\n\nWhat kind of specific information do you have in mind?\nFor now, we have text, type, user, args.\nIt's enough for any kind of event handling I can imagine.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530142830", "createdAt": "2020-11-25T06:53:29Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -922,6 +922,16 @@\n      */\n     public static final int EVT_CLUSTER_SNAPSHOT_FAILED = 151;\n \n+    /**\n+     * Built-in event type: query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDg2NQ=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MDQ3OA==", "bodyText": "Hello @nizhikov ,\n\nWhat kind of specific information do you have in mind?\n\nAt least, it would be useful to clearly state the phase of query execution that triggers this event.\nCurrently, this important information cannot be obtained via Javadoc. So, this is the reason for kindly asking @SomeFire (as a contributor) and @nizhikov (as a reviewer) to provide something useful instead of Query execution event. :)", "url": "https://github.com/apache/ignite/pull/8252#discussion_r532880478", "createdAt": "2020-11-30T20:23:01Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -922,6 +922,16 @@\n      */\n     public static final int EVT_CLUSTER_SNAPSHOT_FAILED = 151;\n \n+    /**\n+     * Built-in event type: query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDg2NQ=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5NDI1Ng==", "bodyText": "Perhaps, something as follows:\nThis event is triggered after a corresponding SQL query validated and before it is executed.\nUnlike {@link #EVT_CACHE_QUERY_EXECUTED}, EVT_SQL_QUERY_EXECUTION is fired only once for a request and does not relate to a specific cache.\n\nWhat do you think? Is it good enough?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r532894256", "createdAt": "2020-11-30T20:49:22Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -922,6 +922,16 @@\n      */\n     public static final int EVT_CLUSTER_SNAPSHOT_FAILED = 151;\n \n+    /**\n+     * Built-in event type: query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDg2NQ=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNDA1NQ==", "bodyText": "Sounds good", "url": "https://github.com/apache/ignite/pull/8252#discussion_r534404055", "createdAt": "2020-12-02T18:51:57Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -922,6 +922,16 @@\n      */\n     public static final int EVT_CLUSTER_SNAPSHOT_FAILED = 151;\n \n+    /**\n+     * Built-in event type: query execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDg2NQ=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE5NDk0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowMjo1MlrOH5fLCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoyOToyOVrOH5mNXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MTYxMQ==", "bodyText": "args may contain sensitive information and should be masked by *** when  IgniteSystemProperties#IGNITE_TO_STRING_INCLUDE_SENSITIVE is false.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530041611", "createdAt": "2020-11-25T01:02:52Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_SQL_QUERY_EXECUTION\n+ */\n+public class SqlQueryExecutionEvent extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query text. */\n+    private final String text;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0Mjk4Ng==", "bodyText": "Thanks. I will fix it in the nearest time.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530142986", "createdAt": "2020-11-25T06:53:53Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_SQL_QUERY_EXECUTION\n+ */\n+public class SqlQueryExecutionEvent extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query text. */\n+    private final String text;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MTYxMQ=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1Njg5Mg==", "bodyText": "Fixed with 2ed8e7c\nThanks for reporting.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530156892", "createdAt": "2020-11-25T07:29:29Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_SQL_QUERY_EXECUTION\n+ */\n+public class SqlQueryExecutionEvent extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query text. */\n+    private final String text;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MTYxMQ=="}, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2668, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}