{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTE3MzY3", "number": 7569, "title": "IGNITE-12804  SQL: ConnectionManager refactoring", "bodyText": "", "createdAt": "2020-03-25T10:53:31Z", "url": "https://github.com/apache/ignite/pull/7569", "merged": true, "mergeCommit": {"oid": "51757809bbc8719f3ab9ee4a635f7e1054c11aa4"}, "closed": true, "closedAt": "2020-04-03T08:55:42Z", "author": {"login": "tledkov-gridgain"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ0Yy4gH2gAyMzkzNTE3MzY3OmEwY2M4NDg2YmQwMjBmZDM2ODY3NTdmY2UwOGVmNGM2Y2IwZGNmMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT9AVWgFqTM4NzA3NDM2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a0cc8486bd020fd3686757fce08ef4c6cb0dcf0e", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/a0cc8486bd020fd3686757fce08ef4c6cb0dcf0e", "committedDate": "2020-03-24T15:11:01Z", "message": "IGNITE-12804: save the progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94ac31749d3fa988c89772d941728ad1c21a498", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/f94ac31749d3fa988c89772d941728ad1c21a498", "committedDate": "2020-03-25T10:23:53Z", "message": "IGNITE-12804: save the progress #2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6526fc5ab6189a1c9c503e9ab8eb9379cf5d1ec", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/e6526fc5ab6189a1c9c503e9ab8eb9379cf5d1ec", "committedDate": "2020-03-25T10:47:59Z", "message": "IGNITE-12804: fix lock tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79606e43f2ec889c5b26371793010365aab76e9f", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/79606e43f2ec889c5b26371793010365aab76e9f", "committedDate": "2020-03-25T10:52:58Z", "message": "IGNITE-12804: self review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25cb253fd8807374c0edaa3d448ff454f2876b1c", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/25cb253fd8807374c0edaa3d448ff454f2876b1c", "committedDate": "2020-03-25T15:50:43Z", "message": "Merge branch 'apache-master' into ignite-12804"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1095a45a6249105f12a6644a659555c9eb2a1129", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/1095a45a6249105f12a6644a659555c9eb2a1129", "committedDate": "2020-03-25T15:52:27Z", "message": "IGNITE-12804: fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49cb3cca41de961edffbf6142ac78ebce04c46ad", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/49cb3cca41de961edffbf6142ac78ebce04c46ad", "committedDate": "2020-03-25T17:21:46Z", "message": "IGNITE-12804: fix geo index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ac77808682fdd80f2cc1bc7c08d967dbbdec0dc", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/1ac77808682fdd80f2cc1bc7c08d967dbbdec0dc", "committedDate": "2020-03-26T08:33:24Z", "message": "IGNITE-12804: fix empty schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "366557f96dd14c6527f5e297406b7b4f2557cf5f", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/366557f96dd14c6527f5e297406b7b4f2557cf5f", "committedDate": "2020-03-26T09:11:06Z", "message": "IGNITE-12804: fixes on reduce"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "accc2de42251c62a7d7edd4484cbac0f1059fa1b", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/accc2de42251c62a7d7edd4484cbac0f1059fa1b", "committedDate": "2020-03-26T10:20:05Z", "message": "IGNITE-12804: fixes distributed join context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4878b0b57eb586122e5a23306fba4efc4502c144", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/4878b0b57eb586122e5a23306fba4efc4502c144", "committedDate": "2020-03-26T12:15:15Z", "message": "Merge branch 'apache-master' into ignite-12804"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6b134ca060631845675403a77ad1d5bfa2a4b2", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/0a6b134ca060631845675403a77ad1d5bfa2a4b2", "committedDate": "2020-03-26T12:46:57Z", "message": "IGNITE-12804: fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/8bd890f5dafa241562e5591bfd76a5a86234cfed", "committedDate": "2020-03-27T08:47:42Z", "message": "Merge branch 'apache-master' into ignite-12804"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjM2ODc2", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-383636876", "createdAt": "2020-03-30T08:34:28Z", "commit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozNDoyOFrOF9fCQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozNDoyOFrOF9fCQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxNTkzNw==", "bodyText": "Is it still actual?", "url": "https://github.com/apache/ignite/pull/7569#discussion_r400015937", "createdAt": "2020-03-30T08:34:28Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2PooledConnection.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.internal.processors.query.h2.opt.GridH2Table;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Pooled connection wrapper to use close semantic to recycle connection (return to the pool).\n+ */\n+public class H2PooledConnection implements AutoCloseable {\n+    /** */\n+    private volatile H2Connection delegate;\n+\n+    /** Connection manager. */\n+    private final ConnectionManager connMgr;\n+\n+    /** Closed (recycled) flag. */\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    /**\n+     * @param conn Connection to use.\n+     * @param connMgr Connection manager is use to recycle connection\n+     *      (connection is closed or returned to connection pool).\n+     */\n+    H2PooledConnection(H2Connection conn, ConnectionManager connMgr) {\n+        this.delegate = conn;\n+        this.connMgr = connMgr;\n+    }\n+\n+    /**\n+     * @return Schema name if schema is set, null otherwise.\n+     */\n+    public String schema() {\n+        return delegate.schema();\n+    }\n+\n+    /**\n+     * @param schema Schema name set on this connection.\n+     */\n+    public void schema(@Nullable String schema) {\n+        delegate.schema(schema);\n+    }\n+\n+    /**\n+     * @return Connection.\n+     */\n+    public Connection connection() {\n+        return delegate.connection();\n+    }\n+\n+    /**\n+     * @return Statement cache size.\n+     */\n+    public int statementCacheSize() {\n+        return delegate.statementCacheSize();\n+    }\n+\n+    /**\n+     * Prepare statement caching it if needed.\n+     *\n+     * @param sql SQL.\n+     * @return Prepared statement.\n+     */\n+    public PreparedStatement prepareStatement(String sql, byte qryFlags) throws IgniteCheckedException {\n+        return delegate.prepareStatement(sql, qryFlags);\n+    }\n+\n+    /**\n+     * Get prepared statement without caching.\n+     *\n+     * @param sql SQL.\n+     * @return Prepared statement.\n+     */\n+    public PreparedStatement prepareStatementNoCache(String sql) throws IgniteCheckedException {\n+        boolean insertHack = GridH2Table.insertHackRequired(sql);\n+\n+        if (insertHack) {\n+            GridH2Table.insertHack(true);\n+\n+            try {\n+                return delegate.prepareStatementNoCache(sql);\n+            }\n+            finally {\n+                GridH2Table.insertHack(false);\n+            }\n+        }\n+        else\n+            return delegate.prepareStatementNoCache(sql);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public String toString() {\n+        return S.toString(H2PooledConnection.class, this);\n+    }\n+\n+    /** Closes wrapped connection (return to pool or close). */\n+    @Override public void close() {\n+        assert delegate != null;\n+\n+        if (closed.compareAndSet(false, true)) {\n+            // clear thread local\n+            // H2Utils.resetSession(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjU2OTMw", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-383656930", "createdAt": "2020-03-30T09:00:44Z", "commit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowMDo0NFrOF9gCuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowMDo0NFrOF9gCuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMjQ0MQ==", "bodyText": "Javadoc?", "url": "https://github.com/apache/ignite/pull/7569#discussion_r400032441", "createdAt": "2020-03-30T09:00:44Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/QueryContext.java", "diffHunk": "@@ -28,6 +29,8 @@\n  * Thread local SQL query context which is intended to be accessible from everywhere.\n  */\n public class QueryContext {\n+    private static final ThreadLocal<QueryContext> qctxThreaded = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjYzMDc0", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-383663074", "createdAt": "2020-03-30T09:09:01Z", "commit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowOTowMVrOF9gWng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowOTowMVrOF9gWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNzUzNA==", "bodyText": "Do you mean QCTX_VARIABLE_NAME here instead of \"IGNITE_QUERY_CONTEXT\" ?\nBTW 'QCTX_VARIABLE_NAME' constant is not equals to \"IGNITE_QUERY_CONTEXT\"\nIs it a typo, I've missed smth?", "url": "https://github.com/apache/ignite/pull/7569#discussion_r400037534", "createdAt": "2020-03-30T09:09:01Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2Utils.java", "diffHunk": "@@ -437,6 +458,45 @@ public static void setupConnection(\n         s.setForceJoinOrder(enforceJoinOrder);\n         s.setJoinBatchEnabled(distributedJoins);\n         s.setLazyQueryExecution(lazy);\n+\n+        QueryContext oldCtx = (QueryContext)s.getVariable(QCTX_VARIABLE_NAME).getObject();\n+\n+        assert oldCtx == null || oldCtx == qctx : oldCtx;\n+\n+        s.setVariable(\"IGNITE_QUERY_CONTEXT\", new ValueRuntimeSimpleObject<>(qctx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjYzNTYx", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-383663561", "createdAt": "2020-03-30T09:09:42Z", "commit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowOTo0M1rOF9gYCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowOTo0M1rOF9gYCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNzg5Ng==", "bodyText": "QCTX_VARIABLE_NAME ?", "url": "https://github.com/apache/ignite/pull/7569#discussion_r400037896", "createdAt": "2020-03-30T09:09:43Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2Utils.java", "diffHunk": "@@ -437,6 +458,45 @@ public static void setupConnection(\n         s.setForceJoinOrder(enforceJoinOrder);\n         s.setJoinBatchEnabled(distributedJoins);\n         s.setLazyQueryExecution(lazy);\n+\n+        QueryContext oldCtx = (QueryContext)s.getVariable(QCTX_VARIABLE_NAME).getObject();\n+\n+        assert oldCtx == null || oldCtx == qctx : oldCtx;\n+\n+        s.setVariable(\"IGNITE_QUERY_CONTEXT\", new ValueRuntimeSimpleObject<>(qctx));\n+\n+        // Hack with thread local context is used only for H2 methods that is called without Session object.\n+        // e.g. GridH2Table.getRowCountApproximation (used only on optimization phase, after parse).\n+        QueryContext.threadLocal(qctx);\n+    }\n+\n+    /**\n+     * Clean up session for further reuse.\n+     *\n+     * @param conn Connection to use.\n+     */\n+    public static void resetSession(H2PooledConnection conn) {\n+        Session s = session(conn);\n+\n+        s.setVariable(\"IGNITE_QUERY_CONTEXT\", ValueNull.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjYzNjE1", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-383663615", "createdAt": "2020-03-30T09:09:48Z", "commit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowOTo0OFrOF9gYRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowOTo0OFrOF9gYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNzk1OQ==", "bodyText": "QCTX_VARIABLE_NAME ?", "url": "https://github.com/apache/ignite/pull/7569#discussion_r400037959", "createdAt": "2020-03-30T09:09:48Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2Utils.java", "diffHunk": "@@ -437,6 +458,45 @@ public static void setupConnection(\n         s.setForceJoinOrder(enforceJoinOrder);\n         s.setJoinBatchEnabled(distributedJoins);\n         s.setLazyQueryExecution(lazy);\n+\n+        QueryContext oldCtx = (QueryContext)s.getVariable(QCTX_VARIABLE_NAME).getObject();\n+\n+        assert oldCtx == null || oldCtx == qctx : oldCtx;\n+\n+        s.setVariable(\"IGNITE_QUERY_CONTEXT\", new ValueRuntimeSimpleObject<>(qctx));\n+\n+        // Hack with thread local context is used only for H2 methods that is called without Session object.\n+        // e.g. GridH2Table.getRowCountApproximation (used only on optimization phase, after parse).\n+        QueryContext.threadLocal(qctx);\n+    }\n+\n+    /**\n+     * Clean up session for further reuse.\n+     *\n+     * @param conn Connection to use.\n+     */\n+    public static void resetSession(H2PooledConnection conn) {\n+        Session s = session(conn);\n+\n+        s.setVariable(\"IGNITE_QUERY_CONTEXT\", ValueNull.INSTANCE);\n+    }\n+\n+    /**\n+     * @param conn Connection to use.\n+     * @return Query context.\n+     */\n+    public static QueryContext context(H2PooledConnection conn) {\n+        Session s = session(conn);\n+\n+        return context(s);\n+    }\n+\n+    /**\n+     * @param ses Session.\n+     * @return Query context.\n+     */\n+    public static QueryContext context(Session ses) {\n+        return (QueryContext)ses.getVariable(\"IGNITE_QUERY_CONTEXT\").getObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd890f5dafa241562e5591bfd76a5a86234cfed"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28afad5cd2d4ea1d88e7ca53469427c874f0d170", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/28afad5cd2d4ea1d88e7ca53469427c874f0d170", "committedDate": "2020-03-30T09:53:29Z", "message": "Merge branch 'apache-master' into ignite-12804"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "050bee79450765c960bfa82fd37a5e3c49e9b2a6", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/050bee79450765c960bfa82fd37a5e3c49e9b2a6", "committedDate": "2020-03-30T10:15:07Z", "message": "IGNITE-12804: fix review issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjQ1Njk2", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-386245696", "createdAt": "2020-04-02T09:17:03Z", "commit": {"oid": "050bee79450765c960bfa82fd37a5e3c49e9b2a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNzowM1rOF_icRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNzozOFrOF_idxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2ODkwMQ==", "bodyText": "Empty line.", "url": "https://github.com/apache/ignite/pull/7569#discussion_r402168901", "createdAt": "2020-04-02T09:17:03Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2PooledConnection.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.internal.processors.query.h2.opt.GridH2Table;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Pooled connection wrapper to use close semantic to recycle connection (return to the pool).\n+ */\n+public class H2PooledConnection implements AutoCloseable {\n+    /** */\n+    private volatile H2Connection delegate;\n+\n+    /** Connection manager. */\n+    private final ConnectionManager connMgr;\n+\n+    /** Closed (recycled) flag. */\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    /**\n+     * @param conn Connection to use.\n+     * @param connMgr Connection manager is use to recycle connection\n+     *      (connection is closed or returned to connection pool).\n+     */\n+    H2PooledConnection(H2Connection conn, ConnectionManager connMgr) {\n+        this.delegate = conn;\n+        this.connMgr = connMgr;\n+    }\n+\n+    /**\n+     * @return Schema name if schema is set, null otherwise.\n+     */\n+    public String schema() {\n+        return delegate.schema();\n+    }\n+\n+    /**\n+     * @param schema Schema name set on this connection.\n+     */\n+    public void schema(@Nullable String schema) {\n+        delegate.schema(schema);\n+    }\n+\n+    /**\n+     * @return Connection.\n+     */\n+    public Connection connection() {\n+        return delegate.connection();\n+    }\n+\n+    /**\n+     * @return Statement cache size.\n+     */\n+    public int statementCacheSize() {\n+        return delegate.statementCacheSize();\n+    }\n+\n+    /**\n+     * Prepare statement caching it if needed.\n+     *\n+     * @param sql SQL.\n+     * @return Prepared statement.\n+     */\n+    public PreparedStatement prepareStatement(String sql, byte qryFlags) throws IgniteCheckedException {\n+        return delegate.prepareStatement(sql, qryFlags);\n+    }\n+\n+    /**\n+     * Get prepared statement without caching.\n+     *\n+     * @param sql SQL.\n+     * @return Prepared statement.\n+     */\n+    public PreparedStatement prepareStatementNoCache(String sql) throws IgniteCheckedException {\n+        boolean insertHack = GridH2Table.insertHackRequired(sql);\n+\n+        if (insertHack) {\n+            GridH2Table.insertHack(true);\n+\n+            try {\n+                return delegate.prepareStatementNoCache(sql);\n+            }\n+            finally {\n+                GridH2Table.insertHack(false);\n+            }\n+        }\n+        else\n+            return delegate.prepareStatementNoCache(sql);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public String toString() {\n+        return S.toString(H2PooledConnection.class, this);\n+    }\n+\n+    /** Closes wrapped connection (return to pool or close). */\n+    @Override public void close() {\n+        assert delegate != null;\n+\n+        if (closed.compareAndSet(false, true)) {\n+             H2Utils.resetSession(this);\n+\n+            connMgr.recycle(delegate);\n+\n+            delegate = null;\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050bee79450765c960bfa82fd37a5e3c49e9b2a6"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2OTEzMg==", "bodyText": "Empty line.", "url": "https://github.com/apache/ignite/pull/7569#discussion_r402169132", "createdAt": "2020-04-02T09:17:23Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/ConcurrentStripedPool.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Concurrent pool of object based on ConcurrentLinkedDeque.\n+ */\n+public class ConcurrentStripedPool<E> implements Iterable<E> {\n+    /** Stripe pools. */\n+    private final ConcurrentLinkedQueue<E>[] stripePools;\n+\n+    /** Stripes count. */\n+    private final int stripes;\n+\n+    /** Stripe pools size (calculates fast, optimistic and approximate). */\n+    private AtomicInteger[] stripeSize;\n+\n+    /** Max pool size. */\n+    private int maxPoolSize;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param stripes Count of stripes.\n+     * @param maxPoolSize Max pool size.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public ConcurrentStripedPool(int stripes, int maxPoolSize) {\n+        this.stripes = stripes;\n+        this.maxPoolSize = maxPoolSize;\n+\n+        stripePools = new ConcurrentLinkedQueue[stripes];\n+        stripeSize = new AtomicInteger[stripes];\n+\n+        for (int i = 0; i < stripes; ++i) {\n+            stripePools[i] = new ConcurrentLinkedQueue<>();\n+            stripeSize[i] = new AtomicInteger();\n+        }\n+    }\n+\n+    /**\n+     * Pushes an element onto the pool.\n+     *\n+     * @param e the element to push\n+     * @throws NullPointerException if the specified element is null and this deque does not permit null elements\n+     * @return {@code true} if the element is returned to the pool, {@code false} if the is no space at the pool.\n+     */\n+    public boolean recycle(E e) {\n+        int idx = (int)(Thread.currentThread().getId() % stripes);\n+\n+        if (stripeSize[idx].get() > maxPoolSize)\n+            return false;\n+\n+        stripePools[idx].add(e);\n+\n+        stripeSize[idx].incrementAndGet();\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Retrieves element from pool, or returns {@code null} if the pool is empty.\n+     *\n+     * @return the  element of the pool, or {@code null} if the pool is empty.\n+     */\n+    public E borrow() {\n+        int idx = (int)(Thread.currentThread().getId() % stripes);\n+\n+        E r = stripePools[idx].poll();\n+\n+        if (r != null)\n+            stripeSize[idx].decrementAndGet();\n+\n+        return r;\n+    }\n+\n+    /**\n+     * Performs the given action for each element of the pool until all elements have been processed or the action\n+     * throws an exception. Exceptions thrown by the action are relayed to the caller.\n+     *\n+     * @param action The action to be performed for each element\n+     * @throws NullPointerException if the specified action is null\n+     */\n+    @Override public void forEach(Consumer<? super E> action) {\n+        Objects.requireNonNull(action);\n+\n+        for (int i = 0; i < stripes; ++i)\n+            stripePools[i].forEach(action);\n+    }\n+\n+    /**\n+     * Removes all of the elements from the pool..\n+     */\n+    public void clear() {\n+        for (int i = 0; i < stripes; ++i)\n+            stripePools[i].clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public @NotNull Iterator<E> iterator() {\n+        return new Iterator<E>() {\n+            int idx = 0;\n+            Iterator<E> it = stripePools[idx].iterator();\n+\n+            @Override public boolean hasNext() {\n+                if (it.hasNext())\n+                    return true;\n+\n+                idx++;\n+\n+                if (idx < stripes) {\n+                    it = stripePools[idx].iterator();\n+\n+                    return it.hasNext();\n+                }\n+                else\n+                    return false;\n+            }\n+\n+            @Override public E next() {\n+                if (it.hasNext())\n+                    return it.next();\n+\n+                idx++;\n+\n+                if (idx < stripes) {\n+                    it = stripePools[idx].iterator();\n+\n+                    return it.next();\n+                }\n+                else\n+                    throw new NoSuchElementException();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Returns a sequential {@code Stream} of the pool.\n+     *\n+     * @return a sequential {@code Stream} over the elements iof the pool.\n+     */\n+    public Stream<E> stream() {\n+        return StreamSupport.stream(spliterator(), false);\n+    }\n+\n+    /**\n+     * @param size New max pool size.\n+     */\n+    public void resize(int size) {\n+        maxPoolSize = size;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050bee79450765c960bfa82fd37a5e3c49e9b2a6"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2OTI4NA==", "bodyText": "New line.", "url": "https://github.com/apache/ignite/pull/7569#discussion_r402169284", "createdAt": "2020-04-02T09:17:38Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/QueryContext.java", "diffHunk": "@@ -28,6 +29,11 @@\n  * Thread local SQL query context which is intended to be accessible from everywhere.\n  */\n public class QueryContext {\n+    /** Thread local query context is used for API that doesn't support h2 Session:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050bee79450765c960bfa82fd37a5e3c49e9b2a6"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3885933b63142e597d69040dfa2fd7966b8aa0", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/fc3885933b63142e597d69040dfa2fd7966b8aa0", "committedDate": "2020-04-03T08:43:31Z", "message": "Merge branch 'apache-master' into ignite-12804"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a227053ee68950927379c83ab41df8ce917f8e", "author": {"user": {"login": "tledkov-gridgain", "name": "Taras Ledkov"}}, "url": "https://github.com/apache/ignite/commit/e6a227053ee68950927379c83ab41df8ce917f8e", "committedDate": "2020-04-03T08:48:40Z", "message": "IGNITE-12804: minor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDc0MzY1", "url": "https://github.com/apache/ignite/pull/7569#pullrequestreview-387074365", "createdAt": "2020-04-03T08:55:13Z", "commit": {"oid": "e6a227053ee68950927379c83ab41df8ce917f8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2787, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}