{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMjI0NDE1", "number": 8109, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToyMjowMVrOEUGNVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODowMDoxOVrOEVTa_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTA4NjkzOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToyMjowMVrOG6MeXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozODo1OFrOG7W0AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NDk3NA==", "bodyText": "Why do you use Map instead of fair JsonNode object? Now you're limited with flat structure, also user is responsible for casting value types.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463674974", "createdAt": "2020-07-31T15:22:01Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(Map<String, String> args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzOTEwMQ==", "bodyText": "+1 JsonObject seems to be more universal solution and has a potential to extend", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463939101", "createdAt": "2020-08-01T08:28:26Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(Map<String, String> args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NDk3NA=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5MjkyOA==", "bodyText": "Done", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464892928", "createdAt": "2020-08-04T08:38:58Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(Map<String, String> args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NDk3NA=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTEwMjQwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToyNjoxM1rOG6Mn0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMToyMzozNVrOG7cIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg==", "bodyText": "Why do you use base64 there? Is it a workaround to avoid escape issue?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463677392", "createdAt": "2020-07-31T15:26:13Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzOTAyMg==", "bodyText": "Yep", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463939022", "createdAt": "2020-08-01T08:27:26Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MzQyMg==", "bodyText": "Yes", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464243422", "createdAt": "2020-08-03T07:38:09Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4OTIxMg==", "bodyText": "Just use single quotes then. This is enough, check how run_tests.sh do the same:\nhttps://github.com/apache/ignite/blob/ignite-ducktape/modules/ducktests/tests/docker/run_tests.sh#L136", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464289212", "createdAt": "2020-08-03T09:09:55Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5NDc5Mw==", "bodyText": "Max, I suppose that this is more robust solution to problem. Constantly escape everything is a little bit tiresome. base64 solves this problem radically.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464294793", "createdAt": "2020-08-03T09:20:29Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3NDA1Nw==", "bodyText": "For example, JSON contains \",\" already used as a separator at ignite_aware.py because of necessary to transfer some params where only one allowed.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464874057", "createdAt": "2020-08-04T08:05:59Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MDEzNg==", "bodyText": "ok, understand.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464980136", "createdAt": "2020-08-04T11:23:35Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -82,7 +84,7 @@ def app_args(self):\n         args = self.java_class_name + \",\" + IgniteAwareApplicationService.CONFIG_FILE\n \n         if self.params != \"\":\n-            args += \",\" + self.params\n+            args += \",\" + str(base64.b64encode(json.dumps(self.params).encode(\"UTF-8\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzM5Mg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTEyMzY3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTozMjozNVrOG6M1Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0MTozMVrOG7g5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDgzMA==", "bodyText": "Looks like user_libs and service_libs should be lists and shouldn't know about colons delimeter. As colon is a part of USER_LIBS, now we have usage of the delimiter in 3 places (user_libs, service_libs, USER_LIBS)", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463680830", "createdAt": "2020-07-31T15:32:35Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1ODA5Mw==", "bodyText": "Done", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465058093", "createdAt": "2020-08-04T13:41:31Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDgzMA=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTEyNTQwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTozMzowNVrOG6M2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDoyMjozOVrOG7aYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MTEwMg==", "bodyText": "just rename _home to home and use it", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463681102", "createdAt": "2020-07-31T15:33:05Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -56,3 +56,9 @@ def script(self, script_name):\n         :return: absolute path to the specified script\n         \"\"\"\n         return os.path.join(self._home, \"bin\", script_name)\n+\n+    def home(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1MTQ1OQ==", "bodyText": "Done", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464951459", "createdAt": "2020-08-04T10:22:39Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -56,3 +56,9 @@ def script(self, script_name):\n         :return: absolute path to the specified script\n         \"\"\"\n         return os.path.join(self._home, \"bin\", script_name)\n+\n+    def home(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MTEwMg=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTE0NDYyOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTozODo0MlrOG6NCWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoyNjowNFrOG7eEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng==", "bodyText": "Why do you extract jackson jars from the AWS library? As I can see AWS isn't used in the application", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463684186", "createdAt": "2020-07-31T15:38:42Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0NDQ5MA==", "bodyText": "Because we should gain it somewhere, but it always presented as a dependency and always have the same version for all cases (set inside parent.pom)", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464244490", "createdAt": "2020-08-03T07:40:28Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4NjkwOA==", "bodyText": "Why do not keep them in pom.xml of ducktests module?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464286908", "createdAt": "2020-08-03T09:05:31Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3NTE4MQ==", "bodyText": "For every old version?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464875181", "createdAt": "2020-08-04T08:07:59Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NDU2OA==", "bodyText": "Oh, now I understand. But do we need use strict link to AWS project, as we can't guarantee that it won't be changed in future? Could we just use the find util to locate jackson jars anywhere in optional libs?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464984568", "createdAt": "2020-08-04T11:32:41Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NTQyOQ==", "bodyText": "Also there must be a comment with description of solution", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464985429", "createdAt": "2020-08-04T11:34:34Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMTEzMQ==", "bodyText": "Comment added. Can we postpone ideal resolving (locate jackson jars anywhere in optional libs) and just use AWS as source for now?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465001131", "createdAt": "2020-08-04T12:05:56Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTcxNQ==", "bodyText": "Ok, I'd think it should be part of infrastructure spec.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465011715", "createdAt": "2020-08-04T12:26:04Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py", "diffHunk": "@@ -106,7 +108,23 @@ def env(self):\n         return \"export MAIN_CLASS={main_class}; \".format(main_class=self.servicejava_class_name) + \\\n                \"export EXCLUDE_TEST_CLASSES=true; \" + \\\n                \"export IGNITE_LOG_DIR={log_dir}; \".format(log_dir=self.PERSISTENT_ROOT) + \\\n-               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*; \" % self.user_libs\n+               \"export USER_LIBS=%s:/opt/ignite-dev/modules/ducktests/target/*%s; \" % \\\n+               (self.user_libs, self.app_service_libs())\n+\n+    def app_service_libs(self):\n+        \"\"\"\n+        :return: Libs required to start IgniteAwareApplication java implementation.\n+        \"\"\"\n+        if self.version.is_dev:\n+            return \"\"\n+\n+        libs = \"\"\n+\n+        for line in self.nodes[0].account.ssh_capture(\n+                \"ls -d %s/libs/optional/ignite-aws/* | grep jackson | tr '\\n' ':' | sed 's/.$//'\" % self.path.home()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4NDE4Ng=="}, "originalCommit": {"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDE0NjY0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTozOTozOVrOG7cnEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0NjoyNlrOG7-JEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg==", "bodyText": "Is it possible to use a DTO object instead? Generics is more clear solution", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464987922", "createdAt": "2020-08-04T11:39:39Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzA4NA==", "bodyText": "It will be unique for every app, will this lead to useless classes?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465003084", "createdAt": "2020-08-04T12:09:50Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTE5Mw==", "bodyText": "Additional classes are ok. In case of complex hierarchy I'd prefer use generics (for example smth like obj.getList().get(0).getRange()) instead of ugly constructions (smth like node.get(\"list\").asArray()[0].get(\"range\").asInt()).\nDTOs make code much much clearer, also it provides sanity checks out of the box.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465011193", "createdAt": "2020-08-04T12:25:05Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2NjExOA==", "bodyText": "Not sure I've got an idea.\nCould you provide an example related to the current tests?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465066118", "createdAt": "2020-08-04T13:52:58Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5MzA2OQ==", "bodyText": "Oh, I see. I thought that JsonNode is a generic, but it's not. So, there is a choice between plain JsonNode and DTO. In favor of latter:\n\nCurrently there are not, but in one day could be complex json with nested objects and arrays. User will have to use mapper.readValue(jsonNode, DTO.class) if need it.\nIf you want change code of your app in one day and change params, there won't help from IDE for you. There is a possibility of NPE in jsonNode.get(). DTO provides checks for such situations (code fails in compile time).\nAll tests have own package, so I don't see problems with additional classes that are isolated within a package.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465093069", "createdAt": "2020-08-04T14:28:11Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5OTQ2NQ==", "bodyText": "How to share java DTO to python? Seems we should add and sync DTO couple for each application.\nHow to sync this automatically?\nSeem overcomplicated...?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465099465", "createdAt": "2020-08-04T14:36:45Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMjcyOA==", "bodyText": "I think, that we should make in the bright future a generic application, that accepts broad range of generic options to load data to cache. For example, cache name, key-value schema (binary object), range for keys, number of keys, etc.\nFor this argument DTO is a preferrable solution, I suppose. But we can implement this a little bit later as a separate task.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465112728", "createdAt": "2020-08-04T14:54:54Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExNjg4Mg==", "bodyText": "There still python, shame :( There are different approaches. Python just use dict and user is responsible for everything that is running in python code. Java could provide more strict checks.\nOk, agree, not an issue, as python won't directly use DTO object.", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465116882", "createdAt": "2020-08-04T15:00:12Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzI5OQ==", "bodyText": "Great, let's re-discuss this later", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465537299", "createdAt": "2020-08-05T07:46:26Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, "originalCommit": {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzczNzU5OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODowMDoxOVrOG7-nsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxODozMFrOG7_PZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ==", "bodyText": "Unused variable, I presume", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465545139", "createdAt": "2020-08-05T08:00:19Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "diffHunk": "@@ -40,8 +47,15 @@ public static void main(String[] args) throws Exception {\n \n         IgniteAwareApplication app = (IgniteAwareApplication)clazz.getConstructor().newInstance();\n \n-        String[] appParams = Arrays.copyOfRange(params, 1, params.length);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        ObjectReader reader = mapper.readerFor(Map.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d53817fa12ac9f6fbb999207d09cae7d599c17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NjE4NQ==", "bodyText": "Which one?", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465546185", "createdAt": "2020-08-05T08:01:57Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "diffHunk": "@@ -40,8 +47,15 @@ public static void main(String[] args) throws Exception {\n \n         IgniteAwareApplication app = (IgniteAwareApplication)clazz.getConstructor().newInstance();\n \n-        String[] appParams = Arrays.copyOfRange(params, 1, params.length);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        ObjectReader reader = mapper.readerFor(Map.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, "originalCommit": {"oid": "d6d53817fa12ac9f6fbb999207d09cae7d599c17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NjU1Mw==", "bodyText": "\"reader\" makes next line more readable ))))", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465546553", "createdAt": "2020-08-05T08:02:38Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "diffHunk": "@@ -40,8 +47,15 @@ public static void main(String[] args) throws Exception {\n \n         IgniteAwareApplication app = (IgniteAwareApplication)clazz.getConstructor().newInstance();\n \n-        String[] appParams = Arrays.copyOfRange(params, 1, params.length);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        ObjectReader reader = mapper.readerFor(Map.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, "originalCommit": {"oid": "d6d53817fa12ac9f6fbb999207d09cae7d599c17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1MDIwMg==", "bodyText": "mapper.readTree(new String(Base64.getDecoder().decode(params[2]), UTF_8))", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465550202", "createdAt": "2020-08-05T08:09:16Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "diffHunk": "@@ -40,8 +47,15 @@ public static void main(String[] args) throws Exception {\n \n         IgniteAwareApplication app = (IgniteAwareApplication)clazz.getConstructor().newInstance();\n \n-        String[] appParams = Arrays.copyOfRange(params, 1, params.length);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        ObjectReader reader = mapper.readerFor(Map.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, "originalCommit": {"oid": "d6d53817fa12ac9f6fbb999207d09cae7d599c17"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NTMwMQ==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465555301", "createdAt": "2020-08-05T08:18:30Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "diffHunk": "@@ -40,8 +47,15 @@ public static void main(String[] args) throws Exception {\n \n         IgniteAwareApplication app = (IgniteAwareApplication)clazz.getConstructor().newInstance();\n \n-        String[] appParams = Arrays.copyOfRange(params, 1, params.length);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        ObjectReader reader = mapper.readerFor(Map.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, "originalCommit": {"oid": "d6d53817fa12ac9f6fbb999207d09cae7d599c17"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2785, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}