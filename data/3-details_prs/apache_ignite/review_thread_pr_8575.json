{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzI4MDc5", "number": 8575, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToxMjoxNFrOFFiE2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzowMzozNlrOFUDREA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzQ1NDk3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToxMjoxNFrOIGFoKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjowMTo0MFrOIGHdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NDU3MA==", "bodyText": "make it private", "url": "https://github.com/apache/ignite/pull/8575#discussion_r543254570", "createdAt": "2020-12-15T11:12:14Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -351,3 +351,25 @@ def __dump_netfilter_settings(node):\n         Reads current netfilter settings on the node for debugging purposes.\n         \"\"\"\n         return str(node.account.ssh_client.exec_command(\"sudo iptables -L -n\")[1].read(), sys.getdefaultencoding())\n+\n+    def restart(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9824b2ab177519f2b2993d3f979ce282151f2f2f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4NDUwMw==", "bodyText": "made a private rotate_log", "url": "https://github.com/apache/ignite/pull/8575#discussion_r543284503", "createdAt": "2020-12-15T12:01:40Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -351,3 +351,25 @@ def __dump_netfilter_settings(node):\n         Reads current netfilter settings on the node for debugging purposes.\n         \"\"\"\n         return str(node.account.ssh_client.exec_command(\"sudo iptables -L -n\")[1].read(), sys.getdefaultencoding())\n+\n+    def restart(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NDU3MA=="}, "originalCommit": {"oid": "9824b2ab177519f2b2993d3f979ce282151f2f2f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzQ2NTEyOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToxNDozNVrOIGFt_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1Njo1NlrOIGHSWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NjA2MQ==", "bodyText": "Use grep with full pattern patching, smth like \"^console_?[0-9]*.log$\". As string \"log\" may match different log files.\nAlternative is using service counter variable that incremented within restart method.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r543256061", "createdAt": "2020-12-15T11:14:35Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -351,3 +351,25 @@ def __dump_netfilter_settings(node):\n         Reads current netfilter settings on the node for debugging purposes.\n         \"\"\"\n         return str(node.account.ssh_client.exec_command(\"sudo iptables -L -n\")[1].read(), sys.getdefaultencoding())\n+\n+    def restart(self):\n+        \"\"\"\n+        Restart ignite cluster without cleaning.\n+        \"\"\"\n+        self.stop()\n+        self.rotate_log()\n+        self.start(clean=False)\n+\n+    def rotate_log(self):\n+        \"\"\"\n+        Rotate log file.\n+        \"\"\"\n+        new_log_file = self.STDOUT_STDERR_CAPTURE.replace('.log', '_$N.log')\n+\n+        for node in self.nodes:\n+            node.account.ssh(f'if [ -e {self.STDOUT_STDERR_CAPTURE} ];'\n+                             f'then '\n+                             f'cd {self.LOGS_DIR};'\n+                             f'N=`ls | grep log | wc -l`;'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9824b2ab177519f2b2993d3f979ce282151f2f2f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4MTc1Mw==", "bodyText": "when starting different services on the same nodes (for example, when testing the PDS), we will not be able to use counter the service.\nSo I think the counter is a bad idea.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r543281753", "createdAt": "2020-12-15T11:56:56Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -351,3 +351,25 @@ def __dump_netfilter_settings(node):\n         Reads current netfilter settings on the node for debugging purposes.\n         \"\"\"\n         return str(node.account.ssh_client.exec_command(\"sudo iptables -L -n\")[1].read(), sys.getdefaultencoding())\n+\n+    def restart(self):\n+        \"\"\"\n+        Restart ignite cluster without cleaning.\n+        \"\"\"\n+        self.stop()\n+        self.rotate_log()\n+        self.start(clean=False)\n+\n+    def rotate_log(self):\n+        \"\"\"\n+        Rotate log file.\n+        \"\"\"\n+        new_log_file = self.STDOUT_STDERR_CAPTURE.replace('.log', '_$N.log')\n+\n+        for node in self.nodes:\n+            node.account.ssh(f'if [ -e {self.STDOUT_STDERR_CAPTURE} ];'\n+                             f'then '\n+                             f'cd {self.LOGS_DIR};'\n+                             f'N=`ls | grep log | wc -l`;'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NjA2MQ=="}, "originalCommit": {"oid": "9824b2ab177519f2b2993d3f979ce282151f2f2f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzM3NTU3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTowNzo0NFrOIMKjwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjoxMzo0MFrOIMr87g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNjgxNw==", "bodyText": "why \"j\" ? :)\nwhy \"<=\" ?\nany reason to specify \"L\"?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549626817", "createdAt": "2020-12-29T09:07:44Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();\n+\n+        try (IgniteDataStreamer<UUID, byte[]> dataStreamer = ignite.dataStreamer(cacheName)) {\n+            for (long j = 0L; j <= size; j++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MzkzNA==", "bodyText": "set \"i\"\nset \"<\"\nuse \"int\"\nfixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550173934", "createdAt": "2020-12-30T12:13:40Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();\n+\n+        try (IgniteDataStreamer<UUID, byte[]> dataStreamer = ignite.dataStreamer(cacheName)) {\n+            for (long j = 0L; j <= size; j++)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNjgxNw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzM3ODEyOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTowODozOFrOIMKlEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNToxMTozOFrOIX7KZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzE1Mg==", "bodyText": "what is \"size\" when we have \"dataSize\"?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549627152", "createdAt": "2020-12-29T09:08:38Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1MTA2Mw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555151063", "createdAt": "2021-01-11T15:56:25Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzE1Mg=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk1NzQ3Ng==", "bodyText": "On, now we have \"amount\". Amount of what?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561957476", "createdAt": "2021-01-21T15:11:38Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzE1Mg=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzM4Mzk5OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToxMTozMFrOIMKoVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODozNjowNFrOIYaUjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzk5MQ==", "bodyText": "what is the reason to have a dedicated \"initialized\" state?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549627991", "createdAt": "2020-12-29T09:11:30Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc3OQ==", "bodyText": "File \"/opt/ignite-dev/modules/ducktests/tests/ignitetest/tests/snapshot_test.py\", line 87, in snapshot_test\nloader.run()\nFile \"/usr/local/lib/python3.7/dist-packages/ducktape/services/service.py\", line 322, in run\nself.start()\nFile \"/opt/ignite-dev/modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py\", line 85, in start\nself.await_started()\nFile \"/opt/ignite-dev/modules/ducktests/tests/ignitetest/services/ignite_app.py\", line 51, in await_started\nself.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.startup_timeout_sec)\nneed \"initialized\" state", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550162779", "createdAt": "2020-12-30T11:32:14Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzk5MQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk1ODg3Nw==", "bodyText": "Line 87 is empty.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561958877", "createdAt": "2021-01-21T15:13:25Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzk5MQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2MjE2NA==", "bodyText": "Let me ask again,\nwhat is the reason to have dedicated \"initialized\" and \"finished\" states?\nWhy not only the markSyncExecutionComplete() used?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561962164", "createdAt": "2021-01-21T15:17:26Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzk5MQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ2Nzk4Mg==", "bodyText": "if something goes wrong, during operation, then we will consider it during initialization, I think this is not correct", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562467982", "createdAt": "2021-01-22T08:36:04Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {\n+    /** {@inheritDoc} */\n+    @Override public void run(JsonNode jNode) {\n+        String cacheName = jNode.get(\"cacheName\").asText();\n+\n+        long size = jNode.get(\"size\").asLong();\n+\n+        int dataSize = jNode.get(\"dataSize\").asInt();\n+\n+        markInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzk5MQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzM5OTM4OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToxNzo1N1rOIMKw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNDowMTo1MlrOIZoPEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMDE4NA==", "bodyText": "\"Node\" param description missed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549630184", "createdAt": "2020-12-29T09:17:57Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3NDA0OQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550174049", "createdAt": "2020-12-30T12:14:07Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMDE4NA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2Mzc0MA==", "bodyText": "\"Node where will be dump file\"\nCould you please specify an action in this sentence?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561963740", "createdAt": "2021-01-21T15:19:22Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMDE4NA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc0NDUzMQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r563744531", "createdAt": "2021-01-25T14:01:52Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMDE4NA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQwMDA2OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToxODoxNlrOIMKxTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjoxNDoxNlrOIMr9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMDI4Nw==", "bodyText": "params description missed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549630287", "createdAt": "2020-12-29T09:18:16Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3NDA4Nw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550174087", "createdAt": "2020-12-30T12:14:16Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMDI4Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQzODA3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTozNTo0M1rOIMLGzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNDoxMToxOVrOIZoo0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTc4OQ==", "bodyText": "any real reason to have sync_mode param when it's always true in code?\nany reason to replace an explicit call of await_snapshot by this param?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549635789", "createdAt": "2020-12-29T09:35:43Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzMTAzMg==", "bodyText": "in the following tests, will need to kill the node while taking a snapshot", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550131032", "createdAt": "2020-12-30T10:41:42Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTc4OQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2NzQ0Mg==", "bodyText": "Could you please answer my questions?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561967442", "createdAt": "2021-01-21T15:24:03Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTc4OQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc1MTEyMQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r563751121", "createdAt": "2021-01-25T14:11:19Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTc4OQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQzOTIwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTozNjowOFrOIMLHWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo1NzowNFrOIRbyLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTkzMQ==", "bodyText": "success execution assert missed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549635931", "createdAt": "2020-12-29T09:36:08Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1MTkxOQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555151919", "createdAt": "2021-01-11T15:57:04Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTkzMQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQ3OTM3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTo1NDozN1rOIMLeCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODo0MzowM1rOIYajvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MTczOA==", "bodyText": "do we really should check the condition \"(0 < start_time < end_time)\" here?\nshould we have an assert here \"(snapshot_name == name)\" instead of check since LastSnapshotName MUST show the last started snapshot name?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549641738", "createdAt": "2020-12-29T09:54:37Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNjM2OA==", "bodyText": "you suggest removing 0 (start_time < end_time)?\n\n\nif we take 2 snapshots in succession, we may will get an exception", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549806368", "createdAt": "2020-12-29T18:34:09Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MTczOA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk3NDg4OQ==", "bodyText": "Suggest answering the question.\nThat's the exact situation I'm talking about. Another snapshot in progress means we doing something wrong.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561974889", "createdAt": "2021-01-21T15:32:51Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MTczOA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ3MTg2OQ==", "bodyText": "LastSnapshotName displays the name of the last snapshot on a node from all nodes, if we go to the wrong node, we can get information about the previous snapshot, then the snapshot name may be different", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562471869", "createdAt": "2021-01-22T08:43:03Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MTczOA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQ5OTYyOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowMzozN1rOIMLpQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMTo0OVrOIMrQyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NDYwOQ==", "bodyText": "in java code it looks like LongMetric startTime = mreg0.findMetric(\"LastSnapshotStartTime\");\nwhy it looks so strange - \"int(list(...)[0])\" in python?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549644609", "createdAt": "2020-12-29T10:03:37Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjYzNQ==", "bodyText": "mbean.LastSnapshotEndTime is python generator -> str\nwe may get next value with next()\nthen it will look like this\nint(next(mbean.LastSnapshotEndTime))", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550162635", "createdAt": "2020-12-30T11:31:49Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NDYwOQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUwMjY0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowNDo0MFrOIMLqyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMDo1OToxOFrOIW449A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTAwMw==", "bodyText": "reason to have slept here?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549645003", "createdAt": "2020-12-29T10:04:40Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNTIwNg==", "bodyText": "so as not to take up CPU time", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549805206", "createdAt": "2020-12-29T18:29:55Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTAwMw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg3MTY2OA==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r560871668", "createdAt": "2021-01-20T10:59:18Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTAwMw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUwMzc3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowNTowN1rOIMLrbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNDoxNDoxM1rOIZowoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTE2NA==", "bodyText": "it seems we have all the chances to gain \"name\" from one snapshot, \"start_time\" from another, and \"err_msg\" from the third", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549645164", "createdAt": "2020-12-29T10:05:07Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)\n+\n+        raise TimeoutError(f'LastSnapshotName={name}, '\n+                           f'LastSnapshotStartTime={start_time}, '\n+                           f'LastSnapshotEndTime={end_time}, '\n+                           f'LastSnapshotErrorMessage={err_msg}')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNDgwNA==", "bodyText": "cannot run multiple snapshot operations", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549804804", "createdAt": "2020-12-29T18:28:36Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)\n+\n+        raise TimeoutError(f'LastSnapshotName={name}, '\n+                           f'LastSnapshotStartTime={start_time}, '\n+                           f'LastSnapshotEndTime={end_time}, '\n+                           f'LastSnapshotErrorMessage={err_msg}')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTE2NA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk4ODI5Mg==", "bodyText": "Did not understand the answer.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561988292", "createdAt": "2021-01-21T15:49:19Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)\n+\n+        raise TimeoutError(f'LastSnapshotName={name}, '\n+                           f'LastSnapshotStartTime={start_time}, '\n+                           f'LastSnapshotEndTime={end_time}, '\n+                           f'LastSnapshotErrorMessage={err_msg}')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTE2NA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc1MzEyMA==", "bodyText": "fixed error message", "url": "https://github.com/apache/ignite/pull/8575#discussion_r563753120", "createdAt": "2021-01-25T14:14:13Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -127,6 +131,65 @@ def tx_kill(self, **kwargs):\n         res = self.__parse_tx_list(output)\n         return res if res else output\n \n+    def validate_indexes(self):\n+        \"\"\"\n+        Validate indexes.\n+        \"\"\"\n+        data = self.__run(\"--cache validate_indexes\")\n+\n+        assert ('no issues found.' in data), data\n+\n+    def idle_verify(self):\n+        \"\"\"\n+        Idle verify.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify\")\n+\n+        assert ('idle_verify check has finished, no conflicts have been found.' in data), data\n+\n+    def idle_verify_dump(self, node=None):\n+        \"\"\"\n+        Idle verify dump.\n+        \"\"\"\n+        data = self.__run(\"--cache idle_verify --dump\", node=node)\n+\n+        assert ('VisorIdleVerifyDumpTask successfully' in data), data\n+\n+        return re.search(r'/.*.txt', data).group(0)\n+\n+    def snapshot_create(self, snapshot_name: str, sync_mode: bool = True, timeout_sec: int = 60):\n+        \"\"\"\n+        Create snapshot.\n+        \"\"\"\n+        res = self.__run(f\"--snapshot create {snapshot_name}\")\n+\n+        if (\"Command [SNAPSHOT] finished with code: 0\" in res) & sync_mode:\n+            self.await_snapshot(snapshot_name, timeout_sec)\n+\n+    def await_snapshot(self, snapshot_name: str, timeout_sec=60):\n+        \"\"\"\n+        Waiting for the snapshot to complete.\n+        \"\"\"\n+        delta_time = datetime.now() + timedelta(seconds=timeout_sec)\n+\n+        while datetime.now() < delta_time:\n+            for node in self._cluster.nodes:\n+                mbean = JmxClient(node).find_mbean('snapshot')\n+                start_time = int(list(mbean.LastSnapshotStartTime)[0])\n+                end_time = int(list(mbean.LastSnapshotEndTime)[0])\n+                err_msg = list(mbean.LastSnapshotErrorMessage)[0]\n+                name = list(mbean.LastSnapshotName)[0]\n+\n+                if (snapshot_name == name) and (0 < start_time < end_time) and (err_msg == ''):\n+                    return\n+\n+            time.sleep(1)\n+\n+        raise TimeoutError(f'LastSnapshotName={name}, '\n+                           f'LastSnapshotStartTime={start_time}, '\n+                           f'LastSnapshotEndTime={end_time}, '\n+                           f'LastSnapshotErrorMessage={err_msg}')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTE2NA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUwNzkyOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowNjo0OFrOIMLttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODo1NDo1MlrOIYa-Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTc1MA==", "bodyText": "what is the difference with \"node.account.externally_routable_ip\" used before?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549645750", "createdAt": "2020-12-29T10:06:48Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -248,12 +311,15 @@ def __parse_cluster_state(output):\n \n         return ClusterState(state=state, topology_version=topology, baseline=baseline)\n \n-    def __run(self, cmd):\n-        node = random.choice(self.__alives())\n+    def __run(self, cmd, node=None):\n+        if node is None:\n+            node = random.choice(self.__alives())\n \n         self.logger.debug(f\"Run command {cmd} on node {node.name}\")\n \n-        raw_output = node.account.ssh_capture(self.__form_cmd(node, cmd), allow_fail=True)\n+        node_ip = socket.gethostbyname(node.account.hostname)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY5NzUzMQ==", "bodyText": "node.account.externally_routable_ip is hostname\nfor the dump file to be generated on a specific node, we must pass ip", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549697531", "createdAt": "2020-12-29T13:06:07Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -248,12 +311,15 @@ def __parse_cluster_state(output):\n \n         return ClusterState(state=state, topology_version=topology, baseline=baseline)\n \n-    def __run(self, cmd):\n-        node = random.choice(self.__alives())\n+    def __run(self, cmd, node=None):\n+        if node is None:\n+            node = random.choice(self.__alives())\n \n         self.logger.debug(f\"Run command {cmd} on node {node.name}\")\n \n-        raw_output = node.account.ssh_capture(self.__form_cmd(node, cmd), allow_fail=True)\n+        node_ip = socket.gethostbyname(node.account.hostname)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTc1MA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk5MjU5NA==", "bodyText": "node.account.externally_routable_ip is hostname\n\nso, what the difference between \"hostname\" (node.account.externally_routable_ip) and node.account.hostname?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r561992594", "createdAt": "2021-01-21T15:54:43Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -248,12 +311,15 @@ def __parse_cluster_state(output):\n \n         return ClusterState(state=state, topology_version=topology, baseline=baseline)\n \n-    def __run(self, cmd):\n-        node = random.choice(self.__alives())\n+    def __run(self, cmd, node=None):\n+        if node is None:\n+            node = random.choice(self.__alives())\n \n         self.logger.debug(f\"Run command {cmd} on node {node.name}\")\n \n-        raw_output = node.account.ssh_capture(self.__form_cmd(node, cmd), allow_fail=True)\n+        node_ip = socket.gethostbyname(node.account.hostname)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTc1MA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ3ODY3MA==", "bodyText": "example:\nnode.account.hostname == ducker02\nnode.account.externally_routable_ip == ducker02\nwe need to use an ip address: 172.22.0.3", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562478670", "createdAt": "2021-01-22T08:54:52Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/control_utility.py", "diffHunk": "@@ -248,12 +311,15 @@ def __parse_cluster_state(output):\n \n         return ClusterState(state=state, topology_version=topology, baseline=baseline)\n \n-    def __run(self, cmd):\n-        node = random.choice(self.__alives())\n+    def __run(self, cmd, node=None):\n+        if node is None:\n+            node = random.choice(self.__alives())\n \n         self.logger.debug(f\"Run command {cmd} on node {node.name}\")\n \n-        raw_output = node.account.ssh_capture(self.__form_cmd(node, cmd), allow_fail=True)\n+        node_ip = socket.gethostbyname(node.account.hostname)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NTc1MA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUwOTcwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/jmx_utils.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowNzoyOFrOIMLuug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo1ODoyNVrOIRb5HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjAxMA==", "bodyText": "please explain the changes", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549646010", "createdAt": "2020-12-29T10:07:28Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/jmx_utils.py", "diffHunk": "@@ -76,7 +76,7 @@ def find_mbean(self, pattern, domain='org.apache'):\n         :param domain: Domain of MBean\n         :return: JmxMBean instance\n         \"\"\"\n-        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '%s'\" \\\n+        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '.*%s$'\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcwMDQyOQ==", "bodyText": "we can pass a short bean name(ZookeeperDiscoverySpi) instead of\n\ngroup = SPIs, name = ZookeeperDiscoverySpi", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549700429", "createdAt": "2020-12-29T13:15:15Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/jmx_utils.py", "diffHunk": "@@ -76,7 +76,7 @@ def find_mbean(self, pattern, domain='org.apache'):\n         :param domain: Domain of MBean\n         :return: JmxMBean instance\n         \"\"\"\n-        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '%s'\" \\\n+        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '.*%s$'\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjAxMA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ1MA==", "bodyText": "I found it more convenient. undo the change?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549810450", "createdAt": "2020-12-29T18:48:23Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/jmx_utils.py", "diffHunk": "@@ -76,7 +76,7 @@ def find_mbean(self, pattern, domain='org.apache'):\n         :param domain: Domain of MBean\n         :return: JmxMBean instance\n         \"\"\"\n-        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '%s'\" \\\n+        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '.*%s$'\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjAxMA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1MzY5Mg==", "bodyText": "returned", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555153692", "createdAt": "2021-01-11T15:58:25Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/utils/jmx_utils.py", "diffHunk": "@@ -76,7 +76,7 @@ def find_mbean(self, pattern, domain='org.apache'):\n         :param domain: Domain of MBean\n         :return: JmxMBean instance\n         \"\"\"\n-        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '%s'\" \\\n+        cmd = \"echo $'open %s\\\\n beans -d %s \\\\n close' | %s | grep -o '.*%s$'\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjAxMA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxMzMwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDowOTowMFrOIMLw0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo1OToxNFrOIRb9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjU0NQ==", "bodyText": "should this be defined at IgnitePathAware?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549646545", "createdAt": "2020-12-29T10:09:00Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -38,10 +38,47 @@ def __init__(self, context, config, num_nodes, jvm_opts=None, startup_timeout_se\n         super().__init__(context, config, num_nodes, startup_timeout_sec, shutdown_timeout_sec, modules=modules,\n                          jvm_opts=jvm_opts)\n \n+    @property\n+    def database_dir(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1NDczNQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555154735", "createdAt": "2021-01-11T15:59:14Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -38,10 +38,47 @@ def __init__(self, context, config, num_nodes, jvm_opts=None, startup_timeout_se\n         super().__init__(context, config, num_nodes, startup_timeout_sec, shutdown_timeout_sec, modules=modules,\n                          jvm_opts=jvm_opts)\n \n+    @property\n+    def database_dir(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjU0NQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxNTc3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/suites/slow_suite.yml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxMDoxMlrOIMLySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMzoxOTo0NFrOIgLXGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjkyMQ==", "bodyText": "why this suite is slow? how about to make it fast?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549646921", "createdAt": "2020-12-29T10:10:12Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/suites/slow_suite.yml", "diffHunk": "@@ -15,3 +15,6 @@\n \n discovery:\n   - ../discovery_test.py\n+\n+snapshot:\n+  - ../snapshot_test.py", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwMzYxNQ==", "bodyText": "index_validate and idle_verify take a long time\n01:03:33  test_id:    ignitetest.tests.snapshot_test.SnapshotTest.snapshot_test.ignite_version=2.9.0\n01:03:33  status:     PASS\n01:03:33  run time:   4 minutes 56.490 seconds\n01:03:33  test_id:    ignitetest.tests.snapshot_test.SnapshotTest.snapshot_test.ignite_version=dev\n01:03:33  status:     PASS\n01:03:33  run time:   23 minutes 57.322 seconds", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549803615", "createdAt": "2020-12-29T18:24:36Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/suites/slow_suite.yml", "diffHunk": "@@ -15,3 +15,6 @@\n \n discovery:\n   - ../discovery_test.py\n+\n+snapshot:\n+  - ../snapshot_test.py", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjkyMQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAwMTczNg==", "bodyText": "Do we really need so long checks?\nWhy it takes so long? Do we check snapshots properly?\nWhy Dev is so slow?\n@Mmuzaf Could you please check this?\nSeems we have Dev 5 times slower than 2.9.0", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562001736", "createdAt": "2021-01-21T16:05:59Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/suites/slow_suite.yml", "diffHunk": "@@ -15,3 +15,6 @@\n \n discovery:\n   - ../discovery_test.py\n+\n+snapshot:\n+  - ../snapshot_test.py", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjkyMQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU4NjAxMA==", "bodyText": "long execution due to checking the indexes:\n2021-01-22 14:41:10,996 - remoteaccount - _log - lineno:160]: ducker@tkles-pprb00277.vm.esrt.cloud.sbrf.ru: Running ssh command: /opt/ignite-dev/bin/control.sh --host 10.53.211.13 --cache validate_indexes\n2021-01-22 14:53:49,009 - control_utility - __run - lineno:331]: Output of command --cache validate_indexes on node tkles-pprb00277.vm.esrt.cloud.sbrf.ru, exited with code 0, is Control utility [ver. 2.10.0-SNAPSHOT#20210122-sha1:DEV]\n2021 Copyright(C) Apache Software Foundation\nUser: ducker\nTime: 2021-01-22T14:41:12.376\nCommand [CACHE] started\nArguments: --host 10.53.211.13 --cache validate_indexes \n--------------------------------------------------------------------------------\nno issues found.\n\nCommand [CACHE] finished with code: 0\nControl utility has completed execution at: 2021-01-22T14:53:48.986\nExecution time: 756610 ms", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562586010", "createdAt": "2021-01-22T12:02:30Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/suites/slow_suite.yml", "diffHunk": "@@ -15,3 +15,6 @@\n \n discovery:\n   - ../discovery_test.py\n+\n+snapshot:\n+  - ../snapshot_test.py", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjkyMQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDYxMTQ4Mg==", "bodyText": "fixed the classpath\n02:06:30  test_id:    ignitetest.tests.snapshot_test.SnapshotTest.snapshot_test.ignite_version=2.9.0\n02:06:30  status:     PASS\n02:06:30  run time:   5 minutes 17.370 seconds\n02:06:30  --------------------------------------------------------------------------------\n02:06:30  test_id:    ignitetest.tests.snapshot_test.SnapshotTest.snapshot_test.ignite_version=dev\n02:06:30  status:     PASS\n02:06:30  run time:   5 minutes 23.372 seconds\n02:06:30  --------------------------------------------------------------------------------", "url": "https://github.com/apache/ignite/pull/8575#discussion_r570611482", "createdAt": "2021-02-04T23:19:44Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/suites/slow_suite.yml", "diffHunk": "@@ -15,3 +15,6 @@\n \n discovery:\n   - ../discovery_test.py\n+\n+snapshot:\n+  - ../snapshot_test.py", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NjkyMQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxNzEzOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxMDo1MVrOIMLzGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODo1NzoyM1rOIYbEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzEzMA==", "bodyText": "Why not LAST version used?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549647130", "createdAt": "2020-12-29T10:10:51Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1NDkyMQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555154921", "createdAt": "2021-01-11T15:59:22Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzEzMA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAwNDcwMg==", "bodyText": "Why LATEST_2_9?\nWill it be latest after the 2.10 release?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562004702", "createdAt": "2021-01-21T16:09:53Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzEzMA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ4MDI4Mw==", "bodyText": "I think that after the release of 2.10\nit will need to be added to the test, because 2.9 should also be tested", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562480283", "createdAt": "2021-01-22T08:57:23Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzEzMA=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUxODkyOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxMTo0NFrOIML0GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMjoxNzozN1rOIMsBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzM4NQ==", "bodyText": "used only as default at @cluster", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549647385", "createdAt": "2020-12-29T10:11:44Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3NTAwOA==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550175008", "createdAt": "2020-12-30T12:17:37Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0NzM4NQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUyNzAwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxNToyMVrOIML4lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjowMDoyNlrOIRcDJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODUzMw==", "bodyText": "any reason to have this variable?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549648533", "createdAt": "2020-12-29T10:15:21Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1NjI2Mg==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555156262", "createdAt": "2021-01-11T16:00:26Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODUzMw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUyOTIzOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxNjoxNlrOIML5wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNDoxNDo0NVrOIZox_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODgzMg==", "bodyText": "any reason to have this variable?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549648832", "createdAt": "2020-12-29T10:16:16Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcwMDg5OA==", "bodyText": "we can run this test by passing a parameter through globals", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549700898", "createdAt": "2020-12-29T13:16:35Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODgzMg=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAwODY4Mg==", "bodyText": "any reason to have a dedicated variable?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562008682", "createdAt": "2021-01-21T16:15:19Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODgzMg=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc1MzQ3MA==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r563753470", "createdAt": "2021-01-25T14:14:45Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0ODgzMg=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUzMjM0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxNzo0NVrOIML7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwOTowNToyNlrOIYbWog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTI4Ng==", "bodyText": "why it may take so long time to startup?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549649286", "createdAt": "2020-12-29T10:17:45Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwMDc3MA==", "bodyText": "for local tests like in PmeFreeSwitchTest", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549800770", "createdAt": "2020-12-29T18:14:51Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTI4Ng=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAwOTg4MQ==", "bodyText": "Could you please answer the question I asked?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562009881", "createdAt": "2021-01-21T16:16:46Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTI4Ng=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ4NDg5OA==", "bodyText": "Startup takes the same amount of time as in other tests with PDS.\nTime increased for local startup.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562484898", "createdAt": "2021-01-22T09:05:26Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTI4Ng=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUzNjIxOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoxOToyNlrOIML9qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjowMDo1NlrOIRcEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTgzNQ==", "bodyText": "why it is assigned here but the next code line does not use it?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549649835", "createdAt": "2020-12-29T10:19:26Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)\n+        service.start()\n+\n+        control_utility = ControlUtility(service, self.test_context)\n+        control_utility.activate()\n+\n+        client_config = IgniteConfiguration(\n+            client_mode=True,\n+            version=IgniteVersion(ignite_version),\n+            discovery_spi=from_ignite_cluster(service),\n+        )\n+\n+        loader = IgniteApplicationService(\n+            self.test_context,\n+            client_config,\n+            java_class_name=\"org.apache.ignite.internal.ducktest.tests.snapshot_test.UuidDataLoaderApplication\",\n+            params={\n+                \"cacheName\": self.CACHE_NAME,\n+                \"size\": 512 * 1024,\n+                \"dataSize\": 1024\n+            },\n+            startup_timeout_sec=180,\n+            shutdown_timeout_sec=300\n+        )\n+\n+        loader.run()\n+\n+        node = service.nodes[0]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwMTUxMQ==", "bodyText": "so that the work of the control utility was in one block, redo it?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549801511", "createdAt": "2020-12-29T18:17:11Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)\n+        service.start()\n+\n+        control_utility = ControlUtility(service, self.test_context)\n+        control_utility.activate()\n+\n+        client_config = IgniteConfiguration(\n+            client_mode=True,\n+            version=IgniteVersion(ignite_version),\n+            discovery_spi=from_ignite_cluster(service),\n+        )\n+\n+        loader = IgniteApplicationService(\n+            self.test_context,\n+            client_config,\n+            java_class_name=\"org.apache.ignite.internal.ducktest.tests.snapshot_test.UuidDataLoaderApplication\",\n+            params={\n+                \"cacheName\": self.CACHE_NAME,\n+                \"size\": 512 * 1024,\n+                \"dataSize\": 1024\n+            },\n+            startup_timeout_sec=180,\n+            shutdown_timeout_sec=300\n+        )\n+\n+        loader.run()\n+\n+        node = service.nodes[0]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTgzNQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1NjU4OA==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r555156588", "createdAt": "2021-01-11T16:00:56Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,119 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, V_2_9_0, DEV_BRANCH\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    NUM_NODES = 4\n+\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_9_0))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        data_storage = DataStorageConfiguration(default=DataRegionConfiguration(persistent=True))\n+\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=data_storage,\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi',\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, cache_mode='REPLICATED',\n+                                       indexed_types=['java.util.UUID', 'byte[]'])]\n+        )\n+\n+        num_nodes = len(self.test_context.cluster)\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=num_nodes - 1, startup_timeout_sec=180)\n+        service.start()\n+\n+        control_utility = ControlUtility(service, self.test_context)\n+        control_utility.activate()\n+\n+        client_config = IgniteConfiguration(\n+            client_mode=True,\n+            version=IgniteVersion(ignite_version),\n+            discovery_spi=from_ignite_cluster(service),\n+        )\n+\n+        loader = IgniteApplicationService(\n+            self.test_context,\n+            client_config,\n+            java_class_name=\"org.apache.ignite.internal.ducktest.tests.snapshot_test.UuidDataLoaderApplication\",\n+            params={\n+                \"cacheName\": self.CACHE_NAME,\n+                \"size\": 512 * 1024,\n+                \"dataSize\": 1024\n+            },\n+            startup_timeout_sec=180,\n+            shutdown_timeout_sec=300\n+        )\n+\n+        loader.run()\n+\n+        node = service.nodes[0]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0OTgzNQ=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzUzODQ4OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyMDo0MFrOIML_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwOTowMToxMVrOIYbNsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDE3Nw==", "bodyText": "Why it streams UUID as a key?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549650177", "createdAt": "2020-12-29T10:20:40Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE0MTk0Nw==", "bodyText": "we may run it repeatedly, key should be different", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550141947", "createdAt": "2020-12-30T10:57:06Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDE3Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAxNTQzMw==", "bodyText": "Don't see tests where it runs repeatedly.", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562015433", "createdAt": "2021-01-21T16:23:46Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDE3Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ4MjYxMA==", "bodyText": "SnapshotTest\nwe run it repeatedly", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562482610", "createdAt": "2021-01-22T09:01:11Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/snapshot_test/UuidDataLoaderApplication.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.snapshot_test;\n+\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Loading random uuids to cache.\n+ */\n+public class UuidDataLoaderApplication extends IgniteAwareApplication {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDE3Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU0MzE3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyMjo1NVrOIMMBsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwOTowMTo1NlrOIYbPQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDg2Nw==", "bodyText": "it performs \"mv\" but has the \"rename*\" name...", "url": "https://github.com/apache/ignite/pull/8575#discussion_r549650867", "createdAt": "2020-12-29T10:22:55Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -38,10 +38,47 @@ def __init__(self, context, config, num_nodes, jvm_opts=None, startup_timeout_se\n         super().__init__(context, config, num_nodes, startup_timeout_sec, shutdown_timeout_sec, modules=modules,\n                          jvm_opts=jvm_opts)\n \n+    @property\n+    def database_dir(self):\n+        \"\"\"\n+        :return: path to database directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"db\")\n+\n+    @property\n+    def snapshots_dir(self):\n+        \"\"\"\n+        :return: path to snapshots directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"snapshots\")\n+\n     def clean_node(self, node):\n         node.account.kill_java_processes(self.APP_SERVICE_CLASS, clean_shutdown=False, allow_fail=True)\n         node.account.ssh(\"rm -rf -- %s\" % self.persistent_root, allow_fail=False)\n \n+    def rename_database(self, new_name: str):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzMzgyMw==", "bodyText": "\"move\" implies getting a new path. we rename the base folder", "url": "https://github.com/apache/ignite/pull/8575#discussion_r550133823", "createdAt": "2020-12-30T10:45:35Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -38,10 +38,47 @@ def __init__(self, context, config, num_nodes, jvm_opts=None, startup_timeout_se\n         super().__init__(context, config, num_nodes, startup_timeout_sec, shutdown_timeout_sec, modules=modules,\n                          jvm_opts=jvm_opts)\n \n+    @property\n+    def database_dir(self):\n+        \"\"\"\n+        :return: path to database directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"db\")\n+\n+    @property\n+    def snapshots_dir(self):\n+        \"\"\"\n+        :return: path to snapshots directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"snapshots\")\n+\n     def clean_node(self, node):\n         node.account.kill_java_processes(self.APP_SERVICE_CLASS, clean_shutdown=False, allow_fail=True)\n         node.account.ssh(\"rm -rf -- %s\" % self.persistent_root, allow_fail=False)\n \n+    def rename_database(self, new_name: str):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDg2Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAxOTYyOA==", "bodyText": "Seems you changed mv to cp, what the reason to perform a so heavy operation?", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562019628", "createdAt": "2021-01-21T16:28:42Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -38,10 +38,47 @@ def __init__(self, context, config, num_nodes, jvm_opts=None, startup_timeout_se\n         super().__init__(context, config, num_nodes, startup_timeout_sec, shutdown_timeout_sec, modules=modules,\n                          jvm_opts=jvm_opts)\n \n+    @property\n+    def database_dir(self):\n+        \"\"\"\n+        :return: path to database directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"db\")\n+\n+    @property\n+    def snapshots_dir(self):\n+        \"\"\"\n+        :return: path to snapshots directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"snapshots\")\n+\n     def clean_node(self, node):\n         node.account.kill_java_processes(self.APP_SERVICE_CLASS, clean_shutdown=False, allow_fail=True)\n         node.account.ssh(\"rm -rf -- %s\" % self.persistent_root, allow_fail=False)\n \n+    def rename_database(self, new_name: str):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDg2Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ4MzAxMQ==", "bodyText": "removed this method", "url": "https://github.com/apache/ignite/pull/8575#discussion_r562483011", "createdAt": "2021-01-22T09:01:56Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -38,10 +38,47 @@ def __init__(self, context, config, num_nodes, jvm_opts=None, startup_timeout_se\n         super().__init__(context, config, num_nodes, startup_timeout_sec, shutdown_timeout_sec, modules=modules,\n                          jvm_opts=jvm_opts)\n \n+    @property\n+    def database_dir(self):\n+        \"\"\"\n+        :return: path to database directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"db\")\n+\n+    @property\n+    def snapshots_dir(self):\n+        \"\"\"\n+        :return: path to snapshots directory\n+        \"\"\"\n+        return os.path.join(self.work_dir, \"snapshots\")\n+\n     def clean_node(self, node):\n         node.account.kill_java_processes(self.APP_SERVICE_CLASS, clean_shutdown=False, allow_fail=True)\n         node.account.ssh(\"rm -rf -- %s\" % self.persistent_root, allow_fail=False)\n \n+    def rename_database(self, new_name: str):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MDg2Nw=="}, "originalCommit": {"oid": "0878384ba0cbb60158abdc3bcb83fa6c1ee7f180"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTY5MzYwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzowMzozNlrOIb2mPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQxMzowMzoxNFrOIjIaxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA3Njk4OQ==", "bodyText": "valueSizeKb is better imho", "url": "https://github.com/apache/ignite/pull/8575#discussion_r566076989", "createdAt": "2021-01-28T13:03:36Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,108 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, DEV_BRANCH, LATEST_2_9\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=4)\n+    @ignite_versions(str(DEV_BRANCH), str(LATEST_2_9))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=DataStorageConfiguration(default=DataRegionConfiguration(persistent=True)),\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi'\n+        )\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=len(self.test_context.cluster) - 1)\n+        service.start()\n+\n+        control_utility = ControlUtility(service, self.test_context)\n+        control_utility.activate()\n+\n+        client_config = IgniteConfiguration(\n+            client_mode=True,\n+            version=IgniteVersion(ignite_version),\n+            discovery_spi=from_ignite_cluster(service)\n+        )\n+\n+        loader = IgniteApplicationService(\n+            self.test_context,\n+            client_config,\n+            java_class_name=\"org.apache.ignite.internal.ducktest.tests.snapshot_test.DataLoaderApplication\",\n+            shutdown_timeout_sec=300,\n+            params={\n+                \"cacheName\": self.CACHE_NAME,\n+                \"interval\": 500_000,\n+                \"dataSizeKB\": 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794839341db4732313f6be11e05200b3ae5a03c2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzcwODk5Nw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8575#discussion_r573708997", "createdAt": "2021-02-10T13:03:14Z", "author": {"login": "Sega76"}, "path": "modules/ducktests/tests/ignitetest/tests/snapshot_test.py", "diffHunk": "@@ -0,0 +1,108 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+Module contains snapshot test.\n+\"\"\"\n+from ducktape.mark.resource import cluster\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration, DataStorageConfiguration\n+from ignitetest.services.utils.ignite_configuration.data_storage import DataRegionConfiguration\n+from ignitetest.services.utils.ignite_configuration.discovery import from_ignite_cluster\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import IgniteVersion, DEV_BRANCH, LATEST_2_9\n+\n+\n+# pylint: disable=W0223\n+class SnapshotTest(IgniteTest):\n+    \"\"\"\n+    Test Snapshot.\n+    \"\"\"\n+    SNAPSHOT_NAME = \"test_snapshot\"\n+\n+    CACHE_NAME = \"TEST_CACHE\"\n+\n+    @cluster(num_nodes=4)\n+    @ignite_versions(str(DEV_BRANCH), str(LATEST_2_9))\n+    def snapshot_test(self, ignite_version):\n+        \"\"\"\n+        Basic snapshot test.\n+        \"\"\"\n+        ignite_config = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            data_storage=DataStorageConfiguration(default=DataRegionConfiguration(persistent=True)),\n+            metric_exporter='org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi'\n+        )\n+\n+        service = IgniteService(self.test_context, ignite_config, num_nodes=len(self.test_context.cluster) - 1)\n+        service.start()\n+\n+        control_utility = ControlUtility(service, self.test_context)\n+        control_utility.activate()\n+\n+        client_config = IgniteConfiguration(\n+            client_mode=True,\n+            version=IgniteVersion(ignite_version),\n+            discovery_spi=from_ignite_cluster(service)\n+        )\n+\n+        loader = IgniteApplicationService(\n+            self.test_context,\n+            client_config,\n+            java_class_name=\"org.apache.ignite.internal.ducktest.tests.snapshot_test.DataLoaderApplication\",\n+            shutdown_timeout_sec=300,\n+            params={\n+                \"cacheName\": self.CACHE_NAME,\n+                \"interval\": 500_000,\n+                \"dataSizeKB\": 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA3Njk4OQ=="}, "originalCommit": {"oid": "794839341db4732313f6be11e05200b3ae5a03c2"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2367, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}