{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzAyNzUz", "number": 7647, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNDoyMlrODwc-6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1ODoxNVrODyaAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTMzMDk3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNDoyMlrOGDdsLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNDoyMlrOGDdsLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTM1OA==", "bodyText": "Why array needed?", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406285358", "createdAt": "2020-04-09T15:24:22Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +52,19 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoveryHooks == null ? lsnr : wrap(lsnr, discoveryHooks));\n+    }\n+\n+    /**\n+     * Sets interceptors of discovery messages.\n+     *\n+     * @param discoveryHooks Interceptors of discovery messages.\n+     */\n+    @SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\")\n+    public void discoveryHooks(DiscoveryHook... discoveryHooks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f342e41600f7e14ad94d502618013dc0c8f1d4b1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTM5MDA5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozODoxMVrOGDeR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozODoxMVrOGDeR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NTAwNg==", "bodyText": "I think we should add javadoc and assert that hook should be set before Discovery started.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406295006", "createdAt": "2020-04-09T15:38:11Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +52,19 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoveryHooks == null ? lsnr : wrap(lsnr, discoveryHooks));\n+    }\n+\n+    /**\n+     * Sets interceptors of discovery messages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f342e41600f7e14ad94d502618013dc0c8f1d4b1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTQzODcyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1MDowM1rOGDexSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1MDowM1rOGDexSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMzA0OQ==", "bodyText": "I think we should provide customMsg as argument  (or instead of DiscoverySpiCustomMessage msg) and do not duplicate:\nDiscoveryCustomMessage customMsg = msg == null ?\n    null : (DiscoveryCustomMessage)IgniteUtils.field(msg, \"delegate\");", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406303049", "createdAt": "2020-04-09T15:50:03Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java", "diffHunk": "@@ -57,11 +55,26 @@\n     @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n         IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n \n-        TestDiscoverySpi discoSpi = new TestDiscoverySpi();\n+        TestTcpDiscoverySpi discoSpi = (TestTcpDiscoverySpi)cfg.getDiscoverySpi();\n \n-        discoSpi.setIpFinder(IP_FINDER);\n+        DiscoveryHook discoveryHook = new DiscoveryHook() {\n+            @Override public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n+                DiscoveryCustomMessage customMsg = msg == null ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f342e41600f7e14ad94d502618013dc0c8f1d4b1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA2MjI3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0MToyNVrOGDk5Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0MToyNVrOGDk5Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMzM5MA==", "bodyText": "The afterDiscovery will be called not after discovery notifing listeners. delegate.onDiscovery is async.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406403390", "createdAt": "2020-04-09T18:41:25Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java", "diffHunk": "@@ -164,32 +169,89 @@ public void ignite(IgniteEx ignite) {\n         }\n     }\n \n+    /**\n+     * Extended {@link DiscoveryHook} for {@link DiscoveryCustomMessage} interception.\n+     */\n+    public static class DiscoveryCustomMessageHook extends DiscoveryHook {\n+        /** {@inheritDoc} */\n+        @Override public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n+            if (!(msg instanceof CustomMessageWrapper))\n+                return;\n+\n+            beforeDiscovery(unwrap((CustomMessageWrapper)msg));\n+        }\n+\n+        /**\n+         * Handles {@link DiscoveryCustomMessage}.\n+         *\n+         * @param customMsg Intercepted {@link DiscoveryCustomMessage}.\n+         */\n+        public void beforeDiscovery(DiscoveryCustomMessage customMsg) {\n+            // No-op.\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void afterDiscovery(DiscoverySpiCustomMessage msg) {\n+            if (!(msg instanceof CustomMessageWrapper))\n+                return;\n+\n+            afterDiscovery(unwrap((CustomMessageWrapper)msg));\n+        }\n+\n+        /**\n+         * Handles {@link DiscoveryCustomMessage}.\n+         *\n+         * @param customMsg Intercepted {@link DiscoveryCustomMessage}.\n+         */\n+        public void afterDiscovery(DiscoveryCustomMessage customMsg) {\n+            // No-op.\n+        }\n+\n+        /**\n+         * Obtains {@link DiscoveryCustomMessage} from {@link CustomMessageWrapper}.\n+         *\n+         * @param wrapper Wrapper of {@link DiscoveryCustomMessage}.\n+         */\n+        private DiscoveryCustomMessage unwrap(CustomMessageWrapper wrapper) {\n+            return U.field(wrapper, \"delegate\");\n+        }\n+    }\n+\n     /**\n      * Injects {@link DiscoveryHook} into handling logic.\n      */\n     public static final class DiscoverySpiListenerWrapper implements DiscoverySpiListener {\n         /** */\n         private final DiscoverySpiListener delegate;\n \n-        /** */\n-        private final DiscoveryHook hook;\n+        /** Interceptors of discovery messages. */\n+        private final DiscoveryHook[] hooks;\n \n         /**\n          * @param delegate Delegate.\n-         * @param hook Hook.\n+         * @param hooks Interceptors of discovery messages.\n          */\n-        private DiscoverySpiListenerWrapper(DiscoverySpiListener delegate, DiscoveryHook hook) {\n-            this.hook = hook;\n+        private DiscoverySpiListenerWrapper(DiscoverySpiListener delegate, DiscoveryHook[] hooks) {\n+            this.hooks = hooks;\n             this.delegate = delegate;\n         }\n \n         /** {@inheritDoc} */\n-        @Override public IgniteFuture<?> onDiscovery(int type, long topVer, ClusterNode node, Collection<ClusterNode> topSnapshot, @Nullable Map<Long, Collection<ClusterNode>> topHist, @Nullable DiscoverySpiCustomMessage spiCustomMsg) {\n-            hook.handleDiscoveryMessage(spiCustomMsg);\n+        @Override public IgniteFuture<?> onDiscovery(\n+            int type,\n+            long topVer,\n+            ClusterNode node,\n+            Collection<ClusterNode> topSnapshot,\n+            @Nullable Map<Long, Collection<ClusterNode>> topHist,\n+            @Nullable DiscoverySpiCustomMessage spiCustomMsg\n+        ) {\n+            for (DiscoveryHook hook : hooks)\n+                hook.beforeDiscovery(spiCustomMsg);\n \n             IgniteFuture<?> fut = delegate.onDiscovery(type, topVer, node, topSnapshot, topHist, spiCustomMsg);\n \n-            hook.afterDiscovery(spiCustomMsg);\n+            for (DiscoveryHook hook : hooks)\n+                hook.afterDiscovery(spiCustomMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334947ce74434f1501d8e95a4c4d5a723f6f35db"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTc3ODQ0OnYy", "diffSide": "LEFT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/BinaryMetadataUpdatesFlowTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo0OToyM1rOGGbGvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1NjoxN1rOGGbYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4ODczNA==", "bodyText": "Why this deletion?", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409388734", "createdAt": "2020-04-16T08:49:23Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/BinaryMetadataUpdatesFlowTest.java", "diffHunk": "@@ -209,10 +197,7 @@ public void testFlowNoConflictsWithClients() throws Exception {\n             return;\n \n         discoveryHook = new DiscoveryHook() {\n-            @Override public void handleDiscoveryMessage(DiscoverySpiCustomMessage msg) {\n-                DiscoveryCustomMessage customMsg = msg == null ? null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MzIyOA==", "bodyText": "This logic was moved to DiscoveryHook class  to avoid duplication.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409393228", "createdAt": "2020-04-16T08:56:17Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/BinaryMetadataUpdatesFlowTest.java", "diffHunk": "@@ -209,10 +197,7 @@ public void testFlowNoConflictsWithClients() throws Exception {\n             return;\n \n         discoveryHook = new DiscoveryHook() {\n-            @Override public void handleDiscoveryMessage(DiscoverySpiCustomMessage msg) {\n-                DiscoveryCustomMessage customMsg = msg == null ? null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4ODczNA=="}, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTc4MDUwOnYy", "diffSide": "LEFT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/GridCacheBinaryObjectMetadataExchangeMultinodeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo0OTo1N1rOGGbIFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo0OTo1N1rOGGbIFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTA3Ng==", "bodyText": "Why this deletion?", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409389076", "createdAt": "2020-04-16T08:49:57Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/GridCacheBinaryObjectMetadataExchangeMultinodeTest.java", "diffHunk": "@@ -129,13 +115,10 @@ public void testReadRequestBlockedOnUpdatingMetadata() throws Exception {\n         discoveryHook = new DiscoveryHook() {\n             private volatile IgniteEx ignite;\n \n-            @Override public void handleDiscoveryMessage(DiscoverySpiCustomMessage msg) {\n+            @Override public void beforeDiscovery(DiscoveryCustomMessage customMsg) {\n                 if (finishFut.isDone())\n                     return;\n \n-                DiscoveryCustomMessage customMsg = msg == null ? null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTgxMDA4OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1NzoxNlrOGGba6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0ODo0NFrOGGdbbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA==", "bodyText": "Is the following flow possible? If no, why?\n\naddDiscoveryHook\nsetListener\naddDiscoveryHook <- this hook will be ignored.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409393898", "createdAt": "2020-04-16T08:57:16Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +54,24 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjIyNQ==", "bodyText": "It seems to me that we can just pass discoHooks into the listener.\nTherefore list always be up to date inside the listener.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409396225", "createdAt": "2020-04-16T09:00:43Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +54,24 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNDcxMg==", "bodyText": "addDiscoveryHook method asserts that it must be called only before TcpDiscoverySpi start. So it's impossible to use addDiscoveryHook after listener is set.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409404712", "createdAt": "2020-04-16T09:13:56Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +54,24 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyMzAzMA==", "bodyText": "OK then.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409423030", "createdAt": "2020-04-16T09:42:38Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +54,24 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNjc5OQ==", "bodyText": "It seems to me that we can just pass discoHooks into the listener.\nTherefore list always be up to date inside the listener.\n\nIt's not clear for me in what cases hooks are needed to be modified after SPI start. I think that the current approach is more robust.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409426799", "createdAt": "2020-04-16T09:48:44Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +54,24 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTgxNDU3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1ODoxNVrOGGbdwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0ODo0MVrOGGdbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NDYyNA==", "bodyText": "Let's allocate discoHooks on the first hook addition.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409394624", "createdAt": "2020-04-16T08:58:15Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -31,6 +38,9 @@\n     /** */\n     public boolean ignorePingResponse;\n \n+    /** Interceptors of discovery messages. */\n+    private List<DiscoveryHook> discoHooks = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNjc2Nw==", "bodyText": "Thanks. Done.", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409426767", "createdAt": "2020-04-16T09:48:41Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -31,6 +38,9 @@\n     /** */\n     public boolean ignorePingResponse;\n \n+    /** Interceptors of discovery messages. */\n+    private List<DiscoveryHook> discoHooks = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NDYyNA=="}, "originalCommit": {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2514, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}