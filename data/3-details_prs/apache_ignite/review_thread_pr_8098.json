{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTAwMzI3", "number": 8098, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0MTowNFrOETUCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMTowM1rOETUlLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njg2NzMxOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0MTowNFrOG4-gKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxNDozOFrOG4_7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5NzQ4MQ==", "bodyText": "Methods with double underscore on both sides have special meaning. Such methods are mixins and doesn't suppose to be just private methods. Private methods have another naming: __version, without trailing underscores.", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462397481", "createdAt": "2020-07-29T15:41:04Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -13,44 +13,55 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+\"\"\"\n+This module contains ignite path resolve utilities.\n+\"\"\"\n+\n import os\n \n from ignitetest.tests.utils.version import get_version, IgniteVersion\n \n-\"\"\"\n-This module provides Ignite path methods\n-\"\"\"\n-\n \n class IgnitePath:\n-    SCRATCH_ROOT = \"/mnt\"\n-    IGNITE_INSTALL_ROOT = \"/opt\"\n-\n     \"\"\"Path resolver for Ignite system tests which assumes the following layout:\n \n-        /opt/ignite-dev          # Current version of Ignite under test\n-        /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n-        /opt/ignite-<version>    # Other previous versions of Ignite\n-        ...\n-    \"\"\"\n+       /opt/ignite-dev          # Current version of Ignite under test\n+       /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n+       /opt/ignite-<version>    # Other previous versions of Ignite\n+       ...\n+   \"\"\"\n+    SCRATCH_ROOT = \"/mnt\"\n+    IGNITE_INSTALL_ROOT = \"/opt\"\n \n     def __init__(self, context):\n         self.project = context.globals.get(\"project\", \"ignite\")\n \n     def home(self, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Home directory.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         home_dir = project or self.project\n         if version is not None:\n             home_dir += \"-%s\" % str(version)\n \n         return os.path.join(IgnitePath.IGNITE_INSTALL_ROOT, home_dir)\n \n     def script(self, script_name, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param script_name: Script name.\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Full path to script.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         return os.path.join(self.home(version, project=project), \"bin\", script_name)\n \n-    def _version(self, node_or_version):\n+    @staticmethod\n+    def __version__(node_or_version):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMDk0MQ==", "bodyText": "Yep, you are right", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462420941", "createdAt": "2020-07-29T16:14:38Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -13,44 +13,55 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+\"\"\"\n+This module contains ignite path resolve utilities.\n+\"\"\"\n+\n import os\n \n from ignitetest.tests.utils.version import get_version, IgniteVersion\n \n-\"\"\"\n-This module provides Ignite path methods\n-\"\"\"\n-\n \n class IgnitePath:\n-    SCRATCH_ROOT = \"/mnt\"\n-    IGNITE_INSTALL_ROOT = \"/opt\"\n-\n     \"\"\"Path resolver for Ignite system tests which assumes the following layout:\n \n-        /opt/ignite-dev          # Current version of Ignite under test\n-        /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n-        /opt/ignite-<version>    # Other previous versions of Ignite\n-        ...\n-    \"\"\"\n+       /opt/ignite-dev          # Current version of Ignite under test\n+       /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n+       /opt/ignite-<version>    # Other previous versions of Ignite\n+       ...\n+   \"\"\"\n+    SCRATCH_ROOT = \"/mnt\"\n+    IGNITE_INSTALL_ROOT = \"/opt\"\n \n     def __init__(self, context):\n         self.project = context.globals.get(\"project\", \"ignite\")\n \n     def home(self, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Home directory.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         home_dir = project or self.project\n         if version is not None:\n             home_dir += \"-%s\" % str(version)\n \n         return os.path.join(IgnitePath.IGNITE_INSTALL_ROOT, home_dir)\n \n     def script(self, script_name, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param script_name: Script name.\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Full path to script.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         return os.path.join(self.home(version, project=project), \"bin\", script_name)\n \n-    def _version(self, node_or_version):\n+    @staticmethod\n+    def __version__(node_or_version):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5NzQ4MQ=="}, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njg5NzA1OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0Nzo0OVrOG4-y1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxNDoxNlrOG4_6-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjI2Mg==", "bodyText": "there is no need for staticmethod decorator as the method is never used beyond this class", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462402262", "createdAt": "2020-07-29T15:47:49Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -13,44 +13,55 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+\"\"\"\n+This module contains ignite path resolve utilities.\n+\"\"\"\n+\n import os\n \n from ignitetest.tests.utils.version import get_version, IgniteVersion\n \n-\"\"\"\n-This module provides Ignite path methods\n-\"\"\"\n-\n \n class IgnitePath:\n-    SCRATCH_ROOT = \"/mnt\"\n-    IGNITE_INSTALL_ROOT = \"/opt\"\n-\n     \"\"\"Path resolver for Ignite system tests which assumes the following layout:\n \n-        /opt/ignite-dev          # Current version of Ignite under test\n-        /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n-        /opt/ignite-<version>    # Other previous versions of Ignite\n-        ...\n-    \"\"\"\n+       /opt/ignite-dev          # Current version of Ignite under test\n+       /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n+       /opt/ignite-<version>    # Other previous versions of Ignite\n+       ...\n+   \"\"\"\n+    SCRATCH_ROOT = \"/mnt\"\n+    IGNITE_INSTALL_ROOT = \"/opt\"\n \n     def __init__(self, context):\n         self.project = context.globals.get(\"project\", \"ignite\")\n \n     def home(self, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Home directory.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         home_dir = project or self.project\n         if version is not None:\n             home_dir += \"-%s\" % str(version)\n \n         return os.path.join(IgnitePath.IGNITE_INSTALL_ROOT, home_dir)\n \n     def script(self, script_name, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param script_name: Script name.\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Full path to script.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         return os.path.join(self.home(version, project=project), \"bin\", script_name)\n \n-    def _version(self, node_or_version):\n+    @staticmethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMDcyOA==", "bodyText": "Both pycharm and pylint generate warnings on it.", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462420728", "createdAt": "2020-07-29T16:14:16Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -13,44 +13,55 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+\"\"\"\n+This module contains ignite path resolve utilities.\n+\"\"\"\n+\n import os\n \n from ignitetest.tests.utils.version import get_version, IgniteVersion\n \n-\"\"\"\n-This module provides Ignite path methods\n-\"\"\"\n-\n \n class IgnitePath:\n-    SCRATCH_ROOT = \"/mnt\"\n-    IGNITE_INSTALL_ROOT = \"/opt\"\n-\n     \"\"\"Path resolver for Ignite system tests which assumes the following layout:\n \n-        /opt/ignite-dev          # Current version of Ignite under test\n-        /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n-        /opt/ignite-<version>    # Other previous versions of Ignite\n-        ...\n-    \"\"\"\n+       /opt/ignite-dev          # Current version of Ignite under test\n+       /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n+       /opt/ignite-<version>    # Other previous versions of Ignite\n+       ...\n+   \"\"\"\n+    SCRATCH_ROOT = \"/mnt\"\n+    IGNITE_INSTALL_ROOT = \"/opt\"\n \n     def __init__(self, context):\n         self.project = context.globals.get(\"project\", \"ignite\")\n \n     def home(self, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Home directory.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         home_dir = project or self.project\n         if version is not None:\n             home_dir += \"-%s\" % str(version)\n \n         return os.path.join(IgnitePath.IGNITE_INSTALL_ROOT, home_dir)\n \n     def script(self, script_name, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param script_name: Script name.\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Full path to script.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         return os.path.join(self.home(version, project=project), \"bin\", script_name)\n \n-    def _version(self, node_or_version):\n+    @staticmethod", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjI2Mg=="}, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njk1NTk3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/spark.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMTowM1rOG4_YEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyNTo1OVrOG5Uw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMTc5NQ==", "bodyText": "Do we really need static methods in our code? I don't see any case in our code where usage of them is required. It just adds more sugar without need. Also some code styles consider them evil, e.g. Google Guide.", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462411795", "createdAt": "2020-07-29T16:01:03Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/spark.py", "diffHunk": "@@ -103,28 +109,40 @@ def clean_node(self, node):\n         node.account.ssh(\"sudo rm -rf -- %s\" % SparkService.SPARK_PERSISTENT_ROOT, allow_fail=False)\n \n     def pids(self, node):\n-        \"\"\"Return process ids associated with running processes on the given node.\"\"\"\n         try:\n             cmd = \"jcmd | grep -e %s | awk '{print $1}'\" % self.java_class_name(node)\n-            pid_arr = [pid for pid in node.account.ssh_capture(cmd, allow_fail=True, callback=int)]\n-            return pid_arr\n-        except (RemoteCommandError, ValueError) as e:\n+            return list(node.account.ssh_capture(cmd, allow_fail=True, callback=int))\n+        except (RemoteCommandError, ValueError):\n             return []\n \n     def java_class_name(self, node):\n+        \"\"\"\n+        :param node: Spark node.\n+        :return: Class name depending on node type (master or slave).\n+        \"\"\"\n         if node == self.nodes[0]:\n             return \"org.apache.spark.deploy.master.Master\"\n-        else:\n-            return \"org.apache.spark.deploy.worker.Worker\"\n \n-    def master_log_path(self, node):\n+        return \"org.apache.spark.deploy.worker.Worker\"\n+\n+    @staticmethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MjIzOA==", "bodyText": "Despite the fact that in mentioned above codestyle staticmethods are not welcome in code, linters generate warnings about unused self. And usage of @staticmethod is a preferrable way to mitigate this case. This is so common in my practice and widely accepted in a python's community.", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462762238", "createdAt": "2020-07-30T06:25:59Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/spark.py", "diffHunk": "@@ -103,28 +109,40 @@ def clean_node(self, node):\n         node.account.ssh(\"sudo rm -rf -- %s\" % SparkService.SPARK_PERSISTENT_ROOT, allow_fail=False)\n \n     def pids(self, node):\n-        \"\"\"Return process ids associated with running processes on the given node.\"\"\"\n         try:\n             cmd = \"jcmd | grep -e %s | awk '{print $1}'\" % self.java_class_name(node)\n-            pid_arr = [pid for pid in node.account.ssh_capture(cmd, allow_fail=True, callback=int)]\n-            return pid_arr\n-        except (RemoteCommandError, ValueError) as e:\n+            return list(node.account.ssh_capture(cmd, allow_fail=True, callback=int))\n+        except (RemoteCommandError, ValueError):\n             return []\n \n     def java_class_name(self, node):\n+        \"\"\"\n+        :param node: Spark node.\n+        :return: Class name depending on node type (master or slave).\n+        \"\"\"\n         if node == self.nodes[0]:\n             return \"org.apache.spark.deploy.master.Master\"\n-        else:\n-            return \"org.apache.spark.deploy.worker.Worker\"\n \n-    def master_log_path(self, node):\n+        return \"org.apache.spark.deploy.worker.Worker\"\n+\n+    @staticmethod", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMTc5NQ=="}, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2779, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}