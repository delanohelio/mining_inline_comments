{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2ODkyNzYw", "number": 8203, "title": "IGNITE-12809 Python thin client - Fix wrong order of the SQL query result", "bodyText": "The Contribution Checklist\n\n There is a single JIRA ticket related to the pull request.\n The web-link to the pull request is attached to the JIRA ticket.\n The JIRA ticket has the Patch Available state.\n The pull request body describes changes that have been made.\nThe description explains WHAT and WHY was made instead of HOW.\n The pull request title is treated as the final commit message.\nThe following pattern must be used: IGNITE-XXXX Change summary where XXXX - number of JIRA issue.\n A reviewer has been mentioned through the JIRA comments\n(see the Maintainers list)\n The pull request has been checked by the Teamcity Bot and\nthe green visa attached to the JIRA ticket (see TC.Bot: Check PR)\n\nNotes\n\nHow to Contribute\nCoding abbreviation rules\nCoding Guidelines\nApache Ignite Teamcity Bot\n\nIf you need any help, please email dev@ignite.apache.org or ask an\u0443 advice on http://asf.slack.com #ignite channel.", "createdAt": "2020-09-01T07:53:15Z", "url": "https://github.com/apache/ignite/pull/8203", "merged": true, "mergeCommit": {"oid": "38025ee4167f05eaa2d6a2c5c2ab70c83a462cfc"}, "closed": true, "closedAt": "2020-09-01T09:09:43Z", "author": {"login": "nizhikov"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEinQbgH2gAyNDc2ODkyNzYwOjcxNWE4MmI1OTliZjliZjIzOTI2YWRmZWQyYjc5NzMxOTgwOGY1ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEjsQcgFqTQ3OTU0MzQ3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "715a82b599bf9bf23926adfed2b797319808f5f6", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/715a82b599bf9bf23926adfed2b797319808f5f6", "committedDate": "2020-09-01T07:52:35Z", "message": "IGNITE-12809 Python thin client - Fix wrong order of the SQL query result."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTA0NzEy", "url": "https://github.com/apache/ignite/pull/8203#pullrequestreview-479504712", "createdAt": "2020-09-01T08:17:56Z", "commit": {"oid": "715a82b599bf9bf23926adfed2b797319808f5f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODoxNzo1NlrOHKrT9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODozMjowNlrOHKr2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1NzQzMA==", "bodyText": "Add new line", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480957430", "createdAt": "2020-09-01T08:17:56Z", "author": {"login": "ivandasch"}, "path": ".gitignore", "diffHunk": "@@ -80,3 +80,9 @@ packages\n \n #NodeJs files\n /modules/platforms/nodejs/node_modules\n+\n+#Python temp files\n+**/.eggs\n+**/venv\n+**/.pytest_cache\n+**/pyignite.egg-info", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a82b599bf9bf23926adfed2b797319808f5f6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1Nzk3Mw==", "bodyText": "Unnecessary variable definition.\nBoth of them are used only in one place.", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480957973", "createdAt": "2020-09-01T08:18:57Z", "author": {"login": "ivandasch"}, "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -152,3 +152,71 @@ def test_sql_fields(client):\n     # repeat cleanup\n     result = sql_fields(client, 'PUBLIC', drop_query, page_size)\n     assert result.status == 0\n+\n+\n+def test_long_multipage_query(client):\n+    \"\"\"\n+    The test creates a table with 13 columns (id and 12 enumerated columns)\n+    and 20 records with id in range from 1 to 20. Values of enumerated columns\n+    are = column number * id.\n+\n+    The goal is to ensure that all the values are selected in a right order.\n+    \"\"\"\n+\n+    field_range = range(1, 13)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a82b599bf9bf23926adfed2b797319808f5f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk2MDU5NA==", "bodyText": "Both of these queries can be easily created without so long definition:\ni.e.\nfields = [\"id\",\"abc\"...]\n\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % (fields[0] +  \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:])\n\n\"INSERT INTO LongMultipageQuery (%s) VALUES (%s)\" % (\",\".join(fields), \",\".join(\"?\" * len(fields)))", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480960594", "createdAt": "2020-09-01T08:23:20Z", "author": {"login": "ivandasch"}, "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -152,3 +152,71 @@ def test_sql_fields(client):\n     # repeat cleanup\n     result = sql_fields(client, 'PUBLIC', drop_query, page_size)\n     assert result.status == 0\n+\n+\n+def test_long_multipage_query(client):\n+    \"\"\"\n+    The test creates a table with 13 columns (id and 12 enumerated columns)\n+    and 20 records with id in range from 1 to 20. Values of enumerated columns\n+    are = column number * id.\n+\n+    The goal is to ensure that all the values are selected in a right order.\n+    \"\"\"\n+\n+    field_range = range(1, 13)\n+\n+    record_range = range(1, 21)\n+\n+    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n+\n+    create_query = '''CREATE TABLE LongMultipageQuery (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a82b599bf9bf23926adfed2b797319808f5f6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk2NjE3MQ==", "bodyText": "Why not just row = list(row_dict.values())?", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480966171", "createdAt": "2020-09-01T08:32:06Z", "author": {"login": "ivandasch"}, "path": "modules/platforms/python/pyignite/api/sql.py", "diffHunk": "@@ -442,7 +442,7 @@ def sql_fields_cursor_get_page(\n     }\n     for row_dict in value['data']:\n         row = []\n-        for field_key in sorted(row_dict.keys()):\n+        for field_key in row_dict.keys():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a82b599bf9bf23926adfed2b797319808f5f6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "committedDate": "2020-09-01T08:59:57Z", "message": "IGNITE-12809 Code review fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTQwMzc4", "url": "https://github.com/apache/ignite/pull/8203#pullrequestreview-479540378", "createdAt": "2020-09-01T09:03:45Z", "commit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMzo0NlrOHKtA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMzo0NlrOHKtA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTMxMw==", "bodyText": "Let's use range(1, len(fields))", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480985313", "createdAt": "2020-09-01T09:03:46Z", "author": {"login": "ivandasch"}, "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -163,56 +163,19 @@ def test_long_multipage_query(client):\n     The goal is to ensure that all the values are selected in a right order.\n     \"\"\"\n \n-    field_range = range(1, 13)\n-\n-    record_range = range(1, 21)\n-\n-    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n-\n-    create_query = '''CREATE TABLE LongMultipageQuery (\n-        id INT(11) PRIMARY KEY,\n-        abc INT(11),\n-        ghi INT(11),\n-        def INT(11),\n-        jkl INT(11),\n-        prs INT(11),\n-        mno INT(11),\n-        tuw INT(11),\n-        zyz INT(11),\n-        abc1 INT(11),\n-        def1 INT(11),\n-        jkl1 INT(11),\n-        prs1 INT(11),\n-    )'''\n-\n-    insert_query = '''INSERT INTO LongMultipageQuery (\n-        id,\n-        abc,\n-        ghi,\n-        def,\n-        jkl,\n-        prs,\n-        mno,\n-        tuw,\n-        zyz,\n-        abc1,\n-        def1,\n-        jkl1,\n-        prs1,\n-    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''\n-\n-    select_query = 'SELECT * FROM LongMultipageQuery'\n+    fields = [\"id\", \"abc\", \"ghi\", \"def\", \"jkl\", \"prs\", \"mno\", \"tuw\", \"zyz\", \"abc1\", \"def1\", \"jkl1\", \"prs1\"]\n \n-    client.sql(drop_query)\n-    client.sql(create_query)\n+    client.sql('DROP TABLE LongMultipageQuery IF EXISTS')\n+\n+    client.sql(\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % \\\n+               (fields[0] + \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:]))))\n \n-    for id in record_range:\n+    for id in range(1, 21):\n         client.sql(\n-            insert_query,\n-            query_args=[id] + list(i * id for i in field_range),\n-        )\n+            \"INSERT INTO LongMultipageQuery (%s) VALUES (%s)\" % (\",\".join(fields), \",\".join(\"?\" * len(fields))),\n+            query_args=[id] + list(i * id for i in range(1, 13)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTQwNjQz", "url": "https://github.com/apache/ignite/pull/8203#pullrequestreview-479540643", "createdAt": "2020-09-01T09:04:05Z", "commit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNDowNVrOHKtBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNDowNVrOHKtBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTUwNg==", "bodyText": "assert len(page) == len(fields)", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480985506", "createdAt": "2020-09-01T09:04:05Z", "author": {"login": "ivandasch"}, "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -163,56 +163,19 @@ def test_long_multipage_query(client):\n     The goal is to ensure that all the values are selected in a right order.\n     \"\"\"\n \n-    field_range = range(1, 13)\n-\n-    record_range = range(1, 21)\n-\n-    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n-\n-    create_query = '''CREATE TABLE LongMultipageQuery (\n-        id INT(11) PRIMARY KEY,\n-        abc INT(11),\n-        ghi INT(11),\n-        def INT(11),\n-        jkl INT(11),\n-        prs INT(11),\n-        mno INT(11),\n-        tuw INT(11),\n-        zyz INT(11),\n-        abc1 INT(11),\n-        def1 INT(11),\n-        jkl1 INT(11),\n-        prs1 INT(11),\n-    )'''\n-\n-    insert_query = '''INSERT INTO LongMultipageQuery (\n-        id,\n-        abc,\n-        ghi,\n-        def,\n-        jkl,\n-        prs,\n-        mno,\n-        tuw,\n-        zyz,\n-        abc1,\n-        def1,\n-        jkl1,\n-        prs1,\n-    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''\n-\n-    select_query = 'SELECT * FROM LongMultipageQuery'\n+    fields = [\"id\", \"abc\", \"ghi\", \"def\", \"jkl\", \"prs\", \"mno\", \"tuw\", \"zyz\", \"abc1\", \"def1\", \"jkl1\", \"prs1\"]\n \n-    client.sql(drop_query)\n-    client.sql(create_query)\n+    client.sql('DROP TABLE LongMultipageQuery IF EXISTS')\n+\n+    client.sql(\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % \\\n+               (fields[0] + \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:]))))\n \n-    for id in record_range:\n+    for id in range(1, 21):\n         client.sql(\n-            insert_query,\n-            query_args=[id] + list(i * id for i in field_range),\n-        )\n+            \"INSERT INTO LongMultipageQuery (%s) VALUES (%s)\" % (\",\".join(fields), \",\".join(\"?\" * len(fields))),\n+            query_args=[id] + list(i * id for i in range(1, 13)))\n \n-    result = client.sql(select_query, page_size=1)\n+    result = client.sql('SELECT * FROM LongMultipageQuery', page_size=1)\n     for page in result:\n         assert len(page) == 13", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTQxODI0", "url": "https://github.com/apache/ignite/pull/8203#pullrequestreview-479541824", "createdAt": "2020-09-01T09:05:38Z", "commit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNTozOFrOHKtFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNTozOFrOHKtFUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjQ1MQ==", "bodyText": "Even better:\n\"CREATE TABLE LongMultiPageQuery (%s)\" %  \",\".join(map(lambda f: f + \" INT(11)\" if f != \"id\" else \"id INT(11) PRIMARY KEY\", fields))))", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480986451", "createdAt": "2020-09-01T09:05:38Z", "author": {"login": "ivandasch"}, "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -163,56 +163,19 @@ def test_long_multipage_query(client):\n     The goal is to ensure that all the values are selected in a right order.\n     \"\"\"\n \n-    field_range = range(1, 13)\n-\n-    record_range = range(1, 21)\n-\n-    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n-\n-    create_query = '''CREATE TABLE LongMultipageQuery (\n-        id INT(11) PRIMARY KEY,\n-        abc INT(11),\n-        ghi INT(11),\n-        def INT(11),\n-        jkl INT(11),\n-        prs INT(11),\n-        mno INT(11),\n-        tuw INT(11),\n-        zyz INT(11),\n-        abc1 INT(11),\n-        def1 INT(11),\n-        jkl1 INT(11),\n-        prs1 INT(11),\n-    )'''\n-\n-    insert_query = '''INSERT INTO LongMultipageQuery (\n-        id,\n-        abc,\n-        ghi,\n-        def,\n-        jkl,\n-        prs,\n-        mno,\n-        tuw,\n-        zyz,\n-        abc1,\n-        def1,\n-        jkl1,\n-        prs1,\n-    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''\n-\n-    select_query = 'SELECT * FROM LongMultipageQuery'\n+    fields = [\"id\", \"abc\", \"ghi\", \"def\", \"jkl\", \"prs\", \"mno\", \"tuw\", \"zyz\", \"abc1\", \"def1\", \"jkl1\", \"prs1\"]\n \n-    client.sql(drop_query)\n-    client.sql(create_query)\n+    client.sql('DROP TABLE LongMultipageQuery IF EXISTS')\n+\n+    client.sql(\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % \\\n+               (fields[0] + \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:]))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2984592f913ad40e344c392d174652c9beb940", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/fd2984592f913ad40e344c392d174652c9beb940", "committedDate": "2020-09-01T09:07:26Z", "message": "IGNITE-12809 Code review fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTQzNDc0", "url": "https://github.com/apache/ignite/pull/8203#pullrequestreview-479543474", "createdAt": "2020-09-01T09:07:57Z", "commit": {"oid": "fd2984592f913ad40e344c392d174652c9beb940"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3117, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}