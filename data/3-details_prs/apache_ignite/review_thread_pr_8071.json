{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjAyMjI0", "number": 8071, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNToxMVrOERVV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0ODozNlrOERz1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjEwOTI1OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/config/ignite-client.xml.tmpl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNToxMVrOG1_BaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNToxMVrOG1_BaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDI2NA==", "bodyText": "Use .j2 file extension", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459260264", "createdAt": "2020-07-23T07:25:11Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/config/ignite-client.xml.tmpl", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjExMDI1OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/config/ignite-client.xml.tmpl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTozMlrOG1_B_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTozMlrOG1_B_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDQxNA==", "bodyText": "Use signle template for client/server", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459260414", "createdAt": "2020-07-23T07:25:32Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/config/ignite-client.xml.tmpl", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjExMDk0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/version.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1MlrOG1_CZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1MlrOG1_CZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDUxOQ==", "bodyText": "hasattr never returns None", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459260519", "createdAt": "2020-07-23T07:25:52Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/version.py", "diffHunk": "@@ -56,14 +58,17 @@ def get_version(node=None):\n     Return the version attached to the given node.\n     Default to DEV_BRANCH if node or node.version is undefined (aka None)\n     \"\"\"\n-    if node is not None and hasattr(node, \"version\") and node.version is not None:\n-        return node.version\n-    else:\n-        return DEV_BRANCH\n+    if isinstance(node, ClusterNode) and hasattr(node, 'version') is not None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjI2ODc5OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/.gitignore", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjowMFrOG2AgZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjowMFrOG2AgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NDU4MA==", "bodyText": "I believe that there is no need to  add .gitignore here at all.\nAnd I strongly advice you to use virtualenvwrapper in order do maintain different venv's.\nIt is recommended way in python community to use venv's in developer's environment.\nIf you used it it would not be necessary add something to .gitignore.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459284580", "createdAt": "2020-07-23T08:16:00Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/.gitignore", "diffHunk": "@@ -0,0 +1,2 @@\n+tests/venv/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjI3MDI0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjoyNlrOG2AhTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo1MzozMVrOG2Bw4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NDgxNA==", "bodyText": "s/bases on/is based on/", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459284814", "createdAt": "2020-07-23T08:16:26Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+## Overview\n+The `ignitetest` framework provides basic functionality and services\n+to write integration tests for Apache Ignite. This framework bases on ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwNTE4Ng==", "bodyText": "I agree and tried use passive voice but Intellij Idea recommends to use active voice here.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459305186", "createdAt": "2020-07-23T08:53:31Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+## Overview\n+The `ignitetest` framework provides basic functionality and services\n+to write integration tests for Apache Ignite. This framework bases on ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NDgxNA=="}, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjI3OTY0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/docker/ducker-ignite", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxOToyNFrOG2AnJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxODowNFrOG2CkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NjMxMQ==", "bodyText": "s/an docker image/a docker image/\nAnd is it correct that ducktape uses image? It uses a bunch of running containers, based on this image.\nI think, that \"Build a docker image for running tests.\" is a little bit better.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459286311", "createdAt": "2020-07-23T08:19:24Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/docker/ducker-ignite", "diffHunk": "@@ -60,11 +60,18 @@ Usage: ${script_path} [command] [options]\n help|-h|--help\n     Display this help message\n \n-up [-n|--num-nodes NUM_NODES] [-f|--force] [docker-image]\n-        [-C|--custom-ducktape DIR] [-e|--expose-ports ports]\n+build [-j|--jdk JDK] [image-name]\n+    Build an docker image that ducktape uses to up cluster. Image is tagged with specified ${image_name}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTg2MA==", "bodyText": "I see such pipeline: build - up - run. Tests are running on containers on final stage while image is used on \"up\" stage. I think I should make replacement to make it clearer. Other docs use term \"node\", so let's use it too:\n\ndocker image that ducktape uses to up cluster.\n\nto\n\ndocker image that represents a ducker node.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459315860", "createdAt": "2020-07-23T09:13:05Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/docker/ducker-ignite", "diffHunk": "@@ -60,11 +60,18 @@ Usage: ${script_path} [command] [options]\n help|-h|--help\n     Display this help message\n \n-up [-n|--num-nodes NUM_NODES] [-f|--force] [docker-image]\n-        [-C|--custom-ducktape DIR] [-e|--expose-ports ports]\n+build [-j|--jdk JDK] [image-name]\n+    Build an docker image that ducktape uses to up cluster. Image is tagged with specified ${image_name}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NjMxMQ=="}, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxODQyNA==", "bodyText": "Please check, is it ok now?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459318424", "createdAt": "2020-07-23T09:18:04Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/docker/ducker-ignite", "diffHunk": "@@ -60,11 +60,18 @@ Usage: ${script_path} [command] [options]\n help|-h|--help\n     Display this help message\n \n-up [-n|--num-nodes NUM_NODES] [-f|--force] [docker-image]\n-        [-C|--custom-ducktape DIR] [-e|--expose-ports ports]\n+build [-j|--jdk JDK] [image-name]\n+    Build an docker image that ducktape uses to up cluster. Image is tagged with specified ${image_name}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NjMxMQ=="}, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjI4NjI5OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/docker/ducker-ignite", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyMToxOFrOG2ArDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyMToxOFrOG2ArDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NzMwOA==", "bodyText": "I think that \"for ducktest's docker image\" is better.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459287308", "createdAt": "2020-07-23T08:21:18Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/docker/ducker-ignite", "diffHunk": "@@ -75,6 +82,9 @@ up [-n|--num-nodes NUM_NODES] [-f|--force] [docker-image]\n     or a combination of port/port-range separated by comma (like 2181,9092 or 2181,5005-5008).\n     By default no port is exposed. See README.md for more detail on this option.\n \n+    If --jdk is specified then we will use this argument as base image for ducker docker images.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzQxMDk3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0ODozOFrOG2LXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0ODozOFrOG2LXHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MjQyOQ==", "bodyText": "relocated.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459462429", "createdAt": "2020-07-23T13:48:38Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+## Overview\n+The `ignitetest` framework provides basic functionality and services\n+to write integration tests for Apache Ignite. This framework bases on \n+the `ducktape` test framework, for information about it check the links:\n+- https://github.com/confluentinc/ducktape - source code of the `ducktape`;\n+- http://ducktape-docs.readthedocs.io - documentation to the `ducktape`.\n+\n+Structure of the `ignitetest` directory is:\n+- `./ignitetest/services` contains basic services functionality;\n+- `./ignitetest/version.py` contains utils for versioning;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9070540ad8548e993d753c7a0d14091a9e9f47a2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQ2MjkwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo1ODoyNFrOG2oEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDowMTozOVrOG3MnCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjczMg==", "bodyText": "Can we resolve this inside IgnitePath?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459932732", "createdAt": "2020-07-24T08:58:24Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MDg1MA==", "bodyText": "We can just call IgnitePath(context.globals.get('project'))\nGet returns None by default when key is absent.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460050850", "createdAt": "2020-07-24T13:26:41Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjczMg=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NzY2Ng==", "bodyText": "Anyway, we should do it inside IgnitePath to solve possible duplications in the future.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460057666", "createdAt": "2020-07-24T13:39:03Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjczMg=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMTQ2Nw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460531467", "createdAt": "2020-07-26T14:01:39Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjczMg=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc2ODA1OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/docker/run_tests.sh", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0MzowMlrOG2q6Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDowMTozM1rOG3Mm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3OTMxOA==", "bodyText": "Let's just pass _DUCKTAPE_OPTIONS (btw, what's the reason to start a variable name with _?)", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459979318", "createdAt": "2020-07-24T10:43:02Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/docker/run_tests.sh", "diffHunk": "@@ -16,15 +16,29 @@\n # limitations under the License.\n \n SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+\n+# Num of containers that ducktape will prepare for tests\n IGNITE_NUM_CONTAINERS=${IGNITE_NUM_CONTAINERS:-11}\n+# Path for tests to start\n TC_PATHS=${TC_PATHS:-./ignitetest/}\n+# Docker image name that ducktape will use to prepare containers\n+IMAGE_NAME=${IMAGE_NAME}\n \n die() {\n     echo $@\n     exit 1\n }\n \n if ${SCRIPT_DIR}/ducker-ignite ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" || die \"ducker-ignite up failed\"\n+    # If image name is specified that skip build and just pull it\n+    if [ \"$IMAGE_NAME\" != \"\" ]; then\n+      IMAGE_NAME=\" --skip-build-image $IMAGE_NAME\"\n+    fi\n+    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" ${IMAGE_NAME} || die \"ducker-ignite up failed\"\n+fi\n+\n+if [ \"$VERSION\" != \"\" ]; then\n+  export _DUCKTAPE_OPTIONS=\"$_DUCKTAPE_OPTIONS --parameters '{\\\"version\\\":\\\"${VERSION}\\\"}'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNjk1Mw==", "bodyText": "I've just reuse this variable, there is no reason to name it with '_'. Rename it.\nI'm not sure that we should pass DUCKTAPE_OPTIONS as it json and there could be issues with bash + json. I'd like to prepare the options in run_tests.sh script and ask user to just fill env variables: VERSION, jvm_options, paths to config templates.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460036953", "createdAt": "2020-07-24T13:00:26Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/docker/run_tests.sh", "diffHunk": "@@ -16,15 +16,29 @@\n # limitations under the License.\n \n SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+\n+# Num of containers that ducktape will prepare for tests\n IGNITE_NUM_CONTAINERS=${IGNITE_NUM_CONTAINERS:-11}\n+# Path for tests to start\n TC_PATHS=${TC_PATHS:-./ignitetest/}\n+# Docker image name that ducktape will use to prepare containers\n+IMAGE_NAME=${IMAGE_NAME}\n \n die() {\n     echo $@\n     exit 1\n }\n \n if ${SCRIPT_DIR}/ducker-ignite ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" || die \"ducker-ignite up failed\"\n+    # If image name is specified that skip build and just pull it\n+    if [ \"$IMAGE_NAME\" != \"\" ]; then\n+      IMAGE_NAME=\" --skip-build-image $IMAGE_NAME\"\n+    fi\n+    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" ${IMAGE_NAME} || die \"ducker-ignite up failed\"\n+fi\n+\n+if [ \"$VERSION\" != \"\" ]; then\n+  export _DUCKTAPE_OPTIONS=\"$_DUCKTAPE_OPTIONS --parameters '{\\\"version\\\":\\\"${VERSION}\\\"}'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3OTMxOA=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NjYyNg==", "bodyText": "I mean that DUCKTAPE_OPTIONS should contain --parameters as well and any other ducktape API params. No need to overcomplicate run_tests.sh API.\nJust make DUCKTAPE_OPTIONS as you want (hardcode it %)) and export at wrapping sh.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460056626", "createdAt": "2020-07-24T13:37:06Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/docker/run_tests.sh", "diffHunk": "@@ -16,15 +16,29 @@\n # limitations under the License.\n \n SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+\n+# Num of containers that ducktape will prepare for tests\n IGNITE_NUM_CONTAINERS=${IGNITE_NUM_CONTAINERS:-11}\n+# Path for tests to start\n TC_PATHS=${TC_PATHS:-./ignitetest/}\n+# Docker image name that ducktape will use to prepare containers\n+IMAGE_NAME=${IMAGE_NAME}\n \n die() {\n     echo $@\n     exit 1\n }\n \n if ${SCRIPT_DIR}/ducker-ignite ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" || die \"ducker-ignite up failed\"\n+    # If image name is specified that skip build and just pull it\n+    if [ \"$IMAGE_NAME\" != \"\" ]; then\n+      IMAGE_NAME=\" --skip-build-image $IMAGE_NAME\"\n+    fi\n+    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" ${IMAGE_NAME} || die \"ducker-ignite up failed\"\n+fi\n+\n+if [ \"$VERSION\" != \"\" ]; then\n+  export _DUCKTAPE_OPTIONS=\"$_DUCKTAPE_OPTIONS --parameters '{\\\"version\\\":\\\"${VERSION}\\\"}'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3OTMxOA=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMTQ1Mw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460531453", "createdAt": "2020-07-26T14:01:33Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/docker/run_tests.sh", "diffHunk": "@@ -16,15 +16,29 @@\n # limitations under the License.\n \n SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+\n+# Num of containers that ducktape will prepare for tests\n IGNITE_NUM_CONTAINERS=${IGNITE_NUM_CONTAINERS:-11}\n+# Path for tests to start\n TC_PATHS=${TC_PATHS:-./ignitetest/}\n+# Docker image name that ducktape will use to prepare containers\n+IMAGE_NAME=${IMAGE_NAME}\n \n die() {\n     echo $@\n     exit 1\n }\n \n if ${SCRIPT_DIR}/ducker-ignite ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" || die \"ducker-ignite up failed\"\n+    # If image name is specified that skip build and just pull it\n+    if [ \"$IMAGE_NAME\" != \"\" ]; then\n+      IMAGE_NAME=\" --skip-build-image $IMAGE_NAME\"\n+    fi\n+    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" ${IMAGE_NAME} || die \"ducker-ignite up failed\"\n+fi\n+\n+if [ \"$VERSION\" != \"\" ]; then\n+  export _DUCKTAPE_OPTIONS=\"$_DUCKTAPE_OPTIONS --parameters '{\\\"version\\\":\\\"${VERSION}\\\"}'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3OTMxOA=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTA5NDU5OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0NToxMlrOG2t-LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDowMToyN1rOG3Mm8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTQ4NA==", "bodyText": "Seems, you may just always read from context.globals['jvm_opts']?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460029484", "createdAt": "2020-07-24T12:45:12Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()\n+\n+        if 'jvm_opts' in context.globals:\n+            self.jvm_options = context.globals['jvm_opts']\n+        else:\n+            self.jvm_options = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzUyMA==", "bodyText": "It will raise KeyError in case that jvm_options aren't specified.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460037520", "createdAt": "2020-07-24T13:01:33Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()\n+\n+        if 'jvm_opts' in context.globals:\n+            self.jvm_options = context.globals['jvm_opts']\n+        else:\n+            self.jvm_options = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTQ4NA=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MDA3MQ==", "bodyText": "Python dict has method get(key, default)", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460050071", "createdAt": "2020-07-24T13:25:18Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()\n+\n+        if 'jvm_opts' in context.globals:\n+            self.jvm_options = context.globals['jvm_opts']\n+        else:\n+            self.jvm_options = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTQ4NA=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMTQ0Mw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460531443", "createdAt": "2020-07-26T14:01:27Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()\n+\n+        if 'jvm_opts' in context.globals:\n+            self.jvm_options = context.globals['jvm_opts']\n+        else:\n+            self.jvm_options = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTQ4NA=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTA5Nzg2OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_config.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0NjoxMlrOG2uAIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1NToxOFrOG3ZlGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTk4NQ==", "bodyText": "IgniteConfig?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460029985", "createdAt": "2020-07-24T12:46:12Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_config.py", "diffHunk": "@@ -17,71 +17,49 @@\n This module renders Ignite config and all related artifacts\n \"\"\"\n \n+from jinja2 import FileSystemLoader, Environment\n+\n+import os\n+\n+DEFAULT_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/config\"\n+DEFAULT_IGNITE_CONF = DEFAULT_CONFIG_PATH + \"/ignite.xml.j2\"\n+\n+\n+class Config(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMDU4OQ==", "bodyText": "It has nothing Ignite specific. Just render any jinja2 templare.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460530589", "createdAt": "2020-07-26T13:53:46Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_config.py", "diffHunk": "@@ -17,71 +17,49 @@\n This module renders Ignite config and all related artifacts\n \"\"\"\n \n+from jinja2 import FileSystemLoader, Environment\n+\n+import os\n+\n+DEFAULT_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/config\"\n+DEFAULT_IGNITE_CONF = DEFAULT_CONFIG_PATH + \"/ignite.xml.j2\"\n+\n+\n+class Config(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTk4NQ=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTg5NA==", "bodyText": "the filename is ignite_config, but the class name is just config.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460705894", "createdAt": "2020-07-27T07:47:39Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_config.py", "diffHunk": "@@ -17,71 +17,49 @@\n This module renders Ignite config and all related artifacts\n \"\"\"\n \n+from jinja2 import FileSystemLoader, Environment\n+\n+import os\n+\n+DEFAULT_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/config\"\n+DEFAULT_IGNITE_CONF = DEFAULT_CONFIG_PATH + \"/ignite.xml.j2\"\n+\n+\n+class Config(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTk4NQ=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Mzk2MA==", "bodyText": "there are descenders: IgniteServerConfig and IgniteClientConfig that use ignite config files. Config class could render any config", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460743960", "createdAt": "2020-07-27T08:55:18Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_config.py", "diffHunk": "@@ -17,71 +17,49 @@\n This module renders Ignite config and all related artifacts\n \"\"\"\n \n+from jinja2 import FileSystemLoader, Environment\n+\n+import os\n+\n+DEFAULT_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/config\"\n+DEFAULT_IGNITE_CONF = DEFAULT_CONFIG_PATH + \"/ignite.xml.j2\"\n+\n+\n+class Config(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTk4NQ=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTEwNTM3OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/spark_integration_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0ODozNlrOG2uEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNDowMDo0M1rOG3MmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMTE2OQ==", "bodyText": "Let's keep shift to the left", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460031169", "createdAt": "2020-07-24T12:48:36Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/spark_integration_test.py", "diffHunk": "@@ -28,38 +31,37 @@ class SparkIntegrationTest(IgniteTest):\n     3. Checks results of client application.\n     \"\"\"\n \n-    @staticmethod\n-    def properties(client_mode=\"false\"):\n-        return \"\"\"\n-            <property name=\"clientMode\" value=\"{client_mode}\"/>\n-        \"\"\".format(client_mode=client_mode)\n-\n     def __init__(self, test_context):\n         super(SparkIntegrationTest, self).__init__(test_context=test_context)\n-        self.spark = SparkService(test_context, num_nodes=2)\n-        self.ignite = IgniteService(test_context, num_nodes=1)\n+        self.spark = None\n+        self.ignite = None\n \n     def setUp(self):\n-        self.spark.start()\n-        self.ignite.start()\n+        pass\n \n     def teardown(self):\n         self.spark.stop()\n         self.ignite.stop()\n \n-    def test_spark_client(self):\n+    @parametrize(version=str(DEV_BRANCH))\n+    def test_spark_client(self, version):\n+        self.spark = SparkService(self.test_context, version=version, num_nodes=2)\n+        self.spark.start()\n+\n+        self.ignite = IgniteService(self.test_context, version=version, num_nodes=1)\n+        self.ignite.start()\n+\n         self.stage(\"Starting sample data generator\")\n \n-        IgniteApplicationService(\n-            self.test_context,\n-            java_class_name=\"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SampleDataStreamerApplication\",\n-            params=\"cache,1000\",\n-            properties=self.properties(client_mode=\"true\")).run()\n+        IgniteApplicationService(self.test_context,\n+                                 java_class_name=\"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SampleDataStreamerApplication\",\n+                                 params=\"cache,1000\",\n+                                 version=version).run()\n \n         self.stage(\"Starting Spark application\")\n \n-        SparkIgniteApplicationService(\n-            self.test_context,\n-            \"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SparkApplication\",\n-            params=\"spark://\" + self.spark.nodes[0].account.hostname + \":7077\",\n-            timeout_sec=120).run()\n+        SparkIgniteApplicationService(self.test_context,\n+                                      \"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SparkApplication\",\n+                                      params=\"spark://\" + self.spark.nodes[0].account.hostname + \":7077\",\n+                                      version=version,\n+                                      timeout_sec=120).run()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMTM1Nw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460531357", "createdAt": "2020-07-26T14:00:43Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/spark_integration_test.py", "diffHunk": "@@ -28,38 +31,37 @@ class SparkIntegrationTest(IgniteTest):\n     3. Checks results of client application.\n     \"\"\"\n \n-    @staticmethod\n-    def properties(client_mode=\"false\"):\n-        return \"\"\"\n-            <property name=\"clientMode\" value=\"{client_mode}\"/>\n-        \"\"\".format(client_mode=client_mode)\n-\n     def __init__(self, test_context):\n         super(SparkIntegrationTest, self).__init__(test_context=test_context)\n-        self.spark = SparkService(test_context, num_nodes=2)\n-        self.ignite = IgniteService(test_context, num_nodes=1)\n+        self.spark = None\n+        self.ignite = None\n \n     def setUp(self):\n-        self.spark.start()\n-        self.ignite.start()\n+        pass\n \n     def teardown(self):\n         self.spark.stop()\n         self.ignite.stop()\n \n-    def test_spark_client(self):\n+    @parametrize(version=str(DEV_BRANCH))\n+    def test_spark_client(self, version):\n+        self.spark = SparkService(self.test_context, version=version, num_nodes=2)\n+        self.spark.start()\n+\n+        self.ignite = IgniteService(self.test_context, version=version, num_nodes=1)\n+        self.ignite.start()\n+\n         self.stage(\"Starting sample data generator\")\n \n-        IgniteApplicationService(\n-            self.test_context,\n-            java_class_name=\"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SampleDataStreamerApplication\",\n-            params=\"cache,1000\",\n-            properties=self.properties(client_mode=\"true\")).run()\n+        IgniteApplicationService(self.test_context,\n+                                 java_class_name=\"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SampleDataStreamerApplication\",\n+                                 params=\"cache,1000\",\n+                                 version=version).run()\n \n         self.stage(\"Starting Spark application\")\n \n-        SparkIgniteApplicationService(\n-            self.test_context,\n-            \"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SparkApplication\",\n-            params=\"spark://\" + self.spark.nodes[0].account.hostname + \":7077\",\n-            timeout_sec=120).run()\n+        SparkIgniteApplicationService(self.test_context,\n+                                      \"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SparkApplication\",\n+                                      params=\"spark://\" + self.spark.nodes[0].account.hostname + \":7077\",\n+                                      version=version,\n+                                      timeout_sec=120).run()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMTE2OQ=="}, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2776, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}