{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTU5Nzg4", "number": 7966, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoxNDo1M1rOEOjouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoyMDowOFrOEQW2jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjk5Mzg0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoxNDo1M1rOGxxSSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozNjo0OFrOGx4UVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0MDkwNg==", "bodyText": "Redundant NL", "url": "https://github.com/apache/ignite/pull/7966#discussion_r454840906", "createdAt": "2020-07-15T07:14:53Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.*;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6061d85d66bb2e580910f0fa6ce4886a6208d010"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NjExNg==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/7966#discussion_r454956116", "createdAt": "2020-07-15T10:36:48Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.*;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0MDkwNg=="}, "originalCommit": {"oid": "6061d85d66bb2e580910f0fa6ce4886a6208d010"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjk5OTY0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoxNjo0MFrOGxxVsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDozNjo1M1rOGx4Ugw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0MTc3Nw==", "bodyText": "{@inheritDoc}", "url": "https://github.com/apache/ignite/pull/7966#discussion_r454841777", "createdAt": "2020-07-15T07:16:40Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousHandle.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.processors.platform.client.ClientCloseableResource;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientMessageParser;\n+import org.apache.ignite.internal.processors.platform.client.ClientNotification;\n+\n+import javax.cache.event.CacheEntryEvent;\n+import javax.cache.event.CacheEntryListenerException;\n+import javax.cache.event.CacheEntryUpdatedListener;\n+\n+/**\n+ * Continuous query handle.\n+ * NOTE: Do not mark with {@link org.apache.ignite.lang.IgniteAsyncCallback} - it disables batching and sends\n+ * events one by one.\n+ */\n+public class ClientCacheQueryContinuousHandle implements CacheEntryUpdatedListener<Object, Object>, ClientCloseableResource {\n+    /** */\n+    private final ClientConnectionContext ctx;\n+\n+    /** */\n+    private volatile Long id;\n+\n+    /** */\n+    private volatile QueryCursor<?> cur;\n+\n+    /**\n+     * Ctor.\n+     * @param ctx Context.\n+     */\n+    public ClientCacheQueryContinuousHandle(ClientConnectionContext ctx) {\n+        assert ctx != null;\n+\n+        this.ctx = ctx;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onUpdated(Iterable<CacheEntryEvent<?, ?>> iterable) throws CacheEntryListenerException {\n+        // Client is not yet ready to receive notifications - skip them.\n+        if (id == null)\n+            return;\n+\n+        ClientCacheEntryEventNotification notification = new ClientCacheEntryEventNotification(\n+                ClientMessageParser.OP_QUERY_CONTINUOUS_EVENT_NOTIFICATION, id, iterable);\n+\n+        ctx.notifyClient(notification);\n+    }\n+\n+    /**\n+     * Sets the cursor id.\n+     * @param id Cursor id.\n+     */\n+    public void startNotifications(long id, QueryCursor<?> cur) {\n+        assert cur != null;\n+\n+        this.id = id;\n+        this.cur = cur;\n+    }\n+\n+    /** <inheritdoc /> */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6061d85d66bb2e580910f0fa6ce4886a6208d010"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NjE2Mw==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/7966#discussion_r454956163", "createdAt": "2020-07-15T10:36:53Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousHandle.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.processors.platform.client.ClientCloseableResource;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientMessageParser;\n+import org.apache.ignite.internal.processors.platform.client.ClientNotification;\n+\n+import javax.cache.event.CacheEntryEvent;\n+import javax.cache.event.CacheEntryListenerException;\n+import javax.cache.event.CacheEntryUpdatedListener;\n+\n+/**\n+ * Continuous query handle.\n+ * NOTE: Do not mark with {@link org.apache.ignite.lang.IgniteAsyncCallback} - it disables batching and sends\n+ * events one by one.\n+ */\n+public class ClientCacheQueryContinuousHandle implements CacheEntryUpdatedListener<Object, Object>, ClientCloseableResource {\n+    /** */\n+    private final ClientConnectionContext ctx;\n+\n+    /** */\n+    private volatile Long id;\n+\n+    /** */\n+    private volatile QueryCursor<?> cur;\n+\n+    /**\n+     * Ctor.\n+     * @param ctx Context.\n+     */\n+    public ClientCacheQueryContinuousHandle(ClientConnectionContext ctx) {\n+        assert ctx != null;\n+\n+        this.ctx = ctx;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onUpdated(Iterable<CacheEntryEvent<?, ?>> iterable) throws CacheEntryListenerException {\n+        // Client is not yet ready to receive notifications - skip them.\n+        if (id == null)\n+            return;\n+\n+        ClientCacheEntryEventNotification notification = new ClientCacheEntryEventNotification(\n+                ClientMessageParser.OP_QUERY_CONTINUOUS_EVENT_NOTIFICATION, id, iterable);\n+\n+        ctx.notifyClient(notification);\n+    }\n+\n+    /**\n+     * Sets the cursor id.\n+     * @param id Cursor id.\n+     */\n+    public void startNotifications(long id, QueryCursor<?> cur) {\n+        assert cur != null;\n+\n+        this.id = id;\n+        this.cur = cur;\n+    }\n+\n+    /** <inheritdoc /> */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0MTc3Nw=="}, "originalCommit": {"oid": "6061d85d66bb2e580910f0fa6ce4886a6208d010"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE2OTQ0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzowNjo1M1rOGzSQ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyNjowM1rOGzc_QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyOTgxNw==", "bodyText": "ScanQuery -> ContinuousQuery", "url": "https://github.com/apache/ignite/pull/7966#discussion_r456429817", "createdAt": "2020-07-17T13:06:53Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientPlatform;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+import org.apache.ignite.internal.processors.platform.client.ClientStatus;\n+import org.apache.ignite.internal.processors.platform.client.IgniteClientException;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+    /** Query. */\n+    private final ContinuousQuery qry;\n+\n+    /** */\n+    private final Object filter;\n+\n+    /** */\n+    private final byte filterPlatform;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param reader Reader.\n+     */\n+    public ClientCacheQueryContinuousRequest(BinaryRawReaderEx reader) {\n+        super(reader);\n+\n+        int pageSize = reader.readInt();\n+        long timeInterval = reader.readLong();\n+        boolean includeExpired = reader.readBoolean();\n+\n+        filter = reader.readObjectDetached();\n+        filterPlatform = filter == null ? 0 : reader.readByte();\n+\n+        qry = new ContinuousQuery();\n+\n+        qry.setPageSize(pageSize)\n+           .setTimeInterval(timeInterval)\n+           .setIncludeExpired(includeExpired);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientResponse process(ClientConnectionContext ctx) {\n+        qry.setRemoteFilterFactory(getFilterFactory(ctx));\n+\n+        ctx.incrementCursors();\n+\n+        try {\n+            IgniteCache cache = filterPlatform == ClientPlatform.JAVA && !isKeepBinary()\n+                    ? rawCache(ctx)\n+                    : cache(ctx);\n+\n+            ClientCacheQueryContinuousHandle handle = new ClientCacheQueryContinuousHandle(ctx);\n+            qry.setLocalListener(handle);\n+\n+            QueryCursor cur = cache.query(qry);\n+            long cursorId = ctx.resources().put(handle);\n+            handle.setCursor(cur);\n+\n+            return new ClientCacheQueryContinuousResponse(requestId(), handle, cursorId);\n+        }\n+        catch (Exception e) {\n+            ctx.decrementCursors();\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Gets the filter factory.\n+     *\n+     * @param ctx Connection context.\n+     * @return Filter factory or null.\n+     */\n+    private Factory<? extends CacheEntryEventFilter> getFilterFactory(ClientConnectionContext ctx) {\n+        if (filter == null)\n+            return null;\n+\n+        if (!(filter instanceof BinaryObject))\n+            throw new IgniteClientException(ClientStatus.FAILED,\n+                    \"Filter must be a BinaryObject: \" + filter.getClass());\n+\n+        BinaryObjectImpl bo = (BinaryObjectImpl) filter;\n+\n+        switch (filterPlatform) {\n+            case ClientPlatform.JAVA: {\n+                if (bo.typeId() == GridBinaryMarshaller.PLATFORM_JAVA_OBJECT_FACTORY_PROXY) {\n+                    PlatformJavaObjectFactoryProxy prx = bo.deserialize();\n+\n+                    CacheEntryEventSerializableFilter rmtFilter =\n+                            (CacheEntryEventSerializableFilter) prx.factory(ctx.kernalContext()).create();\n+\n+                    return FactoryBuilder.factoryOf(rmtFilter);\n+                }\n+\n+                return bo.deserialize();\n+            }\n+\n+            case ClientPlatform.DOTNET: {\n+                PlatformContext platformCtx = ctx.kernalContext().platform().context();\n+\n+                String curPlatform = platformCtx.platform();\n+\n+                if (!PlatformUtils.PLATFORM_DOTNET.equals(curPlatform))\n+                    throw new IgniteClientException(ClientStatus.FAILED, \"ScanQuery filter platform is \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e8da8910941e77dc1c3dc062c944bbdaf7ab92"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTUwNA==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/7966#discussion_r456605504", "createdAt": "2020-07-17T18:26:03Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientPlatform;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+import org.apache.ignite.internal.processors.platform.client.ClientStatus;\n+import org.apache.ignite.internal.processors.platform.client.IgniteClientException;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+    /** Query. */\n+    private final ContinuousQuery qry;\n+\n+    /** */\n+    private final Object filter;\n+\n+    /** */\n+    private final byte filterPlatform;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param reader Reader.\n+     */\n+    public ClientCacheQueryContinuousRequest(BinaryRawReaderEx reader) {\n+        super(reader);\n+\n+        int pageSize = reader.readInt();\n+        long timeInterval = reader.readLong();\n+        boolean includeExpired = reader.readBoolean();\n+\n+        filter = reader.readObjectDetached();\n+        filterPlatform = filter == null ? 0 : reader.readByte();\n+\n+        qry = new ContinuousQuery();\n+\n+        qry.setPageSize(pageSize)\n+           .setTimeInterval(timeInterval)\n+           .setIncludeExpired(includeExpired);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientResponse process(ClientConnectionContext ctx) {\n+        qry.setRemoteFilterFactory(getFilterFactory(ctx));\n+\n+        ctx.incrementCursors();\n+\n+        try {\n+            IgniteCache cache = filterPlatform == ClientPlatform.JAVA && !isKeepBinary()\n+                    ? rawCache(ctx)\n+                    : cache(ctx);\n+\n+            ClientCacheQueryContinuousHandle handle = new ClientCacheQueryContinuousHandle(ctx);\n+            qry.setLocalListener(handle);\n+\n+            QueryCursor cur = cache.query(qry);\n+            long cursorId = ctx.resources().put(handle);\n+            handle.setCursor(cur);\n+\n+            return new ClientCacheQueryContinuousResponse(requestId(), handle, cursorId);\n+        }\n+        catch (Exception e) {\n+            ctx.decrementCursors();\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Gets the filter factory.\n+     *\n+     * @param ctx Connection context.\n+     * @return Filter factory or null.\n+     */\n+    private Factory<? extends CacheEntryEventFilter> getFilterFactory(ClientConnectionContext ctx) {\n+        if (filter == null)\n+            return null;\n+\n+        if (!(filter instanceof BinaryObject))\n+            throw new IgniteClientException(ClientStatus.FAILED,\n+                    \"Filter must be a BinaryObject: \" + filter.getClass());\n+\n+        BinaryObjectImpl bo = (BinaryObjectImpl) filter;\n+\n+        switch (filterPlatform) {\n+            case ClientPlatform.JAVA: {\n+                if (bo.typeId() == GridBinaryMarshaller.PLATFORM_JAVA_OBJECT_FACTORY_PROXY) {\n+                    PlatformJavaObjectFactoryProxy prx = bo.deserialize();\n+\n+                    CacheEntryEventSerializableFilter rmtFilter =\n+                            (CacheEntryEventSerializableFilter) prx.factory(ctx.kernalContext()).create();\n+\n+                    return FactoryBuilder.factoryOf(rmtFilter);\n+                }\n+\n+                return bo.deserialize();\n+            }\n+\n+            case ClientPlatform.DOTNET: {\n+                PlatformContext platformCtx = ctx.kernalContext().platform().context();\n+\n+                String curPlatform = platformCtx.platform();\n+\n+                if (!PlatformUtils.PLATFORM_DOTNET.equals(curPlatform))\n+                    throw new IgniteClientException(ClientStatus.FAILED, \"ScanQuery filter platform is \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyOTgxNw=="}, "originalCommit": {"oid": "14e8da8910941e77dc1c3dc062c944bbdaf7ab92"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIwNDE1OnYy", "diffSide": "RIGHT", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/Query/Continuous/ContinuousQueryDisconnectedEventArgs.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNjo0MlrOGzSlkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyNjoxMFrOGzc_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTA5MQ==", "bodyText": "NL", "url": "https://github.com/apache/ignite/pull/7966#discussion_r456435091", "createdAt": "2020-07-17T13:16:42Z", "author": {"login": "alex-plekhanov"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/Query/Continuous/ContinuousQueryDisconnectedEventArgs.cs", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */namespace Apache.Ignite.Core.Client.Cache.Query.Continuous", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e8da8910941e77dc1c3dc062c944bbdaf7ab92"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTU1Nw==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/7966#discussion_r456605557", "createdAt": "2020-07-17T18:26:10Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/Query/Continuous/ContinuousQueryDisconnectedEventArgs.cs", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */namespace Apache.Ignite.Core.Client.Cache.Query.Continuous", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNTA5MQ=="}, "originalCommit": {"oid": "14e8da8910941e77dc1c3dc062c944bbdaf7ab92"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg3MDg2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoyMDowOFrOG0d2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo0NDozMlrOG1a_tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2ODE4Nw==", "bodyText": "Are you sure we should treat it as a query? I know there is a query word in name, but I'm not sure those mechanisms belong to the same pool.", "url": "https://github.com/apache/ignite/pull/7966#discussion_r457668187", "createdAt": "2020-07-20T20:20:08Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientPlatform;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+import org.apache.ignite.internal.processors.platform.client.ClientStatus;\n+import org.apache.ignite.internal.processors.platform.client.IgniteClientException;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+    /** Query. */\n+    private final ContinuousQuery qry;\n+\n+    /** */\n+    private final Object filter;\n+\n+    /** */\n+    private final byte filterPlatform;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param reader Reader.\n+     */\n+    public ClientCacheQueryContinuousRequest(BinaryRawReaderEx reader) {\n+        super(reader);\n+\n+        int pageSize = reader.readInt();\n+        long timeInterval = reader.readLong();\n+        boolean includeExpired = reader.readBoolean();\n+\n+        filter = reader.readObjectDetached();\n+        filterPlatform = filter == null ? 0 : reader.readByte();\n+\n+        qry = new ContinuousQuery();\n+\n+        qry.setPageSize(pageSize)\n+           .setTimeInterval(timeInterval)\n+           .setIncludeExpired(includeExpired);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientResponse process(ClientConnectionContext ctx) {\n+        qry.setRemoteFilterFactory(getFilterFactory(ctx));\n+\n+        ctx.incrementCursors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d21b0e368ffe0de70e4ddef9e7a01145098f52f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzI3MQ==", "bodyText": "Good point, I've posted this to the dev list.", "url": "https://github.com/apache/ignite/pull/7966#discussion_r457893271", "createdAt": "2020-07-21T07:30:11Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientPlatform;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+import org.apache.ignite.internal.processors.platform.client.ClientStatus;\n+import org.apache.ignite.internal.processors.platform.client.IgniteClientException;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+    /** Query. */\n+    private final ContinuousQuery qry;\n+\n+    /** */\n+    private final Object filter;\n+\n+    /** */\n+    private final byte filterPlatform;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param reader Reader.\n+     */\n+    public ClientCacheQueryContinuousRequest(BinaryRawReaderEx reader) {\n+        super(reader);\n+\n+        int pageSize = reader.readInt();\n+        long timeInterval = reader.readLong();\n+        boolean includeExpired = reader.readBoolean();\n+\n+        filter = reader.readObjectDetached();\n+        filterPlatform = filter == null ? 0 : reader.readByte();\n+\n+        qry = new ContinuousQuery();\n+\n+        qry.setPageSize(pageSize)\n+           .setTimeInterval(timeInterval)\n+           .setIncludeExpired(includeExpired);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientResponse process(ClientConnectionContext ctx) {\n+        qry.setRemoteFilterFactory(getFilterFactory(ctx));\n+\n+        ctx.incrementCursors();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2ODE4Nw=="}, "originalCommit": {"oid": "6d21b0e368ffe0de70e4ddef9e7a01145098f52f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3MDAwNg==", "bodyText": "No replies on dev list. Let's keep it as is for now. Continuous Query still gives us a QueryCursor, so I think it fits with the other cursors.", "url": "https://github.com/apache/ignite/pull/7966#discussion_r458670006", "createdAt": "2020-07-22T09:44:32Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cache/ClientCacheQueryContinuousRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cache;\n+\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.CacheEntryEventSerializableFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.internal.binary.BinaryObjectImpl;\n+import org.apache.ignite.internal.binary.BinaryRawReaderEx;\n+import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n+import org.apache.ignite.internal.processors.platform.PlatformContext;\n+import org.apache.ignite.internal.processors.platform.PlatformJavaObjectFactoryProxy;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientPlatform;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+import org.apache.ignite.internal.processors.platform.client.ClientStatus;\n+import org.apache.ignite.internal.processors.platform.client.IgniteClientException;\n+import org.apache.ignite.internal.processors.platform.utils.PlatformUtils;\n+\n+/**\n+ * Continuous query request.\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class ClientCacheQueryContinuousRequest extends ClientCacheRequest {\n+    /** Query. */\n+    private final ContinuousQuery qry;\n+\n+    /** */\n+    private final Object filter;\n+\n+    /** */\n+    private final byte filterPlatform;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param reader Reader.\n+     */\n+    public ClientCacheQueryContinuousRequest(BinaryRawReaderEx reader) {\n+        super(reader);\n+\n+        int pageSize = reader.readInt();\n+        long timeInterval = reader.readLong();\n+        boolean includeExpired = reader.readBoolean();\n+\n+        filter = reader.readObjectDetached();\n+        filterPlatform = filter == null ? 0 : reader.readByte();\n+\n+        qry = new ContinuousQuery();\n+\n+        qry.setPageSize(pageSize)\n+           .setTimeInterval(timeInterval)\n+           .setIncludeExpired(includeExpired);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientResponse process(ClientConnectionContext ctx) {\n+        qry.setRemoteFilterFactory(getFilterFactory(ctx));\n+\n+        ctx.incrementCursors();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2ODE4Nw=="}, "originalCommit": {"oid": "6d21b0e368ffe0de70e4ddef9e7a01145098f52f"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2420, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}