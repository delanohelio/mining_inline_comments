{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTc0NDYz", "number": 7772, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMjoyOFrOD6MrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNjoxMVrOD6Pj5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzUxNjY2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMjoyOFrOGR5bbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxMDowNlrOGR9vTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTg4Ng==", "bodyText": "What's the point throw an Exception and catch it two lines later?", "url": "https://github.com/apache/ignite/pull/7772#discussion_r421419886", "createdAt": "2020-05-07T11:02:28Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "diffHunk": "@@ -125,17 +130,24 @@ public IgniteSecurityProcessor(GridKernalContext ctx, GridSecurityProcessor secP\n \n     /** {@inheritDoc} */\n     @Override public OperationSecurityContext withContext(UUID subjId) {\n-        ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n-            .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+        try {\n+            ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n+                .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+\n+            SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n+                uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n+                : secPrc.securityContext(subjId);\n \n-        SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n-            uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n-            : secPrc.securityContext(subjId);\n+            if (res == null)\n+                throw new IllegalStateException(\"Failed to find security context for subject with given ID : \" + subjId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4b5ed7134fbfc7047b87def428aa81f174e1d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDI5Mg==", "bodyText": "@nizhikov\nAfter logging inside the catch block, this exception will be thrown outside where it can be handled.", "url": "https://github.com/apache/ignite/pull/7772#discussion_r421444292", "createdAt": "2020-05-07T11:50:52Z", "author": {"login": "dgarus"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "diffHunk": "@@ -125,17 +130,24 @@ public IgniteSecurityProcessor(GridKernalContext ctx, GridSecurityProcessor secP\n \n     /** {@inheritDoc} */\n     @Override public OperationSecurityContext withContext(UUID subjId) {\n-        ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n-            .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+        try {\n+            ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n+                .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+\n+            SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n+                uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n+                : secPrc.securityContext(subjId);\n \n-        SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n-            uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n-            : secPrc.securityContext(subjId);\n+            if (res == null)\n+                throw new IllegalStateException(\"Failed to find security context for subject with given ID : \" + subjId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTg4Ng=="}, "originalCommit": {"oid": "6a4b5ed7134fbfc7047b87def428aa81f174e1d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NjQwNQ==", "bodyText": "We can log it before throw.", "url": "https://github.com/apache/ignite/pull/7772#discussion_r421446405", "createdAt": "2020-05-07T11:54:55Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "diffHunk": "@@ -125,17 +130,24 @@ public IgniteSecurityProcessor(GridKernalContext ctx, GridSecurityProcessor secP\n \n     /** {@inheritDoc} */\n     @Override public OperationSecurityContext withContext(UUID subjId) {\n-        ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n-            .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+        try {\n+            ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n+                .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+\n+            SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n+                uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n+                : secPrc.securityContext(subjId);\n \n-        SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n-            uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n-            : secPrc.securityContext(subjId);\n+            if (res == null)\n+                throw new IllegalStateException(\"Failed to find security context for subject with given ID : \" + subjId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTg4Ng=="}, "originalCommit": {"oid": "6a4b5ed7134fbfc7047b87def428aa81f174e1d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MDUwOQ==", "bodyText": "@nizhikov fixed", "url": "https://github.com/apache/ignite/pull/7772#discussion_r421490509", "createdAt": "2020-05-07T13:10:06Z", "author": {"login": "dgarus"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "diffHunk": "@@ -125,17 +130,24 @@ public IgniteSecurityProcessor(GridKernalContext ctx, GridSecurityProcessor secP\n \n     /** {@inheritDoc} */\n     @Override public OperationSecurityContext withContext(UUID subjId) {\n-        ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n-            .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+        try {\n+            ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n+                .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+\n+            SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n+                uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n+                : secPrc.securityContext(subjId);\n \n-        SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n-            uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n-            : secPrc.securityContext(subjId);\n+            if (res == null)\n+                throw new IllegalStateException(\"Failed to find security context for subject with given ID : \" + subjId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTg4Ng=="}, "originalCommit": {"oid": "6a4b5ed7134fbfc7047b87def428aa81f174e1d9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk4OTUxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNjoxMVrOGR9-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNjoxMVrOGR9-5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDUwMw==", "bodyText": "if (res != null)\n        return withContext(res);\n}\ncatch (Throwable e) {\n    log.error(MSG, e);\n    throw e;\n}\n\nString msg = \"Failed to find security context for subject with given ID : \" + subjId;\n\nlog.error(msg);\nthrow new IllegalStateException(msg);", "url": "https://github.com/apache/ignite/pull/7772#discussion_r421494503", "createdAt": "2020-05-07T13:16:11Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java", "diffHunk": "@@ -125,17 +133,30 @@ public IgniteSecurityProcessor(GridKernalContext ctx, GridSecurityProcessor secP\n \n     /** {@inheritDoc} */\n     @Override public OperationSecurityContext withContext(UUID subjId) {\n-        ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n-            .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+        RuntimeException error;\n+\n+        try {\n+            ClusterNode node = Optional.ofNullable(ctx.discovery().node(subjId))\n+                .orElseGet(() -> ctx.discovery().historicalNode(subjId));\n+\n+            SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n+                uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n+                : secPrc.securityContext(subjId);\n \n-        SecurityContext res = node != null ? secCtxs.computeIfAbsent(subjId,\n-            uuid -> nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), node))\n-            : secPrc.securityContext(subjId);\n+            if (res != null)\n+                return withContext(res);\n+\n+            error = new IllegalStateException(\"Failed to find security context for subject with given ID : \" + subjId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd506d4c45654c800097650ef8e81d70888b6411"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2485, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}