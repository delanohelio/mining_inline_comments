{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDU5NTc0", "number": 7992, "title": "IGNITE-7369 .NET: Thin Client Transactions", "bodyText": "Implemented  Thin Client Transactions", "createdAt": "2020-07-05T20:56:59Z", "url": "https://github.com/apache/ignite/pull/7992", "merged": true, "mergeCommit": {"oid": "6633df5d2fa98714dcc377f38f7b8e331928a3ec"}, "closed": true, "closedAt": "2020-09-22T16:09:25Z", "author": {"login": "gurustron"}, "timelineItems": {"totalCount": 106, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLV_QVAH2gAyNDQ0NDU5NTc0OjZkN2E1MWRhMWNkY2FlYWJhZWU4YmJjZmU5MzM0ZGQ4OTU2YjNiOGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLaPPjgFqTQ5MzYyMjU3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d7a51da1cdcaeabaee8bbcfe9334dd8956b3b8d", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/6d7a51da1cdcaeabaee8bbcfe9334dd8956b3b8d", "committedDate": "2020-09-22T11:07:30Z", "message": "Cleanup: IDE warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b493f5b02c92d30a577c5fa16d953c85347fb031", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/b493f5b02c92d30a577c5fa16d953c85347fb031", "committedDate": "2020-09-22T11:08:31Z", "message": "Cleanup: xmldoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c8459ec8e7a4277833ab174fc198f6e12b8a5c4", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/8c8459ec8e7a4277833ab174fc198f6e12b8a5c4", "committedDate": "2020-09-22T11:09:33Z", "message": "Merge remote-tracking branch 'origin/master' into IGNITE-7369-thin-transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db9772e6d16204b3c203cddf788e97420f608603", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/db9772e6d16204b3c203cddf788e97420f608603", "committedDate": "2020-09-22T11:18:05Z", "message": "Cleanup: xmldoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c6ffd02bfffd8009e5b8438b4e89b3ff7ce6fe", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/a2c6ffd02bfffd8009e5b8438b4e89b3ff7ce6fe", "committedDate": "2020-09-22T11:39:29Z", "message": "cleanup: docfx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjIyNTc5", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-493622579", "createdAt": "2020-09-22T16:04:35Z", "commit": {"oid": "a2c6ffd02bfffd8009e5b8438b4e89b3ff7ce6fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c331464a3852b1589d8883253c62d39ce9cde2f7", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c331464a3852b1589d8883253c62d39ce9cde2f7", "committedDate": "2020-04-10T19:47:11Z", "message": "started"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfab721ea488e984d958803def191e3ca1a5b6fb", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/bfab721ea488e984d958803def191e3ca1a5b6fb", "committedDate": "2020-04-21T21:19:40Z", "message": "IGNITE-7369 - start impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1721fbab419d21c9aa1cb221dbc029d38921e971", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/1721fbab419d21c9aa1cb221dbc029d38921e971", "committedDate": "2020-05-02T20:29:53Z", "message": "IGNITE-7369 - some moving around"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec2e6230add5fc5f86ec76d3074d41f83789fac3", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/ec2e6230add5fc5f86ec76d3074d41f83789fac3", "committedDate": "2020-05-04T19:41:12Z", "message": "IGNITE-7369 - start creating hierarchy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0bbad7247ca9e1b132bcf49d35e563f066d9bc1", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/b0bbad7247ca9e1b132bcf49d35e563f066d9bc1", "committedDate": "2020-05-05T13:49:10Z", "message": "IGNITE-7369 - IClientTransactions interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71766b0832a14bb3f5705cdd56cbb3af9c944a5b", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/71766b0832a14bb3f5705cdd56cbb3af9c944a5b", "committedDate": "2020-05-08T21:11:43Z", "message": "IGNITE-7369 - IClientTransaction interface and implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450ee04a2646bb8b4c3331a6c2fd8b4d90de8559", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/450ee04a2646bb8b4c3331a6c2fd8b4d90de8559", "committedDate": "2020-05-14T20:33:35Z", "message": "IGNITE-7369 - first dummy test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f2942d41f3ca46cd1b56108ca7c580f67cc8c5e", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/3f2942d41f3ca46cd1b56108ca7c580f67cc8c5e", "committedDate": "2020-05-16T21:36:05Z", "message": "IGNITE-7369 - first dummy test + closing transaction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f337ee74b480b6b330bdc102964c5936f29503", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/03f337ee74b480b6b330bdc102964c5936f29503", "committedDate": "2020-05-17T20:37:19Z", "message": "IGNITE-7369 - first dummy test + rollback transaction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd97b13801c97a1cb771fdd19eaea89f903d3a9f", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/cd97b13801c97a1cb771fdd19eaea89f903d3a9f", "committedDate": "2020-05-17T20:50:33Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions\n\n# Conflicts:\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Apache.Ignite.Core.csproj\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Cache/CacheClient.cs\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientOpExtensions.cs\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/IgniteClient.cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ee63c5a6e98a413817766624f2d6f1eff4ea3b", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c3ee63c5a6e98a413817766624f2d6f1eff4ea3b", "committedDate": "2020-05-17T21:33:56Z", "message": "IGNITE-7369 - merge master."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b256e6e7d08c6afc57ada2fc4fe7ddeebad00bbc", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/b256e6e7d08c6afc57ada2fc4fe7ddeebad00bbc", "committedDate": "2020-05-19T21:03:41Z", "message": "IGNITE-7369 - rollback, commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03ed3ac144fc4ed946ff64887ac823a4448f8de7", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/03ed3ac144fc4ed946ff64887ac823a4448f8de7", "committedDate": "2020-05-22T20:20:10Z", "message": "IGNITE-7369 - default values started. close."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88012fb4dcc2ab35a16c46b1089232149189e5dd", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/88012fb4dcc2ab35a16c46b1089232149189e5dd", "committedDate": "2020-05-27T22:17:03Z", "message": "IGNITE-7369 - ServerCount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9d07756a47e88fcdd0e843043da69c09da35be", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/9c9d07756a47e88fcdd0e843043da69c09da35be", "committedDate": "2020-06-03T19:06:28Z", "message": "IGNITE-7369 - more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba0710b32018c448ce776b0182e27e574d6b2850", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/ba0710b32018c448ce776b0182e27e574d6b2850", "committedDate": "2020-06-03T21:08:37Z", "message": "IGNITE-7369 - redesign current transaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2ae1fbffcd90a75c53e6e1df08a474ea5f404e", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/fd2ae1fbffcd90a75c53e6e1df08a474ea5f404e", "committedDate": "2020-06-03T21:09:53Z", "message": "IGNITE-7369 - fix test description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6e7e9f8b40d5191b1850f53f96816a98a6c3c2", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/5b6e7e9f8b40d5191b1850f53f96816a98a6c3c2", "committedDate": "2020-06-07T13:10:42Z", "message": "IGNITE-7369 - WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de7b5e29c51428ebbd071a70a67547e9034f21df", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/de7b5e29c51428ebbd071a70a67547e9034f21df", "committedDate": "2020-06-13T21:17:37Z", "message": "IGNITE-7369 - TransactionScope support started"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2556ce4ac07b6c36c82e95e3d69b25022359a5", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/ff2556ce4ac07b6c36c82e95e3d69b25022359a5", "committedDate": "2020-06-18T18:31:03Z", "message": "IGNITE-7369 - TransactionScope WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c3a0c4adaa82c612fea02238368190c53febbec", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/5c3a0c4adaa82c612fea02238368190c53febbec", "committedDate": "2020-06-22T21:07:08Z", "message": "IGNITE-7369 - TransactionScope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c2539187d8e14d1c22347e4906051744d7ace3", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/b7c2539187d8e14d1c22347e4906051744d7ace3", "committedDate": "2020-06-28T13:28:20Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions\n\n# Conflicts:\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Client/IIgniteClient.cs\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientFeatures.cs\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/IgniteClient.cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1e3aa8e0d8fed131a90987de0dc7e806c109338", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c1e3aa8e0d8fed131a90987de0dc7e806c109338", "committedDate": "2020-06-28T21:40:41Z", "message": "IGNITE-7369 - TransactionScope tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a603d66d3da7c6469c7940f422b535d9b95ae3", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f7a603d66d3da7c6469c7940f422b535d9b95ae3", "committedDate": "2020-06-29T20:11:54Z", "message": "IGNITE-7369 - TransactionScope tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b4142700f6811ade601d8b6deb9047381943f2", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/a7b4142700f6811ade601d8b6deb9047381943f2", "committedDate": "2020-06-29T20:33:32Z", "message": "IGNITE-7369 - test refactoring."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed6a342d83720eea81a48e34e39ff5849ca1933", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/4ed6a342d83720eea81a48e34e39ff5849ca1933", "committedDate": "2020-06-29T20:45:47Z", "message": "IGNITE-7369 - TransactionScope tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3342810a005aad6fc05177ecf78138cded4037f4", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/3342810a005aad6fc05177ecf78138cded4037f4", "committedDate": "2020-06-29T23:15:59Z", "message": "IGNITE-7369 - with label WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61b27a24122a304ae1c9a64664f2a788cffd325", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f61b27a24122a304ae1c9a64664f2a788cffd325", "committedDate": "2020-06-29T23:56:46Z", "message": "IGNITE-7369 - with label tests WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4be26b29189d79615e68cf80034e4d1515f637b", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f4be26b29189d79615e68cf80034e4d1515f637b", "committedDate": "2020-07-05T13:56:58Z", "message": "IGNITE-7369 - disable partitions awareness for transactions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57556745ffb61327f749b80f82dd1d5487a7c5a3", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/57556745ffb61327f749b80f82dd1d5487a7c5a3", "committedDate": "2020-07-05T20:02:08Z", "message": "IGNITE-7369 - remove labeled ambient transaction code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e457d29c5ad7fd632931badace340e8aa27613", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f7e457d29c5ad7fd632931badace340e8aa27613", "committedDate": "2020-07-05T20:02:25Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c94695a244f4ed4f5b79ae03dd4757a6c474aa8", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/1c94695a244f4ed4f5b79ae03dd4757a6c474aa8", "committedDate": "2020-07-05T20:32:28Z", "message": "IGNITE-7369 - startTxIfNeeded."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98075cfed31cd05cef6683bd527794fb706ee3e2", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/98075cfed31cd05cef6683bd527794fb706ee3e2", "committedDate": "2020-07-05T20:54:45Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186fd1f2e195063c0748cd87bf47348baf41f5b7", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/186fd1f2e195063c0748cd87bf47348baf41f5b7", "committedDate": "2020-07-05T21:05:28Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa0d6a99077dcbb6aa65f7be01d42b57fad1642a", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/aa0d6a99077dcbb6aa65f7be01d42b57fad1642a", "committedDate": "2020-07-05T21:07:26Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c3d172515837d67838de7d9bb83ca949eae599ac", "committedDate": "2020-07-06T09:26:46Z", "message": "IGNITE-7369 - find ignite without name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDMyNDQ4", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-444032448", "createdAt": "2020-07-07T15:58:27Z", "commit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTo1ODoyOFrOGuFOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyMToxMlrOGuGH6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3MzIxOQ==", "bodyText": "Please add those tests to .DotNetCore project as well.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450973219", "createdAt": "2020-07-07T15:58:28Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj", "diffHunk": "@@ -143,6 +143,9 @@\n     <Compile Include=\"Cache\\Query\\Linq\\CacheLinqTest.Contains.cs\" />\n     <Compile Include=\"Cache\\Store\\CacheStoreSessionTestCodeConfig.cs\" />\n     <Compile Include=\"Cache\\Store\\CacheStoreSessionTestSharedFactory.cs\" />\n+    <Compile Include=\"Client\\Cache\\CacheClientAbstractTxTest.cs\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3MzY1Mw==", "bodyText": "Missing inheritdoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450973653", "createdAt": "2020-07-07T15:59:05Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheClientLocalTxTest.cs", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Client.Cache\n+{\n+    /// <summary>\n+    /// Tests client transactions for single node.\n+    /// </summary>\n+    public class CacheClientLocalTxTest : CacheClientAbstractTxTest\n+    {\n+        /// <summary>\n+        ///  Initializes a new instance of the <see cref=\"CacheClientLocalTxTest\"/> class.\n+        /// </summary>\n+        public CacheClientLocalTxTest() : base(1, false)\n+        {\n+            // No-op.\n+        }\n+\n+        protected override string GetCacheName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NDk1Nw==", "bodyText": "Let's rename to ITransactionsClient to be consistent with ICacheClient, IComputeClient.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450974957", "createdAt": "2020-07-07T16:00:58Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/IClientTransactions.cs", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// </summary>\n+    public interface IClientTransactions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTI0MQ==", "bodyText": "Let's rename to ITransactionClient to be consistent with ICacheClient, IComputeClient.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450975241", "createdAt": "2020-07-07T16:01:20Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/IClientTransaction.cs", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+\n+    /// <summary>\n+    /// Thin client transaction.\n+    /// </summary>\n+    public interface IClientTransaction : IDisposable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzU1Mw==", "bodyText": "Please convert to a method for consistency with IIgnite.GetTransactions.\nMethod is also a more future-proof option (see https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms229054(v=vs.100)).", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450977553", "createdAt": "2020-07-07T16:04:58Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/IIgniteClient.cs", "diffHunk": "@@ -111,6 +112,11 @@ public interface IIgniteClient : IDisposable\n         [SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\", Justification = \"Semantics.\")]\n         IBinary GetBinary();\n \n+        /// <summary>\n+        /// Gets Ignite transactions facade.\n+        /// </summary>\n+        IClientTransactions Transactions { get; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTIxMw==", "bodyText": "Please add more explanation - why is this useful, how to retrieve this label", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450979213", "createdAt": "2020-07-07T16:07:34Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/IClientTransactions.cs", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// </summary>\n+    public interface IClientTransactions\n+    {\n+        /// <summary>\n+        /// Starts a new transaction with the default isolation level, concurrency and timeout. \n+        /// </summary>\n+        /// <returns>New transaction.</returns>\n+        IClientTransaction TxStart();\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency and isolation.\n+        /// </summary>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <returns>New transaction.</returns>\n+        IClientTransaction TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation);\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency, isolation and timeout.\n+        /// </summary>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <param name=\"timeout\">Timeout. TimeSpan. Zero for indefinite timeout.</param>\n+        /// <returns>New transaction.</returns>\n+        IClientTransaction TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation, TimeSpan timeout);\n+\n+        /// <summary>\n+        /// Returns instance of <see cref=\"IClientTransactions\"/>> to mark a transaction with a special label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MjI3Ng==", "bodyText": "HasFlag is slow on older frameworks, let's avoid it here.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450982276", "createdAt": "2020-07-07T16:12:06Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Cache/CacheClient.cs", "diffHunk": "@@ -754,14 +797,26 @@ private void WriteRequest(Action<ClientRequestContext> writeAction, ClientReques\n         {\n             ctx.Stream.WriteInt(_id);\n \n+            var flags = ClientCacheRequestFlag.None;\n             if (_expiryPolicy != null)\n             {\n                 ctx.Features.ValidateWithExpiryPolicyFlag();\n-                ctx.Stream.WriteByte((byte) ClientCacheRequestFlag.WithExpiryPolicy);\n-                ExpiryPolicySerializer.WritePolicy(ctx.Writer, _expiryPolicy);\n+                flags = flags | ClientCacheRequestFlag.WithExpiryPolicy;\n             }\n-            else\n-                ctx.Stream.WriteByte((byte) ClientCacheRequestFlag.None); // Flags (skipStore, etc).\n+\n+            var tx = _ignite.Transactions.CurrentTx;\n+            if (tx != null)\n+            {\n+                flags |= ClientCacheRequestFlag.WithTransactional;\n+            }\n+\n+            ctx.Stream.WriteByte((byte) flags);\n+\n+            if (flags.HasFlag(ClientCacheRequestFlag.WithExpiryPolicy))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NjI5Nw==", "bodyText": "To be precise: transactional operation must be executed using the same connection (same ClientSocket instance) that started the transaction.\nAnd the check here does not guarantee this at all - reconnect could have happened, for example.\nA proper approach is to store get the socket from ClientContextBase.Socket property when executing ClientOp.TxStart, and use that socket directly for transactional operations.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450986297", "createdAt": "2020-07-07T16:18:26Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientFailoverSocket.cs", "diffHunk": "@@ -269,6 +278,12 @@ private ClientSocket GetAffinitySocket<TKey>(int cacheId, TKey key)\n                 return null;\n             }\n \n+            // Transactional operation should be executed on node started the transaction.\n+            if (_transactions.CurrentTx != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4ODAxMQ==", "bodyText": "Do we need volatile? Transactions are tied to a specific thread, right?", "url": "https://github.com/apache/ignite/pull/7992#discussion_r450988011", "createdAt": "2020-07-07T16:21:12Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/ClientTransaction.cs", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Threading;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transaction facade.\n+    /// </summary>\n+    internal class ClientTransaction: IClientTransactionInternal\n+    {\n+        /** Unique  transaction ID.*/\n+        private readonly int _id;\n+\n+        /** Ignite. */\n+        private readonly IgniteClient _ignite;\n+\n+        /* Transactions. */\n+        private readonly ClientTransactions _transactions;\n+\n+        /** Transaction is closed. */\n+        private volatile bool _closed; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d172515837d67838de7d9bb83ca949eae599ac"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc25648fd115a90a84e25d7abc6f0176c43f7195", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/cc25648fd115a90a84e25d7abc6f0176c43f7195", "committedDate": "2020-07-08T15:27:37Z", "message": "IGNITE-7369 - change HasFlag."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f896827e5ba9ed878c6fced3cc9595520086b5d9", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f896827e5ba9ed878c6fced3cc9595520086b5d9", "committedDate": "2020-07-08T19:19:15Z", "message": "IGNITE-7369 - some fixes after review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1e678cafe2c8ae5366b2ffde5a03f1ccd8cf6f8", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c1e678cafe2c8ae5366b2ffde5a03f1ccd8cf6f8", "committedDate": "2020-07-09T17:47:22Z", "message": "IGNITE-7369 - some small fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a758a5a409f74c482861285805cb998f2e200848", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/a758a5a409f74c482861285805cb998f2e200848", "committedDate": "2020-07-10T19:52:58Z", "message": "IGNITE-7369 - single phase commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e478cc0e8a2da579cc8c6b78fb529454a0047b", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/a3e478cc0e8a2da579cc8c6b78fb529454a0047b", "committedDate": "2020-07-10T21:11:34Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e836958bac5dd01d3a5bcd3b81132b8349d92f1", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/1e836958bac5dd01d3a5bcd3b81132b8349d92f1", "committedDate": "2020-07-10T22:35:53Z", "message": "IGNITE-7369 - fix xml comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df672cb92d6573f78a23d198da53e1ba8132ee51", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/df672cb92d6573f78a23d198da53e1ba8132ee51", "committedDate": "2020-07-11T14:03:25Z", "message": "IGNITE-7369 - rename."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1846b400a4354d3cd64b0f741501db162112bed", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/b1846b400a4354d3cd64b0f741501db162112bed", "committedDate": "2020-07-12T18:53:03Z", "message": "IGNITE-7369 - transactions configuration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7192f542165665f295b1cfc6e595dd3b54263c14", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/7192f542165665f295b1cfc6e595dd3b54263c14", "committedDate": "2020-07-13T19:02:41Z", "message": "IGNITE-7369 - Test Transaction Configuration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b90a18139e3a3e1805979248f3c5856b1c51fe", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c9b90a18139e3a3e1805979248f3c5856b1c51fe", "committedDate": "2020-07-13T20:02:49Z", "message": "IGNITE-7369 - Test TxStart parameters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5968aa79744fe81c0f360b94a82d6e7f5c9cf8b2", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/5968aa79744fe81c0f360b94a82d6e7f5c9cf8b2", "committedDate": "2020-07-13T21:10:31Z", "message": "IGNITE-7369 - docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af9e9a78ef5dd5f1cfc93ff4906b4b75173a1689", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/af9e9a78ef5dd5f1cfc93ff4906b4b75173a1689", "committedDate": "2020-07-13T21:20:40Z", "message": "IGNITE-7369 - docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea818fdfb3702ec7142f4e4e95bf34cabeaa1b89", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/ea818fdfb3702ec7142f4e4e95bf34cabeaa1b89", "committedDate": "2020-07-13T21:26:03Z", "message": "IGNITE-7369 - docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24914e7f0e6410b564908ff0dafcdf88b37186f2", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/24914e7f0e6410b564908ff0dafcdf88b37186f2", "committedDate": "2020-07-15T20:29:56Z", "message": "IGNITE-7369 - some more unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369ee3695603039e207f8961406fc43fb9e9fbc4", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/369ee3695603039e207f8961406fc43fb9e9fbc4", "committedDate": "2020-07-16T11:05:06Z", "message": "IGNITE-7369 - XML config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1ede691d08b047a310e1e3d2781330f2528d6d", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/cd1ede691d08b047a310e1e3d2781330f2528d6d", "committedDate": "2020-07-17T20:45:18Z", "message": "IGNITE-7369 - ClientCacheTransactionManager.cs disposable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c517c2a5b3a2f3bc51c8fc89a61cbfa558991d0", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/0c517c2a5b3a2f3bc51c8fc89a61cbfa558991d0", "committedDate": "2020-07-17T20:45:33Z", "message": "IGNITE-7369 - try fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0770e8dffe2376721ccb0ba78b8604e6fee95133", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/0770e8dffe2376721ccb0ba78b8604e6fee95133", "committedDate": "2020-07-17T21:02:17Z", "message": "IGNITE-7369 - inspections."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/bf214c04a56d730b31cb7e1c84068c123e8dc525", "committedDate": "2020-07-18T00:21:27Z", "message": "IGNITE-7369 - remove volatile."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDY0MDM0", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-451064034", "createdAt": "2020-07-18T15:29:19Z", "commit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNToyOToxOVrOGzo4mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNjowNDoxMlrOGzpEOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMDQwOA==", "bodyText": "Blank line", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456800408", "createdAt": "2020-07-18T15:29:19Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheClientAbstractTxTest.cs", "diffHunk": "@@ -0,0 +1,756 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Client.Cache\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Linq;\n+    using System.Threading;\n+    using System.Transactions;\n+    using Apache.Ignite.Core.Cache.Configuration;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Cache;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Client.Transactions;\n+    using Apache.Ignite.Core.Transactions;\n+    using NUnit.Framework;\n+    using NUnit.Framework.Constraints;\n+\n+    /// <summary>\n+    /// Transactional cache client tests.\n+    /// </summary>\n+    public abstract class CacheClientAbstractTxTest : ClientTestBase\n+    {\n+        /** All concurrency controls. */\n+        private static readonly TransactionConcurrency[] AllConcurrencyControls =\n+        {\n+            TransactionConcurrency.Optimistic, \n+            TransactionConcurrency.Pessimistic\n+        };\n+\n+        /** All isolation levels*/\n+        private static readonly TransactionIsolation[] AllIsolationLevels = \n+        {\n+            TransactionIsolation.Serializable,\n+            TransactionIsolation.ReadCommitted,\n+            TransactionIsolation.RepeatableRead\n+        };\n+\n+        protected CacheClientAbstractTxTest(int serverCount, bool enablePartitionAwareness) : base(serverCount,\n+            enablePartitionAwareness: enablePartitionAwareness)\n+        {\n+            // No-op.\n+        }\n+\n+        /// <summary>\n+        /// Tests that custom client transactions configuration is applied.\n+        /// </summary>\n+        [Test]\n+        public void TestClientTransactionConfiguration()\n+        {\n+            var timeout = TransactionClientConfiguration.DefaultDefaultTimeout.Add(TimeSpan.FromMilliseconds(1000));\n+            var cfg = GetClientConfiguration();\n+            cfg.TransactionConfiguration = new TransactionClientConfiguration\n+            {\n+                DefaultTimeout = timeout\n+            };\n+\n+            foreach (var concurrency in AllConcurrencyControls)\n+            {\n+                foreach (var isolation in AllIsolationLevels)\n+                {\n+                    cfg.TransactionConfiguration.DefaultTransactionConcurrency = concurrency;\n+                    cfg.TransactionConfiguration.DefaultTransactionIsolation = isolation;\n+                    using (var client = Ignition.StartClient(cfg))\n+                    {\n+                        ITransaction tx;\n+                        using (client.GetTransactions().TxStart())\n+                        {\n+                            tx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                            Assert.AreEqual(timeout, tx.Timeout);\n+                        }\n+                        tx.Dispose();\n+                    }\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests that parameters passed to TxStart are applied.\n+        /// </summary>\n+        [Test]\n+        public void TestTxStartPassesParameters()\n+        {\n+            var timeout = TransactionClientConfiguration.DefaultDefaultTimeout.Add(TimeSpan.FromMilliseconds(1000));\n+            var acts = new List<Func<ITransactionsClient>>\n+            {\n+                () => Client.GetTransactions(),\n+                () => Client.GetTransactions().WithLabel(\"label\"),\n+            };\n+            foreach (var concurrency in AllConcurrencyControls)\n+            {\n+                foreach (var isolation in AllIsolationLevels)\n+                {\n+                    foreach (var act in acts)\n+                    {\n+                        ITransaction tx;\n+                        using (act().TxStart(concurrency, isolation))\n+                        {\n+                            tx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                        }\n+                        tx.Dispose();\n+                        using (act().TxStart(concurrency, isolation, timeout))\n+                        {\n+                            tx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                            Assert.AreEqual(timeout, tx.Timeout);\n+                        }\n+                        tx.Dispose();\n+                    }\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests that transaction can't be committed/rollback after being already completed.\n+        /// </summary>\n+        [Test]\n+        public void TestThrowsIfEndAlreadyCompletedTransaction()\n+        {\n+            var tx = Client.GetTransactions().TxStart();\n+            tx.Commit();\n+\n+            var constraint = new ReusableConstraint(Is.TypeOf<InvalidOperationException>()\n+               .And.Message.Contains(\"Transaction\")\n+               .And.Message.Contains(\"is closed\"));\n+\n+            Assert.Throws(constraint, () => tx.Commit());\n+            Assert.Throws(constraint, () => tx.Rollback());\n+\n+            using (tx = Client.GetTransactions().TxStart())\n+            {\n+            }\n+\n+            Assert.Throws(constraint, () => tx.Commit());\n+            Assert.Throws(constraint, () => tx.Rollback());\n+        }\n+\n+\n+        /// <summary>\n+        /// Tests that transaction throws if timeout elapsed.\n+        /// </summary>\n+        [Test]\n+        public void TestTimeout()\n+        {\n+            var timeout = TimeSpan.FromMilliseconds(200);\n+            var cache = GetTransactionalCache();\n+            cache.Put(1, 1);\n+            using (var tx = Client.GetTransactions().TxStart(TransactionConcurrency.Pessimistic,\n+                TransactionIsolation.ReadCommitted,\n+                timeout))\n+            {\n+                Thread.Sleep(TimeSpan.FromMilliseconds(300));\n+                var constraint = new ReusableConstraint(Is.TypeOf<IgniteClientException>()\n+                   .And.Message.Contains(\"Cache transaction timed out\"));\n+                Assert.Throws(constraint, () => cache.Put(1, 10));\n+                Assert.Throws(constraint, () => tx.Commit());\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+        }\n+\n+        /// <summary>\n+        /// Tests that commit applies cache changes.\n+        /// </summary>\n+        [Test]\n+        public void TestTxCommit()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            using (var tx = Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+\n+                tx.Commit();\n+            }\n+\n+            Assert.AreEqual(10, cache.Get(1));\n+            Assert.AreEqual(20, cache.Get(2));\n+        }\n+\n+        /// <summary>\n+        /// Tests that rollback reverts cache changes.\n+        /// </summary>\n+        [Test]\n+        public void TestTxRollback()\n+        {\n+            var cache = GetTransactionalCache();\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            using (var tx = Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+\n+                Assert.AreEqual(10, cache.Get(1));\n+                Assert.AreEqual(20, cache.Get(2));\n+                tx.Rollback();\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+            Assert.AreEqual(2, cache.Get(2));\n+        }\n+\n+        /// <summary>\n+        /// Tests that closing transaction without commit reverts cache changes.\n+        /// </summary>\n+        [Test]\n+        public void TestTxClose()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            using (Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+            Assert.AreEqual(2, cache.Get(2));\n+        }\n+\n+        /// <summary>\n+        /// Tests that client can't start multiple transactions in one thread.\n+        /// </summary>\n+        [Test]\n+        public void TestThrowsIfMultipleStarted()\n+        {\n+            TestThrowsIfMultipleStarted(\n+                () => Client.GetTransactions().TxStart(),\n+                () => Client.GetTransactions().TxStart());\n+        }\n+\n+        /// <summary>\n+        /// Tests that different clients can start transactions in one thread.\n+        /// </summary>\n+        [Test]\n+        public void TestDifferentClientsCanStartTransactions()\n+        {\n+            Assert.DoesNotThrow(() =>\n+            {\n+                using (Client.GetTransactions().TxStart())\n+                using (GetClient().GetTransactions().TxStart())\n+                {\n+                    // No-op.\n+                }\n+            });\n+        }\n+\n+        /// <summary>\n+        /// Test Ignite thin client transaction with label.\n+        /// </summary>\n+        [Test]\n+        public void TestWithLabel()\n+        {\n+            const string label1 = \"label1\";\n+            const string label2 = \"label2\";\n+\n+            var cache = GetTransactionalCache();\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            ITransaction igniteTx;\n+            using (Client.GetTransactions().WithLabel(label1).TxStart())\n+            {\n+                igniteTx = GetSingleLocalTransaction();\n+\n+                Assert.AreEqual(igniteTx.Label, label1);\n+\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+            }\n+            igniteTx.Dispose();\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+            Assert.AreEqual(2, cache.Get(2));\n+\n+            using (var tx = Client.GetTransactions().WithLabel(label1).TxStart())\n+            {\n+                igniteTx = GetSingleLocalTransaction();\n+\n+                Assert.AreEqual(igniteTx.Label, label1);\n+\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+                tx.Commit();\n+            }\n+            igniteTx.Dispose();\n+\n+            Assert.AreEqual(10, cache.Get(1));\n+            Assert.AreEqual(20, cache.Get(2));\n+\n+            using (Client.GetTransactions().WithLabel(label1).WithLabel(label2).TxStart())\n+            {\n+                igniteTx = GetSingleLocalTransaction();\n+\n+                Assert.AreEqual(igniteTx.Label, label2);\n+            }\n+            igniteTx.Dispose();\n+\n+            TestThrowsIfMultipleStarted(\n+                () => Client.GetTransactions().WithLabel(label1).TxStart(),\n+                () => Client.GetTransactions().TxStart());\n+\n+            TestThrowsIfMultipleStarted(\n+                () => Client.GetTransactions().TxStart(),\n+                () => Client.GetTransactions().WithLabel(label1).TxStart());\n+\n+            TestThrowsIfMultipleStarted(\n+                () => Client.GetTransactions().WithLabel(label1).TxStart(),\n+                () => Client.GetTransactions().WithLabel(label2).TxStart());\n+        }\n+\n+        /// <summary>\n+        /// Test Ignite thin client transaction enlistment in ambient <see cref=\"TransactionScope\"/>.\n+        /// </summary>\n+        [Test]\n+        public void TestTransactionScopeSingleCache()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache[1] = 1;\n+            cache[2] = 2;\n+\n+            // Commit.\n+            using (var ts = new TransactionScope())\n+            {\n+                cache[1] = 10;\n+                cache[2] = 20;\n+\n+                ts.Complete();\n+            }\n+\n+            Assert.AreEqual(10, cache[1]);\n+            Assert.AreEqual(20, cache[2]);\n+\n+            // Rollback.\n+            using (new TransactionScope())\n+            {\n+                cache[1] = 100;\n+                cache[2] = 200;\n+            }\n+\n+            Assert.AreEqual(10, cache[1]);\n+            Assert.AreEqual(20, cache[2]);\n+        }\n+\n+        /// <summary>\n+        /// Test Ignite thin client transaction enlistment in ambient <see cref=\"TransactionScope\"/>\n+        /// with multiple participating caches.\n+        /// </summary>\n+        [Test]\n+        public void TestTransactionScopeMultiCache()\n+        {\n+            var cache1 = GetTransactionalCache();\n+            var cache2 = GetTransactionalCache(cache1.Name + \"1\");\n+\n+            cache1[1] = 1;\n+            cache2[1] = 2;\n+\n+            // Commit.\n+            using (var ts = new TransactionScope())\n+            {\n+                cache1.Put(1, 10);\n+                cache2.Put(1, 20);\n+\n+                ts.Complete();\n+            }\n+\n+            Assert.AreEqual(10, cache1[1]);\n+            Assert.AreEqual(20, cache2[1]);\n+\n+            // Rollback.\n+            using (new TransactionScope())\n+            {\n+                cache1.Put(1, 100);\n+                cache2.Put(1, 200);\n+            }\n+\n+            Assert.AreEqual(10, cache1[1]);\n+            Assert.AreEqual(20, cache2[1]);\n+        }\n+\n+        /// <summary>\n+        /// Test Ignite thin client transaction enlistment in ambient <see cref=\"TransactionScope\"/>\n+        /// when Ignite tx is started manually.\n+        /// </summary>\n+        [Test]\n+        public void TestTransactionScopeWithManualIgniteTx()\n+        {\n+            var cache = GetTransactionalCache();\n+            var transactions = Client.GetTransactions();\n+\n+            cache[1] = 1;\n+\n+            // When Ignite tx is started manually, it won't be enlisted in TransactionScope.\n+            using (var tx = transactions.TxStart())\n+            {\n+                using (new TransactionScope())\n+                {\n+                    cache[1] = 2;\n+                }  // Revert transaction scope.\n+\n+                tx.Commit();  // Commit manual tx.\n+            }\n+\n+            Assert.AreEqual(2, cache[1]);\n+        }\n+\n+        /// <summary>\n+        /// Test Ignite transaction with <see cref=\"TransactionScopeOption.Suppress\"/> option.\n+        /// </summary>\n+        [Test]\n+        public void TestSuppressedTransactionScope()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache[1] = 1;\n+\n+            using (new TransactionScope(TransactionScopeOption.Suppress))\n+            {\n+                cache[1] = 2;\n+            }\n+\n+            // Even though transaction is not completed, the value is updated, because tx is suppressed.\n+            Assert.AreEqual(2, cache[1]);\n+        }\n+\n+        /// <summary>\n+        /// Test Ignite thin client transaction enlistment in ambient <see cref=\"TransactionScope\"/> with nested scopes.\n+        /// </summary>\n+        [Test]\n+        public void TestNestedTransactionScope()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache[1] = 1;\n+\n+            foreach (var option in new[] {TransactionScopeOption.Required, TransactionScopeOption.RequiresNew})\n+            {\n+                // Commit.\n+                using (var ts1 = new TransactionScope())\n+                {\n+                    using (var ts2 = new TransactionScope(option))\n+                    {\n+                        cache[1] = 2;\n+                        ts2.Complete();\n+                    }\n+\n+                    cache[1] = 3;\n+                    ts1.Complete();\n+                }\n+\n+                Assert.AreEqual(3, cache[1]);\n+\n+                // Rollback.\n+                using (new TransactionScope())\n+                {\n+                    using (new TransactionScope(option))\n+                        cache[1] = 4;\n+\n+                    cache[1] = 5;\n+                }\n+\n+                // In case with Required option there is a single tx\n+                // that gets aborted, second put executes outside the tx.\n+                Assert.AreEqual(option == TransactionScopeOption.Required ? 5 : 3, cache[1], option.ToString());\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Test that ambient <see cref=\"TransactionScope\"/> options propagate to Ignite transaction.\n+        /// </summary>\n+        [Test]\n+        public void TestTransactionScopeOptions()\n+        {\n+            var cache = GetTransactionalCache();\n+            var transactions = (ITransactionsClientInternal) Client.GetTransactions();\n+\n+            var modes = new[]\n+            {\n+                Tuple.Create(IsolationLevel.Serializable, TransactionIsolation.Serializable),\n+                Tuple.Create(IsolationLevel.RepeatableRead, TransactionIsolation.RepeatableRead),\n+                Tuple.Create(IsolationLevel.ReadCommitted, TransactionIsolation.ReadCommitted),\n+                Tuple.Create(IsolationLevel.ReadUncommitted, TransactionIsolation.ReadCommitted),\n+                Tuple.Create(IsolationLevel.Snapshot, TransactionIsolation.ReadCommitted),\n+                Tuple.Create(IsolationLevel.Chaos, TransactionIsolation.ReadCommitted),\n+            };\n+\n+            foreach (var mode in modes)\n+            {\n+                ITransaction tx;\n+                using (new TransactionScope(TransactionScopeOption.Required, new TransactionOptions\n+                {\n+                    IsolationLevel = mode.Item1\n+                }))\n+                {\n+                    cache[1] = 1;\n+\n+                    tx = GetSingleLocalTransaction();\n+                    Assert.AreEqual(mode.Item2, tx.Isolation);\n+                    Assert.AreEqual(transactions.DefaultTxConcurrency, tx.Concurrency);\n+                }\n+                tx.Dispose();\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests all synchronous transactional operations with <see cref=\"TransactionScope\"/>.\n+        /// </summary>\n+        [Test]\n+        public void TestTransactionScopeAllOperationsSync()\n+        {\n+            CheckTxOp((cache, key) => cache.Put(key, -5));\n+\n+            CheckReadTxOp((cache, key) => cache.Get(key));\n+            \n+            CheckReadTxOp((cache, key) =>\n+            {\n+                int value;\n+                Assert.IsTrue(cache.TryGet(key, out value));\n+            });\n+\n+            CheckReadTxOp((cache, key) => cache.ContainsKey(key));\n+\n+            CheckReadTxOp((cache, key) => cache.ContainsKeys(new[] {key}));\n+\n+            CheckTxOp((cache, key) => cache.PutAll(new Dictionary<int, int> {{key, -7}}));\n+\n+            CheckTxOp((cache, key) =>\n+            {\n+                cache.Remove(key);\n+                cache.PutIfAbsent(key, -10);\n+            });\n+\n+            CheckTxOp((cache, key) => cache.GetAndPut(key, -9));\n+\n+            CheckTxOp((cache, key) =>\n+            {\n+                cache.Remove(key);\n+                cache.GetAndPutIfAbsent(key, -10);\n+            });\n+\n+            CheckTxOp((cache, key) => cache.GetAndRemove(key));\n+\n+            CheckTxOp((cache, key) => cache.GetAndReplace(key, -11));\n+\n+            CheckTxOp((cache, key) => cache.Remove(key));\n+\n+            CheckTxOp((cache, key) => cache.RemoveAll(new[] {key}));\n+\n+            CheckTxOp((cache, key) => cache.Replace(key, 100));\n+\n+            CheckTxOp((cache, key) => cache.Replace(key, cache[key], 100));\n+        }\n+\n+        /// <summary>\n+        /// Tests all transactional async operations with <see cref=\"TransactionScope\"/>.\n+        /// </summary>\n+        [Test]\n+        [Ignore(\"Async thin client transactional operations not supported.\")]\n+        public void TestTransactionScopeAllOperationsAsync()\n+        {\n+            CheckTxOp((cache, key) => cache.PutAsync(key, -5));\n+            CheckTxOp((cache, key) => cache.PutAllAsync(new Dictionary<int, int> {{key, -7}}));\n+\n+            CheckTxOp((cache, key) =>\n+            {\n+                cache.Remove(key);\n+                cache.PutIfAbsentAsync(key, -10);\n+            });\n+\n+            CheckTxOp((cache, key) => cache.GetAndPutAsync(key, -9));\n+\n+            CheckTxOp((cache, key) =>\n+            {\n+                cache.Remove(key);\n+                cache.GetAndPutIfAbsentAsync(key, -10);\n+            });\n+\n+            CheckTxOp((cache, key) => cache.GetAndRemoveAsync(key));\n+\n+            CheckTxOp((cache, key) => cache.GetAndReplaceAsync(key, -11));\n+\n+            CheckTxOp((cache, key) => cache.RemoveAsync(key));\n+\n+            CheckTxOp((cache, key) => cache.RemoveAllAsync(new[] {key}));\n+\n+            CheckTxOp((cache, key) => cache.ReplaceAsync(key, 100));\n+\n+            CheckTxOp((cache, key) => cache.ReplaceAsync(key, cache[key], 100));\n+        }\n+\n+        /// <summary>\n+        /// Checks that read cache operation starts ambient transaction.\n+        /// </summary>\n+        private void CheckReadTxOp(Action<ICacheClient<int, int>, int> act)\n+        {\n+            var txOpts = new TransactionOptions {IsolationLevel = IsolationLevel.RepeatableRead};\n+            const TransactionScopeOption scope = TransactionScopeOption.Required;\n+\n+            var cache = GetTransactionalCache();\n+            cache[1] = 1;\n+\n+            // Rollback.\n+            using (new TransactionScope(scope, txOpts))\n+            {\n+                act(cache, 1);\n+\n+                Assert.IsNotNull(((ITransactionsClientInternal) Client.GetTransactions()).CurrentTx,\n+                    \"Transaction has not started.\");\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Checks that cache operation behaves transactionally.\n+        /// </summary>\n+        private void CheckTxOp(Action<ICacheClient<int, int>, int> act)\n+        {\n+            var isolationLevels = new[]\n+            {\n+                IsolationLevel.Serializable, IsolationLevel.RepeatableRead, IsolationLevel.ReadCommitted,\n+                IsolationLevel.ReadUncommitted, IsolationLevel.Snapshot, IsolationLevel.Chaos\n+            };\n+\n+            foreach (var isolationLevel in isolationLevels)\n+            {\n+                var txOpts = new TransactionOptions {IsolationLevel = isolationLevel};\n+                const TransactionScopeOption scope = TransactionScopeOption.Required;\n+\n+                var cache = GetTransactionalCache();\n+\n+                cache[1] = 1;\n+                cache[2] = 2;\n+\n+                // Rollback.\n+                using (new TransactionScope(scope, txOpts))\n+                {\n+                    act(cache, 1);\n+\n+                    Assert.IsNotNull(((ITransactionsClientInternal)Client.GetTransactions()).CurrentTx,\n+                        \"Transaction has not started.\");\n+                }\n+\n+                Assert.AreEqual(1, cache[1]);\n+                Assert.AreEqual(2, cache[2]);\n+\n+                using (new TransactionScope(scope, txOpts))\n+                {\n+                    act(cache, 1);\n+                    act(cache, 2);\n+                }\n+\n+                Assert.AreEqual(1, cache[1]);\n+                Assert.AreEqual(2, cache[2]);\n+\n+                // Commit.\n+                using (var ts = new TransactionScope(scope, txOpts))\n+                {\n+                    act(cache, 1);\n+                    ts.Complete();\n+                }\n+\n+                Assert.IsTrue(!cache.ContainsKey(1) || cache[1] != 1);\n+                Assert.AreEqual(2, cache[2]);\n+\n+                using (var ts = new TransactionScope(scope, txOpts))\n+                {\n+                    act(cache, 1);\n+                    act(cache, 2);\n+                    ts.Complete();\n+                }\n+\n+                Assert.IsTrue(!cache.ContainsKey(1) || cache[1] != 1);\n+                Assert.IsTrue(!cache.ContainsKey(2) || cache[2] != 2);\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Gets single transaction from Ignite.\n+        /// </summary>\n+        private static ITransaction GetSingleLocalTransaction()\n+        {\n+            return GetIgnite()\n+               .GetTransactions()\n+               .GetLocalActiveTransactions()\n+               .Single();\n+        }\n+\n+        /// <summary>\n+        /// Tests that client can't start multiple transactions in one thread.\n+        /// </summary>\n+        private void TestThrowsIfMultipleStarted(Func<IDisposable> outer, Func<IDisposable> inner)\n+        {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 722}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMTU1Mg==", "bodyText": "Extra blank line", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456801552", "createdAt": "2020-07-18T15:42:19Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheClientAbstractTxTest.cs", "diffHunk": "@@ -0,0 +1,756 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Client.Cache\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Linq;\n+    using System.Threading;\n+    using System.Transactions;\n+    using Apache.Ignite.Core.Cache.Configuration;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Cache;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Client.Transactions;\n+    using Apache.Ignite.Core.Transactions;\n+    using NUnit.Framework;\n+    using NUnit.Framework.Constraints;\n+\n+    /// <summary>\n+    /// Transactional cache client tests.\n+    /// </summary>\n+    public abstract class CacheClientAbstractTxTest : ClientTestBase\n+    {\n+        /** All concurrency controls. */\n+        private static readonly TransactionConcurrency[] AllConcurrencyControls =\n+        {\n+            TransactionConcurrency.Optimistic, \n+            TransactionConcurrency.Pessimistic\n+        };\n+\n+        /** All isolation levels*/\n+        private static readonly TransactionIsolation[] AllIsolationLevels = \n+        {\n+            TransactionIsolation.Serializable,\n+            TransactionIsolation.ReadCommitted,\n+            TransactionIsolation.RepeatableRead\n+        };\n+\n+        protected CacheClientAbstractTxTest(int serverCount, bool enablePartitionAwareness) : base(serverCount,\n+            enablePartitionAwareness: enablePartitionAwareness)\n+        {\n+            // No-op.\n+        }\n+\n+        /// <summary>\n+        /// Tests that custom client transactions configuration is applied.\n+        /// </summary>\n+        [Test]\n+        public void TestClientTransactionConfiguration()\n+        {\n+            var timeout = TransactionClientConfiguration.DefaultDefaultTimeout.Add(TimeSpan.FromMilliseconds(1000));\n+            var cfg = GetClientConfiguration();\n+            cfg.TransactionConfiguration = new TransactionClientConfiguration\n+            {\n+                DefaultTimeout = timeout\n+            };\n+\n+            foreach (var concurrency in AllConcurrencyControls)\n+            {\n+                foreach (var isolation in AllIsolationLevels)\n+                {\n+                    cfg.TransactionConfiguration.DefaultTransactionConcurrency = concurrency;\n+                    cfg.TransactionConfiguration.DefaultTransactionIsolation = isolation;\n+                    using (var client = Ignition.StartClient(cfg))\n+                    {\n+                        ITransaction tx;\n+                        using (client.GetTransactions().TxStart())\n+                        {\n+                            tx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                            Assert.AreEqual(timeout, tx.Timeout);\n+                        }\n+                        tx.Dispose();\n+                    }\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests that parameters passed to TxStart are applied.\n+        /// </summary>\n+        [Test]\n+        public void TestTxStartPassesParameters()\n+        {\n+            var timeout = TransactionClientConfiguration.DefaultDefaultTimeout.Add(TimeSpan.FromMilliseconds(1000));\n+            var acts = new List<Func<ITransactionsClient>>\n+            {\n+                () => Client.GetTransactions(),\n+                () => Client.GetTransactions().WithLabel(\"label\"),\n+            };\n+            foreach (var concurrency in AllConcurrencyControls)\n+            {\n+                foreach (var isolation in AllIsolationLevels)\n+                {\n+                    foreach (var act in acts)\n+                    {\n+                        ITransaction tx;\n+                        using (act().TxStart(concurrency, isolation))\n+                        {\n+                            tx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                        }\n+                        tx.Dispose();\n+                        using (act().TxStart(concurrency, isolation, timeout))\n+                        {\n+                            tx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                            Assert.AreEqual(timeout, tx.Timeout);\n+                        }\n+                        tx.Dispose();\n+                    }\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests that transaction can't be committed/rollback after being already completed.\n+        /// </summary>\n+        [Test]\n+        public void TestThrowsIfEndAlreadyCompletedTransaction()\n+        {\n+            var tx = Client.GetTransactions().TxStart();\n+            tx.Commit();\n+\n+            var constraint = new ReusableConstraint(Is.TypeOf<InvalidOperationException>()\n+               .And.Message.Contains(\"Transaction\")\n+               .And.Message.Contains(\"is closed\"));\n+\n+            Assert.Throws(constraint, () => tx.Commit());\n+            Assert.Throws(constraint, () => tx.Rollback());\n+\n+            using (tx = Client.GetTransactions().TxStart())\n+            {\n+            }\n+\n+            Assert.Throws(constraint, () => tx.Commit());\n+            Assert.Throws(constraint, () => tx.Rollback());\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjEwNg==", "bodyText": "starts a new - here and below", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456802106", "createdAt": "2020-07-18T15:49:07Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionsClient.cs", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// <para /> Transactions are bound to the thread started the transaction. After that, each cache operation within this thread\n+    /// will belong to the corresponding transaction until the transaction is committed, rolled back or closed.\n+    /// <para /> Should not be used with async calls.\n+    /// </summary> \n+    public interface ITransactionsClient\n+    {\n+        /// <summary>\n+        /// Starts a new transaction with the default isolation level, concurrency and timeout.\n+        /// <para /> Default values for transaction isolation level, concurrency and timeout can be configured via\n+        /// <see cref=\"TransactionClientConfiguration\"/>.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart();\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency and isolation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjE1NQ==", "bodyText": "an instance", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456802155", "createdAt": "2020-07-18T15:49:30Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionsClient.cs", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// <para /> Transactions are bound to the thread started the transaction. After that, each cache operation within this thread\n+    /// will belong to the corresponding transaction until the transaction is committed, rolled back or closed.\n+    /// <para /> Should not be used with async calls.\n+    /// </summary> \n+    public interface ITransactionsClient\n+    {\n+        /// <summary>\n+        /// Starts a new transaction with the default isolation level, concurrency and timeout.\n+        /// <para /> Default values for transaction isolation level, concurrency and timeout can be configured via\n+        /// <see cref=\"TransactionClientConfiguration\"/>.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart();\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency and isolation.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation);\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency, isolation and timeout.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <param name=\"timeout\">Timeout. TimeSpan. Zero for indefinite timeout.</param>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation, TimeSpan timeout);\n+\n+        /// <summary>\n+        /// Returns instance of <see cref=\"ITransactionsClient\"/> to mark a transaction with a special label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjM1Ng==", "bodyText": "We can add <see cref=\"ITransaction.Label\" /> and <see cref=\"ITransactions.GetLocalActiveTransactions\" />", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456802356", "createdAt": "2020-07-18T15:51:43Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionsClient.cs", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// <para /> Transactions are bound to the thread started the transaction. After that, each cache operation within this thread\n+    /// will belong to the corresponding transaction until the transaction is committed, rolled back or closed.\n+    /// <para /> Should not be used with async calls.\n+    /// </summary> \n+    public interface ITransactionsClient\n+    {\n+        /// <summary>\n+        /// Starts a new transaction with the default isolation level, concurrency and timeout.\n+        /// <para /> Default values for transaction isolation level, concurrency and timeout can be configured via\n+        /// <see cref=\"TransactionClientConfiguration\"/>.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart();\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency and isolation.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation);\n+\n+        /// <summary>\n+        /// Starts new transaction with the specified concurrency, isolation and timeout.\n+        /// <para /> Should not be used with async calls.\n+        /// </summary>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <param name=\"timeout\">Timeout. TimeSpan. Zero for indefinite timeout.</param>\n+        /// <returns>New transaction.</returns>\n+        ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation, TimeSpan timeout);\n+\n+        /// <summary>\n+        /// Returns instance of <see cref=\"ITransactionsClient\"/> to mark a transaction with a special label.\n+        /// The label is helpful for diagnostic and exposed to some diagnostic tools like\n+        /// SYS.TRANSACTIONS system view, control.sh commands, JMX TransactionsMXBean,\n+        /// long-running transactions dump in logs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjQ2Ng==", "bodyText": "We should copy the values from the configuration parameter, right? Please add a test for this.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456802466", "createdAt": "2020-07-18T15:52:53Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/TransactionClientConfiguration.cs", "diffHunk": "@@ -0,0 +1,81 @@\n+\ufeff/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using System.ComponentModel;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Transactions configuration.\n+    /// </summary>\n+    public class TransactionClientConfiguration\n+    {\n+        /// <summary> The default value for <see cref=\"DefaultTransactionConcurrency\"/> property. </summary>\n+        public const TransactionConcurrency DefaultDefaultTransactionConcurrency = TransactionConcurrency.Pessimistic;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public const TransactionIsolation DefaultDefaultTransactionIsolation = TransactionIsolation.RepeatableRead;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public static readonly TimeSpan DefaultDefaultTimeout = TimeSpan.Zero;\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction concurrency to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionConcurrency)]\n+        public TransactionConcurrency DefaultTransactionConcurrency { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction isolation to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionIsolation)]\n+        public TransactionIsolation DefaultTransactionIsolation { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction timeout to use when one is not explicitly specified.\n+        /// <see cref=\"TimeSpan.Zero\"/> for infinite timeout.\n+        /// </summary>\n+        [DefaultValue(typeof(TimeSpan), \"00:00:00\")]\n+        public TimeSpan DefaultTimeout { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"TransactionClientConfiguration\" /> class.\n+        /// </summary>\n+        public TransactionClientConfiguration()\n+        {\n+            DefaultTransactionConcurrency = DefaultDefaultTransactionConcurrency;\n+            DefaultTransactionIsolation = DefaultDefaultTransactionIsolation;\n+            DefaultTimeout = DefaultDefaultTimeout;\n+        }\n+        \n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"TransactionClientConfiguration\" /> class.\n+        /// </summary>\n+        /// <param name=\"configuration\">The configuration to copy.</param>\n+        public TransactionClientConfiguration(TransactionClientConfiguration configuration)\n+        {\n+            IgniteArgumentCheck.NotNull(configuration, \"configuration\");\n+\n+            DefaultTransactionConcurrency = DefaultDefaultTransactionConcurrency;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjUzMA==", "bodyText": "Comment", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456802530", "createdAt": "2020-07-18T15:54:10Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientFailoverSocket.cs", "diffHunk": "@@ -54,6 +55,8 @@ internal class ClientFailoverSocket : IDisposable\n         /** Marshaller. */\n         private readonly Marshaller _marsh;\n \n+        private readonly ITransactionsClientInternal _transactions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjcwOA==", "bodyText": "Is there a test for this case? How are users supposed to handle this?", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456802708", "createdAt": "2020-07-18T15:56:05Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientFailoverSocket.cs", "diffHunk": "@@ -247,6 +256,16 @@ public IEnumerable<IClientConnection> GetConnections()\n         /// </summary>\n         private ClientSocket GetSocket()\n         {\n+            var tx = _transactions.CurrentTx;\n+            if (tx != null)\n+            {\n+                if (tx.Socket.IsDisposed)\n+                {\n+                    throw new IgniteClientException(\"Transaction context has been lost due to connection errors.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMzEzMQ==", "bodyText": "This condition seems to be unnecessary, please see my changes in #8004 .", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456803131", "createdAt": "2020-07-18T16:00:47Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/ClientCacheTransactionManager.cs", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Threading;\n+    using System.Transactions;\n+    using Apache.Ignite.Core.Impl.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction enlistment manager, \n+    /// allows using Ignite transactions via standard <see cref=\"TransactionScope\"/>.\n+    /// </summary>\n+    internal class ClientCacheTransactionManager : ISinglePhaseNotification, IDisposable\n+    {\n+        /** */\n+        private readonly ITransactionsClientInternal _transactions;\n+\n+        /** */\n+        private readonly ThreadLocal<Enlistment> _enlistment = new ThreadLocal<Enlistment>();\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"ClientCacheTransactionManager\"/> class.\n+        /// </summary>\n+        /// <param name=\"transactions\">Transactions.</param>\n+        public ClientCacheTransactionManager(ITransactionsClientInternal transactions)\n+        {\n+            _transactions = transactions;\n+        }\n+\n+        /// <summary>\n+        /// If ambient transaction is present, starts an Ignite transaction and enlists it.\n+        /// </summary>\n+        public void StartTxIfNeeded()\n+        {\n+            if (_transactions.CurrentTx != null)\n+            {\n+                // Ignite transaction is already present.\n+                // We have either enlisted it already, or it has been started manually and should not be enlisted.\n+                // Java enlists existing Ignite tx in this case (see CacheJtaManager.java), but we do not.\n+                return;\n+            }\n+\n+            if (_enlistment.Value != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMzE1Mw==", "bodyText": "Missing xmldoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456803153", "createdAt": "2020-07-18T16:01:07Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/ClientCacheTransactionManager.cs", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Threading;\n+    using System.Transactions;\n+    using Apache.Ignite.Core.Impl.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction enlistment manager, \n+    /// allows using Ignite transactions via standard <see cref=\"TransactionScope\"/>.\n+    /// </summary>\n+    internal class ClientCacheTransactionManager : ISinglePhaseNotification, IDisposable\n+    {\n+        /** */\n+        private readonly ITransactionsClientInternal _transactions;\n+\n+        /** */\n+        private readonly ThreadLocal<Enlistment> _enlistment = new ThreadLocal<Enlistment>();\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"ClientCacheTransactionManager\"/> class.\n+        /// </summary>\n+        /// <param name=\"transactions\">Transactions.</param>\n+        public ClientCacheTransactionManager(ITransactionsClientInternal transactions)\n+        {\n+            _transactions = transactions;\n+        }\n+\n+        /// <summary>\n+        /// If ambient transaction is present, starts an Ignite transaction and enlists it.\n+        /// </summary>\n+        public void StartTxIfNeeded()\n+        {\n+            if (_transactions.CurrentTx != null)\n+            {\n+                // Ignite transaction is already present.\n+                // We have either enlisted it already, or it has been started manually and should not be enlisted.\n+                // Java enlists existing Ignite tx in this case (see CacheJtaManager.java), but we do not.\n+                return;\n+            }\n+\n+            if (_enlistment.Value != null)\n+            {\n+                // We are already enlisted.\n+                // .NET transaction mechanism allows nested transactions,\n+                // and they can be processed differently depending on TransactionScopeOption.\n+                // Ignite, however, allows only one active transaction per thread.\n+                // Therefore we enlist only once on the first transaction that we encounter.\n+                return;\n+            }\n+\n+            var ambientTx = System.Transactions.Transaction.Current;\n+\n+            if (ambientTx != null && ambientTx.TransactionInformation.Status == TransactionStatus.Active)\n+            {\n+                _transactions.TxStart(_transactions.DefaultTxConcurrency,\n+                    CacheTransactionManager.ConvertTransactionIsolation(ambientTx.IsolationLevel),\n+                    _transactions.DefaultTimeout);\n+\n+                _enlistment.Value = ambientTx.EnlistVolatile(this, EnlistmentOptions.None);\n+            }\n+        }\n+\n+        void IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMzE2Mg==", "bodyText": "xmldoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456803162", "createdAt": "2020-07-18T16:01:15Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/ITransactionClientInternal.cs", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using Apache.Ignite.Core.Client.Transactions;\n+\n+    internal interface ITransactionClientInternal : ITransactionClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMzE5NA==", "bodyText": "xmldoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456803194", "createdAt": "2020-07-18T16:01:34Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/ITransactionsClientInternal.cs", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    internal interface ITransactionsClientInternal : ITransactionsClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMzMyMg==", "bodyText": "return tx", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456803322", "createdAt": "2020-07-18T16:03:05Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/TransactionsClient.cs", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Threading;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// </summary>\n+    internal class TransactionsClient : ITransactionsClientInternal, IDisposable\n+    {\n+        /** Ignite. */\n+        private readonly IgniteClient _ignite;\n+\n+        /** Default transaction configuration. */\n+        private readonly TransactionClientConfiguration _cfg;\n+\n+        /** Transaction for this thread and client. */\n+        private readonly ThreadLocal<TransactionClient> _currentTx = new ThreadLocal<TransactionClient>();\n+\n+        /** Transaction manager. */\n+        private readonly ClientCacheTransactionManager _txManager;\n+\n+        /// <summary>\n+        /// Constructor.\n+        /// </summary>\n+        /// <param name=\"ignite\">Ignite.</param>\n+        /// <param name=\"cfg\"></param>\n+        public TransactionsClient(IgniteClient ignite, TransactionClientConfiguration cfg)\n+        {\n+            _ignite = ignite;\n+            _cfg = cfg ?? new TransactionClientConfiguration();\n+            _txManager = new ClientCacheTransactionManager(this);\n+        }\n+\n+        /** <inheritdoc /> */\n+        public ITransactionClientInternal CurrentTx\n+        {\n+            get\n+            {\n+                var tx = _currentTx.Value;\n+\n+                if (tx == null)\n+                    return null;\n+\n+                if (tx.Closed)\n+                {\n+                    _currentTx.Value = null;\n+\n+                    return null;\n+                }\n+\n+                return tx;\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void StartTxIfNeeded()\n+        {\n+            _txManager.StartTxIfNeeded();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TransactionConcurrency DefaultTxConcurrency\n+        {\n+            get { return _cfg.DefaultTransactionConcurrency; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TransactionIsolation DefaultTxIsolation\n+        {\n+            get { return _cfg.DefaultTransactionIsolation; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TimeSpan DefaultTimeout\n+        {\n+            get { return _cfg.DefaultTimeout; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart()\n+        {\n+            return TxStart(_cfg.DefaultTransactionConcurrency, _cfg.DefaultTransactionIsolation);\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation)\n+        {\n+            return TxStart(concurrency, isolation, _cfg.DefaultTimeout);\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart(TransactionConcurrency concurrency, \n+            TransactionIsolation isolation,\n+            TimeSpan timeout)\n+        {\n+            return TxStart(concurrency, isolation, timeout, null);\n+        }\n+\n+        private ITransactionClient TxStart(TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label)\n+        {\n+            if (CurrentTx != null)\n+            {\n+                throw new IgniteClientException(\"A transaction has already been started by the current thread.\");\n+            }\n+\n+            var tx = _ignite.Socket.DoOutInOp(\n+                ClientOp.TxStart,\n+                ctx =>\n+                {\n+                    ctx.Writer.WriteByte((byte) concurrency);\n+                    ctx.Writer.WriteByte((byte) isolation);\n+                    ctx.Writer.WriteTimeSpanAsLong(timeout);\n+                    ctx.Writer.WriteString(label);\n+                },\n+                ctx => new TransactionClient(\n+                    ctx.Reader.ReadInt(),\n+                    _ignite,\n+                    ctx.Socket)\n+            );\n+\n+            _currentTx.Value = tx;\n+            return _currentTx.Value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMzM4Ng==", "bodyText": "I think it will be simpler to incorporate label into the TransactionsClient class.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r456803386", "createdAt": "2020-07-18T16:04:12Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/TransactionsClient.cs", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Threading;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// </summary>\n+    internal class TransactionsClient : ITransactionsClientInternal, IDisposable\n+    {\n+        /** Ignite. */\n+        private readonly IgniteClient _ignite;\n+\n+        /** Default transaction configuration. */\n+        private readonly TransactionClientConfiguration _cfg;\n+\n+        /** Transaction for this thread and client. */\n+        private readonly ThreadLocal<TransactionClient> _currentTx = new ThreadLocal<TransactionClient>();\n+\n+        /** Transaction manager. */\n+        private readonly ClientCacheTransactionManager _txManager;\n+\n+        /// <summary>\n+        /// Constructor.\n+        /// </summary>\n+        /// <param name=\"ignite\">Ignite.</param>\n+        /// <param name=\"cfg\"></param>\n+        public TransactionsClient(IgniteClient ignite, TransactionClientConfiguration cfg)\n+        {\n+            _ignite = ignite;\n+            _cfg = cfg ?? new TransactionClientConfiguration();\n+            _txManager = new ClientCacheTransactionManager(this);\n+        }\n+\n+        /** <inheritdoc /> */\n+        public ITransactionClientInternal CurrentTx\n+        {\n+            get\n+            {\n+                var tx = _currentTx.Value;\n+\n+                if (tx == null)\n+                    return null;\n+\n+                if (tx.Closed)\n+                {\n+                    _currentTx.Value = null;\n+\n+                    return null;\n+                }\n+\n+                return tx;\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void StartTxIfNeeded()\n+        {\n+            _txManager.StartTxIfNeeded();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TransactionConcurrency DefaultTxConcurrency\n+        {\n+            get { return _cfg.DefaultTransactionConcurrency; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TransactionIsolation DefaultTxIsolation\n+        {\n+            get { return _cfg.DefaultTransactionIsolation; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TimeSpan DefaultTimeout\n+        {\n+            get { return _cfg.DefaultTimeout; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart()\n+        {\n+            return TxStart(_cfg.DefaultTransactionConcurrency, _cfg.DefaultTransactionIsolation);\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation)\n+        {\n+            return TxStart(concurrency, isolation, _cfg.DefaultTimeout);\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart(TransactionConcurrency concurrency, \n+            TransactionIsolation isolation,\n+            TimeSpan timeout)\n+        {\n+            return TxStart(concurrency, isolation, timeout, null);\n+        }\n+\n+        private ITransactionClient TxStart(TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label)\n+        {\n+            if (CurrentTx != null)\n+            {\n+                throw new IgniteClientException(\"A transaction has already been started by the current thread.\");\n+            }\n+\n+            var tx = _ignite.Socket.DoOutInOp(\n+                ClientOp.TxStart,\n+                ctx =>\n+                {\n+                    ctx.Writer.WriteByte((byte) concurrency);\n+                    ctx.Writer.WriteByte((byte) isolation);\n+                    ctx.Writer.WriteTimeSpanAsLong(timeout);\n+                    ctx.Writer.WriteString(label);\n+                },\n+                ctx => new TransactionClient(\n+                    ctx.Reader.ReadInt(),\n+                    _ignite,\n+                    ctx.Socket)\n+            );\n+\n+            _currentTx.Value = tx;\n+            return _currentTx.Value;\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionsClient WithLabel(string label)\n+        {\n+            IgniteArgumentCheck.NotNullOrEmpty(label, \"label\");\n+\n+            return new TransactionsClientWithLabel(this, label); \n+        }\n+\n+        /** <inheritDoc /> */\n+        [SuppressMessage(\"Microsoft.Usage\",\n+            \"CA1816:CallGCSuppressFinalizeCorrectly\",\n+            Justification = \"There is no finalizer.\")]\n+        public void Dispose()\n+        {\n+            _currentTx.Dispose();\n+            _txManager.Dispose();\n+        }\n+\n+        /// <summary>\n+        /// Wrapper for transactions with label.\n+        /// </summary>\n+        private class TransactionsClientWithLabel : ITransactionsClientInternal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf214c04a56d730b31cb7e1c84068c123e8dc525"}, "originalPosition": 174}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74dd18792c88208a0fea6f72c26f0d4555f9d4d1", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/74dd18792c88208a0fea6f72c26f0d4555f9d4d1", "committedDate": "2020-07-18T20:29:50Z", "message": "IGNITE-7369 - inspections."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be98a451aa6c6c2f446c349a06d65f03210dbdd", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/5be98a451aa6c6c2f446c349a06d65f03210dbdd", "committedDate": "2020-07-18T23:11:05Z", "message": "IGNITE-7369 - fixes after review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e638c7e95eb3ac6eea50a2e35ba9d1584f4e297", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/0e638c7e95eb3ac6eea50a2e35ba9d1584f4e297", "committedDate": "2020-07-18T23:15:07Z", "message": "IGNITE-7369 - fixes after review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a7e19258ea0e696313ef75a4313555a084e533", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c1a7e19258ea0e696313ef75a4313555a084e533", "committedDate": "2020-07-19T13:14:11Z", "message": "IGNITE-7369 - fix TransactionClientConfiguration.cs copy ctor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a6d9d0c52114366d8b5e8f417d2fbf47caca2fa", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/8a6d9d0c52114366d8b5e8f417d2fbf47caca2fa", "committedDate": "2020-07-19T20:51:41Z", "message": "IGNITE-7369 - disconnect test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da54c3d04b70f37e3eb94baad402fb16ddfed5b", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/1da54c3d04b70f37e3eb94baad402fb16ddfed5b", "committedDate": "2020-07-19T21:23:32Z", "message": "IGNITE-7369 - disconnect test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afc9fc23d26d576a61409a454e4db152f2e4c739", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/afc9fc23d26d576a61409a454e4db152f2e4c739", "committedDate": "2020-07-20T15:16:16Z", "message": "IGNITE-7369 - optimistic transaction test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f7a1823c25f652ab994b3aa5b973a97043107b", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/70f7a1823c25f652ab994b3aa5b973a97043107b", "committedDate": "2020-07-20T20:52:11Z", "message": "IGNITE-7369 - some more tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbea7ceb5191147ab93b1a3656a807f76314aaee", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/dbea7ceb5191147ab93b1a3656a807f76314aaee", "committedDate": "2020-07-20T20:59:50Z", "message": "IGNITE-7369 - tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314f769d8465214dec9ead497333c6ea6fa9de3f", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/314f769d8465214dec9ead497333c6ea6fa9de3f", "committedDate": "2020-07-20T21:03:17Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/3f2c89bd507115ef6a44f50c2eb92511b0b2f21c", "committedDate": "2020-07-20T21:04:52Z", "message": "IGNITE-7369 - tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjg2OTMw", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-452686930", "createdAt": "2020-07-21T17:40:44Z", "commit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0MDo0NFrOG1C40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODowNDoyMFrOG1Dxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NTAyNw==", "bodyText": "Looks like we don't really need this interface and the one below, since they have only one implementation.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458275027", "createdAt": "2020-07-21T17:40:44Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/ITransactionClientInternal.cs", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using Apache.Ignite.Core.Client.Transactions;\n+\n+    /// <summary>\n+    /// Internal Ignite Thin Client transaction facade.\n+    /// </summary>\n+    internal interface ITransactionClientInternal : ITransactionClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NjY3NA==", "bodyText": "Can we add tx properties here?\n\nIsolation\nConcurrency\nTimeout\nLabel", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458276674", "createdAt": "2020-07-21T17:43:21Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionClient.cs", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+\n+    /// <summary>\n+    /// Thin client transaction.\n+    /// </summary>\n+    public interface ITransactionClient : IDisposable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3Nzg2Mg==", "bodyText": "Please add properties:\n\nTx\nDefaultTransactionConcurrency\nDefaultTransactionIsolation\nDefaultTimeout", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458277862", "createdAt": "2020-07-21T17:45:11Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionsClient.cs", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// <para /> Transactions are bound to the thread started the transaction. After that, each cache operation within this thread\n+    /// will belong to the corresponding transaction until the transaction is committed, rolled back or closed.\n+    /// <para /> Should not be used with async calls.\n+    /// </summary> \n+    public interface ITransactionsClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODQ4Mg==", "bodyText": "Missing space after =", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458278482", "createdAt": "2020-07-21T17:46:09Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/TransactionClientConfiguration.cs", "diffHunk": "@@ -0,0 +1,81 @@\n+\ufeff/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using System.ComponentModel;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Transactions configuration.\n+    /// </summary>\n+    public class TransactionClientConfiguration\n+    {\n+        /// <summary> The default value for <see cref=\"DefaultTransactionConcurrency\"/> property. </summary>\n+        public const TransactionConcurrency DefaultDefaultTransactionConcurrency = TransactionConcurrency.Pessimistic;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public const TransactionIsolation DefaultDefaultTransactionIsolation = TransactionIsolation.RepeatableRead;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public static readonly TimeSpan DefaultDefaultTimeout = TimeSpan.Zero;\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction concurrency to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionConcurrency)]\n+        public TransactionConcurrency DefaultTransactionConcurrency { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction isolation to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionIsolation)]\n+        public TransactionIsolation DefaultTransactionIsolation { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction timeout to use when one is not explicitly specified.\n+        /// <see cref=\"TimeSpan.Zero\"/> for infinite timeout.\n+        /// </summary>\n+        [DefaultValue(typeof(TimeSpan), \"00:00:00\")]\n+        public TimeSpan DefaultTimeout { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"TransactionClientConfiguration\" /> class.\n+        /// </summary>\n+        public TransactionClientConfiguration()\n+        {\n+            DefaultTransactionConcurrency = DefaultDefaultTransactionConcurrency;\n+            DefaultTransactionIsolation = DefaultDefaultTransactionIsolation;\n+            DefaultTimeout = DefaultDefaultTimeout;\n+        }\n+        \n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"TransactionClientConfiguration\" /> class.\n+        /// </summary>\n+        /// <param name=\"cfg\">The configuration to copy.</param>\n+        public TransactionClientConfiguration(TransactionClientConfiguration cfg)\n+        {\n+            IgniteArgumentCheck.NotNull(cfg, \"configuration\");\n+\n+            DefaultTransactionConcurrency = cfg.DefaultTransactionConcurrency;\n+            DefaultTransactionIsolation = cfg.DefaultTransactionIsolation;\n+            DefaultTimeout =cfg.DefaultTimeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDI1Mw==", "bodyText": "Please add simple tests for both constructors (check that properties are set as expected)\nAdd tests for custom values - use newly added properties in ITransactionClient and ITransactionsClient to make sure that custom defaults are used", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458280253", "createdAt": "2020-07-21T17:48:59Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/TransactionClientConfiguration.cs", "diffHunk": "@@ -0,0 +1,81 @@\n+\ufeff/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using System.ComponentModel;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Transactions configuration.\n+    /// </summary>\n+    public class TransactionClientConfiguration\n+    {\n+        /// <summary> The default value for <see cref=\"DefaultTransactionConcurrency\"/> property. </summary>\n+        public const TransactionConcurrency DefaultDefaultTransactionConcurrency = TransactionConcurrency.Pessimistic;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public const TransactionIsolation DefaultDefaultTransactionIsolation = TransactionIsolation.RepeatableRead;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public static readonly TimeSpan DefaultDefaultTimeout = TimeSpan.Zero;\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction concurrency to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionConcurrency)]\n+        public TransactionConcurrency DefaultTransactionConcurrency { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction isolation to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionIsolation)]\n+        public TransactionIsolation DefaultTransactionIsolation { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction timeout to use when one is not explicitly specified.\n+        /// <see cref=\"TimeSpan.Zero\"/> for infinite timeout.\n+        /// </summary>\n+        [DefaultValue(typeof(TimeSpan), \"00:00:00\")]\n+        public TimeSpan DefaultTimeout { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"TransactionClientConfiguration\" /> class.\n+        /// </summary>\n+        public TransactionClientConfiguration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4Nzk4Mg==", "bodyText": "XMLDoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458287982", "createdAt": "2020-07-21T18:01:32Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/TransactionsClient.cs", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Threading;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// </summary>\n+    internal class TransactionsClient : ITransactionsClientInternal, IDisposable\n+    {\n+        /** Ignite. */\n+        private readonly IgniteClient _ignite;\n+\n+        /** Default transaction configuration. */\n+        private readonly TransactionClientConfiguration _cfg;\n+\n+        /** Transaction for this thread and client. */\n+        private readonly ThreadLocal<TransactionClient> _currentTx = new ThreadLocal<TransactionClient>();\n+\n+        /** Transaction manager. */\n+        private readonly ClientCacheTransactionManager _txManager;\n+\n+        /// <summary>\n+        /// Constructor.\n+        /// </summary>\n+        /// <param name=\"ignite\">Ignite.</param>\n+        /// <param name=\"cfg\"></param>\n+        public TransactionsClient(IgniteClient ignite, TransactionClientConfiguration cfg)\n+        {\n+            _ignite = ignite;\n+            _cfg = cfg ?? new TransactionClientConfiguration();\n+            _txManager = new ClientCacheTransactionManager(this);\n+        }\n+\n+        /** <inheritdoc /> */\n+        public ITransactionClientInternal CurrentTx\n+        {\n+            get\n+            {\n+                var tx = _currentTx.Value;\n+\n+                if (tx == null)\n+                    return null;\n+\n+                if (tx.Closed)\n+                {\n+                    _currentTx.Value = null;\n+\n+                    return null;\n+                }\n+\n+                return tx;\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void StartTxIfNeeded()\n+        {\n+            _txManager.StartTxIfNeeded();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TransactionConcurrency DefaultTxConcurrency\n+        {\n+            get { return _cfg.DefaultTransactionConcurrency; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TransactionIsolation DefaultTxIsolation\n+        {\n+            get { return _cfg.DefaultTransactionIsolation; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TimeSpan DefaultTimeout\n+        {\n+            get { return _cfg.DefaultTimeout; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart()\n+        {\n+            return TxStart(_cfg.DefaultTransactionConcurrency, _cfg.DefaultTransactionIsolation);\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart(TransactionConcurrency concurrency, TransactionIsolation isolation)\n+        {\n+            return TxStart(concurrency, isolation, _cfg.DefaultTimeout);\n+        }\n+\n+        /** <inheritDoc /> */\n+        public ITransactionClient TxStart(TransactionConcurrency concurrency, \n+            TransactionIsolation isolation,\n+            TimeSpan timeout)\n+        {\n+            return TxStart(concurrency, isolation, timeout, null);\n+        }\n+\n+        private ITransactionClient TxStart(TransactionConcurrency concurrency,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTU5NA==", "bodyText": "inheritdoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r458289594", "createdAt": "2020-07-21T18:04:20Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CachePartitionedTxTest.cs", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Client.Cache\n+{\n+    using System.Linq;\n+    using System.Transactions;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Impl.Client.Transactions;\n+    using NUnit.Framework;\n+    using NUnit.Framework.Constraints;\n+\n+    /// <summary>\n+    /// Tests client transactions for multiple nodes with partition awareness.\n+    /// </summary>\n+    public class CachePartitionedTxTest : CacheClientAbstractTxTest\n+    {\n+        /// <summary>\n+        ///  Initializes a new instance of the <see cref=\"CachePartitionedTxTest\"/> class.\n+        /// </summary>\n+        public CachePartitionedTxTest() : base(3, true)\n+        {\n+            // No-op.\n+        }\n+\n+        /// <summary>\n+        /// Test transaction for partition aware client. \n+        /// </summary>\n+        [Test]\n+        public void TestTxPartitioned()\n+        {\n+            var cache = GetTransactionalCache();\n+            var ignite1 = GetIgnite();\n+            var ignite2 = GetIgnite(1);\n+            var key1 = TestUtils.GetPrimaryKey(ignite1, GetCacheName());\n+            var key2 = TestUtils.GetPrimaryKey(ignite2, GetCacheName());\n+\n+            cache.Put(key1, 1);\n+            cache.Put(key2, 2);\n+\n+            using (Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(key1, 10);\n+                cache.Put(key2, 20);\n+\n+                Assert.AreEqual(10, cache.Get(key1));\n+                Assert.AreEqual(20, cache.Get(key2));\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(key1));\n+            Assert.AreEqual(2, cache.Get(key2));\n+        }\n+        \n+        /// <summary>\n+        /// Test transaction scope for partition aware client. \n+        /// </summary>\n+        [Test]\n+        public void TestTransactionScopePartitioned()\n+        {\n+            var cache = GetTransactionalCache();\n+            var ignite1 = GetIgnite();\n+            var ignite2 = GetIgnite(1);\n+            var key1 = TestUtils.GetPrimaryKey(ignite1, GetCacheName());\n+            var key2 = TestUtils.GetPrimaryKey(ignite2, GetCacheName());\n+\n+            cache.Put(key1, 1);\n+            cache.Put(key2, 2);\n+\n+            using (new TransactionScope())\n+            {\n+                cache.Put(key1, 10);\n+                cache.Put(key2, 20);\n+\n+                Assert.AreEqual(10, cache.Get(key1));\n+                Assert.AreEqual(20, cache.Get(key2));\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(key1));\n+            Assert.AreEqual(2, cache.Get(key2));\n+        }\n+\n+        protected override string GetCacheName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0dde4bfb214dcc42b99b7ea5c0bfa3247264b9e", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c0dde4bfb214dcc42b99b7ea5c0bfa3247264b9e", "committedDate": "2020-07-21T21:22:22Z", "message": "IGNITE-7369 - remove usings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fef5f31f5ad1a5123dfd754461eb8abd80676c1a", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/fef5f31f5ad1a5123dfd754461eb8abd80676c1a", "committedDate": "2020-07-21T21:35:27Z", "message": "IGNITE-7369 - fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d780ff19851945fb64574851ab6627069ec9de23", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/d780ff19851945fb64574851ab6627069ec9de23", "committedDate": "2020-07-22T19:20:33Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions\n\n# Conflicts:\n#\tmodules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj\n#\tmodules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "108cc97eec187d3e2b7a0d8f479f29de07f401ec", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/108cc97eec187d3e2b7a0d8f479f29de07f401ec", "committedDate": "2020-07-22T20:12:58Z", "message": "IGNITE-7369 - props and tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e1b07ec1c862538dd029ddc60df8fce4441bf35", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/7e1b07ec1c862538dd029ddc60df8fce4441bf35", "committedDate": "2020-07-22T20:17:15Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "201d8c1e40ba6aaf5d1e8c254731ba36d688f7a1", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/201d8c1e40ba6aaf5d1e8c254731ba36d688f7a1", "committedDate": "2020-07-23T15:07:04Z", "message": "IGNITE-7369 - add props."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9af110db81a070a9b5c36a50bd5d2345247e062", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/d9af110db81a070a9b5c36a50bd5d2345247e062", "committedDate": "2020-07-23T15:18:48Z", "message": "IGNITE-7369 - delete internal interfaces."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3335f2fee7e2ff12cf02c5cbb18550a869141263", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/3335f2fee7e2ff12cf02c5cbb18550a869141263", "committedDate": "2020-07-23T15:29:02Z", "message": "IGNITE-7369 - example."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eadff39dfed34768396f817e6f1dd3000faea24", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/6eadff39dfed34768396f817e6f1dd3000faea24", "committedDate": "2020-07-23T15:33:01Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f31170014d883b8632972d273e9db63f2fe6d7", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f0f31170014d883b8632972d273e9db63f2fe6d7", "committedDate": "2020-07-23T20:51:43Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c42cfc115cc1567b4485fccbc0cf9bf05ed6b64a", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/c42cfc115cc1567b4485fccbc0cf9bf05ed6b64a", "committedDate": "2020-07-23T20:59:26Z", "message": "IGNITE-7369 - refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6f5ede2a93788587ff6d657ed1a95a2f890f48f", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f6f5ede2a93788587ff6d657ed1a95a2f890f48f", "committedDate": "2020-07-23T22:22:52Z", "message": "IGNITE-7369 - remove local active transaction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa12d8eb781374fca4db6de57f54881f6a8db760", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/fa12d8eb781374fca4db6de57f54881f6a8db760", "committedDate": "2020-07-24T00:15:40Z", "message": "IGNITE-7369 - temp ignore."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "613be9da2ec34523f5f52ae994e8ad2a13aef55d", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/613be9da2ec34523f5f52ae994e8ad2a13aef55d", "committedDate": "2020-07-24T00:31:16Z", "message": "IGNITE-7369 - temp ignore."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTQ2NTcw", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-455946570", "createdAt": "2020-07-27T16:32:26Z", "commit": {"oid": "613be9da2ec34523f5f52ae994e8ad2a13aef55d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjozMjoyNlrOG3qS1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzozM1rOG3vGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxNzgxMw==", "bodyText": "Missing XMLDoc", "url": "https://github.com/apache/ignite/pull/7992#discussion_r461017813", "createdAt": "2020-07-27T16:32:26Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionClient.cs", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Thin client transaction.\n+    /// </summary>\n+    public interface ITransactionClient : IDisposable\n+    {\n+        /// <summary>\n+        /// Commits this transaction.\n+        /// </summary>\n+        void Commit();\n+\n+        /// <summary>\n+        /// Rolls back this transaction.\n+        /// </summary>\n+        void Rollback();\n+        \n+        TransactionConcurrency Concurrency { get; } ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613be9da2ec34523f5f52ae994e8ad2a13aef55d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxODcwMw==", "bodyText": "Please add a test for this property", "url": "https://github.com/apache/ignite/pull/7992#discussion_r461018703", "createdAt": "2020-07-27T16:33:52Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/ITransactionClient.cs", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Thin client transaction.\n+    /// </summary>\n+    public interface ITransactionClient : IDisposable\n+    {\n+        /// <summary>\n+        /// Commits this transaction.\n+        /// </summary>\n+        void Commit();\n+\n+        /// <summary>\n+        /// Rolls back this transaction.\n+        /// </summary>\n+        void Rollback();\n+        \n+        TransactionConcurrency Concurrency { get; } \n+        \n+        TransactionIsolation Isolation { get; }\n+\n+        TimeSpan Timeout { get; }\n+\n+        string Label { get; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613be9da2ec34523f5f52ae994e8ad2a13aef55d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MzE4NQ==", "bodyText": "Yep that looks good, thanks.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r461093185", "createdAt": "2020-07-27T18:41:23Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Transactions/TransactionClientConfiguration.cs", "diffHunk": "@@ -0,0 +1,81 @@\n+\ufeff/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Client.Transactions\n+{\n+    using System;\n+    using System.ComponentModel;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Transactions configuration.\n+    /// </summary>\n+    public class TransactionClientConfiguration\n+    {\n+        /// <summary> The default value for <see cref=\"DefaultTransactionConcurrency\"/> property. </summary>\n+        public const TransactionConcurrency DefaultDefaultTransactionConcurrency = TransactionConcurrency.Pessimistic;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public const TransactionIsolation DefaultDefaultTransactionIsolation = TransactionIsolation.RepeatableRead;\n+\n+        /// <summary> The default value for <see cref=\"DefaultTransactionIsolation\"/> property. </summary>\n+        public static readonly TimeSpan DefaultDefaultTimeout = TimeSpan.Zero;\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction concurrency to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionConcurrency)]\n+        public TransactionConcurrency DefaultTransactionConcurrency { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction isolation to use when one is not explicitly specified.\n+        /// </summary>\n+        [DefaultValue(DefaultDefaultTransactionIsolation)]\n+        public TransactionIsolation DefaultTransactionIsolation { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the cache transaction timeout to use when one is not explicitly specified.\n+        /// <see cref=\"TimeSpan.Zero\"/> for infinite timeout.\n+        /// </summary>\n+        [DefaultValue(typeof(TimeSpan), \"00:00:00\")]\n+        public TimeSpan DefaultTimeout { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"TransactionClientConfiguration\" /> class.\n+        /// </summary>\n+        public TransactionClientConfiguration()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDI1Mw=="}, "originalCommit": {"oid": "3f2c89bd507115ef6a44f50c2eb92511b0b2f21c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjYwMA==", "bodyText": "_socket should be used instead of _ignite.Socket\nMake sure we do not throw exceptions from the finalizer and Dispose", "url": "https://github.com/apache/ignite/pull/7992#discussion_r461096600", "createdAt": "2020-07-27T18:47:33Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/TransactionClient.cs", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Globalization;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transaction facade.\n+    /// </summary>\n+    internal class TransactionClient : ITransactionClient\n+    {\n+        /** Unique  transaction ID.*/\n+        private readonly int _id;\n+\n+        /** Ignite. */\n+        private readonly IgniteClient _ignite;\n+\n+        /** Socket. */\n+        private readonly ClientSocket _socket;\n+\n+        /** Transaction is closed. */\n+        private bool _closed;\n+\n+        /// <summary>\n+        /// Constructor.\n+        /// </summary>\n+        /// <param name=\"id\">ID.</param>\n+        /// <param name=\"ignite\">Ignite.</param>\n+        /// <param name=\"socket\">Socket.</param>\n+        /// <param name=\"concurrency\">Concurrency.</param>\n+        /// <param name=\"isolation\">Isolation.</param>\n+        /// <param name=\"timeout\">Timeout.</param>\n+        /// <param name=\"label\">Label.</param>\n+        public TransactionClient(int id,\n+            IgniteClient ignite,\n+            ClientSocket socket,\n+            TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label)\n+        {\n+            _id = id;\n+            _ignite = ignite;\n+            _socket = socket;\n+            Concurrency = concurrency;\n+            Isolation = isolation;\n+            Timeout = timeout;\n+            Label = label;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public void Commit()\n+        {\n+            ThrowIfClosed();\n+            Close(true);\n+        }\n+\n+        /** <inheritdoc /> */\n+        public void Rollback()\n+        {\n+            ThrowIfClosed();\n+            Close(false);\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TransactionConcurrency Concurrency { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionIsolation Isolation { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TimeSpan Timeout { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public string Label { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public void Dispose()\n+        {\n+            try\n+            {\n+                Close(false);\n+            }\n+            finally\n+            {\n+                GC.SuppressFinalize(this);\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Transaction Id.\n+        /// </summary>\n+        public int Id\n+        {\n+            get { return _id; }\n+        }\n+\n+        public ClientSocket Socket\n+        {\n+            get { return _socket; }\n+        }\n+\n+        /// <summary>\n+        /// Returns if transaction is closed.\n+        /// </summary>\n+        internal bool Closed\n+        {\n+            get { return _closed; }\n+        }\n+\n+        /// <summary>\n+        /// Closes the transaction. \n+        /// </summary>\n+        private void Close(bool commit)\n+        {\n+            if (!_closed)\n+            {\n+                try\n+                {\n+                    _ignite.Socket.DoOutInOp<object>(ClientOp.TxEnd,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613be9da2ec34523f5f52ae994e8ad2a13aef55d"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "662bba463e045a7fd5d8c94bce521754f3c02867", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/662bba463e045a7fd5d8c94bce521754f3c02867", "committedDate": "2020-08-02T11:06:57Z", "message": "IGNITE-13296 - added validations and XML docs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61642003b16c65b3d859738c4955bc0229da25fe", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/61642003b16c65b3d859738c4955bc0229da25fe", "committedDate": "2020-08-02T12:12:37Z", "message": "IGNITE-13296 - fixed Transaction.Socket usage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTYxNDQ0", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-475561444", "createdAt": "2020-08-26T14:42:54Z", "commit": {"oid": "61642003b16c65b3d859738c4955bc0229da25fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDo0Mjo1NFrOHHPhQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDo0Mjo1NFrOHHPhQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1NjM1NQ==", "bodyText": "We should handle an edge case when multiple clients are used from the same thread:\ncheck that tx actually belongs to the current IgniteClient and has the same ClientSocket.\nIf there is an active transaction for another client or socket, I think we should throw  NotSupportedException.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r477356355", "createdAt": "2020-08-26T14:42:54Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/Transactions/TransactionsClient.cs", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Client.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Threading;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Ignite Thin Client transactions facade.\n+    /// </summary>\n+    internal class TransactionsClient : ITransactionsClient, IDisposable\n+    {\n+        /** Default transaction configuration. */\n+        private readonly TransactionClientConfiguration _cfg;\n+\n+        /** Transaction for this thread and client. */\n+        private readonly ThreadLocal<TransactionClient> _currentTx = new ThreadLocal<TransactionClient>();\n+\n+        /** Ignite. */\n+        private readonly IgniteClient _ignite;\n+\n+        /** Transaction manager. */\n+        private readonly ClientCacheTransactionManager _txManager;\n+\n+        /// <summary>\n+        /// Constructor.\n+        /// </summary>\n+        /// <param name=\"ignite\">Ignite.</param>\n+        /// <param name=\"cfg\"></param>\n+        public TransactionsClient(IgniteClient ignite, TransactionClientConfiguration cfg)\n+        {\n+            _ignite = ignite;\n+            _cfg = cfg ?? new TransactionClientConfiguration();\n+            _txManager = new ClientCacheTransactionManager(this);\n+        }\n+\n+        /** <inheritDoc /> */\n+        [SuppressMessage(\"Microsoft.Usage\", \"CA1816:CallGCSuppressFinalizeCorrectly\",\n+            Justification = \"There is no finalizer.\")]\n+        public void Dispose()\n+        {\n+            _currentTx.Dispose();\n+            _txManager.Dispose();\n+        }\n+\n+        /// <summary>\n+        /// Starts ambient transaction if needed.\n+        /// </summary>\n+        internal void StartTxIfNeeded()\n+        {\n+            _txManager.StartTxIfNeeded();\n+        }\n+\n+        /** <inheritDoc /> */\n+        ITransactionClient ITransactionsClient.Tx\n+        {\n+            get { return Tx; }\n+        }\n+\n+        /// <summary>\n+        /// Gets transaction started by this thread or null if this thread does not have a transaction.\n+        /// </summary>\n+        internal TransactionClient Tx\n+        {\n+            get\n+            {\n+                var tx = _currentTx.Value;\n+\n+                if (tx == null)\n+                    return null;\n+\n+                if (tx.Closed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61642003b16c65b3d859738c4955bc0229da25fe"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjE2ODMw", "url": "https://github.com/apache/ignite/pull/7992#pullrequestreview-475616830", "createdAt": "2020-08-26T15:40:12Z", "commit": {"oid": "61642003b16c65b3d859738c4955bc0229da25fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0MDoxMlrOHHSHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0MDoxMlrOHHSHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5ODg2NA==", "bodyText": "We should check that operations can be performed and that one client does not use the TX started by the other.\nI think this is not the case, since we only have one thread local which is shared by all clients.", "url": "https://github.com/apache/ignite/pull/7992#discussion_r477398864", "createdAt": "2020-08-26T15:40:12Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheClientAbstractTxTest.cs", "diffHunk": "@@ -0,0 +1,822 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Client.Cache\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Linq;\n+    using System.Threading;\n+    using System.Threading.Tasks;\n+    using System.Transactions;\n+    using Apache.Ignite.Core.Cache.Configuration;\n+    using Apache.Ignite.Core.Client;\n+    using Apache.Ignite.Core.Client.Cache;\n+    using Apache.Ignite.Core.Client.Transactions;\n+    using Apache.Ignite.Core.Impl.Client.Transactions;\n+    using Apache.Ignite.Core.Transactions;\n+    using NUnit.Framework;\n+    using NUnit.Framework.Constraints;\n+\n+    /// <summary>\n+    /// Transactional cache client tests.\n+    /// </summary>\n+    public abstract class CacheClientAbstractTxTest : ClientTestBase\n+    {\n+        /** All concurrency controls. */\n+        private static readonly TransactionConcurrency[] AllConcurrencyControls =\n+        {\n+            TransactionConcurrency.Optimistic,\n+            TransactionConcurrency.Pessimistic\n+        };\n+\n+        /** All isolation levels*/\n+        private static readonly TransactionIsolation[] AllIsolationLevels =\n+        {\n+            TransactionIsolation.Serializable,\n+            TransactionIsolation.ReadCommitted,\n+            TransactionIsolation.RepeatableRead\n+        };\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"CacheClientAbstractTxTest\"/> class.\n+        /// </summary>\n+        protected CacheClientAbstractTxTest(int serverCount, bool enablePartitionAwareness) : base(serverCount,\n+            enablePartitionAwareness: enablePartitionAwareness)\n+        {\n+            // No-op.\n+        }\n+\n+        /// <summary>\n+        /// Tests that custom client transactions configuration is applied.\n+        /// </summary>\n+        [Test]\n+        public void TestClientTransactionConfiguration()\n+        {\n+            var timeout = TransactionClientConfiguration.DefaultDefaultTimeout.Add(TimeSpan.FromMilliseconds(1000));\n+            var cfg = GetClientConfiguration();\n+            cfg.TransactionConfiguration = new TransactionClientConfiguration\n+            {\n+                DefaultTimeout = timeout\n+            };\n+\n+            foreach (var concurrency in AllConcurrencyControls)\n+            {\n+                foreach (var isolation in AllIsolationLevels)\n+                {\n+                    cfg.TransactionConfiguration.DefaultTransactionConcurrency = concurrency;\n+                    cfg.TransactionConfiguration.DefaultTransactionIsolation = isolation;\n+                    using (var client = Ignition.StartClient(cfg))\n+                    {\n+                        var transactions = client.GetTransactions();\n+                        Assert.AreEqual(concurrency, transactions.DefaultTransactionConcurrency);\n+                        Assert.AreEqual(isolation, transactions.DefaultTransactionIsolation);\n+                        Assert.AreEqual(timeout, transactions.DefaultTimeout);\n+\n+                        ITransaction igniteTx;\n+                        using (var tx = transactions.TxStart())\n+                        {\n+                            Assert.AreEqual(tx, transactions.Tx);\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                            Assert.AreEqual(timeout, tx.Timeout);\n+\n+                            igniteTx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, igniteTx.Concurrency);\n+                            Assert.AreEqual(isolation, igniteTx.Isolation);\n+                            Assert.AreEqual(timeout, igniteTx.Timeout);\n+                        }\n+\n+                        igniteTx.Dispose();\n+                    }\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests that parameters passed to TxStart are applied.\n+        /// </summary>\n+        [Test]\n+        public void TestTxStartPassesParameters()\n+        {\n+            var timeout = TransactionClientConfiguration.DefaultDefaultTimeout.Add(TimeSpan.FromMilliseconds(1000));\n+            var acts = new List<Func<ITransactionsClient>>\n+            {\n+                () => Client.GetTransactions(),\n+                () => Client.GetTransactions().WithLabel(\"label\"),\n+            };\n+            foreach (var concurrency in AllConcurrencyControls)\n+            {\n+                foreach (var isolation in AllIsolationLevels)\n+                {\n+                    foreach (var act in acts)\n+                    {\n+                        var client = act();\n+\n+                        ITransaction igniteTx;\n+                        using (var tx = client.TxStart(concurrency, isolation))\n+                        {\n+                            Assert.AreEqual(tx, client.Tx);\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+\n+                            igniteTx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, igniteTx.Concurrency);\n+                            Assert.AreEqual(isolation, igniteTx.Isolation);\n+                        }\n+\n+                        igniteTx.Dispose();\n+                        using (var tx = client.TxStart(concurrency, isolation, timeout))\n+                        {\n+                            Assert.AreEqual(concurrency, tx.Concurrency);\n+                            Assert.AreEqual(isolation, tx.Isolation);\n+                            Assert.AreEqual(timeout, tx.Timeout);\n+\n+                            igniteTx = GetSingleLocalTransaction();\n+                            Assert.AreEqual(concurrency, igniteTx.Concurrency);\n+                            Assert.AreEqual(isolation, igniteTx.Isolation);\n+                            Assert.AreEqual(timeout, igniteTx.Timeout);\n+                        }\n+\n+                        igniteTx.Dispose();\n+                    }\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Tests that transaction can't be committed/rollback after being already completed.\n+        /// </summary>\n+        [Test]\n+        public void TestThrowsIfEndAlreadyCompletedTransaction()\n+        {\n+            var tx = Client.GetTransactions().TxStart();\n+            tx.Commit();\n+\n+            var constraint = new ReusableConstraint(Is.TypeOf<InvalidOperationException>()\n+                .And.Message.Contains(\"Transaction\")\n+                .And.Message.Contains(\"is closed\"));\n+\n+            Assert.Throws(constraint, () => tx.Commit());\n+            Assert.Throws(constraint, () => tx.Rollback());\n+\n+            using (tx = Client.GetTransactions().TxStart())\n+            {\n+            }\n+\n+            Assert.Throws(constraint, () => tx.Commit());\n+            Assert.Throws(constraint, () => tx.Rollback());\n+        }\n+\n+        /// <summary>\n+        /// Tests that transaction throws if timeout elapsed.\n+        /// </summary>\n+        [Test]\n+        public void TestTimeout()\n+        {\n+            var timeout = TimeSpan.FromMilliseconds(200);\n+            var cache = GetTransactionalCache();\n+            cache.Put(1, 1);\n+            using (var tx = Client.GetTransactions().TxStart(TransactionConcurrency.Pessimistic,\n+                TransactionIsolation.ReadCommitted,\n+                timeout))\n+            {\n+                Thread.Sleep(TimeSpan.FromMilliseconds(300));\n+                var constraint = new ReusableConstraint(Is.TypeOf<IgniteClientException>()\n+                    .And.Message.Contains(\"Cache transaction timed out\"));\n+                Assert.Throws(constraint, () => cache.Put(1, 10));\n+                Assert.Throws(constraint, () => tx.Commit());\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+        }\n+\n+        /// <summary>\n+        /// Tests that commit applies cache changes.\n+        /// </summary>\n+        [Test]\n+        public void TestTxCommit()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            using (var tx = Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+\n+                tx.Commit();\n+            }\n+\n+            Assert.AreEqual(10, cache.Get(1));\n+            Assert.AreEqual(20, cache.Get(2));\n+        }\n+\n+        /// <summary>\n+        /// Tests that rollback reverts cache changes.\n+        /// </summary>\n+        [Test]\n+        public void TestTxRollback()\n+        {\n+            var cache = GetTransactionalCache();\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            using (var tx = Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+\n+                Assert.AreEqual(10, cache.Get(1));\n+                Assert.AreEqual(20, cache.Get(2));\n+                tx.Rollback();\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+            Assert.AreEqual(2, cache.Get(2));\n+        }\n+\n+        /// <summary>\n+        /// Tests that closing transaction without commit reverts cache changes.\n+        /// </summary>\n+        [Test]\n+        public void TestTxClose()\n+        {\n+            var cache = GetTransactionalCache();\n+\n+            cache.Put(1, 1);\n+            cache.Put(2, 2);\n+\n+            using (Client.GetTransactions().TxStart())\n+            {\n+                cache.Put(1, 10);\n+                cache.Put(2, 20);\n+            }\n+\n+            Assert.AreEqual(1, cache.Get(1));\n+            Assert.AreEqual(2, cache.Get(2));\n+        }\n+\n+        /// <summary>\n+        /// Tests that client can't start multiple transactions in one thread.\n+        /// </summary>\n+        [Test]\n+        public void TestThrowsIfMultipleStarted()\n+        {\n+            TestThrowsIfMultipleStarted(\n+                () => Client.GetTransactions().TxStart(),\n+                () => Client.GetTransactions().TxStart());\n+        }\n+\n+        /// <summary>\n+        /// Tests that different clients can start transactions in one thread.\n+        /// </summary>\n+        [Test]\n+        public void TestDifferentClientsCanStartTransactions()\n+        {\n+            Assert.DoesNotThrow(() =>\n+            {\n+                using (Client.GetTransactions().TxStart())\n+                using (GetClient().GetTransactions().TxStart())\n+                {\n+                    // No-op.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61642003b16c65b3d859738c4955bc0229da25fe"}, "originalPosition": 298}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945d887e356ccffb3086c78be42cffae3825a0da", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/945d887e356ccffb3086c78be42cffae3825a0da", "committedDate": "2020-09-06T20:27:53Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions\n\n# Conflicts:\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Client/IIgniteClient.cs\n#\tmodules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/IgniteClient.cs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3616c3da90f05c805f26c13ab6903cfe2a3ff0", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/ca3616c3da90f05c805f26c13ab6903cfe2a3ff0", "committedDate": "2020-09-06T20:42:40Z", "message": "IGNITE-7369 - rename and fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e92b75a40bb550ee636148542b45e8b7546be96", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/5e92b75a40bb550ee636148542b45e8b7546be96", "committedDate": "2020-09-12T11:57:31Z", "message": "Merge branch 'master' into IGNITE-7369-thin-transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce38c0cba0952724053028fd023e37ae460b714d", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/ce38c0cba0952724053028fd023e37ae460b714d", "committedDate": "2020-09-12T12:43:56Z", "message": "IGNITE-7369 - failing test different clients."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10a0ce3f72df5032da674dc1bf58136baa456883", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/10a0ce3f72df5032da674dc1bf58136baa456883", "committedDate": "2020-09-12T23:36:12Z", "message": "IGNITE-7369 - test different clients."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7f9c67bda7a5754241890f774636fc9d40c968", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/fe7f9c67bda7a5754241890f774636fc9d40c968", "committedDate": "2020-09-17T15:51:06Z", "message": "IGNITE-7369 - swallow exception only if socket is disposed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59c974f16909c4cc787116f3ce3f58ef565029f", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/f59c974f16909c4cc787116f3ce3f58ef565029f", "committedDate": "2020-09-17T15:51:21Z", "message": "IGNITE-7369 - fix test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa17ef5ab342a6b26431c9c44e17490684837ddb", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/fa17ef5ab342a6b26431c9c44e17490684837ddb", "committedDate": "2020-09-17T16:01:47Z", "message": "IGNITE-7369 - WeakReference."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12a4ddf34e6d98e751bae5c5e2a8e6023144ec39", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/12a4ddf34e6d98e751bae5c5e2a8e6023144ec39", "committedDate": "2020-09-18T11:16:56Z", "message": "Merge branch 'master' of https://github.com/apache/ignite into IGNITE-7369-thin-transactions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152241476147e462ed8968e5e20f88acbccbfaa7", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/152241476147e462ed8968e5e20f88acbccbfaa7", "committedDate": "2020-09-19T23:32:02Z", "message": "IGNITE-7369 - GC tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450715736712eb4663cd0bcd97f1bfcfe84748b7", "author": {"user": {"login": "gurustron", "name": null}}, "url": "https://github.com/apache/ignite/commit/450715736712eb4663cd0bcd97f1bfcfe84748b7", "committedDate": "2020-09-20T15:15:48Z", "message": "IGNITE-7369 - GC tests and fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30bf18c5c0e08078572becca6c2d3849daaed312", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/30bf18c5c0e08078572becca6c2d3849daaed312", "committedDate": "2020-09-22T11:01:24Z", "message": "Mention TransactionScope in XMLDoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2480, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}