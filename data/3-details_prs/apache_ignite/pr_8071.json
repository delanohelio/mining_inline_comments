{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjAyMjI0", "number": 8071, "title": "Make ducktape work with ISE / ISP", "bodyText": "Features:\n\n\nModify tests to make it possible specify externally:\na. Ignite version, jvm_options and other custom ducktape options to test;\nb. Build custom docker image;\nc. Specify templates for Ignite configs;\n\n\nSeparate IgniteServer and IgniteClient config.\n\n\nFixes:\n\nUse bind mount instead of volume to increase performance;\nClean ducker containers instead of all possible containers;\nRemove obsolete code with check containers with ducker labels;\nget_version now works for strings too.", "createdAt": "2020-07-22T15:45:35Z", "url": "https://github.com/apache/ignite/pull/8071", "merged": true, "mergeCommit": {"oid": "5f2ca372fa8baa07b4df44a8929cc676e6cce54e"}, "closed": true, "closedAt": "2020-07-29T13:06:15Z", "author": {"login": "timoninmaxim"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3qPz8AFqTQ1Mzg4OTE1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5XVJmgH2gAyNDU1MjAyMjI0OmI0MWE0M2E3MTUyYjM1MWU3OGVjY2MwYTM3ZWJlODBjNjMwZGZkODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODg5MTU1", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-453889155", "createdAt": "2020-07-23T07:25:11Z", "commit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNToxMVrOG1_BaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNToxMVrOG1_BaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDI2NA==", "bodyText": "Use .j2 file extension", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459260264", "createdAt": "2020-07-23T07:25:11Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/config/ignite-client.xml.tmpl", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODg5MzQx", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-453889341", "createdAt": "2020-07-23T07:25:32Z", "commit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTozMlrOG1_B_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTozMlrOG1_B_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDQxNA==", "bodyText": "Use signle template for client/server", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459260414", "createdAt": "2020-07-23T07:25:32Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/config/ignite-client.xml.tmpl", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODg5NDkx", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-453889491", "createdAt": "2020-07-23T07:25:52Z", "commit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1MlrOG1_CZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyNTo1MlrOG1_CZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDUxOQ==", "bodyText": "hasattr never returns None", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459260519", "createdAt": "2020-07-23T07:25:52Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/version.py", "diffHunk": "@@ -56,14 +58,17 @@ def get_version(node=None):\n     Return the version attached to the given node.\n     Default to DEV_BRANCH if node or node.version is undefined (aka None)\n     \"\"\"\n-    if node is not None and hasattr(node, \"version\") and node.version is not None:\n-        return node.version\n-    else:\n-        return DEV_BRANCH\n+    if isinstance(node, ClusterNode) and hasattr(node, 'version') is not None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTE5NjEy", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-453919612", "createdAt": "2020-07-23T08:16:00Z", "commit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjowMFrOG2AgZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjowMFrOG2AgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NDU4MA==", "bodyText": "I believe that there is no need to  add .gitignore here at all.\nAnd I strongly advice you to use virtualenvwrapper in order do maintain different venv's.\nIt is recommended way in python community to use venv's in developer's environment.\nIf you used it it would not be necessary add something to .gitignore.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459284580", "createdAt": "2020-07-23T08:16:00Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/.gitignore", "diffHunk": "@@ -0,0 +1,2 @@\n+tests/venv/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTE5OTEz", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-453919913", "createdAt": "2020-07-23T08:16:25Z", "commit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjoyNlrOG2AhTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNjoyNlrOG2AhTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NDgxNA==", "bodyText": "s/bases on/is based on/", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459284814", "createdAt": "2020-07-23T08:16:26Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+## Overview\n+The `ignitetest` framework provides basic functionality and services\n+to write integration tests for Apache Ignite. This framework bases on ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTIxODM4", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-453921838", "createdAt": "2020-07-23T08:19:24Z", "commit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxOToyNFrOG2AnJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyMToxOFrOG2ArDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NjMxMQ==", "bodyText": "s/an docker image/a docker image/\nAnd is it correct that ducktape uses image? It uses a bunch of running containers, based on this image.\nI think, that \"Build a docker image for running tests.\" is a little bit better.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459286311", "createdAt": "2020-07-23T08:19:24Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/docker/ducker-ignite", "diffHunk": "@@ -60,11 +60,18 @@ Usage: ${script_path} [command] [options]\n help|-h|--help\n     Display this help message\n \n-up [-n|--num-nodes NUM_NODES] [-f|--force] [docker-image]\n-        [-C|--custom-ducktape DIR] [-e|--expose-ports ports]\n+build [-j|--jdk JDK] [image-name]\n+    Build an docker image that ducktape uses to up cluster. Image is tagged with specified ${image_name}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NzMwOA==", "bodyText": "I think that \"for ducktest's docker image\" is better.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459287308", "createdAt": "2020-07-23T08:21:18Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/docker/ducker-ignite", "diffHunk": "@@ -75,6 +82,9 @@ up [-n|--num-nodes NUM_NODES] [-f|--force] [docker-image]\n     or a combination of port/port-range separated by comma (like 2181,9092 or 2181,5005-5008).\n     By default no port is exposed. See README.md for more detail on this option.\n \n+    If --jdk is specified then we will use this argument as base image for ducker docker images.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f11d0bbb6e34b6cd625c846f7b22d4d2d1bd789"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0788086a33510159928bfec36d220417eed65e5", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/d0788086a33510159928bfec36d220417eed65e5", "committedDate": "2020-07-23T09:16:54Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}, "afterCommit": {"oid": "9070540ad8548e993d753c7a0d14091a9e9f47a2", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/9070540ad8548e993d753c7a0d14091a9e9f47a2", "committedDate": "2020-07-23T12:17:57Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTQ4MDQz", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-454148043", "createdAt": "2020-07-23T13:48:38Z", "commit": {"oid": "9070540ad8548e993d753c7a0d14091a9e9f47a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0ODozOFrOG2LXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0ODozOFrOG2LXHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MjQyOQ==", "bodyText": "relocated.", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459462429", "createdAt": "2020-07-23T13:48:38Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+## Overview\n+The `ignitetest` framework provides basic functionality and services\n+to write integration tests for Apache Ignite. This framework bases on \n+the `ducktape` test framework, for information about it check the links:\n+- https://github.com/confluentinc/ducktape - source code of the `ducktape`;\n+- http://ducktape-docs.readthedocs.io - documentation to the `ducktape`.\n+\n+Structure of the `ignitetest` directory is:\n+- `./ignitetest/services` contains basic services functionality;\n+- `./ignitetest/version.py` contains utils for versioning;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9070540ad8548e993d753c7a0d14091a9e9f47a2"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9448d90804c906aa241e5a258ce61955827747d3", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/9448d90804c906aa241e5a258ce61955827747d3", "committedDate": "2020-07-23T14:01:52Z", "message": "Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fcb5779e0983e093271444b8b3ad41e9b160658", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/2fcb5779e0983e093271444b8b3ad41e9b160658", "committedDate": "2020-07-23T14:01:54Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dc8d757f254187802f3d83e0bc37df3f050fadb", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/0dc8d757f254187802f3d83e0bc37df3f050fadb", "committedDate": "2020-07-23T14:01:54Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f33e1ed2a9051f9c441468923c512e0368ee969c", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/f33e1ed2a9051f9c441468923c512e0368ee969c", "committedDate": "2020-07-23T14:43:43Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9070540ad8548e993d753c7a0d14091a9e9f47a2", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/9070540ad8548e993d753c7a0d14091a9e9f47a2", "committedDate": "2020-07-23T12:17:57Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}, "afterCommit": {"oid": "830c07c56de5d574bf5b4d87070a88478ea56269", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/830c07c56de5d574bf5b4d87070a88478ea56269", "committedDate": "2020-07-23T14:43:50Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/b03c2bcb5fc2694b918e1559deb4bd5c4344f04f", "committedDate": "2020-07-23T14:46:00Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "830c07c56de5d574bf5b4d87070a88478ea56269", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/830c07c56de5d574bf5b4d87070a88478ea56269", "committedDate": "2020-07-23T14:43:50Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}, "afterCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/b03c2bcb5fc2694b918e1559deb4bd5c4344f04f", "committedDate": "2020-07-23T14:46:00Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTc4Njcw", "url": "https://github.com/apache/ignite/pull/8071#pullrequestreview-454178670", "createdAt": "2020-07-23T14:18:11Z", "commit": {"oid": "9070540ad8548e993d753c7a0d14091a9e9f47a2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo1ODoyNFrOG2oEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0ODozNlrOG2uEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjczMg==", "bodyText": "Can we resolve this inside IgnitePath?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459932732", "createdAt": "2020-07-24T08:58:24Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3OTMxOA==", "bodyText": "Let's just pass _DUCKTAPE_OPTIONS (btw, what's the reason to start a variable name with _?)", "url": "https://github.com/apache/ignite/pull/8071#discussion_r459979318", "createdAt": "2020-07-24T10:43:02Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/docker/run_tests.sh", "diffHunk": "@@ -16,15 +16,29 @@\n # limitations under the License.\n \n SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+\n+# Num of containers that ducktape will prepare for tests\n IGNITE_NUM_CONTAINERS=${IGNITE_NUM_CONTAINERS:-11}\n+# Path for tests to start\n TC_PATHS=${TC_PATHS:-./ignitetest/}\n+# Docker image name that ducktape will use to prepare containers\n+IMAGE_NAME=${IMAGE_NAME}\n \n die() {\n     echo $@\n     exit 1\n }\n \n if ${SCRIPT_DIR}/ducker-ignite ssh | grep -q '(none)'; then\n-    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" || die \"ducker-ignite up failed\"\n+    # If image name is specified that skip build and just pull it\n+    if [ \"$IMAGE_NAME\" != \"\" ]; then\n+      IMAGE_NAME=\" --skip-build-image $IMAGE_NAME\"\n+    fi\n+    ${SCRIPT_DIR}/ducker-ignite up -n \"${IGNITE_NUM_CONTAINERS}\" ${IMAGE_NAME} || die \"ducker-ignite up failed\"\n+fi\n+\n+if [ \"$VERSION\" != \"\" ]; then\n+  export _DUCKTAPE_OPTIONS=\"$_DUCKTAPE_OPTIONS --parameters '{\\\"version\\\":\\\"${VERSION}\\\"}'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTQ4NA==", "bodyText": "Seems, you may just always read from context.globals['jvm_opts']?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460029484", "createdAt": "2020-07-24T12:45:12Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -44,11 +44,20 @@ class IgniteAwareService(BackgroundThreadService):\n     def __init__(self, context, num_nodes, version, properties):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n+        if 'project' in context.globals:\n+            self.path = IgnitePath(context.globals['project'])\n+        else:\n+            self.path = IgnitePath()\n+\n+        if 'jvm_opts' in context.globals:\n+            self.jvm_options = context.globals['jvm_opts']\n+        else:\n+            self.jvm_options = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTk4NQ==", "bodyText": "IgniteConfig?", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460029985", "createdAt": "2020-07-24T12:46:12Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_config.py", "diffHunk": "@@ -17,71 +17,49 @@\n This module renders Ignite config and all related artifacts\n \"\"\"\n \n+from jinja2 import FileSystemLoader, Environment\n+\n+import os\n+\n+DEFAULT_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/config\"\n+DEFAULT_IGNITE_CONF = DEFAULT_CONFIG_PATH + \"/ignite.xml.j2\"\n+\n+\n+class Config(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMTE2OQ==", "bodyText": "Let's keep shift to the left", "url": "https://github.com/apache/ignite/pull/8071#discussion_r460031169", "createdAt": "2020-07-24T12:48:36Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/spark_integration_test.py", "diffHunk": "@@ -28,38 +31,37 @@ class SparkIntegrationTest(IgniteTest):\n     3. Checks results of client application.\n     \"\"\"\n \n-    @staticmethod\n-    def properties(client_mode=\"false\"):\n-        return \"\"\"\n-            <property name=\"clientMode\" value=\"{client_mode}\"/>\n-        \"\"\".format(client_mode=client_mode)\n-\n     def __init__(self, test_context):\n         super(SparkIntegrationTest, self).__init__(test_context=test_context)\n-        self.spark = SparkService(test_context, num_nodes=2)\n-        self.ignite = IgniteService(test_context, num_nodes=1)\n+        self.spark = None\n+        self.ignite = None\n \n     def setUp(self):\n-        self.spark.start()\n-        self.ignite.start()\n+        pass\n \n     def teardown(self):\n         self.spark.stop()\n         self.ignite.stop()\n \n-    def test_spark_client(self):\n+    @parametrize(version=str(DEV_BRANCH))\n+    def test_spark_client(self, version):\n+        self.spark = SparkService(self.test_context, version=version, num_nodes=2)\n+        self.spark.start()\n+\n+        self.ignite = IgniteService(self.test_context, version=version, num_nodes=1)\n+        self.ignite.start()\n+\n         self.stage(\"Starting sample data generator\")\n \n-        IgniteApplicationService(\n-            self.test_context,\n-            java_class_name=\"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SampleDataStreamerApplication\",\n-            params=\"cache,1000\",\n-            properties=self.properties(client_mode=\"true\")).run()\n+        IgniteApplicationService(self.test_context,\n+                                 java_class_name=\"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SampleDataStreamerApplication\",\n+                                 params=\"cache,1000\",\n+                                 version=version).run()\n \n         self.stage(\"Starting Spark application\")\n \n-        SparkIgniteApplicationService(\n-            self.test_context,\n-            \"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SparkApplication\",\n-            params=\"spark://\" + self.spark.nodes[0].account.hostname + \":7077\",\n-            timeout_sec=120).run()\n+        SparkIgniteApplicationService(self.test_context,\n+                                      \"org.apache.ignite.internal.ducktest.tests.spark_integration_test.SparkApplication\",\n+                                      params=\"spark://\" + self.spark.nodes[0].account.hostname + \":7077\",\n+                                      version=version,\n+                                      timeout_sec=120).run()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03c2bcb5fc2694b918e1559deb4bd5c4344f04f"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4141033116167c2744080ab868c1e4bfa9e33e1a", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/4141033116167c2744080ab868c1e4bfa9e33e1a", "committedDate": "2020-07-25T10:34:26Z", "message": "WIP"}, "afterCommit": {"oid": "9fe3e5d8ac6c35f931ceb2fba375aa186a289e6a", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/9fe3e5d8ac6c35f931ceb2fba375aa186a289e6a", "committedDate": "2020-07-26T13:42:45Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54a5f5d3123993a681277721ea238c9510d14b3", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/e54a5f5d3123993a681277721ea238c9510d14b3", "committedDate": "2020-07-26T13:57:19Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fe3e5d8ac6c35f931ceb2fba375aa186a289e6a", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/9fe3e5d8ac6c35f931ceb2fba375aa186a289e6a", "committedDate": "2020-07-26T13:42:45Z", "message": "WIP"}, "afterCommit": {"oid": "e54a5f5d3123993a681277721ea238c9510d14b3", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/e54a5f5d3123993a681277721ea238c9510d14b3", "committedDate": "2020-07-26T13:57:19Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1e301f889c25a2fa9a29fb0a9b588c4ca659cdc", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/e1e301f889c25a2fa9a29fb0a9b588c4ca659cdc", "committedDate": "2020-07-28T08:18:41Z", "message": "fixup! Provide ability to use external config, project name, jvm opts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b41a43a7152b351e78eccc0a37ebe80c630dfd82", "author": {"user": {"login": "timoninmaxim", "name": "Maksim Timonin"}}, "url": "https://github.com/apache/ignite/commit/b41a43a7152b351e78eccc0a37ebe80c630dfd82", "committedDate": "2020-07-28T14:30:41Z", "message": "Provide ability to use external config, project name, jvm opts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3183, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}