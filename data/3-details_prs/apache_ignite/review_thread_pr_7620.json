{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDkzOTY2", "number": 7620, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxMjoyMlrODugcPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1Mjo0N1rODv61vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDkyNjA3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxMjoyMlrOGAiB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxMjoyMlrOGAiB1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMDcwOA==", "bodyText": "Is err == null not enough?", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403210708", "createdAt": "2020-04-03T18:12:22Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java", "diffHunk": "@@ -1472,14 +1472,16 @@ private void processStartRequest(ClusterNode node, StartRoutineDiscoveryMessage\n         }\n \n         // Load partition counters.\n-        if (hnd.isQuery()) {\n+        if (err == null && hnd.isQuery()) {\n             GridCacheProcessor proc = ctx.cache();\n \n             if (proc != null) {\n                 GridCacheAdapter cache = ctx.cache().internalCache(hnd.cacheName());\n \n-                if (cache != null && !cache.isLocal() && cache.context().userCache())\n-                    req.addUpdateCounters(ctx.localNodeId(), hnd.updateCounters());\n+                Map<Integer, T2<Long, Long>> cntrs = hnd.updateCounters();\n+\n+                if (cache != null && cntrs != null && !cache.isLocal() && cache.context().userCache())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d9ff7c2b98e7723b962fa1e5036d311bb9dc2b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDk0MjUwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxNDo0NlrOGAiKYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxNDo0NlrOGAiKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMjg5OQ==", "bodyText": "typo: behavior", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403212899", "createdAt": "2020-04-03T18:14:46Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterState;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behaviour of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class ContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_CLS = \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setPeerClassLoadingEnabled(true);\n+        cfg.setNetworkTimeout(1000);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behaviour in case of filter deployment obtaining failure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d9ff7c2b98e7723b962fa1e5036d311bb9dc2b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDk0NTQzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxNToxNFrOGAiMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxNToxNFrOGAiMAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMzMxNA==", "bodyText": "Missed @throws", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403213314", "createdAt": "2020-04-03T18:15:14Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterState;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behaviour of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class ContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_CLS = \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setPeerClassLoadingEnabled(true);\n+        cfg.setNetworkTimeout(1000);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behaviour in case of filter deployment obtaining failure.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d9ff7c2b98e7723b962fa1e5036d311bb9dc2b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDk5MzUwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyMzoxMVrOGAimDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyMzoxMVrOGAimDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxOTk4Mg==", "bodyText": "? extends  is unnecessary", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403219982", "createdAt": "2020-04-03T18:23:11Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterState;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behaviour of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class ContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_CLS = \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setPeerClassLoadingEnabled(true);\n+        cfg.setNetworkTimeout(1000);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behaviour in case of filter deployment obtaining failure.\n+     */\n+    @Test\n+    @SuppressWarnings({\"ThrowableNotThrown\"})\n+    public void testContinuousQueryFilterDeploymentFailed() throws Exception {\n+        startGrids(2).cluster().state(ClusterState.ACTIVE);\n+\n+        grid(0).createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        ContinuousQuery<Integer, Integer> qry = new ContinuousQuery<>();\n+\n+        Class<Factory<? extends CacheEntryEventFilter<Integer, Integer>>> filterFactoryCls =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d9ff7c2b98e7723b962fa1e5036d311bb9dc2b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDk5OTY4OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyNDoxNlrOGAipjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyNDoxNlrOGAipjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMDg3Nw==", "bodyText": "Whitespace after the cast is unnecessary.", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403220877", "createdAt": "2020-04-03T18:24:16Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/ContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterState;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behaviour of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class ContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_CLS = \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setPeerClassLoadingEnabled(true);\n+        cfg.setNetworkTimeout(1000);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behaviour in case of filter deployment obtaining failure.\n+     */\n+    @Test\n+    @SuppressWarnings({\"ThrowableNotThrown\"})\n+    public void testContinuousQueryFilterDeploymentFailed() throws Exception {\n+        startGrids(2).cluster().state(ClusterState.ACTIVE);\n+\n+        grid(0).createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        ContinuousQuery<Integer, Integer> qry = new ContinuousQuery<>();\n+\n+        Class<Factory<? extends CacheEntryEventFilter<Integer, Integer>>> filterFactoryCls =\n+            (Class<Factory<? extends CacheEntryEventFilter<Integer, Integer>>>) getExternalClassLoader()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d9ff7c2b98e7723b962fa1e5036d311bb9dc2b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTEyNjk1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryFilterDeploymentFailedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxOTowMjozNFrOGBCiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODowMDo1N1rOGBMABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0MzMyOQ==", "bodyText": "Let's use a shortened form rmt", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403743329", "createdAt": "2020-04-05T19:02:34Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterState;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behavior of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class CacheContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_FACTORY_CLS =\n+        \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setNetworkTimeout(1000);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behavior in case of filter deployment obtaining failure.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings({\"ThrowableNotThrown\"})\n+    public void testContinuousQueryFilterDeploymentFailed() throws Exception {\n+        startGrids(2).cluster().state(ClusterState.ACTIVE);\n+\n+        grid(0).createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        ContinuousQuery<Integer, Integer> qry = new ContinuousQuery<>();\n+\n+        Class<Factory<CacheEntryEventFilter<Integer, Integer>>> remoteFilterFactoryCls =\n+            (Class<Factory<CacheEntryEventFilter<Integer, Integer>>>)getExternalClassLoader()\n+                .loadClass(EXT_FILTER_FACTORY_CLS);\n+\n+        Factory<CacheEntryEventFilter<Integer, Integer>> remoteFilterFactory = remoteFilterFactoryCls.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e7822176fe45de6045fee18f48c85435747b42"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5ODM3Mg==", "bodyText": "Thanks. Done.", "url": "https://github.com/apache/ignite/pull/7620#discussion_r403898372", "createdAt": "2020-04-06T08:00:57Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterState;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behavior of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class CacheContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_FACTORY_CLS =\n+        \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setNetworkTimeout(1000);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behavior in case of filter deployment obtaining failure.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings({\"ThrowableNotThrown\"})\n+    public void testContinuousQueryFilterDeploymentFailed() throws Exception {\n+        startGrids(2).cluster().state(ClusterState.ACTIVE);\n+\n+        grid(0).createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        ContinuousQuery<Integer, Integer> qry = new ContinuousQuery<>();\n+\n+        Class<Factory<CacheEntryEventFilter<Integer, Integer>>> remoteFilterFactoryCls =\n+            (Class<Factory<CacheEntryEventFilter<Integer, Integer>>>)getExternalClassLoader()\n+                .loadClass(EXT_FILTER_FACTORY_CLS);\n+\n+        Factory<CacheEntryEventFilter<Integer, Integer>> remoteFilterFactory = remoteFilterFactoryCls.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0MzMyOQ=="}, "originalCommit": {"oid": "53e7822176fe45de6045fee18f48c85435747b42"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTczNjkyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryFilterDeploymentFailedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1Mjo0N1rOGCnwYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDoxNzozM1rOGCopPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMTY5OQ==", "bodyText": "Unnecessary line break", "url": "https://github.com/apache/ignite/pull/7620#discussion_r405401699", "createdAt": "2020-04-08T09:52:47Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.internal.managers.discovery.DiscoveryCustomMessage;\n+import org.apache.ignite.internal.processors.continuous.StopRoutineDiscoveryMessage;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteFuture;\n+import org.apache.ignite.spi.discovery.DiscoverySpi;\n+import org.apache.ignite.spi.discovery.DiscoverySpiCustomMessage;\n+import org.apache.ignite.spi.discovery.DiscoverySpiListener;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.systemview.view.ContinuousQueryView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.cluster.ClusterState.ACTIVE;\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behavior of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class CacheContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_FACTORY_CLS =\n+        \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** Counter of nodes that finished processing of {@link StopRoutineDiscoveryMessage}. */\n+    private final AtomicInteger stopRoutineMsgCntr = new AtomicInteger();\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        DiscoverySpi spi = new TcpDiscoverySpi() {\n+            @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+                super.setListener(lsnr == null ? null : new TestDiscoverySpiListener(lsnr, stopRoutineMsgCntr));\n+            }\n+        };\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setNetworkTimeout(1000);\n+        cfg.setDiscoverySpi(spi);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behavior in case of filter deployment obtaining failure.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings({\"ThrowableNotThrown\"})\n+    public void testContinuousQueryFilterDeploymentFailed() throws Exception {\n+        IgniteEx ignite = startGrids(2);\n+\n+        IgniteEx client = startClientGrid(2);\n+\n+        ignite.cluster().state(ACTIVE);\n+\n+        ignite.createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        ContinuousQuery<Integer, Integer> qry = new ContinuousQuery<>();\n+\n+        Class<Factory<CacheEntryEventFilter<Integer, Integer>>> rmtFilterFactoryCls =\n+            (Class<Factory<CacheEntryEventFilter<Integer, Integer>>>)getExternalClassLoader()\n+                .loadClass(EXT_FILTER_FACTORY_CLS);\n+\n+        Factory<CacheEntryEventFilter<Integer, Integer>> rmtFilterFactory = rmtFilterFactoryCls.newInstance();\n+\n+        qry.setRemoteFilterFactory(rmtFilterFactory);\n+\n+        spi(grid(1)).blockMessages((node, msg) -> msg instanceof GridDeploymentRequest);\n+\n+        assertThrowsAnyCause(\n+            log,\n+            () -> client.cache(DEFAULT_CACHE_NAME).query(qry),\n+            CacheException.class,\n+            \"Failed to start continuous query.\"\n+        );\n+\n+        checkContinuousQueryAborted();\n+    }\n+\n+    /**\n+     * Awaits handling of stop routine message on all cluster nodes and checks that CQ registraition was fully aborted.\n+     */\n+    private void checkContinuousQueryAborted() throws Exception {\n+        List<Ignite> grids = G.allGrids();\n+\n+        GridTestUtils.waitForCondition(() -> stopRoutineMsgCntr.get() == grids.size(), getTestTimeout());\n+\n+        assertTrue(grids.stream().allMatch(ignite -> {\n+            SystemView<ContinuousQueryView> locQrys = ((IgniteEx)ignite).context().systemView().view(CQ_SYS_VIEW);\n+\n+            return locQrys.size() == 0;\n+        }));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6861d6fd81da408083fbfc3f527f180dd37fed7"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQxNjI1NQ==", "bodyText": "Thanks. Done.", "url": "https://github.com/apache/ignite/pull/7620#discussion_r405416255", "createdAt": "2020-04-08T10:17:33Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryFilterDeploymentFailedTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.cache.CacheException;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.managers.deployment.GridDeploymentRequest;\n+import org.apache.ignite.internal.managers.discovery.DiscoveryCustomMessage;\n+import org.apache.ignite.internal.processors.continuous.StopRoutineDiscoveryMessage;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteFuture;\n+import org.apache.ignite.spi.discovery.DiscoverySpi;\n+import org.apache.ignite.spi.discovery.DiscoverySpiCustomMessage;\n+import org.apache.ignite.spi.discovery.DiscoverySpiListener;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.systemview.view.ContinuousQueryView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.cluster.ClusterState.ACTIVE;\n+import static org.apache.ignite.internal.TestRecordingCommunicationSpi.spi;\n+import static org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.CQ_SYS_VIEW;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsAnyCause;\n+\n+/**\n+ * Tests the behavior of continuous query registration in case the remote node failed to obtain the filter deployment.\n+ */\n+public class CacheContinuousQueryFilterDeploymentFailedTest extends GridCommonAbstractTest {\n+    /** The name of the CQ filter factory class. Its obtaining on a non-local node requires P2P class loading. */\n+    private static final String EXT_FILTER_FACTORY_CLS =\n+        \"org.apache.ignite.tests.p2p.CacheDeploymentEntryEventFilterFactory\";\n+\n+    /** Counter of nodes that finished processing of {@link StopRoutineDiscoveryMessage}. */\n+    private final AtomicInteger stopRoutineMsgCntr = new AtomicInteger();\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        DiscoverySpi spi = new TcpDiscoverySpi() {\n+            @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+                super.setListener(lsnr == null ? null : new TestDiscoverySpiListener(lsnr, stopRoutineMsgCntr));\n+            }\n+        };\n+\n+        cfg.setCommunicationSpi(new TestRecordingCommunicationSpi());\n+        cfg.setNetworkTimeout(1000);\n+        cfg.setDiscoverySpi(spi);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests continuous query behavior in case of filter deployment obtaining failure.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings({\"ThrowableNotThrown\"})\n+    public void testContinuousQueryFilterDeploymentFailed() throws Exception {\n+        IgniteEx ignite = startGrids(2);\n+\n+        IgniteEx client = startClientGrid(2);\n+\n+        ignite.cluster().state(ACTIVE);\n+\n+        ignite.createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        ContinuousQuery<Integer, Integer> qry = new ContinuousQuery<>();\n+\n+        Class<Factory<CacheEntryEventFilter<Integer, Integer>>> rmtFilterFactoryCls =\n+            (Class<Factory<CacheEntryEventFilter<Integer, Integer>>>)getExternalClassLoader()\n+                .loadClass(EXT_FILTER_FACTORY_CLS);\n+\n+        Factory<CacheEntryEventFilter<Integer, Integer>> rmtFilterFactory = rmtFilterFactoryCls.newInstance();\n+\n+        qry.setRemoteFilterFactory(rmtFilterFactory);\n+\n+        spi(grid(1)).blockMessages((node, msg) -> msg instanceof GridDeploymentRequest);\n+\n+        assertThrowsAnyCause(\n+            log,\n+            () -> client.cache(DEFAULT_CACHE_NAME).query(qry),\n+            CacheException.class,\n+            \"Failed to start continuous query.\"\n+        );\n+\n+        checkContinuousQueryAborted();\n+    }\n+\n+    /**\n+     * Awaits handling of stop routine message on all cluster nodes and checks that CQ registraition was fully aborted.\n+     */\n+    private void checkContinuousQueryAborted() throws Exception {\n+        List<Ignite> grids = G.allGrids();\n+\n+        GridTestUtils.waitForCondition(() -> stopRoutineMsgCntr.get() == grids.size(), getTestTimeout());\n+\n+        assertTrue(grids.stream().allMatch(ignite -> {\n+            SystemView<ContinuousQueryView> locQrys = ((IgniteEx)ignite).context().systemView().view(CQ_SYS_VIEW);\n+\n+            return locQrys.size() == 0;\n+        }));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMTY5OQ=="}, "originalCommit": {"oid": "e6861d6fd81da408083fbfc3f527f180dd37fed7"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2501, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}