{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MTM1MTYw", "number": 8142, "title": "Fix measuring timers in discovery tests", "bodyText": "Discovery test has inaccurate measuring of node detection failure delay. The node failre event timers should be fixated immediately.", "createdAt": "2020-08-11T14:18:27Z", "url": "https://github.com/apache/ignite/pull/8142", "merged": true, "mergeCommit": {"oid": "2e4b4addab42b02b78b03787a25795255ec5312e"}, "closed": true, "closedAt": "2020-08-12T14:55:40Z", "author": {"login": "Vladsz83"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc79dQrgH2gAyNDY2MTM1MTYwOjI1MzcyYjNhZTE3YmIwN2M4OTQ4MzgzMmU1MTkzYzFmMTQ3MjU0Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-MT6kAFqTQ2NTk3MzY5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "25372b3ae17bb07c89483832e5193c1f14725428", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/25372b3ae17bb07c89483832e5193c1f14725428", "committedDate": "2020-08-05T16:03:47Z", "message": "testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b1d1011bdf8ebdda74b1e1920a534a91dafcbb2", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/7b1d1011bdf8ebdda74b1e1920a534a91dafcbb2", "committedDate": "2020-08-05T16:26:29Z", "message": "Merge branch 'ignite-ducktape' into extended-discotest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac6d6e48e1dc21ac298bfe520d18a3fedbccbd89", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/ac6d6e48e1dc21ac298bfe520d18a3fedbccbd89", "committedDate": "2020-08-05T18:55:00Z", "message": "first impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "326f0e543380a0ba3cdc92ebaaa93c8f2f628ed3", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/326f0e543380a0ba3cdc92ebaaa93c8f2f628ed3", "committedDate": "2020-08-06T11:15:00Z", "message": "fix minorities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8da243baa49dac38bf0b657f75a8a2ac858e768", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/a8da243baa49dac38bf0b657f75a8a2ac858e768", "committedDate": "2020-08-06T12:10:46Z", "message": "foxes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae65fbb86605b6875e52273244d41d66eb50689", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/7ae65fbb86605b6875e52273244d41d66eb50689", "committedDate": "2020-08-06T12:29:24Z", "message": "Naming fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6732619cdff379dc85a7988118d795bba823ae8f", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/6732619cdff379dc85a7988118d795bba823ae8f", "committedDate": "2020-08-06T15:28:58Z", "message": "renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e1c70b73660c98847d466ba2aa1888d20b46bd", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/26e1c70b73660c98847d466ba2aa1888d20b46bd", "committedDate": "2020-08-06T15:56:56Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ac2338d4ccc6999b68a24f439f9b6b9fe2faa9c", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/9ac2338d4ccc6999b68a24f439f9b6b9fe2faa9c", "committedDate": "2020-08-07T09:56:36Z", "message": "fix of ZooKeeper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edde8d164022a32bd830efe0f004e4f881db6f5", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/4edde8d164022a32bd830efe0f004e4f881db6f5", "committedDate": "2020-08-07T17:20:48Z", "message": "timing fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/b0559ef38f7d17753702a22235af9c17dc2738b4", "committedDate": "2020-08-11T14:04:15Z", "message": "looks good"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTQ3Mjk5", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465147299", "createdAt": "2020-08-11T14:52:11Z", "commit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo1MjoxMlrOG-7sew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo1MjoxMlrOG-7sew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MjkzOQ==", "bodyText": "This is mutex or lock, not cond_var.", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468642939", "createdAt": "2020-08-11T14:52:12Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/concurrent.py", "diffHunk": "@@ -0,0 +1,74 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains concurrent utils.\n+\"\"\"\n+\n+import threading\n+\n+\n+class CountDownLatch(object):\n+    \"\"\"\n+    A count-down latch.\n+    \"\"\"\n+    def __init__(self, count=1):\n+        self.count = count\n+        self.cond_var = threading.Condition()\n+\n+    def count_down(self):\n+        \"\"\"\n+        Decreases the latch counter.\n+        \"\"\"\n+        with self.cond_var:\n+            if self.count > 0:\n+                self.count -= 1\n+            if self.count == 0:\n+                self.cond_var.notifyAll()\n+\n+    def wait(self):\n+        \"\"\"\n+        Blocks current thread if the latch is not free.\n+        \"\"\"\n+        with self.cond_var:\n+            while self.count > 0:\n+                self.cond_var.wait()\n+\n+\n+# pylint: disable=C0116\n+class AtomicValue:\n+    \"\"\"\n+    An atomic reference holder.\n+    \"\"\"\n+    def __init__(self, value=None):\n+        self.value = value\n+        self.cond_var = threading.Lock()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTUxOTM5", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465151939", "createdAt": "2020-08-11T14:56:54Z", "commit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo1Njo1NVrOG-752Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTowMjozOFrOG-8LJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NjM2MQ==", "bodyText": "May be try to pass a regexp to grep?", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468646361", "createdAt": "2020-08-11T14:56:55Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -117,46 +163,81 @@ def __basic_test__(self, version, with_zk=False):\n \n         start = self.monotonic()\n         self.servers.start()\n-        data = {'Ignite cluster start time (s)': self.monotonic() - start}\n+        data = {'Ignite cluster start time (s)': round(self.monotonic() - start, 1)}\n         self.stage(\"Topology is ready\")\n \n-        # Node failure detection\n-        fail_node, survived_node = self.choose_random_node_to_kill(self.servers)\n+        if nodes_to_kill > self.servers.num_nodes - 1 or coordinator and nodes_to_kill > 1:\n+            raise Exception(\"Too many nodes to kill: \" + str(nodes_to_kill))\n+\n+        if coordinator:\n+            node_chooser = lambda nodes: \\\n+                next(node for node in nodes if node.discovery_info().node_id == nodes[0].discovery_info().coordinator)\n+        else:\n+            node_chooser = lambda nodes: \\\n+                random.sample([n for n in self.servers.nodes if n.discovery_info().node_id !=\n+                               self.servers.nodes[0].discovery_info().coordinator], nodes_to_kill)\n \n-        data[\"nodes\"] = [node.node_id() for node in self.servers.nodes]\n+        failed_nodes, survived_node = self.choose_node_to_kill(self.servers.nodes, node_chooser)\n \n-        disco_infos = []\n-        for node in self.servers.nodes:\n-            disco_info = node.discovery_info()\n-            disco_infos.append({\n-                \"id\": disco_info.node_id,\n-                \"consistent_id\": disco_info.consistent_id,\n-                \"coordinator\": disco_info.coordinator,\n-                \"order\": disco_info.order,\n-                \"int_order\": disco_info.int_order,\n-                \"is_client\": disco_info.is_client\n-            })\n+        ids_to_wait = [node.discovery_info().node_id for node in failed_nodes]\n \n-        data[\"node_disco_info\"] = disco_infos\n+        self.stage(\"Stopping \" + str(len(failed_nodes)) + \" nodes.\")\n \n-        self.servers.stop_node(fail_node, clean_shutdown=False)\n+        first_terminated = self.servers.stop_nodes_async(failed_nodes, clean_shutdown=False, wait_for_stop=False)\n \n-        start = self.monotonic()\n-        self.servers.await_event_on_node(\"Node FAILED\", random.choice(survived_node), 60, True)\n+        self.stage(\"Waiting for failure detection of \" + str(len(failed_nodes)) + \" nodes.\")\n+\n+        # Keeps dates of logged node failures.\n+        last_failure_detected = 0\n+        logged_timestamps = []\n+\n+        for failed_id in ids_to_wait:\n+            pattern = \"Node FAILED: \" + (\"ZookeeperClusterNode\" if with_zk else \"TcpDiscoveryNode\") + \" \\\\[id=\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NzEwNQ==", "bodyText": "I suppose, that we can rewrite a little bit test, it's really overcomplicated a little bit.\nMay be it is not a good idea to turn off linter warnings here?", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468647105", "createdAt": "2020-08-11T14:57:49Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -81,28 +90,65 @@ def teardown(self):\n     @cluster(num_nodes=NUM_NODES)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_tcp(self, version):\n+    def test_tcp_not_coordinator_single(self, version):\n+        \"\"\"\n+        Test single-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_not_coordinator_two(self, version):\n+        \"\"\"\n+        Test two-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, True)\n+\n+    @cluster(num_nodes=NUM_NODES + 3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_not_coordinator_single(self, version):\n         \"\"\"\n-        Test basic discovery scenario with TcpDiscoverySpi.\n+        Test single node failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, False)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1, coordinator=False, with_zk=True)\n \n     @cluster(num_nodes=NUM_NODES + 3)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_zk(self, version):\n+    def test_zk_not_coordinator_two(self, version):\n         \"\"\"\n-        Test basic discovery scenario with ZookeeperDiscoverySpi.\n+        Test two-node-failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, True)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2, coordinator=False, with_zk=True)\n \n-    def __basic_test__(self, version, with_zk=False):\n+    @cluster(num_nodes=NUM_NODES+3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with ZooKeeper.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, coordinator=True, with_zk=True)\n+\n+    # pylint: disable=R0913,R0914", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0Nzg0OQ==", "bodyText": "We can move this part to additional function and call it in each zk steps.", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468647849", "createdAt": "2020-08-11T14:58:53Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -81,28 +90,65 @@ def teardown(self):\n     @cluster(num_nodes=NUM_NODES)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_tcp(self, version):\n+    def test_tcp_not_coordinator_single(self, version):\n+        \"\"\"\n+        Test single-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_not_coordinator_two(self, version):\n+        \"\"\"\n+        Test two-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, True)\n+\n+    @cluster(num_nodes=NUM_NODES + 3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_not_coordinator_single(self, version):\n         \"\"\"\n-        Test basic discovery scenario with TcpDiscoverySpi.\n+        Test single node failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, False)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1, coordinator=False, with_zk=True)\n \n     @cluster(num_nodes=NUM_NODES + 3)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_zk(self, version):\n+    def test_zk_not_coordinator_two(self, version):\n         \"\"\"\n-        Test basic discovery scenario with ZookeeperDiscoverySpi.\n+        Test two-node-failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, True)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2, coordinator=False, with_zk=True)\n \n-    def __basic_test__(self, version, with_zk=False):\n+    @cluster(num_nodes=NUM_NODES+3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with ZooKeeper.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, coordinator=True, with_zk=True)\n+\n+    # pylint: disable=R0913,R0914\n+    def __simulate_nodes_failure(self, version, coordinator=False, with_zk=False, nodes_to_kill=1):\n         if with_zk:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MDc4OA==", "bodyText": "Same as above. Seems that it is a good candidate to separate function, isn't it?", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468650788", "createdAt": "2020-08-11T15:02:38Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -117,46 +163,81 @@ def __basic_test__(self, version, with_zk=False):\n \n         start = self.monotonic()\n         self.servers.start()\n-        data = {'Ignite cluster start time (s)': self.monotonic() - start}\n+        data = {'Ignite cluster start time (s)': round(self.monotonic() - start, 1)}\n         self.stage(\"Topology is ready\")\n \n-        # Node failure detection\n-        fail_node, survived_node = self.choose_random_node_to_kill(self.servers)\n+        if nodes_to_kill > self.servers.num_nodes - 1 or coordinator and nodes_to_kill > 1:\n+            raise Exception(\"Too many nodes to kill: \" + str(nodes_to_kill))\n+\n+        if coordinator:\n+            node_chooser = lambda nodes: \\\n+                next(node for node in nodes if node.discovery_info().node_id == nodes[0].discovery_info().coordinator)\n+        else:\n+            node_chooser = lambda nodes: \\\n+                random.sample([n for n in self.servers.nodes if n.discovery_info().node_id !=\n+                               self.servers.nodes[0].discovery_info().coordinator], nodes_to_kill)\n \n-        data[\"nodes\"] = [node.node_id() for node in self.servers.nodes]\n+        failed_nodes, survived_node = self.choose_node_to_kill(self.servers.nodes, node_chooser)\n \n-        disco_infos = []\n-        for node in self.servers.nodes:\n-            disco_info = node.discovery_info()\n-            disco_infos.append({\n-                \"id\": disco_info.node_id,\n-                \"consistent_id\": disco_info.consistent_id,\n-                \"coordinator\": disco_info.coordinator,\n-                \"order\": disco_info.order,\n-                \"int_order\": disco_info.int_order,\n-                \"is_client\": disco_info.is_client\n-            })\n+        ids_to_wait = [node.discovery_info().node_id for node in failed_nodes]\n \n-        data[\"node_disco_info\"] = disco_infos\n+        self.stage(\"Stopping \" + str(len(failed_nodes)) + \" nodes.\")\n \n-        self.servers.stop_node(fail_node, clean_shutdown=False)\n+        first_terminated = self.servers.stop_nodes_async(failed_nodes, clean_shutdown=False, wait_for_stop=False)\n \n-        start = self.monotonic()\n-        self.servers.await_event_on_node(\"Node FAILED\", random.choice(survived_node), 60, True)\n+        self.stage(\"Waiting for failure detection of \" + str(len(failed_nodes)) + \" nodes.\")\n+\n+        # Keeps dates of logged node failures.\n+        last_failure_detected = 0\n+        logged_timestamps = []\n+\n+        for failed_id in ids_to_wait:\n+            pattern = \"Node FAILED: \" + (\"ZookeeperClusterNode\" if with_zk else \"TcpDiscoveryNode\") + \" \\\\[id=\" \\\n+                      + failed_id\n+\n+            self.servers.await_event_on_node(pattern, survived_node, 10, from_the_beginning=True, backoff_sec=0.01)\n \n-        data['Failure of node detected in time (s)'] = self.monotonic() - start\n+            last_failure_detected = self.monotonic()\n+\n+            self.stage(\"Failure detection measured.\")\n+\n+        for failed_id in ids_to_wait:\n+            pattern = \"Node FAILED: \" + (\"ZookeeperClusterNode\" if with_zk else \"TcpDiscoveryNode\") + \" \\\\[id=\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b687eced57dd88a02ead9ed9d0515df5eb07f8", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/05b687eced57dd88a02ead9ed9d0515df5eb07f8", "committedDate": "2020-08-11T17:51:34Z", "message": "fixes, optimizations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2a9d5f3a3623d1cbfd913956bc8aaaf5149c976", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/f2a9d5f3a3623d1cbfd913956bc8aaaf5149c976", "committedDate": "2020-08-11T17:52:04Z", "message": "Merge branch 'ignite-ducktape' into ducktape-improve-timings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79970cd92392d3fd0e160a75cf1374a660eb44a6", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/79970cd92392d3fd0e160a75cf1374a660eb44a6", "committedDate": "2020-08-11T17:55:13Z", "message": "fixes, optimizations 2. Merget ignite-ducktape"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzYyNjcz", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465762673", "createdAt": "2020-08-12T09:52:12Z", "commit": {"oid": "79970cd92392d3fd0e160a75cf1374a660eb44a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1MjoxMlrOG_aNnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1MjoxMlrOG_aNnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0Mjk0Mw==", "bodyText": "I suppose it's better to write some docs, isn't it?", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469142943", "createdAt": "2020-08-12T09:52:12Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/utils/concurrent.py", "diffHunk": "@@ -0,0 +1,74 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains concurrent utils.\n+\"\"\"\n+\n+import threading\n+\n+\n+class CountDownLatch(object):\n+    \"\"\"\n+    A count-down latch.\n+    \"\"\"\n+    def __init__(self, count=1):\n+        self.count = count\n+        self.cond_var = threading.Condition()\n+\n+    def count_down(self):\n+        \"\"\"\n+        Decreases the latch counter.\n+        \"\"\"\n+        with self.cond_var:\n+            if self.count > 0:\n+                self.count -= 1\n+            if self.count == 0:\n+                self.cond_var.notifyAll()\n+\n+    def wait(self):\n+        \"\"\"\n+        Blocks current thread if the latch is not free.\n+        \"\"\"\n+        with self.cond_var:\n+            while self.count > 0:\n+                self.cond_var.wait()\n+\n+\n+# pylint: disable=C0116", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79970cd92392d3fd0e160a75cf1374a660eb44a6"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67facb6335517c9f59022712070352977570e2be", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/67facb6335517c9f59022712070352977570e2be", "committedDate": "2020-08-12T10:03:08Z", "message": "+ some docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f637cf33e401b561e16a6aaff129ae952671835", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/8f637cf33e401b561e16a6aaff129ae952671835", "committedDate": "2020-08-12T10:32:51Z", "message": "fix of zk settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f459cdcf2cb62a41529c8c7059be6050888d3da3", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/f459cdcf2cb62a41529c8c7059be6050888d3da3", "committedDate": "2020-08-12T11:02:45Z", "message": "removed debugging stage log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODI1MzI0", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465825324", "createdAt": "2020-08-12T11:32:40Z", "commit": {"oid": "67facb6335517c9f59022712070352977570e2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozMjo0MFrOG_dNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozMjo0MFrOG_dNgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MjA2NA==", "bodyText": "why not gain from IgniteAwareService?", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469192064", "createdAt": "2020-08-12T11:32:40Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -32,41 +37,58 @@\n # pylint: disable=W0223\n class DiscoveryTest(IgniteTest):\n     \"\"\"\n-    Test basic discovery scenarious (TCP and Zookeeper).\n+    Test various node failure scenarios (TCP and ZooKeeper).\n     1. Start of ignite cluster.\n     2. Kill random node.\n     3. Wait that survived node detects node failure.\n     \"\"\"\n     NUM_NODES = 7\n \n+    FAILURE_DETECTION_TIMEOUT = 2000\n+\n+    __LOG_PATH = os.path.join(IgniteAwareService.PERSISTENT_ROOT, \"console.log\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67facb6335517c9f59022712070352977570e2be"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7898e9d1474f6f09ca52f8f58fc00bc9f0f2587c", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/7898e9d1474f6f09ca52f8f58fc00bc9f0f2587c", "committedDate": "2020-08-12T11:47:45Z", "message": "fixed log path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODM5OTg1", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465839985", "createdAt": "2020-08-12T11:57:09Z", "commit": {"oid": "67facb6335517c9f59022712070352977570e2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo1NzoxMFrOG_d6zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo1NzoxMFrOG_d6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMzY2MA==", "bodyText": "can we pass how many nodes to kill via @matrix to reduce methods amount?", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469203660", "createdAt": "2020-08-12T11:57:10Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -81,31 +103,68 @@ def teardown(self):\n     @cluster(num_nodes=NUM_NODES)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_tcp(self, version):\n+    def test_tcp_not_coordinator_single(self, version):\n+        \"\"\"\n+        Test single-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, self.__properties(), 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67facb6335517c9f59022712070352977570e2be"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ecc85137ce7596ab1774f11e4277e5c2a0fc78", "author": {"user": {"login": "Vladsz83", "name": "Vladimir Steshin"}}, "url": "https://github.com/apache/ignite/commit/53ecc85137ce7596ab1774f11e4277e5c2a0fc78", "committedDate": "2020-08-12T12:52:56Z", "message": "removed default stop node delay"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTczNDYy", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465973462", "createdAt": "2020-08-12T14:29:45Z", "commit": {"oid": "53ecc85137ce7596ab1774f11e4277e5c2a0fc78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyOTo0NVrOG_j9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyOTo0NVrOG_j9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMjY4Ng==", "bodyText": "Actually, you can use simple dict here, it is thread-safe (GIL)", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469302686", "createdAt": "2020-08-12T14:29:45Z", "author": {"login": "ivandasch"}, "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -100,6 +107,59 @@ def stop_node(self, node, clean_shutdown=True, timeout_sec=60):\n             self.thread_dump(node)\n             raise\n \n+    def stop_nodes_async(self, nodes, delay_ms=0, clean_shutdown=True, timeout_sec=20, wait_for_stop=False):\n+        \"\"\"\n+        Stops the nodes asynchronously.\n+        \"\"\"\n+        sig = signal.SIGTERM if clean_shutdown else signal.SIGKILL\n+\n+        sem = CountDownLatch(len(nodes))\n+        time_holder = AtomicValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53ecc85137ce7596ab1774f11e4277e5c2a0fc78"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTczNjk4", "url": "https://github.com/apache/ignite/pull/8142#pullrequestreview-465973698", "createdAt": "2020-08-12T14:30:00Z", "commit": {"oid": "53ecc85137ce7596ab1774f11e4277e5c2a0fc78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}