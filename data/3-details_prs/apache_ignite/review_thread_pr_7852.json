{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjYzMjY5", "number": 7852, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowNzo0OFrOEBRBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyOTo1NVrOEBURiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzYyOTYyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzowNzo0OFrOGdAzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1NjozNlrOGdB6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTAzMA==", "bodyText": "newline required before \"for\"\nsee https://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines#CodingGuidelines-SemanticUnits for details", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433075030", "createdAt": "2020-06-01T07:07:48Z", "author": {"login": "anton-vinogradov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "diffHunk": "@@ -1350,6 +1350,9 @@ else if (!crd && grp != null && grp.localStartVersion().equals(fut.initialVersio\n         Collection<DynamicCacheDescriptor> descs\n     ) throws IgniteCheckedException {\n         IgniteInternalFuture<?> res = cachesRegistry.addUnregistered(descs);\n+        for (DynamicCacheDescriptor d: descs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e2f59324bd5686457f0b98e855886188b448961"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MzE3NQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433093175", "createdAt": "2020-06-01T07:56:36Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "diffHunk": "@@ -1350,6 +1350,9 @@ else if (!crd && grp != null && grp.localStartVersion().equals(fut.initialVersio\n         Collection<DynamicCacheDescriptor> descs\n     ) throws IgniteCheckedException {\n         IgniteInternalFuture<?> res = cachesRegistry.addUnregistered(descs);\n+        for (DynamicCacheDescriptor d: descs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTAzMA=="}, "originalCommit": {"oid": "7e2f59324bd5686457f0b98e855886188b448961"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY0MzU3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNDoyMlrOGdA7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1NjoyMVrOGdB55Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzE4MA==", "bodyText": "Do we really need to specify near, backups, and atomicity mode here?", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433077180", "createdAt": "2020-06-01T07:14:22Z", "author": {"login": "anton-vinogradov"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "diffHunk": "@@ -322,6 +325,33 @@ public void testTransactionalSnapshotLimitations() throws Exception {\n         );\n     }\n \n+    /**\n+     * Check that node in client mode (filtered by AttributeNodeFilter) correctly works with MVCC.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMvccEnabledForClientMode() throws Exception {\n+        String attrName = \"has_cache\";\n+        Object attrVal = Boolean.TRUE;\n+\n+        final IgniteEx crd = (IgniteEx) startGrid(getTestIgniteInstanceName(0), getConfiguration());\n+\n+        // Do not start cache on non-affinity node.\n+        CacheConfiguration ccfg = defaultCacheConfiguration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e2f59324bd5686457f0b98e855886188b448961"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MzA5Mw==", "bodyText": "Hi, this test checks MVCC mode so atomicity mode is required. Near set is required as it must be disabled with MVCC mode. Backups dont matter actually. Fixed it", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433093093", "createdAt": "2020-06-01T07:56:21Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "diffHunk": "@@ -322,6 +325,33 @@ public void testTransactionalSnapshotLimitations() throws Exception {\n         );\n     }\n \n+    /**\n+     * Check that node in client mode (filtered by AttributeNodeFilter) correctly works with MVCC.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMvccEnabledForClientMode() throws Exception {\n+        String attrName = \"has_cache\";\n+        Object attrVal = Boolean.TRUE;\n+\n+        final IgniteEx crd = (IgniteEx) startGrid(getTestIgniteInstanceName(0), getConfiguration());\n+\n+        // Do not start cache on non-affinity node.\n+        CacheConfiguration ccfg = defaultCacheConfiguration()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzE4MA=="}, "originalCommit": {"oid": "7e2f59324bd5686457f0b98e855886188b448961"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY0NTY3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNToxNlrOGdA8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1NjoyN1rOGdB6CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzUwMA==", "bodyText": "The better case is to check every node.", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433077500", "createdAt": "2020-06-01T07:15:16Z", "author": {"login": "anton-vinogradov"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "diffHunk": "@@ -322,6 +325,33 @@ public void testTransactionalSnapshotLimitations() throws Exception {\n         );\n     }\n \n+    /**\n+     * Check that node in client mode (filtered by AttributeNodeFilter) correctly works with MVCC.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMvccEnabledForClientMode() throws Exception {\n+        String attrName = \"has_cache\";\n+        Object attrVal = Boolean.TRUE;\n+\n+        final IgniteEx crd = (IgniteEx) startGrid(getTestIgniteInstanceName(0), getConfiguration());\n+\n+        // Do not start cache on non-affinity node.\n+        CacheConfiguration ccfg = defaultCacheConfiguration()\n+                .setNearConfiguration(null)\n+                .setNodeFilter(new AttributeNodeFilter(attrName, attrVal))\n+                .setBackups(0)\n+                .setAtomicityMode(TRANSACTIONAL_SNAPSHOT);\n+\n+        final Ignite node = startGrid(getTestIgniteInstanceName(1), getConfiguration()\n+                .setCacheConfiguration(ccfg)\n+                .setUserAttributes(F.asMap(attrName, attrVal)));\n+\n+        checkTopology(2);\n+\n+        assertTrue(crd.context().coordinators().mvccEnabled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e2f59324bd5686457f0b98e855886188b448961"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MzEyOQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433093129", "createdAt": "2020-06-01T07:56:27Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "diffHunk": "@@ -322,6 +325,33 @@ public void testTransactionalSnapshotLimitations() throws Exception {\n         );\n     }\n \n+    /**\n+     * Check that node in client mode (filtered by AttributeNodeFilter) correctly works with MVCC.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMvccEnabledForClientMode() throws Exception {\n+        String attrName = \"has_cache\";\n+        Object attrVal = Boolean.TRUE;\n+\n+        final IgniteEx crd = (IgniteEx) startGrid(getTestIgniteInstanceName(0), getConfiguration());\n+\n+        // Do not start cache on non-affinity node.\n+        CacheConfiguration ccfg = defaultCacheConfiguration()\n+                .setNearConfiguration(null)\n+                .setNodeFilter(new AttributeNodeFilter(attrName, attrVal))\n+                .setBackups(0)\n+                .setAtomicityMode(TRANSACTIONAL_SNAPSHOT);\n+\n+        final Ignite node = startGrid(getTestIgniteInstanceName(1), getConfiguration()\n+                .setCacheConfiguration(ccfg)\n+                .setUserAttributes(F.asMap(attrName, attrVal)));\n+\n+        checkTopology(2);\n+\n+        assertTrue(crd.context().coordinators().mvccEnabled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzUwMA=="}, "originalCommit": {"oid": "7e2f59324bd5686457f0b98e855886188b448961"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE2MjAzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyOTo1NVrOGdF33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMTo0NDoxOFrOGdHqzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwOA==", "bodyText": "oneliner for should not use braces", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433158108", "createdAt": "2020-06-01T10:29:55Z", "author": {"login": "anton-vinogradov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "diffHunk": "@@ -1351,6 +1351,10 @@ else if (!crd && grp != null && grp.localStartVersion().equals(fut.initialVersio\n     ) throws IgniteCheckedException {\n         IgniteInternalFuture<?> res = cachesRegistry.addUnregistered(descs);\n \n+        for (DynamicCacheDescriptor d: descs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1719bef133b7ce236d9191da9790596fa5bde8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NzUzNA==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433187534", "createdAt": "2020-06-01T11:44:18Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "diffHunk": "@@ -1351,6 +1351,10 @@ else if (!crd && grp != null && grp.localStartVersion().equals(fut.initialVersio\n     ) throws IgniteCheckedException {\n         IgniteInternalFuture<?> res = cachesRegistry.addUnregistered(descs);\n \n+        for (DynamicCacheDescriptor d: descs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwOA=="}, "originalCommit": {"oid": "dd1719bef133b7ce236d9191da9790596fa5bde8"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2457, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}