{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMzQyNDY0", "number": 8591, "title": "IGNITE-13555 Java thin: add IPv6 address support", "bodyText": "changed HostAndPortRange.parse method to support addresses like [IPv6_host]:port1..port2, because previous implementation didn't recognized IPv6;\nimplemented unit tests for HostAndPortRange.parse method for both IPv4 and IPv6 hosts.", "createdAt": "2020-12-18T07:14:10Z", "url": "https://github.com/apache/ignite/pull/8591", "merged": true, "mergeCommit": {"oid": "64dbfcf574cdf0beb635eaa900daaca22d5a5185"}, "closed": true, "closedAt": "2020-12-28T10:55:31Z", "author": {"login": "vkozhukhova"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnFQzxAH2gAyNTQyMzQyNDY0OjJlNWE2ZTgyMTA5MTk2ZjZhZjk2M2YxNDNmYmJkZDBiZWM1MDBlNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdprqe3gH2gAyNTQyMzQyNDY0OjA0OTg1M2RjZjQzOTU4ZjgwN2MzYTZjN2FmMWNjNWI4MTU5NDcwMWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2e5a6e82109196f6af963f143fbbdd0bec500e73", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/2e5a6e82109196f6af963f143fbbdd0bec500e73", "committedDate": "2020-12-17T15:28:10Z", "message": "Implemented IPv6 parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "451b8ffddb25aca64e52efc30d25055bfc5a3f1a", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/451b8ffddb25aca64e52efc30d25055bfc5a3f1a", "committedDate": "2020-12-17T15:50:10Z", "message": "Merge branch 'master' of https://github.com/apache/ignite into IGNITE-13555"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3463a61bba2f1d0267d2186714b1c06917c97e95", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/3463a61bba2f1d0267d2186714b1c06917c97e95", "committedDate": "2020-12-18T06:54:07Z", "message": "Removed brackets from host address"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a480766ea3416d7f50a13b56e89816a378477f5", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/9a480766ea3416d7f50a13b56e89816a378477f5", "committedDate": "2020-12-18T06:54:46Z", "message": "Merge branch 'master' of https://github.com/apache/ignite into IGNITE-13555"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f858d0c8e79e8bb2e199c172c514c9c9c20c0b89", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/f858d0c8e79e8bb2e199c172c514c9c9c20c0b89", "committedDate": "2020-12-18T10:09:51Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "committedDate": "2020-12-18T10:25:18Z", "message": "Added license and javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTU2OTc5", "url": "https://github.com/apache/ignite/pull/8591#pullrequestreview-555556979", "createdAt": "2020-12-18T14:51:02Z", "commit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1MTowMlrOIIl9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTowMzoxN1rOIImsiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw==", "bodyText": "Javadoc is required for all classes.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545881507", "createdAt": "2020-12-18T14:51:02Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MjEwMA==", "bodyText": "Looks like this test is not added to any suite, and thus won't run on CI.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545882100", "createdAt": "2020-12-18T14:51:34Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw=="}, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDk0OQ==", "bodyText": "[ and ] are only needed when there is a port, otherwise IPv6 address does not have those.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545890949", "createdAt": "2020-12-18T15:00:28Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MjA0Mg==", "bodyText": "substring(1 assumes that [ is at index 0, however, the line above addrStr.contains(\"[\") allows [ at any index.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545892042", "createdAt": "2020-12-18T15:01:26Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 host is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MzUxMg==", "bodyText": "Please add a check for the exception message too, not only the class.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545893512", "createdAt": "2020-12-18T15:03:17Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv4 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * ests correct input address with IPv4 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4NoPort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"[::1]:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"[3ffe:2a00:100:7031::]:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"3ffe:2a00:100:7031::\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6NoPort() throws IgniteCheckedException {\n+        String addrStr = \"[::FFFF:129.144.52.38]\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::FFFF:129.144.52.38\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests incorrect input address with IPv6 host (no brackets) and port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test(expected = IgniteCheckedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74b22d98631bc9390906265977a3f361df70a54", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/f74b22d98631bc9390906265977a3f361df70a54", "committedDate": "2020-12-22T15:20:32Z", "message": "Added test group; added ipv6 check; added ipv6 host parse without brackets and ports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e51065f5e1929505520aedf2704a1cbab853b8", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/56e51065f5e1929505520aedf2704a1cbab853b8", "committedDate": "2020-12-22T15:51:50Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/4c5ae6273b4293ab5eb0718b479005f61379dae6", "committedDate": "2020-12-23T08:57:59Z", "message": "Added HostAndPortRangeTest to suite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjI4OTk1", "url": "https://github.com/apache/ignite/pull/8591#pullrequestreview-558228995", "createdAt": "2020-12-23T21:07:09Z", "commit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTowNzowOVrOIK1zZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTozMjo0OVrOIK29lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIzODE4Mg==", "bodyText": "Redundant blank line", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548238182", "createdAt": "2020-12-23T21:07:09Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MTcxMg==", "bodyText": "Code style: else should start on a new line", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548241712", "createdAt": "2020-12-23T21:11:48Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MzEyMA==", "bodyText": "Let's make the error message more helpful, something along the lines of Failed to parse IPv6 address, missing ']'", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548243120", "createdAt": "2020-12-23T21:13:39Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0NDk0Mw==", "bodyText": "Code style: remove curly braces for single-line statement\nhttps://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548244943", "createdAt": "2020-12-23T21:16:11Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0Nzg3Ng==", "bodyText": "Code style: add blank line after closing curly brace", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548247876", "createdAt": "2020-12-23T21:19:56Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0ODEwMQ==", "bodyText": "Code style: add blank line between semantic units", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548248101", "createdAt": "2020-12-23T21:20:14Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0OTgzNw==", "bodyText": "Code style: add space after //", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548249837", "createdAt": "2020-12-23T21:22:30Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDI0OQ==", "bodyText": "Missing javadoc", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250249", "createdAt": "2020-12-23T21:23:16Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDQyOA==", "bodyText": "Code style: add space after []", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250428", "createdAt": "2020-12-23T21:23:30Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *\n+     * @param addrStr Address String.\n+     * @param errMsgPrefix Error message prefix.\n+     * @param portStr Port or port range string.\n+     * @return Array of int[portFrom, portTo].\n+     * @throws IgniteCheckedException If failed.\n+     */\n \n-            int portRangeIdx = portStr.indexOf(\"..\");\n+    private static int[] verifyPortStr(String addrStr, String errMsgPrefix, String portStr) throws IgniteCheckedException {\n+        String portFromStr;\n+        String portToStr;\n \n-            if (portRangeIdx >= 0) {\n-                // Port range is specified.\n-                portFromStr = portStr.substring(0, portRangeIdx);\n-                portToStr = portStr.substring(portRangeIdx + 2, portStr.length());\n-            }\n-            else {\n-                // Single port is specified.\n-                portFromStr = portStr;\n-                portToStr = portStr;\n-            }\n+        if (F.isEmpty(portStr))\n+            throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n \n-            portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n-            portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n+        int portRangeIdx = portStr.indexOf(\"..\");\n \n-            if (portFrom > portTo)\n-                throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+        if (portRangeIdx >= 0) {\n+            // Port range is specified.\n+            portFromStr = portStr.substring(0, portRangeIdx);\n+            portToStr = portStr.substring(portRangeIdx + 2);\n         }\n         else {\n-            // Host name not specified.\n-            if (colIdx == 0)\n-                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n-\n-            // Port is not specified, use defaults.\n-            host = addrStr;\n-\n-            portFrom = dfltPortFrom;\n-            portTo = dfltPortTo;\n+            // Single port is specified.\n+            portFromStr = portStr;\n+            portToStr = portStr;\n         }\n \n-        if (F.isEmpty(host))\n-            throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+        int portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n+        int portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n \n-        return new HostAndPortRange(host, portFrom, portTo);\n+        if (portFrom > portTo)\n+            throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+\n+        return new int[]{portFrom, portTo};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDg5OQ==", "bodyText": "Comments should start with a capital letter", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250899", "createdAt": "2020-12-23T21:24:19Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NTI4OQ==", "bodyText": "Can be shorter and avoid extra allocation: addrStr.lastIndexOf(\":\", colIdx)", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548255289", "createdAt": "2020-12-23T21:30:00Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NzE3NA==", "bodyText": "Pass e as cause.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548257174", "createdAt": "2020-12-23T21:32:49Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "committedDate": "2020-12-24T08:08:44Z", "message": "Improved code style; added cause to createParseError."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f20d54e307df57ac798f8dbc0e4955f08e49ae9", "author": {"user": {"login": "ptupitsyn", "name": "Pavel Tupitsyn"}}, "url": "https://github.com/apache/ignite/commit/1f20d54e307df57ac798f8dbc0e4955f08e49ae9", "committedDate": "2020-12-24T09:50:00Z", "message": "Minor style changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDUxNjc0", "url": "https://github.com/apache/ignite/pull/8591#pullrequestreview-558451674", "createdAt": "2020-12-24T10:30:09Z", "commit": {"oid": "1f20d54e307df57ac798f8dbc0e4955f08e49ae9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628f8f32679a82682314311a397e0dcc5ac63f50", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/628f8f32679a82682314311a397e0dcc5ac63f50", "committedDate": "2020-12-25T07:31:07Z", "message": "Added overload to start method of LocalIgniteCluster with host; Added test of IPv6 host to ConnectionTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Nzg1MTYx", "url": "https://github.com/apache/ignite/pull/8591#pullrequestreview-558785161", "createdAt": "2020-12-25T08:37:39Z", "commit": {"oid": "628f8f32679a82682314311a397e0dcc5ac63f50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "736eb3e0f1ae05aa416919f278ac27fb2e2a1b98", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/736eb3e0f1ae05aa416919f278ac27fb2e2a1b98", "committedDate": "2020-12-25T10:41:12Z", "message": "To look for cause of IgniteCheckedException in ClientListenerProcessor.java:203"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "049853dcf43958f807c3a6c7af1cc5b81594701f", "author": {"user": null}, "url": "https://github.com/apache/ignite/commit/049853dcf43958f807c3a6c7af1cc5b81594701f", "committedDate": "2020-12-25T17:20:27Z", "message": "Added @Ignore to ConnectionTest.testIPv6NodeAddresses"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2284, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}