{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Mzk2MzI2", "number": 7593, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzozODowMlrODvb5tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzozODowMlrODvb5tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDY2ODA3OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/FunctionsManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzozODowMlrOGB2x6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzozODowMlrOGB2x6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5OTI3Mg==", "bodyText": "Javadoc", "url": "https://github.com/apache/ignite/pull/7593#discussion_r404599272", "createdAt": "2020-04-07T07:38:02Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/FunctionsManager.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.h2.expression.Function;\n+\n+/**\n+ * SQL function manager.\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class FunctionsManager {\n+    /** Original H2 functions set. */\n+    private static HashMap<String, Object> origFuncs;\n+\n+    /** Current H2 functions set. */\n+    private static HashMap<String, Object> funcs;\n+\n+    static {\n+        try {\n+            Field fldFUNCTIONS = Function.class.getDeclaredField(\"FUNCTIONS\");\n+\n+            fldFUNCTIONS.setAccessible(true);\n+\n+            funcs = (HashMap<String, Object>)fldFUNCTIONS.get(Class.class);\n+\n+            origFuncs = new HashMap<>(funcs);\n+        }\n+        catch (NoSuchFieldException | IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     *\n+     */\n+    public FunctionsManager(DistributedSqlConfiguration distSqlCfg) {\n+        assert Objects.nonNull(funcs);\n+        assert Objects.nonNull(origFuncs);\n+        distSqlCfg.listenDisabledFunctions(this::updateDisabledFunctions);\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void updateDisabledFunctions(String s, HashSet<String> oldFuncs, HashSet<String> newFuncs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b030388f414c44644f6465c663f71566bea201"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2548, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}