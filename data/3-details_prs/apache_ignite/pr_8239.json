{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTQxMTky", "number": 8239, "title": "IGNITE-13429 Integration test of control.sh transactions' management", "bodyText": "Thank you for submitting the pull request to the Apache Ignite.\nIn order to streamline the review of the contribution\nwe ask you to ensure the following steps have been taken:\nThe Contribution Checklist\n\n There is a single JIRA ticket related to the pull request.\n The web-link to the pull request is attached to the JIRA ticket.\n The JIRA ticket has the Patch Available state.\n The pull request body describes changes that have been made.\nThe description explains WHAT and WHY was made instead of HOW.\n The pull request title is treated as the final commit message.\nThe following pattern must be used: IGNITE-XXXX Change summary where XXXX - number of JIRA issue.\n A reviewer has been mentioned through the JIRA comments\n(see the Maintainers list)\n The pull request has been checked by the Teamcity Bot and\nthe green visa attached to the JIRA ticket (see TC.Bot: Check PR)\n\nNotes\n\nHow to Contribute\nCoding abbreviation rules\nCoding Guidelines\nApache Ignite Teamcity Bot\n\nIf you need any help, please email dev@ignite.apache.org or ask an\u0443 advice on http://asf.slack.com #ignite channel.", "createdAt": "2020-09-10T14:38:48Z", "url": "https://github.com/apache/ignite/pull/8239", "merged": true, "mergeCommit": {"oid": "af0f0a7b13c3e9b78900c818bc9ca4040d927953"}, "closed": true, "closedAt": "2020-09-15T14:26:19Z", "author": {"login": "ivandasch"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHhzoXAH2gAyNDgzOTQxMTkyOmM2YWEzYzE3MDM3NjcwMzc1Y2RmOTI4ZGVmODA2ZWI3MjBjYzg4ZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJHaAtAH2gAyNDgzOTQxMTkyOjAyZmE4ZDU4NDcxN2NlMTI2NTNjZGJmNjE4OGU4NTlhNWYxOTU4MmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6aa3c17037670375cdf928def806eb720cc88dc", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/c6aa3c17037670375cdf928def806eb720cc88dc", "committedDate": "2020-09-10T14:37:58Z", "message": "IGNITE-13429 Implement tx list."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583eb15d97e25a4b763564e7cae89b4d984380cc", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/583eb15d97e25a4b763564e7cae89b4d984380cc", "committedDate": "2020-09-10T14:37:58Z", "message": "IGNITE-13429 Wip."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e4fdea8c24fe554704ef578175765c6c652707", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/c4e4fdea8c24fe554704ef578175765c6c652707", "committedDate": "2020-09-11T14:30:13Z", "message": "IGNITE-13429 Wip."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfbb4e9ccc9c7825f554bb52868fe1d7c9442a43", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/dfbb4e9ccc9c7825f554bb52868fe1d7c9442a43", "committedDate": "2020-09-14T15:19:15Z", "message": "IGNITE-13429 Wip."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f48137c4caef5d2d627f70e04b89d74fa60ddc9a", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/f48137c4caef5d2d627f70e04b89d74fa60ddc9a", "committedDate": "2020-09-15T06:47:04Z", "message": "IGNITE-13429 Uncomment suite."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6f9e421dcfbcc6103fc491fd1700e2aea92c3c0", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/a6f9e421dcfbcc6103fc491fd1700e2aea92c3c0", "committedDate": "2020-09-15T06:48:21Z", "message": "IGNITE-13429 Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/ba506c216486b39b5ffe56a2936030534ae9b007", "committedDate": "2020-09-15T06:51:33Z", "message": "IGNITE-13429 Remove hash."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b68e89aec357546e59730bd8ed60d34ed6c241b", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/0b68e89aec357546e59730bd8ed60d34ed6c241b", "committedDate": "2020-09-15T10:21:18Z", "message": "Merge remote-tracking branch 'remotes/origin/ignite-ducktape' into ignite-13429\n\n# Conflicts:\n#\tmodules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplication.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f4a7447c7b0c461c3da0b2576200594dcfd5064", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/6f4a7447c7b0c461c3da0b2576200594dcfd5064", "committedDate": "2020-09-15T10:22:45Z", "message": "IGNITE-13429 Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1704517342f395323215daed56dca10fb550ce2", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/c1704517342f395323215daed56dca10fb550ce2", "committedDate": "2020-09-15T11:49:28Z", "message": "IGNITE-13429 Code review fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f579ad9dee616e05b82d0c19b03dff4ca5b6e6a0", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/f579ad9dee616e05b82d0c19b03dff4ca5b6e6a0", "committedDate": "2020-09-15T12:29:29Z", "message": "IGNITE-13429 minors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTQ3NTE0", "url": "https://github.com/apache/ignite/pull/8239#pullrequestreview-488547514", "createdAt": "2020-09-15T10:34:54Z", "commit": {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDozNTo0OFrOHR7gWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo0MjozMlrOHR7uzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2Mjc3Ng==", "bodyText": "markAsBroken(e)?", "url": "https://github.com/apache/ignite/pull/8239#discussion_r488562776", "createdAt": "2020-09-15T10:35:48Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.control_utility;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.cache.CacheException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteTransactions;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.util.lang.IgnitePair;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionRollbackException;\n+\n+/**\n+ * Run long running transactions on node with specified param.\n+ */\n+public class LongRunningTransaction extends IgniteAwareApplication {\n+    /** */\n+    private static final Duration TOPOLOGY_WAIT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    /** */\n+    private static final String KEY_LOCKED_MESSAGE = \"APPLICATION_KEY_LOCKED\";\n+\n+    /** */\n+    private static final String LOCKED_KEY_PREFIX = \"KEY_\";\n+\n+    /** */\n+    private volatile Executor pool;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        IgniteCache<String, String> cache = ignite.cache(jsonNode.get(\"cache_name\").asText());\n+\n+        int txCount = jsonNode.get(\"tx_count\") != null ? jsonNode.get(\"tx_count\").asInt() : 1;\n+\n+        int txSize = jsonNode.get(\"tx_size\") != null ? jsonNode.get(\"tx_size\").asInt() : 1;\n+\n+        String keyPrefix = jsonNode.get(\"key_prefix\") != null ? jsonNode.get(\"key_prefix\").asText() : LOCKED_KEY_PREFIX;\n+\n+        String label = jsonNode.get(\"label\") != null ? jsonNode.get(\"label\").asText() : null;\n+\n+        long expectedTopologyVersion = jsonNode.get(\"wait_for_topology_version\") != null ?\n+            jsonNode.get(\"wait_for_topology_version\").asLong() : -1L;\n+\n+        CountDownLatch lockLatch = new CountDownLatch(txCount);\n+\n+        pool = Executors.newFixedThreadPool(2 * txCount);\n+\n+        markInitialized();\n+\n+        if (expectedTopologyVersion > 0) {\n+            log.info(\"Start waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+\n+            long start = System.nanoTime();\n+\n+            while (ignite.cluster().topologyVersion() < expectedTopologyVersion\n+                && Duration.ofNanos(start - System.nanoTime()).compareTo(TOPOLOGY_WAIT_TIMEOUT) < 0)\n+                Thread.sleep(100L);\n+\n+            log.info(\"Finished waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+        }\n+\n+        for (int i = 0; i < txCount; i++) {\n+            String key = keyPrefix + i;\n+            String value = \"VALUE_\" + i;\n+\n+            pool.execute(new Runnable() {\n+                @Override public void run() {\n+                    cache.put(key, value);\n+\n+                    Lock lock = cache.lock(key);\n+\n+                    lock.lock();\n+                    try {\n+                        lockLatch.countDown();\n+\n+                        while (!terminated())\n+                            Thread.sleep(100L);\n+                    }\n+                    catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2NjQ3OA==", "bodyText": "newline missed", "url": "https://github.com/apache/ignite/pull/8239#discussion_r488566478", "createdAt": "2020-09-15T10:42:32Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.control_utility;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.cache.CacheException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteTransactions;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.util.lang.IgnitePair;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionRollbackException;\n+\n+/**\n+ * Run long running transactions on node with specified param.\n+ */\n+public class LongRunningTransaction extends IgniteAwareApplication {\n+    /** */\n+    private static final Duration TOPOLOGY_WAIT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    /** */\n+    private static final String KEY_LOCKED_MESSAGE = \"APPLICATION_KEY_LOCKED\";\n+\n+    /** */\n+    private static final String LOCKED_KEY_PREFIX = \"KEY_\";\n+\n+    /** */\n+    private volatile Executor pool;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        IgniteCache<String, String> cache = ignite.cache(jsonNode.get(\"cache_name\").asText());\n+\n+        int txCount = jsonNode.get(\"tx_count\") != null ? jsonNode.get(\"tx_count\").asInt() : 1;\n+\n+        int txSize = jsonNode.get(\"tx_size\") != null ? jsonNode.get(\"tx_size\").asInt() : 1;\n+\n+        String keyPrefix = jsonNode.get(\"key_prefix\") != null ? jsonNode.get(\"key_prefix\").asText() : LOCKED_KEY_PREFIX;\n+\n+        String label = jsonNode.get(\"label\") != null ? jsonNode.get(\"label\").asText() : null;\n+\n+        long expectedTopologyVersion = jsonNode.get(\"wait_for_topology_version\") != null ?\n+            jsonNode.get(\"wait_for_topology_version\").asLong() : -1L;\n+\n+        CountDownLatch lockLatch = new CountDownLatch(txCount);\n+\n+        pool = Executors.newFixedThreadPool(2 * txCount);\n+\n+        markInitialized();\n+\n+        if (expectedTopologyVersion > 0) {\n+            log.info(\"Start waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+\n+            long start = System.nanoTime();\n+\n+            while (ignite.cluster().topologyVersion() < expectedTopologyVersion\n+                && Duration.ofNanos(start - System.nanoTime()).compareTo(TOPOLOGY_WAIT_TIMEOUT) < 0)\n+                Thread.sleep(100L);\n+\n+            log.info(\"Finished waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+        }\n+\n+        for (int i = 0; i < txCount; i++) {\n+            String key = keyPrefix + i;\n+            String value = \"VALUE_\" + i;\n+\n+            pool.execute(new Runnable() {\n+                @Override public void run() {\n+                    cache.put(key, value);\n+\n+                    Lock lock = cache.lock(key);\n+\n+                    lock.lock();\n+                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aaf0bb33f51b00e1ce32b6e00cc7c356b26e934", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/0aaf0bb33f51b00e1ce32b6e00cc7c356b26e934", "committedDate": "2020-09-15T12:58:28Z", "message": "IGNITE-13429 Minors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02fa8d584717ce12653cdbf6188e859a5f19582e", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/02fa8d584717ce12653cdbf6188e859a5f19582e", "committedDate": "2020-09-15T13:00:18Z", "message": "IGNITE-13429 typo."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3110, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}