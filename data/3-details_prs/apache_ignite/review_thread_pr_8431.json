{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzUzMzI0", "number": 8431, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo0OToxNFrOE6FeqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo1ODoyNFrOE6Fwqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzQyNjMzOnYy", "diffSide": "LEFT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/service/ServiceHotRedeploymentViaDeploymentSpiTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo0OToxNFrOH075Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjoyMjowM1rOH09eYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2OTI2Ng==", "bodyText": "I think that we shouldn't remove this check because this test is relevant only for the new Service Grid implementation.\nWe can remove such checks with the legacy SG-processor in future.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525269266", "createdAt": "2020-11-17T15:49:14Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/service/ServiceHotRedeploymentViaDeploymentSpiTest.java", "diffHunk": "@@ -61,12 +66,6 @@\n         return cfg;\n     }\n \n-    /** */\n-    @BeforeClass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDA2OA==", "bodyText": "New test added to this class testServiceDeploymentViaDeploymentSpi which also relevant to legacy implementation, so I've moved this check to serviceHotRedeploymentTest to skip legacy implementation only for testServiceHotRedeploymentNode and testServiceHotRedeploymentThinClient", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525284068", "createdAt": "2020-11-17T16:07:43Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/service/ServiceHotRedeploymentViaDeploymentSpiTest.java", "diffHunk": "@@ -61,12 +66,6 @@\n         return cfg;\n     }\n \n-    /** */\n-    @BeforeClass", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2OTI2Ng=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NTIwMQ==", "bodyText": "Got it.\nThank you for your clarification.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525295201", "createdAt": "2020-11-17T16:22:03Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/service/ServiceHotRedeploymentViaDeploymentSpiTest.java", "diffHunk": "@@ -61,12 +66,6 @@\n         return cfg;\n     }\n \n-    /** */\n-    @BeforeClass", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2OTI2Ng=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzQ2OTY3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo1Nzo0NlrOH08T0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDowOTo0NVrOH9coZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ==", "bodyText": "ServiceInfo is a serializable unit.\nI'm not sure that there is a sense to transfer GridKernalContext instance.\nMaybe it's better to make the field transient and initialize it after deserialization.\nWhat do you think?", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525276115", "createdAt": "2020-11-17T15:57:46Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NzAzNQ==", "bodyText": "Ok, I will fix it.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525287035", "createdAt": "2020-11-17T16:11:24Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MTcyNw==", "bodyText": "We can't get context after deserialization, because we don't know Ignite instance at this stage. I've marked the field as transient and added a check for null to avoid NPE. I think this is the best we can do. The class resolving logic will not work for services with lazy configuration and deployed via deployment SPI, after serialization/deserialization of ServiceInfo. But I think it's not such a common case - ServiceInfo not serialized by Ignite and serialization of ServiceInfo by the user looks strange. I think this class should not be Serializable at all.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r526971727", "createdAt": "2020-11-19T15:22:15Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyOTczNQ==", "bodyText": "We can handle it in IgniteServiceProcessor in places where registeredServices#putis called.\nAdding to registeredServices is the first place when Ignite's node receives ServiceInfo\nWe can introduce a new method:\nprivate void registerService(ServiceInfo desc) {\n    desc.setContext(ctx);\n    registeredServices.put(desc.serviceId(), desc);\n}\n\nWhat do you think?", "url": "https://github.com/apache/ignite/pull/8431#discussion_r530929735", "createdAt": "2020-11-26T10:32:54Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNTg5NQ==", "bodyText": "I have missed the point. ctx already passed to ServiceInfo constructor right before registeredServices#put. And this works fine, the only problem will show up if the user will serialize and deserialize ServiceInfo items in some circumstances. But this problem is not solved by your proposal either.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r531015895", "createdAt": "2020-11-26T13:05:29Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzMTI3OQ==", "bodyText": "I've tried to cover the case with statically configured services, which will be received during node joining.\nIn this case server (not user) will deserialize ServiceInfo without calling the new constructor.\nLook at:\n\n  \n    \n      ignite/modules/core/src/main/java/org/apache/ignite/internal/processors/service/IgniteServiceProcessor.java\n    \n    \n         Line 350\n      in\n      8f824ca\n    \n    \n    \n    \n\n        \n          \n           ServiceProcessorCommonDiscoveryData clusterData = (ServiceProcessorCommonDiscoveryData)data.commonData(); \n        \n    \n  \n\n\nI think we need a test for this case too.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r531131279", "createdAt": "2020-11-26T16:21:11Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzMDgxMw==", "bodyText": "Thanks, fixed it, and added a check to the test.\nI found one more problem with services using classes deployed by deployment SPI: such services can't be deployed to the joined node. It can be reproduced if we change in testServiceDeploymentViaDeploymentSpi from deployClusterSingleton to deployNodeSingleton. We can't register class in deployment SPI before node starts, so, after new node joins it receives services information from the cluster and tries to start service locally, but can't find deployment SPI classes, so a registration of such services fails. This issue is not related to this thicket. It looks conceptual and I don't have any ideas on how to solve it right now.\nAlso, looks like deployment SPI is not supported by the old service processor implementation, so I've reverted my changes related to GridServiceProcessor. I don't know why TC bot visa was green, I've double-checked it manually, and test testServiceDeploymentViaDeploymentSpi failed. This issue can be easily fixed, if we copy-paste copyAndInject method from the new implementation, but since the old implementation is deprecated I think we can live with these known issues.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r534030813", "createdAt": "2020-12-02T09:48:37Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMjkwOA==", "bodyText": "Looks like desc.context(ctx) should be called here as well:\n\n\n\n  \n    \n      ignite/modules/core/src/main/java/org/apache/ignite/internal/processors/service/IgniteServiceProcessor.java\n    \n    \n         Line 389\n      in\n      1ce95c6\n    \n    \n    \n    \n\n        \n          \n           registeredServices.put(desc.serviceId(), desc); \n        \n    \n  \n\n\n\n\n\n  \n    \n      ignite/modules/core/src/main/java/org/apache/ignite/internal/processors/service/IgniteServiceProcessor.java\n    \n    \n         Line 1519\n      in\n      1ce95c6\n    \n    \n    \n    \n\n        \n          \n           staticServicesInfo.forEach(desc -> registeredServices.put(desc.serviceId(), desc)); \n        \n    \n  \n\n\n\n\nI'd suggest to introduce a new method to have a single point oof adding services in registeredServices to not miss such places in future.\n    private void registerService(ServiceInfo desc) {\n        desc.context(ctx);\n        \n        registeredServices.put(desc.serviceId(), desc);\n    }\n\nWhat do you think?", "url": "https://github.com/apache/ignite/pull/8431#discussion_r534122908", "createdAt": "2020-12-02T12:17:28Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5NDI3OQ==", "bodyText": "Ok, fixed", "url": "https://github.com/apache/ignite/pull/8431#discussion_r534194279", "createdAt": "2020-12-02T14:09:45Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -37,6 +39,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Context. */\n+    private final GridKernalContext ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjExNQ=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzQ3MjQyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo1ODoyNFrOH08VrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozNjo0OVrOH0-ODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjU4OA==", "bodyText": "We have similar logic here IgniteServiceProcessor#copyAndInject\nCan't we reuse it?", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525276588", "createdAt": "2020-11-17T15:58:24Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -116,15 +125,28 @@ public IgniteUuid serviceId() {\n     }\n \n     /** {@inheritDoc} */\n-    @SuppressWarnings(\"unchecked\")\n     @Override public Class<? extends Service> serviceClass() {\n         if (cfg instanceof LazyServiceConfiguration) {\n+            if (srvcCls != null)\n+                return srvcCls;\n+\n             String clsName = ((LazyServiceConfiguration)cfg).serviceClassName();\n \n             try {\n-                return (Class<? extends Service>)Class.forName(clsName);\n+                srvcCls = (Class<? extends Service>)Class.forName(clsName);\n+\n+                return srvcCls;\n             }\n             catch (ClassNotFoundException e) {\n+                GridDeployment srvcDep = ctx.deploy().getDeployment(clsName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4ODIxNg==", "bodyText": "It's only one line of code can be reused, I think it's not such a good idea to make a new method to reuse only ctx.deploy().getDeployment(clsName).", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525288216", "createdAt": "2020-11-17T16:13:04Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -116,15 +125,28 @@ public IgniteUuid serviceId() {\n     }\n \n     /** {@inheritDoc} */\n-    @SuppressWarnings(\"unchecked\")\n     @Override public Class<? extends Service> serviceClass() {\n         if (cfg instanceof LazyServiceConfiguration) {\n+            if (srvcCls != null)\n+                return srvcCls;\n+\n             String clsName = ((LazyServiceConfiguration)cfg).serviceClassName();\n \n             try {\n-                return (Class<? extends Service>)Class.forName(clsName);\n+                srvcCls = (Class<? extends Service>)Class.forName(clsName);\n+\n+                return srvcCls;\n             }\n             catch (ClassNotFoundException e) {\n+                GridDeployment srvcDep = ctx.deploy().getDeployment(clsName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjU4OA=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5MzM5MQ==", "bodyText": "I didn't mean copy/paste :)\nI thought that there is another way to load className.\nFor example, load and set a className externally (without KernalContext field in ServiceInfo).\nNot sure if IgniteServiceProcessor#copyAndInject is a suitable place for that or not.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525293391", "createdAt": "2020-11-17T16:19:41Z", "author": {"login": "daradurvs"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -116,15 +125,28 @@ public IgniteUuid serviceId() {\n     }\n \n     /** {@inheritDoc} */\n-    @SuppressWarnings(\"unchecked\")\n     @Override public Class<? extends Service> serviceClass() {\n         if (cfg instanceof LazyServiceConfiguration) {\n+            if (srvcCls != null)\n+                return srvcCls;\n+\n             String clsName = ((LazyServiceConfiguration)cfg).serviceClassName();\n \n             try {\n-                return (Class<? extends Service>)Class.forName(clsName);\n+                srvcCls = (Class<? extends Service>)Class.forName(clsName);\n+\n+                return srvcCls;\n             }\n             catch (ClassNotFoundException e) {\n+                GridDeployment srvcDep = ctx.deploy().getDeployment(clsName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjU4OA=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwNzQwNg==", "bodyText": "I've tried to implement class resolving logic in IgniteServiceProcessor before ServiceInfo constructor and pass it as an argument, but I think it's risky if we fail in processServicesChangeRequest, so I've moved class resolving logic to  ServiceInfo.serviceClass() method.", "url": "https://github.com/apache/ignite/pull/8431#discussion_r525307406", "createdAt": "2020-11-17T16:36:49Z", "author": {"login": "alex-plekhanov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceInfo.java", "diffHunk": "@@ -116,15 +125,28 @@ public IgniteUuid serviceId() {\n     }\n \n     /** {@inheritDoc} */\n-    @SuppressWarnings(\"unchecked\")\n     @Override public Class<? extends Service> serviceClass() {\n         if (cfg instanceof LazyServiceConfiguration) {\n+            if (srvcCls != null)\n+                return srvcCls;\n+\n             String clsName = ((LazyServiceConfiguration)cfg).serviceClassName();\n \n             try {\n-                return (Class<? extends Service>)Class.forName(clsName);\n+                srvcCls = (Class<? extends Service>)Class.forName(clsName);\n+\n+                return srvcCls;\n             }\n             catch (ClassNotFoundException e) {\n+                GridDeployment srvcDep = ctx.deploy().getDeployment(clsName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjU4OA=="}, "originalCommit": {"oid": "5531f0c01a1bd7070bb9372b589641efcb6f0544"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2653, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}