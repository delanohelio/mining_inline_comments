{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Nzg4NjU3", "number": 644, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1OToxMVrODaei6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNTo0MVrODaftQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDkwMDI2OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1OToxMVrOFhc5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1OToxMVrOFhc5aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyMDc3Ng==", "bodyText": "Include function name", "url": "https://github.com/senx/warp10-platform/pull/644#discussion_r370620776", "createdAt": "2020-01-24T12:59:11Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.gts.GeoTimeSerie.TYPE;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterAny extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+\n+  public enum Comparator {\n+    EQ,\n+    GE,\n+    GT,\n+    LE,\n+    LT,\n+    NE\n+  }\n+\n+  private final TYPE type;\n+  private final Object threshold;\n+  private final boolean complementSet;\n+  private final Comparator comparator;\n+\n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+    private final boolean complementSet;\n+    private final Comparator comparator;\n+\n+    public Builder(String name, Comparator comparator, boolean complement) {\n+      super(name);\n+      this.comparator =comparator;\n+      this.complementSet = complement;\n+    }\n+\n+    public Builder(String name, Comparator comparator) {\n+      super(name);\n+      this.comparator = comparator;\n+      this.complementSet = false;\n+    }\n+\n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object threshold = stack.pop();\n+      stack.push(new FilterAny(getName(), threshold, this.comparator, this.complementSet));\n+      return stack;\n+    }\n+  }\n+\n+  public FilterAny(String name, Object threshold, Comparator comparator, boolean complementSet) throws WarpScriptException {\n+    super(name);\n+    this.comparator = comparator;\n+    this.complementSet = complementSet;\n+\n+    boolean allowBooleanThreshold = comparator == Comparator.EQ || comparator == Comparator.NE;\n+\n+    if (threshold instanceof Long) {\n+      this.type = TYPE.LONG;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof Double) {\n+      this.type = TYPE.DOUBLE;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof String) {\n+      this.type = TYPE.STRING;\n+      this.threshold = threshold;\n+    } else if (allowBooleanThreshold && threshold instanceof Boolean) {\n+      this.type = TYPE.BOOLEAN;\n+      this.threshold = threshold;\n+    } else {\n+      throw new WarpScriptException(\"Invalid threshold type.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b57d8b1113e406a6b145872e8f46f63a6c9fdb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDkwNTczOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzowMToyMVrOFhc8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzowNTo0MVrOFhdDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyMTYwNg==", "bodyText": "drop whitespace before ':'", "url": "https://github.com/senx/warp10-platform/pull/644#discussion_r370621606", "createdAt": "2020-01-24T13:01:21Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.gts.GeoTimeSerie.TYPE;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterAny extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+\n+  public enum Comparator {\n+    EQ,\n+    GE,\n+    GT,\n+    LE,\n+    LT,\n+    NE\n+  }\n+\n+  private final TYPE type;\n+  private final Object threshold;\n+  private final boolean complementSet;\n+  private final Comparator comparator;\n+\n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+    private final boolean complementSet;\n+    private final Comparator comparator;\n+\n+    public Builder(String name, Comparator comparator, boolean complement) {\n+      super(name);\n+      this.comparator =comparator;\n+      this.complementSet = complement;\n+    }\n+\n+    public Builder(String name, Comparator comparator) {\n+      super(name);\n+      this.comparator = comparator;\n+      this.complementSet = false;\n+    }\n+\n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object threshold = stack.pop();\n+      stack.push(new FilterAny(getName(), threshold, this.comparator, this.complementSet));\n+      return stack;\n+    }\n+  }\n+\n+  public FilterAny(String name, Object threshold, Comparator comparator, boolean complementSet) throws WarpScriptException {\n+    super(name);\n+    this.comparator = comparator;\n+    this.complementSet = complementSet;\n+\n+    boolean allowBooleanThreshold = comparator == Comparator.EQ || comparator == Comparator.NE;\n+\n+    if (threshold instanceof Long) {\n+      this.type = TYPE.LONG;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof Double) {\n+      this.type = TYPE.DOUBLE;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof String) {\n+      this.type = TYPE.STRING;\n+      this.threshold = threshold;\n+    } else if (allowBooleanThreshold && threshold instanceof Boolean) {\n+      this.type = TYPE.BOOLEAN;\n+      this.threshold = threshold;\n+    } else {\n+      throw new WarpScriptException(\"Invalid threshold type.\");\n+    }\n+  }\n+\n+  private boolean verify(int i) throws WarpScriptException {\n+    switch (this.comparator) {\n+      case EQ:\n+        return i == 0;\n+      case GE:\n+        return i <= 0;\n+      case GT:\n+        return i < 0;\n+      case LE:\n+        return i >= 0;\n+      case LT:\n+        return i > 0;\n+      case NE:\n+        return i != 0;\n+      default:\n+        throw new WarpScriptException(getName() + \" has been implemented with an unknown comparator.\");\n+    }\n+  }\n+\n+  @Override\n+  public List<GeoTimeSerie> filter(Map<String,String> labels, List<GeoTimeSerie>... series) throws WarpScriptException {\n+    List<GeoTimeSerie> retained = new ArrayList<GeoTimeSerie>();\n+\n+    for (List<GeoTimeSerie> gtsinstances: series) {\n+      for (GeoTimeSerie serie: gtsinstances) {\n+        boolean found = false;\n+        int i = 0;\n+\n+        while(!found && i < serie.size()) {\n+          Object val = GTSHelper.valueAtIndex(serie, i++);\n+\n+          switch (type) {\n+            case LONG:\n+              found = verify(((Long) threshold).compareTo(((Number) val).longValue()));\n+              break;\n+            case DOUBLE:\n+              found = verify(((Double) threshold).compareTo(((Number) val).doubleValue()));\n+              break;\n+            case STRING:\n+              found = verify(((String) threshold).compareTo(val.toString()));\n+              break;\n+            case BOOLEAN:\n+              if (!(((Boolean) threshold).equals(val) ^ this.comparator == Comparator.EQ)) {\n+                found = true;\n+              }\n+              break;\n+          }\n+\n+          if (found) {\n+            retained.add(serie);\n+          }\n+        }\n+      }\n+    }\n+\n+    if (complementSet) {\n+      List<GeoTimeSerie> retained_ = new ArrayList<GeoTimeSerie>();\n+\n+      for (List<GeoTimeSerie> gtsinstances: series) {\n+        for (GeoTimeSerie serie : gtsinstances) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b57d8b1113e406a6b145872e8f46f63a6c9fdb"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyMzI5MQ==", "bodyText": "outdated, see 5721f67", "url": "https://github.com/senx/warp10-platform/pull/644#discussion_r370623291", "createdAt": "2020-01-24T13:05:41Z", "author": {"login": "randomboolean"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.gts.GeoTimeSerie.TYPE;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterAny extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+\n+  public enum Comparator {\n+    EQ,\n+    GE,\n+    GT,\n+    LE,\n+    LT,\n+    NE\n+  }\n+\n+  private final TYPE type;\n+  private final Object threshold;\n+  private final boolean complementSet;\n+  private final Comparator comparator;\n+\n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+    private final boolean complementSet;\n+    private final Comparator comparator;\n+\n+    public Builder(String name, Comparator comparator, boolean complement) {\n+      super(name);\n+      this.comparator =comparator;\n+      this.complementSet = complement;\n+    }\n+\n+    public Builder(String name, Comparator comparator) {\n+      super(name);\n+      this.comparator = comparator;\n+      this.complementSet = false;\n+    }\n+\n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object threshold = stack.pop();\n+      stack.push(new FilterAny(getName(), threshold, this.comparator, this.complementSet));\n+      return stack;\n+    }\n+  }\n+\n+  public FilterAny(String name, Object threshold, Comparator comparator, boolean complementSet) throws WarpScriptException {\n+    super(name);\n+    this.comparator = comparator;\n+    this.complementSet = complementSet;\n+\n+    boolean allowBooleanThreshold = comparator == Comparator.EQ || comparator == Comparator.NE;\n+\n+    if (threshold instanceof Long) {\n+      this.type = TYPE.LONG;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof Double) {\n+      this.type = TYPE.DOUBLE;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof String) {\n+      this.type = TYPE.STRING;\n+      this.threshold = threshold;\n+    } else if (allowBooleanThreshold && threshold instanceof Boolean) {\n+      this.type = TYPE.BOOLEAN;\n+      this.threshold = threshold;\n+    } else {\n+      throw new WarpScriptException(\"Invalid threshold type.\");\n+    }\n+  }\n+\n+  private boolean verify(int i) throws WarpScriptException {\n+    switch (this.comparator) {\n+      case EQ:\n+        return i == 0;\n+      case GE:\n+        return i <= 0;\n+      case GT:\n+        return i < 0;\n+      case LE:\n+        return i >= 0;\n+      case LT:\n+        return i > 0;\n+      case NE:\n+        return i != 0;\n+      default:\n+        throw new WarpScriptException(getName() + \" has been implemented with an unknown comparator.\");\n+    }\n+  }\n+\n+  @Override\n+  public List<GeoTimeSerie> filter(Map<String,String> labels, List<GeoTimeSerie>... series) throws WarpScriptException {\n+    List<GeoTimeSerie> retained = new ArrayList<GeoTimeSerie>();\n+\n+    for (List<GeoTimeSerie> gtsinstances: series) {\n+      for (GeoTimeSerie serie: gtsinstances) {\n+        boolean found = false;\n+        int i = 0;\n+\n+        while(!found && i < serie.size()) {\n+          Object val = GTSHelper.valueAtIndex(serie, i++);\n+\n+          switch (type) {\n+            case LONG:\n+              found = verify(((Long) threshold).compareTo(((Number) val).longValue()));\n+              break;\n+            case DOUBLE:\n+              found = verify(((Double) threshold).compareTo(((Number) val).doubleValue()));\n+              break;\n+            case STRING:\n+              found = verify(((String) threshold).compareTo(val.toString()));\n+              break;\n+            case BOOLEAN:\n+              if (!(((Boolean) threshold).equals(val) ^ this.comparator == Comparator.EQ)) {\n+                found = true;\n+              }\n+              break;\n+          }\n+\n+          if (found) {\n+            retained.add(serie);\n+          }\n+        }\n+      }\n+    }\n+\n+    if (complementSet) {\n+      List<GeoTimeSerie> retained_ = new ArrayList<GeoTimeSerie>();\n+\n+      for (List<GeoTimeSerie> gtsinstances: series) {\n+        for (GeoTimeSerie serie : gtsinstances) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyMTYwNg=="}, "originalCommit": {"oid": "75b57d8b1113e406a6b145872e8f46f63a6c9fdb"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDk1OTIzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyMTozMVrOFhdb2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyMTozMVrOFhdb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyOTU5Mg==", "bodyText": "Add a comment explaining the logic as it is not obvious from just looking at the code since the operator is the opposite of what the function actually checks", "url": "https://github.com/senx/warp10-platform/pull/644#discussion_r370629592", "createdAt": "2020-01-24T13:21:31Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "diffHunk": "@@ -0,0 +1,164 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.gts.GeoTimeSerie.TYPE;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterAny extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+\n+  public enum Comparator {\n+    EQ,\n+    GE,\n+    GT,\n+    LE,\n+    LT,\n+    NE\n+  }\n+\n+  private final TYPE type;\n+  private final Object threshold;\n+  private final boolean complementSet;\n+  private final Comparator comparator;\n+\n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+    private final boolean complementSet;\n+    private final Comparator comparator;\n+\n+    public Builder(String name, Comparator comparator, boolean complement) {\n+      super(name);\n+      this.comparator =comparator;\n+      this.complementSet = complement;\n+    }\n+\n+    public Builder(String name, Comparator comparator) {\n+      super(name);\n+      this.comparator = comparator;\n+      this.complementSet = false;\n+    }\n+\n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object threshold = stack.pop();\n+      stack.push(new FilterAny(getName(), threshold, this.comparator, this.complementSet));\n+      return stack;\n+    }\n+  }\n+\n+  public FilterAny(String name, Object threshold, Comparator comparator, boolean complementSet) throws WarpScriptException {\n+    super(name);\n+    this.comparator = comparator;\n+    this.complementSet = complementSet;\n+\n+    boolean allowBooleanThreshold = comparator == Comparator.EQ || comparator == Comparator.NE;\n+\n+    if (threshold instanceof Long) {\n+      this.type = TYPE.LONG;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof Double) {\n+      this.type = TYPE.DOUBLE;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof String) {\n+      this.type = TYPE.STRING;\n+      this.threshold = threshold;\n+    } else if (allowBooleanThreshold && threshold instanceof Boolean) {\n+      this.type = TYPE.BOOLEAN;\n+      this.threshold = threshold;\n+    } else {\n+      throw new WarpScriptException(getName() + \" threshold type is invalid.\");\n+    }\n+  }\n+\n+  private boolean verify(int i) throws WarpScriptException {\n+    switch (this.comparator) {\n+      case EQ:\n+        return i == 0;\n+      case GE:\n+        return i <= 0;\n+      case GT:\n+        return i < 0;\n+      case LE:\n+        return i >= 0;\n+      case LT:\n+        return i > 0;\n+      case NE:\n+        return i != 0;\n+      default:\n+        throw new WarpScriptException(getName() + \" has been implemented with an unknown comparator.\");\n+    }\n+  }\n+\n+  @Override\n+  public List<GeoTimeSerie> filter(Map<String,String> labels, List<GeoTimeSerie>... series) throws WarpScriptException {\n+    List<GeoTimeSerie> retained = new ArrayList<GeoTimeSerie>();\n+\n+    for (List<GeoTimeSerie> gtsinstances: series) {\n+      for (GeoTimeSerie serie: gtsinstances) {\n+        boolean found = false;\n+        int i = 0;\n+\n+        while(!found && i < serie.size()) {\n+          Object val = GTSHelper.valueAtIndex(serie, i++);\n+\n+          switch (type) {\n+            case LONG:\n+              found = verify(((Long) threshold).compareTo(((Number) val).longValue()));\n+              break;\n+            case DOUBLE:\n+              found = verify(((Double) threshold).compareTo(((Number) val).doubleValue()));\n+              break;\n+            case STRING:\n+              found = verify(((String) threshold).compareTo(val.toString()));\n+              break;\n+            case BOOLEAN:\n+              if (!(((Boolean) threshold).equals(val) ^ this.comparator == Comparator.EQ)) {\n+                found = true;\n+              }\n+              break;\n+          }\n+        }\n+\n+        if (found ^ this.complementSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9958935758ef7603e312e65e9af6952347b2b63"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA5MDU3OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNTo0MVrOFhepBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNTo0MVrOFhepBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0OTM1MA==", "bodyText": "Be more expressive in the description, the loop above exits when one datapoint which satisfies the comparison is found, in the case of an 'all' match, the operator checked is the opposite of the wanted one, therefore when one datapoint matches the opposite comparison, it means that not all the datapoints satisfy it and therefore, as the comparison operator is the opposite of the one we really want, it means that not all the datapoints satisfy the opposite comparison either and therefore we do not retain the series. The boolean logic is not enough of an explanation for the person discovering the code.", "url": "https://github.com/senx/warp10-platform/pull/644#discussion_r370649350", "createdAt": "2020-01-24T14:05:41Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterAny.java", "diffHunk": "@@ -0,0 +1,165 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.gts.GeoTimeSerie.TYPE;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterAny extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+\n+  public enum Comparator {\n+    EQ,\n+    GE,\n+    GT,\n+    LE,\n+    LT,\n+    NE\n+  }\n+\n+  private final TYPE type;\n+  private final Object threshold;\n+  private final boolean complementSet; // if true, the filter does the opposite (so filter.all.* can be built using the same builder)\n+  private final Comparator comparator;\n+\n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+    private final boolean complementSet;\n+    private final Comparator comparator;\n+\n+    public Builder(String name, Comparator comparator, boolean complement) {\n+      super(name);\n+      this.comparator =comparator;\n+      this.complementSet = complement;\n+    }\n+\n+    public Builder(String name, Comparator comparator) {\n+      super(name);\n+      this.comparator = comparator;\n+      this.complementSet = false;\n+    }\n+\n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object threshold = stack.pop();\n+      stack.push(new FilterAny(getName(), threshold, this.comparator, this.complementSet));\n+      return stack;\n+    }\n+  }\n+\n+  public FilterAny(String name, Object threshold, Comparator comparator, boolean complementSet) throws WarpScriptException {\n+    super(name);\n+    this.comparator = comparator;\n+    this.complementSet = complementSet;\n+\n+    boolean allowBooleanThreshold = comparator == Comparator.EQ || comparator == Comparator.NE;\n+\n+    if (threshold instanceof Long) {\n+      this.type = TYPE.LONG;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof Double) {\n+      this.type = TYPE.DOUBLE;\n+      this.threshold = threshold;\n+    } else if (threshold instanceof String) {\n+      this.type = TYPE.STRING;\n+      this.threshold = threshold;\n+    } else if (allowBooleanThreshold && threshold instanceof Boolean) {\n+      this.type = TYPE.BOOLEAN;\n+      this.threshold = threshold;\n+    } else {\n+      throw new WarpScriptException(getName() + \" threshold type is invalid.\");\n+    }\n+  }\n+\n+  private boolean verify(int i) throws WarpScriptException {\n+    switch (this.comparator) {\n+      case EQ:\n+        return i == 0;\n+      case GE:\n+        return i <= 0;\n+      case GT:\n+        return i < 0;\n+      case LE:\n+        return i >= 0;\n+      case LT:\n+        return i > 0;\n+      case NE:\n+        return i != 0;\n+      default:\n+        throw new WarpScriptException(getName() + \" has been implemented with an unknown comparator.\");\n+    }\n+  }\n+\n+  @Override\n+  public List<GeoTimeSerie> filter(Map<String,String> labels, List<GeoTimeSerie>... series) throws WarpScriptException {\n+    List<GeoTimeSerie> retained = new ArrayList<GeoTimeSerie>();\n+\n+    for (List<GeoTimeSerie> gtsinstances: series) {\n+      for (GeoTimeSerie serie: gtsinstances) {\n+        boolean found = false;\n+        int i = 0;\n+\n+        while(!found && i < serie.size()) {\n+          Object val = GTSHelper.valueAtIndex(serie, i++);\n+\n+          switch (type) {\n+            case LONG:\n+              found = verify(((Long) threshold).compareTo(((Number) val).longValue()));\n+              break;\n+            case DOUBLE:\n+              found = verify(((Double) threshold).compareTo(((Number) val).doubleValue()));\n+              break;\n+            case STRING:\n+              found = verify(((String) threshold).compareTo(val.toString()));\n+              break;\n+            case BOOLEAN:\n+              found = ((Boolean) threshold).equals(val) ^ this.comparator == Comparator.NE;\n+              break;\n+          }\n+        }\n+\n+        // In case of wanting the complementSet, the logic is reversed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2188ca8fd515b237b030e0cc4b4951e6ee530b"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1287, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}