{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjM5ODEx", "number": 882, "title": "Allow TOKENGEN and TOKENDUMP to be used always on custom keys without secret", "bodyText": "This PR allows the signatures\n$map $aes $hash TOKENGEN\n$token $aes $hash TOKENDUMP\n\nto be used in any configuration, without secret.\nIf AES and SipHash keys are not specified, the behavior is the same as before, ie if keystore is that of a Warp/WarpDist instance, a secret is mandatory both in the conf and in the signatures, else no secret is necessary.\nAlso fixed a potential bug with non-thread safe TSerializer and improved error messages.", "createdAt": "2020-12-04T16:25:33Z", "url": "https://github.com/senx/warp10-platform/pull/882", "merged": true, "mergeCommit": {"oid": "2f993a6ec21b2bbca84d041b864199374d8d45d7"}, "closed": true, "closedAt": "2020-12-07T12:48:33Z", "author": {"login": "ftence"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi3j7egH2gAyNTMyNjM5ODExOmYyOGEzNWZiNzI0NWZlOGZkYjFkZTgxMjc1NjU3ZDIxMmUzMTcwOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjzn5JgH2gAyNTMyNjM5ODExOjZjMGIyNWM4ZDc1YmE4Mzk3ZGZjZjcyNjlkNmE4ZGE1ZWZiZmIzMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/f28a35fb7245fe8fdb1de81275657d212e317090", "committedDate": "2020-12-04T13:14:41Z", "message": "Allow TOKENGEN and TOKENDUMP to be used always on custom keys without secret"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTE2NzEx", "url": "https://github.com/senx/warp10-platform/pull/882#pullrequestreview-545116711", "createdAt": "2020-12-04T16:36:11Z", "commit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozNjoxMVrOH_YuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo1MTozMFrOIAb95w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNzM5Ng==", "bodyText": "since List is imported, you can drop java.util. java.lang.String can also be replaced by String throughout.", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r536227396", "createdAt": "2020-12-04T16:36:11Z", "author": {"login": "hbs"}, "path": "token/src/main/java/io/warp10/quasar/encoder/QuasarTokenEncoder.java", "diffHunk": "@@ -32,18 +32,20 @@\n \n import java.nio.ByteBuffer;\n import java.nio.ByteOrder;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n \n public class QuasarTokenEncoder {\n \n-  private final TSerializer serializer = new TSerializer(new TCompactProtocol.Factory());\n-\n   public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps, long ttl, KeyStore keystore) throws TException {\n     ReadToken token = getReadToken(appName, producerUID, Arrays.asList(ownerUID), null, apps, null, null, ttl);\n     return cypherToken(token, keystore);\n   }\n \n-  public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps,  Map<String, String> labels, long ttl, KeyStore keystore) throws TException {\n+  public String deliverReadToken(String appName, String producerUID, String ownerUID, java.util.List<java.lang.String> apps, Map<String, String> labels, long ttl, KeyStore keystore) throws TException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNDk3MA==", "bodyText": "You are implicitly making the definition of the secret mandatory, which was not the case previously, any reason for this change?", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537324970", "createdAt": "2020-12-07T08:44:48Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java", "diffHunk": "@@ -48,85 +48,93 @@\n \n   public static final String KEY_PARAMS = \"params\";\n \n-  private byte[] tokenAESKey = null;\n-  private byte[] tokenSipHashKey = null;\n+  private final byte[] keystoreTokenAESKey;\n+  private final byte[] keystoreTokenSipHashKey;\n \n-  private boolean multikey = false;\n+  /**\n+   * Whether the keystore used to initialize the keys is that of a Warp/WarpDist instance.\n+   * If true, a secret is needed to access the keystore keys.\n+   */\n+  private final boolean warpKeystore;\n \n-  public TOKENDUMP(String name) {\n+  public TOKENDUMP(String name, KeyStore keystore, boolean warpKeystore) {\n     super(name);\n-  }\n-\n-  public TOKENDUMP(String name, KeyStore keystore) {\n-    super(name);\n-    tokenAESKey = keystore.getKey(KeyStore.AES_TOKEN);\n-    tokenSipHashKey = keystore.getKey(KeyStore.SIPHASH_TOKEN);\n-  }\n-\n-  public TOKENDUMP(String name, boolean multikey) {\n-    super(name);\n-    this.multikey = multikey;\n+    if(null != keystore) {\n+      keystoreTokenAESKey = keystore.getKey(KeyStore.AES_TOKEN);\n+      keystoreTokenSipHashKey = keystore.getKey(KeyStore.SIPHASH_TOKEN);\n+    } else {\n+      keystoreTokenAESKey = null;\n+      keystoreTokenSipHashKey = null;\n+    }\n+    this.warpKeystore = warpKeystore;\n   }\n \n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    byte[] tokenAESKey = null;\n+    byte[] tokenSipHashKey = null;\n+    boolean customKeys = false;\n \n-    byte[] AESKey = tokenAESKey;\n-    byte[] SipHashKey = tokenSipHashKey;\n-\n-    if ((null == AESKey || null == SipHashKey) && !this.multikey) {\n-      throw new WarpScriptException(getName() + \" cannot be used in this context.\");\n-    }\n+    // First, check if SipHash and AES keys are explicitly defined. In that case, no need for secret.\n+    Object top = stack.pop();\n+    if (top instanceof byte[]) {\n+      customKeys = true;\n \n-    Object top = null;\n+      tokenSipHashKey = (byte[]) top;\n \n-    if (this.multikey) {\n       top = stack.pop();\n \n       if (!(top instanceof byte[])) {\n-        throw new WarpScriptException(getName() + \" expects a SipHash Key (a byte array).\");\n+        throw new WarpScriptException(getName() + \" expects a BYTES AES Key if a BYTES SipHash is given.\");\n       }\n \n-      SipHashKey = (byte[]) top;\n+      tokenAESKey = (byte[]) top;\n \n       top = stack.pop();\n+    }\n \n-      if (!(top instanceof byte[])) {\n-        throw new WarpScriptException(getName() + \" expects an AES Key (byte array).\");\n-      }\n-\n-      AESKey = (byte[]) top;\n-\n-      top = stack.pop();\n-    } else {\n-      //\n-      // A non null token secret was configured, check it\n-      //\n-      String secret = TokenWarpScriptExtension.TOKEN_SECRET;\n+    if (null == tokenAESKey) { // in that case we have also null == tokenSipHashKey\n+      // SipHash and AES keys are not explicitly defined, so we fall back to those of the keystore.\n+      // Check the secret if needed before the fallback.\n+      if (warpKeystore) {\n+        String secret = TokenWarpScriptExtension.TOKEN_SECRET;\n \n-      top = stack.pop();\n+        if (null == secret) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNTgxOA==", "bodyText": "Describe the purpose of warpKeystore", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537325818", "createdAt": "2020-12-07T08:46:13Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENDUMP.java", "diffHunk": "@@ -48,85 +48,93 @@\n \n   public static final String KEY_PARAMS = \"params\";\n \n-  private byte[] tokenAESKey = null;\n-  private byte[] tokenSipHashKey = null;\n+  private final byte[] keystoreTokenAESKey;\n+  private final byte[] keystoreTokenSipHashKey;\n \n-  private boolean multikey = false;\n+  /**\n+   * Whether the keystore used to initialize the keys is that of a Warp/WarpDist instance.\n+   * If true, a secret is needed to access the keystore keys.\n+   */\n+  private final boolean warpKeystore;\n \n-  public TOKENDUMP(String name) {\n+  public TOKENDUMP(String name, KeyStore keystore, boolean warpKeystore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNTk5NQ==", "bodyText": "Describe the purpose of warpKeystore", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537325995", "createdAt": "2020-12-07T08:46:28Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -57,79 +57,76 @@\n   public static final String KEY_PRODUCER = \"producer\";\n   public static final String KEY_APPLICATIONS = \"applications\";\n \n-  private long DEFAULT_TTL = 0;\n+  private final byte[] keystoreTokenAESKey;\n+  private final byte[] keystoreTokenSipHashKey;\n \n-  private byte[] tokenAESKey = null;\n-  private byte[] tokenSipHashKey = null;\n-  private boolean multikey = false;\n+  /**\n+   * Whether the keystore used to initialize the keys is that of a Warp/WarpDist instance.\n+   * If true, a secret is needed to access the keystore keys.\n+   */\n+  private final boolean warpKeystore;\n \n-  public TOKENGEN(String name) {\n+  public TOKENGEN(String name, KeyStore keystore, boolean warpKeystore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyODA0Mg==", "bodyText": "You should leave the DEFAULT_TTL constant in the class and use it here instead of 0L", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537328042", "createdAt": "2020-12-07T08:49:45Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -139,10 +136,10 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Map<Object, Object> params = (Map<Object, Object>) top;\n \n     try {\n-      TBase token = tokenFromMap(params);\n+      TBase token = tokenFromMap(params, getName(), 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyODY4NA==", "bodyText": "extraneous ' ' before ':'", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537328684", "createdAt": "2020-12-07T08:50:48Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -241,23 +238,23 @@ public TBase tokenFromMap(Map params) throws WarpScriptException {\n \n       if (null != params.get(KEY_ATTRIBUTES)) {\n         if (!(params.get(KEY_ATTRIBUTES) instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n+          throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n+        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyODg0OA==", "bodyText": "extraneous ' ' before ':'", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537328848", "createdAt": "2020-12-07T08:51:02Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -241,23 +238,23 @@ public TBase tokenFromMap(Map params) throws WarpScriptException {\n \n       if (null != params.get(KEY_ATTRIBUTES)) {\n         if (!(params.get(KEY_ATTRIBUTES) instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n+          throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n+        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_ATTRIBUTES)).entrySet()) {\n           if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String)) {\n-            throw new WarpScriptException(getName() + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map of STRING keys and values.\");\n+            throw new WarpScriptException(name + \" expects '\" + KEY_ATTRIBUTES + \"' to be a map of STRING keys and values.\");\n           }\n           rtoken.putToAttributes(entry.getKey().toString(), entry.getValue().toString());\n         }\n       }\n \n       if (null != params.get(KEY_LABELS)) {\n         if (!(params.get(KEY_LABELS) instanceof Map)) {\n-          throw new WarpScriptException(getName() + \" expects '\" + KEY_LABELS + \"' to be a map.\");\n+          throw new WarpScriptException(name + \" expects '\" + KEY_LABELS + \"' to be a map.\");\n         }\n-        for (Entry<Object, Object> entry: ((Map<Object, Object>) params.get(KEY_LABELS)).entrySet()) {\n+        for (Entry<Object, Object> entry : ((Map<Object, Object>) params.get(KEY_LABELS)).entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyOTEyNw==", "bodyText": "0L == defaultTTL (as later in the file)", "url": "https://github.com/senx/warp10-platform/pull/882#discussion_r537329127", "createdAt": "2020-12-07T08:51:30Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/token/TOKENGEN.java", "diffHunk": "@@ -191,17 +188,17 @@ public TBase tokenFromMap(Map params) throws WarpScriptException {\n         }\n       } else if (null != params.get(KEY_EXPIRY)) {\n         rtoken.setExpiryTimestamp(((Number) params.get(KEY_EXPIRY)).longValue());\n-      } else if (0 == DEFAULT_TTL) {\n-        throw new WarpScriptException(getName() + \" missing '\" + KEY_TTL + \"' or '\" + KEY_EXPIRY + \"'.\");\n+      } else if (0 == defaultTtl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f28a35fb7245fe8fdb1de81275657d212e317090"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/6c0b25c8d75ba8397dfcf7269d6a8da5efbfb335", "committedDate": "2020-12-07T11:13:19Z", "message": "Code style, comments and imports"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3273, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}