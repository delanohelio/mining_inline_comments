{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjY1MDQ5", "number": 866, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNDo1MVrOE2DUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxODo0MFrOE-HuDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTEyOTcyOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNDo1MVrOHuqpTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNDo1MVrOHuqpTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NTI0NQ==", "bodyText": "Why compute the labels id before it is needed? This is a costly operation.", "url": "https://github.com/senx/warp10-platform/pull/866#discussion_r518695245", "createdAt": "2020-11-06T11:34:51Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "diffHunk": "@@ -680,19 +681,22 @@ public void register(Metadata metadata) throws IOException {\n     }\n   }\n \n-  public synchronized void unregister(Metadata metadata) {\n-    if (!classids.containsKey(metadata.getName())) {\n-      return;\n-    }\n+  public void unregister(Metadata metadata) {\n     // 128BITS\n     long labelsId = GTSHelper.labelsId(this.labelsLongs, metadata.getLabels());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd9448e3cec1283caa1cbe9c29560862a80fb7b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTMwOTEyOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjozNDowMFrOHusVgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyMjowMlrOHvzz2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMjk0Nw==", "bodyText": "On line 632 (in register), the call to metadatas.get() could throw an NPE if the entry for that class name is removed on line 598. The solution would be to protect the part in register with a syncrhonized block on metadatas", "url": "https://github.com/senx/warp10-platform/pull/866#discussion_r518722947", "createdAt": "2020-11-06T12:34:00Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "diffHunk": "@@ -680,19 +681,22 @@ public void register(Metadata metadata) throws IOException {\n     }\n   }\n \n-  public synchronized void unregister(Metadata metadata) {\n-    if (!classids.containsKey(metadata.getName())) {\n-      return;\n-    }\n+  public void unregister(Metadata metadata) {\n     // 128BITS\n     long labelsId = GTSHelper.labelsId(this.labelsLongs, metadata.getLabels());\n-    if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n-      return;\n-    }\n-    metadatas.get(metadata.getName()).remove(labelsId);\n-    if (metadatas.get(metadata.getName()).isEmpty()) {\n-      metadatas.remove(metadata.getName());\n-      classids.remove(metadata.getName());\n+\n+    synchronized (metadatas) {\n+      if (!classids.containsKey(metadata.getName())) {\n+        return;\n+      }\n+      if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n+        return;\n+      }\n+      metadatas.get(metadata.getName()).remove(labelsId);\n+      if (metadatas.get(metadata.getName()).isEmpty()) {\n+        metadatas.remove(metadata.getName());\n+        classids.remove(metadata.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd9448e3cec1283caa1cbe9c29560862a80fb7b6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyODg3NQ==", "bodyText": "So register and unregister might have to be mutually exclusive, hence maybe both synchronized", "url": "https://github.com/senx/warp10-platform/pull/866#discussion_r518728875", "createdAt": "2020-11-06T12:46:10Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "diffHunk": "@@ -680,19 +681,22 @@ public void register(Metadata metadata) throws IOException {\n     }\n   }\n \n-  public synchronized void unregister(Metadata metadata) {\n-    if (!classids.containsKey(metadata.getName())) {\n-      return;\n-    }\n+  public void unregister(Metadata metadata) {\n     // 128BITS\n     long labelsId = GTSHelper.labelsId(this.labelsLongs, metadata.getLabels());\n-    if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n-      return;\n-    }\n-    metadatas.get(metadata.getName()).remove(labelsId);\n-    if (metadatas.get(metadata.getName()).isEmpty()) {\n-      metadatas.remove(metadata.getName());\n-      classids.remove(metadata.getName());\n+\n+    synchronized (metadatas) {\n+      if (!classids.containsKey(metadata.getName())) {\n+        return;\n+      }\n+      if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n+        return;\n+      }\n+      metadatas.get(metadata.getName()).remove(labelsId);\n+      if (metadatas.get(metadata.getName()).isEmpty()) {\n+        metadatas.remove(metadata.getName());\n+        classids.remove(metadata.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMjk0Nw=="}, "originalCommit": {"oid": "cd9448e3cec1283caa1cbe9c29560862a80fb7b6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5Mzk3OA==", "bodyText": "I tried to reduce at the minimum synchronization, avoiding making method synchronized.", "url": "https://github.com/senx/warp10-platform/pull/866#discussion_r519893978", "createdAt": "2020-11-09T15:22:02Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "diffHunk": "@@ -680,19 +681,22 @@ public void register(Metadata metadata) throws IOException {\n     }\n   }\n \n-  public synchronized void unregister(Metadata metadata) {\n-    if (!classids.containsKey(metadata.getName())) {\n-      return;\n-    }\n+  public void unregister(Metadata metadata) {\n     // 128BITS\n     long labelsId = GTSHelper.labelsId(this.labelsLongs, metadata.getLabels());\n-    if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n-      return;\n-    }\n-    metadatas.get(metadata.getName()).remove(labelsId);\n-    if (metadatas.get(metadata.getName()).isEmpty()) {\n-      metadatas.remove(metadata.getName());\n-      classids.remove(metadata.getName());\n+\n+    synchronized (metadatas) {\n+      if (!classids.containsKey(metadata.getName())) {\n+        return;\n+      }\n+      if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n+        return;\n+      }\n+      metadatas.get(metadata.getName()).remove(labelsId);\n+      if (metadatas.get(metadata.getName()).isEmpty()) {\n+        metadatas.remove(metadata.getName());\n+        classids.remove(metadata.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMjk0Nw=="}, "originalCommit": {"oid": "cd9448e3cec1283caa1cbe9c29560862a80fb7b6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTczNjQ0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxODo0MFrOH7KW_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxODo0MFrOH7KW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5Nzc1OA==", "bodyText": "Actually second thoughts about where labelsId is computed. If it is occasional to call unregister for a GTS whose class is  no longer known it might be better to always compute labelsId where labelsId is declared rather than in the synchronized block since the computation is CPU heavy and therefore would extend the time spent in the syncrhonized block which would block all threads attempting to synchronize on metadatas. So probably better to always compute labelsId and do so outside of the synchronized block.", "url": "https://github.com/senx/warp10-platform/pull/866#discussion_r531797758", "createdAt": "2020-11-27T22:18:40Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/standalone/StandaloneDirectoryClient.java", "diffHunk": "@@ -680,19 +706,23 @@ public void register(Metadata metadata) throws IOException {\n     }\n   }\n \n-  public synchronized void unregister(Metadata metadata) {\n-    if (!classids.containsKey(metadata.getName())) {\n-      return;\n-    }\n+  public void unregister(Metadata metadata) {\n     // 128BITS\n-    long labelsId = GTSHelper.labelsId(this.labelsLongs, metadata.getLabels());\n-    if (!metadatas.get(metadata.getName()).containsKey(labelsId)) {\n-      return;\n-    }\n-    metadatas.get(metadata.getName()).remove(labelsId);\n-    if (metadatas.get(metadata.getName()).isEmpty()) {\n-      metadatas.remove(metadata.getName());\n-      classids.remove(metadata.getName());\n+    long labelsId;\n+\n+    synchronized(metadatas) {\n+      if (!classids.containsKey(metadata.getName())) {\n+        return;\n+      }\n+      labelsId = GTSHelper.labelsId(this.labelsLongs, metadata.getLabels());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909377a3ad61179aed22ee5d359978e613654719"}, "originalPosition": 429}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1184, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}