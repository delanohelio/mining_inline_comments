{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDMxMjg3", "number": 819, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoxNTo0M1rOEfRwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoxNTo0M1rOEfRwxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjMyMzI1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/VARS.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoxNTo0M1rOHLc8kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODoyMzo0N1rOHLjitw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3MDY0MQ==", "bodyText": "What is the typical case when this option would be used?", "url": "https://github.com/senx/warp10-platform/pull/819#discussion_r481770641", "createdAt": "2020-09-02T06:15:43Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARS.java", "diffHunk": "@@ -43,32 +43,42 @@ public VARS(String name) {\n   \n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n-    \n     Object top = stack.pop();\n-    \n+\n+    boolean onlyStoreAndPopr = false;\n+    if (top instanceof Boolean) {\n+      onlyStoreAndPopr = (Boolean) top;\n+      top = stack.pop();\n+    }\n+\n     if (!(top instanceof Macro)) {\n       throw new WarpScriptException(getName() + \" operates on a macro.\");\n     }\n \n     Macro macro = (Macro) top;\n \n     try {\n-      stack.push(getVars(macro));\n+      stack.push(getVars(macro, onlyStoreAndPopr));\n     } catch (WarpScriptException wse) {\n       throw new WarpScriptException(getName() + \" failed.\", wse);\n     }\n \n     return stack;\n   }\n \n+  public static List<Object> getVars(Macro macro) throws WarpScriptException {\n+    return getVars(macro, false);\n+  }\n+\n   /**\n    * Loop over the macro statements, in a recursive manner, extracting all variable names.\n    *\n    * @param macro The root macro to extract the variable names from.\n+   * @param onlyStoreAndPopr Return only variables used for storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce39fe4b34d98d17cb4314ae5550546013159fa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NzQ5Mw==", "bodyText": "As stated in ASREGS\n// If variables are not defined, only get variables and registers used by STORE and POPR\n// to avoid global varaibles.\n\nIf a variable is only used by a LOAD, this must not be converted to a register because it is most certainly a global variable. Converting it to a register will only break the code.", "url": "https://github.com/senx/warp10-platform/pull/819#discussion_r481867493", "createdAt": "2020-09-02T08:11:11Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARS.java", "diffHunk": "@@ -43,32 +43,42 @@ public VARS(String name) {\n   \n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n-    \n     Object top = stack.pop();\n-    \n+\n+    boolean onlyStoreAndPopr = false;\n+    if (top instanceof Boolean) {\n+      onlyStoreAndPopr = (Boolean) top;\n+      top = stack.pop();\n+    }\n+\n     if (!(top instanceof Macro)) {\n       throw new WarpScriptException(getName() + \" operates on a macro.\");\n     }\n \n     Macro macro = (Macro) top;\n \n     try {\n-      stack.push(getVars(macro));\n+      stack.push(getVars(macro, onlyStoreAndPopr));\n     } catch (WarpScriptException wse) {\n       throw new WarpScriptException(getName() + \" failed.\", wse);\n     }\n \n     return stack;\n   }\n \n+  public static List<Object> getVars(Macro macro) throws WarpScriptException {\n+    return getVars(macro, false);\n+  }\n+\n   /**\n    * Loop over the macro statements, in a recursive manner, extracting all variable names.\n    *\n    * @param macro The root macro to extract the variable names from.\n+   * @param onlyStoreAndPopr Return only variables used for storage.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3MDY0MQ=="}, "originalCommit": {"oid": "8ce39fe4b34d98d17cb4314ae5550546013159fa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3MDMxOQ==", "bodyText": "What I meant was that this case should be described next to the parameter in the javadoc for clarity purposes.", "url": "https://github.com/senx/warp10-platform/pull/819#discussion_r481870319", "createdAt": "2020-09-02T08:14:25Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARS.java", "diffHunk": "@@ -43,32 +43,42 @@ public VARS(String name) {\n   \n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n-    \n     Object top = stack.pop();\n-    \n+\n+    boolean onlyStoreAndPopr = false;\n+    if (top instanceof Boolean) {\n+      onlyStoreAndPopr = (Boolean) top;\n+      top = stack.pop();\n+    }\n+\n     if (!(top instanceof Macro)) {\n       throw new WarpScriptException(getName() + \" operates on a macro.\");\n     }\n \n     Macro macro = (Macro) top;\n \n     try {\n-      stack.push(getVars(macro));\n+      stack.push(getVars(macro, onlyStoreAndPopr));\n     } catch (WarpScriptException wse) {\n       throw new WarpScriptException(getName() + \" failed.\", wse);\n     }\n \n     return stack;\n   }\n \n+  public static List<Object> getVars(Macro macro) throws WarpScriptException {\n+    return getVars(macro, false);\n+  }\n+\n   /**\n    * Loop over the macro statements, in a recursive manner, extracting all variable names.\n    *\n    * @param macro The root macro to extract the variable names from.\n+   * @param onlyStoreAndPopr Return only variables used for storage.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3MDY0MQ=="}, "originalCommit": {"oid": "8ce39fe4b34d98d17cb4314ae5550546013159fa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3ODcxMQ==", "bodyText": "Done.", "url": "https://github.com/senx/warp10-platform/pull/819#discussion_r481878711", "createdAt": "2020-09-02T08:23:47Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARS.java", "diffHunk": "@@ -43,32 +43,42 @@ public VARS(String name) {\n   \n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n-    \n     Object top = stack.pop();\n-    \n+\n+    boolean onlyStoreAndPopr = false;\n+    if (top instanceof Boolean) {\n+      onlyStoreAndPopr = (Boolean) top;\n+      top = stack.pop();\n+    }\n+\n     if (!(top instanceof Macro)) {\n       throw new WarpScriptException(getName() + \" operates on a macro.\");\n     }\n \n     Macro macro = (Macro) top;\n \n     try {\n-      stack.push(getVars(macro));\n+      stack.push(getVars(macro, onlyStoreAndPopr));\n     } catch (WarpScriptException wse) {\n       throw new WarpScriptException(getName() + \" failed.\", wse);\n     }\n \n     return stack;\n   }\n \n+  public static List<Object> getVars(Macro macro) throws WarpScriptException {\n+    return getVars(macro, false);\n+  }\n+\n   /**\n    * Loop over the macro statements, in a recursive manner, extracting all variable names.\n    *\n    * @param macro The root macro to extract the variable names from.\n+   * @param onlyStoreAndPopr Return only variables used for storage.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3MDY0MQ=="}, "originalCommit": {"oid": "8ce39fe4b34d98d17cb4314ae5550546013159fa"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1155, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}