{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDA4OTcy", "number": 683, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozMToyNlrODoy_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NDowN1rODozj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTA1MDI5OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozMToyNlrOF3kUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNTo1MVrOF4Xu2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMDk4Mg==", "bodyText": "Should binary values be also checked? If so, a more optimal way than using getBinaryValue should be used.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r393810982", "createdAt": "2020-03-17T16:31:26Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSDecoder.java", "diffHunk": "@@ -528,26 +528,52 @@ public Object getBinaryValue() {\n   /**\n    * Decode any remaining values into a GTS instance.\n    * \n+   * @param type TYPE to force for the resulting GTS\n+   * @param strict Set to true to force values to be of uniform types, will throw RuntimeException if not\n+   * \n    * @return A GTS instance containing the remaining values.\n    */\n-  public GeoTimeSerie decode(TYPE type) {\n+  public GeoTimeSerie decode(TYPE type, boolean strict) {\n     GeoTimeSerie gts = new GeoTimeSerie(this.count > 0 ? (int) Math.min(Integer.MAX_VALUE, this.count) : Math.max(16, this.buffer.remaining() / 10));\n     \n     if (null != type) {\n       gts.setType(type);\n     }\n     \n     gts.setMetadata(this.getMetadata());\n-    \n-    while(next()) {\n-      GTSHelper.setValue(gts, getTimestamp(), getLocation(), getElevation(), getValue(), false);\n+  \n+    if (strict) {\n+      Class lastClass = null;\n+      \n+      while(next()) {        \n+        Object value = getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQwMA==", "bodyText": "I am not sure we should differentiate binary values here, since in the GeoTimeSerie world they are mixed with STRING values anyway. Let's stick with that approach for now, I'll add a TODO to remind that we may differentiate the two later if need be, for now I don't think there might be many use cases that would require it. The most common type of mixed type encoders is having LONG and DOUBLE I think.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r394653400", "createdAt": "2020-03-18T21:35:51Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSDecoder.java", "diffHunk": "@@ -528,26 +528,52 @@ public Object getBinaryValue() {\n   /**\n    * Decode any remaining values into a GTS instance.\n    * \n+   * @param type TYPE to force for the resulting GTS\n+   * @param strict Set to true to force values to be of uniform types, will throw RuntimeException if not\n+   * \n    * @return A GTS instance containing the remaining values.\n    */\n-  public GeoTimeSerie decode(TYPE type) {\n+  public GeoTimeSerie decode(TYPE type, boolean strict) {\n     GeoTimeSerie gts = new GeoTimeSerie(this.count > 0 ? (int) Math.min(Integer.MAX_VALUE, this.count) : Math.max(16, this.buffer.remaining() / 10));\n     \n     if (null != type) {\n       gts.setType(type);\n     }\n     \n     gts.setMetadata(this.getMetadata());\n-    \n-    while(next()) {\n-      GTSHelper.setValue(gts, getTimestamp(), getLocation(), getElevation(), getValue(), false);\n+  \n+    if (strict) {\n+      Class lastClass = null;\n+      \n+      while(next()) {        \n+        Object value = getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMDk4Mg=="}, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTA2MTMyOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozNDoxOFrOF3kbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowNzo0OVrOF4Yk3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjkwMQ==", "bodyText": "Creating and using a subclass of RuntimeException could be nicer.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r393812901", "createdAt": "2020-03-17T16:34:18Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSDecoder.java", "diffHunk": "@@ -528,26 +528,52 @@ public Object getBinaryValue() {\n   /**\n    * Decode any remaining values into a GTS instance.\n    * \n+   * @param type TYPE to force for the resulting GTS\n+   * @param strict Set to true to force values to be of uniform types, will throw RuntimeException if not\n+   * \n    * @return A GTS instance containing the remaining values.\n    */\n-  public GeoTimeSerie decode(TYPE type) {\n+  public GeoTimeSerie decode(TYPE type, boolean strict) {\n     GeoTimeSerie gts = new GeoTimeSerie(this.count > 0 ? (int) Math.min(Integer.MAX_VALUE, this.count) : Math.max(16, this.buffer.remaining() / 10));\n     \n     if (null != type) {\n       gts.setType(type);\n     }\n     \n     gts.setMetadata(this.getMetadata());\n-    \n-    while(next()) {\n-      GTSHelper.setValue(gts, getTimestamp(), getLocation(), getElevation(), getValue(), false);\n+  \n+    if (strict) {\n+      Class lastClass = null;\n+      \n+      while(next()) {        \n+        Object value = getValue();\n+        Class valClass = value.getClass();\n+        // getValue could return a BigDecimal, we need to smooth the comparison so\n+        // they are considered as Double\n+        if (value instanceof BigDecimal) {\n+          valClass = Double.class;\n+        }\n+        if (null != lastClass && !(valClass.equals(lastClass))) {\n+          throw new RuntimeException(\"Non homogeneous GTS Encoder.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzIzMQ==", "bodyText": "The only reason it's a RuntimeException is that it avoids declaring it is thrown, no plan to subclass it.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r394667231", "createdAt": "2020-03-18T22:07:49Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSDecoder.java", "diffHunk": "@@ -528,26 +528,52 @@ public Object getBinaryValue() {\n   /**\n    * Decode any remaining values into a GTS instance.\n    * \n+   * @param type TYPE to force for the resulting GTS\n+   * @param strict Set to true to force values to be of uniform types, will throw RuntimeException if not\n+   * \n    * @return A GTS instance containing the remaining values.\n    */\n-  public GeoTimeSerie decode(TYPE type) {\n+  public GeoTimeSerie decode(TYPE type, boolean strict) {\n     GeoTimeSerie gts = new GeoTimeSerie(this.count > 0 ? (int) Math.min(Integer.MAX_VALUE, this.count) : Math.max(16, this.buffer.remaining() / 10));\n     \n     if (null != type) {\n       gts.setType(type);\n     }\n     \n     gts.setMetadata(this.getMetadata());\n-    \n-    while(next()) {\n-      GTSHelper.setValue(gts, getTimestamp(), getLocation(), getElevation(), getValue(), false);\n+  \n+    if (strict) {\n+      Class lastClass = null;\n+      \n+      while(next()) {        \n+        Object value = getValue();\n+        Class valClass = value.getClass();\n+        // getValue could return a BigDecimal, we need to smooth the comparison so\n+        // they are considered as Double\n+        if (value instanceof BigDecimal) {\n+          valClass = Double.class;\n+        }\n+        if (null != lastClass && !(valClass.equals(lastClass))) {\n+          throw new RuntimeException(\"Non homogeneous GTS Encoder.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjkwMQ=="}, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTA5OTQ0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/PIVOT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo0MzozNlrOF3k0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1MDoxMFrOF4FzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxOTI2OA==", "bodyText": "Catch the RuntimeException to display a nice error message.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r393819268", "createdAt": "2020-03-17T16:43:36Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/PIVOT.java", "diffHunk": "@@ -45,19 +46,28 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object top = stack.pop();\n     \n     if (!(top instanceof List) || (0 == ((List) top).size())) {\n-      throw new WarpScriptException(getName() + \" expects a non empty list of labeling Geo Time Series\u2122.\");\n+      throw new WarpScriptException(getName() + \" expects a non empty list of labeling Geo Time Series.\");\n     }\n     \n-    List<Object> labeling = (List<Object>) top;\n+    List<Object> paramLabeling = (List<Object>) top;\n+    List<Object> labeling = new ArrayList<Object>(paramLabeling.size());\n     \n     Set<String> classes = new HashSet<String>();\n-    for (Object o: labeling) {\n+    for (Object o: paramLabeling) {\n+      if (o instanceof GTSEncoder) {\n+        GTSEncoder encoder = (GTSEncoder) o;\n+        GTSDecoder decoder = encoder.getDecoder(true);\n+        o = decoder.decode(null, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1OTU4MQ==", "bodyText": "I agree. It will could be usefull for other functions too.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r394359581", "createdAt": "2020-03-18T13:50:10Z", "author": {"login": "pi-r-p"}, "path": "warp10/src/main/java/io/warp10/script/functions/PIVOT.java", "diffHunk": "@@ -45,19 +46,28 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object top = stack.pop();\n     \n     if (!(top instanceof List) || (0 == ((List) top).size())) {\n-      throw new WarpScriptException(getName() + \" expects a non empty list of labeling Geo Time Series\u2122.\");\n+      throw new WarpScriptException(getName() + \" expects a non empty list of labeling Geo Time Series.\");\n     }\n     \n-    List<Object> labeling = (List<Object>) top;\n+    List<Object> paramLabeling = (List<Object>) top;\n+    List<Object> labeling = new ArrayList<Object>(paramLabeling.size());\n     \n     Set<String> classes = new HashSet<String>();\n-    for (Object o: labeling) {\n+    for (Object o: paramLabeling) {\n+      if (o instanceof GTSEncoder) {\n+        GTSEncoder encoder = (GTSEncoder) o;\n+        GTSDecoder decoder = encoder.getDecoder(true);\n+        o = decoder.decode(null, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxOTI2OA=="}, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE0NDI5OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/PIVOT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NDowN1rOF3lR1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NDowN1rOF3lR1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNjc3NQ==", "bodyText": "Ditto.", "url": "https://github.com/senx/warp10-platform/pull/683#discussion_r393826775", "createdAt": "2020-03-17T16:54:07Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/PIVOT.java", "diffHunk": "@@ -70,15 +80,24 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     top = stack.pop();\n     \n     if (!(top instanceof List) || 0 == ((List) top).size()) {\n-      throw new WarpScriptException(getName() + \" operates on a non empty list of labeling Geo Time Series\u2122.\");\n+      throw new WarpScriptException(getName() + \" operates on a non empty list of Geo Time Series or GTS Encoders.\");\n     }\n \n-    List<Object> gts = (List<Object>) top;\n+    List<Object> paramGts = (List<Object>) top;\n+    List<Object> gts = new ArrayList<Object>(paramGts.size());\n     \n-    for (Object o: gts) {\n+    for (Object o: paramGts) {\n+      if (o instanceof GTSEncoder) {\n+        GTSEncoder encoder = (GTSEncoder) o;\n+        GTSDecoder decoder = encoder.getDecoder(true);\n+        o = decoder.decode(null, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41fa0b668b54bfa8a639a45fd57a11239d89add8"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1317, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}