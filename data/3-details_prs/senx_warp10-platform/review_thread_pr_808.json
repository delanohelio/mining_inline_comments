{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMTA0MTg0", "number": 808, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzoyMTowM1rOEUDiaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMTozOVrOEUh0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDY0OTM3OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/TOGEOJSON.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzoyMTowM1rOG6ISwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzoyMTowM1rOG6ISwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYwNjQ2NA==", "bodyText": "missing final period.", "url": "https://github.com/senx/warp10-platform/pull/808#discussion_r463606464", "createdAt": "2020-07-31T13:21:03Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOGEOJSON.java", "diffHunk": "@@ -41,44 +48,86 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     if (top instanceof Boolean) {\n       allCells = (Boolean) top;\n       top = stack.pop();\n-    }\n \n-    if (!(top instanceof GeoXPShape)) {\n-      throw new WarpScriptException(getName() + \" operates on a GEOSHAPE.\");\n+      if (!(top instanceof GeoXPShape)) {\n+        throw new WarpScriptException(getName() + \" operates on a GEOSHAPE when first given a BOOLEAN.\");\n+      }\n     }\n \n-    GeoXPShape shape = (GeoXPShape) top;\n-\n-    if (allCells) {\n-      long[] cells = GeoXPLib.getCells(shape);\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[\");\n-      String prefix = \"\";\n-\n-      for (long cell: cells) {\n-        int cellRes = ((int) (cell >>> 60)) << 1;\n-        long hh = cell << 4;\n-        double[] bbox = HHCodeHelper.getHHCodeBBox(hh, cellRes);\n-        sb.append(prefix);\n-        prefix = \",\";\n-        // Counterclockwise from sw, lon/lat\n-        sb.append(\"[[[\").append(bbox[1]).append(\",\").append(bbox[0]).append(\"],\");// SW\n-        sb.append(\"[\").append(bbox[3]).append(\",\").append(bbox[0]).append(\"],\"); // SE\n-        sb.append(\"[\").append(bbox[3]).append(\",\").append(bbox[2]).append(\"],\"); // NE\n-        sb.append(\"[\").append(bbox[1]).append(\",\").append(bbox[2]).append(\"],\"); // NW\n-        sb.append(\"[\").append(bbox[1]).append(\",\").append(bbox[0]).append(\"]]]\"); // SW\n-      }\n+    if (top instanceof GeoXPShape) {\n+      GeoXPShape shape = (GeoXPShape) top;\n+\n+      if (allCells) {\n+        long[] cells = GeoXPLib.getCells(shape);\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[\");\n+        String prefix = \"\";\n \n-      sb.append(\"]}\");\n+        for (long cell: cells) {\n+          int cellRes = ((int) (cell >>> 60)) << 1;\n+          long hh = cell << 4;\n+          double[] bbox = HHCodeHelper.getHHCodeBBox(hh, cellRes);\n+          sb.append(prefix);\n+          prefix = \",\";\n+          // Counterclockwise from sw, lon/lat\n+          sb.append(\"[[[\").append(bbox[1]).append(\",\").append(bbox[0]).append(\"],\");// SW\n+          sb.append(\"[\").append(bbox[3]).append(\",\").append(bbox[0]).append(\"],\"); // SE\n+          sb.append(\"[\").append(bbox[3]).append(\",\").append(bbox[2]).append(\"],\"); // NE\n+          sb.append(\"[\").append(bbox[1]).append(\",\").append(bbox[2]).append(\"],\"); // NW\n+          sb.append(\"[\").append(bbox[1]).append(\",\").append(bbox[0]).append(\"]]]\"); // SW\n+        }\n \n-      stack.push(sb.toString());\n+        sb.append(\"]}\");\n+\n+        stack.push(sb.toString());\n+      } else {\n+        long[] cells = GeoXPLib.getCells(shape);\n+        Coverage coverage = new Coverage(cells);\n+        stack.push(CoverageHelper.toGeoJSON(coverage));\n+      }\n     } else {\n-      long[] cells = GeoXPLib.getCells(shape);\n-      Coverage coverage = new Coverage(cells);\n-      stack.push(CoverageHelper.toGeoJSON(coverage));\n+      try {\n+        Geometry geometry = toGeometry(top);\n+        GeoJSONWriter writer = new GeoJSONWriter();\n+        GeoJSON json = writer.write(geometry);\n+        stack.push(json.toString());\n+      } catch (WarpScriptException wse) {\n+        throw new WarpScriptException(getName() + \" expects a GEOSHAPE, a WKT STRING or WKB BYTES.\", wse);\n+      } catch (ParseException pe) {\n+        throw new WarpScriptException(getName() + \" was given invalid input.\", pe);\n+      }\n     }\n \n     return stack;\n   }\n+\n+  public static Geometry toGeometry(Object geomObject) throws WarpScriptException, ParseException {\n+\n+    Geometry geometry;\n+\n+    if (geomObject instanceof byte[]) {\n+      // WKB\n+      WKBReader reader = new WKBReader();\n+\n+      geometry = reader.read((byte[]) geomObject);\n+    } else if (geomObject instanceof String) {\n+      String geomString = ((String) geomObject).trim();\n+      if (geomString.startsWith(\"{\")) {\n+        // GeoJson\n+        GeoJSONReader reader = new GeoJSONReader();\n+\n+        geometry = reader.read(geomString);\n+      } else {\n+        // WKT\n+        WKTReader reader = new WKTReader();\n+\n+        geometry = reader.read(geomString);\n+      }\n+    } else {\n+      throw new WarpScriptException(\"Unknown geometry format\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f6316c0e2ea0a03d0583e12f0617cc7c428a0b0"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTYwNjExOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/TOWKB.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMDoxN1rOG6x-dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMDoxN1rOG6x-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4OTM5OA==", "bodyText": "Duplicate The", "url": "https://github.com/senx/warp10-platform/pull/808#discussion_r464289398", "createdAt": "2020-08-03T09:10:17Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOWKB.java", "diffHunk": "@@ -0,0 +1,63 @@\n+//\n+//    Copyright 2020  SenX S.A.S.\n+//\n+//    Licensed under the Apache License, Version 2.0 (the \"License\");\n+//    you may not use this file except in compliance with the License.\n+//    You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//    Unless required by applicable law or agreed to in writing, software\n+//    distributed under the License is distributed on an \"AS IS\" BASIS,\n+//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//    See the License for the specific language governing permissions and\n+//    limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.GeoXPLib;\n+import com.vividsolutions.jts.geom.Geometry;\n+import com.vividsolutions.jts.io.ParseException;\n+import com.vividsolutions.jts.io.WKBWriter;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class TOWKB extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  private TOGEOJSON togeojson;\n+\n+  public TOWKB(String name) {\n+    super(name);\n+    togeojson = new TOGEOJSON(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    // The the top of the stack is either a GeoXPShape or a Boolean, then we apply GEOJSON to convert it to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c5b977292f4984da26d463c9ba0fb6f3831a08"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTYxMDk0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/TOWKT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMTozOVrOG6yBVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxMTozOVrOG6yBVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MDEzMw==", "bodyText": "Duplicate the", "url": "https://github.com/senx/warp10-platform/pull/808#discussion_r464290133", "createdAt": "2020-08-03T09:11:39Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOWKT.java", "diffHunk": "@@ -0,0 +1,60 @@\n+//\n+//    Copyright 2020  SenX S.A.S.\n+//\n+//    Licensed under the Apache License, Version 2.0 (the \"License\");\n+//    you may not use this file except in compliance with the License.\n+//    You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//    Unless required by applicable law or agreed to in writing, software\n+//    distributed under the License is distributed on an \"AS IS\" BASIS,\n+//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//    See the License for the specific language governing permissions and\n+//    limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.GeoXPLib;\n+import com.vividsolutions.jts.geom.Geometry;\n+import com.vividsolutions.jts.io.ParseException;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class TOWKT extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  private TOGEOJSON togeojson;\n+\n+  public TOWKT(String name) {\n+    super(name);\n+    togeojson = new TOGEOJSON(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    // The the top of the stack is either a GeoXPShape or a Boolean, then we apply GEOJSON to convert it to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c5b977292f4984da26d463c9ba0fb6f3831a08"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1141, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}