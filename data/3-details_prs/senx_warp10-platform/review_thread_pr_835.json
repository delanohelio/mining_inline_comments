{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MjEzMDA4", "number": 835, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyMjoyN1rOElnELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyMzowNVrOElnFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODcyODE1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyMjoyN1rOHVLNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyMjoyN1rOHVLNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2NTc1Ng==", "bodyText": "The comment does not match the code.\nOn top of that, I'm not sure returning false for GeoTimeSerie.NO_LOCATION is what most users expect. I'd rather return null for no location.", "url": "https://github.com/senx/warp10-platform/pull/835#discussion_r491965756", "createdAt": "2020-09-21T11:22:27Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.mapper;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptMapperFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.functions.GEOPACK;\n+\n+import com.geoxp.GeoXPLib;\n+import com.geoxp.GeoXPLib.GeoXPShape;\n+\n+/**\n+ * Mapper which returns true or false whether a point location falls within or outside a given GeoShape.\n+ */\n+public class MapperGeoFence extends NamedWarpScriptFunction implements WarpScriptMapperFunction {\n+  \n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+    \n+    public Builder(String name) {\n+      super(name);\n+    }\n+    \n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object shape = stack.pop();\n+      \n+      if (!(shape instanceof GeoXPShape)) {\n+        throw new WarpScriptException(getName() + \" expects a Geo Shape.\");\n+      }\n+      \n+      stack.push(new MapperGeoFence(getName(), (GeoXPShape) shape));\n+      return stack;\n+    }\n+  }\n+\n+  private final GeoXPShape shape;\n+  \n+  /**\n+   * Default constructor, the timezone will be UTC\n+   */\n+  public MapperGeoFence(String name, GeoXPShape shape) {\n+    super(name);\n+    this.shape = shape;\n+  }\n+  \n+  @Override\n+  public Object apply(Object[] args) throws WarpScriptException {\n+    long tick = (long) args[0];\n+    long[] locations = (long[]) args[4];\n+    long[] elevations = (long[]) args[5];\n+    Object[] values = (Object[]) args[6];\n+\n+    if (values.length < 1) {\n+      return new Object[] { tick, GeoTimeSerie.NO_LOCATION, GeoTimeSerie.NO_ELEVATION, null };\n+    }\n+    \n+    long location = locations[0];\n+    long elevation = elevations[0];\n+    \n+    //\n+    // If there is less than one value or if there is no location associated with the\n+    // value, return null as the tick value.\n+    //\n+   \n+    if (null == values[0] || GeoTimeSerie.NO_LOCATION == location || !GeoXPLib.isGeoXPPointInGeoXPShape(location, this.shape)) {\n+      return new Object[] { tick, location, elevation, false };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a71d9b39a4146b0123996933a34d1035603753"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODczMDI1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyMzowNVrOHVLOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMToyMzowNVrOHVLOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2NjA1OQ==", "bodyText": "Timezone of the GeoXPShape?", "url": "https://github.com/senx/warp10-platform/pull/835#discussion_r491966059", "createdAt": "2020-09-21T11:23:05Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.mapper;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptMapperFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.functions.GEOPACK;\n+\n+import com.geoxp.GeoXPLib;\n+import com.geoxp.GeoXPLib.GeoXPShape;\n+\n+/**\n+ * Mapper which returns true or false whether a point location falls within or outside a given GeoShape.\n+ */\n+public class MapperGeoFence extends NamedWarpScriptFunction implements WarpScriptMapperFunction {\n+  \n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+    \n+    public Builder(String name) {\n+      super(name);\n+    }\n+    \n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object shape = stack.pop();\n+      \n+      if (!(shape instanceof GeoXPShape)) {\n+        throw new WarpScriptException(getName() + \" expects a Geo Shape.\");\n+      }\n+      \n+      stack.push(new MapperGeoFence(getName(), (GeoXPShape) shape));\n+      return stack;\n+    }\n+  }\n+\n+  private final GeoXPShape shape;\n+  \n+  /**\n+   * Default constructor, the timezone will be UTC\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a71d9b39a4146b0123996933a34d1035603753"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1161, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}