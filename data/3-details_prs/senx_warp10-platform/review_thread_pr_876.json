{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MDk0NTM2", "number": 876, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0Nzo1MFrOE-HfyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0Nzo1MFrOE-HfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTY5OTkzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/ALMOSTEQ.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0Nzo1MFrOH7KESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTowMToxMlrOH9VnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5Mjk3MA==", "bodyText": "Why use Math.abs for computing values of op1 and op2?", "url": "https://github.com/senx/warp10-platform/pull/876#discussion_r531792970", "createdAt": "2020-11-27T21:47:50Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/ALMOSTEQ.java", "diffHunk": "@@ -40,26 +39,22 @@ public ALMOSTEQ(String name) {\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object lambdaParam = stack.pop();\n-    Object op2 = stack.pop();\n-    Object op1 = stack.pop();\n-    \n-    double lambda;\n+    Object op2Param = stack.pop();\n+    Object op1Param = stack.pop();\n \n-    if (lambdaParam instanceof Number) {\n-      lambda = Math.abs(((Number) lambdaParam).doubleValue());\n-    } else {\n-      throw new WarpScriptException(getName() + \" needs three parameters on the stack: 'lambda' (a numeric type) and two operands.\");  \n+    // All operands need to be numeric.\n+    if  (!(lambdaParam instanceof Number) || !(op2Param instanceof Number)  || !(op1Param instanceof Number)) {\n+      throw new WarpScriptException(getName() + \" only accepts numeric parameters.\");\n     }\n \n-    // At least one of the operands must be a Double and both operands need to be numeric types\n-    if  (!(op2 instanceof Number)  || !(op1 instanceof Number) || !(op2 instanceof Double || op1 instanceof Double)) {\n-      throw new WarpScriptException(getName() + \" can only operate on numeric types and at least one of them must be a Double.\");  \n-    }\n-    \n-    if (Double.isNaN(((Number) op1).doubleValue()) || Double.isNaN(((Number) op2).doubleValue())) {\n-      stack.push(Double.isNaN(((Number) op1).doubleValue()) && Double.isNaN(((Number) op2).doubleValue()));\n+    double lambda = Math.abs(((Number) lambdaParam).doubleValue());\n+    double op1 = Math.abs(((Number) op1Param).doubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73fd35951f1552597af6ecfe2b0c235c3135478"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTM3Ng==", "bodyText": "My bad, fixed.", "url": "https://github.com/senx/warp10-platform/pull/876#discussion_r534079376", "createdAt": "2020-12-02T11:01:12Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/ALMOSTEQ.java", "diffHunk": "@@ -40,26 +39,22 @@ public ALMOSTEQ(String name) {\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object lambdaParam = stack.pop();\n-    Object op2 = stack.pop();\n-    Object op1 = stack.pop();\n-    \n-    double lambda;\n+    Object op2Param = stack.pop();\n+    Object op1Param = stack.pop();\n \n-    if (lambdaParam instanceof Number) {\n-      lambda = Math.abs(((Number) lambdaParam).doubleValue());\n-    } else {\n-      throw new WarpScriptException(getName() + \" needs three parameters on the stack: 'lambda' (a numeric type) and two operands.\");  \n+    // All operands need to be numeric.\n+    if  (!(lambdaParam instanceof Number) || !(op2Param instanceof Number)  || !(op1Param instanceof Number)) {\n+      throw new WarpScriptException(getName() + \" only accepts numeric parameters.\");\n     }\n \n-    // At least one of the operands must be a Double and both operands need to be numeric types\n-    if  (!(op2 instanceof Number)  || !(op1 instanceof Number) || !(op2 instanceof Double || op1 instanceof Double)) {\n-      throw new WarpScriptException(getName() + \" can only operate on numeric types and at least one of them must be a Double.\");  \n-    }\n-    \n-    if (Double.isNaN(((Number) op1).doubleValue()) || Double.isNaN(((Number) op2).doubleValue())) {\n-      stack.push(Double.isNaN(((Number) op1).doubleValue()) && Double.isNaN(((Number) op2).doubleValue()));\n+    double lambda = Math.abs(((Number) lambdaParam).doubleValue());\n+    double op1 = Math.abs(((Number) op1Param).doubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5Mjk3MA=="}, "originalCommit": {"oid": "d73fd35951f1552597af6ecfe2b0c235c3135478"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1190, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}