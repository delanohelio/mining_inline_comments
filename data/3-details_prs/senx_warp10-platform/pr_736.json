{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MzIwMDYx", "number": 736, "title": "Add more conversions from/to HHCodes", "bodyText": "Changes:\n\nHHCodeFunc rejects resolution of 0\nResolution is optional for HHCodeFunc for String and byte[], it is inferred from the length of the given String or byte[]\nIf HHCodeFunc is given a byte[], instead of expecting a size >= 8 and using the first 8 bytes, it expects a size <=8 and right-pad with zeros, which matches how string inputs are handled.\nHHCODE-> behave the same as HHCODE.CENTER if given a HHCode\nHHCODE-> now accepts list of HHCodes and outputs a GeoXPShape\nHHCODE-> now accepts an optional Boolean on top of the HHCode: if True, output a GeoHash approximation of the HHCode\n->HHCODE now accepts a String GeoHash and output a HHCode\n->HHCODE now accepts a GeoXPShape and outputs a list of HHCodes\n\n->HHCODELONG, ->GTSHHCODE, ->GTSHHCODELONG and GTSHHCODE-> are also impacted by this PR.", "createdAt": "2020-04-16T12:07:30Z", "url": "https://github.com/senx/warp10-platform/pull/736", "merged": true, "mergeCommit": {"oid": "679dfe5b6d417c197f3c6c997869f92e5f4894da"}, "closed": true, "closedAt": "2020-05-05T11:07:09Z", "author": {"login": "ftence"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYI3ANgH2gAyNDA0MzIwMDYxOjZiNzMyNjRmZDA5OWU0YzVmOTNmMzkwZWRiODliM2IxODFiMmNhMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceSEeDgFqTQwNTY4Nzg1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b73264fd099e4c5f93f390edb89b3b181b2ca03", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/6b73264fd099e4c5f93f390edb89b3b181b2ca03", "committedDate": "2020-04-16T08:59:35Z", "message": "Add more conversions from/to HHCodes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTY5NDk4", "url": "https://github.com/senx/warp10-platform/pull/736#pullrequestreview-394569498", "createdAt": "2020-04-16T12:12:00Z", "commit": {"oid": "6b73264fd099e4c5f93f390edb89b3b181b2ca03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxMjowMFrOGGiRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxMjowMFrOGGiRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNjEzNg==", "bodyText": "This violates the current behavior. A HHCode encodes the lower left corner of its cell, not the cell center.", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r409506136", "createdAt": "2020-04-16T12:12:00Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODETO.java", "diffHunk": "@@ -44,34 +48,56 @@ public HHCODETO(String name, boolean useGtsConvention) {\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n-    Object hhcode = stack.pop();\n+    Object top = stack.pop();\n+\n+    if (top instanceof List) {\n+      List cellList = (List) top;\n+      ArrayList<Long> cells = new ArrayList<Long>();\n \n-    long hh;\n+      long[] hhAndRes;\n+      for(Object cell: cellList) {\n+        try {\n+          hhAndRes = HHCODEFUNC.hhAndRes(cell);\n+        } catch (WarpScriptException wse) {\n+          throw new WarpScriptException(getName() + \" expects the given list to contain LONG, STRING or BYTES HHCodes.\", wse);\n+        }\n+        long hh = hhAndRes[0];\n+        int res = (int) hhAndRes[1]; // We know hhAndRes returns an int here.\n \n-    if (hhcode instanceof Long) {\n-      hh = (long) hhcode;\n-    } else if (hhcode instanceof String) {\n-      String hhstr = hhcode.toString();\n-      if (hhstr.length() > 16) {\n-        throw new WarpScriptException(getName() + \" expects an hexadecimal HHCode string of length <= 16\");\n-      } else if (hhstr.length() < 16) {\n-        hhcode = new StringBuilder(hhstr).append(\"0000000000000000\");\n-        ((StringBuilder) hhcode).setLength(16);\n+        cells.add(HHCodeHelper.toGeoCell(hh, res));\n       }\n-      hh = Long.parseUnsignedLong(hhcode.toString(), 16);\n-    } else if (hhcode instanceof byte[]) {\n-      hh = Longs.fromByteArray((byte[]) hhcode);\n-    } else {\n-      throw new WarpScriptException(getName() + \" expects a long, a string or a byte array.\");\n-    }\n \n-    if (useGtsConvention && GeoTimeSerie.NO_LOCATION == hh) {\n-      stack.push(Double.NaN);\n-      stack.push(Double.NaN);\n+      stack.push(GeoXPLib.fromCells(cells));\n     } else {\n-      double[] latlon = GeoXPLib.fromGeoXPPoint(hh);\n-      stack.push(latlon[0]);\n-      stack.push(latlon[1]);\n+      // Optional: boolean to select GeoHash/Lat-Lon output\n+      boolean geohashOutput = false;\n+      if (top instanceof Boolean) {\n+        geohashOutput = (Boolean) top;\n+        top = stack.pop();\n+      }\n+\n+      long[] hhAndRes;\n+      try {\n+        hhAndRes = HHCODEFUNC.hhAndRes(top);\n+      } catch (WarpScriptException wse) {\n+        throw new WarpScriptException(getName() + \" was given unexpected arguments.\", wse);\n+      }\n+      long hh = hhAndRes[0];\n+      int res = (int) hhAndRes[1]; // We know hhAndRes returns an int here.\n+\n+      if(geohashOutput) {\n+        // This is an approximation of the HHCode with a GeoHash\n+        stack.push(GeoHashHelper.fromHHCode(hh, res));\n+      } else {\n+        if (useGtsConvention && GeoTimeSerie.NO_LOCATION == hh) {\n+          stack.push(Double.NaN);\n+          stack.push(Double.NaN);\n+        } else {\n+          double[] latlon = HHCodeHelper.getCenterLatLon(hh, res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73264fd099e4c5f93f390edb89b3b181b2ca03"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTc2Nzg3", "url": "https://github.com/senx/warp10-platform/pull/736#pullrequestreview-394576787", "createdAt": "2020-04-16T12:21:57Z", "commit": {"oid": "6b73264fd099e4c5f93f390edb89b3b181b2ca03"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoyMTo1N1rOGGioBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjozMzowMFrOGGjBfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMTk0MQ==", "bodyText": "Missing javdoc explaining what the method does", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r409511941", "createdAt": "2020-04-16T12:21:57Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -130,4 +128,46 @@ private static Object manageFormat(long hh, int res, Object input) {\n     }\n     return o;\n   }\n+\n+  public static long[] hhAndRes(Object hhcode) throws WarpScriptException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73264fd099e4c5f93f390edb89b3b181b2ca03"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxODQ2Mg==", "bodyText": "This is disturbing since the conversion from a list of arguments does not use the same convention as the conversion from a single argument.\nIt is probably better to introduce new functions which manipulate GEOCELLS rather than piggy back on HHCODE functions.", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r409518462", "createdAt": "2020-04-16T12:33:00Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODETO.java", "diffHunk": "@@ -44,34 +48,56 @@ public HHCODETO(String name, boolean useGtsConvention) {\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n-    Object hhcode = stack.pop();\n+    Object top = stack.pop();\n+\n+    if (top instanceof List) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b73264fd099e4c5f93f390edb89b3b181b2ca03"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "830208a96228355e05313a19ebfde8624d3a7934", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/830208a96228355e05313a19ebfde8624d3a7934", "committedDate": "2020-04-16T15:31:53Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1954ed43cdaa4cb88028e75f524a86227c5d0b55", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/1954ed43cdaa4cb88028e75f524a86227c5d0b55", "committedDate": "2020-04-17T12:03:36Z", "message": "Clearly differenciate functions handling hhcodes from those handling geocells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDI4MDU1", "url": "https://github.com/senx/warp10-platform/pull/736#pullrequestreview-395428055", "createdAt": "2020-04-17T12:55:59Z", "commit": {"oid": "1954ed43cdaa4cb88028e75f524a86227c5d0b55"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjo1NTo1OVrOGHM0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDowMToxNVrOGHPP8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwMzIzNA==", "bodyText": "Why not consider a STRING or BYTES HHCode as a GeoCell here? HHCODETO is more generic than this class to this respect.", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r410203234", "createdAt": "2020-04-17T12:55:59Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLSTO.java", "diffHunk": "@@ -0,0 +1,56 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.GeoXPLib;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class GEOCELLSTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public GEOCELLSTO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof List)) {\n+      throw new WarpScriptException(getName() + \" expects a LIST<LONG> GeoCells.\");\n+    }\n+\n+    ArrayList<Long> cells = new ArrayList<Long>(((List) top).size());\n+\n+    for (Object o: (List) top) {\n+      if (!(o instanceof Long)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1954ed43cdaa4cb88028e75f524a86227c5d0b55"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0MjA1NQ==", "bodyText": "Typo in message.", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r410242055", "createdAt": "2020-04-17T13:59:44Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -130,4 +128,52 @@ private static Object manageFormat(long hh, int res, Object input) {\n     }\n     return o;\n   }\n+\n+  /**\n+   * Convert a HHCode representation to a long hhcode and an int resolution. The resolution is even and between 2 and 32, inclusive.\n+   * @param hhcode The HHCode representation, which may be a String, a byte[] or a Long.\n+   * @return an array of two long, the first being the HHCode and the second being the resolution, which can be safely casted to an int.\n+   * @throws WarpScriptException if the given Object is not a Long, a byte[] of length <= 8 or a String or length <= 16.\n+   */\n+  public static long[] hhAndRes(Object hhcode) throws WarpScriptException {\n+    long hh;\n+    int res;\n+\n+    if (hhcode instanceof Long) {\n+      hh = (long) hhcode;\n+      // We don't know the resolution of a HHCode when represented as a long, assume it's full res.\n+      res = 32;\n+    } else if (hhcode instanceof String) {\n+      String hhstr = hhcode.toString();\n+      // Each character represents 4 bits, so 2 bits per lat or lon.\n+      res = hhstr.length() * 2;\n+\n+      // Make sure the hex string is 16 character-long (64 bits), right-pad with zeros if shorter, throw if longer.\n+      if (hhstr.length() > 16) {\n+        throw new WarpScriptException(\"Hexadecimal HHCode string of must be of length <= 16\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1954ed43cdaa4cb88028e75f524a86227c5d0b55"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0MzA1OA==", "bodyText": "Why keep this here when GEOCELLS-> actually does the job?", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r410243058", "createdAt": "2020-04-17T14:01:15Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODETO.java", "diffHunk": "@@ -44,34 +48,63 @@ public HHCODETO(String name, boolean useGtsConvention) {\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n \n-    Object hhcode = stack.pop();\n+    Object top = stack.pop();\n+\n+    if (top instanceof List) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1954ed43cdaa4cb88028e75f524a86227c5d0b55"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a57496f5aab65f1a17eae3d2a1ca477702c579df", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/a57496f5aab65f1a17eae3d2a1ca477702c579df", "committedDate": "2020-04-22T13:10:23Z", "message": "Introduce conversion functions from/to GeoXPShape and Geo Cells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/80517b25b3b99c431dc6ff072d0c590944aba4f7", "committedDate": "2020-04-22T13:26:12Z", "message": "Add missing javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Mjc2MjM5", "url": "https://github.com/senx/warp10-platform/pull/736#pullrequestreview-405276239", "createdAt": "2020-05-04T19:19:54Z", "commit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToxOTo1NFrOGQOmvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTozMjo0OVrOGQPDdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2OTY5Mg==", "bodyText": "geocell long\nwhose resolution", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419669692", "createdAt": "2020-05-04T19:19:54Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a geo cells long to a String HHCode prefix which resolution is implicitly given by its length.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2OTkxMA==", "bodyText": "geocell", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419669910", "createdAt": "2020-05-04T19:20:19Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a geo cells long to a String HHCode prefix which resolution is implicitly given by its length.\n+ * It cannot convert to a byte[] representation because they are limited to resolutions multiple of 4.\n+ */\n+public class GEOCELLTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public GEOCELLTO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LONG + \" GeoCells.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MDI0OQ==", "bodyText": "This is kind of ugly, mixing a cast and autoboxing. Better to explicitely do ((Long) top).longValue()", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419670249", "createdAt": "2020-05-04T19:20:56Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a geo cells long to a String HHCode prefix which resolution is implicitly given by its length.\n+ * It cannot convert to a byte[] representation because they are limited to resolutions multiple of 4.\n+ */\n+public class GEOCELLTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public GEOCELLTO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LONG + \" GeoCells.\");\n+    }\n+\n+    long geocell = (Long) top;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MDQ1MQ==", "bodyText": "whose resolution", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419670451", "createdAt": "2020-05-04T19:21:19Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a geo cells long to a String HHCode prefix which resolution is implicitly given by its length.\n+ * It cannot convert to a byte[] representation because they are limited to resolutions multiple of 4.\n+ */\n+public class GEOCELLTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public GEOCELLTO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LONG + \" GeoCells.\");\n+    }\n+\n+    long geocell = (Long) top;\n+\n+    stack.push(geocellToHHCodePrefix(geocell));\n+\n+    return stack;\n+  }\n+\n+  /**\n+   * Converts a geo cell (4 bits resolution + 60 bits hhcode) to an HHCode prefix String which resolution is implicitly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MTc1Mw==", "bodyText": "whose resolution", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419671753", "createdAt": "2020-05-04T19:23:39Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a geo cells long to a String HHCode prefix which resolution is implicitly given by its length.\n+ * It cannot convert to a byte[] representation because they are limited to resolutions multiple of 4.\n+ */\n+public class GEOCELLTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public GEOCELLTO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LONG + \" GeoCells.\");\n+    }\n+\n+    long geocell = (Long) top;\n+\n+    stack.push(geocellToHHCodePrefix(geocell));\n+\n+    return stack;\n+  }\n+\n+  /**\n+   * Converts a geo cell (4 bits resolution + 60 bits hhcode) to an HHCode prefix String which resolution is implicitly\n+   * given by the length of the String.\n+   * @param geocell The geo cell to convert.\n+   * @return An HHCode prefix String which resolution is implicitly given by the length of the String. Thus its length is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MjU5MA==", "bodyText": "geocells", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419672590", "createdAt": "2020-05-04T19:25:05Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOSHAPETO.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//    Copyright 2020  SenX S.A.S.\n+//\n+//    Licensed under the Apache License, Version 2.0 (the \"License\");\n+//    you may not use this file except in compliance with the License.\n+//    You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//    Unless required by applicable law or agreed to in writing, software\n+//    distributed under the License is distributed on an \"AS IS\" BASIS,\n+//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//    See the License for the specific language governing permissions and\n+//    limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.GeoXPLib;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Converts a GeoXPShape to a list of geo cell (longs) or HHCode prefixes (strings).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3Mzc3NQ==", "bodyText": "End message with a '.'", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419673775", "createdAt": "2020-05-04T19:27:15Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOGEOCELL.java", "diffHunk": "@@ -0,0 +1,63 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a String or byte[] HHCode prefix to a Long geo cell.\n+ * The resolution of the HHCode String prefix is implicitly given by the length of the String.\n+ */\n+public class TOGEOCELL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public TOGEOCELL(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String) && !(top instanceof byte[])) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_STRING + \" or a \" + TYPEOF.TYPE_BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3Mzg4MA==", "bodyText": "ditto", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419673880", "createdAt": "2020-05-04T19:27:27Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOGEOCELL.java", "diffHunk": "@@ -0,0 +1,63 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a String or byte[] HHCode prefix to a Long geo cell.\n+ * The resolution of the HHCode String prefix is implicitly given by the length of the String.\n+ */\n+public class TOGEOCELL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public TOGEOCELL(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String) && !(top instanceof byte[])) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_STRING + \" or a \" + TYPEOF.TYPE_BYTES);\n+    }\n+\n+    long[] hhAndRes;\n+    try {\n+      hhAndRes = HHCODEFUNC.hhAndRes(top);\n+    } catch (WarpScriptException wse) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_STRING + \" or a \" + TYPEOF.TYPE_BYTES, wse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NDM4Mg==", "bodyText": "((Long) cell).longValue()", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419674382", "createdAt": "2020-05-04T19:28:20Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOGEOSHAPE.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+//    Copyright 2020  SenX S.A.S.\n+//\n+//    Licensed under the Apache License, Version 2.0 (the \"License\");\n+//    you may not use this file except in compliance with the License.\n+//    You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//    Unless required by applicable law or agreed to in writing, software\n+//    distributed under the License is distributed on an \"AS IS\" BASIS,\n+//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//    See the License for the specific language governing permissions and\n+//    limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.GeoXPLib;\n+import com.geoxp.geo.HHCodeHelper;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Converts a list of geo cells (longs) or HHCode prefixes (strings or bytes) to a GeoXPShape.\n+ */\n+public class TOGEOSHAPE extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public TOGEOSHAPE(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof List)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LIST + \" of \" + TYPEOF.TYPE_LONG + \",\" + TYPEOF.TYPE_STRING + \" or \" + TYPEOF.TYPE_BYTES + \" representing geocells.\");\n+    }\n+\n+    List cellList = (List) top;\n+    ArrayList<Long> geocells = new ArrayList<Long>();\n+\n+    long[] hhAndRes;\n+    for (Object cell: cellList) {\n+      long geocell;\n+\n+      if (cell instanceof Long) {\n+        // Explicit GeoCell: 4 bits resolution + 60 bits HHCode.\n+        geocell = (Long) cell;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NTE2OA==", "bodyText": "geocell", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419675168", "createdAt": "2020-05-04T19:29:37Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/GEOCELLTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a geo cells long to a String HHCode prefix which resolution is implicitly given by its length.\n+ * It cannot convert to a byte[] representation because they are limited to resolutions multiple of 4.\n+ */\n+public class GEOCELLTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public GEOCELLTO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LONG + \" GeoCells.\");\n+    }\n+\n+    long geocell = (Long) top;\n+\n+    stack.push(geocellToHHCodePrefix(geocell));\n+\n+    return stack;\n+  }\n+\n+  /**\n+   * Converts a geo cell (4 bits resolution + 60 bits hhcode) to an HHCode prefix String which resolution is implicitly\n+   * given by the length of the String.\n+   * @param geocell The geo cell to convert.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NjQ3Mw==", "bodyText": "geocells", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419676473", "createdAt": "2020-05-04T19:31:44Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOGEOSHAPE.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+//    Copyright 2020  SenX S.A.S.\n+//\n+//    Licensed under the Apache License, Version 2.0 (the \"License\");\n+//    you may not use this file except in compliance with the License.\n+//    You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//    Unless required by applicable law or agreed to in writing, software\n+//    distributed under the License is distributed on an \"AS IS\" BASIS,\n+//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//    See the License for the specific language governing permissions and\n+//    limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.GeoXPLib;\n+import com.geoxp.geo.HHCodeHelper;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Converts a list of geo cells (longs) or HHCode prefixes (strings or bytes) to a GeoXPShape.\n+ */\n+public class TOGEOSHAPE extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public TOGEOSHAPE(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof List)) {\n+      throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LIST + \" of \" + TYPEOF.TYPE_LONG + \",\" + TYPEOF.TYPE_STRING + \" or \" + TYPEOF.TYPE_BYTES + \" representing geocells.\");\n+    }\n+\n+    List cellList = (List) top;\n+    ArrayList<Long> geocells = new ArrayList<Long>();\n+\n+    long[] hhAndRes;\n+    for (Object cell: cellList) {\n+      long geocell;\n+\n+      if (cell instanceof Long) {\n+        // Explicit GeoCell: 4 bits resolution + 60 bits HHCode.\n+        geocell = (Long) cell;\n+      } else if (cell instanceof String || cell instanceof byte[]) {\n+        // Implicit GeoCell: resolution is defined by the length of the String or byte[]\n+        try {\n+          hhAndRes = HHCODEFUNC.hhAndRes(cell);\n+        } catch (WarpScriptException wse) {\n+          throw new WarpScriptException(getName() + \" expects the given list to contain valid STRING or BYTES HHCodes.\", wse);\n+        }\n+        long hh = hhAndRes[0];\n+        int res = (int) hhAndRes[1]; // We know hhAndRes returns an int here.\n+\n+        geocell = HHCodeHelper.toGeoCell(hh, res);\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects a \" + TYPEOF.TYPE_LIST + \" of \" + TYPEOF.TYPE_LONG + \",\" + TYPEOF.TYPE_STRING + \" or \" + TYPEOF.TYPE_BYTES + \" representing geocells.\");\n+      }\n+\n+      // Check cell is valid\n+      if (0 == (geocell >>> 60)) {\n+        throw new WarpScriptException(getName() + \" expects geo cells resolutions to be even and between 2 and 30, inclusive.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NzA0NA==", "bodyText": "This is not equivalent, Long.toHexString may produce strings shorter than 16 bytes.", "url": "https://github.com/senx/warp10-platform/pull/736#discussion_r419677044", "createdAt": "2020-05-04T19:32:49Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOHHCODE.java", "diffHunk": "@@ -72,13 +69,13 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     }\n \n     if (this.tostring) {\n-      String hhcode = Hex.encodeHexString(Longs.toByteArray(geoxppoint));\n-    \n+      String hhcode = Long.toHexString(geoxppoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80517b25b3b99c431dc6ff072d0c590944aba4f7"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6dbfbb2cf3771426c1166e6a9571bb37cadc73", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/af6dbfbb2cf3771426c1166e6a9571bb37cadc73", "committedDate": "2020-05-05T10:03:09Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Njg3ODU2", "url": "https://github.com/senx/warp10-platform/pull/736#pullrequestreview-405687856", "createdAt": "2020-05-05T11:07:00Z", "commit": {"oid": "af6dbfbb2cf3771426c1166e6a9571bb37cadc73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}