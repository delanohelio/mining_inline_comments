{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzUyMTAy", "number": 642, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Mzo0NlrODaedbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo0NzozNVrODagjiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDg4NjIzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Mzo0NlrOFhcxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Mzo0NlrOFhcxKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxODY2NA==", "bodyText": "This should not be a field, it should be a local variable updated for each invocation of the function", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370618664", "createdAt": "2020-01-24T12:53:46Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,138 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+  private boolean isLongFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1389db2a42a5161aa6d6752f298035654d66c118"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDg4Nzk5OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NDoyOFrOFhcyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NDoyOFrOFhcyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxODkzOQ==", "bodyText": "Don't reference the stack, and in the present case this would be only 2 elements.", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370618939", "createdAt": "2020-01-24T12:54:28Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,138 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+  private boolean isLongFormat;\n+  private int res;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+    this.isLongFormat = true;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30) and a boolean as the top 3 elements of the stack.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1389db2a42a5161aa6d6752f298035654d66c118"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDg4ODcxOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NDo0OVrOFhcysA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NDo0OVrOFhcysA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTA1Ng==", "bodyText": "use a local variable", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370619056", "createdAt": "2020-01-24T12:54:49Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,138 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+  private boolean isLongFormat;\n+  private int res;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+    this.isLongFormat = true;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30) and a boolean as the top 3 elements of the stack.\");\n+    }\n+\n+    res = ((Number) o).intValue();\n+\n+    if (0 != res && (res < 2 || res > 30 || (0 != (res & 1)))) {\n+      throw new WarpScriptException(getName() + \" expects a maximum resolution which is an even number between 2 and 30 or 0.\");\n+    }\n+\n+\n+    Object hhcode = stack.pop();\n+\n+    long hh;\n+    this.isLongFormat = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1389db2a42a5161aa6d6752f298035654d66c118"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDg5MTI3OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NTo0OFrOFhc0Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NTo0OFrOFhc0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTQ1NA==", "bodyText": "Same goes for res, make it a local variable", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370619454", "createdAt": "2020-01-24T12:55:48Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,138 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+  private boolean isLongFormat;\n+  private int res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1389db2a42a5161aa6d6752f298035654d66c118"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDg5NDg1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NzoxMFrOFhc2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NzoxMFrOFhc2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTk3Mw==", "bodyText": "drop reference of isLongFormat, simply return a long and in apply convert to string at the given resolution if the input was a string", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370619973", "createdAt": "2020-01-24T12:57:10Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,138 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+  private boolean isLongFormat;\n+  private int res;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+    this.isLongFormat = true;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30) and a boolean as the top 3 elements of the stack.\");\n+    }\n+\n+    res = ((Number) o).intValue();\n+\n+    if (0 != res && (res < 2 || res > 30 || (0 != (res & 1)))) {\n+      throw new WarpScriptException(getName() + \" expects a maximum resolution which is an even number between 2 and 30 or 0.\");\n+    }\n+\n+\n+    Object hhcode = stack.pop();\n+\n+    long hh;\n+    this.isLongFormat = true;\n+\n+    if (hhcode instanceof Long) {\n+      hh = (long) hhcode;\n+    } else if (hhcode instanceof String) {\n+      String hhstr = hhcode.toString();\n+      if (hhstr.length() > 16) {\n+        throw new WarpScriptException(getName() + \" expects an hexadecimal HHCode string of length <= 16\");\n+      } else if (hhstr.length() < 16) {\n+        hhcode = new StringBuilder(hhstr).append(\"0000000000000000\");\n+        ((StringBuilder) hhcode).setLength(16);\n+      }\n+      hh = Long.parseUnsignedLong(hhcode.toString(), 16);\n+      this.isLongFormat = false;\n+    } else if (hhcode instanceof byte[]) {\n+      hh = Longs.fromByteArray((byte[]) hhcode);\n+    } else {\n+      throw new WarpScriptException(getName() + \" expects a long, a string or a byte array.\");\n+    }\n+\n+    switch (this.action) {\n+      case NORTH:\n+        stack.push(this.manageFormat(HHCodeHelper.northHHCode(hh, this.res)));\n+        break;\n+      case SOUTH:\n+        stack.push(this.manageFormat(HHCodeHelper.southHHCode(hh, this.res)));\n+        break;\n+      case EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.eastHHCode(hh, this.res)));\n+        break;\n+      case WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.westHHCode(hh, this.res)));\n+        break;\n+      case NORTH_EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.northEastHHCode(hh, this.res)));\n+        break;\n+      case NORTH_WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.northWestHHCode(hh, this.res)));\n+        break;\n+      case SOUTH_EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.southEastHHCode(hh, this.res)));\n+        break;\n+      case SOUTH_WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.southWestHHCode(hh, this.res)));\n+        break;\n+      case BBOX:\n+        double[] bbox = HHCodeHelper.getHHCodeBBox(hh, this.res);\n+        stack.push(bbox[0]);\n+        stack.push(bbox[1]);\n+        stack.push(bbox[2]);\n+        stack.push(bbox[3]);\n+        break;\n+      case CENTER:\n+        double[] latlon = HHCodeHelper.getCenterLatLon(hh, this.res);\n+        stack.push(latlon[0]);\n+        stack.push(latlon[1]);\n+        break;\n+      default:\n+        throw new WarpScriptException(\"Unknown HHCODE action\");\n+    }\n+\n+    return stack;\n+  }\n+\n+  private Object manageFormat(long hh) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1389db2a42a5161aa6d6752f298035654d66c118"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA3OTM5OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjowOFrOFheidQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo0MTowM1rOFhfv0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NzY2OQ==", "bodyText": "Actually since you accept either LONG, STRING or BYTES as input it would be more logical to output a byte array if the input was a byte array. So instead of passing isLongFormat, why not simply pass the input and check its type in manageFormat?", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370647669", "createdAt": "2020-01-24T14:02:08Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,135 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30).\");\n+    }\n+\n+    int res = ((Number) o).intValue();\n+\n+    if (0 != res && (res < 2 || res > 30 || (0 != (res & 1)))) {\n+      throw new WarpScriptException(getName() + \" expects a maximum resolution which is an even number between 2 and 30 or 0.\");\n+    }\n+\n+\n+    Object hhcode = stack.pop();\n+\n+    long hh;\n+    boolean isLongFormat = true;\n+\n+    if (hhcode instanceof Long) {\n+      hh = (long) hhcode;\n+    } else if (hhcode instanceof String) {\n+      String hhstr = hhcode.toString();\n+      if (hhstr.length() > 16) {\n+        throw new WarpScriptException(getName() + \" expects an hexadecimal HHCode string of length <= 16\");\n+      } else if (hhstr.length() < 16) {\n+        hhcode = new StringBuilder(hhstr).append(\"0000000000000000\");\n+        ((StringBuilder) hhcode).setLength(16);\n+      }\n+      hh = Long.parseUnsignedLong(hhcode.toString(), 16);\n+      isLongFormat = false;\n+    } else if (hhcode instanceof byte[]) {\n+      hh = Longs.fromByteArray((byte[]) hhcode);\n+    } else {\n+      throw new WarpScriptException(getName() + \" expects a long, a string or a byte array.\");\n+    }\n+\n+    switch (this.action) {\n+      case NORTH:\n+        stack.push(this.manageFormat(HHCodeHelper.northHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case SOUTH:\n+        stack.push(this.manageFormat(HHCodeHelper.southHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.eastHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.westHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case NORTH_EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.northEastHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case NORTH_WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.northWestHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case SOUTH_EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.southEastHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case SOUTH_WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.southWestHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case BBOX:\n+        double[] bbox = HHCodeHelper.getHHCodeBBox(hh, res);\n+        stack.push(bbox[0]);\n+        stack.push(bbox[1]);\n+        stack.push(bbox[2]);\n+        stack.push(bbox[3]);\n+        break;\n+      case CENTER:\n+        double[] latlon = HHCodeHelper.getCenterLatLon(hh, res);\n+        stack.push(latlon[0]);\n+        stack.push(latlon[1]);\n+        break;\n+      default:\n+        throw new WarpScriptException(\"Unknown HHCODE action\");\n+    }\n+\n+    return stack;\n+  }\n+\n+  private Object manageFormat(long hh, int res, boolean isLongFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104c793a1803ded3fc80779163563afd89a976ae"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NzQ3Mg==", "bodyText": "done", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370667472", "createdAt": "2020-01-24T14:41:03Z", "author": {"login": "steven-gueguen"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,135 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30).\");\n+    }\n+\n+    int res = ((Number) o).intValue();\n+\n+    if (0 != res && (res < 2 || res > 30 || (0 != (res & 1)))) {\n+      throw new WarpScriptException(getName() + \" expects a maximum resolution which is an even number between 2 and 30 or 0.\");\n+    }\n+\n+\n+    Object hhcode = stack.pop();\n+\n+    long hh;\n+    boolean isLongFormat = true;\n+\n+    if (hhcode instanceof Long) {\n+      hh = (long) hhcode;\n+    } else if (hhcode instanceof String) {\n+      String hhstr = hhcode.toString();\n+      if (hhstr.length() > 16) {\n+        throw new WarpScriptException(getName() + \" expects an hexadecimal HHCode string of length <= 16\");\n+      } else if (hhstr.length() < 16) {\n+        hhcode = new StringBuilder(hhstr).append(\"0000000000000000\");\n+        ((StringBuilder) hhcode).setLength(16);\n+      }\n+      hh = Long.parseUnsignedLong(hhcode.toString(), 16);\n+      isLongFormat = false;\n+    } else if (hhcode instanceof byte[]) {\n+      hh = Longs.fromByteArray((byte[]) hhcode);\n+    } else {\n+      throw new WarpScriptException(getName() + \" expects a long, a string or a byte array.\");\n+    }\n+\n+    switch (this.action) {\n+      case NORTH:\n+        stack.push(this.manageFormat(HHCodeHelper.northHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case SOUTH:\n+        stack.push(this.manageFormat(HHCodeHelper.southHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.eastHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.westHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case NORTH_EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.northEastHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case NORTH_WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.northWestHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case SOUTH_EAST:\n+        stack.push(this.manageFormat(HHCodeHelper.southEastHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case SOUTH_WEST:\n+        stack.push(this.manageFormat(HHCodeHelper.southWestHHCode(hh, res), res, isLongFormat));\n+        break;\n+      case BBOX:\n+        double[] bbox = HHCodeHelper.getHHCodeBBox(hh, res);\n+        stack.push(bbox[0]);\n+        stack.push(bbox[1]);\n+        stack.push(bbox[2]);\n+        stack.push(bbox[3]);\n+        break;\n+      case CENTER:\n+        double[] latlon = HHCodeHelper.getCenterLatLon(hh, res);\n+        stack.push(latlon[0]);\n+        stack.push(latlon[1]);\n+        break;\n+      default:\n+        throw new WarpScriptException(\"Unknown HHCODE action\");\n+    }\n+\n+    return stack;\n+  }\n+\n+  private Object manageFormat(long hh, int res, boolean isLongFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NzY2OQ=="}, "originalCommit": {"oid": "104c793a1803ded3fc80779163563afd89a976ae"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTIyOTUyOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo0NzozNVrOFhf9KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDo1Nzo0OVrOFhgSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MDg4OQ==", "bodyText": "Actually for a HHCode resolution can be up to 32, it is only for cells in a GeoXPShape that resolution is limited to 30.", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370670889", "createdAt": "2020-01-24T14:47:35Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,135 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30).\");\n+    }\n+\n+    int res = ((Number) o).intValue();\n+\n+    if (0 != res && (res < 2 || res > 30 || (0 != (res & 1)))) {\n+      throw new WarpScriptException(getName() + \" expects a maximum resolution which is an even number between 2 and 30 or 0.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56888547ea8a92b0459518fb6332da2177f86e35"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3NjM2NQ==", "bodyText": "done", "url": "https://github.com/senx/warp10-platform/pull/642#discussion_r370676365", "createdAt": "2020-01-24T14:57:49Z", "author": {"login": "steven-gueguen"}, "path": "warp10/src/main/java/io/warp10/script/functions/HHCODEFUNC.java", "diffHunk": "@@ -0,0 +1,135 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import com.geoxp.geo.HHCodeHelper;\n+import com.google.common.primitives.Longs;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Template function to interface with HHCodeHelper\n+ */\n+public class HHCODEFUNC extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public enum HHCodeAction {\n+    NORTH, SOUTH, EAST, WEST, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, BBOX, CENTER\n+  }\n+\n+  private HHCodeAction action;\n+\n+  public HHCODEFUNC(String name, HHCodeAction action) {\n+    super(name);\n+    this.action = action;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+\n+    if (!(o instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects resolution (even number between 2 and 30).\");\n+    }\n+\n+    int res = ((Number) o).intValue();\n+\n+    if (0 != res && (res < 2 || res > 30 || (0 != (res & 1)))) {\n+      throw new WarpScriptException(getName() + \" expects a maximum resolution which is an even number between 2 and 30 or 0.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MDg4OQ=="}, "originalCommit": {"oid": "56888547ea8a92b0459518fb6332da2177f86e35"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1285, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}