{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzUwMTIw", "number": 637, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1NToyOVrODaKNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTozODoyMVrODaNz8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzU2ODMzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1NToyOVrOFg9JlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1NToyOVrOFg9JlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMDYyOA==", "bodyText": "use this.min/this.max", "url": "https://github.com/senx/warp10-platform/pull/637#discussion_r370100628", "createdAt": "2020-01-23T12:55:29Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterBySize extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+    static private final String MIN = \"min\";\n+    static private final String MAX = \"max\";\n+\n+    private final Long min;\n+    private final Long max;\n+\n+    public static class Builder extends FormattedWarpScriptFunction {\n+\n+        private final Arguments args;\n+\n+        public Builder(String name) {\n+            super(name);\n+\n+            args = new ArgumentsBuilder()\n+                    .addArgument(Long.class, MIN, \"The minimum size.\")\n+                    .addArgument(Long.class, MAX, \"The maximum size.\")\n+                    .build();\n+        }\n+\n+        @Override\n+        protected Arguments getArguments() {\n+            return args;\n+        }\n+\n+        @Override\n+        protected WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+            Long min = (Long) formattedArgs.get(MIN);\n+            Long max = (Long) formattedArgs.get(MAX);\n+            stack.push(new FilterBySize(getName(), min, max));\n+            return stack;\n+        }\n+    }\n+\n+    public FilterBySize(String name, Long min, Long max) throws WarpScriptException {\n+        super(name);\n+        this.min = min;\n+        this.max = max;\n+    }\n+\n+    @Override\n+    public List<GeoTimeSerie> filter(Map<String, String> labels, List<GeoTimeSerie>... series) throws WarpScriptException {\n+\n+        List<GeoTimeSerie> retained = new ArrayList<GeoTimeSerie>();\n+\n+        for (List<GeoTimeSerie> serie: series) {\n+            for (GeoTimeSerie gts: serie) {\n+                if (gts.size() >= min && gts.size() <= max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d803dc3af2f23dd40e8d99aa20f9705f4b520454"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzU3Mzk0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1NzoyOVrOFg9NCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1NzoyOVrOFg9NCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMTUxMw==", "bodyText": "Make those primitive type. They can actually be int since the size of a GTS is an int, not a long.", "url": "https://github.com/senx/warp10-platform/pull/637#discussion_r370101513", "createdAt": "2020-01-23T12:57:29Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterBySize extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+    static private final String MIN = \"min\";\n+    static private final String MAX = \"max\";\n+\n+    private final Long min;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d803dc3af2f23dd40e8d99aa20f9705f4b520454"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzU3NTAwOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1Nzo1M1rOFg9Nug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1Nzo1M1rOFg9Nug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMTY5MA==", "bodyText": "Overall indentation is 2 spaces", "url": "https://github.com/senx/warp10-platform/pull/637#discussion_r370101690", "createdAt": "2020-01-23T12:57:53Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d803dc3af2f23dd40e8d99aa20f9705f4b520454"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Nzc2OTYwOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo1ODo0MFrOFg_CNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo1ODo0MFrOFg_CNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMTUwOA==", "bodyText": "Use int and ((Long) ....).intValue()", "url": "https://github.com/senx/warp10-platform/pull/637#discussion_r370131508", "createdAt": "2020-01-23T13:58:40Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterBySize extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+  static private final String MIN = \"min\";\n+  static private final String MAX = \"max\";\n+\n+  private final int min;\n+  private final int max;\n+\n+  public static class Builder extends FormattedWarpScriptFunction {\n+\n+    private final Arguments args;\n+\n+    public Builder(String name) {\n+      super(name);\n+\n+      args = new ArgumentsBuilder()\n+        .addArgument(Long.class, MIN, \"The minimum size.\")\n+        .addArgument(Long.class, MAX, \"The maximum size.\")\n+        .build();\n+    }\n+\n+    @Override\n+    protected Arguments getArguments() {\n+      return args;\n+    }\n+\n+    @Override\n+    protected WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+      Long min = (Long) formattedArgs.get(MIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0a495234613132333c2bf121926aab413501043"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE1ODU4OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTozODoyMVrOFhCwrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTozODoyMVrOFhCwrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5MjU1OQ==", "bodyText": "Missing a space between the two numeric parameters", "url": "https://github.com/senx/warp10-platform/pull/637#discussion_r370192559", "createdAt": "2020-01-23T15:38:21Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/filter/FilterBySize.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.filter;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptFilterFunction;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FilterBySize extends NamedWarpScriptFunction implements WarpScriptFilterFunction {\n+  static private final String MIN = \"min\";\n+  static private final String MAX = \"max\";\n+\n+  private final int min;\n+  private final int max;\n+\n+  public static class Builder extends FormattedWarpScriptFunction {\n+\n+    private final Arguments args;\n+\n+    public Builder(String name) {\n+      super(name);\n+\n+      args = new ArgumentsBuilder()\n+        .addArgument(Long.class, MIN, \"The minimum size.\")\n+        .addArgument(Long.class, MAX, \"The maximum size.\")\n+        .build();\n+    }\n+\n+    @Override\n+    protected Arguments getArguments() {\n+      return args;\n+    }\n+\n+    @Override\n+    protected WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+      int min = ((Long) formattedArgs.get(MIN)).intValue();\n+      int max = ((Long) formattedArgs.get(MAX)).intValue();\n+      stack.push(new FilterBySize(getName(), min, max));\n+      return stack;\n+    }\n+  }\n+\n+  public FilterBySize(String name, int min, int max) throws WarpScriptException {\n+    super(name);\n+    this.min = min;\n+    this.max = max;\n+  }\n+\n+  @Override\n+  public List<GeoTimeSerie> filter(Map<String, String> labels, List<GeoTimeSerie>... series) throws WarpScriptException {\n+\n+    List<GeoTimeSerie> retained = new ArrayList<GeoTimeSerie>();\n+\n+    for (List<GeoTimeSerie> serie: series) {\n+      for (GeoTimeSerie gts: serie) {\n+        if (gts.size() >= this.min && gts.size() <= this.max) {\n+          retained.add(gts);\n+        }\n+      }\n+    }\n+\n+    return retained;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(StackUtils.toString(this.min));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc9b7a1234ca12d8d792e90766f79557e2d525fa"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1281, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}