{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTQ3OTA0", "number": 686, "title": "Added support for listing and aborting WarpScript executions", "bodyText": "", "createdAt": "2020-03-07T14:05:08Z", "url": "https://github.com/senx/warp10-platform/pull/686", "merged": true, "mergeCommit": {"oid": "09956bdd3ff7f8f31c05d040ce10788591029528"}, "closed": true, "closedAt": "2020-03-31T20:10:08Z", "author": {"login": "hbs"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLVOH-gH2gAyMzg1MTQ3OTA0OjgxMmQzNzQ2NTY1OGU4ZDMwOWRhYzIwNWFlZGI1YmNmZGIyNzdkMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTIySugFqTM4NTA2MzQxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "812d37465658e8d309dac205aedb5bcfdb277d28", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/812d37465658e8d309dac205aedb5bcfdb277d28", "committedDate": "2020-03-07T14:02:41Z", "message": "Initial commit of StackPS extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8051f4c690a33e423ce33a2570cda0f681c797cf", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/8051f4c690a33e423ce33a2570cda0f681c797cf", "committedDate": "2020-03-07T14:03:48Z", "message": "Fixed copyright notice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f1afd24f970948976473f7378f2ae013fdd93c", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/03f1afd24f970948976473f7378f2ae013fdd93c", "committedDate": "2020-03-07T17:47:11Z", "message": "Added missing registry file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd8f287867c3849231dc39928fa04886324798b1", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/fd8f287867c3849231dc39928fa04886324798b1", "committedDate": "2020-03-08T16:47:27Z", "message": "Initial commit of WSNAME"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5140b9bc18cb7274b395f548fb4f657f3baefa0e", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/5140b9bc18cb7274b395f548fb4f657f3baefa0e", "committedDate": "2020-03-09T09:43:32Z", "message": "Added support for session aborts."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDkzNjgw", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-376093680", "createdAt": "2020-03-17T14:35:24Z", "commit": {"oid": "5140b9bc18cb7274b395f548fb4f657f3baefa0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNToyNFrOF3fGWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNjoxN1rOF3g6xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTUzMA==", "bodyText": "That's great, but could be greater : is it possible to pass the session attribute_name and the attribute_session in a req.header ?\nWith this mecanism, both VScode and WarpStudio can inject meaningful headers automatically, and will be able to abort the current session easily. I already developed the function to stop everything, it will be easy to add a uuid session name at startup, and a request to abort scripts:\n\nBoth new headers name should be hardcoded, to avoid too much settings both in Warp 10 and WarpScript tooling.\nKeep this default name if there is no headers in request.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393725530", "createdAt": "2020-03-17T14:35:24Z", "author": {"login": "pi-r-p"}, "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressExecHandler.java", "diffHunk": "@@ -138,7 +139,8 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H\n     //\n     \n     WarpScriptStack stack = new MemoryWarpScriptStack(this.storeClient, this.directoryClient);\n-\n+    stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[EgressExecHandler \" + Thread.currentThread().getName() + \"]\");\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5140b9bc18cb7274b395f548fb4f657f3baefa0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTMzMw==", "bodyText": "Why isn't session name a property of the stack, just like attribute_name ?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393755333", "createdAt": "2020-03-17T15:16:17Z", "author": {"login": "pi-r-p"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStackRegistry;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class StackPSWarpScriptExtension extends WarpScriptExtension {\n+  /*\n+   *  Name of configuration key with the stackps secret. \n+   */\n+  public static final String CONF_STACKPS_SECRET = \"stackps.secret\";\n+  \n+  /**\n+   * Current StackPS Secret\n+   */\n+  public static String STACKPS_SECRET;  \n+\n+  public static final String ATTRIBUTE_SESSION = \"stackps.session\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5140b9bc18cb7274b395f548fb4f657f3baefa0e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd948797b71830d5fff4e6bd3de1de062a82fc5", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/fcd948797b71830d5fff4e6bd3de1de062a82fc5", "committedDate": "2020-03-19T10:28:13Z", "message": "Added possibility to set session via HTTP header. Ignore overwriting session"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzU0Mzk1", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-377754395", "createdAt": "2020-03-19T14:09:36Z", "commit": {"oid": "fcd948797b71830d5fff4e6bd3de1de062a82fc5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowOTozN1rOF4wHlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMjoxNVrOF4wPHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1Mjk1MA==", "bodyText": "also add session here\nresult.add(stck.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION));", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395052950", "createdAt": "2020-03-19T14:09:37Z", "author": {"login": "pi-r-p"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSPS extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSPS(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {\n+      Object top = stack.pop();\n+      \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+    }      \n+\n+    List<Object> results = new ArrayList<Object>();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      List<Object> result = new ArrayList<Object>();\n+      \n+      result.add(stck.getUUID());\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_CREATION_TIME));\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_NAME));\n+      results.add(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd948797b71830d5fff4e6bd3de1de062a82fc5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NDg3OA==", "bodyText": "Will be better to replace the list output by a list of map, with keys such as \"session_name\" \"warpscript_name\" and so on. It allows greater flexibility in the future, and easier javascript reading for guys who will code frontend.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395054878", "createdAt": "2020-03-19T14:12:15Z", "author": {"login": "pi-r-p"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSPS extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSPS(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {\n+      Object top = stack.pop();\n+      \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+    }      \n+\n+    List<Object> results = new ArrayList<Object>();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      List<Object> result = new ArrayList<Object>();\n+      \n+      result.add(stck.getUUID());\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_CREATION_TIME));\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_NAME));\n+      results.add(result);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd948797b71830d5fff4e6bd3de1de062a82fc5"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8ca16277e3fe90819d55115a8adb1d27aa53eb", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/bc8ca16277e3fe90819d55115a8adb1d27aa53eb", "committedDate": "2020-03-19T14:21:00Z", "message": "Changed result of WSPS to be a list of maps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e41d7181580b0862688dbf700dfd9fc81d60955", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/4e41d7181580b0862688dbf700dfd9fc81d60955", "committedDate": "2020-03-19T14:29:44Z", "message": "Added section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56ff25571454f6993e74e1c9a68ff99fcb9b2651", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/56ff25571454f6993e74e1c9a68ff99fcb9b2651", "committedDate": "2020-03-19T14:38:31Z", "message": "Factorized info extraction between WSINFO and WSPS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODExMDg0", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-377811084", "createdAt": "2020-03-19T15:07:07Z", "commit": {"oid": "56ff25571454f6993e74e1c9a68ff99fcb9b2651"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowNzowOFrOF4y14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowNzowOFrOF4y14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NzU3MQ==", "bodyText": "Missing:\nStackPSWarpScriptExtension.ATTRIBUTE_SESSION\n(could be relocated in WarpScriptStack maybe ?)", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395097571", "createdAt": "2020-03-19T15:07:08Z", "author": {"login": "pi-r-p"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public static final String[] EXPOSED_ATTRIBUTES = new String[] {\n+      WarpScriptStack.ATTRIBUTE_CREATION_TIME,\n+      WarpScriptStack.ATTRIBUTE_FETCH_COUNT,\n+      WarpScriptStack.ATTRIBUTE_GTS_COUNT,\n+      WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n+      WarpScriptStack.ATTRIBUTE_NAME,\n+      WarpScriptStack.ATTRIBUTE_SECTION_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ff25571454f6993e74e1c9a68ff99fcb9b2651"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "committedDate": "2020-03-19T15:30:31Z", "message": "Added SESSION"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f324bb7868203a0de55ef5f3de2a5da73dfaacb7", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/f324bb7868203a0de55ef5f3de2a5da73dfaacb7", "committedDate": "2020-03-23T20:38:24Z", "message": "Commented out secret checking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODMzNDIy", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-379833422", "createdAt": "2020-03-23T21:23:50Z", "commit": {"oid": "f324bb7868203a0de55ef5f3de2a5da73dfaacb7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjE3Mzcz", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-379617373", "createdAt": "2020-03-23T16:46:36Z", "commit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NjozN1rOF6OZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MDo0NVrOF6zc6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NzU0OQ==", "bodyText": "Missing WarpScriptStackRegistry.unregister(stack) for this registration.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396597549", "createdAt": "2020-03-23T16:46:37Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java", "diffHunk": "@@ -67,6 +68,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n     baseRequest.setHandled(true);\n \n     MemoryWarpScriptStack stack = new MemoryWarpScriptStack(HTTPWarp10Plugin.getExposedStoreClient(), HTTPWarp10Plugin.getExposedDirectoryClient(), this.properties);\n+    stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[HTTPWarp10Plugin \" + request.getRequestURL() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODI1OA==", "bodyText": "Missing WarpScriptStackRegistry.unregister(stack) for this registration.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396608258", "createdAt": "2020-03-23T17:01:24Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/plugins/tcp/TCPClient.java", "diffHunk": "@@ -56,6 +57,7 @@\n \n     this.reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), charset));\n     this.stack = new MemoryWarpScriptStack(null, null, new Properties());\n+    this.stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10TCPPlugin \" + socket.getLocalPort() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTI3OA==", "bodyText": "Extra spaces to be removed.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396609278", "createdAt": "2020-03-23T17:02:51Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressMobiusHandler.java", "diffHunk": "@@ -454,7 +458,7 @@ public void run() {\n           \n           pw.flush();\n           \n-          fsession.getRemote().sendStringByFuture(sw.toString());\n+          fsession.getRemote().sendStringByFuture(sw.toString());          ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzk2MQ==", "bodyText": "stack, not this.stack.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396623961", "createdAt": "2020-03-23T17:23:51Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java", "diffHunk": "@@ -155,6 +156,7 @@ public void run() {\n     for (int i = 0; i < this.parallelism; i++) {\n \n       final MemoryWarpScriptStack stack = new MemoryWarpScriptStack(null, null, new Properties());\n+      this.stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10UDPPlugin \" + socket.getLocalPort() + \" #\" + i + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjI5MQ==", "bodyText": "I think this.aborted should be reset to false in order to be able to reuse this stack. For instance, UDP or TCP stacks are persistent so aborting a stack will make all subsequent exec early abort.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396626291", "createdAt": "2020-03-23T17:27:16Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -562,6 +571,10 @@ public void exec(String line) throws WarpScriptException {\n       //\n \n       for (int st = 0; st < statements.length; st++) {\n+        if (this.aborted) {\n+          throw new WarpScriptException(\"Execution aborted.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjUyMQ==", "bodyText": "Ditto.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396626521", "createdAt": "2020-03-23T17:27:36Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -940,6 +953,10 @@ public void exec(Macro macro) throws WarpScriptException {\n \n       for (i = 0; i < n; i++) {        \n \n+        if (this.aborted) {\n+          throw new WarpScriptException(\"Execution aborted.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNzk1NQ==", "bodyText": "Also, not unregistered but as these stacks are meant to live during all the lifetime of the platform, this is not that important.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396627955", "createdAt": "2020-03-23T17:29:33Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java", "diffHunk": "@@ -155,6 +156,7 @@ public void run() {\n     for (int i = 0; i < this.parallelism; i++) {\n \n       final MemoryWarpScriptStack stack = new MemoryWarpScriptStack(null, null, new Properties());\n+      this.stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10UDPPlugin \" + socket.getLocalPort() + \" #\" + i + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzk2MQ=="}, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMzQ0OA==", "bodyText": "Missing WarpScriptStackRegistry.unregister(stack) for this registration.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396633448", "createdAt": "2020-03-23T17:37:39Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/WarpScriptExecutor.java", "diffHunk": "@@ -219,6 +219,7 @@ private void initStack() {\n       @Override\n       protected WarpScriptStack initialValue() {\n         MemoryWarpScriptStack stack = new MemoryWarpScriptStack(null, null, properties);\n+        stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[WarpScriptExecutor \" + semantics.name() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTE1Ng==", "bodyText": "Missing copyright notice.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396635156", "createdAt": "2020-03-23T17:40:19Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.warp10.script;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTgyNw==", "bodyText": "Could fail if a stack has not been unregistered but has been garbage collected.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396635827", "createdAt": "2020-03-23T17:41:23Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.warp10.script;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.ext.stackps.StackPSWarpScriptExtension;\n+\n+public class WarpScriptStackRegistry {\n+  \n+  private static final Map<String,WeakReference<WarpScriptStack>> stacks = new HashMap<String,WeakReference<WarpScriptStack>>();\n+  \n+  private static boolean enabled = false;\n+  \n+  public static void register(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return;\n+    }\n+    stacks.put(stack.getUUID(), new WeakReference<WarpScriptStack>(stack));\n+  }\n+  \n+  public static boolean unregister(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return false;\n+    }\n+    return null != stacks.remove(stack.getUUID());\n+  }\n+  \n+  public static boolean unregister(String uuid) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    return null != stacks.remove(uuid);\n+  }\n+  \n+  public static boolean abort(String uuid) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    \n+    WeakReference<WarpScriptStack> stackref = stacks.get(uuid);\n+    \n+    if (null == stackref) {\n+      return false;\n+    }\n+    \n+    stackref.get().abort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNTU3NA==", "bodyText": "It would better to create and expose a WarpScriptStackRegistry.getStack(String uuid) to take advantage of the underlying Map.\nAlso be careful that WeakReference.get() could return null if the stack has not been unregistered but GCed.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397035574", "createdAt": "2020-03-24T10:07:56Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java", "diffHunk": "@@ -0,0 +1,97 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public static final String[] EXPOSED_ATTRIBUTES = new String[] {\n+      WarpScriptStack.ATTRIBUTE_CREATION_TIME,\n+      WarpScriptStack.ATTRIBUTE_FETCH_COUNT,\n+      WarpScriptStack.ATTRIBUTE_GTS_COUNT,\n+      WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n+      WarpScriptStack.ATTRIBUTE_NAME,\n+      WarpScriptStack.ATTRIBUTE_SECTION_NAME,\n+      StackPSWarpScriptExtension.ATTRIBUTE_SESSION,\n+  };\n+  \n+  public WSINFO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {     \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+      \n+      top = stack.pop();\n+    }      \n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a UUID.\");\n+    }\n+    \n+    Map<Object,Object> infos = null;\n+\n+    String uuid = top.toString();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      if (uuid.equals(stck.getUUID())) {\n+        infos = getInfos(stck);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNjU1OQ==", "bodyText": "stck can be null if not unregistered and GCed.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397036559", "createdAt": "2020-03-24T10:09:40Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSPS extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public WSPS(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {\n+      Object top = stack.pop();\n+      \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+    }      \n+\n+    List<Object> results = new ArrayList<Object>();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      Map<Object,Object> result = WSINFO.getInfos(stck);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MjcwMQ==", "bodyText": "Why not simply (String)top?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397042701", "createdAt": "2020-03-24T10:19:59Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/STACKPSSECRET.java", "diffHunk": "@@ -0,0 +1,55 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class STACKPSSECRET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public STACKPSSECRET(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    \n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null == secret) {\n+      throw new WarpScriptException(getName() + \" cannot be used if a stackps secret was not configured.\");\n+    }\n+    \n+    Object top = stack.pop();\n+    \n+    if (!secret.equals(top)) {\n+      throw new WarpScriptException(getName() + \" invalid secret.\");\n+    }\n+    \n+    // pop the new secret to use\n+    top = stack.pop();\n+    \n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a new secret which is a non null string.\");\n+    }\n+    \n+    StackPSWarpScriptExtension.STACKPS_SECRET = String.valueOf(top);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjEyNA==", "bodyText": "Why a stack without session name can't be renamed?\nAt least an error would be welcome instead of silently not setting the session name.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397056124", "createdAt": "2020-03-24T10:42:32Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSNAME.java", "diffHunk": "@@ -0,0 +1,62 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class WSNAME extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  private static final int MAX_SIZE = 128;\n+  \n+  /**\n+   * True when setting the session\n+   */\n+  private final boolean session;\n+  \n+  public WSNAME(String name, boolean session) {\n+    super(name);\n+    this.session = session;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a STRING.\");\n+    }\n+    \n+    String name = top.toString();\n+    \n+    if (name.length() > MAX_SIZE) {\n+      throw new WarpScriptException(getName() + \" expects a name less than \" + MAX_SIZE + \" characters.\");\n+    }\n+    \n+    if (session) {\n+      if (null != stack.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNzM1Nw==", "bodyText": "Wouldn't it be clearer if the two share the same terminology? They effectively do the same but use different info to achieve it.\nKILL seems to stop right now the stack, which is not the case, whereas ABORT seems more suited.\nMaybe WSABORT and WSABORTSESSION ?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397127357", "createdAt": "2020-03-24T12:51:20Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,63 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStackRegistry;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class StackPSWarpScriptExtension extends WarpScriptExtension {\n+  /*\n+   *  Name of configuration key with the stackps secret. \n+   */\n+  public static final String CONF_STACKPS_SECRET = \"stackps.secret\";\n+  \n+  /**\n+   * Current StackPS Secret\n+   */\n+  public static String STACKPS_SECRET;  \n+\n+  public static final String ATTRIBUTE_SESSION = \"stackps.session\";\n+  \n+  public static final String HEADER_SESSION = \"X-Warp10-WarpScriptSession\";\n+  \n+  private static final Map<String,Object> functions;\n+  \n+  static {\n+    WarpScriptStackRegistry.enable();\n+    \n+    STACKPS_SECRET = WarpConfig.getProperty(CONF_STACKPS_SECRET);\n+\n+    functions = new HashMap<String,Object>();\n+    \n+    functions.put(\"STACKPSSECRET\", new STACKPSSECRET(\"STACKPSSECRET\"));\n+    functions.put(\"WSPS\", new WSPS(\"WSPS\"));\n+    functions.put(\"WSINFO\", new WSINFO(\"WSINFO\"));\n+    functions.put(\"WSKILL\", new WSKILL(\"WSKILL\"));\n+    functions.put(\"WSABORT\", new WSABORT(\"WSABORT\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyODQ1OA==", "bodyText": "Should we make an exception when aborting its own stack?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397128458", "createdAt": "2020-03-24T12:53:10Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSABORT.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSABORT extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSABORT(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+    \n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a session name (STRING).\");\n+    }\n+    \n+    stack.push(WarpScriptStackRegistry.abortSession(top.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDQwMA==", "bodyText": "Same comment as for WSABORT: do we make a specific case for own stack?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397200400", "createdAt": "2020-03-24T14:35:08Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSKILL.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSKILL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSKILL(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+\n+    if (null != secret) {\n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }        \n+      top = stack.pop();\n+    }      \n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a UUID.\");\n+    }\n+    \n+    stack.push(WarpScriptStackRegistry.abort(top.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDcxMg==", "bodyText": "I think it should be inside the while several line above, not after. It could be added after line 511 for instance.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397204712", "createdAt": "2020-03-24T14:40:45Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/FETCH.java", "diffHunk": "@@ -514,6 +518,10 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n                 throw new WarpScriptException(getName() + \" exceeded limit of \" + fetchLimit + \" datapoints, current count is \" + fetched.get());\n               }\n \n+              if (stack.aborted()) {\n+                throw new WarpScriptException(getName() + \" execution aborted.\");\n+              }\n+              ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "925b45a9c14d8162ea9aaeb8f338a57f6e3207b0", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/925b45a9c14d8162ea9aaeb8f338a57f6e3207b0", "committedDate": "2020-03-25T09:32:21Z", "message": "Merge branch 'master' into stackps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d1920627129e59515e13363548a91076237ec5", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/c3d1920627129e59515e13363548a91076237ec5", "committedDate": "2020-03-25T14:54:35Z", "message": "Refactored to enable multiple signals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06976653d5a7bbe8b870a371cc4516a107c44c8b", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/06976653d5a7bbe8b870a371cc4516a107c44c8b", "committedDate": "2020-03-26T06:22:40Z", "message": "Refactored to ease inlining in case we add signals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjg5MTM2", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-383689136", "createdAt": "2020-03-30T09:42:51Z", "commit": {"oid": "06976653d5a7bbe8b870a371cc4516a107c44c8b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTo0Mjo1MVrOF9hpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTo0NTo0NlrOF9hw8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1ODc0Mg==", "bodyText": "We should still allow overriding a STOP by a KILL.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400058742", "createdAt": "2020-03-30T09:42:51Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -1614,14 +1617,39 @@ private String rewriteMacroSymbol(String symbol) {\n   }\n   \n   @Override\n-  public void abort() {\n+  public void signal(Signal signal) {\n+    // Only set the signal if the stack is not yet signaled so a KILL is not\n+    // overriden by anything else for example\n+    if (this.signaled) {\n+      return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06976653d5a7bbe8b870a371cc4516a107c44c8b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2MDY1OA==", "bodyText": "I find signal() to be confusing, can it be called checkSignal()?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400060658", "createdAt": "2020-03-30T09:45:46Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/WarpScriptStack.java", "diffHunk": "@@ -739,14 +744,14 @@ private void ensureCapacity(int n) {\n   public String getUUID();\n   \n   /**\n-   * Abort the stack, i.e. stop the currently executing code after the current statement and prevent further executions.\n+   * Signal the stack, i.e. stop the currently executing code after the current statement and prevent further executions.\n    */\n-  public void abort();\n+  public void signal(Signal signal);\n   \n   /**\n-   * Return the state of execution abortion.\n+   * Throw the exception associated with the current signal sent to the stack\n    */\n-  public boolean aborted();\n+  public void signal() throws WarpScriptATCException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06976653d5a7bbe8b870a371cc4516a107c44c8b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46818b9ee2e3b7e801053c0d1cb9d983cc01caa0", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/46818b9ee2e3b7e801053c0d1cb9d983cc01caa0", "committedDate": "2020-03-30T10:05:26Z", "message": "Merge branch 'master' into stackps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "889ef1cd7bc424a2ef4b731afe1c3353f9c5538d", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/889ef1cd7bc424a2ef4b731afe1c3353f9c5538d", "committedDate": "2020-03-30T10:11:30Z", "message": "Added priority checking of signals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05e0bd1f8612e2624aa376329140bcb6ba555e17", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/05e0bd1f8612e2624aa376329140bcb6ba555e17", "committedDate": "2020-03-30T10:18:57Z", "message": "Renamed signal() into handleSignal()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4b0b2a024c0d128333efed45135eca0c085d01", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/ed4b0b2a024c0d128333efed45135eca0c085d01", "committedDate": "2020-03-30T11:41:29Z", "message": "Renamed signal into handleSignal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d0e884db573a93d64bab4e036980d3ac4817e29", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/7d0e884db573a93d64bab4e036980d3ac4817e29", "committedDate": "2020-03-30T12:56:21Z", "message": "Addressed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aaf30275039553ba5343cf392bd0a2cfae8f4bf", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/4aaf30275039553ba5343cf392bd0a2cfae8f4bf", "committedDate": "2020-03-30T12:59:44Z", "message": "Corrected output of WSINFO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffdda380d2ab30eb9713b0f0991fab6f99df3b29", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/ffdda380d2ab30eb9713b0f0991fab6f99df3b29", "committedDate": "2020-03-30T14:43:54Z", "message": "Modified type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a33dd99248a0628ce3533ae86f8e143cfbe9986", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/3a33dd99248a0628ce3533ae86f8e143cfbe9986", "committedDate": "2020-03-30T20:59:02Z", "message": "Added CORS header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fa403d4daf894fac68e2e9eb2655be8266f1240", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/0fa403d4daf894fac68e2e9eb2655be8266f1240", "committedDate": "2020-03-31T11:31:20Z", "message": "Made WSNAME/WSSESSION return the current value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjkzNDAw", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-384693400", "createdAt": "2020-03-31T12:44:00Z", "commit": {"oid": "3a33dd99248a0628ce3533ae86f8e143cfbe9986"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0NDowMVrOF-T6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0NDowMVrOF-T6eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjI5OA==", "bodyText": "Is there a reason this comment is here?", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400882298", "createdAt": "2020-03-31T12:44:01Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java", "diffHunk": "@@ -0,0 +1,99 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public static final String[] EXPOSED_ATTRIBUTES = new String[] {\n+      WarpScriptStack.ATTRIBUTE_CREATION_TIME,\n+      WarpScriptStack.ATTRIBUTE_FETCH_COUNT,\n+      WarpScriptStack.ATTRIBUTE_GTS_COUNT,\n+      WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n+      WarpScriptStack.ATTRIBUTE_NAME,\n+      WarpScriptStack.ATTRIBUTE_SECTION_NAME,\n+      StackPSWarpScriptExtension.ATTRIBUTE_SESSION,\n+  };\n+  \n+  public WSINFO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+//    //\n+//    // A non null stackps secret was configured, check it\n+//    //\n+//    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+//    \n+//    if (null != secret) {     \n+//      if (!(top instanceof String)) {\n+//        throw new WarpScriptException(getName() + \" expects a secret.\");\n+//      }\n+//      if (!secret.equals(top)) {\n+//        throw new WarpScriptException(getName() + \" invalid secret.\");\n+//      }\n+//      \n+//      top = stack.pop();\n+//    }      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a33dd99248a0628ce3533ae86f8e143cfbe9986"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06184ab4dcbcca7b6f5afb28029a44539a13f605", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/06184ab4dcbcca7b6f5afb28029a44539a13f605", "committedDate": "2020-03-31T12:47:07Z", "message": "Removed comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDE2MDM5", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-385016039", "createdAt": "2020-03-31T18:55:30Z", "commit": {"oid": "06184ab4dcbcca7b6f5afb28029a44539a13f605"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1NTozMFrOF-jvJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowODo0MVrOF-kNfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MTU0Mg==", "bodyText": "handleSignal already checks this.signaled, so the if can be removed.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r401141542", "createdAt": "2020-03-31T18:55:30Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -940,6 +954,12 @@ public void exec(Macro macro) throws WarpScriptException {\n \n       for (i = 0; i < n; i++) {        \n \n+        // We check the boolean outside of a synchronized block for efficiency\n+        // even though we might miss a change\n+        if (this.signaled) {\n+          handleSignal();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06184ab4dcbcca7b6f5afb28029a44539a13f605"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MjExMA==", "bodyText": "Replace with handleSignal();", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r401142110", "createdAt": "2020-03-31T18:56:25Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -562,6 +572,10 @@ public void exec(String line) throws WarpScriptException {\n       //\n \n       for (int st = 0; st < statements.length; st++) {\n+        if (this.signaled) {\n+          throw new WarpScriptException(\"Execution aborted.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06184ab4dcbcca7b6f5afb28029a44539a13f605"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0OTMxMA==", "bodyText": "Because none of the methods are synchronized, there could be stacks in stacks after this registry is disabled.\nI think it does not matter that much but as a precaution, I would allow unregister even if it is disabled.", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r401149310", "createdAt": "2020-03-31T19:08:41Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java", "diffHunk": "@@ -0,0 +1,120 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.WarpScriptStack.Signal;\n+import io.warp10.script.ext.stackps.StackPSWarpScriptExtension;\n+\n+public class WarpScriptStackRegistry {\n+  \n+  private static final Map<String,WeakReference<WarpScriptStack>> stacks = new HashMap<String,WeakReference<WarpScriptStack>>();\n+  \n+  private static boolean enabled = false;\n+  \n+  public static void register(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return;\n+    }\n+    stacks.put(stack.getUUID(), new WeakReference<WarpScriptStack>(stack));\n+  }\n+  \n+  public static boolean unregister(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return false;\n+    }\n+    return null != stacks.remove(stack.getUUID());\n+  }\n+  \n+  public static boolean unregister(String uuid) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    return null != stacks.remove(uuid);\n+  }\n+  \n+  public static boolean signalByUuid(String uuid, Signal signal) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    \n+    WeakReference<WarpScriptStack> stackref = stacks.get(uuid);\n+    \n+    if (null == stackref) {\n+      return false;\n+    }\n+    \n+    WarpScriptStack stack = stackref.get();\n+    \n+    if (null == stack) {\n+      return false;\n+    }\n+    stack.signal(signal);\n+    return true;\n+  }\n+  \n+  public static int signalBySession(String session, Signal signal) {\n+    if (null == session) {\n+      return 0;\n+    }\n+    \n+    List<WeakReference<WarpScriptStack>> refs = new ArrayList<WeakReference<WarpScriptStack>>(stacks.values());\n+    \n+    int aborted = 0;\n+    \n+    for (WeakReference<WarpScriptStack> ref: refs) {\n+      WarpScriptStack stack = ref.get();\n+      \n+      if (null != stack) {\n+        if (session.equals(stack.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION))) {\n+          stack.signal(signal);\n+          aborted++;\n+        }\n+      }\n+    }\n+    \n+    return aborted;\n+  }\n+  \n+  public static void enable() {\n+    enabled = true;\n+  }\n+  \n+  public static void disable() {\n+    // Clear the registered stacks\n+    stacks.clear();\n+    enabled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06184ab4dcbcca7b6f5afb28029a44539a13f605"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0ead717d67589a091db0550308b59cf3dc7f6b", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/cc0ead717d67589a091db0550308b59cf3dc7f6b", "committedDate": "2020-03-31T19:37:57Z", "message": "Addressed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e84283e2113eb085afbd53ca18bc36ad195ce2f", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/2e84283e2113eb085afbd53ca18bc36ad195ce2f", "committedDate": "2020-03-31T19:38:15Z", "message": "Added calls to handleSignal in META and UPDATE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dbc44530354ef87ac84873835d062845e085314", "author": {"user": {"login": "hbs", "name": "Mathias Herberts"}}, "url": "https://github.com/senx/warp10-platform/commit/7dbc44530354ef87ac84873835d062845e085314", "committedDate": "2020-03-31T19:39:34Z", "message": "Changed copyright notice"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDYzNDEw", "url": "https://github.com/senx/warp10-platform/pull/686#pullrequestreview-385063410", "createdAt": "2020-03-31T20:04:49Z", "commit": {"oid": "7dbc44530354ef87ac84873835d062845e085314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3453, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}