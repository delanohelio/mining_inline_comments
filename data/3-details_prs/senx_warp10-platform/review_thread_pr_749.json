{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMjc3NzA5", "number": 749, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OTowN1rOD5DLTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowODoyNVrOD5S94A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ3NDcwOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/TOVARINT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OTowN1rOGQGgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNjoyOFrOGQQMuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNzAyMg==", "bodyText": "Which exception do you intend to catch?\nbaos.write can throw NPE or OutOfBound but it cannot happen because it is not given Null and baos is of sufficient length.\nAlso you will catch the WarpScriptException which is unnecessary.", "url": "https://github.com/senx/warp10-platform/pull/749#discussion_r419537022", "createdAt": "2020-05-04T15:49:07Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOVARINT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.List;\n+\n+import io.warp10.continuum.gts.Varint;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a list of LONGs to a byte array containing varint encoding of the numbers\n+ */\n+public class TOVARINT extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public TOVARINT(String name) {\n+    super(name);\n+  }\n+  \n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    \n+    Object top = stack.pop();\n+    \n+    if (!(top instanceof List) && !(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" operates on a LONG or LIST of LONGs.\");\n+    }\n+    \n+    if (top instanceof Long) {\n+      stack.push(Varint.encodeUnsignedLong(((Long) top).longValue()));\n+    } else {\n+      List<Object> longs = (List<Object>) top;\n+      \n+      ByteArrayOutputStream baos = new ByteArrayOutputStream(longs.size());\n+      \n+      try {\n+        for (int i = 0; i < longs.size(); i++) {\n+          if (!(longs.get(i) instanceof Long)) {\n+            throw new WarpScriptException(getName() + \" operates on a LIST of LONGs.\");\n+          }\n+          baos.write(Varint.encodeUnsignedLong(((Long) longs.get(i)).longValue()));\n+        }\n+        stack.push(baos.toByteArray());\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e88ea4a228536b5a10b9110d61757244b7d4663"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTgwMQ==", "bodyText": "ByteArrayOutputStream.write throws IOException, so catching this.", "url": "https://github.com/senx/warp10-platform/pull/749#discussion_r419695801", "createdAt": "2020-05-04T20:06:28Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOVARINT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.List;\n+\n+import io.warp10.continuum.gts.Varint;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a list of LONGs to a byte array containing varint encoding of the numbers\n+ */\n+public class TOVARINT extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public TOVARINT(String name) {\n+    super(name);\n+  }\n+  \n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    \n+    Object top = stack.pop();\n+    \n+    if (!(top instanceof List) && !(top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" operates on a LONG or LIST of LONGs.\");\n+    }\n+    \n+    if (top instanceof Long) {\n+      stack.push(Varint.encodeUnsignedLong(((Long) top).longValue()));\n+    } else {\n+      List<Object> longs = (List<Object>) top;\n+      \n+      ByteArrayOutputStream baos = new ByteArrayOutputStream(longs.size());\n+      \n+      try {\n+        for (int i = 0; i < longs.size(); i++) {\n+          if (!(longs.get(i) instanceof Long)) {\n+            throw new WarpScriptException(getName() + \" operates on a LIST of LONGs.\");\n+          }\n+          baos.write(Varint.encodeUnsignedLong(((Long) longs.get(i)).longValue()));\n+        }\n+        stack.push(baos.toByteArray());\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNzAyMg=="}, "originalCommit": {"oid": "8e88ea4a228536b5a10b9110d61757244b7d4663"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ3OTU3OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/VARINTTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MDoxMVrOGQGjdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MDoxMVrOGQGjdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNzc4Mw==", "bodyText": "I think the only Exception you can catch here is IllegalArgument, you should change to that.", "url": "https://github.com/senx/warp10-platform/pull/749#discussion_r419537783", "createdAt": "2020-05-04T15:50:11Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARINTTO.java", "diffHunk": "@@ -0,0 +1,82 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.continuum.gts.Varint;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a byte array containing varints into a list of varints\n+ */\n+public class VARINTTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public VARINTTO(String name) {\n+    super(name);\n+  }\n+  \n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    \n+    Object top = stack.pop();\n+    \n+    long count = Long.MAX_VALUE;\n+    boolean countbased = false;\n+    if (top instanceof Long) {\n+      count = ((Long) top).longValue();\n+      countbased = true;\n+      top = stack.pop();\n+    }\n+    \n+    if (!(top instanceof byte[])) {\n+      throw new WarpScriptException(getName() + \" operates on a byte array.\");\n+    }\n+    \n+    byte[] data = (byte[]) top;\n+\n+    ByteBuffer bb = ByteBuffer.wrap(data);\n+    \n+    List<Object> values = new ArrayList<Object>();\n+\n+    try {\n+      while(bb.hasRemaining() && count > 0) {\n+        long value = Varint.decodeUnsignedLong(bb);\n+        values.add(value);\n+        count--;\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e88ea4a228536b5a10b9110d61757244b7d4663"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ4MjY1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/VARINTTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MDo1N1rOGQGlbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MDo1N1rOGQGlbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzODI4NQ==", "bodyText": "Unnecessary cast to int.", "url": "https://github.com/senx/warp10-platform/pull/749#discussion_r419538285", "createdAt": "2020-05-04T15:50:57Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARINTTO.java", "diffHunk": "@@ -0,0 +1,82 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.continuum.gts.Varint;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a byte array containing varints into a list of varints\n+ */\n+public class VARINTTO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public VARINTTO(String name) {\n+    super(name);\n+  }\n+  \n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    \n+    Object top = stack.pop();\n+    \n+    long count = Long.MAX_VALUE;\n+    boolean countbased = false;\n+    if (top instanceof Long) {\n+      count = ((Long) top).longValue();\n+      countbased = true;\n+      top = stack.pop();\n+    }\n+    \n+    if (!(top instanceof byte[])) {\n+      throw new WarpScriptException(getName() + \" operates on a byte array.\");\n+    }\n+    \n+    byte[] data = (byte[]) top;\n+\n+    ByteBuffer bb = ByteBuffer.wrap(data);\n+    \n+    List<Object> values = new ArrayList<Object>();\n+\n+    try {\n+      while(bb.hasRemaining() && count > 0) {\n+        long value = Varint.decodeUnsignedLong(bb);\n+        values.add(value);\n+        count--;\n+      }\n+    } catch (Exception e) {\n+      throw new WarpScriptException(getName() + \" error while decoding values.\", e);\n+    }\n+    \n+    stack.push(values);\n+    \n+    //\n+    // If we were count based, output the number of bytes we consumed\n+    //\n+    if (countbased) {\n+      stack.push((long) (data.length - (int) bb.remaining())); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e88ea4a228536b5a10b9110d61757244b7d4663"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ4ODA5OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/VARINTTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjowN1rOGQGouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjowN1rOGQGouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTEyOQ==", "bodyText": "typo: a list of LONGs.", "url": "https://github.com/senx/warp10-platform/pull/749#discussion_r419539129", "createdAt": "2020-05-04T15:52:07Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/VARINTTO.java", "diffHunk": "@@ -0,0 +1,82 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.continuum.gts.Varint;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+/**\n+ * Converts a byte array containing varints into a list of varints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e88ea4a228536b5a10b9110d61757244b7d4663"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDA2MTc2OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/TOVARINT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowODoyNVrOGQesSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODowODoyNVrOGQesSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzMzI1Ng==", "bodyText": "typo: decoding->encoding", "url": "https://github.com/senx/warp10-platform/pull/749#discussion_r419933256", "createdAt": "2020-05-05T08:08:25Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOVARINT.java", "diffHunk": "@@ -58,8 +59,8 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n           baos.write(Varint.encodeUnsignedLong(((Long) longs.get(i)).longValue()));\n         }\n         stack.push(baos.toByteArray());\n-      } catch (Exception e) {\n-        throw new WarpScriptException(getName() + \" error while decoding values.\", e);\n+      } catch (IOException ioe) {\n+        throw new WarpScriptException(getName() + \" error while decoding values.\", ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa95701bf44f0025cbab1bfa7b09a2d3328be94b"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1235, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}