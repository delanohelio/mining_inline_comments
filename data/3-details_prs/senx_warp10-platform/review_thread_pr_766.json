{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTQzOTMx", "number": 766, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowOToyOFrOD9tT5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODo0NFrOD9yFpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDMyMTAzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowOToyOFrOGXXHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowOToyOFrOGXXHrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0OTIzMQ==", "bodyText": "typo: update", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427149231", "createdAt": "2020-05-19T09:09:28Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -61,6 +61,11 @@\n     DEFAULT_PROPERTIES = WarpConfig.getProperties();\n   }\n \n+  /**\n+   * Should we updatr per function metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9436e36f93ee087895c7ebc8bdfae44c24240d82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDMzMzAyOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMjozNlrOGXXPOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMjozNlrOGXXPOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MTE2Mw==", "bodyText": "That naming convention should be only reserved to constants.", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427151163", "createdAt": "2020-05-19T09:12:36Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -61,6 +61,11 @@\n     DEFAULT_PROPERTIES = WarpConfig.getProperties();\n   }\n \n+  /**\n+   * Should we updatr per function metrics\n+   */\n+  private boolean FUNCTION_METRICS = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9436e36f93ee087895c7ebc8bdfae44c24240d82"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQyMDQ1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozNTowNVrOGXYGgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozNTowNVrOGXYGgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTMxMg==", "bodyText": "You cannot use macro.length() because it is prepended with this.macroPrefix. You have to store value.indexOf(':', prefixLen) and reuse that.", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427165312", "createdAt": "2020-05-19T09:35:05Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.continuum.ingress;\n+\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.continuum.Configuration;\n+import io.warp10.continuum.gts.ValueEncoder;\n+import io.warp10.script.MemoryWarpScriptStack;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStack.Macro;\n+import io.warp10.script.WarpScriptStackRegistry;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class MacroValueEncoder extends ValueEncoder {\n+  \n+  private static final String DEFAULT_PREFIX = \":m:\";\n+  private static final String DEFAULT_MACRO_PREFIX =\"\";\n+  private static final String KEY_STACK = \":m:stack\";\n+  \n+  private final String prefix;\n+  private final String macroPrefix;\n+  private final int prefixLen;\n+  \n+  public static final class Extension extends WarpScriptExtension {\n+\n+    public Extension() {\n+      ValueEncoder.register(new MacroValueEncoder());\n+    }\n+    \n+    @Override\n+    public Map<String, Object> getFunctions() {\n+      return null;\n+    }\n+  }\n+  \n+  private static final Macro NOOP_MACRO = new Macro();\n+  \n+  public MacroValueEncoder() {\n+    this.prefix = WarpConfig.getProperty(Configuration.CONFIG_MACRO_VALUE_ENCODER_PREFIX, DEFAULT_PREFIX);\n+    this.prefixLen = this.prefix.length();\n+    String mprefix = WarpConfig.getProperty(Configuration.CONFIG_MACRO_VALUE_ENCODER_MACRO_PREFIX, DEFAULT_MACRO_PREFIX);\n+    if (!mprefix.isEmpty() && !mprefix.endsWith(\"/\")) {\n+      this.macroPrefix = mprefix + \"/\";\n+    } else {\n+      this.macroPrefix = mprefix;\n+    }\n+  }\n+  \n+  @Override\n+  public Object parseValue(String value) throws Exception {\n+    if (!value.startsWith(prefix)) {\n+      return null;\n+    }\n+    \n+    // Extract the macro name, adding the specified prefix\n+    String macro = this.macroPrefix + value.substring(prefixLen, value.indexOf(':', prefixLen));\n+\n+    MemoryWarpScriptStack stack = (MemoryWarpScriptStack) WarpConfig.getThreadProperty(KEY_STACK);\n+    \n+    if (null == stack) {\n+      stack = new MemoryWarpScriptStack(null, null);\n+      stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[MacroValueEncoder @\" + macro + \" \" + Thread.currentThread().getName() + \"]\");      \n+      // Disable function metrics so execution is faster\n+      stack.setFunctionMetrics(false);\n+      WarpConfig.setThreadProperty(KEY_STACK, stack);\n+    }\n+    \n+    try {\n+      stack.push(value.substring(prefixLen + macro.length() + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9436e36f93ee087895c7ebc8bdfae44c24240d82"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQ2NzExOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0NzowOFrOGXYjcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0NzowOFrOGXYjcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3MjcyMg==", "bodyText": "Unused.", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427172722", "createdAt": "2020-05-19T09:47:08Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.continuum.ingress;\n+\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.continuum.Configuration;\n+import io.warp10.continuum.gts.ValueEncoder;\n+import io.warp10.script.MemoryWarpScriptStack;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStack.Macro;\n+import io.warp10.script.WarpScriptStackRegistry;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class MacroValueEncoder extends ValueEncoder {\n+  \n+  private static final String DEFAULT_PREFIX = \":m:\";\n+  private static final String DEFAULT_MACRO_PREFIX =\"\";\n+  private static final String KEY_STACK = \":m:stack\";\n+  \n+  private final String prefix;\n+  private final String macroPrefix;\n+  private final int prefixLen;\n+  \n+  public static final class Extension extends WarpScriptExtension {\n+\n+    public Extension() {\n+      ValueEncoder.register(new MacroValueEncoder());\n+    }\n+    \n+    @Override\n+    public Map<String, Object> getFunctions() {\n+      return null;\n+    }\n+  }\n+  \n+  private static final Macro NOOP_MACRO = new Macro();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9436e36f93ee087895c7ebc8bdfae44c24240d82"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQ2ODY0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0NzozM1rOGXYkbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0NzozM1rOGXYkbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3Mjk3Mg==", "bodyText": "Unused.", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427172972", "createdAt": "2020-05-19T09:47:33Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.continuum.ingress;\n+\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.continuum.Configuration;\n+import io.warp10.continuum.gts.ValueEncoder;\n+import io.warp10.script.MemoryWarpScriptStack;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStack.Macro;\n+import io.warp10.script.WarpScriptStackRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9436e36f93ee087895c7ebc8bdfae44c24240d82"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQ2OTA5OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0Nzo0MVrOGXYkuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0Nzo0MVrOGXYkuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3MzA0OQ==", "bodyText": "Unused.", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427173049", "createdAt": "2020-05-19T09:47:41Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.continuum.ingress;\n+\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9436e36f93ee087895c7ebc8bdfae44c24240d82"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTEwMTQwOnYy", "diffSide": "RIGHT", "path": "etc/conf.templates/distributed/10-ingress.conf.template", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODowNlrOGXewqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODowNlrOGXewqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NDQxMA==", "bodyText": "To be moved to 70--extensions.conf.template?", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427274410", "createdAt": "2020-05-19T12:48:06Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/distributed/10-ingress.conf.template", "diffHunk": "@@ -358,3 +358,15 @@ ingress.kafka.metadata.maxsize = 900000\n // This must be explicitely configured to avoid deleting extraneous series when activity tracking is not enabled\n //\n #ingress.delete.activity.support = true\n+\n+//  \n+// Prefix to use for values which trigger a macro, defaults to ':m:', should not be changed\n+// except for security by obscurity strategies...\n+//\n+#macro.value.encoder.prefix = :m:\n+ \n+//\n+// Prefix to add to macro names specified in values handled by MacroValueEncoder.\n+// A value of ':m:foo/bar:xxx' with a macro prefix of 'pre' will trigger macro @pre/foo/bar.\n+//\n+#macro.value.encoder.macro.prefix =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2fe759a34bad30e1b4a2d3450e7fd3e649273a1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTEwMTk1OnYy", "diffSide": "RIGHT", "path": "etc/conf.templates/standalone/10-ingress.conf.template", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODoxNlrOGXexEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODoxNlrOGXexEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NDUxNQ==", "bodyText": "Ditto.", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427274515", "createdAt": "2020-05-19T12:48:16Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/standalone/10-ingress.conf.template", "diffHunk": "@@ -101,3 +101,14 @@ ingress.websocket.maxmessagesize = 1048576\n // This must be explicitely configured to avoid deleting extraneous series when activity tracking is not enabled\n //\n #ingress.delete.activity.support = true                                                                                                                                                                                                                                                \n+//\n+// Prefix to use for values which trigger a macro, defaults to ':m:', should not be changed\n+// except for security by obscurity strategies...\n+//\n+#macro.value.encoder.prefix = :m:\n+  \n+//\n+// Prefix to add to macro names specified in values handled by MacroValueEncoder.\n+// A value of ':m:foo/bar:xxx' with a macro prefix of 'pre' will trigger macro @pre/foo/bar.\n+//\n+#macro.value.encoder.macro.prefix = ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2fe759a34bad30e1b4a2d3450e7fd3e649273a1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTEwMzczOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODo0NFrOGXeyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo0ODo0NFrOGXeyTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NDgzMQ==", "bodyText": "Typo: name", "url": "https://github.com/senx/warp10-platform/pull/766#discussion_r427274831", "createdAt": "2020-05-19T12:48:44Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/continuum/ingress/MacroValueEncoder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.continuum.ingress;\n+\n+import java.util.Map;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.continuum.gts.ValueEncoder;\n+import io.warp10.script.MemoryWarpScriptStack;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStack.Macro;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class MacroValueEncoder extends ValueEncoder {\n+  \n+  /**\n+   * Prefix to use for values which trigger a macro, defaults to ':m:', should not be changed\n+   * except for security by obscurity strategies...\n+   */\n+  public static final String CONFIG_MACRO_VALUE_ENCODER_PREFIX = \"macro.value.encoder.prefix\";\n+  \n+  /**\n+   * Prefix to add to macro names specified in values handled by MacroValueEncoder.\n+   * A value of ':m:foo/bar:xxx' with a macro prefix of 'pre' will trigger macro @pre/foo/bar.\n+   */\n+  public static final String CONFIG_MACRO_VALUE_ENCODER_MACRO_PREFIX = \"macro.value.encoder.macro.prefix\";\n+  \n+  private static final String DEFAULT_PREFIX = \":m:\";\n+  private static final String DEFAULT_MACRO_PREFIX =\"\";\n+  private static final String KEY_STACK = \":m:stack\";\n+  \n+  private final String prefix;\n+  private final String macroPrefix;\n+  private final int prefixLen;\n+  \n+  public static final class Extension extends WarpScriptExtension {\n+\n+    public Extension() {\n+      ValueEncoder.register(new MacroValueEncoder());\n+    }\n+    \n+    @Override\n+    public Map<String, Object> getFunctions() {\n+      return null;\n+    }\n+  }\n+  \n+  public MacroValueEncoder() {\n+    this.prefix = WarpConfig.getProperty(CONFIG_MACRO_VALUE_ENCODER_PREFIX, DEFAULT_PREFIX);\n+    this.prefixLen = this.prefix.length();\n+    String mprefix = WarpConfig.getProperty(CONFIG_MACRO_VALUE_ENCODER_MACRO_PREFIX, DEFAULT_MACRO_PREFIX);\n+    if (!mprefix.isEmpty() && !mprefix.endsWith(\"/\")) {\n+      this.macroPrefix = mprefix + \"/\";\n+    } else {\n+      this.macroPrefix = mprefix;\n+    }\n+  }\n+  \n+  @Override\n+  public Object parseValue(String value) throws Exception {\n+    if (!value.startsWith(prefix)) {\n+      return null;\n+    }\n+    \n+    // Extract the macro namex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2fe759a34bad30e1b4a2d3450e7fd3e649273a1"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1247, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}