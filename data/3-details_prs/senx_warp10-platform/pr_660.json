{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTA5OTI5", "number": 660, "title": "Change JSON lib from Boon to Jackson", "bodyText": "Intro\nThe initial motive for removing the dependency to Boon was because it relies on the Unsafe class and there is no plan to remove that. This makes it impossible to upgrade to Java 9+, if the need arise in the future.\nDuring the development it also appeared that Boon is not the fastest JSON serialization/deserialization library anymore and it suffers from minor issues (more on that later).\nTo replace Boon, Jackson was chosen because it is a fast, well maintained, feature-rich and widely used JSON serialization/deserialization library.\nThis PR first isolates the dependency to the library to a single package, io.warp10.json, by providing a single class io.warp10.json.JsonUtils with methods to serialize/deserialize to/from JSON.\nNext, the dependency has been changed to the last version (2.10.2) of jackson-databind to be able to easily update the library as the API slightly changed in 2.10.\nThese changes impacted the behavior and results as listed below:\nSerialization\nType by type differences\n\nBitset: serialized to null, no change.\nBoolean: no change.\nbyte[]: serialized to base64 instead of null.\nCounter (AtomicLong): serialized like Long instead of its String representation.\nDouble: no change.\nGTSEncoder: added missing lastActivity. Except that, no change.\nGeoShape: no change.\nGTS: no change.\nList: no change.\nLong: no change.\nMacro: no change.\nMap: null keys are serialized as \"null\" instead of null. This makes the JSON valid.\nMatrix (RealMatrix): serialized to null, no change.\nNamedWarpScriptFunction: no change.\nnull: no change.\nPFont, PGraphics, PImage, PShape: serialized to null, no change.\nSet: serialized as a list, was previously null.\nString: Unicode escaping use capital letter (ie \\u00C3 instead of \\u00c3). Except that, no change.\nVector (ArrayRealVector): serialized to null, no change.\nVList (Vector): no change.\n\n->JSON\n->JSON now uses the exact same function as the Egress output to generate JSON and the call to validate has been removed.\nThis means:\n\nAll the types handled above are also handled by ->JSON instead of only List, Map, Number and Boolean.\nIf there is a cycle in the structure, this is handled by Jackson with a StackOverflowError.\n\nOn top of that, as it was pretty easy to reach a OOM with ->JSON there is now a limit on the size of a generated JSON only for ->JSON. The size limit can be changed in the conf with warpscript.maxjson and warpscript.maxjson.hard and in an authenticated WarpScript stack using MAXJSON.\nCustom serialization\nLike SNAPSHOT, it is possible to register custom serializers for JSON with io.warp10.json.JsonUtils#addEncoder.\nDeserialization\nDeserialization with Boon suffer from a number of issues which has been fixed in this PR:\n\nBoolean: object type is now Boolean instead of ValueContainer.\nDouble: object type is now Double instead of NumberValue. Infinity and NaN are handled by Jackson contrary to Boon.\nList: no change.\nLong: object type is now Double instead of NumberValue.\nMap: no change.\nnull: object is now really null instead of a ValueContainer instance.\nString: no change.\nString representing a ISO8601 date in a List: was converted to a Date with Boon, now correctly deserialized as a String.", "createdAt": "2020-02-10T12:34:07Z", "url": "https://github.com/senx/warp10-platform/pull/660", "merged": true, "mergeCommit": {"oid": "dbf783479129092534c50c80dd028be72aafea63"}, "closed": true, "closedAt": "2020-02-14T11:12:45Z", "author": {"login": "ftence"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbPtMBRgH2gAyMzczMTA5OTI5OjcyZmNiZDI5OTY5ZjE3ZDlmZDJmYjg5MWExMTk1ZjRiOTJiYzlhODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcENmXXgFqTM1ODg3MDg4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72fcbd29969f17d9fd2fb891a1195f4b92bc9a88", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/72fcbd29969f17d9fd2fb891a1195f4b92bc9a88", "committedDate": "2019-09-04T08:02:39Z", "message": "Abstract all JSON ser/deser and switch to Jackson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f3e7f10a9bb6e0f21f4c5b0abccfb3a56f8246e", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/2f3e7f10a9bb6e0f21f4c5b0abccfb3a56f8246e", "committedDate": "2019-12-16T10:55:10Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into json_lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e09b1fc193dc78d4d6c692ef8297982b8debe725", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/e09b1fc193dc78d4d6c692ef8297982b8debe725", "committedDate": "2019-12-17T16:40:36Z", "message": "Bump Jackson version to 2.10 and simplify API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc5eae82563d568fb22fd36f61009b7dd1cbd19", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/0fc5eae82563d568fb22fd36f61009b7dd1cbd19", "committedDate": "2019-12-20T08:30:44Z", "message": "Delegate the stricness to the json serialization lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a5ceea84749557542a05bcad6b8249668b92c2", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/d3a5ceea84749557542a05bcad6b8249668b92c2", "committedDate": "2019-12-30T16:22:02Z", "message": "Small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba33e8de08c07f4b5bc28f7c8ec77df52f481fc", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/aba33e8de08c07f4b5bc28f7c8ec77df52f481fc", "committedDate": "2019-12-31T14:59:23Z", "message": "Internalize json serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f05ca021c8062c2f90bd08b61b2a4798b4bb141e", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/f05ca021c8062c2f90bd08b61b2a4798b4bb141e", "committedDate": "2020-01-03T16:23:41Z", "message": "Use Jackson for serialization because it is faster this way."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e982250dcfc5cf2b6c07f4baa75b1f63784b8f8e", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/e982250dcfc5cf2b6c07f4baa75b1f63784b8f8e", "committedDate": "2020-01-06T09:00:44Z", "message": "Add and improve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b158c9e42492a5b89aaf5ca7d4d943fefeac1c9", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/2b158c9e42492a5b89aaf5ca7d4d943fefeac1c9", "committedDate": "2020-02-06T08:47:20Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into json_lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a95b491e62c0301642aaf9dcf8569c39c825a9", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/d3a95b491e62c0301642aaf9dcf8569c39c825a9", "committedDate": "2020-02-07T13:57:12Z", "message": "Better handling of max json size and the errors it generates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5173f5e590145bff64573c2728fab88e1517849", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/f5173f5e590145bff64573c2728fab88e1517849", "committedDate": "2020-02-07T15:10:51Z", "message": "Add a way to register custom serializers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3176c4b51b3f984bda46d6f270530cb6933f0c1d", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/3176c4b51b3f984bda46d6f270530cb6933f0c1d", "committedDate": "2020-02-10T10:19:32Z", "message": "Optimization and more conservative limits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "committedDate": "2020-02-10T10:26:56Z", "message": "Code style and comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTM4OTk1", "url": "https://github.com/senx/warp10-platform/pull/660#pullrequestreview-355938995", "createdAt": "2020-02-10T13:35:51Z", "commit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozNTo1MVrOFnmNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyMTo1NFrOFnnzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NDg4Mw==", "bodyText": "Comment can be removed.", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377064883", "createdAt": "2020-02-10T13:35:51Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1451,7 +1443,7 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n             pw.print(Boolean.TRUE.equals(value) ? \"true\" : \"false\");\n           } else {\n             //pw.print(gson.toJson(value.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTAxNA==", "bodyText": "Add a comment indicating whether start/end are inclusive or exclusive", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377069014", "createdAt": "2020-02-10T13:43:18Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/BoundedWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+/**\n+ * A wrapper for Writers to limit the number of written chars.\n+ * When the number of chars that should be written exceeds the given limit, a WriterBoundReachedException is thrown.\n+ */\n+public class BoundedWriter extends Writer {\n+\n+  public static class WriterBoundReachedException extends IOException {\n+\n+    public WriterBoundReachedException(String message) {\n+      super(message);\n+    }\n+\n+  }\n+\n+  protected final Writer writer;\n+  protected final long maxWrittenChars;\n+  protected long currentWrittenChars;\n+\n+  public BoundedWriter(Writer writer, long maxAppendedChars) {\n+    this.writer = writer;\n+    this.maxWrittenChars = maxAppendedChars;\n+    this.currentWrittenChars = 0;\n+  }\n+\n+  @Override\n+  public void write(char[] chars, int start, int end) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MDMxMg==", "bodyText": "How are .producer/.owner labels handled? The check for their exposure should probably be performed here too as this method might be called in the future from other places and responsability for exposing those labels might not be logical to implement in the caller.", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377070312", "createdAt": "2020-02-10T13:45:39Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends JsonSerializer<GTSEncoder> {\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);\n+    gen.writeObjectField(\"l\", metadata.getLabels());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTM5Mg==", "bodyText": "This introduces a different handling of byte arrays whether it appears in a GTS/GTSEncoder or outside of one. Everywhere else byte arrays are serialized as b64, but here they will be serialized as an ISO-8859-1 string?", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377071392", "createdAt": "2020-02-10T13:47:30Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends JsonSerializer<GTSEncoder> {\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);\n+    gen.writeObjectField(\"l\", metadata.getLabels());\n+    gen.writeObjectField(\"a\", metadata.getAttributes());\n+    gen.writeNumberField(\"la\", metadata.getLastActivity());\n+    gen.writeFieldName(\"v\");\n+    gen.writeStartArray();\n+\n+    GTSDecoder decoder = encoder.getUnsafeDecoder(false);\n+    while (decoder.next()) {\n+      long ts = decoder.getTimestamp();\n+      long location = decoder.getLocation();\n+      long elevation = decoder.getElevation();\n+      // We do not call getBinaryValue because JSON cannot represent byte arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQxMA==", "bodyText": "Those strings should be externalized as constants since they are used in at least the two serializers", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377072410", "createdAt": "2020-02-10T13:49:16Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends JsonSerializer<GTSEncoder> {\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzI2OQ==", "bodyText": "Same question about exposing .producer/.owner", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377073269", "createdAt": "2020-02-10T13:50:53Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/GeoTimeSerieSerializer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GeoTimeSerieSerializer extends JsonSerializer<GeoTimeSerie> {\n+\n+  @Override\n+  public void serialize(GeoTimeSerie gts, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = gts.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);\n+    gen.writeObjectField(\"l\", metadata.getLabels());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTM5NQ==", "bodyText": "Constants should be externalized.", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377075395", "createdAt": "2020-02-10T13:54:49Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/MetadataSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class MetadataSerializer extends JsonSerializer<Metadata> {\n+\n+  @Override\n+  public void serialize(Metadata metadata, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzczNw==", "bodyText": "Missing whitespace", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377077737", "createdAt": "2020-02-10T13:58:47Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/JSONTO.java", "diffHunk": "@@ -51,19 +46,13 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n       throw new WarpScriptException(getName() + \" expects a string on top of the stack.\");\n     }\n     \n-    JsonParser parser = BOON_PARSER_FACTORY.create();\n-    \n-    Object json = null;\n-    \n     try {\n-      json = parser.parse(o.toString());\n-    } catch(JsonException je) {      \n-      // We don't include the original message as it can be very long\n-      throw new WarpScriptException(\"Error parsing JSON\", je);\n+      Object json = JsonUtils.jsonToObject(o.toString());\n+      stack.push(transform(json));\n+    } catch (IOException ioe) {\n+      throw new WarpScriptException(getName() + \"failed to parse JSON\", ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTY5MA==", "bodyText": "This call will fail with an NPE if the stack attribute retrieved above is not set. It is set in the case of MemoryWarpScriptStack instances but potentially not in other implementations of WarpScriptStack.\nSame in MAXJSON", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377079690", "createdAt": "2020-02-10T14:02:21Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/TOJSON.java", "diffHunk": "@@ -43,120 +37,22 @@ public TOJSON(String name) {\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object o = stack.pop();\n \n-    JsonSerializer parser = BOON_SERIALIZER_FACTORY.create();\n-\n     //\n     // Only allow the serialization of simple lists and maps, otherwise JSON might\n     // expose internals\n     //\n \n-    if (!validate(o)) {\n-      throw new WarpScriptException(getName() + \" can only serialize structures containing numbers, strings, booleans, lists and maps which do not reference the same list/map multiple times.\");\n+    try {\n+      Long maxJsonSize = (Long)stack.getAttribute(WarpScriptStack.ATTRIBUTE_JSON_MAXSIZE);\n+      String json = JsonUtils.objectToJson(o, false, maxJsonSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4OTQ3Mg==", "bodyText": "Won't that surround sb's content with double quotes and escape it? This might not be what is expected.", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377089472", "createdAt": "2020-02-10T14:19:39Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,211 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonFactoryBuilder;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.StreamWriteFeature;\n+import com.fasterxml.jackson.core.json.JsonReadFeature;\n+import com.fasterxml.jackson.core.json.JsonWriteFeature;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class JsonUtils {\n+\n+  /**\n+   * A serializer for null keys.\n+   * Outputs \"null\" because most javascript engines coerce null to \"null\" when using it as a key.\n+   */\n+  private static class NullKeySerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      gen.writeFieldName(\"null\");\n+    }\n+  }\n+\n+  /**\n+   * Used to swap UnknownSerializer and BeanSerializer for CustomEncodersSerializer.\n+   */\n+  public static class NotSerializedToCustomSerializedModifier extends BeanSerializerModifier {\n+    @Override\n+    public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+      if (serializer instanceof UnknownSerializer || serializer instanceof BeanSerializer) {\n+        return customEncodersSerializer;\n+      } else {\n+        return serializer;\n+      }\n+    }\n+  }\n+\n+  public static class CustomEncodersSerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      if (null != encoders && !encoders.isEmpty()) {\n+        StringBuilder sb = new StringBuilder();\n+        boolean encoded = false;\n+        for (JsonEncoder encoder: encoders) {\n+          encoded = encoder.addElement(sb, value);\n+          if (encoded) {\n+            break;\n+          }\n+        }\n+        if (encoded) {\n+          gen.writeString(sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MDg4NQ==", "bodyText": "Why isn't this called by the serializer for GTS and GTS Encoders?", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377090885", "createdAt": "2020-02-10T14:21:54Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/MetadataSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class MetadataSerializer extends JsonSerializer<Metadata> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3df08c5715d884834a21c0047d407763459db95", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/c3df08c5715d884834a21c0047d407763459db95", "committedDate": "2020-02-11T13:07:11Z", "message": "Address PR comments and other fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzA0Njkx", "url": "https://github.com/senx/warp10-platform/pull/660#pullrequestreview-356704691", "createdAt": "2020-02-11T14:34:36Z", "commit": {"oid": "c3df08c5715d884834a21c0047d407763459db95"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozNDozNlrOFoLOtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozODoxOVrOFoLXow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTM0OA==", "bodyText": "Use the constant", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377671348", "createdAt": "2020-02-11T14:34:36Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends StdSerializer<GTSEncoder> {\n+\n+  protected GTSEncoderSerializer() {\n+    super(GTSEncoder.class);\n+  }\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+\n+    gen.writeStartObject();\n+    MetadataSerializer.serializeMetadataFields(metadata, gen);\n+    gen.writeFieldName(\"v\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3df08c5715d884834a21c0047d407763459db95"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MzYzNQ==", "bodyText": "Use the constants defined in the MetadataSerializer?", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377673635", "createdAt": "2020-02-11T14:38:19Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1341,8 +1338,7 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n           \n           sb.append(\"{\\\"c\\\":\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3df08c5715d884834a21c0047d407763459db95"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19b437e1adfcd813f5f6be5453372c73dfc4e00", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/d19b437e1adfcd813f5f6be5453372c73dfc4e00", "committedDate": "2020-02-12T14:24:54Z", "message": "Add RealVector and RealMatrix serialization, use of constants and minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODI2NTQx", "url": "https://github.com/senx/warp10-platform/pull/660#pullrequestreview-357826541", "createdAt": "2020-02-12T22:12:04Z", "commit": {"oid": "d19b437e1adfcd813f5f6be5453372c73dfc4e00"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxMjowNFrOFpAbrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxMjowNFrOFpAbrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MzAyMg==", "bodyText": "FIELD_ID", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r378543022", "createdAt": "2020-02-12T22:12:04Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1365,38 +1367,40 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           sb.append(\"}\");\n-          \n-          sb.append(\",\\\"a\\\":{\");\n+\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_ATTRIBUTES);\n+          sb.append(\"\\\":{\");\n \n           first = true;\n           for (Entry<String, String> entry: decoder.getMetadata().getAttributes().entrySet()) {\n             if (!first) {\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           \n           sb.append(\"}\");\n           sb.append(\",\\\"i\\\":\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19b437e1adfcd813f5f6be5453372c73dfc4e00"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "committedDate": "2020-02-14T10:42:47Z", "message": "Add constant for labels ids field name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODYxNTIy", "url": "https://github.com/senx/warp10-platform/pull/660#pullrequestreview-358861522", "createdAt": "2020-02-14T10:55:15Z", "commit": {"oid": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1NToxNVrOFpy2lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1NToxNVrOFpy2lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2OTEwOA==", "bodyText": "It is a an id, not directly the labelsId, so better call this field FIELD_ID as it could very well not stay related to the labels id only", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r379369108", "createdAt": "2020-02-14T10:55:15Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1365,38 +1367,42 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           sb.append(\"}\");\n-          \n-          sb.append(\",\\\"a\\\":{\");\n+\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_ATTRIBUTES);\n+          sb.append(\"\\\":{\");\n \n           first = true;\n           for (Entry<String, String> entry: decoder.getMetadata().getAttributes().entrySet()) {\n             if (!first) {\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           \n           sb.append(\"}\");\n-          sb.append(\",\\\"i\\\":\\\"\");\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_LABELSID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODYzMTE3", "url": "https://github.com/senx/warp10-platform/pull/660#pullrequestreview-358863117", "createdAt": "2020-02-14T10:58:02Z", "commit": {"oid": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1ODowM1rOFpy7Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1ODowM1rOFpy7Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MDM0Mg==", "bodyText": "Are integer numbers correctly converted to LONGs by this?", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r379370342", "createdAt": "2020-02-14T10:58:03Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,214 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonFactoryBuilder;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.StreamWriteFeature;\n+import com.fasterxml.jackson.core.json.JsonReadFeature;\n+import com.fasterxml.jackson.core.json.JsonWriteFeature;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class JsonUtils {\n+\n+  /**\n+   * A serializer for null keys.\n+   * Outputs \"null\" because most javascript engines coerce null to \"null\" when using it as a key.\n+   */\n+  private static class NullKeySerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      gen.writeFieldName(\"null\");\n+    }\n+  }\n+\n+  /**\n+   * Used to swap UnknownSerializer and BeanSerializer for CustomEncodersSerializer.\n+   */\n+  public static class NotSerializedToCustomSerializedModifier extends BeanSerializerModifier {\n+    @Override\n+    public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+      if (serializer instanceof UnknownSerializer || serializer instanceof BeanSerializer) {\n+        return customEncodersSerializer;\n+      } else {\n+        return serializer;\n+      }\n+    }\n+  }\n+\n+  public static class CustomEncodersSerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      if (null != encoders && !encoders.isEmpty()) {\n+        StringBuilder sb = new StringBuilder();\n+        boolean encoded = false;\n+        for (JsonEncoder encoder: encoders) {\n+          encoded = encoder.addElement(sb, value);\n+          if (encoded) {\n+            break;\n+          }\n+        }\n+        if (encoded) {\n+          gen.writeRaw(sb.toString());\n+        } else {\n+          // No custom encoders able to encode this object, write null.\n+          gen.writeNull();\n+        }\n+      } else {\n+        // No custom encoders defined, write null.\n+        gen.writeNull();\n+      }\n+    }\n+  }\n+\n+  public static final NullKeySerializer nullKeySerializer = new NullKeySerializer();\n+  public static final CustomEncodersSerializer customEncodersSerializer = new CustomEncodersSerializer();\n+\n+  //\n+  // ObjectMapper instances are thread-safe, so we can safely use a single static instance.\n+  //\n+  private static final ObjectMapper strictMapper;\n+  private static final ObjectMapper looseMapper;\n+\n+  public interface JsonEncoder {\n+    boolean addElement(StringBuilder sb, Object o);\n+  }\n+\n+  private static List<JsonEncoder> encoders;\n+\n+  static {\n+    //\n+    // Configure a module to handle the serialization of non-base classes.\n+    //\n+    SimpleModule module = new SimpleModule();\n+    // Add the NotSerializedToCustomSerializedModifier instance\n+    module.setSerializerModifier(new NotSerializedToCustomSerializedModifier());\n+    // Add core custom serializers\n+    module.addSerializer(new GeoTimeSerieSerializer());\n+    module.addSerializer(new GTSEncoderSerializer());\n+    module.addSerializer(new MetadataSerializer());\n+    module.addSerializer(new NamedWarpScriptFunctionSerializer());\n+    module.addSerializer(new MacroSerializer());\n+    module.addSerializer(new BytesSerializer());\n+    module.addSerializer(new RealVectorSerializer());\n+    module.addSerializer(new RealMatrixSerializer());\n+\n+    //\n+    // Common configuration for both strict and loose mappers.\n+    //\n+    JsonFactoryBuilder builder = new JsonFactoryBuilder();\n+    builder.enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS);\n+    builder.enable(JsonReadFeature.ALLOW_MISSING_VALUES);\n+    builder.enable(JsonWriteFeature.ESCAPE_NON_ASCII);\n+    builder.disable(JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS);\n+    builder.disable(StreamWriteFeature.AUTO_CLOSE_TARGET);\n+\n+    //\n+    // Configure strict mapper\n+    //\n+    builder.enable(JsonWriteFeature.WRITE_NAN_AS_STRINGS);\n+    strictMapper = new ObjectMapper(builder.build());\n+    strictMapper.getSerializerProvider().setNullKeySerializer(nullKeySerializer);\n+    strictMapper.registerModule(module);\n+\n+    //\n+    // Configure loose mapper\n+    //\n+    builder.disable(JsonWriteFeature.WRITE_NAN_AS_STRINGS);\n+    looseMapper = new ObjectMapper(builder.build());\n+    looseMapper.getSerializerProvider().setNullKeySerializer(nullKeySerializer);\n+    looseMapper.registerModule(module);\n+  }\n+\n+  //\n+  // Method to deserialize JSON to Objects.\n+  //\n+\n+  public static Object jsonToObject(String json) throws JsonProcessingException {\n+    return strictMapper.readValue(json, Object.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4"}, "originalPosition": 162}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654d9c9a61c765bbeb10bfea9d42a23d54e72092", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/654d9c9a61c765bbeb10bfea9d42a23d54e72092", "committedDate": "2020-02-14T11:08:38Z", "message": "Fix constant name and place to reflect the fact it is a generic id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODcwODgx", "url": "https://github.com/senx/warp10-platform/pull/660#pullrequestreview-358870881", "createdAt": "2020-02-14T11:12:27Z", "commit": {"oid": "654d9c9a61c765bbeb10bfea9d42a23d54e72092"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3422, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}