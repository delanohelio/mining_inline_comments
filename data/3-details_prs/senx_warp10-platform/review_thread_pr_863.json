{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTE3OTg2", "number": 863, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyODoyOVrOE0voJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowMzoyNlrOE0wbyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQxNzMzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyODoyOVrOHsojyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0NDowN1rOHs00sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzkxMg==", "bodyText": "Missing new line at the end.", "url": "https://github.com/senx/warp10-platform/pull/863#discussion_r516563912", "createdAt": "2020-11-03T10:28:29Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+package io.warp10;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GenerateCryptoKey {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateCryptoKey.class);\n+  private static final SecureRandom sr = new SecureRandom();\n+\n+  public static void main(String[] args) {\n+    if (0 == args.length) {\n+      LOG.error(\"GenerateCryptoKey expects 1 or more configuration filenames\");\n+    }\n+\n+    GenerateCryptoKey.fillConfigFile(args);\n+  }\n+\n+  public static String generateCryptoKey(final int size) {\n+    byte[] key = new byte[size / 8];\n+    sr.nextBytes(key);\n+    return new String(Hex.encode(key));\n+  }\n+\n+  public static void fillConfigFile(final String[] configFiles) {\n+    // Generate crypto key in each file passed as argument\n+    Arrays.asList(configFiles).forEach(file ->\n+      {\n+        Path p = FileSystems.getDefault().getPath(file);\n+        // Read current file\n+        try (Stream<String> lines = Files.lines(p)) {\n+          List<String> replaced = lines\n+            .map(line -> line.replaceAll(\"(.* = hex:)(.*)\", \"$1\" + generateCryptoKey(256)))\n+            // *.hash.* keys need shorted crypto key\n+            .map(line -> line.replaceAll(\"(.*\\\\.hash\\\\..* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .map(line -> line.replaceAll(\"(.*fetch.psk.* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .collect(Collectors.toList());\n+          Files.write(p, replaced);\n+        } catch (IOException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+    );\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d749d83786ca71699f2bc276c0ed99219a281496"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2NDg1MA==", "bodyText": "done", "url": "https://github.com/senx/warp10-platform/pull/863#discussion_r516764850", "createdAt": "2020-11-03T15:44:07Z", "author": {"login": "steven-gueguen"}, "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+package io.warp10;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GenerateCryptoKey {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateCryptoKey.class);\n+  private static final SecureRandom sr = new SecureRandom();\n+\n+  public static void main(String[] args) {\n+    if (0 == args.length) {\n+      LOG.error(\"GenerateCryptoKey expects 1 or more configuration filenames\");\n+    }\n+\n+    GenerateCryptoKey.fillConfigFile(args);\n+  }\n+\n+  public static String generateCryptoKey(final int size) {\n+    byte[] key = new byte[size / 8];\n+    sr.nextBytes(key);\n+    return new String(Hex.encode(key));\n+  }\n+\n+  public static void fillConfigFile(final String[] configFiles) {\n+    // Generate crypto key in each file passed as argument\n+    Arrays.asList(configFiles).forEach(file ->\n+      {\n+        Path p = FileSystems.getDefault().getPath(file);\n+        // Read current file\n+        try (Stream<String> lines = Files.lines(p)) {\n+          List<String> replaced = lines\n+            .map(line -> line.replaceAll(\"(.* = hex:)(.*)\", \"$1\" + generateCryptoKey(256)))\n+            // *.hash.* keys need shorted crypto key\n+            .map(line -> line.replaceAll(\"(.*\\\\.hash\\\\..* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .map(line -> line.replaceAll(\"(.*fetch.psk.* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .collect(Collectors.toList());\n+          Files.write(p, replaced);\n+        } catch (IOException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+    );\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzkxMg=="}, "originalCommit": {"oid": "d749d83786ca71699f2bc276c0ed99219a281496"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ3MTYxOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDo0MjoxNVrOHspE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0NDoxOFrOHs01VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MjM3Mw==", "bodyText": "Use the logger.", "url": "https://github.com/senx/warp10-platform/pull/863#discussion_r516572373", "createdAt": "2020-11-03T10:42:15Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+package io.warp10;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GenerateCryptoKey {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateCryptoKey.class);\n+  private static final SecureRandom sr = new SecureRandom();\n+\n+  public static void main(String[] args) {\n+    if (0 == args.length) {\n+      LOG.error(\"GenerateCryptoKey expects 1 or more configuration filenames\");\n+    }\n+\n+    GenerateCryptoKey.fillConfigFile(args);\n+  }\n+\n+  public static String generateCryptoKey(final int size) {\n+    byte[] key = new byte[size / 8];\n+    sr.nextBytes(key);\n+    return new String(Hex.encode(key));\n+  }\n+\n+  public static void fillConfigFile(final String[] configFiles) {\n+    // Generate crypto key in each file passed as argument\n+    Arrays.asList(configFiles).forEach(file ->\n+      {\n+        Path p = FileSystems.getDefault().getPath(file);\n+        // Read current file\n+        try (Stream<String> lines = Files.lines(p)) {\n+          List<String> replaced = lines\n+            .map(line -> line.replaceAll(\"(.* = hex:)(.*)\", \"$1\" + generateCryptoKey(256)))\n+            // *.hash.* keys need shorted crypto key\n+            .map(line -> line.replaceAll(\"(.*\\\\.hash\\\\..* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .map(line -> line.replaceAll(\"(.*fetch.psk.* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .collect(Collectors.toList());\n+          Files.write(p, replaced);\n+        } catch (IOException e) {\n+          e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d749d83786ca71699f2bc276c0ed99219a281496"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2NTAxMg==", "bodyText": "done", "url": "https://github.com/senx/warp10-platform/pull/863#discussion_r516765012", "createdAt": "2020-11-03T15:44:18Z", "author": {"login": "steven-gueguen"}, "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+package io.warp10;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GenerateCryptoKey {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateCryptoKey.class);\n+  private static final SecureRandom sr = new SecureRandom();\n+\n+  public static void main(String[] args) {\n+    if (0 == args.length) {\n+      LOG.error(\"GenerateCryptoKey expects 1 or more configuration filenames\");\n+    }\n+\n+    GenerateCryptoKey.fillConfigFile(args);\n+  }\n+\n+  public static String generateCryptoKey(final int size) {\n+    byte[] key = new byte[size / 8];\n+    sr.nextBytes(key);\n+    return new String(Hex.encode(key));\n+  }\n+\n+  public static void fillConfigFile(final String[] configFiles) {\n+    // Generate crypto key in each file passed as argument\n+    Arrays.asList(configFiles).forEach(file ->\n+      {\n+        Path p = FileSystems.getDefault().getPath(file);\n+        // Read current file\n+        try (Stream<String> lines = Files.lines(p)) {\n+          List<String> replaced = lines\n+            .map(line -> line.replaceAll(\"(.* = hex:)(.*)\", \"$1\" + generateCryptoKey(256)))\n+            // *.hash.* keys need shorted crypto key\n+            .map(line -> line.replaceAll(\"(.*\\\\.hash\\\\..* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .map(line -> line.replaceAll(\"(.*fetch.psk.* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .collect(Collectors.toList());\n+          Files.write(p, replaced);\n+        } catch (IOException e) {\n+          e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MjM3Mw=="}, "originalCommit": {"oid": "d749d83786ca71699f2bc276c0ed99219a281496"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU0OTUzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowMzoyNlrOHsp0zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNTowNzo0M1rOITo6Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NDY1NA==", "bodyText": "You are missing 128 bits keys, directory.psk for instance. Check all references to KeyStore.checkAndSetKey to find all used keys and their length. The cleanest (and tedious) way would be to have a Map in a similar way Python did.\nYou should also compile your regexs outside this stream for performance.", "url": "https://github.com/senx/warp10-platform/pull/863#discussion_r516584654", "createdAt": "2020-11-03T11:03:26Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+package io.warp10;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GenerateCryptoKey {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateCryptoKey.class);\n+  private static final SecureRandom sr = new SecureRandom();\n+\n+  public static void main(String[] args) {\n+    if (0 == args.length) {\n+      LOG.error(\"GenerateCryptoKey expects 1 or more configuration filenames\");\n+    }\n+\n+    GenerateCryptoKey.fillConfigFile(args);\n+  }\n+\n+  public static String generateCryptoKey(final int size) {\n+    byte[] key = new byte[size / 8];\n+    sr.nextBytes(key);\n+    return new String(Hex.encode(key));\n+  }\n+\n+  public static void fillConfigFile(final String[] configFiles) {\n+    // Generate crypto key in each file passed as argument\n+    Arrays.asList(configFiles).forEach(file ->\n+      {\n+        Path p = FileSystems.getDefault().getPath(file);\n+        // Read current file\n+        try (Stream<String> lines = Files.lines(p)) {\n+          List<String> replaced = lines\n+            .map(line -> line.replaceAll(\"(.* = hex:)(.*)\", \"$1\" + generateCryptoKey(256)))\n+            // *.hash.* keys need shorted crypto key\n+            .map(line -> line.replaceAll(\"(.*\\\\.hash\\\\..* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .map(line -> line.replaceAll(\"(.*fetch.psk.* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d749d83786ca71699f2bc276c0ed99219a281496"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2NDA4Nw==", "bodyText": "Thanks for the PR", "url": "https://github.com/senx/warp10-platform/pull/863#discussion_r557464087", "createdAt": "2021-01-14T15:07:43Z", "author": {"login": "steven-gueguen"}, "path": "warp10/src/main/java/io/warp10/GenerateCryptoKey.java", "diffHunk": "@@ -0,0 +1,71 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+package io.warp10;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GenerateCryptoKey {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateCryptoKey.class);\n+  private static final SecureRandom sr = new SecureRandom();\n+\n+  public static void main(String[] args) {\n+    if (0 == args.length) {\n+      LOG.error(\"GenerateCryptoKey expects 1 or more configuration filenames\");\n+    }\n+\n+    GenerateCryptoKey.fillConfigFile(args);\n+  }\n+\n+  public static String generateCryptoKey(final int size) {\n+    byte[] key = new byte[size / 8];\n+    sr.nextBytes(key);\n+    return new String(Hex.encode(key));\n+  }\n+\n+  public static void fillConfigFile(final String[] configFiles) {\n+    // Generate crypto key in each file passed as argument\n+    Arrays.asList(configFiles).forEach(file ->\n+      {\n+        Path p = FileSystems.getDefault().getPath(file);\n+        // Read current file\n+        try (Stream<String> lines = Files.lines(p)) {\n+          List<String> replaced = lines\n+            .map(line -> line.replaceAll(\"(.* = hex:)(.*)\", \"$1\" + generateCryptoKey(256)))\n+            // *.hash.* keys need shorted crypto key\n+            .map(line -> line.replaceAll(\"(.*\\\\.hash\\\\..* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))\n+            .map(line -> line.replaceAll(\"(.*fetch.psk.* = hex:)(.*)\", \"$1\" + generateCryptoKey(128)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NDY1NA=="}, "originalCommit": {"oid": "d749d83786ca71699f2bc276c0ed99219a281496"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1178, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}