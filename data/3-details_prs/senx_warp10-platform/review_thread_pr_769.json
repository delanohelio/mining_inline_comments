{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNzI4NzAy", "number": 769, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozNDoxNFrOEAGIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyODo1M1rOEAHryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTM1OTI0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozNDoxNFrOGbKXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozNDoxNFrOGbKXBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNDQ3MA==", "bodyText": "return chunkCount", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431134470", "createdAt": "2020-05-27T13:34:14Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  public static int getChunkCount() {\n+    return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571364dc56c15762e4154fc2c3ffb232b9c750af"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTM1OTg4OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozNDoyNFrOGbKXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozNDoyNFrOGbKXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNDU3NA==", "bodyText": "return chunkSpan", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431134574", "createdAt": "2020-05-27T13:34:24Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  public static int getChunkCount() {\n+    return 0;\n+  }\n+  public static long getChunkSpan() {\n+    return 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571364dc56c15762e4154fc2c3ffb232b9c750af"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTQwMjg4OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NDoxN1rOGbKzsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NDoxN1rOGbKzsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MTgwOA==", "bodyText": "I would have put these constant as the beginning of the class.", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431141808", "createdAt": "2020-05-27T13:44:17Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  public static int getChunkCount() {\n+    return 0;\n+  }\n+  public static long getChunkSpan() {\n+    return 0L;\n+  }\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571364dc56c15762e4154fc2c3ffb232b9c750af"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTQwMzM2OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NDoyNVrOGbK0Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NDoyNVrOGbK0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MTg5NA==", "bodyText": "I would have put these constant as the beginning of the class.", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431141894", "createdAt": "2020-05-27T13:44:25Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571364dc56c15762e4154fc2c3ffb232b9c750af"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTYxMjEwOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyODo0MlrOGbM6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyODo0MlrOGbM6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NjM3OQ==", "bodyText": "A an empty line between these methods.", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431176379", "createdAt": "2020-05-27T14:28:42Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,159 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  \n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  \n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  \n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  \n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  \n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "367e49f8e0409245e89f4b3289f09a0d11c979c1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTYxMzU1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyODo1M1rOGbM7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyODo1M1rOGbM7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NjYzNA==", "bodyText": "A an empty line between these methods.", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431176634", "createdAt": "2020-05-27T14:28:53Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,159 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  \n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  \n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  \n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  \n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  \n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  \n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  \n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  \n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  \n+  public static int getChunkCount() {\n+    return chunkCount;\n+  }\n+  public static long getChunkSpan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "367e49f8e0409245e89f4b3289f09a0d11c979c1"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1249, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}