{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NzQyODIz", "number": 832, "title": "Make numerical functions work on GTSs", "bodyText": "The work on the GTSs values the same way these functions work on Lists.", "createdAt": "2020-09-17T15:14:05Z", "url": "https://github.com/senx/warp10-platform/pull/832", "merged": true, "mergeCommit": {"oid": "2993f860ddca53cfdc18c906e48fb4f4822ba66e"}, "closed": true, "closedAt": "2020-09-22T12:49:56Z", "author": {"login": "ftence"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJygT9AH2gAyNDg4NzQyODIzOjk4MjM4OTU3YjZjOTBjYmQwMzNkMDc1OWEzMGRjYjc0OTFlYjgwMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKCzncAH2gAyNDg4NzQyODIzOjkyOTM1Yzk1YjY2NWU5NGI2OWJjOTVjYzBhZjViOTA5MmMwOTFjNTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "98238957b6c90cbd033d0759a30dcb7491eb8028", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/98238957b6c90cbd033d0759a30dcb7491eb8028", "committedDate": "2020-09-17T15:13:06Z", "message": "Make numerical functions work on GTSs, using their values, the same way they work on Lists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjE0OTM5", "url": "https://github.com/senx/warp10-platform/pull/832#pullrequestreview-491214939", "createdAt": "2020-09-18T07:28:25Z", "commit": {"oid": "98238957b6c90cbd033d0759a30dcb7491eb8028"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzoyODoyNVrOHUBT_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzozMDo0NFrOHUBYVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NTA2OA==", "bodyText": "why call .longValue() on the GTS value?", "url": "https://github.com/senx/warp10-platform/pull/832#discussion_r490755068", "createdAt": "2020-09-18T07:28:25Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -88,9 +101,43 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n             result.add(opL.applyAsLong(((Number) element).longValue(), ((Number) op0).longValue()));\n           }\n         }\n+        stack.push(result);\n+      } else if (op1 instanceof GeoTimeSerie) {\n+        // A numeric operand on top and a GTS under: apply the operator on each value of the GTS and the single operand.\n+        GeoTimeSerie gts = (GeoTimeSerie) op1;\n+\n+        GeoTimeSerie.TYPE type = gts.getType();\n+\n+        // Only numerical and empty GTSs are allowed.\n+        if (GeoTimeSerie.TYPE.LONG != type && GeoTimeSerie.TYPE.DOUBLE != type && GeoTimeSerie.TYPE.UNDEFINED != type) {\n+          throw new WarpScriptException(unhandledErrorMessage);\n+        }\n+\n+        GeoTimeSerie result = gts.cloneEmpty(gts.size());\n+\n+        GTSOpsHelper.GTSUnaryOp op;\n+\n+        if (null != opD && (null == opL || op0 instanceof Double || type == GeoTimeSerie.TYPE.DOUBLE || op0 instanceof BigDecimal)) {\n+          op = new GTSOpsHelper.GTSUnaryOp() {\n+            @Override\n+            public Object op(GeoTimeSerie gts, int idx) {\n+              return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).longValue(), ((Number) op0).doubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98238957b6c90cbd033d0759a30dcb7491eb8028"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NTgwOA==", "bodyText": "why longValue()?", "url": "https://github.com/senx/warp10-platform/pull/832#discussion_r490755808", "createdAt": "2020-09-18T07:30:00Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -140,10 +187,87 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n             result.add(opL.applyAsLong(((Number) op1).longValue(), ((Number) element).longValue()));\n           }\n         }\n+        stack.push(result);\n+      }\n+    } else if (op0 instanceof GeoTimeSerie) {\n+      GeoTimeSerie gts = (GeoTimeSerie) op0;\n+\n+      GeoTimeSerie.TYPE type = gts.getType();\n+\n+      if (type != GeoTimeSerie.TYPE.LONG && type != GeoTimeSerie.TYPE.DOUBLE && type != GeoTimeSerie.TYPE.UNDEFINED) {\n+        throw new WarpScriptException(unhandledErrorMessage);\n+      }\n+\n+      // A GTS on top, whether the function expects a single operand under or not depends on applyInList.\n+      if (applyInList) {\n+        // Apply operator only on the elements of the list op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])\n+\n+\n+        int n = gts.size();\n+\n+        if (null != opD && (null == opL || GeoTimeSerie.TYPE.DOUBLE == type)) {\n+          Double result = null;\n+\n+          for (int idx = 0; idx < n; idx++) {\n+            Number value = (Number) GTSHelper.valueAtIndex(gts, idx);\n+\n+            if (null == result) {\n+              result = value.doubleValue();\n+            } else {\n+              result = opD.applyAsDouble(result, value.doubleValue());\n+            }\n+          }\n+\n+          stack.push(result);\n+        } else {\n+          Long result = null;\n+\n+          for (int idx = 0; idx < n; idx++) {\n+            Number value = (Number) GTSHelper.valueAtIndex(gts, idx);\n+\n+            if (null == result) {\n+              result = value.longValue();\n+            } else {\n+              result = opL.applyAsLong(result, value.longValue());\n+            }\n+          }\n+\n+          stack.push(result);\n+        }\n+      } else {\n+        // Expect a single operand under the GTS and apply the operator on the single operand and each value of the GTS.\n+        Object op1 = stack.pop();\n+\n+        if (!(op1 instanceof Number)) {\n+          throw new WarpScriptException(unhandledErrorMessage);\n+        }\n+\n+        GeoTimeSerie result = gts.cloneEmpty(gts.size());\n+\n+        GTSOpsHelper.GTSUnaryOp op;\n+\n+        if (null != opD && (null == opL || op1 instanceof Double || type == GeoTimeSerie.TYPE.DOUBLE || op1 instanceof BigDecimal)) {\n+          op = new GTSOpsHelper.GTSUnaryOp() {\n+            @Override\n+            public Object op(GeoTimeSerie gts, int idx) {\n+              return opD.applyAsDouble(((Number) op1).doubleValue(), ((Number) GTSHelper.valueAtIndex(gts, idx)).longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98238957b6c90cbd033d0759a30dcb7491eb8028"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjE4MA==", "bodyText": "Why longValue()?", "url": "https://github.com/senx/warp10-platform/pull/832#discussion_r490756180", "createdAt": "2020-09-18T07:30:44Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java", "diffHunk": "@@ -47,6 +51,43 @@ public Object applyOnElement(Object element) throws WarpScriptException {\n           } else {\n             return opL.applyAsLong(((Number) element).longValue());\n           }\n+        } else if (element instanceof GeoTimeSerie) {\n+          GeoTimeSerie gts = (GeoTimeSerie) element;\n+\n+          GeoTimeSerie.TYPE type = gts.getType();\n+\n+          // Only numerical and empty GTSs are allowed.\n+          if (GeoTimeSerie.TYPE.LONG != type && GeoTimeSerie.TYPE.DOUBLE != type && GeoTimeSerie.TYPE.UNDEFINED != type) {\n+            throw new WarpScriptException(getName() + \" can only operate on LONG, DOUBLE or empty GTSs.\");\n+          }\n+\n+          GeoTimeSerie result = gts.cloneEmpty(gts.size());\n+\n+          GTSOpsHelper.GTSUnaryOp op;\n+\n+          // Initialize the operator depending on which ones are defined and the GTS type.\n+          if (null != opD && (null == opL || gts.getType() == GeoTimeSerie.TYPE.DOUBLE)) {\n+            // Consider all values as doubles because only the double operator is defined or the GTS is of type DOUBLE.\n+            op = new GTSOpsHelper.GTSUnaryOp() {\n+              @Override\n+              public Object op(GeoTimeSerie gts, int idx) {\n+                return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98238957b6c90cbd033d0759a30dcb7491eb8028"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92935c95b665e94b69bc95cc0af5b9092c091c59", "author": {"user": {"login": "ftence", "name": "Fabien Tenc\u00e9"}}, "url": "https://github.com/senx/warp10-platform/commit/92935c95b665e94b69bc95cc0af5b9092c091c59", "committedDate": "2020-09-18T10:12:40Z", "message": "Use .doubleValue() for applyAsDouble parameters"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3210, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}