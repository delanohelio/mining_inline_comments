{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDYxNTAw", "number": 761, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxMjoyOVrOD8I0zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1Nzo1MlrOD8hHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzg1NzQzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxMjoyOVrOGU5K_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToxMDoxMVrOGVTI9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MTQwNg==", "bodyText": "The handling of nested lists should be done by ElementStackFunction itself not left to the willingness of the applyOnElement implementation.\napplyOnElement should be declared abstract, but a final apply method should be added which checks if the passed object is a list, and if so it will build the resulting list by calling apply recursively until an element is not a list in which case applyOnElement will be called.", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r424561406", "createdAt": "2020-05-13T16:12:29Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract class to inherit when a function can be called on a single element or a list of elements or list of list of elements, etc.\n+ * This class can be used, for instance, for a function working on GTSs, GTSEncoders and lists thereof, including lists with mixed types.\n+ * The idea is to generate a function using the parameters on the stack and then to apply this function on the element\n+ * or the list of elements.\n+ * This is similar to GTSStackFunction for GTSs but it is a tad faster if the function uses some parameters as this\n+ * implementation does not use a Map for parameters.\n+ * This is similar to ElementOrListStackFunction but it is faster has it checks for List after the other cases which\n+ * it optimal in almost all the cases where the number of elements is higher than the nesting depth of the lists.\n+ */\n+public abstract class ListRecursiveStackFunction extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  /**\n+   * Interface defining the function to be generated which is applied to each element.\n+   * This method should check the type of the given element and call unhandled on it if the element is of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b97b63c7a9a150d74ed8b2e32d58399981d2cc1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4Njg2OQ==", "bodyText": "After some benchmarks, this solution seems indeed better at the cost of little to none decrease in performance.", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r424986869", "createdAt": "2020-05-14T09:10:11Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract class to inherit when a function can be called on a single element or a list of elements or list of list of elements, etc.\n+ * This class can be used, for instance, for a function working on GTSs, GTSEncoders and lists thereof, including lists with mixed types.\n+ * The idea is to generate a function using the parameters on the stack and then to apply this function on the element\n+ * or the list of elements.\n+ * This is similar to GTSStackFunction for GTSs but it is a tad faster if the function uses some parameters as this\n+ * implementation does not use a Map for parameters.\n+ * This is similar to ElementOrListStackFunction but it is faster has it checks for List after the other cases which\n+ * it optimal in almost all the cases where the number of elements is higher than the nesting depth of the lists.\n+ */\n+public abstract class ListRecursiveStackFunction extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  /**\n+   * Interface defining the function to be generated which is applied to each element.\n+   * This method should check the type of the given element and call unhandled on it if the element is of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MTQwNg=="}, "originalCommit": {"oid": "3b97b63c7a9a150d74ed8b2e32d58399981d2cc1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzYzODkzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxNTo0MFrOGVeYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxNTo0MFrOGVeYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MTE0Mw==", "bodyText": "list of lists or nested lists in a more general way?", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425171143", "createdAt": "2020-05-14T14:15:40Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract class to inherit when a function can be called on a single element or a list of elements or list of list of elements, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgyMzQzOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NToxOFrOGVgPbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NToxOFrOGVgPbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTUxOQ==", "bodyText": "extraneous 'the'", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425201519", "createdAt": "2020-05-14T14:55:18Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.LongBinaryOperator;\n+\n+/**\n+ * Apply a double or long binary operator to two values.\n+ * If the only the long operator is defined, all numbers are converted to long.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgyNjQyOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NTo1M1rOGVgRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1NTo1M1rOGVgRSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTk5NA==", "bodyText": "extraneous 'the'", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425201994", "createdAt": "2020-05-14T14:55:53Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.ListRecursiveStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.math.BigDecimal;\n+import java.util.function.DoubleUnaryOperator;\n+import java.util.function.LongUnaryOperator;\n+\n+/**\n+ * Apply a double or long unary operator to one value, a list of values or nested lists of values.\n+ * If the only the long operator is defined, all numbers are converted to long.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgzNjg0OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1Nzo1MlrOGVgXtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1Nzo1MlrOGVgXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMzYzNw==", "bodyText": "Use 'true' and 'false', not the pythonic 'True' and 'False'", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425203637", "createdAt": "2020-05-14T14:57:52Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.LongBinaryOperator;\n+\n+/**\n+ * Apply a double or long binary operator to two values.\n+ * If the only the long operator is defined, all numbers are converted to long.\n+ * If the only the double operator is defined, all numbers are converted to double.\n+ * If the both long and double operator are defined, all numbers are converted long until a Double or BigDecimal is found,\n+ * then they are all converted to double.\n+ *\n+ * The operator can also be applied to a list of values and a single operand, on top.\n+ * The result is a copy of the list with values being the result of the operator applied on the initial value and the single operand.\n+ *\n+ * If the function is given a list on top, its behavior depends on applyOnSingleList:\n+ * - if True the result is op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1245, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}