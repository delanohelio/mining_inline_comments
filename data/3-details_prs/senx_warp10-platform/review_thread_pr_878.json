{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTc5OTEx", "number": 878, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoxMzoyMFrOE-C_FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNzozOVrOE-DN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDk2MDg1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPADD.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoxMzoyMFrOH7DUeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMToxMjoyNVrOH7JsVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4MjQyNg==", "bodyText": "Why it does not override already present capabilities?", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531682426", "createdAt": "2020-11-27T16:13:20Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPADD.java", "diffHunk": "@@ -0,0 +1,81 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import io.warp10.continuum.Tokens;\n+import io.warp10.quasar.token.thrift.data.ReadToken;\n+import io.warp10.quasar.token.thrift.data.WriteToken;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPADD extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPADD(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a TOKEN.\");\n+    }\n+\n+    String token = (String) top;\n+\n+    Map<String,String> attributes = null;\n+\n+    try {\n+      ReadToken rtoken = Tokens.extractReadToken(token);\n+      attributes = rtoken.getAttributes();\n+    } catch (Exception e) {\n+      try {\n+        WriteToken wtoken = Tokens.extractWriteToken(token);\n+        attributes = wtoken.getAttributes();\n+      } catch (Exception ee) {\n+        throw new WarpScriptException(getName() + \" invalid token.\");\n+      }\n+    }\n+\n+    if (null != attributes && !attributes.isEmpty()) {\n+      Capabilities capabilities = null;\n+\n+      if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+      }\n+\n+      for (Entry<String,String> entry: attributes.entrySet()) {\n+        if (entry.getKey().startsWith(CapabilitiesWarpScriptExtension.CAPABILITIES_PREFIX)) {\n+          if (null == capabilities) {\n+            capabilities = new Capabilities();\n+            stack.setAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR, capabilities);\n+          }\n+          capabilities.capabilities.putIfAbsent(entry.getKey().substring(CapabilitiesWarpScriptExtension.CAPABILITIES_PREFIX.length()), entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NjgzOQ==", "bodyText": "Because if you override you cannot selectively add capabilities from a given token, wherease by combining CAPADD with the current behavior and CAPDEL you can select which capabilities will be (artificially since you actually delete them first) overridden.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531786839", "createdAt": "2020-11-27T21:12:25Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPADD.java", "diffHunk": "@@ -0,0 +1,81 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import io.warp10.continuum.Tokens;\n+import io.warp10.quasar.token.thrift.data.ReadToken;\n+import io.warp10.quasar.token.thrift.data.WriteToken;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPADD extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPADD(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a TOKEN.\");\n+    }\n+\n+    String token = (String) top;\n+\n+    Map<String,String> attributes = null;\n+\n+    try {\n+      ReadToken rtoken = Tokens.extractReadToken(token);\n+      attributes = rtoken.getAttributes();\n+    } catch (Exception e) {\n+      try {\n+        WriteToken wtoken = Tokens.extractWriteToken(token);\n+        attributes = wtoken.getAttributes();\n+      } catch (Exception ee) {\n+        throw new WarpScriptException(getName() + \" invalid token.\");\n+      }\n+    }\n+\n+    if (null != attributes && !attributes.isEmpty()) {\n+      Capabilities capabilities = null;\n+\n+      if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+      }\n+\n+      for (Entry<String,String> entry: attributes.entrySet()) {\n+        if (entry.getKey().startsWith(CapabilitiesWarpScriptExtension.CAPABILITIES_PREFIX)) {\n+          if (null == capabilities) {\n+            capabilities = new Capabilities();\n+            stack.setAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR, capabilities);\n+          }\n+          capabilities.capabilities.putIfAbsent(entry.getKey().substring(CapabilitiesWarpScriptExtension.CAPABILITIES_PREFIX.length()), entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4MjQyNg=="}, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDk2MzQ1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoxNDoxOFrOH7DWGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoxNDoxOFrOH7DWGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4Mjg0Mw==", "bodyText": "A WarpScriptException would be helpful here.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531682843", "createdAt": "2020-11-27T16:14:18Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPCHECK.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPCHECK extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public CAPCHECK(String name) {\n+    super(name);\n+  }\n+  \n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    if (top instanceof String) {      \n+      Capabilities capabilities = null;\n+      \n+      if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+        stack.push(capabilities.capabilities.containsKey((String) top));\n+      } else {\n+        stack.push(false);\n+      }\n+    } else {\n+      stack.push(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDk4MjY1OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyMTozOVrOH7DhjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyMTozOVrOH7DhjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NTc3Mg==", "bodyText": "I would find NULL CAPDEL to clear all capabilities to be less error-prone than [] CAPDEL: having an empty list could happen, having a NULL capability key is much less likely.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531685772", "createdAt": "2020-11-27T16:21:39Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPDEL.java", "diffHunk": "@@ -0,0 +1,65 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.List;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPDEL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPDEL(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object top = stack.pop();\n+\n+    Capabilities capabilities = null;\n+\n+    if (stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR) instanceof Capabilities) {\n+      capabilities = (Capabilities) stack.getAttribute(CapabilitiesWarpScriptExtension.CAPABILITIES_ATTR);\n+    }\n+\n+    if (top instanceof String) {\n+      if (null != capabilities) {\n+        capabilities.capabilities.remove((String) top);\n+      }\n+    } else if (top instanceof List) {\n+      if (null != capabilities) {\n+        if (((List) top).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDk5MjExOnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNToxM1rOH7DnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMToyMDoyM1rOH7JxeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NzI0Mw==", "bodyText": "top could also be null, Capabilities.get would behave the same.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531687243", "createdAt": "2020-11-27T16:25:13Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPGET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPGET(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (top instanceof String) {\n+      stack.push(Capabilities.get(stack, (String) top));\n+    } else if (top instanceof List) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4ODE1Mg==", "bodyText": "Changed the behavior so only null returns the full set of capabilities, if a list is passed, only those in the list are.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531788152", "createdAt": "2020-11-27T21:20:23Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/CAPGET.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class CAPGET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public CAPGET(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (top instanceof String) {\n+      stack.push(Capabilities.get(stack, (String) top));\n+    } else if (top instanceof List) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NzI0Mw=="}, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDk5ODU2OnYy", "diffSide": "RIGHT", "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNzozOVrOH7DrGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMToxMzo0N1rOH7JtBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4ODIxNg==", "bodyText": "You should also add a put method, currently in CAPADD to be consistent.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531688216", "createdAt": "2020-11-27T16:27:39Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.WarpScriptStack;\n+\n+/**\n+ * This class is there only to prevent the capabilities map from being accessible\n+ * on the stack after a STACKATTRIBUTE call so capabilities cannot be added manually.\n+ *\n+ */\n+public class Capabilities {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NzAxMg==", "bodyText": "Getting capabilities is something meant to be done by functions, adding (put) capabilities is only performed by CAPADD.", "url": "https://github.com/senx/warp10-platform/pull/878#discussion_r531787012", "createdAt": "2020-11-27T21:13:47Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/capabilities/Capabilities.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.capabilities;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.WarpScriptStack;\n+\n+/**\n+ * This class is there only to prevent the capabilities map from being accessible\n+ * on the stack after a STACKATTRIBUTE call so capabilities cannot be added manually.\n+ *\n+ */\n+public class Capabilities {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4ODIxNg=="}, "originalCommit": {"oid": "4890d59f9fcc97bd7e0d79d42d9d260438844298"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1192, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}