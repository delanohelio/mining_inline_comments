{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDY3NzQ0", "number": 659, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo1NzoxNlrODeaQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo1NzoxNlrODeaQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjE0MTU4OnYy", "diffSide": "RIGHT", "path": "warp10/src/test/java/io/warp10/continuum/egress/EgressFetchHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo1NzoxNlrOFnh1DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMToyMDoxNlrOFniecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzAzNg==", "bodyText": "Would be clearer if the values used for producer and owner were actual UUIDs, it would not lead people into thinking other values could be there", "url": "https://github.com/senx/warp10-platform/pull/659#discussion_r376993036", "createdAt": "2020-02-10T10:57:16Z", "author": {"login": "hbs"}, "path": "warp10/src/test/java/io/warp10/continuum/egress/EgressFetchHandlerTest.java", "diffHunk": "@@ -1,45 +1,74 @@\n package io.warp10.continuum.egress;\n \n+import io.warp10.WarpConfig;\n import io.warp10.continuum.gts.GTSDecoder;\n import io.warp10.continuum.gts.GTSEncoder;\n import io.warp10.continuum.store.thrift.data.Metadata;\n-import org.apache.commons.io.IOUtils;\n-import org.junit.Test;\n \n-import java.io.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+import java.io.StringReader;\n import java.nio.charset.StandardCharsets;\n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.apache.commons.io.IOUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n import static java.util.Collections.singleton;\n import static java.util.Collections.singletonMap;\n import static org.junit.Assert.assertEquals;\n \n public class EgressFetchHandlerTest {\n-  private static ClassLoader CL = EgressFetchHandlerTest.class.getClassLoader();\n+\n+  private static final ClassLoader CL = EgressFetchHandlerTest.class.getClassLoader();\n+\n+  @BeforeClass\n+  public static void beforeClass() throws Exception {\n+    WarpConfig.safeSetProperties(new StringReader(\"warp.timeunits=us\"));\n+  }\n \n   @Test\n-  public void testJsonDump() throws Exception {\n+  public void testJsonDumpWithoutExpose() throws Exception {\n+    String json = jsonDumpWithExpose(false);\n+    String expect = IOUtils.toString(CL.getResourceAsStream(\"EgressFetchHandlerTest_1.json\"), StandardCharsets.UTF_8);\n+\n+    assertEquals(expect.trim(), json);\n+  }\n+\n+  @Test\n+  public void testJsonDumpWithExpose() throws Exception {\n+    String json = jsonDumpWithExpose(true);\n+    String expect = IOUtils.toString(CL.getResourceAsStream(\"EgressFetchHandlerExposeTest.json\"), StandardCharsets.UTF_8);\n+\n+    assertEquals(expect.trim(), json);\n+  }\n+\n+  private String jsonDumpWithExpose(boolean expose) throws Exception {\n+    Map<String, String> labels = new HashMap<String, String>();\n+    labels.put(\"foo\", \"bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17db98ca7c504beb8354865e9f7ff5433f5c61d0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzYzNA==", "bodyText": "done", "url": "https://github.com/senx/warp10-platform/pull/659#discussion_r377003634", "createdAt": "2020-02-10T11:20:16Z", "author": {"login": "steven-gueguen"}, "path": "warp10/src/test/java/io/warp10/continuum/egress/EgressFetchHandlerTest.java", "diffHunk": "@@ -1,45 +1,74 @@\n package io.warp10.continuum.egress;\n \n+import io.warp10.WarpConfig;\n import io.warp10.continuum.gts.GTSDecoder;\n import io.warp10.continuum.gts.GTSEncoder;\n import io.warp10.continuum.store.thrift.data.Metadata;\n-import org.apache.commons.io.IOUtils;\n-import org.junit.Test;\n \n-import java.io.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+import java.io.StringReader;\n import java.nio.charset.StandardCharsets;\n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.apache.commons.io.IOUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n import static java.util.Collections.singleton;\n import static java.util.Collections.singletonMap;\n import static org.junit.Assert.assertEquals;\n \n public class EgressFetchHandlerTest {\n-  private static ClassLoader CL = EgressFetchHandlerTest.class.getClassLoader();\n+\n+  private static final ClassLoader CL = EgressFetchHandlerTest.class.getClassLoader();\n+\n+  @BeforeClass\n+  public static void beforeClass() throws Exception {\n+    WarpConfig.safeSetProperties(new StringReader(\"warp.timeunits=us\"));\n+  }\n \n   @Test\n-  public void testJsonDump() throws Exception {\n+  public void testJsonDumpWithoutExpose() throws Exception {\n+    String json = jsonDumpWithExpose(false);\n+    String expect = IOUtils.toString(CL.getResourceAsStream(\"EgressFetchHandlerTest_1.json\"), StandardCharsets.UTF_8);\n+\n+    assertEquals(expect.trim(), json);\n+  }\n+\n+  @Test\n+  public void testJsonDumpWithExpose() throws Exception {\n+    String json = jsonDumpWithExpose(true);\n+    String expect = IOUtils.toString(CL.getResourceAsStream(\"EgressFetchHandlerExposeTest.json\"), StandardCharsets.UTF_8);\n+\n+    assertEquals(expect.trim(), json);\n+  }\n+\n+  private String jsonDumpWithExpose(boolean expose) throws Exception {\n+    Map<String, String> labels = new HashMap<String, String>();\n+    labels.put(\"foo\", \"bar\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzAzNg=="}, "originalCommit": {"oid": "17db98ca7c504beb8354865e9f7ff5433f5c61d0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1297, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}