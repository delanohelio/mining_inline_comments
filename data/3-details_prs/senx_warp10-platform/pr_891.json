{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzcyNzc3", "number": 891, "title": "Http extension", "bodyText": "Add the function HTTP\n{\n  'url' 'http://localhost:8080/api/v0/exec'\n\n  'method' 'POST' // optional, default to GET if body is empty, else POST\n  'headers' {} // optional, default to empty map\n  'body' '1 2 3 4' // optional, default to empty string\n\n  'chunk.size' 1024 // optional, if set, will hook the chunk macro whenever a chunk is downloaded\n  'chunk.macro' <% %> // optional, macro to be executed on each chunk, default to <% NOOP %>\n}\nHTTP\n\nMaximum number of calls, download size limit and chunk size limit are controlled by configurations:\n\nwarpscript.http.maxrequests\nwarpscript.http.maxsize\nwarpscript.http.maxchunksize\n\nThey can be raised with capabilities:\n\nhttp.requests\nhttp.size\nhttp.chunksize\n\nIt outputs a map:\n{\n  'headers' { ... }\n  'status.message'  'HTTP/1.1 200 OK'\n  'status.code' 200\n  'content' '[4,3,2,1]' // as a BYTES object\n  // intermediate chunk outputs also have the field 'chunk number'\n}", "createdAt": "2020-12-18T21:03:43Z", "url": "https://github.com/senx/warp10-platform/pull/891", "merged": true, "mergeCommit": {"oid": "e3ddd86462bef441ddca75e8c37e11b705523f7a"}, "closed": true, "closedAt": "2021-05-03T12:40:08Z", "author": {"login": "randomboolean"}, "timelineItems": {"totalCount": 87, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnedEVgH2gAyNTQyNzcyNzc3OjU5N2JhOWNjNjFkMGM3NjAwZGUwYTg0MTA2Y2Q1OGNiNDdmOTNmNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeTGVGzAFqTY1MDIxMDM5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "597ba9cc61d0c7600de0a84106cd58cb47f93f77", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/597ba9cc61d0c7600de0a84106cd58cb47f93f77", "committedDate": "2020-12-18T20:49:11Z", "message": "refactor URLFETCH extension to HTTP extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f7a55f7ac3f0a5ca9416ab68f4a21a9a709986", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/70f7a55f7ac3f0a5ca9416ab68f4a21a9a709986", "committedDate": "2020-12-18T20:49:11Z", "message": "add back URLFETCH extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bd4ba087c37d68af070ad3fd92a7a7a77f05d24", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/3bd4ba087c37d68af070ad3fd92a7a7a77f05d24", "committedDate": "2020-12-18T20:49:11Z", "message": "refactor to use formatted design pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ebac0ae369e0b5b04f376d4d77b101e729cc361", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/0ebac0ae369e0b5b04f376d4d77b101e729cc361", "committedDate": "2020-12-18T20:49:11Z", "message": "add capability to HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff2a6e86c88dace356ddab30297805e7dff25ba", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/5ff2a6e86c88dace356ddab30297805e7dff25ba", "committedDate": "2020-12-18T20:49:11Z", "message": "handle arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf668197948071dfc54415c59c5d4fb68679f04d", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/cf668197948071dfc54415c59c5d4fb68679f04d", "committedDate": "2020-12-18T20:49:11Z", "message": "change anum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2230053edbf159a0a36599a6a963d018cbebb1", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/3d2230053edbf159a0a36599a6a963d018cbebb1", "committedDate": "2020-12-18T20:49:11Z", "message": "add every method to HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74bba9d00999e84f04c32c27c912dea2a67797e", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/f74bba9d00999e84f04c32c27c912dea2a67797e", "committedDate": "2020-12-18T20:49:11Z", "message": "bugfix on HTTP capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ca8da93d73359c33b0ce13247fd36ac31bf5383", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/0ca8da93d73359c33b0ce13247fd36ac31bf5383", "committedDate": "2020-12-18T20:49:11Z", "message": "dep nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6449ea0c25aea6533c6abca13871ded1a21ae9f", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/c6449ea0c25aea6533c6abca13871ded1a21ae9f", "committedDate": "2020-12-18T20:49:11Z", "message": "update conf templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/822e405ec4807f902d2e351d438174bd0ab9678a", "committedDate": "2020-12-18T21:00:54Z", "message": "fix check permission for HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ccea80f8cbe3b8071f5c7a38641cbc5a46eb452", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/4ccea80f8cbe3b8071f5c7a38641cbc5a46eb452", "committedDate": "2020-12-19T08:31:39Z", "message": "Typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d33061df5b124a215e4956ac26a792fc500aae86", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/d33061df5b124a215e4956ac26a792fc500aae86", "committedDate": "2020-12-19T08:34:46Z", "message": "Fix doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTI2NDk3", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-555926497", "createdAt": "2020-12-19T08:22:03Z", "commit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwODoyMjowM1rOII6Biw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwODo1MjoxMlrOII6MIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDE4Nw==", "bodyText": "Must be commented by default.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210187", "createdAt": "2020-12-19T08:22:03Z", "author": {"login": "hbs"}, "path": "etc/conf.templates/distributed/70--extensions.conf.template", "diffHunk": "@@ -58,6 +58,8 @@\n #token.secret = ....\n // URLFETCH, MAXURLFETCHCOUNT, MAXURLFETCHSIZE\n #warpscript.extension.urlfetch = io.warp10.script.ext.urlfetch.UrlFetchWarpScriptExtension\n+// HTTP, MAXURLCOUNT, MAXDOWNLOADSIZE\n+warpscript.extension.http = io.warp10.script.ext.http.HttpWarpScriptExtension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDIwNg==", "bodyText": "Must be commented by default.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210206", "createdAt": "2020-12-19T08:22:16Z", "author": {"login": "hbs"}, "path": "etc/conf.templates/standalone/70--extensions.conf.template", "diffHunk": "@@ -58,6 +58,8 @@\n #token.secret = ....\n // URLFETCH, MAXURLFETCHCOUNT, MAXURLFETCHSIZE\n #warpscript.extension.urlfetch = io.warp10.script.ext.urlfetch.UrlFetchWarpScriptExtension\n+// HTTP, MAXURLCOUNT, MAXDOWNLOADSIZE\n+warpscript.extension.http = io.warp10.script.ext.http.HttpWarpScriptExtension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDIxNQ==", "bodyText": "2020", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210215", "createdAt": "2020-12-19T08:22:24Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDMyNQ==", "bodyText": "Use extends NamedWarpScriptFunction implements WarpScriptStackFunction for clarity. The FormattedWarpScriptFunction approach does cripple the overall readability and may be removed in future versions of Warp 10.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210325", "createdAt": "2020-12-19T08:23:33Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDQ1MQ==", "bodyText": "The documentation will be elsewhere but this is no longer limited to the GET method.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210451", "createdAt": "2020-12-19T08:24:54Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDU1OA==", "bodyText": "The content must be returned as BYTES, not base 64 encoded as STRING. And returning a MAP is probably wiser.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210558", "createdAt": "2020-12-19T08:25:58Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDcyMw==", "bodyText": "This must not be called at each invocation. Extract the capability name once at instantiation time and refer to that in apply.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210723", "createdAt": "2020-12-19T08:27:17Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMDg2Mw==", "bodyText": "Capabilities are checked using Capabilities#get", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546210863", "createdAt": "2020-12-19T08:28:46Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTAzMA==", "bodyText": "The authorization type should be configurable, either none, i.e. the function can be used by anyone if the extension is loaded, authenticated, AUTHENTICATE must have been called, and capability to inspect a capability.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211030", "createdAt": "2020-12-19T08:30:57Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTE3OQ==", "bodyText": "We don't need synchronization, the rare cases where the count would be incorrect (use in CEVAL) don't need to be handled as their consequence is not important.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211179", "createdAt": "2020-12-19T08:33:19Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTMxMg==", "bodyText": "Simply do the check with  addAndGet(1), it is an AtomicLong", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211312", "createdAt": "2020-12-19T08:34:46Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTQyNA==", "bodyText": "I think it it better to disallow user infos in the URL and to provide a macro to encode basic authentication which can then be passed in the headers.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211424", "createdAt": "2020-12-19T08:35:48Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTUxNA==", "bodyText": "Call them headers", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211514", "createdAt": "2020-12-19T08:36:29Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTgyNg==", "bodyText": "the body parameter could contain a STRING or BYTES to let the user choose the charset used.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211826", "createdAt": "2020-12-19T08:39:16Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTg0Mw==", "bodyText": "body could be a STRING or BYTES", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211843", "createdAt": "2020-12-19T08:39:37Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {\n+        String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n+        properties.put(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setDoOutput(body.length() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMTg4Mw==", "bodyText": "Use StandardCharsets.UTF8 explicitely", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546211883", "createdAt": "2020-12-19T08:40:00Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {\n+        String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n+        properties.put(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setDoOutput(body.length() > 0);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      if (body.length() > 0) {\n+        try (OutputStream os = conn.getOutputStream()) {\n+          os.write(body.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjAwOQ==", "bodyText": "request to", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212009", "createdAt": "2020-12-19T08:42:02Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,278 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Apply an HTTP method over an url\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADER = \"header\";\n+  public static final String BODY = \"body\";\n+  public static final String RESPONSE = \"response\";\n+\n+  private final Arguments args;\n+  private final Arguments output;\n+\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final ReentrantLock stackCountersLock = new ReentrantLock();\n+  private final WebAccessController webAccessController;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the GET request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADER, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(String.class, BODY, \"An optional body\", \"\")\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(List.class, RESPONSE, \"A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\")\n+      .build();\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check capability if set in configuration, or else check stack authentication\n+    //\n+\n+    Properties props = WarpConfig.getProperties();\n+\n+    if (props.containsKey(HttpWarpScriptExtension.HTTP_CAPABILITY)) {\n+      if (stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR) instanceof Capabilities) {\n+        Capabilities capabilities = (Capabilities) stack.getAttribute(WarpScriptStack.CAPABILITIES_ATTR);\n+\n+        if (!(capabilities.containsKey(props.getProperty(HttpWarpScriptExtension.HTTP_CAPABILITY)))) {\n+          throw new WarpScriptException(\"Capability \" + HttpWarpScriptExtension.HTTP_CAPABILITY + \" is required by function \" + getName());\n+        }\n+      }\n+\n+    } else if (!stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> properties = (Map) formattedArgs.get(HEADER);\n+    String body = (String) formattedArgs.get(BODY);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    try {\n+      stackCountersLock.lockInterruptibly();\n+\n+      Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT);\n+      Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+      if (null == ufCount || null == ufSize) {\n+        urlCount = new AtomicLong();\n+        downloadSize = new AtomicLong();\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_COUNT, urlCount);\n+        stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+      } else {\n+        urlCount = (AtomicLong) ufCount;\n+        downloadSize = (AtomicLong) ufSize;\n+      }\n+    } catch (InterruptedException ie) {\n+      throw new WarpScriptException(getName() + \" thread has been interrupted\", ie);\n+    } finally {\n+      if (stackCountersLock.isHeldByCurrentThread()) {\n+        stackCountersLock.unlock();\n+      }\n+    }\n+\n+    if (urlCount.get() + 1 > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    // Recheck the count here in case of concurrent runs\n+    if (urlCount.addAndGet(1) > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT)) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_LIMIT) + \" calls.\");\n+    }\n+\n+    HttpURLConnection conn = null;\n+\n+    List<Object> res = new ArrayList<Object>();\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      if (null != url.getUserInfo()) {\n+        String basicAuth = \"Basic \" + new String(Base64.encodeBase64String(url.getUserInfo().getBytes(StandardCharsets.UTF_8)));\n+        properties.put(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: properties.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setDoOutput(body.length() > 0);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      if (body.length() > 0) {\n+        try (OutputStream os = conn.getOutputStream()) {\n+          os.write(body.getBytes());\n+        }\n+      }\n+\n+      byte[] buf = new byte[8192];\n+\n+      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+      InputStream in = null;\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      while (true) {\n+        int len = in.read(buf);\n+\n+        if (len < 0) {\n+          break;\n+        }\n+\n+        if (downloadSize.get() + baos.size() + len > (long) HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_MAXSIZE)) {\n+          throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + HttpWarpScriptExtension.getLongAttribute(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_MAXSIZE) + \" bytes)\");\n+        }\n+\n+        baos.write(buf, 0, len);\n+      }\n+\n+      downloadSize.addAndGet(baos.size());\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.add(conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.add(statusMsg.get(0));\n+        } else {\n+          res.add(\"\");\n+        }\n+      } else {\n+        res.add(\"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.add(hdrs);\n+      res.add(Base64.encodeBase64String(baos.toByteArray()));\n+\n+    } catch (IOException ioe) {\n+      throw new WarpScriptException(getName() + \" encountered an error while making an HTTP \" + method + \" request over '\" + url + \"'\", ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjIwNQ==", "bodyText": "These functions do not need to exist. Rely on capabilities to modify the limits.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212205", "createdAt": "2020-12-19T08:44:22Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjMwMg==", "bodyText": "change the name to maxrequests", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212302", "createdAt": "2020-12-19T08:45:23Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjM2Nw==", "bodyText": "remove the hard limit and use token capabilities.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212367", "createdAt": "2020-12-19T08:45:50Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjM3Mg==", "bodyText": "remove hard limit", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212372", "createdAt": "2020-12-19T08:45:57Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjQzOA==", "bodyText": "rename to http.requests", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212438", "createdAt": "2020-12-19T08:46:30Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjQ2OA==", "bodyText": "rename to http.maxrequests", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212468", "createdAt": "2020-12-19T08:46:44Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjU4NQ==", "bodyText": "remove hard limit", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212585", "createdAt": "2020-12-19T08:48:01Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjcwMw==", "bodyText": "this is too high, limit to 1 so users explicitly set the configuration.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212703", "createdAt": "2020-12-19T08:49:00Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n+\n+  /**\n+   * Current  HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n+\n+  //\n+  // DEFAULTS\n+  //\n+\n+  public static final long DEFAULT_HTTP_LIMIT = 64L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjcyMg==", "bodyText": "Lower that to 65536", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212722", "createdAt": "2020-12-19T08:49:17Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n+\n+  /**\n+   * Current  HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n+\n+  //\n+  // DEFAULTS\n+  //\n+\n+  public static final long DEFAULT_HTTP_LIMIT = 64L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjg2NA==", "bodyText": "Remove this. We can consider adding a method to StackUtils to enforce a similar logic but with a simpler behavior, i.e. no attributeToConf structure but simply an extraneous parameter to the call.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212864", "createdAt": "2020-12-19T08:51:48Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Extension for HTTP and the associated function to change limits: MAXURLCOUNT and MAXDOWNLOADSIZE\n+ */\n+public class HttpWarpScriptExtension extends WarpScriptExtension {\n+\n+  //\n+  // CAPABILITIES\n+  //\n+\n+  /**\n+   * If this configuration is set, then HTTP function will check for this capability.\n+   */\n+  public static final String HTTP_CAPABILITY = \"warpscript.http.capability\";\n+\n+  //\n+  // CONFIGURATION\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_LIMIT = \"warpscript.http.limit\";\n+  public static final String WARPSCRIPT_HTTP_LIMIT_HARD = \"warpscript.http.limit.hard\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE = \"warpscript.http.maxsize\";\n+  public static final String WARPSCRIPT_HTTP_MAXSIZE_HARD = \"warpscript.http.maxsize.hard\";\n+\n+  /**\n+   * Allowed and excluded host patterns.\n+   */\n+  public static final String WARPSCRIPT_HTTP_HOST_PATTERNS = \"warpscript.http.host.patterns\";\n+\n+  //\n+  // STACK\n+  //\n+\n+  /**\n+   * Maximum number of calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_LIMIT = \"http.limit\";\n+  public static final String ATTRIBUTE_HTTP_LIMIT_HARD = \"http.limit.hard\";\n+\n+  /**\n+   * Number of calls to HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_COUNT = \"http.count\";\n+\n+  /**\n+   * Maximum cumulative size of content retrieved via calls to HTTP in a session\n+   */\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE = \"http.maxsize\";\n+  public static final String ATTRIBUTE_HTTP_MAXSIZE_HARD = \"http.maxsize.hard\";\n+\n+  /**\n+   * Current  HTTP so far in the sessions\n+   */\n+  public static final String ATTRIBUTE_HTTP_SIZE = \"http.size\";\n+\n+  //\n+  // DEFAULTS\n+  //\n+\n+  public static final long DEFAULT_HTTP_LIMIT = 64L;\n+  public static final long DEFAULT_HTTP_MAXSIZE = 1000000L;\n+\n+  //\n+  // ASSOCIATIONS attributes to either configuration or defaults\n+  //\n+\n+  /**\n+   * Associates the attribute name to the configuration name\n+   */\n+  private static final Map<String, String> attributeToConf;\n+\n+  /**\n+   * Associates the attribute name to its default value\n+   */\n+  private static final Map<String, Long> attributeToDefault;\n+\n+  private static final Map<String, Object> functions;\n+\n+  static {\n+    // Initialize attribute->configuration\n+    Map<String, String> a2c = new HashMap<String, String>();\n+    a2c.put(ATTRIBUTE_HTTP_LIMIT, WARPSCRIPT_HTTP_LIMIT);\n+    a2c.put(ATTRIBUTE_HTTP_MAXSIZE, WARPSCRIPT_HTTP_MAXSIZE);\n+    a2c.put(ATTRIBUTE_HTTP_LIMIT_HARD, WARPSCRIPT_HTTP_LIMIT_HARD);\n+    a2c.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, WARPSCRIPT_HTTP_MAXSIZE_HARD);\n+    attributeToConf = Collections.unmodifiableMap(a2c);\n+\n+    // Initialize attribute->default\n+    Map<String, Long> a2d = new HashMap<String, Long>();\n+    a2d.put(ATTRIBUTE_HTTP_LIMIT, DEFAULT_HTTP_LIMIT);\n+    a2d.put(ATTRIBUTE_HTTP_MAXSIZE, DEFAULT_HTTP_MAXSIZE);\n+    a2d.put(ATTRIBUTE_HTTP_LIMIT_HARD, DEFAULT_HTTP_LIMIT);\n+    a2d.put(ATTRIBUTE_HTTP_MAXSIZE_HARD, DEFAULT_HTTP_MAXSIZE);\n+    attributeToDefault = Collections.unmodifiableMap(a2d);\n+\n+    // Create functions and map\n+    functions = new HashMap<String, Object>();\n+\n+    functions.put(\"HTTP\", new HTTP(\"HTTP\"));\n+    functions.put(\"MAXURLCOUNT\", new MAXURLCOUNT(\"MAXURLCOUNT\"));\n+    functions.put(\"MAXDOWNLOADSIZE\", new MAXDOWNLOADSIZE(\"MAXDOWNLOADSIZE\"));\n+  }\n+\n+  public Map<String, Object> getFunctions() {\n+    return functions;\n+  }\n+\n+  /**\n+   * Get the value of the attribute in the stack, if not present get the value in the configuration and it not present either, get the default value.\n+   * Also set the attribute in the stack once the value is found.\n+   *\n+   * @param stack     The stack the get the attribute from, if present.\n+   * @param attribute The attribute name to get.\n+   * @return The first available value in the list: attribute value, configuration value, default.\n+   */\n+  public static Long getLongAttribute(WarpScriptStack stack, String attribute) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjg5OA==", "bodyText": "2020", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546212898", "createdAt": "2020-12-19T08:52:12Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HttpWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,172 @@\n+//\n+//   Copyright 2021  SenX S.A.S.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822e405ec4807f902d2e351d438174bd0ab9678a"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e69b4b49e3b4debc57c2ef45f95dbe97b65cf3d", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/5e69b4b49e3b4debc57c2ef45f95dbe97b65cf3d", "committedDate": "2021-01-28T15:26:38Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a37df1a059faaff0319bbc52820a677360c78e", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/40a37df1a059faaff0319bbc52820a677360c78e", "committedDate": "2021-01-28T15:51:50Z", "message": "modify config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7200e3cf96ffff0373e2ce0ffdc251b26476412f", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/7200e3cf96ffff0373e2ce0ffdc251b26476412f", "committedDate": "2021-01-28T15:57:43Z", "message": "Merge branch 'HTTP' of github.com:randomboolean/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79e81264d233abadff65f772a9bff1d218de18b7", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/79e81264d233abadff65f772a9bff1d218de18b7", "committedDate": "2021-03-17T15:42:55Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f198c0f946767df0a942435880c3003e04862e32", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/f198c0f946767df0a942435880c3003e04862e32", "committedDate": "2021-03-17T16:54:16Z", "message": "resolve some points"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c93d60435ad1dd7e16721cfab16357f54bb244", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/48c93d60435ad1dd7e16721cfab16357f54bb244", "committedDate": "2021-03-17T17:01:18Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/ad173b84116a1b9aaa6b98f98e370b7a5abf0e96", "committedDate": "2021-03-18T09:22:48Z", "message": "change authorization handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/7709ead7e4c8cebacbc592cb7d5bf2dfbef1514f", "committedDate": "2021-03-18T09:32:25Z", "message": "resolve some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/0282a8a34106a2ce53f043d0e44c297cdcd8a75b", "committedDate": "2021-03-18T10:08:26Z", "message": "replace list output by map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e958230cc93081b2f79bc7182b43bc2f91e9c64", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/0e958230cc93081b2f79bc7182b43bc2f91e9c64", "committedDate": "2021-03-18T10:27:10Z", "message": "request body can be BYTES or STRING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f794c39f29441072747f797bb141ff61679066b", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/3f794c39f29441072747f797bb141ff61679066b", "committedDate": "2021-03-18T11:10:14Z", "message": "remove sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6f39969814200600fdc582732aa65d57813a3fc", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/e6f39969814200600fdc582732aa65d57813a3fc", "committedDate": "2021-03-18T15:26:33Z", "message": "check protocol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1310de4c8047c041d1708afae93887a974fdd1b0", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/1310de4c8047c041d1708afae93887a974fdd1b0", "committedDate": "2021-03-18T16:06:16Z", "message": "basic authentication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a0cb52d252c5c04842994fe78d3005043efaaa", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/28a0cb52d252c5c04842994fe78d3005043efaaa", "committedDate": "2021-03-18T17:37:27Z", "message": "replace conf with capabilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f15a316845fcfbbad9f7cd4c49a6a031182e9143", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/f15a316845fcfbbad9f7cd4c49a6a031182e9143", "committedDate": "2021-03-18T17:51:35Z", "message": "conf and web access control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd42862c9fb7fd24bdb447524992f349d2aaa426", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/bd42862c9fb7fd24bdb447524992f349d2aaa426", "committedDate": "2021-03-18T18:01:45Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "593ae663acc4444f2db9948ebd4bcb1941fb95b9", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/593ae663acc4444f2db9948ebd4bcb1941fb95b9", "committedDate": "2021-03-19T10:26:19Z", "message": "comments and conf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "288666824ba884e3689ab8713870e6d7566b4ba6", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/288666824ba884e3689ab8713870e6d7566b4ba6", "committedDate": "2021-03-19T12:09:25Z", "message": "add chunk option for streaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4324a8a49aa57d835c0eee70cbfcbed32dbf60", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/bd4324a8a49aa57d835c0eee70cbfcbed32dbf60", "committedDate": "2021-03-19T15:46:33Z", "message": "bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19463b6059adc8c8c16749fa42857cefc53d2967", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/19463b6059adc8c8c16749fa42857cefc53d2967", "committedDate": "2021-03-19T15:47:01Z", "message": " allow null as default value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af665abf2583a7095f6c986547af6c2392e83c1a", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/af665abf2583a7095f6c986547af6c2392e83c1a", "committedDate": "2021-03-20T21:59:31Z", "message": "reuse same map in chunk mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3801230ee2faca1993d62c4645fc4284f284e322", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/3801230ee2faca1993d62c4645fc4284f284e322", "committedDate": "2021-03-21T09:39:21Z", "message": "configurable defaults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/7bc69e913ad5d2bd1bd4b6d1352c6a5ba519cabb", "committedDate": "2021-03-21T09:40:35Z", "message": "conf variable renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc33e4f1c7a26d4d8163a82d6c16e12ed6de823", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/1fc33e4f1c7a26d4d8163a82d6c16e12ed6de823", "committedDate": "2021-03-21T09:40:56Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30451cad079f54f5a33feb96241cfe64274fb6c6", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/30451cad079f54f5a33feb96241cfe64274fb6c6", "committedDate": "2021-03-23T09:43:26Z", "message": "more comments in conf template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1533d967b38596ac6a3d9628d4406ed89e09ec1e", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/1533d967b38596ac6a3d9628d4406ed89e09ec1e", "committedDate": "2021-03-23T09:45:18Z", "message": "typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/fe84c89749836226e250b13c2ff55a9a83e94ce1", "committedDate": "2021-03-23T09:49:22Z", "message": "update a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82afa6105025a768f57476cd108ccbbbd774c0d0", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/82afa6105025a768f57476cd108ccbbbd774c0d0", "committedDate": "2021-03-23T14:29:40Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/de5b43b1d7000032e8dd12fad9c477bbfe63a8ff", "committedDate": "2021-03-23T14:57:43Z", "message": "remove formatted class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c3c4e3991645dd8e5f4ab4ec684c4a7da9d6fbe", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/9c3c4e3991645dd8e5f4ab4ec684c4a7da9d6fbe", "committedDate": "2021-03-23T15:16:35Z", "message": "remove changes to formatted class from PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE4NTEzNDQw", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-618513440", "createdAt": "2021-03-23T12:12:18Z", "commit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxMjoxMjoxOFrOI7vTpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QxNToyMjo0MVrOI75HFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxMTk3Mg==", "bodyText": "Do not prefix with WarpScriptStack.CAPABILITIES_PREFIX.\nIf a token has the attribute .cap:http you're looking for the http capability, not the .cap:http capability.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599511972", "createdAt": "2021-03-23T12:12:18Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxNjU0Mg==", "bodyText": "Do not prefix with WarpScriptStack.CAPABILITIES_PREFIX (x2).", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599516542", "createdAt": "2021-03-23T12:19:26Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxNjYxMA==", "bodyText": "Do not prefix with WarpScriptStack.CAPABILITIES_PREFIX (x2).", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599516610", "createdAt": "2021-03-23T12:19:33Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUyOTQ2NQ==", "bodyText": "\"inspected\" is too vague, I'd prefer \"checked\" to stick with the CAPCHECK terminology.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599529465", "createdAt": "2021-03-23T12:39:11Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/distributed/20-warpscript.conf.template", "diffHunk": "@@ -218,6 +218,21 @@ warpscript.mobius.pool = 16\n // List of patterns to include/exclude for hosts, works the same way as webcall.host.patterns. Defaults to the value of webcall.host.patterns.\n #warpscript.urlfetch.host.patterns =\n \n+//\n+// HTTP extension\n+//\n+\n+// If set to true, HTTP requires the stack to be authenticated\n+#warpscript.http.authentication.required =\n+// If set, the capability .cap:<warpscript.http.capability> is inspected to grant access to HTTP function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzMDY0Ng==", "bodyText": "Same here with \"inspected\".", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599530646", "createdAt": "2021-03-23T12:40:52Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/standalone/20-warpscript.conf.template", "diffHunk": "@@ -216,6 +216,21 @@ warpscript.runner.bootstrap.period = 120000\n // List of patterns to include/exclude for hosts, works the same way as webcall.host.patterns. Defaults to the value of webcall.host.patterns.\n #warpscript.urlfetch.host.patterns =\n \n+//\n+// HTTP extension\n+//\n+\n+// If set to true, HTTP requires the stack to be authenticated\n+#warpscript.http.authentication.required =\n+// If set, the capability .cap:<warpscript.http.capability> is inspected to grant access to HTTP function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzMjI5Mg==", "bodyText": "Do not prefix capabilities with \".cap\". This prefix is only to store them in tokens, the capabilities are \"<warpscript.http.capability>\", \"http.requests\" and \"http.size\".", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599532292", "createdAt": "2021-03-23T12:43:22Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/distributed/20-warpscript.conf.template", "diffHunk": "@@ -218,6 +218,21 @@ warpscript.mobius.pool = 16\n // List of patterns to include/exclude for hosts, works the same way as webcall.host.patterns. Defaults to the value of webcall.host.patterns.\n #warpscript.urlfetch.host.patterns =\n \n+//\n+// HTTP extension\n+//\n+\n+// If set to true, HTTP requires the stack to be authenticated\n+#warpscript.http.authentication.required =\n+// If set, the capability .cap:<warpscript.http.capability> is inspected to grant access to HTTP function\n+#warpscript.http.capability =\n+// Maximum number of HTTP calls, 1 by default, can be raised with capability .cap:http.requests\n+#warpscript.http.requests =\n+// Maximum downloaded bytes by HTTP, 65536 by default, can be raised with capability .cap:http.size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzMjUwNw==", "bodyText": "Same here with \".cap:\" prefix.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599532507", "createdAt": "2021-03-23T12:43:40Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/standalone/20-warpscript.conf.template", "diffHunk": "@@ -216,6 +216,21 @@ warpscript.runner.bootstrap.period = 120000\n // List of patterns to include/exclude for hosts, works the same way as webcall.host.patterns. Defaults to the value of webcall.host.patterns.\n #warpscript.urlfetch.host.patterns =\n \n+//\n+// HTTP extension\n+//\n+\n+// If set to true, HTTP requires the stack to be authenticated\n+#warpscript.http.authentication.required =\n+// If set, the capability .cap:<warpscript.http.capability> is inspected to grant access to HTTP function\n+#warpscript.http.capability =\n+// Maximum number of HTTP calls, 1 by default, can be raised with capability .cap:http.requests\n+#warpscript.http.requests =\n+// Maximum downloaded bytes by HTTP, 65536 by default, can be raised with capability .cap:http.size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzMzQ5NQ==", "bodyText": "No \".cap:\" prefix.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599533495", "createdAt": "2021-03-23T12:45:03Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzNTQ1MA==", "bodyText": "Parameter names do not have spaces in other functions, I'd go with dots instead, ie \"auth.info\", etc.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599535450", "createdAt": "2021-03-23T12:47:41Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzNTg2Mw==", "bodyText": "Same here with spaces in keys, prefer dots.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599535863", "createdAt": "2021-03-23T12:48:19Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUzNzk1Nw==", "bodyText": "Use camelCase.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599537957", "createdAt": "2021-03-23T12:50:52Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU0OTY4Mw==", "bodyText": "Use parseLong to avoid unnecessary boxing.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599549683", "createdAt": "2021-03-23T13:06:58Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU0OTc2Nw==", "bodyText": "Ditto.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599549767", "createdAt": "2021-03-23T13:07:06Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1MDg5Ng==", "bodyText": "Fixing this will make the if useless.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599550896", "createdAt": "2021-03-23T13:08:34Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUxMTk3Mg=="}, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1NjUyNQ==", "bodyText": "\"maxrequests\" or \"requests.max\" may be more self-explanatory.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599556525", "createdAt": "2021-03-23T13:16:01Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/distributed/20-warpscript.conf.template", "diffHunk": "@@ -218,6 +218,21 @@ warpscript.mobius.pool = 16\n // List of patterns to include/exclude for hosts, works the same way as webcall.host.patterns. Defaults to the value of webcall.host.patterns.\n #warpscript.urlfetch.host.patterns =\n \n+//\n+// HTTP extension\n+//\n+\n+// If set to true, HTTP requires the stack to be authenticated\n+#warpscript.http.authentication.required =\n+// If set, the capability .cap:<warpscript.http.capability> is inspected to grant access to HTTP function\n+#warpscript.http.capability =\n+// Maximum number of HTTP calls, 1 by default, can be raised with capability .cap:http.requests\n+#warpscript.http.requests =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1NjkzNw==", "bodyText": "Same here, \"maxrequests\" or something else?", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599556937", "createdAt": "2021-03-23T13:16:34Z", "author": {"login": "ftence"}, "path": "etc/conf.templates/standalone/20-warpscript.conf.template", "diffHunk": "@@ -216,6 +216,21 @@ warpscript.runner.bootstrap.period = 120000\n // List of patterns to include/exclude for hosts, works the same way as webcall.host.patterns. Defaults to the value of webcall.host.patterns.\n #warpscript.urlfetch.host.patterns =\n \n+//\n+// HTTP extension\n+//\n+\n+// If set to true, HTTP requires the stack to be authenticated\n+#warpscript.http.authentication.required =\n+// If set, the capability .cap:<warpscript.http.capability> is inspected to grant access to HTTP function\n+#warpscript.http.capability =\n+// Maximum number of HTTP calls, 1 by default, can be raised with capability .cap:http.requests\n+#warpscript.http.requests =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU2MzI2Nw==", "bodyText": "Can throw NPE because conn.getErrorStream(); can return null.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599563267", "createdAt": "2021-03-23T13:24:25Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3MTA0OQ==", "bodyText": "Already checked by webAccessController.checkURL.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599571049", "createdAt": "2021-03-23T13:33:26Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU5NTgxMA==", "bodyText": "This will leak headers between calls, use null or do not use FormattedWarpScriptFunction.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599595810", "createdAt": "2021-03-23T14:02:09Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTYxMjg5NA==", "bodyText": "I'm not convinced by the usefulness of this.\nFor the simple auth, one can do\n  'headers' {\n    'Authorization' 'Basic ' 'user:password' ->B64 +\n  }\n\nand for the macro case, the macro can directly update the headers.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599612894", "createdAt": "2021-03-23T14:21:04Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTYzOTQwNA==", "bodyText": "Use System.arraycopy(buf, 0, buf2, 0, buf2.length);", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599639404", "createdAt": "2021-03-23T14:47:57Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,430 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.script.formatted.FormattedWarpScriptFunction;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ */\n+public class HTTP extends FormattedWarpScriptFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  private final Arguments args;\n+  protected Arguments getArguments() {\n+    return args;\n+  }\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  private final Arguments output;\n+  protected Arguments getOutput() {\n+    return output;\n+  }\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    getDocstring().append(\"Apply an HTTP method over an url and fetch response.\");\n+\n+    args = new ArgumentsBuilder()\n+      .addArgument(String.class, METHOD, \"The http method.\")\n+      .addArgument(String.class, URL, \"The URL to send the request to. Must begin with http:// or https://.\")\n+      .addOptionalArgument(Map.class, HEADERS, \"An optional header.\", new HashMap<>())\n+      .addOptionalArgument(Object.class, BODY, \"An optional body. STRING or BYTES.\", \"\")\n+      .addOptionalArgument(List.class, AUTH_INFO, \"Authentication arguments. For example for basic authentication, provide [username, password].\", null)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, AUTH_MACRO, \"A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication.\", null)\n+      .addOptionalArgument(Long.class, CHUNK_SIZE, \"Chunk size\", -1L)\n+      .addOptionalArgument(WarpScriptStack.Macro.class, CHUNK_MACRO, \"A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects).\", new WarpScriptStack.Macro())\n+      .build();\n+\n+    output = new ArgumentsBuilder()\n+      .addArgument(Map.class, RESPONSE, \"A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used.\")\n+      .build();\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(Map<String, Object> formattedArgs, WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) formattedArgs.get(METHOD);\n+    Map<Object, Object> headers = (Map) formattedArgs.get(HEADERS);\n+    Object body = formattedArgs.get(BODY);\n+    List authInfo = (List) formattedArgs.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) formattedArgs.get(AUTH_MACRO);\n+    Long chunkSize = (Long) formattedArgs.get(CHUNK_SIZE);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) formattedArgs.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) formattedArgs.get(URL));\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+        Map<String, Object> chunkRes = new HashMap<>(res);\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);\n+          } else {\n+            byte[] buf2 = new byte[len];\n+            for (int i = 0; i < buf2.length; i++) {\n+              buf2[i] = buf[i];\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe84c89749836226e250b13c2ff55a9a83e94ce1"}, "originalPosition": 407}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTY2Nzk2Ng==", "bodyText": "You should always make a copy.\nThis isn't great performance-wise but if someone leave the byte[] on the stack, it will be modified and will confuse the user.\nIt may be OK to reuse the same Map but I think this should be discussed.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599667966", "createdAt": "2021-03-23T15:17:41Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,437 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+        Map<String, Object> chunkRes = new HashMap<>(res);\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff"}, "originalPosition": 407}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTY3MjU5OA==", "bodyText": "If you make the macro optional, the content Map must be a copy, like discussed above.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r599672598", "createdAt": "2021-03-23T15:22:41Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,437 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * .cap:http.requests\n+ * .cap:http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth info\";\n+  public static final String AUTH_MACRO = \"auth macro\";\n+  public static final String CHUNK_SIZE = \"chunk size\";\n+  public static final String CHUNK_MACRO = \"chunk macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status code\";\n+  public static final String STATUS_MESSAGE = \"status message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long base_maxrequests;\n+  private final long base_maxsize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    String capNameSuffix = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+    if (null != capNameSuffix) {\n+      capName = WarpScriptStack.CAPABILITIES_PREFIX + capNameSuffix;\n+    } else {\n+      capName = null;\n+    }\n+\n+    // retrieve limits\n+    Object conf_maxrequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == conf_maxrequests) {\n+      base_maxrequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      base_maxrequests = Long.valueOf((String) conf_maxrequests);\n+    }\n+\n+    Object conf_maxsize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == conf_maxsize) {\n+      base_maxsize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      base_maxsize = Long.valueOf((String) conf_maxsize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = base_maxrequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, WarpScriptStack.CAPABILITIES_PREFIX + HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = base_maxsize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+        byte[] buf = new byte[8192];\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        while (true) {\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.get() + baos.size() + len > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          baos.write(buf, 0, len);\n+        }\n+\n+        downloadSize.addAndGet(baos.size());\n+        res.put(CONTENT, baos.toByteArray());\n+\n+      } else {\n+        byte[] buf = new byte[chunkSize.intValue()];\n+        Map<String, Object> chunkRes = new HashMap<>(res);\n+\n+        int chunkNumber = 0;\n+        while (true) {\n+          chunkNumber++;\n+\n+          int len = in.read(buf);\n+          if (len < 0) {\n+            break;\n+          }\n+\n+          if (downloadSize.addAndGet(len) > maxsize) {\n+            throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+          }\n+\n+          if (len == chunkSize) {\n+            chunkRes.put(CONTENT, buf);\n+          } else {\n+            byte[] buf2 = new byte[len];\n+            for (int i = 0; i < buf2.length; i++) {\n+              buf2[i] = buf[i];\n+            }\n+            chunkRes.put(CONTENT, buf2);\n+          }\n+          chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+          stack.push(chunkRes);\n+          if (null != chunkMacro) {\n+            stack.exec(chunkMacro);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5b43b1d7000032e8dd12fad9c477bbfe63a8ff"}, "originalPosition": 419}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c235401d813184d73fc400c1085988a8b18d508", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/2c235401d813184d73fc400c1085988a8b18d508", "committedDate": "2021-03-23T15:40:29Z", "message": "resolve cap related comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16123a0e979db93d06e632bd81c20876f3583b87", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/16123a0e979db93d06e632bd81c20876f3583b87", "committedDate": "2021-03-23T15:47:21Z", "message": "resolve string names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/36fce61c8a09ce0563a1b43e7cca0e58fab0e0e5", "committedDate": "2021-03-23T16:08:28Z", "message": "resolve some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f1f981474321577d6dcdb451c4b0da4c12e5b8b", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/0f1f981474321577d6dcdb451c4b0da4c12e5b8b", "committedDate": "2021-03-23T17:22:44Z", "message": "dont reuse same buffer between chunks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/8d8ba19cf9b66d06017c236487a5b233b97c6956", "committedDate": "2021-03-23T17:43:35Z", "message": "dont reuse same map between chunk"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE5ODgwOTk2", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-619880996", "createdAt": "2021-03-24T15:34:54Z", "commit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxNTozNDo1NFrOI8xr7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxNjo1Nzo1MFrOI82kFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5OTUzNQ==", "bodyText": "You should return an empty content, like for the non-chunked case, and let the user handle the error. Throwing an exception will make it very difficult to debug why the stream is empty.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600599535", "createdAt": "2021-03-24T15:34:54Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n+\n+            Map<String, Object> chunkRes = new HashMap<>(res);\n+            byte[] buf = new byte[chunkSize.intValue()];\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              chunkRes.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              chunkRes.put(CONTENT, buf2);\n+            }\n+            chunkRes.put(CHUNK_NUMBER, new Long(chunkNumber));\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n+            }\n+          }\n+\n+        } else {\n+          throw new WarpScriptException(getName() + \" expects a stream to be chunked, but input stream is empty.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956"}, "originalPosition": 424}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYxODg3OQ==", "bodyText": "Use a LinkedHashMap instead of HashMap, because that's usually what is on the stack when we put a Map.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600618879", "createdAt": "2021-03-24T15:53:41Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n+\n+            Map<String, Object> chunkRes = new HashMap<>(res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956"}, "originalPosition": 398}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYxOTM1Ng==", "bodyText": "Use LinkedHashMap.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600619356", "createdAt": "2021-03-24T15:54:15Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new HashMap<String, List<String>>(hdrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYzMjIyMw==", "bodyText": "You can simply use get, which will default to null, thus skipping both instanceof conditionals.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600632223", "createdAt": "2021-03-24T16:06:03Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDY3OTQ0NA==", "bodyText": "I think the macro.auth mechanism will not add any value to the HTTP method. For instance, it will not help in generating the digest auth authorization header, especially when doing multiple authenticated requests.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r600679444", "createdAt": "2021-03-24T16:57:50Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,442 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.getOrDefault(BODY,\"\");\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8ba19cf9b66d06017c236487a5b233b97c6956"}, "originalPosition": 266}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbab796621d6951bee7159d9f652238992bb50f3", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/bbab796621d6951bee7159d9f652238992bb50f3", "committedDate": "2021-03-25T16:12:28Z", "message": "resolve some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/29a75c953830c4f95ec65f63afac4e0d0904e179", "committedDate": "2021-03-26T13:58:54Z", "message": "dont throw error if first chunk is empty"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIyNDE1MDEw", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-622415010", "createdAt": "2021-03-26T18:05:42Z", "commit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNlQxODowNTo0MlrOI-laaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNlQxODoyMTo0OFrOI-l-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NTU5NQ==", "bodyText": "to a URL", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602495595", "createdAt": "2021-03-26T18:05:42Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NTg0NQ==", "bodyText": "The param names are in lower case", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602495845", "createdAt": "2021-03-26T18:06:11Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NjAwNg==", "bodyText": "header map", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602496006", "createdAt": "2021-03-26T18:06:28Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NjE3Ng==", "bodyText": "Specify the charset used if the body is a STRING", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602496176", "createdAt": "2021-03-26T18:06:42Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5Njc3MQ==", "bodyText": "Since this ends up being a header, maybe it is better to provide a helper function or macro to pack username and password as a value suitable for a header", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602496771", "createdAt": "2021-03-26T18:07:43Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NzA4OA==", "bodyText": "see above", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602497088", "createdAt": "2021-03-26T18:08:15Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5NzU0NQ==", "bodyText": "The chunk size should have a configurable upper limit to avoid giant allocations", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602497545", "createdAt": "2021-03-26T18:08:58Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5ODgxNQ==", "bodyText": "Parameter extraction should be done in a static way so other instances of HTTP do not repeat it.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602498815", "createdAt": "2021-03-26T18:11:02Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5OTI0Mw==", "bodyText": "missing function name", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602499243", "createdAt": "2021-03-26T18:11:51Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5OTU4OQ==", "bodyText": "could default to GET", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602499589", "createdAt": "2021-03-26T18:12:29Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjQ5OTkxMQ==", "bodyText": "You are not checking if the parameter is a Macro, this will throw an exception if that is not the case", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602499911", "createdAt": "2021-03-26T18:13:07Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMDAxNQ==", "bodyText": "a URL", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602500015", "createdAt": "2021-03-26T18:13:18Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMDUzMw==", "bodyText": "per script execution", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602500533", "createdAt": "2021-03-26T18:14:16Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMTcwMg==", "bodyText": "This will probably produce a weird behavior if method is not POST as setting doOutput to true normally forces the method to be POST", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602501702", "createdAt": "2021-03-26T18:16:16Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMjA3MA==", "bodyText": "ditto, body should be ignored if method is GET or another method which does not allow a body", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602502070", "createdAt": "2021-03-26T18:16:50Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMjk0OQ==", "bodyText": "are the lists inside of the original hdrs map modifiable?", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602502949", "createdAt": "2021-03-26T18:18:18Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMzQ5MQ==", "bodyText": "per script execution", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602503491", "createdAt": "2021-03-26T18:19:16Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwMzczOQ==", "bodyText": "what semantics does a negatice chunkSize have?", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602503739", "createdAt": "2021-03-26T18:19:41Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUwNDgyNQ==", "bodyText": "If EOF is reached while attempting to read buf.length bytes you will exit the loop and miss the last part of the data", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r602504825", "createdAt": "2021-03-26T18:21:48Z", "author": {"login": "hbs"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,449 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to an url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * METHOD The http method\n+ * URL The URL to send the request to. Must begin with http:// or https://\n+ * HEADERS An optional header\n+ * BODY An optional body. STRING or BYTES\n+ * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n+ * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n+ * CHUNK_SIZE Chunk size\n+ * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String AUTH_INFO = \"auth.info\";\n+  public static final String AUTH_MACRO = \"auth.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private final boolean auth;\n+  private final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private final long baseMaxRequests;\n+  private final long baseMaxSize;\n+\n+  public HTTP(String name) {\n+    super(name);\n+\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(\"Capability \" + capName + \" is required by function \" + getName());\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    String method = (String) params.get(METHOD);\n+    if (null == method) {\n+      throw new WarpScriptException(getName() + \" expects an http method.\");\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+    Object body = params.get(BODY);\n+\n+    List authInfo = (List) params.get(AUTH_INFO);\n+    WarpScriptStack.Macro authMacro = (WarpScriptStack.Macro) params.get(AUTH_MACRO);\n+    Long chunkSize = (Long) params.getOrDefault(CHUNK_SIZE, -1L);\n+    WarpScriptStack.Macro chunkMacro = (WarpScriptStack.Macro) params.get(CHUNK_MACRO);\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects an url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls.\");\n+    }\n+\n+    Map<String, Object> res = new HashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Encode userinfo and set headers\n+      //\n+\n+      if (null != authInfo) {\n+\n+        Map additionalHeaders;\n+        if (null != authMacro) {\n+          stack.push(authInfo);\n+          stack.exec(authMacro);\n+          additionalHeaders = (Map) stack.pop();\n+\n+        } else {\n+          // doing basic auth\n+          if (authInfo.size() != 2) {\n+            throw new WarpScriptException(getName() + \" expects a list with two items, username and password, in argument \" + authInfo + \".\");\n+          }\n+\n+          if (!(authInfo.get(0) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when using basic authentication.\");\n+          }\n+\n+          if (!(authInfo.get(1) instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when using basic authentication.\");\n+          }\n+\n+          String userInfo = authInfo.get(0) + \":\" + authInfo.get(1);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          additionalHeaders =  new HashMap<Object, Object>();\n+          additionalHeaders.put(\"Authorization\", basicAuth);\n+        }\n+\n+        headers.putAll(additionalHeaders);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (body instanceof String) {\n+        String bodyS = (String) body;\n+        conn.setDoOutput(bodyS.length() > 0);\n+        if (bodyS.length() > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+          }\n+        }\n+\n+      } else if (body instanceof byte[]) {\n+        byte[] bodyB = (byte[]) body;\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Make the headers map modifiable\n+      //\n+\n+      hdrs = new LinkedHashMap<String, List<String>>(hdrs);\n+      hdrs.remove(null);\n+\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (chunkSize <= 0) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          while (true) {\n+            chunkNumber++;\n+\n+            Map<String, Object> chunkRes = new LinkedHashMap<>(res);\n+            byte[] buf = new byte[chunkSize.intValue()];\n+            int len = in.read(buf);\n+            if (len < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a75c953830c4f95ec65f63afac4e0d0904e179"}, "originalPosition": 402}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a7ea3f2ae976e4cb1db0582f5557b9ef2db77a", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/e4a7ea3f2ae976e4cb1db0582f5557b9ef2db77a", "committedDate": "2021-03-31T16:24:14Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13af41720935ba62647ec38d4a0fdf13d7d50a34", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/13af41720935ba62647ec38d4a0fdf13d7d50a34", "committedDate": "2021-03-31T16:27:54Z", "message": "comment fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6751d06c32bc52be446ef748408004e8654a04", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/5d6751d06c32bc52be446ef748408004e8654a04", "committedDate": "2021-03-31T16:30:20Z", "message": "static web control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d871c514ccbef22f9552b7fc121e064fd6dca4", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/d2d871c514ccbef22f9552b7fc121e064fd6dca4", "committedDate": "2021-03-31T16:32:31Z", "message": "default to get"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdecc3f3e125e34f4d18c77f112229af88dc7521", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/bdecc3f3e125e34f4d18c77f112229af88dc7521", "committedDate": "2021-03-31T16:34:44Z", "message": "fix some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2139d91b7562c514d22825c690f13b4c73530a2", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/a2139d91b7562c514d22825c690f13b4c73530a2", "committedDate": "2021-03-31T17:08:55Z", "message": "headers.macro"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6078808fc5af6567e7d842cedcf38edb38cf8067", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/6078808fc5af6567e7d842cedcf38edb38cf8067", "committedDate": "2021-03-31T17:30:56Z", "message": "dont set body for every methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02fb358d3dde284fae783d1db5b4c3a2b74303bb", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/02fb358d3dde284fae783d1db5b4c3a2b74303bb", "committedDate": "2021-03-31T17:37:51Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/6fdc88ae5e603cccb99cd0ef71f1c3393d93eaca", "committedDate": "2021-04-01T09:22:02Z", "message": "make static parameter extraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fce1b164818478eff47493dddccfb14d4e62a0b", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/8fce1b164818478eff47493dddccfb14d4e62a0b", "committedDate": "2021-04-01T09:36:04Z", "message": "max chunk size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/1025c5ccaa0c282adfc8c6bfe4b19f922a93436c", "committedDate": "2021-04-01T10:07:03Z", "message": "bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99706f330bc85ff7fc92c8203428653e96ce1d11", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/99706f330bc85ff7fc92c8203428653e96ce1d11", "committedDate": "2021-04-01T10:11:36Z", "message": "bugfix handle wrong type argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad711e3b82914cc998872683a0a16ea702455698", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/ad711e3b82914cc998872683a0a16ea702455698", "committedDate": "2021-04-01T10:16:04Z", "message": "bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996d5009eed896ba339fa9739b491c39f864d928", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/996d5009eed896ba339fa9739b491c39f864d928", "committedDate": "2021-04-01T11:10:18Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b045f07639c578549d61a84253c11b0bfa88fb0", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/2b045f07639c578549d61a84253c11b0bfa88fb0", "committedDate": "2021-04-01T11:11:19Z", "message": "fully read chunk size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401b96c0b722523887abb096a0e8f9bc21c23017", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/401b96c0b722523887abb096a0e8f9bc21c23017", "committedDate": "2021-04-01T11:15:04Z", "message": "revert mistakenly added nit change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a02cc10d5a8287cfff52bdbfab5328bd2f7b0d4", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/7a02cc10d5a8287cfff52bdbfab5328bd2f7b0d4", "committedDate": "2021-04-01T11:29:05Z", "message": "simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d53c56d0b43b965421d719ff704d0a27890ee44", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/6d53c56d0b43b965421d719ff704d0a27890ee44", "committedDate": "2021-04-06T14:21:05Z", "message": "negative or nul chunksize throws error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01bef6962b2683769cfaa91149813e42390f5cc", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/f01bef6962b2683769cfaa91149813e42390f5cc", "committedDate": "2021-04-06T14:22:18Z", "message": "getName swap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b16009fa72bf3e056852d6249d372e7523b36421", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/b16009fa72bf3e056852d6249d372e7523b36421", "committedDate": "2021-04-06T15:13:35Z", "message": "chunk macro now receive an unmodifiable view, add final chunk macro execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99770409dad5b8431803c10b4282565232471b6d", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/99770409dad5b8431803c10b4282565232471b6d", "committedDate": "2021-04-06T15:39:43Z", "message": "POST default if non empty body"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff64fe4d38ffc937f5ca8246f149405590a38479", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/ff64fe4d38ffc937f5ca8246f149405590a38479", "committedDate": "2021-04-06T15:42:53Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe", "committedDate": "2021-04-06T15:57:16Z", "message": "fails if body is unused with certain methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNDkyMjc1", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-633492275", "createdAt": "2021-04-12T12:46:04Z", "commit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxMjo0NjowNFrOJHQ2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxMzo0NzowOVrOJHTxhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTU5NTgyMw==", "bodyText": "An optional", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611595823", "createdAt": "2021-04-12T12:46:04Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -35,28 +35,30 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * Send an HTTP request to an url\n+ * Send an HTTP request to a url\n  *\n  * To raise maximum number of calls and download size limit, use these capabilities:\n  * http.requests\n  * http.size\n  *\n  * Params:\n- * METHOD The http method\n- * URL The URL to send the request to. Must begin with http:// or https://\n- * HEADERS An optional header\n- * BODY An optional body. STRING or BYTES\n- * AUTH_INFO Authentication arguments. For example for basic authentication, provide [username, password]\n- * AUTH_MACRO A macro that expects \" + AUTH_INFO + \" on the stack, and returns a map to be appended with the headers. Default to basic authentication\n- * CHUNK_SIZE Chunk size\n- * CHUNK_MACRO A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYwMDYxNA==", "bodyText": "Maybe you could list all the capabilities related to this function?", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611600614", "createdAt": "2021-04-12T12:52:51Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYwMTE3MA==", "bodyText": "chunkSize can be null so it may throw a NPE.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611601170", "createdAt": "2021-04-12T12:53:42Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYxOTExNQ==", "bodyText": "Don't duplicate the code, simply convert the String to byte[], with bodyS.getBytes(StandardCharsets.UTF_8), then do the logic on the body as byte[].", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611619115", "createdAt": "2021-04-12T13:17:09Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n+          }\n+\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYyNzU3Nw==", "bodyText": "In fact, only TRACE cannot have a body, see the source code of HttpURLConnection. So either check for TRACE (using equals, not ==) or handle the IOException it may throw.\nThe method is changed from GET to POST if there is a body by the getOutputStream. My opinion is to let that happen. This is coherent with defaulting to \"POST\" if no method is defined and there is a body.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611627577", "createdAt": "2021-04-12T13:27:36Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYzNDQ4MQ==", "bodyText": "I'm, again, not convinced by the usefulness of this parameter. This does not offer more feature or readability than coding that in WarpScript:\n{\n  /* All your HTTP parameters */\n}\n@your_macro_updating_headers\nHTTP", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611634481", "createdAt": "2021-04-12T13:35:54Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTYzNTkxOA==", "bodyText": "I don't see why basic auth and header modification should be exclusive.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611635918", "createdAt": "2021-04-12T13:37:38Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTY0MjY4NA==", "bodyText": "chunk.number is 1-indexed. I'm wondering if that's coherent with other indexes in WarpScript.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611642684", "createdAt": "2021-04-12T13:45:52Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n+          }\n+\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n+          }\n+\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      // headers map is immutable\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      // also put status_message in a separate field\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (null == chunkSize) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes) per script execution.\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        //\n+        // Chunk processing\n+        //\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 460}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTY0Mzc4Mw==", "bodyText": "You can also remove CONTENT.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r611643783", "createdAt": "2021-04-12T13:47:09Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,533 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * To raise maximum number of calls and download size limit, use these capabilities:\n+ * http.requests\n+ * http.size\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * headers.macro A optional macro that expects this input parameters map on the stack, and push back the headers. Convenient for custom authorization schemes\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ * password Optional field. If both username and password field are present and headers.macro is absent, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String HEADERS_MACRO = \"headers.macro\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    WarpScriptStack.Macro headersMacro = null;\n+    o = params.get(HEADERS_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + HEADERS_MACRO);\n+      }\n+       headersMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+    }\n+\n+    long maxChunkSize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+      maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+    } else {\n+      maxChunkSize = baseMaxChunkSize;\n+    }\n+    if (chunkSize > maxChunkSize) {\n+      throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      if (null == headersMacro) {\n+\n+        Object username = params.get(USERNAME);\n+        Object password = params.get(PASSWORD);\n+\n+        if (null != username && null != password) {\n+\n+          //\n+          // Compute basic auth\n+          //\n+\n+          if (!(username instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+          }\n+\n+          if (!(password instanceof String)) {\n+            throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+          }\n+\n+          String userInfo = ((String) username) + \":\" + ((String) password);\n+          String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+          conn.setRequestProperty(\"Authorization\", basicAuth);\n+        }\n+\n+      } else {\n+\n+        stack.push(params);\n+        stack.exec(headersMacro);\n+        o = stack.pop();\n+\n+        if (!(o instanceof Map)) {\n+          throw new WarpScriptException(getName() + \" expects the \" + HEADERS_MACRO + \" to push a headers map onto the stack.\");\n+        }\n+\n+        headers = (Map) o;\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (\"GET\" != method && \"DELETE\" != method && \"TRACE\" != method && \"OPTIONS\" != method && \"HEAD\" != method) {\n+\n+        if (body instanceof String) {\n+          String bodyS = (String) body;\n+          conn.setDoOutput(bodyS.length() > 0);\n+          if (bodyS.length() > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyS.getBytes(StandardCharsets.UTF_8));\n+            }\n+          }\n+\n+        } else if (body instanceof byte[]) {\n+          byte[] bodyB = (byte[]) body;\n+          conn.setDoOutput(bodyB.length > 0);\n+          if (bodyB.length > 0) {\n+            try (OutputStream os = conn.getOutputStream()) {\n+              os.write(bodyB);\n+            }\n+          }\n+\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n+\n+      } else if (null != body) {\n+        throw new WarpScriptException(getName() + \" \" + method + \" cannot be used with a body.\");\n+      }\n+\n+      //\n+      // Form response\n+      //\n+\n+      res.put(STATUS_CODE, conn.getResponseCode());\n+      Map<String, List<String>> hdrs = conn.getHeaderFields();\n+\n+      // headers map is immutable\n+      res.put(RESPONSE_HEADERS, hdrs);\n+\n+      // also put status_message in a separate field\n+      if (hdrs.containsKey(null)) {\n+        List<String> statusMsg = hdrs.get(null);\n+        if (statusMsg.size() > 0) {\n+          res.put(STATUS_MESSAGE, statusMsg.get(0));\n+        } else {\n+          res.put(STATUS_MESSAGE, \"\");\n+        }\n+      } else {\n+        res.put(STATUS_MESSAGE, \"\");\n+      }\n+\n+      //\n+      // Read response\n+      //\n+\n+      InputStream in = null;\n+\n+      // When there is an error (response code is 404 for instance), body is in the error stream.\n+      try {\n+        in = conn.getInputStream();\n+      } catch (IOException ioe) {\n+        in = conn.getErrorStream();\n+      }\n+\n+      if (null == chunkSize) {\n+\n+        if (null != in) {\n+          byte[] buf = new byte[8192];\n+          ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+          while (true) {\n+            int len = in.read(buf);\n+            if (len < 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.get() + baos.size() + len > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes) per script execution.\");\n+            }\n+\n+            baos.write(buf, 0, len);\n+          }\n+\n+          downloadSize.addAndGet(baos.size());\n+          res.put(CONTENT, baos.toByteArray());\n+\n+        } else {\n+          res.put(CONTENT, new byte[0]);\n+        }\n+\n+      } else {\n+\n+        //\n+        // Chunk processing\n+        //\n+\n+        if (null != in) {\n+\n+          int chunkNumber = 0;\n+          boolean eof = false;\n+\n+          while (!eof) {\n+            chunkNumber++;\n+\n+            byte[] buf = new byte[chunkSize.intValue()];\n+            int len = 0;\n+            while (len < chunkSize.intValue()) {\n+              int read = in.read(buf, len,chunkSize.intValue() - len);\n+              if (read <= 0) {\n+                eof = true;\n+                break;\n+              }\n+              len += read;\n+            }\n+            if (len <= 0) {\n+              break;\n+            }\n+\n+            if (downloadSize.addAndGet(len) > maxsize) {\n+              throw new WarpScriptException(getName() + \" would exceed maximum size of content which can be retrieved via this function (\" + maxsize + \" bytes)\");\n+            }\n+\n+            if (len == chunkSize) {\n+              res.put(CONTENT, buf);\n+            } else {\n+              byte[] buf2 = new byte[len];\n+              System.arraycopy(buf, 0, buf2, 0, buf2.length);\n+              res.put(CONTENT, buf2);\n+            }\n+            res.put(CHUNK_NUMBER, new Long(chunkNumber));\n+\n+            Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+            stack.push(chunkRes);\n+            if (null != chunkMacro) {\n+              stack.exec(chunkMacro);\n+            }\n+          }\n+        }\n+\n+        //\n+        // Finalize chunk processing with a last execution of the chunk.macro\n+        // buffer is empty and chunk.number is set to -1 for this one\n+        //\n+\n+        res.put(CHUNK_NUMBER, -1L);\n+        res.put(CONTENT, new byte[0]);\n+        Map<String, Object> chunkRes = Collections.unmodifiableMap(res);\n+        stack.push(chunkRes);\n+        if (null != chunkMacro) {\n+          stack.exec(chunkMacro);\n+        }\n+\n+        //\n+        // End chunk processing\n+        //\n+\n+        res.remove(CHUNK_NUMBER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b7baad7163cb6011fc3b8a5c3cacfb2894d9fe"}, "originalPosition": 518}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596910daa03caca89530bcfb0597c5f07493db0d", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/596910daa03caca89530bcfb0597c5f07493db0d", "committedDate": "2021-04-27T09:05:22Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/2317e81769c6ac6ac5ef1d0aa901126a7166a4bc", "committedDate": "2021-04-27T14:27:03Z", "message": "resolve some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc506c69ec9e2f617160092cae15145086ffae5", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/2fc506c69ec9e2f617160092cae15145086ffae5", "committedDate": "2021-04-27T14:32:57Z", "message": "remove headers macro"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/75c2974adc8ddc5abfd885e983f3f3d9d981e11a", "committedDate": "2021-04-27T14:39:03Z", "message": "remove content when finalyzing chunk processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bf885fa82d3726a0309c624f6d7d9cc0d09772c", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/8bf885fa82d3726a0309c624f6d7d9cc0d09772c", "committedDate": "2021-04-28T11:53:12Z", "message": "check only GET and TRACE to not set body"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/f2d6d357d866539715bb76e6da8d79d2a4325079", "committedDate": "2021-04-28T11:53:41Z", "message": "Merge branch 'master' of github.com:senx/warp10-platform into HTTP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3MjIyNzY0", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-647222764", "createdAt": "2021-04-28T15:35:06Z", "commit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yOFQxNTozNTowNlrOJRePlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yOFQxNTo1NTowMFrOJRfTcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwMTA3Ng==", "bodyText": "Check for bodyB nullity, else it can throw a NPE.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622301076", "createdAt": "2021-04-28T15:35:06Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();\n+    HttpURLConnection conn = null;\n+\n+    try {\n+      conn = (HttpURLConnection) url.openConnection();\n+\n+      //\n+      // Set headers\n+      //\n+\n+      Object username = params.get(USERNAME);\n+      Object password = params.get(PASSWORD);\n+\n+      if (null != username && null != password) {\n+\n+        //\n+        // Compute basic auth\n+        //\n+\n+        if (!(username instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING username when doing basic authentication.\");\n+        }\n+\n+        if (!(password instanceof String)) {\n+          throw new WarpScriptException(getName() + \" expects a STRING password when doing basic authentication.\");\n+        }\n+\n+        String userInfo = ((String) username) + \":\" + ((String) password);\n+        String basicAuth = \"Basic \" + Base64.encodeBase64String(userInfo.getBytes(StandardCharsets.UTF_8));\n+        conn.setRequestProperty(\"Authorization\", basicAuth);\n+      }\n+\n+      for (Map.Entry<Object, Object> prop: headers.entrySet()) {\n+        conn.setRequestProperty(String.valueOf(prop.getKey()), String.valueOf(prop.getValue()));\n+      }\n+\n+      conn.setDoInput(true);\n+      conn.setRequestMethod(method.toUpperCase());\n+\n+      //\n+      // Set body\n+      //\n+\n+      if (!\"GET\".equals(method) && !\"TRACE\".equals(method)) {\n+\n+        byte[] bodyB = null;\n+        if (body instanceof String) {\n+          bodyB = ((String) body).getBytes(StandardCharsets.UTF_8);\n+\n+        } else if (body instanceof byte[]) {\n+          bodyB = (byte[]) body;\n+\n+        } else if (null != body) {\n+          throw new WarpScriptException(getName() + \" expects the body of the request to be a STRING or BYTES object.\");\n+        }\n+\n+        conn.setDoOutput(bodyB.length > 0);\n+        if (bodyB.length > 0) {\n+          try (OutputStream os = conn.getOutputStream()) {\n+            os.write(bodyB);\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNTUxNw==", "bodyText": "Make confMaxRequests a String and remove the cast.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622305517", "createdAt": "2021-04-28T15:39:59Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNTc1Mw==", "bodyText": "Same with confMaxSize.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622305753", "createdAt": "2021-04-28T15:40:15Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNTkxNQ==", "bodyText": "Same with confMaxChunkSize.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622305915", "createdAt": "2021-04-28T15:40:27Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNzgwMg==", "bodyText": "new HashMap<Object, Object>", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622307802", "createdAt": "2021-04-28T15:42:33Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwODIzOA==", "bodyText": "new LinkedHashMap<String, Object>()", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622308238", "createdAt": "2021-04-28T15:43:02Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);\n+    } catch (MalformedURLException mue) {\n+      throw new WarpScriptException(getName() + \" encountered an invalid URL.\", mue);\n+    }\n+\n+    if (!\"http\".equals(url.getProtocol()) && !\"https\".equals(url.getProtocol())) {\n+      throw new WarpScriptException(getName() + \" only supports http and https protocols.\");\n+    }\n+\n+    if (!webAccessController.checkURL(url)) {\n+      throw new WarpScriptException(getName() + \" invalid host or scheme in URL.\");\n+    }\n+\n+    //\n+    // Check that we do not exceed the limits\n+    //\n+\n+    // Get the current counters in the stack and initialize them if not present.\n+    AtomicLong urlCount;\n+    AtomicLong downloadSize;\n+\n+    Object ufCount = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS);\n+    Object ufSize = stack.getAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE);\n+\n+    if (null == ufCount || null == ufSize) {\n+      urlCount = new AtomicLong();\n+      downloadSize = new AtomicLong();\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS, urlCount);\n+      stack.setAttribute(HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE, downloadSize);\n+    } else {\n+      urlCount = (AtomicLong) ufCount;\n+      downloadSize = (AtomicLong) ufSize;\n+    }\n+\n+    if (urlCount.addAndGet(1) > maxrequests) {\n+      throw new WarpScriptException(getName() + \" is limited to \" + maxrequests + \" calls per script execution.\");\n+    }\n+\n+    Map<String, Object> res = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxNDg1Mg==", "bodyText": "Check type before casting to String.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622314852", "createdAt": "2021-04-28T15:50:42Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxNjk4NQ==", "bodyText": "Also check the type before casting to Map.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622316985", "createdAt": "2021-04-28T15:53:15Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMwNzgwMg=="}, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxNzI2OQ==", "bodyText": "Check type before cast.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622317269", "createdAt": "2021-04-28T15:53:35Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjMxODQ0OA==", "bodyText": "Check type before cast.", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r622318448", "createdAt": "2021-04-28T15:55:00Z", "author": {"login": "ftence"}, "path": "warp10/src/main/java/io/warp10/script/ext/http/HTTP.java", "diffHunk": "@@ -0,0 +1,507 @@\n+//\n+//   Copyright 2021  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.http;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WebAccessController;\n+import io.warp10.standalone.StandaloneWebCallService;\n+import io.warp10.warp.sdk.Capabilities;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Send an HTTP request to a url\n+ *\n+ * Capabilities:\n+ * - http.requests (maximum number of calls)\n+ * - http.size (maximum download size in number of bytes)\n+ * - http.chunksize (maximum chunk size in number of bytes)\n+ * - if the configuration parameter warpscript.http.capability exists,\n+ *   then its value is a capability that is checked to enable usage of this function\n+ *\n+ * Params:\n+ * url The URL to send the request to. Must begin with http:// or https://\n+ * method The optional http method. Default to GET\n+ * headers An optional header map\n+ * body An optional body. UTF-8 STRING or BYTES\n+ * chunk.size Chunk size\n+ * chunk.macro A macro that is executed whenever a chunk has been downloaded. It expects a MAP that contains chunk number (a LONG), status code (a LONG), status message (a STRING), headers (a MAP), and chunk content (a BYTES objects)\n+ * username Optional field. If both username and password field are present, basic authentication will be performed\n+ * password Optional field. If both username and password field are present, basic authentication will be performed\n+ *\n+ * Output:\n+ * RESPONSE A map that contains status code (a LONG), status message (a STRING), headers (a MAP) and full content of the response (a BYTES objects). The content is empty if chunk option is used\n+ *\n+ */\n+public class HTTP extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  //\n+  // Arguments\n+  //\n+\n+  public static final String METHOD = \"method\";\n+  public static final String URL = \"url\";\n+  public static final String HEADERS = \"headers\";\n+  public static final String BODY = \"body\";\n+  public static final String CHUNK_SIZE = \"chunk.size\";\n+  public static final String CHUNK_MACRO = \"chunk.macro\";\n+  public static final String USERNAME = \"username\";\n+  public static final String PASSWORD = \"password\";\n+\n+  //\n+  // Output\n+  //\n+\n+  public static final String RESPONSE = \"response\";\n+  public static final String STATUS_CODE = \"status.code\";\n+  public static final String STATUS_MESSAGE = \"status.message\";\n+  public static final String RESPONSE_HEADERS = \"headers\";\n+  public static final String CONTENT = \"content\";\n+  public static final String CHUNK_NUMBER = \"chunk.number\";\n+\n+  //\n+  // Control\n+  //\n+\n+  private static final WebAccessController webAccessController;\n+\n+  //\n+  // Authorization\n+  //\n+\n+  private static final boolean auth;\n+  private static final String capName;\n+\n+  //\n+  // Limits\n+  //\n+\n+  private static final long baseMaxRequests;\n+  private static final long baseMaxSize;\n+  private static final long baseMaxChunkSize;\n+\n+  //\n+  // Parameter extraction\n+  //\n+\n+  static {\n+    String patternConf = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_HOST_PATTERNS);\n+\n+    // If not defined, use already existing StandaloneWebCallService webAccessController which uses Configuration.WEBCALL_HOST_PATTERNS\n+    if (null == patternConf) {\n+      webAccessController = StandaloneWebCallService.getWebAccessController();\n+    } else {\n+      webAccessController = new WebAccessController(patternConf);\n+    }\n+\n+    // retrieve authentication required\n+    auth = \"true\".equals(WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_AUTHENTICATION_REQUIRED));\n+\n+    // retrieve capName\n+    capName = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_CAPABILITY);\n+\n+    // retrieve limits\n+    Object confMaxRequests = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_REQUESTS);\n+    if (null == confMaxRequests) {\n+      baseMaxRequests = HttpWarpScriptExtension.DEFAULT_HTTP_REQUESTS;\n+    } else {\n+      baseMaxRequests = Long.parseLong((String) confMaxRequests);\n+    }\n+\n+    Object confMaxSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_HTTP_SIZE);\n+    if (null == confMaxSize) {\n+      baseMaxSize = HttpWarpScriptExtension.DEFAULT_HTTP_MAXSIZE;\n+    } else {\n+      baseMaxSize = Long.parseLong((String) confMaxSize);\n+    }\n+\n+    Object confMaxChunkSize = WarpConfig.getProperty(HttpWarpScriptExtension.WARPSCRIPT_CHUNK_SIZE);\n+    if (null == confMaxChunkSize) {\n+      baseMaxChunkSize = HttpWarpScriptExtension.DEFAULT_HTTP_CHUNK_SIZE;\n+    } else {\n+      baseMaxChunkSize = Long.parseLong((String) confMaxChunkSize);\n+    }\n+  }\n+\n+  public HTTP(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    Object o = stack.pop();\n+    if (!(o instanceof Map)) {\n+      throw new WarpScriptException(getName() + \" expects a MAP as input.\");\n+    }\n+\n+    Map params = (Map) o;\n+\n+    //\n+    // Check authorization\n+    //\n+\n+    if (auth && !stack.isAuthenticated()) {\n+      throw new WarpScriptException(getName() + \" requires the stack to be authenticated.\");\n+    }\n+\n+    if (null != capName && null == Capabilities.get(stack, capName)) {\n+      throw new WarpScriptException(getName() + \" requires capability \" + capName + \".\");\n+    }\n+\n+    //\n+    // Retrieve call number limit and download size limit\n+    //\n+\n+    long maxrequests;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS)) {\n+      maxrequests = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_REQUESTS));\n+    } else {\n+      maxrequests = baseMaxRequests;\n+    }\n+\n+    long maxsize;\n+    if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE)) {\n+      maxsize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_HTTP_SIZE));\n+    } else {\n+      maxsize = baseMaxSize;\n+    }\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object body = params.get(BODY);\n+    String method = (String) params.get(METHOD);\n+\n+    if (null == method) {\n+\n+      if (null == body) {\n+        method = \"GET\";\n+\n+      } else {\n+        method = \"POST\";\n+      }\n+    }\n+\n+    Map<Object, Object> headers = (Map) params.getOrDefault(HEADERS, new HashMap<>());\n+\n+    Long chunkSize = (Long) params.get(CHUNK_SIZE);\n+    if (null != chunkSize) {\n+      if (0 >= chunkSize) {\n+        throw new WarpScriptException(getName() + \" expects \" + CHUNK_SIZE + \" value to be greater than 0.\");\n+      }\n+\n+      long maxChunkSize;\n+      if (null != Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE)) {\n+        maxChunkSize = Long.valueOf(Capabilities.get(stack, HttpWarpScriptExtension.ATTRIBUTE_CHUNK_SIZE));\n+      } else {\n+        maxChunkSize = baseMaxChunkSize;\n+      }\n+      if (chunkSize > maxChunkSize) {\n+        throw new WarpScriptException(getName() + \" expects a chunk size in number of bytes that do not exceed \" + maxChunkSize + \".\");\n+      }\n+    }\n+\n+    WarpScriptStack.Macro chunkMacro = null;\n+    o = params.get(CHUNK_MACRO);\n+    if (null != o) {\n+      if (!(o instanceof WarpScriptStack.Macro)) {\n+        throw new WarpScriptException(getName() + \" expects a macro in the input parameters map as value of \" + CHUNK_MACRO);\n+      }\n+      chunkMacro = (WarpScriptStack.Macro) o;\n+    }\n+\n+    //\n+    // Check URL\n+    //\n+\n+    Object urlParam = params.get(URL);\n+    if (null == urlParam) {\n+      throw new WarpScriptException(getName() + \" expects a url.\");\n+    }\n+\n+    URL url = null;\n+    try {\n+      url = new URL((String) urlParam);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d6d357d866539715bb76e6da8d79d2a4325079"}, "originalPosition": 259}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "author": {"user": {"login": "randomboolean", "name": "Jean-Charles"}}, "url": "https://github.com/senx/warp10-platform/commit/d9c2ae3dd68d437ae301cdfb5e8045189d515cdf", "committedDate": "2021-04-28T16:48:25Z", "message": "type checking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUwMjEwMzk0", "url": "https://github.com/senx/warp10-platform/pull/891#pullrequestreview-650210394", "createdAt": "2021-05-03T09:35:26Z", "commit": {"oid": "d9c2ae3dd68d437ae301cdfb5e8045189d515cdf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3279, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}