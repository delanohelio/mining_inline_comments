{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTcxMDc3", "number": 2439, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMjoxNToxNFrOE72gVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMjoxNToxOVrOE72gZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTk0NDU0OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/modeling-assessment-dashboard/modeling-assessment-dashboard.component.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMjoxNToxNFrOH3uItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMjoxNToxNFrOH3uItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4OTYyMQ==", "bodyText": "I suppose dead code should be removed?", "url": "https://github.com/ls1intum/Artemis/pull/2439#discussion_r528189621", "createdAt": "2020-11-21T12:15:14Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/modeling-assessment-dashboard/modeling-assessment-dashboard.component.spec.ts", "diffHunk": "@@ -0,0 +1,328 @@\n+import { async, ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TranslateModule, TranslateService } from '@ngx-translate/core';\n+import { ArtemisTestModule } from '../../test.module';\n+import { Router } from '@angular/router';\n+import { of, Subscription } from 'rxjs';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { MockAccountService } from '../../helpers/mocks/service/mock-account.service';\n+import { ModelingAssessmentDashboardComponent } from 'app/exercises/modeling/assess/modeling-assessment-editor/modeling-assessment-dashboard.component';\n+import { MockRouter } from '../../helpers/mocks/mock-router';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ExerciseType } from 'app/entities/exercise.model';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import { CourseManagementService } from 'app/course/manage/course-management.service';\n+import { HttpResponse } from '@angular/common/http';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ModelingExercise } from 'app/entities/modeling-exercise.model';\n+import { AssessmentType } from 'app/entities/assessment-type.model';\n+import { ModelingAssessmentService } from 'app/exercises/modeling/assess/modeling-assessment.service';\n+import { SortService } from 'app/shared/service/sort.service';\n+\n+const route = { params: of({ courseId: 3, exerciseId: 22 }) };\n+const course = { id: 1 };\n+const modelingExercise = { id: 22, course_id: course.id, type: ExerciseType.MODELING, studentAssignedTeamIdComputed: true, assessmentType: AssessmentType.SEMI_AUTOMATIC };\n+const modelingSubmission = { id: 1, submitted: true, result: { id: 10, assessor: { id: 20, guidedTourSettings: [] } } };\n+const modelingSubmission2 = { id: 2, submitted: true, result: { id: 20, assessor: { id: 30, guidedTourSettings: [] } } };\n+const userId = 30;\n+\n+describe('ModelingAssessmentDashboardComponent', () => {\n+    let component: ModelingAssessmentDashboardComponent;\n+    let fixture: ComponentFixture<ModelingAssessmentDashboardComponent>;\n+    let exerciseService: ExerciseService;\n+    let courseService: CourseManagementService;\n+    let modelingSubmissionService: ModelingSubmissionService;\n+    let modelingAssessmentService: ModelingAssessmentService;\n+    let sortService: SortService;\n+    let router: Router;\n+    let exerciseFindSpy: jasmine.Spy;\n+    let courseFindSpy: jasmine.Spy;\n+\n+    beforeEach(async(() => {\n+        TestBed.configureTestingModule({\n+            imports: [RouterTestingModule, TranslateModule.forRoot(), ArtemisTestModule],\n+            declarations: [ModelingAssessmentDashboardComponent],\n+            providers: [\n+                JhiLanguageHelper,\n+                { provide: Router, useClass: route },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: Router, useClass: MockRouter },\n+                { provide: AccountService, useClass: MockAccountService },\n+            ],\n+        })\n+            .overrideTemplate(ModelingAssessmentDashboardComponent, '')\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingAssessmentDashboardComponent);\n+                component = fixture.componentInstance;\n+                router = fixture.debugElement.injector.get(Router);\n+                exerciseService = fixture.debugElement.injector.get(ExerciseService);\n+                courseService = fixture.debugElement.injector.get(CourseManagementService);\n+                modelingSubmissionService = fixture.debugElement.injector.get(ModelingSubmissionService);\n+                modelingAssessmentService = fixture.debugElement.injector.get(ModelingAssessmentService);\n+                sortService = fixture.debugElement.injector.get(SortService);\n+                exerciseFindSpy = spyOn(exerciseService, 'find').and.returnValue(of(new HttpResponse({ body: modelingExercise })));\n+                courseFindSpy = spyOn(courseService, 'find').and.returnValue(of(new HttpResponse({ body: course })));\n+                fixture.detectChanges();\n+            });\n+    }));\n+\n+    afterEach(() => {\n+        component.ngOnDestroy();\n+    });\n+\n+    it('should set parameters and call functions on init', fakeAsync(() => {\n+        // setup\n+        const getSubmissionsSpy = spyOn(component, 'getSubmissions');\n+        const registerChangeInResultsSpy = spyOn(component, 'registerChangeInResults');\n+\n+        // test for init values\n+        expect(component).toBeTruthy();\n+        expect(component.submissions).toEqual([]);\n+        expect(component.reverse).toEqual(false);\n+        expect(component.predicate).toEqual('id');\n+        expect(component.filteredSubmissions).toEqual([]);\n+        expect(component.optimalSubmissions).toEqual([]);\n+        expect(component.otherSubmissions).toEqual([]);\n+\n+        // call\n+        component.ngOnInit();\n+        tick();\n+\n+        // check\n+        expect(getSubmissionsSpy).toHaveBeenCalledWith(true);\n+        expect(registerChangeInResultsSpy).toHaveBeenCalled();\n+        expect(courseFindSpy).toHaveBeenCalled();\n+        expect(exerciseFindSpy).toHaveBeenCalled();\n+        expect(component.course).toEqual(course);\n+        expect(component.modelingExercise).toEqual(modelingExercise as ModelingExercise);\n+    }));\n+\n+    it('should get Submissions', () => {\n+        // test getSubmissions\n+        const filterSubmissionsSpy = spyOn(component, 'filterSubmissions');\n+        const modelingSubmissionServiceSpy = spyOn(modelingSubmissionService, 'getModelingSubmissionsForExercise').and.returnValue(\n+            of(new HttpResponse({ body: [modelingSubmission] })),\n+        );\n+\n+        // call\n+        component.ngOnInit();\n+\n+        // check\n+        expect(modelingSubmissionServiceSpy).toHaveBeenCalledWith(modelingExercise.id, { submittedOnly: true });\n+        expect(component.submissions).toEqual([modelingSubmission]);\n+        expect(component.filteredSubmissions).toEqual([modelingSubmission]);\n+        expect(filterSubmissionsSpy).toHaveBeenCalled();\n+    });\n+\n+    it('should update filtered submissions', () => {\n+        // test updateFilteredSubmissions\n+        const applyFilter = spyOn(component, 'applyFilter');\n+\n+        // setup\n+        component.ngOnInit();\n+        component.updateFilteredSubmissions([modelingSubmission]);\n+\n+        // check\n+        expect(component.filteredSubmissions).toEqual([modelingSubmission]);\n+        expect(applyFilter).toHaveBeenCalled();\n+    });\n+\n+    it('should refresh', () => {\n+        // test refresh\n+        const getSubmissionsSpy = spyOn(component, 'getSubmissions');\n+\n+        component.refresh();\n+\n+        expect(getSubmissionsSpy).toHaveBeenCalledWith(true);\n+    });\n+\n+    describe('filter Submissions', () => {\n+        it('should filter Submissions', () => {\n+            // test filterSubmissions\n+            // setup\n+            const applyFilter = spyOn(component, 'applyFilter');\n+            const getOptimalSubmissionsSpy = spyOn(modelingAssessmentService, 'getOptimalSubmissions').and.returnValue(of([1]));\n+            // component.ngOnInit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf020c69920c5c530b16a71b84b4befadb8a8ca5"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTk0NDcwOnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/modeling-assessment-dashboard/modeling-assessment-dashboard.component.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMjoxNToxOVrOH3uIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMjoxNToxOVrOH3uIxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4OTYzNw==", "bodyText": "Same here.", "url": "https://github.com/ls1intum/Artemis/pull/2439#discussion_r528189637", "createdAt": "2020-11-21T12:15:19Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/modeling-assessment-dashboard/modeling-assessment-dashboard.component.spec.ts", "diffHunk": "@@ -0,0 +1,328 @@\n+import { async, ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TranslateModule, TranslateService } from '@ngx-translate/core';\n+import { ArtemisTestModule } from '../../test.module';\n+import { Router } from '@angular/router';\n+import { of, Subscription } from 'rxjs';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { MockAccountService } from '../../helpers/mocks/service/mock-account.service';\n+import { ModelingAssessmentDashboardComponent } from 'app/exercises/modeling/assess/modeling-assessment-editor/modeling-assessment-dashboard.component';\n+import { MockRouter } from '../../helpers/mocks/mock-router';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ExerciseType } from 'app/entities/exercise.model';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import { CourseManagementService } from 'app/course/manage/course-management.service';\n+import { HttpResponse } from '@angular/common/http';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ModelingExercise } from 'app/entities/modeling-exercise.model';\n+import { AssessmentType } from 'app/entities/assessment-type.model';\n+import { ModelingAssessmentService } from 'app/exercises/modeling/assess/modeling-assessment.service';\n+import { SortService } from 'app/shared/service/sort.service';\n+\n+const route = { params: of({ courseId: 3, exerciseId: 22 }) };\n+const course = { id: 1 };\n+const modelingExercise = { id: 22, course_id: course.id, type: ExerciseType.MODELING, studentAssignedTeamIdComputed: true, assessmentType: AssessmentType.SEMI_AUTOMATIC };\n+const modelingSubmission = { id: 1, submitted: true, result: { id: 10, assessor: { id: 20, guidedTourSettings: [] } } };\n+const modelingSubmission2 = { id: 2, submitted: true, result: { id: 20, assessor: { id: 30, guidedTourSettings: [] } } };\n+const userId = 30;\n+\n+describe('ModelingAssessmentDashboardComponent', () => {\n+    let component: ModelingAssessmentDashboardComponent;\n+    let fixture: ComponentFixture<ModelingAssessmentDashboardComponent>;\n+    let exerciseService: ExerciseService;\n+    let courseService: CourseManagementService;\n+    let modelingSubmissionService: ModelingSubmissionService;\n+    let modelingAssessmentService: ModelingAssessmentService;\n+    let sortService: SortService;\n+    let router: Router;\n+    let exerciseFindSpy: jasmine.Spy;\n+    let courseFindSpy: jasmine.Spy;\n+\n+    beforeEach(async(() => {\n+        TestBed.configureTestingModule({\n+            imports: [RouterTestingModule, TranslateModule.forRoot(), ArtemisTestModule],\n+            declarations: [ModelingAssessmentDashboardComponent],\n+            providers: [\n+                JhiLanguageHelper,\n+                { provide: Router, useClass: route },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: Router, useClass: MockRouter },\n+                { provide: AccountService, useClass: MockAccountService },\n+            ],\n+        })\n+            .overrideTemplate(ModelingAssessmentDashboardComponent, '')\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingAssessmentDashboardComponent);\n+                component = fixture.componentInstance;\n+                router = fixture.debugElement.injector.get(Router);\n+                exerciseService = fixture.debugElement.injector.get(ExerciseService);\n+                courseService = fixture.debugElement.injector.get(CourseManagementService);\n+                modelingSubmissionService = fixture.debugElement.injector.get(ModelingSubmissionService);\n+                modelingAssessmentService = fixture.debugElement.injector.get(ModelingAssessmentService);\n+                sortService = fixture.debugElement.injector.get(SortService);\n+                exerciseFindSpy = spyOn(exerciseService, 'find').and.returnValue(of(new HttpResponse({ body: modelingExercise })));\n+                courseFindSpy = spyOn(courseService, 'find').and.returnValue(of(new HttpResponse({ body: course })));\n+                fixture.detectChanges();\n+            });\n+    }));\n+\n+    afterEach(() => {\n+        component.ngOnDestroy();\n+    });\n+\n+    it('should set parameters and call functions on init', fakeAsync(() => {\n+        // setup\n+        const getSubmissionsSpy = spyOn(component, 'getSubmissions');\n+        const registerChangeInResultsSpy = spyOn(component, 'registerChangeInResults');\n+\n+        // test for init values\n+        expect(component).toBeTruthy();\n+        expect(component.submissions).toEqual([]);\n+        expect(component.reverse).toEqual(false);\n+        expect(component.predicate).toEqual('id');\n+        expect(component.filteredSubmissions).toEqual([]);\n+        expect(component.optimalSubmissions).toEqual([]);\n+        expect(component.otherSubmissions).toEqual([]);\n+\n+        // call\n+        component.ngOnInit();\n+        tick();\n+\n+        // check\n+        expect(getSubmissionsSpy).toHaveBeenCalledWith(true);\n+        expect(registerChangeInResultsSpy).toHaveBeenCalled();\n+        expect(courseFindSpy).toHaveBeenCalled();\n+        expect(exerciseFindSpy).toHaveBeenCalled();\n+        expect(component.course).toEqual(course);\n+        expect(component.modelingExercise).toEqual(modelingExercise as ModelingExercise);\n+    }));\n+\n+    it('should get Submissions', () => {\n+        // test getSubmissions\n+        const filterSubmissionsSpy = spyOn(component, 'filterSubmissions');\n+        const modelingSubmissionServiceSpy = spyOn(modelingSubmissionService, 'getModelingSubmissionsForExercise').and.returnValue(\n+            of(new HttpResponse({ body: [modelingSubmission] })),\n+        );\n+\n+        // call\n+        component.ngOnInit();\n+\n+        // check\n+        expect(modelingSubmissionServiceSpy).toHaveBeenCalledWith(modelingExercise.id, { submittedOnly: true });\n+        expect(component.submissions).toEqual([modelingSubmission]);\n+        expect(component.filteredSubmissions).toEqual([modelingSubmission]);\n+        expect(filterSubmissionsSpy).toHaveBeenCalled();\n+    });\n+\n+    it('should update filtered submissions', () => {\n+        // test updateFilteredSubmissions\n+        const applyFilter = spyOn(component, 'applyFilter');\n+\n+        // setup\n+        component.ngOnInit();\n+        component.updateFilteredSubmissions([modelingSubmission]);\n+\n+        // check\n+        expect(component.filteredSubmissions).toEqual([modelingSubmission]);\n+        expect(applyFilter).toHaveBeenCalled();\n+    });\n+\n+    it('should refresh', () => {\n+        // test refresh\n+        const getSubmissionsSpy = spyOn(component, 'getSubmissions');\n+\n+        component.refresh();\n+\n+        expect(getSubmissionsSpy).toHaveBeenCalledWith(true);\n+    });\n+\n+    describe('filter Submissions', () => {\n+        it('should filter Submissions', () => {\n+            // test filterSubmissions\n+            // setup\n+            const applyFilter = spyOn(component, 'applyFilter');\n+            const getOptimalSubmissionsSpy = spyOn(modelingAssessmentService, 'getOptimalSubmissions').and.returnValue(of([1]));\n+            // component.ngOnInit();\n+            component.modelingExercise = modelingExercise;\n+            component.nextOptimalSubmissionIds = [];\n+\n+            // call\n+            component.filterSubmissions(true);\n+\n+            // check\n+            expect(getOptimalSubmissionsSpy).toHaveBeenCalled();\n+            expect(component.nextOptimalSubmissionIds).toEqual([1]);\n+            expect(applyFilter).toHaveBeenCalled();\n+        });\n+        it('should not filter Submissions', () => {\n+            // test filterSubmissions\n+            // setup\n+            const applyFilter = spyOn(component, 'applyFilter');\n+            const getOptimalSubmissionsSpy = spyOn(modelingAssessmentService, 'getOptimalSubmissions').and.returnValue(of([1]));\n+            // component.ngOnInit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf020c69920c5c530b16a71b84b4befadb8a8ca5"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4477, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}