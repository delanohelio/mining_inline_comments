{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0ODEyOTM0", "number": 2438, "title": "Remove duplicated code in assessment service", "bodyText": "There was quite a lot of duplicated code. This PR tries to unify it and to remove unnecessary @Transactional annotations.\nChecklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I followed the coding and design guidelines.\n\nDescription\nIn this PR we tried to reduce duplicated code and unify some steps of the exercise assessments. There should be no functional changes in this PR.\nSteps for Testing\nSome of these steps are more easily tested in a group (multiple submissions).\nText Exercise:\n\nCreate text exercise with assessment suggestions.\nCreate multiple submissions (at least 5).\nAssess the submissions (save, submit, override).\nVerify that the automatic assessment suggestions are working.\nComplain about the assessment.\nRespond to the assessment.\n\nProgramming Exercise:\n\nCreate programming exercise.\nAdd submission.\nAssess submission (save, submit, override).\nComplain about those assessments.\nRespond to the complaints.\n\nModeling Exercise:\n\nCreate modeling exercise with assessment suggestions.\nCreate multiple submissions (at least 5).\nAssess the submissions (save, submit, override).\nVerify that the automatic assessment suggestions are working.\nComplain about the assessment.\nRespond to the assessment.\n\nTest Coverage\nProgrammingAssessmentResource 87%\nTextAssessmentResource 92%\nModelingAssessmentResource 96%\nModelingSubmissionResource 97%\nFileUploadAssessmentResource 98%\nFileUploadSubmissionResource 91%\nAssessmentResource 93%\nSubmissionResource 90%\nAssessmentService 87%\nProgrammingAssessmentService 91%\nTextAssessmentService 93%\nComplaintService 87%\nFileUploadSubmissionService 82%\nTextSubmissionService 80%\nModelingSubmissionService 80%\nParticipationService 78%", "createdAt": "2020-11-20T16:25:47Z", "url": "https://github.com/ls1intum/Artemis/pull/2438", "merged": true, "mergeCommit": {"oid": "c16e2403a488eb21abdbc1f9c695d84fa133fafd"}, "closed": true, "closedAt": "2020-11-24T14:57:43Z", "author": {"login": "krusche"}, "timelineItems": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddyU4ZAH2gAyNTI0ODEyOTM0OjQ5NmQ1ZTliNDZiNzNiMTQ1ODZlODViMDdhNTJmZDZiZWRlMzY0MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfq7tRgFqTUzNzU0NTc2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "496d5e9b46b73b14586e85b07a52fd6bede36400", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/496d5e9b46b73b14586e85b07a52fd6bede36400", "committedDate": "2020-11-18T18:19:06Z", "message": "remove duplicated code and transactional in assessment service(s)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9aa29a59f247ac9e301ea72e382fb3fb1bcea9d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a9aa29a59f247ac9e301ea72e382fb3fb1bcea9d", "committedDate": "2020-11-18T22:19:42Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/AssessmentService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0c00203f85f34d82a21940a361abda7d4bd70d2", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e0c00203f85f34d82a21940a361abda7d4bd70d2", "committedDate": "2020-11-18T22:40:31Z", "message": "fix after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d62df6b21d2f36f3584bf6083449d3c9de9affbe", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d62df6b21d2f36f3584bf6083449d3c9de9affbe", "committedDate": "2020-11-19T08:01:22Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeffbfe7d93e7291b1b9b87b66ee7d13d9dd6829", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/aeffbfe7d93e7291b1b9b87b66ee7d13d9dd6829", "committedDate": "2020-11-20T16:22:20Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77924579b253a60a25e5a5e921b4d9839e5c9df7", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/77924579b253a60a25e5a5e921b4d9839e5c9df7", "committedDate": "2020-11-20T20:04:06Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c36ede4db48c2a4d9c40fc6cab2ec2267d715c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/60c36ede4db48c2a4d9c40fc6cab2ec2267d715c", "committedDate": "2020-11-20T20:54:23Z", "message": "remove unused code, remove duplicated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb81064e16f666e89e8efd03fb15ae18e58e40d4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/bb81064e16f666e89e8efd03fb15ae18e58e40d4", "committedDate": "2020-11-21T07:15:59Z", "message": "remove more @Transactional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b0ae9d0616e8f2f6df792e0e6e6b8e72ff7415e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0b0ae9d0616e8f2f6df792e0e6e6b8e72ff7415e", "committedDate": "2020-11-21T08:38:16Z", "message": "fix file upload tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9b3311c09775c181a6e700dafc745a9ebc0e119", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e9b3311c09775c181a6e700dafc745a9ebc0e119", "committedDate": "2020-11-21T08:40:16Z", "message": "fix modeling test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12f36b4d7cef91995c411f35651d0d11db96f4d6", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/12f36b4d7cef91995c411f35651d0d11db96f4d6", "committedDate": "2020-11-21T09:07:13Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb68d73a229b390c94100b010314d7fa8555dfb4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/fb68d73a229b390c94100b010314d7fa8555dfb4", "committedDate": "2020-11-21T09:50:37Z", "message": "refactor saveAssessment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bccf9241ec11a06573235ca56364fe3db4567a64", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/bccf9241ec11a06573235ca56364fe3db4567a64", "committedDate": "2020-11-21T09:56:06Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d23172889059ef804c5b49658502023dfe0fb2ad", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d23172889059ef804c5b49658502023dfe0fb2ad", "committedDate": "2020-11-21T10:07:52Z", "message": "fix documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4e78ffc633c2b4008ed4dfd285513ad92175cd5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a4e78ffc633c2b4008ed4dfd285513ad92175cd5", "committedDate": "2020-11-21T10:08:21Z", "message": "Merge branch 'chore/remove-duplicated-assessment-service' of github.com:ls1intum/Artemis into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6238d759b11108a7a1ecbf85237c4e97c4491584", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6238d759b11108a7a1ecbf85237c4e97c4491584", "committedDate": "2020-11-21T10:12:20Z", "message": "fix documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f80f19f9eba29862175a26457e18468463f1a7", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/77f80f19f9eba29862175a26457e18468463f1a7", "committedDate": "2020-11-21T10:38:53Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cefc1e42a973f8fe6ed4b5a8f5eb1982ada2973", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4cefc1e42a973f8fe6ed4b5a8f5eb1982ada2973", "committedDate": "2020-11-21T11:06:02Z", "message": "fix relevant codacy issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTg3MTU3", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-535987157", "createdAt": "2020-11-21T18:40:09Z", "commit": {"oid": "4cefc1e42a973f8fe6ed4b5a8f5eb1982ada2973"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e84b6b1172e416f615234ba102a098ec88b25e3", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7e84b6b1172e416f615234ba102a098ec88b25e3", "committedDate": "2020-11-22T00:07:52Z", "message": "fix issue when saving text and modeling assessment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDE4Njk1", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536018695", "createdAt": "2020-11-22T00:14:12Z", "commit": {"oid": "4cefc1e42a973f8fe6ed4b5a8f5eb1982ada2973"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "791216c1382893f6bd6136bdafceddfab589eacf", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/791216c1382893f6bd6136bdafceddfab589eacf", "committedDate": "2020-11-22T00:47:26Z", "message": "fix issue with participationId in url of undefined when trying to evaluate a complaint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07b6def1735f61057385916c59b23cb9adc2c6eb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/07b6def1735f61057385916c59b23cb9adc2c6eb", "committedDate": "2020-11-22T07:15:52Z", "message": "fix that participationId is undefined when routing for programming exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644841d0c424f4ee7f42de2fff2c207c187fa5ae", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/644841d0c424f4ee7f42de2fff2c207c187fa5ae", "committedDate": "2020-11-22T07:23:11Z", "message": "Merge branch 'bugfix/programming-assessment/routing-complaints' of https://github.com/ls1intum/Artemis into chore/remove-duplicated-assessment-service\n\n# Conflicts:\n#\tsrc/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e60a4e3e33c7ca9e3d0c896b2891cd1d607007", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/17e60a4e3e33c7ca9e3d0c896b2891cd1d607007", "committedDate": "2020-11-22T09:31:16Z", "message": "increase submissionresource test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93cac35d8fbdabc31e85ef47b212698df807cca5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/93cac35d8fbdabc31e85ef47b212698df807cca5", "committedDate": "2020-11-22T09:32:18Z", "message": "Merge branch 'chore/remove-duplicated-assessment-service' of github.com:ls1intum/Artemis into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5397b53203a59e5b36b4e7473a553782f0c6117c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5397b53203a59e5b36b4e7473a553782f0c6117c", "committedDate": "2020-11-22T09:47:23Z", "message": "increase submissionResource test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed0fa0a184ca77827cfd0cc1a3587d9e416d765", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/9ed0fa0a184ca77827cfd0cc1a3587d9e416d765", "committedDate": "2020-11-22T09:58:26Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9d31d49b5f761b2e1b54b7294b40095747c5fc", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ca9d31d49b5f761b2e1b54b7294b40095747c5fc", "committedDate": "2020-11-22T10:24:47Z", "message": "increase FileUploadSubmission service test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe46a46c600a806d61b88e5b423f85e2e87aa243", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/fe46a46c600a806d61b88e5b423f85e2e87aa243", "committedDate": "2020-11-22T10:25:11Z", "message": "Merge branch 'chore/remove-duplicated-assessment-service' of github.com:ls1intum/Artemis into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "552d922739a6bbc9be4be279459fc14f47acfa52", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/552d922739a6bbc9be4be279459fc14f47acfa52", "committedDate": "2020-11-22T10:44:15Z", "message": "increase ParticipationService coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3756425f689dd24023339587c984beba5a441f07", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/3756425f689dd24023339587c984beba5a441f07", "committedDate": "2020-11-22T11:52:25Z", "message": "remove unreachable code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c944e27ee0b6b013ef906b465caab3be4c9202", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/a1c944e27ee0b6b013ef906b465caab3be4c9202", "committedDate": "2020-11-22T12:08:01Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df5f48935baf1459aecc93f7991e951a2d0ac80", "author": {"user": {"login": "fde312", "name": "Francisco De las Casas Young"}}, "url": "https://github.com/ls1intum/Artemis/commit/7df5f48935baf1459aecc93f7991e951a2d0ac80", "committedDate": "2020-11-23T10:40:40Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca7804eea76223ee13e41dbbc0c26b3529e74016", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ca7804eea76223ee13e41dbbc0c26b3529e74016", "committedDate": "2020-11-23T10:51:00Z", "message": "rename method to avoid confusion with differentiation of referenced and unreferend feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09a6290172acec93113b5415a79e4284a9907ae7", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/09a6290172acec93113b5415a79e4284a9907ae7", "committedDate": "2020-11-23T11:04:53Z", "message": "add docu that assessmentService methods are not used for programming and we use different approach there"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/461f9b6a6cd7c90ced428a7b768cf6e8925c324c", "committedDate": "2020-11-23T12:31:57Z", "message": "Merge branch 'chore/remove-duplicated-assessment-service' of https://github.com/ls1intum/Artemis into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Nzk2NTYx", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536796561", "createdAt": "2020-11-23T19:51:25Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo1MToyNVrOH4c_0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo1MToyNVrOH4c_0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NzM5Mg==", "bodyText": "shouldn't we use text blocks for new queries from now on?", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r528957392", "createdAt": "2020-11-23T19:51:25Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "diffHunk": "@@ -56,6 +56,9 @@\n     @Query(\"select r from Result r left join fetch r.feedbacks where r.id = :resultId\")\n     Optional<Result> findByIdWithEagerFeedbacks(@Param(\"resultId\") Long id);\n \n+    @Query(\"select r from Result r left join fetch r.submission left join fetch r.feedbacks where r.id = :resultId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODAyNzQ5", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536802749", "createdAt": "2020-11-23T20:00:34Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODAzMDA1", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536803005", "createdAt": "2020-11-23T20:00:58Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODAzMTAw", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536803100", "createdAt": "2020-11-23T20:01:07Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODAzMTUw", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536803150", "createdAt": "2020-11-23T20:01:11Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODA2MTQx", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536806141", "createdAt": "2020-11-23T20:05:44Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODE1MTQ2", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536815146", "createdAt": "2020-11-23T20:19:26Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODMyNDI2", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536832426", "createdAt": "2020-11-23T20:46:34Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NjozNVrOH4euTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0NjozNVrOH4euTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4NTY3Ng==", "bodyText": "please remove if not needed", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r528985676", "createdAt": "2020-11-23T20:46:35Z", "author": {"login": "TobiasPr"}, "path": "src/test/java/de/tum/in/www1/artemis/StudentExamIntegrationTest.java", "diffHunk": "@@ -331,6 +332,61 @@ public void testFindAllTestRunsForExam() throws Exception {\n         assertThat(response.size()).isEqualTo(2);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetAllTestRunSubmissionsForExercise() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        course2 = database.addEmptyCourse();\n+        var examVisibleDate = ZonedDateTime.now().minusMinutes(5);\n+        var examStartDate = ZonedDateTime.now().plusMinutes(4);\n+        var examEndDate = ZonedDateTime.now().plusMinutes(3);\n+        exam2 = database.addExam(course2, examVisibleDate, examStartDate, examEndDate);\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam2, false);\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam, instructor, exam.getExerciseGroups());\n+        List<Submission> response = request.getList(\"/api/exercises/\" + testRun.getExercises().get(0).getId() + \"/test-run-submissions\", HttpStatus.OK, Submission.class);\n+        response.get(0).getParticipation().setSubmissions(new HashSet<>(response));\n+        assertThat(((StudentParticipation) response.get(0).getParticipation()).isTestRunParticipation()).isTrue();\n+        assertThat(response.get(0).getResult().getAssessor()).isEqualTo(instructor);\n+        assertThat(response.get(0).getResult().getAssessor()).isEqualTo(((StudentParticipation) response.get(0).getParticipation()).getStudent().get());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetAllTestRunSubmissionsForExercise_notExamExercise() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f2e403cdf87725d2a7a0708a86a568c24f75a0", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/54f2e403cdf87725d2a7a0708a86a568c24f75a0", "committedDate": "2020-11-23T21:02:34Z", "message": "fix some codacy issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODA3MTg0", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-536807184", "createdAt": "2020-11-23T20:07:20Z", "commit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowNzoyMFrOH4dgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTozMDoxNFrOH4gIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NTgwNg==", "bodyText": "I would add Submissions to the name of the methods to clarify that the methods also loads submissions.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r528965806", "createdAt": "2020-11-23T20:07:20Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -36,8 +36,10 @@\n     @Query(\"select distinct participation from StudentParticipation participation where participation.exercise.course.id = :#{#courseId} and participation.team.shortName = :#{#teamShortName}\")\n     List<StudentParticipation> findAllByCourseIdAndTeamShortName(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n \n+    @EntityGraph(type = LOAD, attributePaths = \"submissions\")\n     Optional<StudentParticipation> findByExerciseIdAndStudentLogin(Long exerciseId, String username);\n \n+    @EntityGraph(type = LOAD, attributePaths = \"submissions\")\n     Optional<StudentParticipation> findByExerciseIdAndTeamId(Long exerciseId, Long teamId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "461f9b6a6cd7c90ced428a7b768cf6e8925c324c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwODc2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * get all the submissions for an exercise. It is possible to filter, to receive only the one that have been already submitted, or only the one assessed by the tutor who is\n          \n          \n            \n                 * Get all the submissions for an exercise. It is possible to filter, to receive only the ones that have already been submitted, or only the ones assessed by the tutor who is", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529008760", "createdAt": "2020-11-23T21:30:14Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AbstractSubmissionResource.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.List;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+\n+/**\n+ * REST controller for managing Submission.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AbstractSubmissionResource {\n+\n+    protected final SubmissionRepository submissionRepository;\n+\n+    protected final ResultService resultService;\n+\n+    protected final ParticipationService participationService;\n+\n+    protected final AuthorizationCheckService authCheckService;\n+\n+    protected final UserService userService;\n+\n+    protected final ExerciseService exerciseService;\n+\n+    protected final SubmissionService submissionService;\n+\n+    public AbstractSubmissionResource(SubmissionRepository submissionRepository, ResultService resultService, ParticipationService participationService,\n+            AuthorizationCheckService authCheckService, UserService userService, ExerciseService exerciseService, SubmissionService submissionService) {\n+        this.submissionRepository = submissionRepository;\n+        this.resultService = resultService;\n+        this.exerciseService = exerciseService;\n+        this.participationService = participationService;\n+        this.authCheckService = authCheckService;\n+        this.userService = userService;\n+        this.submissionService = submissionService;\n+    }\n+\n+    /**\n+     * get all the submissions for an exercise. It is possible to filter, to receive only the one that have been already submitted, or only the one assessed by the tutor who is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f2e403cdf87725d2a7a0708a86a568c24f75a0"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/a3982afbb500333b5d805c7eda35d8b976a23ea8", "committedDate": "2020-11-24T08:29:41Z", "message": "Merge branch 'develop' into chore/remove-duplicated-assessment-service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MjY1NjYy", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-537265662", "createdAt": "2020-11-24T08:56:34Z", "commit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODo1NjozNFrOH4yO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1NDowNlrOH42mfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMwNTI5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <br><br>", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529305297", "createdAt": "2020-11-24T08:56:34Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,93 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.\n+     *\n+     * <br><br>\n+     * For programming exercises we use a different approach see {@link ProgrammingAssessmentService#submitManualAssessment(long)})}\n+     *\n+     * @param resultId the id of the result that should be submitted\n+     * @param exercise the exercise the assessment belongs to\n+     * @param submissionDate the date manual assessment was submitted\n+     * @return the ResponseEntity with result as body\n+     */\n+    public Result submitManualAssessment(long resultId, Exercise exercise, ZonedDateTime submissionDate) {\n+        Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n+                .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n+        result.setRatedIfNotExceeded(exercise.getDueDate(), submissionDate);\n+        result.setCompletionDate(ZonedDateTime.now());\n+        Double calculatedScore = calculateTotalScore(result.getFeedbacks());\n+        return submitResult(result, exercise, calculatedScore);\n+    }\n+\n+    /**\n+     * This function is used for saving a manual assessment/result. It sets the assessment type to MANUAL and sets the assessor attribute. Furthermore, it saves the result in the\n+     * database.\n+     *\n+     * <br><br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMwNTU1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <br><br>", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529305552", "createdAt": "2020-11-24T08:56:56Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,93 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.\n+     *\n+     * <br><br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxMjk1OQ==", "bodyText": "Should be abstract.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529312959", "createdAt": "2020-11-24T09:03:19Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AbstractSubmissionResource.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.List;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+\n+/**\n+ * REST controller for managing Submission.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AbstractSubmissionResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxNjI3Ng==", "bodyText": "Also, I would rename this to SubmissionResource and remove @Annotations to be consistent with the AssessmentResource class.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529316276", "createdAt": "2020-11-24T09:06:04Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AbstractSubmissionResource.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.List;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+\n+/**\n+ * REST controller for managing Submission.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AbstractSubmissionResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxMjk1OQ=="}, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3NTczNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (textBlocks != null) {\n          \n          \n            \n                    if (textBlocks == null) {\n          \n          \n            \n                            return null;\n          \n          \n            \n                    }", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529375737", "createdAt": "2020-11-24T09:53:12Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "diffHunk": "@@ -409,14 +379,15 @@ private void checkTextExerciseForRequest(@Nullable TextExercise textExercise, Us\n      * Save TextBlocks received from Client (if present). We need to reference them to the submission first.\n      * @param textBlocks received from Client\n      * @param textSubmission to associate blocks with\n+     * @return the saved textBlocks\n      */\n-    private void saveTextBlocks(final Set<TextBlock> textBlocks, final TextSubmission textSubmission) {\n+    private Set<TextBlock> saveTextBlocks(Set<TextBlock> textBlocks, final TextSubmission textSubmission) {\n         if (textBlocks != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3NjU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        textBlocks = new HashSet<>(textBlockRepository.saveAll(updatedTextBlocks));\n          \n          \n            \n                        return new HashSet<>(textBlockRepository.saveAll(updatedTextBlocks));", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529376551", "createdAt": "2020-11-24T09:53:51Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "diffHunk": "@@ -409,14 +379,15 @@ private void checkTextExerciseForRequest(@Nullable TextExercise textExercise, Us\n      * Save TextBlocks received from Client (if present). We need to reference them to the submission first.\n      * @param textBlocks received from Client\n      * @param textSubmission to associate blocks with\n+     * @return the saved textBlocks\n      */\n-    private void saveTextBlocks(final Set<TextBlock> textBlocks, final TextSubmission textSubmission) {\n+    private Set<TextBlock> saveTextBlocks(Set<TextBlock> textBlocks, final TextSubmission textSubmission) {\n         if (textBlocks != null) {\n             final Set<String> existingTextBlockIds = textSubmission.getBlocks().stream().map(TextBlock::getId).collect(toSet());\n-            final var updatedTextBlocks = textBlocks.stream().filter(tb -> !existingTextBlockIds.contains(tb.getId())).peek(tb -> {\n-                tb.setSubmission(textSubmission);\n-            }).collect(toSet());\n-            textBlockRepository.saveAll(updatedTextBlocks);\n+            final var updatedTextBlocks = textBlocks.stream().filter(tb -> !existingTextBlockIds.contains(tb.getId())).peek(tb -> tb.setSubmission(textSubmission))\n+                    .collect(toSet());\n+            textBlocks = new HashSet<>(textBlockRepository.saveAll(updatedTextBlocks));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3Njg5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    return textBlocks;", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529376895", "createdAt": "2020-11-24T09:54:06Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "diffHunk": "@@ -409,14 +379,15 @@ private void checkTextExerciseForRequest(@Nullable TextExercise textExercise, Us\n      * Save TextBlocks received from Client (if present). We need to reference them to the submission first.\n      * @param textBlocks received from Client\n      * @param textSubmission to associate blocks with\n+     * @return the saved textBlocks\n      */\n-    private void saveTextBlocks(final Set<TextBlock> textBlocks, final TextSubmission textSubmission) {\n+    private Set<TextBlock> saveTextBlocks(Set<TextBlock> textBlocks, final TextSubmission textSubmission) {\n         if (textBlocks != null) {\n             final Set<String> existingTextBlockIds = textSubmission.getBlocks().stream().map(TextBlock::getId).collect(toSet());\n-            final var updatedTextBlocks = textBlocks.stream().filter(tb -> !existingTextBlockIds.contains(tb.getId())).peek(tb -> {\n-                tb.setSubmission(textSubmission);\n-            }).collect(toSet());\n-            textBlockRepository.saveAll(updatedTextBlocks);\n+            final var updatedTextBlocks = textBlocks.stream().filter(tb -> !existingTextBlockIds.contains(tb.getId())).peek(tb -> tb.setSubmission(textSubmission))\n+                    .collect(toSet());\n+            textBlocks = new HashSet<>(textBlockRepository.saveAll(updatedTextBlocks));\n         }\n+        return textBlocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3982afbb500333b5d805c7eda35d8b976a23ea8"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b0b843c51b4c8fdd0e2bbb311712f341e8d452b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5b0b843c51b4c8fdd0e2bbb311712f341e8d452b", "committedDate": "2020-11-24T09:58:28Z", "message": "remove annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af4eded7ec7849d752774f9b99036e25d7e70cb", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/8af4eded7ec7849d752774f9b99036e25d7e70cb", "committedDate": "2020-11-24T13:24:57Z", "message": "Update src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java\r\n\r\nadd\n\nCo-authored-by: Jan Philip Bernius <janphilip.bernius@tum.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a0ee9651530ee2700f2cb241e856365b210795", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a1a0ee9651530ee2700f2cb241e856365b210795", "committedDate": "2020-11-24T13:41:44Z", "message": "add feedback from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4efa07733fe19b2ecaa415f4e836910340d22b47", "committedDate": "2020-11-24T14:14:12Z", "message": "add feedback from code review\nRemove duplicate repository functions under different names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTMzMjUx", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-537533251", "createdAt": "2020-11-24T14:16:13Z", "commit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTM2MDA1", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-537536005", "createdAt": "2020-11-24T14:18:41Z", "commit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTQ1NjM3", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-537545637", "createdAt": "2020-11-24T14:28:14Z", "commit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTQ2OTI2", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-537546926", "createdAt": "2020-11-24T14:29:31Z", "commit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTQ1NzY0", "url": "https://github.com/ls1intum/Artemis/pull/2438#pullrequestreview-537545764", "createdAt": "2020-11-24T14:28:21Z", "commit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyODoyMVrOH5DYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDo0NTowNlrOH5EJdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NjI3Mw==", "bodyText": "Seeing the comment above explaining why we use @Transactional here, does it make much sense to additionally add // ok (which doesn't explain much in itself)?", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529586273", "createdAt": "2020-11-24T14:28:21Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -86,7 +95,7 @@ Result submitResult(Result result, Exercise exercise, Double calculatedScore) {\n      * @return the updated Result\n      */\n     // NOTE: transactional makes sense here because we change multiple objects in the database and the changes might be invalid in case, one save operation fails\n-    @Transactional\n+    @Transactional // ok", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NzUxNQ==", "bodyText": "I think this is missing the @throws annotation we use in the other method descriptions.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529587515", "createdAt": "2020-11-24T14:29:59Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,91 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.\n+     *\n+     * For programming exercises we use a different approach see {@link ProgrammingAssessmentService#submitManualAssessment(long)})}\n+     *\n+     * @param resultId the id of the result that should be submitted\n+     * @param exercise the exercise the assessment belongs to\n+     * @param submissionDate the date manual assessment was submitted\n+     * @return the ResponseEntity with result as body", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTA0MA==", "bodyText": "Missing fullstop.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529591040", "createdAt": "2020-11-24T14:34:48Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionService.java", "diffHunk": "@@ -379,4 +390,29 @@ public boolean checkIfExerciseDueDateIsReached(Exercise exercise) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * Given an exerciseId, returns all the submissions for that exercise, including their results. Submissions can be filtered to include only already submitted\n+     * submissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTc4Nw==", "bodyText": "Codacy Production: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529591787", "createdAt": "2020-11-24T14:35:49Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AssessmentResource.java", "diffHunk": "@@ -34,19 +35,90 @@\n \n     protected final ExamService examService;\n \n+    protected final WebsocketMessagingService messagingService;\n+\n     public AssessmentResource(AuthorizationCheckService authCheckService, UserService userService, ExerciseService exerciseService, SubmissionService submissionService,\n-            AssessmentService assessmentService, ResultRepository resultRepository, ExamService examService) {\n+            AssessmentService assessmentService, ResultRepository resultRepository, ExamService examService, WebsocketMessagingService messagingService) {\n         this.authCheckService = authCheckService;\n         this.userService = userService;\n         this.exerciseService = exerciseService;\n         this.submissionService = submissionService;\n         this.assessmentService = assessmentService;\n         this.resultRepository = resultRepository;\n         this.examService = examService;\n+        this.messagingService = messagingService;\n     }\n \n     abstract String getEntityName();\n \n+    /**\n+     * Get the result of the submission with the given id. Returns a 403 Forbidden response if the user is not allowed to retrieve the assessment. The user is not allowed\n+     * to retrieve the assessment if he is not a student of the corresponding course, the submission is not his submission, the result is not finished or the assessment due date of\n+     * the corresponding exercise is in the future (or not set).\n+     *\n+     * @param submissionId the id of the submission that should be sent to the client\n+     * @return the assessment of the given id\n+     */\n+    ResponseEntity<Result> getAssessmentBySubmissionId(Long submissionId) {\n+        log.debug(\"REST request to get assessment for submission with id {}\", submissionId);\n+        Submission submission = submissionService.findOneWithEagerResultAndFeedback(submissionId);\n+        StudentParticipation participation = (StudentParticipation) submission.getParticipation();\n+        Exercise exercise = participation.getExercise();\n+\n+        Result result = submission.getResult();\n+        if (result == null) {\n+            return notFound();\n+        }\n+\n+        if (!authCheckService.isUserAllowedToGetResult(exercise, participation, result)) {\n+            return forbidden();\n+        }\n+\n+        // remove sensitive information for students\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(exercise)) {\n+            exercise.filterSensitiveInformation();\n+            result.setAssessor(null);\n+        }\n+\n+        return ResponseEntity.ok(result);\n+    }\n+\n+    /**\n+     * Save or submit manual assessment depending on the submit flag.\n+     *\n+     * @param submission the submission containing the assessment\n+     * @param feedbackList list of feedbacks\n+     * @param submit if true the assessment is submitted, else only saved\n+     * @return result after saving/submitting modeling assessment\n+     */\n+    ResponseEntity<Result> saveAssessment(Submission submission, boolean submit, List<Feedback> feedbackList) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        StudentParticipation studentParticipation = (StudentParticipation) submission.getParticipation();\n+        long exerciseId = studentParticipation.getExercise().getId();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        checkAuthorization(exercise, user);\n+\n+        final var isAtLeastInstructor = authCheckService.isAtLeastInstructorForExercise(exercise, user);\n+        if (!assessmentService.isAllowedToCreateOrOverrideResult(submission.getResult(), exercise, studentParticipation, user, isAtLeastInstructor)) {\n+            log.debug(\"The user \" + user.getLogin() + \" is not allowed to override the assessment for the submission \" + submission.getId());\n+            return forbidden(\"assessment\", \"assessmentSaveNotAllowed\", \"The user is not allowed to override the assessment\");\n+        }\n+\n+        Result result = assessmentService.saveManualAssessment(submission, feedbackList);\n+        if (submit) {\n+            result = assessmentService.submitManualAssessment(result.getId(), exercise, submission.getSubmissionDate());\n+        }\n+        // remove information about the student for tutors to ensure double-blind assessment\n+        if (!isAtLeastInstructor) {\n+            ((StudentParticipation) result.getParticipation()).filterSensitiveInformation();\n+        }\n+        if (submit && ((result.getParticipation()).getExercise().getAssessmentDueDate() == null\n+                || (result.getParticipation()).getExercise().getAssessmentDueDate().isBefore(ZonedDateTime.now()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MjE2OQ==", "bodyText": "Codacy Production: Avoid long parameter lists.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529592169", "createdAt": "2020-11-24T14:36:19Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadSubmissionResource.java", "diffHunk": "@@ -42,44 +42,34 @@\n \n     private final FileUploadExerciseService fileUploadExerciseService;\n \n-    private final AuthorizationCheckService authCheckService;\n-\n-    private final ExerciseService exerciseService;\n-\n-    private final UserService userService;\n-\n-    private final ParticipationService participationService;\n-\n     private final GradingCriterionService gradingCriterionService;\n \n     private final ExamSubmissionService examSubmissionService;\n \n-    public FileUploadSubmissionResource(FileUploadSubmissionService fileUploadSubmissionService, FileUploadExerciseService fileUploadExerciseService,\n-            AuthorizationCheckService authCheckService, UserService userService, ExerciseService exerciseService, ParticipationService participationService,\n-            GradingCriterionService gradingCriterionService, ExamSubmissionService examSubmissionService) {\n-        this.userService = userService;\n-        this.exerciseService = exerciseService;\n+    public FileUploadSubmissionResource(SubmissionRepository submissionRepository, ResultService resultService, FileUploadSubmissionService fileUploadSubmissionService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MjMyOA==", "bodyText": "Codacy Production: Avoid long parameter lists.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529592328", "createdAt": "2020-11-24T14:36:32Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java", "diffHunk": "@@ -53,39 +53,25 @@\n \n     private final ModelingExerciseService modelingExerciseService;\n \n-    private final ParticipationService participationService;\n-\n-    private final CourseService courseService;\n-\n-    private final AuthorizationCheckService authCheckService;\n-\n     private final CompassService compassService;\n \n-    private final ExerciseService exerciseService;\n-\n-    private final UserService userService;\n-\n     private final GradingCriterionService gradingCriterionService;\n \n     private final ExamSubmissionService examSubmissionService;\n \n-    public ModelingSubmissionResource(ModelingSubmissionService modelingSubmissionService, ModelingExerciseService modelingExerciseService,\n-            ParticipationService participationService, CourseService courseService, AuthorizationCheckService authCheckService, CompassService compassService,\n+    public ModelingSubmissionResource(SubmissionRepository submissionRepository, ResultService resultService, ModelingSubmissionService modelingSubmissionService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MzA3Ng==", "bodyText": "Maybe I'm missing something, but this does not appear to call result.setAssessmentType(AssessmentType.MANUAL);?", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529593076", "createdAt": "2020-11-24T14:37:31Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,91 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NTA3MA==", "bodyText": "Fwiw, submitResult already does this, so doing it here looks redundant.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529595070", "createdAt": "2020-11-24T14:40:13Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,91 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.\n+     *\n+     * For programming exercises we use a different approach see {@link ProgrammingAssessmentService#submitManualAssessment(long)})}\n+     *\n+     * @param resultId the id of the result that should be submitted\n+     * @param exercise the exercise the assessment belongs to\n+     * @param submissionDate the date manual assessment was submitted\n+     * @return the ResponseEntity with result as body\n+     */\n+    public Result submitManualAssessment(long resultId, Exercise exercise, ZonedDateTime submissionDate) {\n+        Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n+                .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n+        result.setRatedIfNotExceeded(exercise.getDueDate(), submissionDate);\n+        result.setCompletionDate(ZonedDateTime.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NTY0MA==", "bodyText": "submitResult might overwrite this with another submissionDate. Are we sure this is not a problem here?", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529595640", "createdAt": "2020-11-24T14:40:59Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,91 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.\n+     *\n+     * For programming exercises we use a different approach see {@link ProgrammingAssessmentService#submitManualAssessment(long)})}\n+     *\n+     * @param resultId the id of the result that should be submitted\n+     * @param exercise the exercise the assessment belongs to\n+     * @param submissionDate the date manual assessment was submitted\n+     * @return the ResponseEntity with result as body\n+     */\n+    public Result submitManualAssessment(long resultId, Exercise exercise, ZonedDateTime submissionDate) {\n+        Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n+                .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n+        result.setRatedIfNotExceeded(exercise.getDueDate(), submissionDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NzkwMg==", "bodyText": "Hm, I just saw we are copying this over line by line, so I guess this is not a problem (for this PR).", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529597902", "createdAt": "2020-11-24T14:43:58Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -262,4 +271,91 @@ public Double calculateTotalScore(List<Feedback> assessments) {\n         }\n         return totalScore;\n     }\n+\n+    /**\n+     * Gets an example submission with the given submissionId and returns the result of the submission.\n+     *\n+     * @param submissionId the id of the example modeling submission\n+     * @return the result of the submission\n+     * @throws EntityNotFoundException when no submission can be found for the given id\n+     */\n+    public Result getExampleAssessment(long submissionId) {\n+        Optional<Submission> optionalSubmission = submissionRepository.findExampleSubmissionByIdWithEagerResult(submissionId);\n+        Submission submission = optionalSubmission.orElseThrow(() -> new EntityNotFoundException(\"Example Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n+        return submission.getResult();\n+    }\n+\n+    /**\n+     * This function is used for submitting a manual assessment/result. It gets the result that belongs to the given resultId, updates the completion date, sets the assessment type\n+     * to MANUAL and sets the assessor attribute. Afterwards, it saves the update result in the database again.\n+     *\n+     * For programming exercises we use a different approach see {@link ProgrammingAssessmentService#submitManualAssessment(long)})}\n+     *\n+     * @param resultId the id of the result that should be submitted\n+     * @param exercise the exercise the assessment belongs to\n+     * @param submissionDate the date manual assessment was submitted\n+     * @return the ResponseEntity with result as body\n+     */\n+    public Result submitManualAssessment(long resultId, Exercise exercise, ZonedDateTime submissionDate) {\n+        Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n+                .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n+        result.setRatedIfNotExceeded(exercise.getDueDate(), submissionDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NTY0MA=="}, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5ODgzNw==", "bodyText": "This can be converted to an @throws annotation.", "url": "https://github.com/ls1intum/Artemis/pull/2438#discussion_r529598837", "createdAt": "2020-11-24T14:45:06Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionService.java", "diffHunk": "@@ -202,6 +201,18 @@ public Submission findOneWithEagerResult(long submissionId) {\n                 .orElseThrow(() -> new EntityNotFoundException(\"Submission with id \\\"\" + submissionId + \"\\\" does not exist\"));\n     }\n \n+    /**\n+     * Get the submission with the given id from the database. The submission is loaded together with its result, the feedback of the result and the assessor of the\n+     * result. Throws an EntityNotFoundException if no submission could be found for the given id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa07733fe19b2ecaa415f4e836910340d22b47"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3713, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}