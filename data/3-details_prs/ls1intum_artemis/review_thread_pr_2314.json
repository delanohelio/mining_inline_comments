{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzYxNjQ5", "number": 2314, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowNTozM1rOE0_2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0ODozM1rOE1xazg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA3NTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowNTozM1rOHtCIOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowNTozM1rOHtCIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4Mjg0MA==", "bodyText": "Reformulate / adjust reporting logic to notify only about operations that failed (not always both).", "url": "https://github.com/ls1intum/Artemis/pull/2314#discussion_r516982840", "createdAt": "2020-11-03T22:05:33Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -227,20 +227,25 @@ private Runnable lockStudentRepositories(ProgrammingExercise exercise, Predicate\n             SecurityUtils.setAuthorizationObject();\n             try {\n                 List<ProgrammingExerciseStudentParticipation> failedLockOperations = removeWritePermissionsFromAllStudentRepositories(programmingExerciseId, condition);\n+                // Stash also the not submitted/committed changes, to ensure that only submitted/commited changes are displayed\n+                List<ProgrammingExerciseStudentParticipation> failedStashOperations = stashChangesInAllStudentRepositories(programmingExerciseId, condition);\n \n-                // We sent a notification to the instructor about the success of the repository locking operation.\n+                // We sent a notification to the instructor about the success of the repository locking and stashing operations.\n                 long numberOfFailedLockOperations = failedLockOperations.size();\n+                long numberOfFailedStashOperations = failedStashOperations.size();\n                 Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithTemplateParticipationAndSolutionParticipationById(programmingExerciseId);\n                 if (programmingExercise.isEmpty()) {\n                     throw new EntityNotFoundException(\"programming exercise not found with id \" + programmingExerciseId);\n                 }\n-                if (numberOfFailedLockOperations > 0) {\n+                if (numberOfFailedLockOperations > 0 || numberOfFailedStashOperations > 0) {\n                     groupNotificationService.notifyInstructorGroupAboutExerciseUpdate(programmingExercise.get(),\n-                            Constants.PROGRAMMING_EXERCISE_FAILED_LOCK_OPERATIONS_NOTIFICATION + failedLockOperations.size());\n+                            Constants.PROGRAMMING_EXERCISE_FAILED_LOCK_OPERATIONS_NOTIFICATION + numberOfFailedLockOperations\n+                                    + \". Furthermore, When stashing the not submitted changes, not all stash operations were successfull. Number of failed stash operations: \"\n+                                    + numberOfFailedStashOperations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1905c79ed85569552911db3efc68d14a58864575"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODE5NjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/GitService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0ODozM1rOHuPH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxOTowNVrOHuQcWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0NDMyMw==", "bodyText": "git.close();  won't close the repo with the new Git(repo). I think for linux this is fine but for Windows this could introduce some problems. If you don't need to repo anymore, make sure to close it correctly. You could use the constructor new Git(repo, true) to force a close of the repo if you close the git instance.", "url": "https://github.com/ls1intum/Artemis/pull/2314#discussion_r518244323", "createdAt": "2020-11-05T17:48:33Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/GitService.java", "diffHunk": "@@ -705,4 +705,16 @@ public boolean repositoryAlreadyExists(URL repoUrl) {\n         Path localPath = new java.io.File(REPO_CLONE_PATH + folderNameForRepositoryUrl(repoUrl)).toPath();\n         return Files.exists(localPath);\n     }\n+\n+    /**\n+     * Stashes not submitted/committed changes of the repo.\n+     *\n+     * @param repo student repo of a participation in a programming exercise\n+     * @throws GitAPIException\n+     */\n+    public void stashChanges(Repository repo) throws GitAPIException {\n+        Git git = new Git(repo);\n+        git.stashCreate().call();\n+        git.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f2f794a31e283f67d9a52526e327e6e0a01bc8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTk0Ng==", "bodyText": "Nevermind the Git(repo, closeRepo) constructor is package private and can't be used. We would need to use Git.open(File dir, FS fs) the get a Git instance which closes the repo. As we do caching of repos closing might not be necessary.", "url": "https://github.com/ls1intum/Artemis/pull/2314#discussion_r518265946", "createdAt": "2020-11-05T18:19:05Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/GitService.java", "diffHunk": "@@ -705,4 +705,16 @@ public boolean repositoryAlreadyExists(URL repoUrl) {\n         Path localPath = new java.io.File(REPO_CLONE_PATH + folderNameForRepositoryUrl(repoUrl)).toPath();\n         return Files.exists(localPath);\n     }\n+\n+    /**\n+     * Stashes not submitted/committed changes of the repo.\n+     *\n+     * @param repo student repo of a participation in a programming exercise\n+     * @throws GitAPIException\n+     */\n+    public void stashChanges(Repository repo) throws GitAPIException {\n+        Git git = new Git(repo);\n+        git.stashCreate().call();\n+        git.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0NDMyMw=="}, "originalCommit": {"oid": "91f2f794a31e283f67d9a52526e327e6e0a01bc8"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4395, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}