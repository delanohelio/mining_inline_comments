{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTQyOTcx", "number": 1292, "reviewThreads": {"totalCount": 76, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzowNjoyMVrODwZXlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNzoyM1rODz5rIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDczODc4OnYy", "diffSide": "RIGHT", "path": ".gitignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzowNjoyMVrOGDX07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo0NToxNFrOGDm6vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4OTI5NA==", "bodyText": "Please remove them from here and use a local setup to prevent staging these files.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406189294", "createdAt": "2020-04-09T13:06:21Z", "author": {"login": "sleiss"}, "path": ".gitignore", "diffHunk": "@@ -6,6 +6,8 @@\n /src/test/javascript/PhantomJS*/\n /uploads\n /test-results.xml\n+/src/main/resources/config/application-artemis.yml\n+/src/main/resources/config/application-dev.yml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzNjU0MQ==", "bodyText": "i removed these paths/files from the gitignore", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406436541", "createdAt": "2020-04-09T19:45:14Z", "author": {"login": "F4lka"}, "path": ".gitignore", "diffHunk": "@@ -6,6 +6,8 @@\n /src/test/javascript/PhantomJS*/\n /uploads\n /test-results.xml\n+/src/main/resources/config/application-artemis.yml\n+/src/main/resources/config/application-dev.yml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4OTI5NA=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDczOTYyOnYy", "diffSide": "RIGHT", "path": ".gitignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzowNjozNFrOGDX1bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo0NToyMVrOGDm6-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4OTQyMw==", "bodyText": "Please remove them from here and use a local setup to prevent staging these files.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406189423", "createdAt": "2020-04-09T13:06:34Z", "author": {"login": "sleiss"}, "path": ".gitignore", "diffHunk": "@@ -68,7 +70,7 @@ classes/\n .local/share/JetBrains/\n .java/\n out/\n-\n+/src/main/resources/config/application-artemis.yml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzNjYwMw==", "bodyText": "i removed these paths/files from the gitignore", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406436603", "createdAt": "2020-04-09T19:45:21Z", "author": {"login": "F4lka"}, "path": ".gitignore", "diffHunk": "@@ -68,7 +70,7 @@ classes/\n .local/share/JetBrains/\n .java/\n out/\n-\n+/src/main/resources/config/application-artemis.yml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4OTQyMw=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc1Mzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxMDoyN1rOGDX-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoxMzowNFrOGDnywQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MTc3NQ==", "bodyText": "I would prefer a commitHash that is as long as a normal SHA-1 commitHash (I believe 40 chars) as the commit hash might be displayed somewhere in the future and we should be consistent here.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406191775", "createdAt": "2020-04-09T13:10:27Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MDg4MQ==", "bodyText": "I added a random function, which creates a 40 char commit hash", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406450881", "createdAt": "2020-04-09T20:13:04Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MTc3NQ=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc1ODg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxMTo1NVrOGDYBxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNzoxM1rOGDmqug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjU4Mw==", "bodyText": "I will address this in a different PR for the other occurences, but we should change this to 0 of 13 passed to be consistent with this: \n  \n    \n      Artemis/src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java\n    \n    \n         Line 251\n      in\n      044f7aa\n    \n    \n    \n    \n\n        \n          \n           String newResultString = successfulTestCases.size() + \" of \" + allTests.size() + \" passed\"; \n        \n    \n  \n\n\nThis is not a problem introduced by your PR, but we should change it.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406192583", "createdAt": "2020-04-09T13:11:55Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"13 of 13 failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMjQ0Mg==", "bodyText": "I adpated the naming scheme", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406432442", "createdAt": "2020-04-09T19:37:13Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"13 of 13 failed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjU4Mw=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc1OTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxMjowN1rOGDYCLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoxMzoxNFrOGDnzEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjY4Nw==", "bodyText": "Same as above (length of hash).", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406192687", "createdAt": "2020-04-09T13:12:07Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"13 of 13 failed\");\n+        resultBase.setAssessmentType(AssessmentType.AUTOMATIC);\n+        resultBase.score(0L);\n+        resultBase.setCompletionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        resultRepository.save(resultBase);\n+\n+        ProgrammingSubmission programmingSubmissionSolution = new ProgrammingSubmission();\n+        String commitHashSolution = \"abcdef23\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MDk2MQ==", "bodyText": "I added a random function, which creates a 40 char commit hash", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406450961", "createdAt": "2020-04-09T20:13:14Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://localhost:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = \"abcdef01\";\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"13 of 13 failed\");\n+        resultBase.setAssessmentType(AssessmentType.AUTOMATIC);\n+        resultBase.score(0L);\n+        resultBase.setCompletionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        resultRepository.save(resultBase);\n+\n+        ProgrammingSubmission programmingSubmissionSolution = new ProgrammingSubmission();\n+        String commitHashSolution = \"abcdef23\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MjY4Nw=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc2MzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxMzoxMlrOGDYExw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxMzoxMlrOGDYExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MzM1MQ==", "bodyText": "I would also prefer a longer commit hash here.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406193351", "createdAt": "2020-04-09T13:13:12Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"\n+                + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseID the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseID) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        Random random = new Random();\n+        programmingSubmission.setCommitHash(String.valueOf(random.nextInt(100000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc2ODU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNDoyM1rOGDYHvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNDoyM1rOGDYHvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDExMA==", "bodyText": "This already exists in the ProgrammingExerciseResource, maybe we create a Constant to avoid duplication.\nSee TITLE_NAME_PATTERN for an example.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406194110", "createdAt": "2020-04-09T13:14:23Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4NTEyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODozOFrOGDYSJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo0ODoxMFrOGEPoQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5Njc3NA==", "bodyText": "This is duplicated with the ProgrammingExerciseUpdateComponent, maybe you can refactor it to only use it once (maybe create a method isProdProfile or something like that in ProfileService?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406196774", "createdAt": "2020-04-09T13:18:38Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.ts", "diffHunk": "@@ -60,6 +64,22 @@ export class ExerciseDetailsStudentActionsComponent implements OnInit {\n                 this.getRepositoryPassword();\n             }\n         });\n+        // In order to check if the application is currently running on production\n+        this.profileService.getProfileInfo().subscribe(\n+            (profileInfo) => {\n+                if (profileInfo) {\n+                    this.profileInfo = profileInfo;\n+                }\n+            },\n+            (reason) => {},\n+        );\n+    }\n+\n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    visibilityCheck(): boolean {\n+        return !this.profileInfo.inProduction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMzU1Mw==", "bodyText": "I created a method in the profile service and this one will be then called in the particular class", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407103553", "createdAt": "2020-04-11T19:48:10Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.ts", "diffHunk": "@@ -60,6 +64,22 @@ export class ExerciseDetailsStudentActionsComponent implements OnInit {\n                 this.getRepositoryPassword();\n             }\n         });\n+        // In order to check if the application is currently running on production\n+        this.profileService.getProfileInfo().subscribe(\n+            (profileInfo) => {\n+                if (profileInfo) {\n+                    this.profileInfo = profileInfo;\n+                }\n+            },\n+            (reason) => {},\n+        );\n+    }\n+\n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    visibilityCheck(): boolean {\n+        return !this.profileInfo.inProduction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5Njc3NA=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc5MDAyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/exercise.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTo0NlrOGDYVKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozMzowOFrOGDmigg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzU0Ng==", "bodyText": "At the other occurrences, we translated submission with Einreichung, so we should be consistent here.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406197546", "createdAt": "2020-04-09T13:19:46Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/i18n/de/exercise.json", "diffHunk": "@@ -93,6 +93,8 @@\n             \"isText\": \"Das ist eine Text\u00fcbung\",\n             \"isFileUpload\": \"Das ist eine Datei-Upload-\u00dcbung\",\n             \"notificiationText\": \"Optional: Mitteilung \u00fcber die \u00c4nderung\",\n+            \"submissionSuccessful\": \"Die submission war erfolgreich\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDMzOA==", "bodyText": "I adapted the translation", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406430338", "createdAt": "2020-04-09T19:33:08Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/i18n/de/exercise.json", "diffHunk": "@@ -93,6 +93,8 @@\n             \"isText\": \"Das ist eine Text\u00fcbung\",\n             \"isFileUpload\": \"Das ist eine Datei-Upload-\u00dcbung\",\n             \"notificiationText\": \"Optional: Mitteilung \u00fcber die \u00c4nderung\",\n+            \"submissionSuccessful\": \"Die submission war erfolgreich\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzU0Ng=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgwNDk3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/programmingExercise.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMzoyMVrOGDYebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNDowOFrOGDmkng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTkxOQ==", "bodyText": "I like this one more, but I don't care that much ;-)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"noLocalSetup\": \"Kein Lokaler Setup\",\n          \n          \n            \n                        \"noLocalSetup\": \"Kein lokales Setup\",", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406199919", "createdAt": "2020-04-09T13:23:21Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/i18n/de/programmingExercise.json", "diffHunk": "@@ -41,6 +41,7 @@\n             \"buildplans\": \"Build Pl\u00e4ne\",\n             \"publishBuildPlanUrl\": \"Build Plan ver\u00f6ffentlichen\",\n             \"allowOnlineEditor\": \"Online Editor erlauben\",\n+            \"noLocalSetup\": \"Kein Lokaler Setup\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDg3OA==", "bodyText": "I adapted the translation", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406430878", "createdAt": "2020-04-09T19:34:08Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/i18n/de/programmingExercise.json", "diffHunk": "@@ -41,6 +41,7 @@\n             \"buildplans\": \"Build Pl\u00e4ne\",\n             \"publishBuildPlanUrl\": \"Build Plan ver\u00f6ffentlichen\",\n             \"allowOnlineEditor\": \"Online Editor erlauben\",\n+            \"noLocalSetup\": \"Kein Lokaler Setup\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTkxOQ=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgwNjcyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/programmingExercise.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMzo0M1rOGDYfgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNDoyNFrOGDmlKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMDE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"noLocalSetup\": \"No Local Setup\",\n          \n          \n            \n                        \"noLocalSetup\": \"No local Setup\",", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406200194", "createdAt": "2020-04-09T13:23:43Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/i18n/en/programmingExercise.json", "diffHunk": "@@ -41,6 +41,7 @@\n             \"buildplans\": \"Build Plans\",\n             \"publishBuildPlanUrl\": \"Publish Build Plan\",\n             \"allowOnlineEditor\": \"Allow Online Editor\",\n+            \"noLocalSetup\": \"No Local Setup\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTAxNw==", "bodyText": "I adapted the translation", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406431017", "createdAt": "2020-04-09T19:34:24Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/i18n/en/programmingExercise.json", "diffHunk": "@@ -41,6 +41,7 @@\n             \"buildplans\": \"Build Plans\",\n             \"publishBuildPlanUrl\": \"Publish Build Plan\",\n             \"allowOnlineEditor\": \"Allow Online Editor\",\n+            \"noLocalSetup\": \"No Local Setup\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMDE5NA=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgxMTg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyNDo1OFrOGDYi2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNDo1OFrOGDmmXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMTA0OQ==", "bodyText": "Are all these <p> changes intended?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406201049", "createdAt": "2020-04-09T13:24:58Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -134,7 +135,7 @@ public void tearDown() {\n     /**\n      * The student commits, the code change is pushed to the VCS.\n      * The VCS notifies Artemis about a new submission.\n-     *\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTMyNA==", "bodyText": "I removed the p's. I'm not sure how they got there", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406431324", "createdAt": "2020-04-09T19:34:58Z", "author": {"login": "F4lka"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -134,7 +135,7 @@ public void tearDown() {\n     /**\n      * The student commits, the code change is pushed to the VCS.\n      * The VCS notifies Artemis about a new submission.\n-     *\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMTA0OQ=="}, "originalCommit": {"oid": "2dfd1001010c3b9b429edec634b84892bc62276a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3ODE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMzoxOFrOGD5RpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxMjozMFrOGEPBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMxNg==", "bodyText": "this should only be available in DEV mode, please use a profile here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737316", "createdAt": "2020-04-10T12:33:18Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY5MA==", "bodyText": "I added the profile", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093690", "createdAt": "2020-04-11T18:12:30Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Service", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMxNg=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3ODU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMzoyN1rOGD5R5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxMjoyMFrOGEPBsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM4MA==", "bodyText": "this should only be available in DEV mode, please use a profile here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737380", "createdAt": "2020-04-10T12:33:27Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY4MQ==", "bodyText": "I added the profile", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093681", "createdAt": "2020-04-11T18:12:20Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Service", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM4MA=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3ODg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMzozNVrOGD5SDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozNDozMlrOGEP58A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzQyMQ==", "bodyText": "this should only be available in DEV mode, please use a profile here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737421", "createdAt": "2020-04-10T12:33:35Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.util.Random;\n+\n+public class VCSSimulationUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODA4MA==", "bodyText": "I added the dev profile annotation", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407108080", "createdAt": "2020-04-11T20:34:32Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.util.Random;\n+\n+public class VCSSimulationUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzQyMQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4MDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNDoxMVrOGD5TBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNTo1N1rOGEEeIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzY2OQ==", "bodyText": "please move these constants to another file and do not change ProgrammingExerciseResource at all", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737669", "createdAt": "2020-04-10T12:34:11Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -734,6 +733,12 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n \n         public static final String SETUP = PROGRAMMING_EXERCISES + \"/setup\";\n \n+        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDczNg==", "bodyText": "i moved the endpoints to the corresponding simulation classes", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406920736", "createdAt": "2020-04-10T20:05:57Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -734,6 +733,12 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n \n         public static final String SETUP = PROGRAMMING_EXERCISES + \"/setup\";\n \n+        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzY2OQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4MDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNDoxOFrOGD5TJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxMjowOFrOGEPBkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzcwMQ==", "bodyText": "this should only be available in DEV mode, please use a profile here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406737701", "createdAt": "2020-04-10T12:34:18Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY0OQ==", "bodyText": "I added the profile", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093649", "createdAt": "2020-04-11T18:12:08Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzcwMQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4NjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNzowMFrOGD5WdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoyMjo1MFrOGEEz7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODU0OQ==", "bodyText": "I think some of the checks below are not necessary for a local setup, which would greatly reduce the code complexity here, e.g. title and short name checks, all programming language and package related checks, even the max score can be left out", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738549", "createdAt": "2020-04-10T12:37:00Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";\n+\n+    private final Pattern packageNamePattern = Pattern.compile(packageNameRegex);\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, UserService userService, AuthorizationCheckService authCheckService,\n+            ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.NO_LOCAL_SETUP)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+        if (programmingExercise.getId() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjMxOA==", "bodyText": "I removed the input checks and the connected test cases", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406926318", "createdAt": "2020-04-10T20:22:50Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";\n+\n+    private final Pattern packageNamePattern = Pattern.compile(packageNameRegex);\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, UserService userService, AuthorizationCheckService authCheckService,\n+            ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.NO_LOCAL_SETUP)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+        if (programmingExercise.getId() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODU0OQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4Njk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNzoxNlrOGD5WuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNToyNjozMFrOGEWWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYxNw==", "bodyText": "please remove Transactional here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738617", "createdAt": "2020-04-10T12:37:16Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMzY0NQ==", "bodyText": "I removed the annotation", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407213645", "createdAt": "2020-04-12T15:26:30Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYxNw=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4NzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNzoyMVrOGD5Wzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxMjo0MVrOGEPBwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYzOQ==", "bodyText": "this should only be available in DEV mode, please use a profile here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738639", "createdAt": "2020-04-10T12:37:21Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProgrammingSubmissionResultSimulationResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MzY5Nw==", "bodyText": "I added the profile", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407093697", "createdAt": "2020-04-11T18:12:41Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProgrammingSubmissionResultSimulationResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODYzOQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4Nzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNzo0M1rOGD5XNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNTowNlrOGEEdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODc0MQ==", "bodyText": "please remove the comment, this will never work for LTI", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738741", "createdAt": "2020-04-10T12:37:43Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        // TODO: can we avoid to invoke this code for non LTI students? (to improve performance) // if (participation.isLti()) { // }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDQ1OA==", "bodyText": "i removed the comment", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406920458", "createdAt": "2020-04-10T20:05:06Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        // TODO: can we avoid to invoke this code for non LTI students? (to improve performance) // if (participation.isLti()) { // }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODc0MQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4OTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozODoxNFrOGD5X7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNDo1MlrOGEEcvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODkyNw==", "bodyText": "I don't really like this name. Either call it \"local-setup\" or something with \"simulation\"", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406738927", "createdAt": "2020-04-10T12:38:14Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";\n+\n+    private final Pattern packageNamePattern = Pattern.compile(packageNameRegex);\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, UserService userService, AuthorizationCheckService authCheckService,\n+            ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.NO_LOCAL_SETUP)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+        if (programmingExercise.getId() != null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n+        }\n+\n+        if (programmingExercise.getCourse() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        }\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+            return forbidden();\n+        }\n+\n+        // security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        programmingExercise.setCourse(course);\n+\n+        // Check if exercise title is set\n+        if (programmingExercise.getTitle() == null || programmingExercise.getTitle().length() < 3) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The title of the programming exercise is too short\", \"programmingExerciseTitleInvalid\")).body(null);\n+        }\n+\n+        // Check if the exercise title matches regex\n+        Matcher titleMatcher = TITLE_NAME_PATTERN.matcher(programmingExercise.getTitle());\n+        if (!titleMatcher.matches()) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The title is invalid\", \"titleInvalid\")).body(null);\n+        }\n+\n+        // Check if exercise shortname is set\n+        if (programmingExercise.getShortName() == null || programmingExercise.getShortName().length() < 3) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The shortname of the programming exercise is not set or too short\", \"programmingExerciseShortnameInvalid\"))\n+                    .body(null);\n+        }\n+\n+        // Check if course shortname is set\n+        if (course.getShortName() == null || course.getShortName().length() < 3) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The shortname of the course is not set or too short\", \"courseShortnameInvalid\"))\n+                    .body(null);\n+        }\n+\n+        // Check if exercise shortname matches regex\n+        Matcher shortNameMatcher = SHORT_NAME_PATTERN.matcher(programmingExercise.getShortName());\n+        if (!shortNameMatcher.matches()) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The shortname is invalid\", \"shortnameInvalid\")).body(null);\n+        }\n+\n+        List<ProgrammingExercise> programmingExercisesWithSameShortName = programmingExerciseRepository.findAllByShortNameAndCourse(programmingExercise.getShortName(), course);\n+        if (programmingExercisesWithSameShortName.size() > 0) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName,\n+                    \"A programming exercise with the same short name already exists. Please choose a different short name.\", \"shortnameAlreadyExists\")).body(null);\n+        }\n+\n+        // Check if programming language is set\n+        if (programmingExercise.getProgrammingLanguage() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"No programming language was specified\", \"programmingLanguageNotSet\")).body(null);\n+        }\n+\n+        // Check if package name is set\n+        if (programmingExercise.getProgrammingLanguage() == ProgrammingLanguage.JAVA) {\n+            // only Java needs a valid package name at the moment\n+            if (programmingExercise.getPackageName() == null || programmingExercise.getPackageName().length() < 3) {\n+                return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The package name is invalid\", \"packagenameInvalid\")).body(null);\n+            }\n+\n+            // Check if package name matches regex\n+            Matcher packageNameMatcher = packageNamePattern.matcher(programmingExercise.getPackageName());\n+            if (!packageNameMatcher.matches()) {\n+                return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The package name is invalid\", \"packagenameInvalid\")).body(null);\n+            }\n+        }\n+\n+        // Check if max score is set\n+        if (programmingExercise.getMaxScore() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The max score is invalid\", \"maxscoreInvalid\")).body(null);\n+        }\n+\n+        programmingExercise.generateAndSetProjectKey();\n+        try {\n+            ProgrammingExercise newProgrammingExercise = programmingExerciseSimulationService.setupProgrammingExerciseWithoutLocalSetup(programmingExercise); // Setup all\n+                                                                                                                                                              // repositories etc\n+            programmingExerciseSimulationService.setupInitialSubmissionsAndResults(programmingExercise);\n+            return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n+                    .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while setting up programming exercise\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while setting up the exercise: \" + e.getMessage(), \"errorProgrammingExercise\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String PROGRAMMING_EXERCISES = \"/programming-exercises\";\n+\n+        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDM4MA==", "bodyText": "i renamed the endpoint, now it is called EXERCISES_SIMULATION", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406920380", "createdAt": "2020-04-10T20:04:52Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.config.Constants.SHORT_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.config.Constants.TITLE_NAME_PATTERN;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final String packageNameRegex = \"^[a-z][a-z0-9_]*(\\\\.[a-z0-9_]+)+[0-9a-z_]$\";\n+\n+    private final Pattern packageNamePattern = Pattern.compile(packageNameRegex);\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, UserService userService, AuthorizationCheckService authCheckService,\n+            ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.NO_LOCAL_SETUP)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+        if (programmingExercise.getId() != null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n+        }\n+\n+        if (programmingExercise.getCourse() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        }\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+            return forbidden();\n+        }\n+\n+        // security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        programmingExercise.setCourse(course);\n+\n+        // Check if exercise title is set\n+        if (programmingExercise.getTitle() == null || programmingExercise.getTitle().length() < 3) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The title of the programming exercise is too short\", \"programmingExerciseTitleInvalid\")).body(null);\n+        }\n+\n+        // Check if the exercise title matches regex\n+        Matcher titleMatcher = TITLE_NAME_PATTERN.matcher(programmingExercise.getTitle());\n+        if (!titleMatcher.matches()) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The title is invalid\", \"titleInvalid\")).body(null);\n+        }\n+\n+        // Check if exercise shortname is set\n+        if (programmingExercise.getShortName() == null || programmingExercise.getShortName().length() < 3) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The shortname of the programming exercise is not set or too short\", \"programmingExerciseShortnameInvalid\"))\n+                    .body(null);\n+        }\n+\n+        // Check if course shortname is set\n+        if (course.getShortName() == null || course.getShortName().length() < 3) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The shortname of the course is not set or too short\", \"courseShortnameInvalid\"))\n+                    .body(null);\n+        }\n+\n+        // Check if exercise shortname matches regex\n+        Matcher shortNameMatcher = SHORT_NAME_PATTERN.matcher(programmingExercise.getShortName());\n+        if (!shortNameMatcher.matches()) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The shortname is invalid\", \"shortnameInvalid\")).body(null);\n+        }\n+\n+        List<ProgrammingExercise> programmingExercisesWithSameShortName = programmingExerciseRepository.findAllByShortNameAndCourse(programmingExercise.getShortName(), course);\n+        if (programmingExercisesWithSameShortName.size() > 0) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName,\n+                    \"A programming exercise with the same short name already exists. Please choose a different short name.\", \"shortnameAlreadyExists\")).body(null);\n+        }\n+\n+        // Check if programming language is set\n+        if (programmingExercise.getProgrammingLanguage() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"No programming language was specified\", \"programmingLanguageNotSet\")).body(null);\n+        }\n+\n+        // Check if package name is set\n+        if (programmingExercise.getProgrammingLanguage() == ProgrammingLanguage.JAVA) {\n+            // only Java needs a valid package name at the moment\n+            if (programmingExercise.getPackageName() == null || programmingExercise.getPackageName().length() < 3) {\n+                return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The package name is invalid\", \"packagenameInvalid\")).body(null);\n+            }\n+\n+            // Check if package name matches regex\n+            Matcher packageNameMatcher = packageNamePattern.matcher(programmingExercise.getPackageName());\n+            if (!packageNameMatcher.matches()) {\n+                return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The package name is invalid\", \"packagenameInvalid\")).body(null);\n+            }\n+        }\n+\n+        // Check if max score is set\n+        if (programmingExercise.getMaxScore() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The max score is invalid\", \"maxscoreInvalid\")).body(null);\n+        }\n+\n+        programmingExercise.generateAndSetProjectKey();\n+        try {\n+            ProgrammingExercise newProgrammingExercise = programmingExerciseSimulationService.setupProgrammingExerciseWithoutLocalSetup(programmingExercise); // Setup all\n+                                                                                                                                                              // repositories etc\n+            programmingExerciseSimulationService.setupInitialSubmissionsAndResults(programmingExercise);\n+            return ResponseEntity.created(new URI(\"/api/programming-exercises\" + newProgrammingExercise.getId()))\n+                    .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newProgrammingExercise.getTitle())).body(newProgrammingExercise);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while setting up programming exercise\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while setting up the exercise: \" + e.getMessage(), \"errorProgrammingExercise\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String PROGRAMMING_EXERCISES = \"/programming-exercises\";\n+\n+        public static final String NO_LOCAL_SETUP = PROGRAMMING_EXERCISES + \"/no-local-setup\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczODkyNw=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI5MDU4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/manage/course-management.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozODo1M1rOGD5Yzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzoyMDo1NlrOGENLLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTE1MQ==", "bodyText": "Please do not mix up actual functionality and one for simulation. We should separate this as strictly as possible!", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406739151", "createdAt": "2020-04-10T12:38:53Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/course/manage/course-management.service.ts", "diffHunk": "@@ -223,6 +225,7 @@ export class CourseManagementService {\n @Injectable({ providedIn: 'root' })\n export class CourseExerciseService {\n     private resourceUrl = SERVER_API_URL + `api/courses`;\n+    private resourceUrlWithoutLocalSetup = SERVER_API_URL + `api`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2MzM0Mg==", "bodyText": "I created a new service and moved the functionality there", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407063342", "createdAt": "2020-04-11T13:20:56Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/course/manage/course-management.service.ts", "diffHunk": "@@ -223,6 +225,7 @@ export class CourseManagementService {\n @Injectable({ providedIn: 'root' })\n export class CourseExerciseService {\n     private resourceUrl = SERVER_API_URL + `api/courses`;\n+    private resourceUrlWithoutLocalSetup = SERVER_API_URL + `api`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTE1MQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI5MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/programming-exercise-detail.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozOToxNlrOGD5Zcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMTo1OTo1MlrOGEUy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTMxNQ==", "bodyText": "This should only be shown in the DEV mode", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406739315", "createdAt": "2020-04-10T12:39:16Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/programming-exercise-detail.component.html", "diffHunk": "@@ -120,6 +120,10 @@ <h2><span jhiTranslate=\"artemisApp.programmingExercise.detail.title\">Programming\n                 <dd>\n                     <span>{{ programmingExercise.allowOnlineEditor }}</span>\n                 </dd>\n+                <dt><span jhiTranslate=\"artemisApp.programmingExercise.noLocalSetup\">No Local Setup</span></dt>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4ODE5NQ==", "bodyText": "I deleted this part, because the value of the variable noLocalSetup isn't stored in the database and therefore will be never assigned", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407188195", "createdAt": "2020-04-12T11:59:52Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/programming-exercise-detail.component.html", "diffHunk": "@@ -120,6 +120,10 @@ <h2><span jhiTranslate=\"artemisApp.programmingExercise.detail.title\">Programming\n                 <dd>\n                     <span>{{ programmingExercise.allowOnlineEditor }}</span>\n                 </dd>\n+                <dt><span jhiTranslate=\"artemisApp.programmingExercise.noLocalSetup\">No Local Setup</span></dt>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTMxNQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI5MjUyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozOTozN1rOGD5Z6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTozNjoxM1rOGEL3LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTQzNA==", "bodyText": "again, I would separate this into a different service", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406739434", "createdAt": "2020-04-10T12:39:37Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise.service.ts", "diffHunk": "@@ -35,6 +35,17 @@ export class ProgrammingExerciseService {\n             .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n     }\n \n+    /**\n+     * Triggers the creation and setup of a new programming exercise\n+     * @param programmingExercise\n+     */\n+    automaticSetupWithoutLocalSetup(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTgzNg==", "bodyText": "I created a new service and moved the method declaration there", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407041836", "createdAt": "2020-04-11T09:36:13Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise.service.ts", "diffHunk": "@@ -35,6 +35,17 @@ export class ProgrammingExerciseService {\n             .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n     }\n \n+    /**\n+     * Triggers the creation and setup of a new programming exercise\n+     * @param programmingExercise\n+     */\n+    automaticSetupWithoutLocalSetup(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTQzNA=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI5Mzk4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0MDowOFrOGD5aww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo0ODo1NFrOGEPojQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTY1MQ==", "bodyText": "visibilityCheck is not a good method name here", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406739651", "createdAt": "2020-04-10T12:40:08Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "diffHunk": "@@ -212,6 +212,14 @@ <h4 *ngIf=\"isImport\" id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"\n                         </label>\n                     </div>\n                 </div>\n+                <div class=\"form-group-narrow\" *ngIf=\"visibilityCheck()\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMzYyOQ==", "bodyText": "i renamed the method. Now it is called isInProduction", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407103629", "createdAt": "2020-04-11T19:48:54Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "diffHunk": "@@ -212,6 +212,14 @@ <h4 *ngIf=\"isImport\" id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"\n                         </label>\n                     </div>\n                 </div>\n+                <div class=\"form-group-narrow\" *ngIf=\"visibilityCheck()\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTY1MQ=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI5NjU4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0MToxMlrOGD5cOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozMzoxNFrOGEP5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MDAyNA==", "bodyText": "please only show these buttons in the exercise details page", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r406740024", "createdAt": "2020-04-10T12:41:12Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.html", "diffHunk": "@@ -229,6 +229,12 @@\n             *ngIf=\"participationStatusWrapper() === ParticipationStatus.INACTIVE && isStartExerciseAvailable()\"\n             (click)=\"resumeProgrammingExercise()\"\n         ></button>\n+        <button class=\"dev-button\" id=\"submission\" *ngIf=\"visibilityCheck()\" (click)=\"simulateSubmission()\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk1MA==", "bodyText": "I moved the buttons, now they are only visible in the exercise detail page", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407107950", "createdAt": "2020-04-11T20:33:14Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/exercise-details-student-actions.component.html", "diffHunk": "@@ -229,6 +229,12 @@\n             *ngIf=\"participationStatusWrapper() === ParticipationStatus.INACTIVE && isStartExerciseAvailable()\"\n             (click)=\"resumeProgrammingExercise()\"\n         ></button>\n+        <button class=\"dev-button\" id=\"submission\" *ngIf=\"visibilityCheck()\" (click)=\"simulateSubmission()\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MDAyNA=="}, "originalCommit": {"oid": "690ac363a5edb4ff9265837913689d57d0a9a9d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA1MTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToxNDo0NFrOGEYwUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToxNDo0NFrOGEYwUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzA3NQ==", "bodyText": "Can you add a constant for the duplicated string value? Maybe as a static final variable in the class?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407253075", "createdAt": "2020-04-12T21:14:44Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://nolocalsetup:7990/scm/\" + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://nolocalsetup:7990/scm/\" + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://nolocalsetup:7990/scm/\" + projectKey + \"/\" + solutionRepoName + \".git\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA1MjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToxNjoyM1rOGEYw1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjo0OToxNlrOGEs20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzIwNQ==", "bodyText": "Colon : before port missing.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407253205", "createdAt": "2020-04-12T21:16:23Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MjQxNg==", "bodyText": "i added the :", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407582416", "createdAt": "2020-04-13T16:49:16Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzIwNQ=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA1Mjc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToxNjo1N1rOGEYxEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToxNjo1N1rOGEYxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzI2NA==", "bodyText": "exerciseId", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407253264", "createdAt": "2020-04-12T21:16:57Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@localhost7990/scm/\" + programmingExercise.getProjectKey() + \"/\"\n+                + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseID the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA1OTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToyNDo1OFrOGEY0EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToyNDo1OFrOGEY0EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDAzMw==", "bodyText": "It also needs to be checked that the user is not just any kind of instructor but an instructor for this specific course. This can be done via isAtLeastInstructorInCourse or isAtLeastInstructorForExercise.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407254033", "createdAt": "2020-04-12T21:24:58Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA2MTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToyODoxMFrOGEY1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToyODoxMFrOGEY1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDMxNQ==", "bodyText": "This is not actually doing anything in terms of security. You are finding the course based on the course id specified on the programming exercise from the payload. If the client actually manipulated the course id in the payload, you would end up fetching the wrong course and transferring the programming exercise into it from its original course.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407254315", "createdAt": "2020-04-12T21:28:10Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseSimulationResource.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseSimulationService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.service.feature.FeatureToggle;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingExerciseSimulationResource.Endpoints.ROOT)\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a local setup\n+ */\n+public class ProgrammingExerciseSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseResource.class);\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private static final String ENTITY_NAME = \"programmingExercise\";\n+\n+    private final CourseService courseService;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingExerciseSimulationResource(CourseService courseService, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.courseService = courseService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * POST /programming-exercises/no-local-setup: Setup a new programmingExercise\n+     * This method creates a new exercise\n+     * This exercise is only a SIMULATION for the testing of programming exercises without local setup\n+     * @param programmingExercise the input to create/setup new exercise\n+     * @return a Response Entity\n+     */\n+    @PostMapping(ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @FeatureToggle(Feature.PROGRAMMING_EXERCISES)\n+    public ResponseEntity<ProgrammingExercise> setupProgrammingExerciseWithoutLocalSetup(@RequestBody ProgrammingExercise programmingExercise) {\n+        log.debug(\"REST request to setup ProgrammingExercise : {}\", programmingExercise);\n+\n+        // fetch course from database to make sure client didn't change groups\n+        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n+\n+        // security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        programmingExercise.setCourse(course);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA5ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNToxMFrOGEZHPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNToxMFrOGEZHPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1ODk0MQ==", "bodyText": "exerciseId", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407258941", "createdAt": "2020-04-12T22:15:10Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA5OTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNTo1NFrOGEZHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNTo1NFrOGEZHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTAwMg==", "bodyText": "Check missing whether instructor is instructor for this exercise.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259002", "createdAt": "2020-04-12T22:15:54Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODA5OTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNjoyNlrOGEZHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNjoyNlrOGEZHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTA0OQ==", "bodyText": "exerciseId", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259049", "createdAt": "2020-04-12T22:16:26Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODEwMDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxNzo0MlrOGEZIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoxNjoyMVrOGE8rWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTE3Mw==", "bodyText": "Could it be that no participation exists when this endpoint is called? What happens if the user clicks on Result before clicking on Submission?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259173", "createdAt": "2020-04-12T22:17:42Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MTYyNQ==", "bodyText": "i added a check if there is no participation and now the submission button must be clicked at least once before the user can click the result button", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407841625", "createdAt": "2020-04-14T03:16:21Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTE3Mw=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODEwMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/manage/course-exercise-submission-result-simulation.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxODo0OFrOGEZIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyNDoyOVrOGE8zng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTI4NA==", "bodyText": "Template string not needed.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259284", "createdAt": "2020-04-12T22:18:48Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/course/manage/course-exercise-submission-result-simulation.service.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { Injectable } from '@angular/core';\n+import { ProgrammingSubmission } from 'app/entities/programming-submission.model';\n+import { Result } from 'app/entities/result.model';\n+import { Observable } from 'rxjs/Observable';\n+import { HttpResponse, HttpClient } from '@angular/common/http';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class CourseExerciseSubmissionResultSimulationService {\n+    private resourceUrlWithoutLocalSetup = SERVER_API_URL + `api`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0Mzc0Mg==", "bodyText": "i removed the template string", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407843742", "createdAt": "2020-04-14T03:24:29Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/course/manage/course-exercise-submission-result-simulation.service.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { Injectable } from '@angular/core';\n+import { ProgrammingSubmission } from 'app/entities/programming-submission.model';\n+import { Result } from 'app/entities/result.model';\n+import { Observable } from 'rxjs/Observable';\n+import { HttpResponse, HttpClient } from '@angular/common/http';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class CourseExerciseSubmissionResultSimulationService {\n+    private resourceUrlWithoutLocalSetup = SERVER_API_URL + `api`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTI4NA=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODEwMjExOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/manage/course-exercise-submission-result-simulation.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxOTowM1rOGEZIvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoxOTowM1rOGEZIvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTMyNQ==", "bodyText": "exerciseId", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259325", "createdAt": "2020-04-12T22:19:03Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/course/manage/course-exercise-submission-result-simulation.service.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { Injectable } from '@angular/core';\n+import { ProgrammingSubmission } from 'app/entities/programming-submission.model';\n+import { Result } from 'app/entities/result.model';\n+import { Observable } from 'rxjs/Observable';\n+import { HttpResponse, HttpClient } from '@angular/common/http';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class CourseExerciseSubmissionResultSimulationService {\n+    private resourceUrlWithoutLocalSetup = SERVER_API_URL + `api`;\n+\n+    constructor(private http: HttpClient) {}\n+\n+    simulateSubmission(exerciseID: number): Observable<HttpResponse<ProgrammingSubmission>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODEwNzcxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-overview.scss", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoyNDo1NlrOGEZLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozMDozN1rOGFGKMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTk2OA==", "bodyText": "Maybe increase the border radius a little. 1px is barely noticeable and looks almost square. Also if the buttons are placed without space between them, there should only be a border radius towards the two outer sides and not inbetween buttons (maybe you can use Bootstrap's button group since it handles that out of the box).\nGenerally it would probably be preferable to use the regular buttons (they have a nicer focus state as well for example). I think they even offer a setting to make them smaller.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407259968", "createdAt": "2020-04-12T22:24:56Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/course-overview.scss", "diffHunk": "@@ -162,3 +162,17 @@ Course Info Bar\n canvas#complete-chart {\n     z-index: 99;\n }\n+\n+.dev-button {\n+    text-align: left;\n+    color: white;\n+    background-color: #3e8acc;\n+    &:hover {\n+        background-color: #0f6ab4;\n+    }\n+    &:active {\n+        box-shadow: 0 2px 0 $artemis-dark;\n+    }\n+    border: none;\n+    border-radius: 1px;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5Njk3Nw==", "bodyText": "I will leave the buttons for now like the are currently implemented, because only the developers will see these buttons", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407996977", "createdAt": "2020-04-14T09:30:37Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/course-overview.scss", "diffHunk": "@@ -162,3 +162,17 @@ Course Info Bar\n canvas#complete-chart {\n     z-index: 99;\n }\n+\n+.dev-button {\n+    text-align: left;\n+    color: white;\n+    background-color: #3e8acc;\n+    &:hover {\n+        background-color: #0f6ab4;\n+    }\n+    &:active {\n+        box-shadow: 0 2px 0 $artemis-dark;\n+    }\n+    border: none;\n+    border-radius: 1px;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1OTk2OA=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODEwODQ1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoyNjoyNVrOGEZLoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzo0NzoyNlrOGEuzyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDA2NA==", "bodyText": "Since ids need to be globally unique in the HTML of a page, this name might be a bit risky. Same for result below.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260064", "createdAt": "2020-04-12T22:26:25Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.html", "diffHunk": "@@ -19,6 +19,12 @@\n             [showResult]=\"showResults && currentResult !== null\"\n         >\n         </jhi-exercise-details-student-actions>\n+        <button class=\"dev-button\" id=\"submission\" *ngIf=\"!isInProduction() && hasNoLocalSetup()\" (click)=\"simulateSubmission()\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxNDQxMQ==", "bodyText": "i removed the id, since i don't use it anymore", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407614411", "createdAt": "2020-04-13T17:47:26Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.html", "diffHunk": "@@ -19,6 +19,12 @@\n             [showResult]=\"showResults && currentResult !== null\"\n         >\n         </jhi-exercise-details-student-actions>\n+        <button class=\"dev-button\" id=\"submission\" *ngIf=\"!isInProduction() && hasNoLocalSetup()\" (click)=\"simulateSubmission()\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDA2NA=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODEwOTM4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoyNzo1NlrOGEZMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoyMTo0N1rOGE7xtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDE4Mw==", "bodyText": "What is this needed for? Doesn't it basically negate type checking for the whole component by accepting any kind of attribute access?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260183", "createdAt": "2020-04-12T22:27:56Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -34,6 +36,7 @@ const MAX_RESULT_HISTORY_LENGTH = 5;\n     styleUrls: ['../course-overview.scss'],\n })\n export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n+    [x: string]: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjg2OQ==", "bodyText": "i removed this unnecessary string", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407826869", "createdAt": "2020-04-14T02:21:47Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -34,6 +36,7 @@ const MAX_RESULT_HISTORY_LENGTH = 5;\n     styleUrls: ['../course-overview.scss'],\n })\n export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n+    [x: string]: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDE4Mw=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExMDI1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoyOTowMVrOGEZMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjoyOTowMVrOGEZMgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDI5MQ==", "bodyText": "No need for string comparison. Better do: this.exercise.type === ExerciseType.PROGRAMMING", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260291", "createdAt": "2020-04-12T22:29:01Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExMTMzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozMDoyNVrOGEZNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozMDoyNVrOGEZNBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDQyMg==", "bodyText": "This could be a getter if written as get isInProduction(): boolean { which means that () can be omitted when calling it (thus treating it like a computed property).", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260422", "createdAt": "2020-04-12T22:30:25Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    isInProduction(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExMTQyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozMDozNFrOGEZNEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozMDozNFrOGEZNEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDQzMw==", "bodyText": "Same here.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260433", "createdAt": "2020-04-12T22:30:34Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    hasNoLocalSetup(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExMzEzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozMjo1NVrOGEZN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoyMTowOFrOGE7xGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDY0MA==", "bodyText": "The alert service needs to be injected into the component, otherwise it will be undefined as can be seen in this console error when clicking on \"Submission\" or \"Result\":", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260640", "createdAt": "2020-04-12T22:32:55Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    hasNoLocalSetup(): boolean {\n+        return this.programmingExerciseSimulationUtils.hasNoLocalSetup(this.programmingExercise.testRepositoryUrl);\n+    }\n+\n+    /**\n+     * asks the server for the programming exercise with the provided exercise ID\n+     */\n+    getProgrammingExercise() {\n+        this.courseExerciseSubmissionResultSimulationService.getProgrammingExercise(this.exerciseId).subscribe((programmingExercise) => {\n+            this.programmingExercise = programmingExercise;\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a participation and submission for the currently logged in user\n+     */\n+    simulateSubmission() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateSubmission(this.exerciseId).subscribe(() => {\n+            this.jhiAlertService.success('artemisApp.exercise.submissionSuccessful');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjcxMg==", "bodyText": "i added the injection", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407826712", "createdAt": "2020-04-14T02:21:08Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    hasNoLocalSetup(): boolean {\n+        return this.programmingExerciseSimulationUtils.hasNoLocalSetup(this.programmingExercise.testRepositoryUrl);\n+    }\n+\n+    /**\n+     * asks the server for the programming exercise with the provided exercise ID\n+     */\n+    getProgrammingExercise() {\n+        this.courseExerciseSubmissionResultSimulationService.getProgrammingExercise(this.exerciseId).subscribe((programmingExercise) => {\n+            this.programmingExercise = programmingExercise;\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a participation and submission for the currently logged in user\n+     */\n+    simulateSubmission() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateSubmission(this.exerciseId).subscribe(() => {\n+            this.jhiAlertService.success('artemisApp.exercise.submissionSuccessful');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDY0MA=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExMzU5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozMzo0MVrOGEZOHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoyMToyNFrOGE7xUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDcwMA==", "bodyText": "Only the sucess case is being handled. What happens if the observable emits an error?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260700", "createdAt": "2020-04-12T22:33:41Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    hasNoLocalSetup(): boolean {\n+        return this.programmingExerciseSimulationUtils.hasNoLocalSetup(this.programmingExercise.testRepositoryUrl);\n+    }\n+\n+    /**\n+     * asks the server for the programming exercise with the provided exercise ID\n+     */\n+    getProgrammingExercise() {\n+        this.courseExerciseSubmissionResultSimulationService.getProgrammingExercise(this.exerciseId).subscribe((programmingExercise) => {\n+            this.programmingExercise = programmingExercise;\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a participation and submission for the currently logged in user\n+     */\n+    simulateSubmission() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateSubmission(this.exerciseId).subscribe(() => {\n+            this.jhiAlertService.success('artemisApp.exercise.submissionSuccessful');\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a result for the currently logged in user\n+     */\n+    simulateResult() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateResult(this.exerciseId).subscribe(() => {\n+            this.jhiAlertService.success('artemisApp.exercise.resultCreationSuccessful');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjc2OQ==", "bodyText": "i added the error case", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407826769", "createdAt": "2020-04-14T02:21:24Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,53 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type.toString() === 'programming') {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    hasNoLocalSetup(): boolean {\n+        return this.programmingExerciseSimulationUtils.hasNoLocalSetup(this.programmingExercise.testRepositoryUrl);\n+    }\n+\n+    /**\n+     * asks the server for the programming exercise with the provided exercise ID\n+     */\n+    getProgrammingExercise() {\n+        this.courseExerciseSubmissionResultSimulationService.getProgrammingExercise(this.exerciseId).subscribe((programmingExercise) => {\n+            this.programmingExercise = programmingExercise;\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a participation and submission for the currently logged in user\n+     */\n+    simulateSubmission() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateSubmission(this.exerciseId).subscribe(() => {\n+            this.jhiAlertService.success('artemisApp.exercise.submissionSuccessful');\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a result for the currently logged in user\n+     */\n+    simulateResult() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateResult(this.exerciseId).subscribe(() => {\n+            this.jhiAlertService.success('artemisApp.exercise.resultCreationSuccessful');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDcwMA=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExNTAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozNToxOVrOGEZOwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozNToxOVrOGEZOwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDg2Ng==", "bodyText": "Should this be removed if it is commented out?", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407260866", "createdAt": "2020-04-12T22:35:19Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -217,6 +218,21 @@ public void setupProgrammingExercise_validExercise_created(ExerciseMode mode) th\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(ExerciseMode.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n+        exercise.setMode(mode);\n+        // mockConnectorRequestsForSetup(exercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExNjA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjozNzoxMFrOGEZPSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjozMToyMFrOGE773w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTAwMw==", "bodyText": "Together with the previous line, this is trivially true. You are setting the id of exercise to the id of generatedExercise and then you are checking if the ids are equal (isEqualTo used the equals method of Exercise which does nothing more then comparing the ids).", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261003", "createdAt": "2020-04-12T22:37:10Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -217,6 +218,21 @@ public void setupProgrammingExercise_validExercise_created(ExerciseMode mode) th\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(ExerciseMode.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n+        exercise.setMode(mode);\n+        // mockConnectorRequestsForSetup(exercise);\n+        final var generatedExercise = request.postWithResponseBody(\n+                ProgrammingExerciseSimulationResource.Endpoints.ROOT + ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION, exercise, ProgrammingExercise.class,\n+                HttpStatus.CREATED);\n+\n+        exercise.setId(generatedExercise.getId());\n+        assertThat(exercise).isEqualTo(generatedExercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyOTQ3MQ==", "bodyText": "i adjusted the test case", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407829471", "createdAt": "2020-04-14T02:31:20Z", "author": {"login": "F4lka"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -217,6 +218,21 @@ public void setupProgrammingExercise_validExercise_created(ExerciseMode mode) th\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(ExerciseMode.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void setupProgrammingExerciseWithoutLocalSetup_validExercise_created(ExerciseMode mode) throws Exception {\n+        exercise.setMode(mode);\n+        // mockConnectorRequestsForSetup(exercise);\n+        final var generatedExercise = request.postWithResponseBody(\n+                ProgrammingExerciseSimulationResource.Endpoints.ROOT + ProgrammingExerciseSimulationResource.Endpoints.EXERCISES_SIMULATION, exercise, ProgrammingExercise.class,\n+                HttpStatus.CREATED);\n+\n+        exercise.setId(generatedExercise.getId());\n+        assertThat(exercise).isEqualTo(generatedExercise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTAwMw=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExOTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjo0MTo1MFrOGEZQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo0NzoyNFrOGE9J4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTM4OA==", "bodyText": "Should return 201 Created instead of 200 OK.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261388", "createdAt": "2020-04-12T22:41:50Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTQ0Mw==", "bodyText": "i changed it to 201", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849443", "createdAt": "2020-04-14T03:47:24Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTM4OA=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExOTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjo0MTo1OFrOGEZQ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo0NzoyOVrOGE9KBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQwOQ==", "bodyText": "Should return 201 Created instead of 200 OK.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261409", "createdAt": "2020-04-12T22:41:58Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        return ResponseEntity.ok().body(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTQ3Nw==", "bodyText": "i changed it to 201", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849477", "createdAt": "2020-04-14T03:47:29Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without local setup\n+     *\n+     * @param exerciseID the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(value = \"submissions/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseID) {\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseID);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        return ResponseEntity.ok().body(programmingSubmission);\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without local setup\n+     *\n+     * @param exerciseID id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(value = \"results/no-local-setup/{exerciseID}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseID) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseID);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        return ResponseEntity.ok().body(result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQwOQ=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExOTg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjo0MjoyOFrOGEZRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo0Nzo1NVrOGE9Kbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ0OQ==", "bodyText": "Should return 201 Created instead of 200 OK.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261449", "createdAt": "2020-04-12T22:42:28Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -462,6 +464,42 @@ void shouldCreateSubmissionsForAllParticipationsOfExerciseAfterTestRepositoryCom\n         }\n     }\n \n+    /**\n+     * This tests if the submission is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n+        assertThat(submissionRepository.findAll()).hasSize(0);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTU4Mg==", "bodyText": "i changed it to 201", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849582", "createdAt": "2020-04-14T03:47:55Z", "author": {"login": "F4lka"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -462,6 +464,42 @@ void shouldCreateSubmissionsForAllParticipationsOfExerciseAfterTestRepositoryCom\n         }\n     }\n \n+    /**\n+     * This tests if the submission is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n+        assertThat(submissionRepository.findAll()).hasSize(0);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ0OQ=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODExOTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMjo0MjozNlrOGEZREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo0ODoxN1rOGE9Kvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ1Nw==", "bodyText": "Should return 201 Created instead of 200 OK.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407261457", "createdAt": "2020-04-12T22:42:36Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -462,6 +464,42 @@ void shouldCreateSubmissionsForAllParticipationsOfExerciseAfterTestRepositoryCom\n         }\n     }\n \n+    /**\n+     * This tests if the submission is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n+        assertThat(submissionRepository.findAll()).hasSize(0);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        assertThat(submissionRepository.findAll()).hasSize(1);\n+        ProgrammingSubmission submission = submissionRepository.findAll().get(0);\n+        assertThat(returnedSubmission).isEqualTo(submission);\n+        assertThat(participationRepository.findById(submission.getParticipation().getId()));\n+        assertThat(participationIds.contains(submission.getParticipation().getId()));\n+        assertThat(submission.getType()).isEqualTo(SubmissionType.MANUAL);\n+        assertThat(submission.isSubmitted()).isTrue();\n+    }\n+\n+    /**\n+     * This tests if the result is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateResultWithoutLocalSetup() throws Exception {\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        assertThat(resultRepository.findAll()).hasSize(0);\n+        Result returnedResult = request.postWithResponseBody(\"/api\" + RESULTS_SIMULATION + \"/\" + exerciseId, null, Result.class, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTY2Mw==", "bodyText": "i changed it to 201", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r407849663", "createdAt": "2020-04-14T03:48:17Z", "author": {"login": "F4lka"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingSubmissionAndResultIntegrationTest.java", "diffHunk": "@@ -462,6 +464,42 @@ void shouldCreateSubmissionsForAllParticipationsOfExerciseAfterTestRepositoryCom\n         }\n     }\n \n+    /**\n+     * This tests if the submission is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateSubmissionWithoutLocalSetup() throws Exception {\n+        assertThat(submissionRepository.findAll()).hasSize(0);\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        assertThat(submissionRepository.findAll()).hasSize(1);\n+        ProgrammingSubmission submission = submissionRepository.findAll().get(0);\n+        assertThat(returnedSubmission).isEqualTo(submission);\n+        assertThat(participationRepository.findById(submission.getParticipation().getId()));\n+        assertThat(participationIds.contains(submission.getParticipation().getId()));\n+        assertThat(submission.getType()).isEqualTo(SubmissionType.MANUAL);\n+        assertThat(submission.isSubmitted()).isTrue();\n+    }\n+\n+    /**\n+     * This tests if the result is created for programming exercises without local setup\n+     */\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void shouldCreateResultWithoutLocalSetup() throws Exception {\n+        final var returnedSubmission = request.postWithResponseBody(\"/api\" + SUBMISSIONS_SIMULATION + \"/\" + exerciseId, null, ProgrammingSubmission.class, HttpStatus.OK);\n+        assertThat(resultRepository.findAll()).hasSize(0);\n+        Result returnedResult = request.postWithResponseBody(\"/api\" + RESULTS_SIMULATION + \"/\" + exerciseId, null, Result.class, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTQ1Nw=="}, "originalCommit": {"oid": "bd386cf6e06e0811899bf5b02af9fbe293ceb66d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgwNTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyMjozMlrOGFOXQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowNzoyNlrOGF7cxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTM5NA==", "bodyText": "I would prefer something like https://artemislocal.ase.in.tum.de", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408131394", "createdAt": "2020-04-14T13:22:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTg4MA==", "bodyText": "or something like artemislocalhost:7990/scm/", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408131880", "createdAt": "2020-04-14T13:23:11Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTM5NA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDA4Ng==", "bodyText": "i changed the URL. The new URL is artemislocalhost:7990/scm/", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408870086", "createdAt": "2020-04-15T14:07:26Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTM5NA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgxNTk3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/programming-exercise.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDo0MlrOGFOdjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMToyNTowOFrOGF1UTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzAwNg==", "bodyText": "please rename, move into section helper attributes and add a js doc comment what this is about", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408133006", "createdAt": "2020-04-14T13:24:42Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/programming-exercise.model.ts", "diffHunk": "@@ -17,6 +17,7 @@ export class ProgrammingExercise extends Exercise {\n     public testRepositoryUrl: string;\n     public publishBuildPlanUrl = false; // default value\n     public allowOnlineEditor = false; // default value\n+    public noLocalSetup = false; // default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2OTYxMw==", "bodyText": "I renamed and commented the checkbox name. I also adjusted the translation of the checkbox", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408769613", "createdAt": "2020-04-15T11:25:08Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/entities/programming-exercise.model.ts", "diffHunk": "@@ -17,6 +17,7 @@ export class ProgrammingExercise extends Exercise {\n     public testRepositoryUrl: string;\n     public publishBuildPlanUrl = false; // default value\n     public allowOnlineEditor = false; // default value\n+    public noLocalSetup = false; // default value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzAwNg=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgyMDA3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNTozNlrOGFOgEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NzozOVrOGF2WRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzY1MQ==", "bodyText": "clearly document that this is only intended for local testing and should never be used in the production environment", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408133651", "createdAt": "2020-04-14T13:25:36Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "diffHunk": "@@ -0,0 +1,25 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { EntityResponseType, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { HttpClient } from '@angular/common/http';\n+import { map } from 'rxjs/operators';\n+import { Observable } from 'rxjs/Observable';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NjUwMg==", "bodyText": "added comments to highlight that this particular functionality is only for testing purposes", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408786502", "createdAt": "2020-04-15T11:57:39Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "diffHunk": "@@ -0,0 +1,25 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { EntityResponseType, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { HttpClient } from '@angular/common/http';\n+import { map } from 'rxjs/operators';\n+import { Observable } from 'rxjs/Observable';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzY1MQ=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgyMTU0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNTo1OVrOGFOhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyMjozMVrOGGGD0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzg5Mw==", "bodyText": "maybe we should integrate some kind of guard here that fails automatically during production", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408133893", "createdAt": "2020-04-14T13:25:59Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "diffHunk": "@@ -0,0 +1,25 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { EntityResponseType, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { HttpClient } from '@angular/common/http';\n+import { map } from 'rxjs/operators';\n+import { Observable } from 'rxjs/Observable';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationService {\n+    public resourceUrl = SERVER_API_URL + 'api/programming-exercises';\n+\n+    constructor(private http: HttpClient, private programmingExerciseService: ProgrammingExerciseService) {}\n+\n+    /**\n+     * Triggers the creation and setup of a new programming exercise\n+     * @param programmingExercise\n+     */\n+    automaticSetupWithoutLocalSetup(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0MzkyMg==", "bodyText": "I added guards for the methods, which should be not used in production", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409043922", "createdAt": "2020-04-15T18:22:31Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "diffHunk": "@@ -0,0 +1,25 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { EntityResponseType, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { HttpClient } from '@angular/common/http';\n+import { map } from 'rxjs/operators';\n+import { Observable } from 'rxjs/Observable';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationService {\n+    public resourceUrl = SERVER_API_URL + 'api/programming-exercises';\n+\n+    constructor(private http: HttpClient, private programmingExerciseService: ProgrammingExerciseService) {}\n+\n+    /**\n+     * Triggers the creation and setup of a new programming exercise\n+     * @param programmingExercise\n+     */\n+    automaticSetupWithoutLocalSetup(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzg5Mw=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgyNjMzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNzowNlrOGFOj7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDowMjo0NlrOGFyrKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNDYzNw==", "bodyText": "please add a HTML comment", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408134637", "createdAt": "2020-04-14T13:27:06Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "diffHunk": "@@ -212,6 +212,14 @@ <h4 *ngIf=\"isImport\" id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"\n                         </label>\n                     </div>\n                 </div>\n+                <div class=\"form-group-narrow\" *ngIf=\"!isInProduction()\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyNjMxNA==", "bodyText": "i added comments to all modified HTML files", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408726314", "createdAt": "2020-04-15T10:02:46Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "diffHunk": "@@ -212,6 +212,14 @@ <h4 *ngIf=\"isImport\" id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"\n                         </label>\n                     </div>\n                 </div>\n+                <div class=\"form-group-narrow\" *ngIf=\"!isInProduction()\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNDYzNw=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgyOTcwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNzo0OFrOGFOl-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NTowNFrOGF2RBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNTE2MA==", "bodyText": "I don't like the term \"no local setup\"!!!\na better term would be \"No version control and continuous integration server available\"", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408135160", "createdAt": "2020-04-14T13:27:48Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "diffHunk": "@@ -212,6 +212,14 @@ <h4 *ngIf=\"isImport\" id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"\n                         </label>\n                     </div>\n                 </div>\n+                <div class=\"form-group-narrow\" *ngIf=\"!isInProduction()\">\n+                    <div class=\"form-check\">\n+                        <label class=\"form-check-label\" for=\"field_noLocalSetup\">\n+                            <input class=\"form-check-input\" type=\"checkbox\" name=\"noLocalSetup\" id=\"field_noLocalSetup\" [(ngModel)]=\"programmingExercise.noLocalSetup\" checked />\n+                            <span jhiTranslate=\"artemisApp.programmingExercise.noLocalSetup\">No Local Setup</span>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NTE1OA==", "bodyText": "i changed the name", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408785158", "createdAt": "2020-04-15T11:55:04Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.html", "diffHunk": "@@ -212,6 +212,14 @@ <h4 *ngIf=\"isImport\" id=\"jhi-programming-exercise-heading-import\" jhiTranslate=\"\n                         </label>\n                     </div>\n                 </div>\n+                <div class=\"form-group-narrow\" *ngIf=\"!isInProduction()\">\n+                    <div class=\"form-check\">\n+                        <label class=\"form-check-label\" for=\"field_noLocalSetup\">\n+                            <input class=\"form-check-input\" type=\"checkbox\" name=\"noLocalSetup\" id=\"field_noLocalSetup\" [(ngModel)]=\"programmingExercise.noLocalSetup\" checked />\n+                            <span jhiTranslate=\"artemisApp.programmingExercise.noLocalSetup\">No Local Setup</span>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNTE2MA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgzNDcxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyODo0NFrOGFOo9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMToxMDoxM1rOGF02mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNTkyNw==", "bodyText": "it would be better to store a boolean \"inProductionEnvironment\"", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408135927", "createdAt": "2020-04-14T13:28:44Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "diffHunk": "@@ -51,6 +54,7 @@ export class ProgrammingExerciseUpdateComponent implements OnInit {\n     titleNamePattern = '^[a-zA-Z0-9-_ ]+'; // must only contain alphanumeric characters, or whitespaces, or '_' or '-'\n     exerciseCategories: ExerciseCategory[];\n     existingCategories: ExerciseCategory[];\n+    profileInfo: ProfileInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MjAxMQ==", "bodyText": "added and use variables in HTML instead of method calls", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408762011", "createdAt": "2020-04-15T11:10:13Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "diffHunk": "@@ -51,6 +54,7 @@ export class ProgrammingExerciseUpdateComponent implements OnInit {\n     titleNamePattern = '^[a-zA-Z0-9-_ ]+'; // must only contain alphanumeric characters, or whitespaces, or '_' or '-'\n     exerciseCategories: ExerciseCategory[];\n     existingCategories: ExerciseCategory[];\n+    profileInfo: ProfileInfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNTkyNw=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzg0ODE4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise-simulation-utils.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzozMTo1NVrOGFOxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowNjoyMFrOGF7Ztw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODEwMA==", "bodyText": "I don't like the term \"nolocalsetup\"", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408138100", "createdAt": "2020-04-14T13:31:55Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise-simulation-utils.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+import { Injectable } from '@angular/core';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationUtils {\n+    /**\n+     * Checks if the url includes the string \"nolocalsetup', which is an indication\n+     * that the particular programming exercise has no local setup\n+     * @param urlToCheck the url which will be check if it contains the substring\n+     */\n+    hasNoLocalSetup(urlToCheck: string): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2OTMwMw==", "bodyText": "i renamed the method. The new name is noVersionControlAndContinuousIntegrationAvailableCheck", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408869303", "createdAt": "2020-04-15T14:06:20Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise-simulation-utils.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+import { Injectable } from '@angular/core';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationUtils {\n+    /**\n+     * Checks if the url includes the string \"nolocalsetup', which is an indication\n+     * that the particular programming exercise has no local setup\n+     * @param urlToCheck the url which will be check if it contains the substring\n+     */\n+    hasNoLocalSetup(urlToCheck: string): boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODEwMA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzg1MDMyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise-simulation-utils.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzozMjoyNVrOGFOywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NDozOFrOGF2QEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * that the particular programming exercise has no local setup\n          \n          \n            \n                 * that the particular programming exercise is not connected to a version control and continuous integration server", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408138433", "createdAt": "2020-04-14T13:32:25Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise-simulation-utils.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+import { Injectable } from '@angular/core';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationUtils {\n+    /**\n+     * Checks if the url includes the string \"nolocalsetup', which is an indication\n+     * that the particular programming exercise has no local setup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NDkxNQ==", "bodyText": "i adjusted the comment", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408784915", "createdAt": "2020-04-15T11:54:38Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/shared/utils/programming-exercise-simulation-utils.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+import { Injectable } from '@angular/core';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationUtils {\n+    /**\n+     * Checks if the url includes the string \"nolocalsetup', which is an indication\n+     * that the particular programming exercise has no local setup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODQzMw=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzg3NjUxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzozODoyM1rOGFPDEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyMjo0MVrOGGGEQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0MjYxMA==", "bodyText": "add guard for production misuse\nif (isInProduction) {\nconsole.log(\"error\");\nthis.jhiAlertService.error('This action is NOT supported on production and should NOT be visible. Please contact a developer immediately!')\n}", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408142610", "createdAt": "2020-04-14T13:38:23Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,64 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type === ExerciseType.PROGRAMMING) {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    get isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    get hasNoLocalSetup(): boolean {\n+        return this.programmingExerciseSimulationUtils.hasNoLocalSetup(this.programmingExercise.testRepositoryUrl);\n+    }\n+\n+    /**\n+     * asks the server for the programming exercise with the provided exercise ID\n+     */\n+    getProgrammingExercise() {\n+        this.courseExerciseSubmissionResultSimulationService.getProgrammingExercise(this.exerciseId).subscribe((programmingExercise) => {\n+            this.programmingExercise = programmingExercise;\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a participation and submission for the currently logged in user\n+     */\n+    simulateSubmission() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateSubmission(this.exerciseId).subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NDAzMw==", "bodyText": "I added guards for the methods, which should be not used in production", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409044033", "createdAt": "2020-04-15T18:22:41Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,64 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type === ExerciseType.PROGRAMMING) {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**\n+     * The button should be only visible in the dev environment\n+     */\n+    get isInProduction(): boolean {\n+        return this.profileService.isInProduction();\n+    }\n+\n+    /**\n+     * checks if exercise has no local setup\n+     */\n+    get hasNoLocalSetup(): boolean {\n+        return this.programmingExerciseSimulationUtils.hasNoLocalSetup(this.programmingExercise.testRepositoryUrl);\n+    }\n+\n+    /**\n+     * asks the server for the programming exercise with the provided exercise ID\n+     */\n+    getProgrammingExercise() {\n+        this.courseExerciseSubmissionResultSimulationService.getProgrammingExercise(this.exerciseId).subscribe((programmingExercise) => {\n+            this.programmingExercise = programmingExercise;\n+        });\n+    }\n+\n+    /**\n+     * triggers the simulation of a participation and submission for the currently logged in user\n+     */\n+    simulateSubmission() {\n+        this.courseExerciseSubmissionResultSimulationService.simulateSubmission(this.exerciseId).subscribe(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0MjYxMA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzg4ODE2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0MDo1M1rOGFPJ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NDoxN1rOGF2PXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NDM4MA==", "bodyText": "if you cannot prevent to add code into \"production\" files, then please move them into a common section in the source code and mark it with something like\n// ################## ONLY FOR LOCAL TESTING PURPOSE -- START ##################\nhere comes the code\n// ################## ONLY FOR LOCAL TESTING PURPOSE -- END ##################", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408144380", "createdAt": "2020-04-14T13:40:53Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,64 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type === ExerciseType.PROGRAMMING) {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NDczNQ==", "bodyText": "i added these kind of comments", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408784735", "createdAt": "2020-04-15T11:54:17Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -118,9 +124,64 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n         this.exercise.participationStatus = participationStatus(this.exercise);\n         this.isAfterAssessmentDueDate = !this.exercise.assessmentDueDate || moment().isAfter(this.exercise.assessmentDueDate);\n         this.exerciseCategories = this.exerciseService.convertExerciseCategoriesFromServer(this.exercise);\n+        if (this.exercise.type === ExerciseType.PROGRAMMING) {\n+            this.getProgrammingExercise();\n+        }\n         this.subscribeForNewResults();\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NDM4MA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzg5NDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0MjoyN1rOGFPOWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyNjo1MVrOGGGNuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTQ5Ng==", "bodyText": "please rename to templateResult", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408145496", "createdAt": "2020-04-14T13:42:27Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://\" + domain + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://\" + domain + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://\" + domain + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = VCSSimulationUtils.simulateCommitHash();\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjQ1OQ==", "bodyText": "i renamed the variable", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409046459", "createdAt": "2020-04-15T18:26:51Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://\" + domain + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://\" + domain + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://\" + domain + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = VCSSimulationUtils.simulateCommitHash();\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTQ5Ng=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzg5NTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0MjozNlrOGFPOvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoyNjo1N1rOGGGN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTU5OA==", "bodyText": "solutionResult", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408145598", "createdAt": "2020-04-14T13:42:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://\" + domain + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://\" + domain + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://\" + domain + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = VCSSimulationUtils.simulateCommitHash();\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"0 of 13 passed\");\n+        resultBase.setAssessmentType(AssessmentType.AUTOMATIC);\n+        resultBase.score(0L);\n+        resultBase.setCompletionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        resultRepository.save(resultBase);\n+\n+        ProgrammingSubmission programmingSubmissionSolution = new ProgrammingSubmission();\n+        String commitHashSolution = VCSSimulationUtils.simulateCommitHash();\n+        programmingSubmissionSolution.setParticipation(solutionProgrammingExerciseParticipation.get());\n+        programmingSubmissionSolution.setSubmitted(true);\n+        programmingSubmissionSolution.setType(SubmissionType.OTHER);\n+        programmingSubmissionSolution.setCommitHash(commitHashSolution);\n+        programmingSubmissionSolution.setSubmissionDate(solutionProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionSolution);\n+        Result resultSolution = new Result();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjUwOA==", "bodyText": "i renamed the variable", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409046508", "createdAt": "2020-04-15T18:26:57Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseSimulationService.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.SOLUTION;\n+import static de.tum.in.www1.artemis.domain.enumeration.BuildPlanType.TEMPLATE;\n+\n+import java.util.Optional;\n+\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.SolutionProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.domain.participation.TemplateProgrammingExerciseParticipation;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingExerciseSimulationService {\n+\n+    private final ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private final ProgrammingExerciseScheduleService programmingExerciseScheduleService;\n+\n+    private final GroupNotificationService groupNotificationService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository;\n+\n+    private final SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public final String domain = \"nolocalsetup:7990/scm/\";\n+\n+    public ProgrammingExerciseSimulationService(ProgrammingExerciseRepository programmingExerciseRepository, ProgrammingExerciseScheduleService programmingExerciseScheduleService,\n+            GroupNotificationService groupNotificationService, ProgrammingExerciseService programmingExerciseService,\n+            TemplateProgrammingExerciseParticipationRepository templateProgrammingExerciseParticipationRepository,\n+            SolutionProgrammingExerciseParticipationRepository solutionProgrammingExerciseParticipationRepository, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository) {\n+        this.programmingExerciseRepository = programmingExerciseRepository;\n+        this.programmingExerciseScheduleService = programmingExerciseScheduleService;\n+        this.groupNotificationService = groupNotificationService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.templateProgrammingExerciseParticipationRepository = templateProgrammingExerciseParticipationRepository;\n+        this.solutionProgrammingExerciseParticipationRepository = solutionProgrammingExerciseParticipationRepository;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Setups the context of a new programming exercise.\n+     * @param programmingExercise the exercise which should be stored in the database\n+     * @return returns the modified and stored programming exercise\n+     */\n+    @Transactional\n+    public ProgrammingExercise setupProgrammingExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise) {\n+        programmingExercise.generateAndSetProjectKey();\n+        final var projectKey = programmingExercise.getProjectKey();\n+        // TODO: the following code is used quite often and should be done in only one place\n+        final var exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        final var testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        final var solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        programmingExerciseService.initParticipations(programmingExercise);\n+        setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(programmingExercise, exerciseRepoName, testRepoName, solutionRepoName);\n+        // Save participations to get the ids required for the webhooks\n+        programmingExerciseService.connectBaseParticipationsToExerciseAndSave(programmingExercise);\n+\n+        // save to get the id required for the webhook\n+        programmingExercise = programmingExerciseRepository.save(programmingExercise);\n+\n+        // The creation of the webhooks must occur after the initial push, because the participation is\n+        // not yet saved in the database, so we cannot save the submission accordingly (see ProgrammingSubmissionService.notifyPush)\n+        programmingExerciseScheduleService.scheduleExerciseIfRequired(programmingExercise);\n+        groupNotificationService.notifyTutorGroupAboutExerciseCreated(programmingExercise);\n+\n+        return programmingExercise;\n+    }\n+\n+    /**\n+     * Sets the url and buildplan ids for the new exercise\n+     * @param programmingExercise the new exercise\n+     * @param exerciseRepoName the repo name of the new exercise\n+     * @param testRepoName the test repo name of the new exercise\n+     * @param solutionRepoName the solution repo name of the new exercise\n+     */\n+    private void setURLsAndBuildPlanIDsForNewExerciseWithoutLocalSetup(ProgrammingExercise programmingExercise, String exerciseRepoName, String testRepoName,\n+            String solutionRepoName) {\n+        final var projectKey = programmingExercise.getProjectKey();\n+        final var templateParticipation = programmingExercise.getTemplateParticipation();\n+        final var solutionParticipation = programmingExercise.getSolutionParticipation();\n+        final var templatePlanName = TEMPLATE.getName();\n+        final var solutionPlanName = SOLUTION.getName();\n+        final var exerciseRepoUrl = \"http://\" + domain + projectKey + \"/\" + exerciseRepoName + \".git\";\n+        final var testsRepoUrl = \"http://\" + domain + projectKey + \"/\" + testRepoName + \".git\";\n+        final var solutionRepoUrl = \"http://\" + domain + projectKey + \"/\" + solutionRepoName + \".git\";\n+        templateParticipation.setBuildPlanId(projectKey + \"-\" + templatePlanName);\n+        templateParticipation.setRepositoryUrl(exerciseRepoUrl);\n+        solutionParticipation.setBuildPlanId(projectKey + \"-\" + solutionPlanName);\n+        solutionParticipation.setRepositoryUrl(solutionRepoUrl);\n+        programmingExercise.setTestRepositoryUrl(testsRepoUrl);\n+    }\n+\n+    /**\n+     * This method creates the template and solution submissions and results for the new exercise\n+     * These submissions and results are SIMULATIONS for the testing of programming exercises without local setup\n+     * @param programmingExercise the new exercise\n+     */\n+    public void setupInitialSubmissionsAndResults(ProgrammingExercise programmingExercise) {\n+        Optional<TemplateProgrammingExerciseParticipation> templateProgrammingExerciseParticipation = this.templateProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        Optional<SolutionProgrammingExerciseParticipation> solutionProgrammingExerciseParticipation = this.solutionProgrammingExerciseParticipationRepository\n+                .findByProgrammingExerciseId(programmingExercise.getId());\n+        String commitHashBase = VCSSimulationUtils.simulateCommitHash();\n+        ProgrammingSubmission programmingSubmissionBase = new ProgrammingSubmission();\n+        programmingSubmissionBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        programmingSubmissionBase.setSubmitted(true);\n+        programmingSubmissionBase.setType(SubmissionType.OTHER);\n+        programmingSubmissionBase.setCommitHash(commitHashBase);\n+        programmingSubmissionBase.setSubmissionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionBase);\n+        Result resultBase = new Result();\n+        resultBase.setParticipation(templateProgrammingExerciseParticipation.get());\n+        resultBase.setSubmission(programmingSubmissionBase);\n+        resultBase.setRated(true);\n+        resultBase.resultString(\"0 of 13 passed\");\n+        resultBase.setAssessmentType(AssessmentType.AUTOMATIC);\n+        resultBase.score(0L);\n+        resultBase.setCompletionDate(templateProgrammingExerciseParticipation.get().getInitializationDate());\n+        resultRepository.save(resultBase);\n+\n+        ProgrammingSubmission programmingSubmissionSolution = new ProgrammingSubmission();\n+        String commitHashSolution = VCSSimulationUtils.simulateCommitHash();\n+        programmingSubmissionSolution.setParticipation(solutionProgrammingExerciseParticipation.get());\n+        programmingSubmissionSolution.setSubmitted(true);\n+        programmingSubmissionSolution.setType(SubmissionType.OTHER);\n+        programmingSubmissionSolution.setCommitHash(commitHashSolution);\n+        programmingSubmissionSolution.setSubmissionDate(solutionProgrammingExerciseParticipation.get().getInitializationDate());\n+        programmingSubmissionRepository.save(programmingSubmissionSolution);\n+        Result resultSolution = new Result();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NTU5OA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzkwMDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0Mzo0MlrOGFPR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyNzoxOVrOGGoCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NjQwMA==", "bodyText": "the feedback objects are missing with the corresponding test case name and the error message, look at one real example", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r408146400", "createdAt": "2020-04-14T13:43:42Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin().toUpperCase());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@\" + programmingExerciseSimulationService.domain\n+                + programmingExercise.getProjectKey() + \"/\" + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseId the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndStudentLoginWithEagerSubmissionsAnyState(programmingExercise,\n+                user.getLogin());\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        programmingSubmission.setCommitHash(VCSSimulationUtils.simulateCommitHash());\n+        programmingSubmission.setSubmitted(true);\n+        programmingSubmission.setSubmissionDate(ZonedDateTime.now());\n+        programmingSubmission.setType(SubmissionType.MANUAL);\n+        programmingExerciseStudentParticipation.addSubmissions(programmingSubmission);\n+\n+        programmingSubmissionRepository.save(programmingSubmission);\n+        return programmingSubmission;\n+    }\n+\n+    /**\n+     *  This method creates a new result for the provided participation\n+     * @param programmingExerciseStudentParticipation the participation for which the new result should be created\n+     * @return the newly created and stored result\n+     */\n+    public Result createResult(ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation) {\n+        Optional<ProgrammingSubmission> programmingSubmission = programmingSubmissionRepository\n+                .findFirstByParticipationIdOrderBySubmissionDateDesc(programmingExerciseStudentParticipation.getId());\n+        Result result = new Result();\n+        result.setSubmission(programmingSubmission.get());\n+        result.setParticipation(programmingExerciseStudentParticipation);\n+        result.setRated(true);\n+        result.resultString(\"7 of 13 passed\");\n+        result.score(54L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMDcxNg==", "bodyText": "i added the feedback objects", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r409600716", "createdAt": "2020-04-16T14:27:19Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingSubmission;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin().toUpperCase());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@\" + programmingExerciseSimulationService.domain\n+                + programmingExercise.getProjectKey() + \"/\" + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseId the exerciseId of the exercise for which a submission should be created\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndStudentLoginWithEagerSubmissionsAnyState(programmingExercise,\n+                user.getLogin());\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        programmingSubmission.setCommitHash(VCSSimulationUtils.simulateCommitHash());\n+        programmingSubmission.setSubmitted(true);\n+        programmingSubmission.setSubmissionDate(ZonedDateTime.now());\n+        programmingSubmission.setType(SubmissionType.MANUAL);\n+        programmingExerciseStudentParticipation.addSubmissions(programmingSubmission);\n+\n+        programmingSubmissionRepository.save(programmingSubmission);\n+        return programmingSubmission;\n+    }\n+\n+    /**\n+     *  This method creates a new result for the provided participation\n+     * @param programmingExerciseStudentParticipation the participation for which the new result should be created\n+     * @return the newly created and stored result\n+     */\n+    public Result createResult(ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation) {\n+        Optional<ProgrammingSubmission> programmingSubmission = programmingSubmissionRepository\n+                .findFirstByParticipationIdOrderBySubmissionDateDesc(programmingExerciseStudentParticipation.getId());\n+        Result result = new Result();\n+        result.setSubmission(programmingSubmission.get());\n+        result.setParticipation(programmingExerciseStudentParticipation);\n+        result.setRated(true);\n+        result.resultString(\"7 of 13 passed\");\n+        result.score(54L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NjQwMA=="}, "originalCommit": {"oid": "a88bf7c6f44eed539d36e588409504e6af005481"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTkyNzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxOTo0NVrOGIW6Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo0MTo0NlrOGIa5-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzEyNg==", "bodyText": "please add something like \"currently only the Java standard template is supported\"", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411417126", "createdAt": "2020-04-20T14:19:45Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.FeedbackType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin().toUpperCase());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@\" + programmingExerciseSimulationService.domain\n+                + programmingExercise.getProjectKey() + \"/\" + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseId the exerciseId of the exercise for which a submission should be created\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndStudentLoginWithEagerSubmissionsAnyState(programmingExercise,\n+                user.getLogin());\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        programmingSubmission.setCommitHash(VCSSimulationUtils.simulateCommitHash());\n+        programmingSubmission.setSubmitted(true);\n+        programmingSubmission.setSubmissionDate(ZonedDateTime.now());\n+        programmingSubmission.setType(SubmissionType.MANUAL);\n+        programmingExerciseStudentParticipation.addSubmissions(programmingSubmission);\n+\n+        programmingSubmissionRepository.save(programmingSubmission);\n+        return programmingSubmission;\n+    }\n+\n+    /**\n+     *  This method creates a new result for the provided participation\n+     *  This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExerciseStudentParticipation the participation for which the new result should be created\n+     * @return the newly created and stored result\n+     */\n+    public Result createResult(ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation) {\n+        Optional<ProgrammingSubmission> programmingSubmission = programmingSubmissionRepository\n+                .findFirstByParticipationIdOrderBySubmissionDateDesc(programmingExerciseStudentParticipation.getId());\n+        Result result = new Result();\n+        result.setSubmission(programmingSubmission.get());\n+        result.setParticipation(programmingExerciseStudentParticipation);\n+        result.setRated(true);\n+        result.resultString(\"7 of 13 passed\");\n+        result.score(54L);\n+        result.setAssessmentType(AssessmentType.AUTOMATIC);\n+        result.setCompletionDate(ZonedDateTime.now());\n+        this.addFeedback(result);\n+        resultRepository.save(result);\n+        return result;\n+    }\n+\n+    /**\n+     * Creates feedback for the provided result\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param result for which the feedback should be created\n+     * @param methodName of the testcase\n+     * @param positive is the testcase positive or not\n+     * @param errorMessageString will only added if the test case fails otherwise use null\n+     */\n+    public void createFeedback(Result result, String methodName, boolean positive, @Nullable String errorMessageString) {\n+        Feedback feedback = new Feedback();\n+        feedback.setText(methodName);\n+        feedback.setDetailText(errorMessageString);\n+        feedback.setType(FeedbackType.AUTOMATIC);\n+        feedback.setPositive(positive);\n+        result.addFeedback(feedback);\n+    }\n+\n+    /**\n+     * adds the feedback to the result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjYxNg==", "bodyText": "i added the comment", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411482616", "createdAt": "2020-04-20T15:41:46Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionResultSimulationService.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.FeedbackType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.Participant;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.util.VCSSimulationUtils;\n+\n+/**\n+ * Only for local development\n+ * Simulates the creation of a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@Service\n+public class ProgrammingSubmissionResultSimulationService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseService.class);\n+\n+    private final ParticipationRepository participationRepository;\n+\n+    private final UserService userService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final ProgrammingSubmissionRepository programmingSubmissionRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ProgrammingExerciseSimulationService programmingExerciseSimulationService;\n+\n+    public ProgrammingSubmissionResultSimulationService(ParticipationRepository participationRepository, UserService userService,\n+            ProgrammingExerciseService programmingExerciseService, ParticipationService participationService, ProgrammingSubmissionRepository programmingSubmissionRepository,\n+            ResultRepository resultRepository, ProgrammingExerciseSimulationService programmingExerciseSimulationService) {\n+        this.participationRepository = participationRepository;\n+        this.userService = userService;\n+        this.programmingSubmissionRepository = programmingSubmissionRepository;\n+        this.resultRepository = resultRepository;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.participationService = participationService;\n+        this.programmingExerciseSimulationService = programmingExerciseSimulationService;\n+    }\n+\n+    /**\n+     * This method creates a new participation for the provided user\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExercise the used programmingExercise\n+     * @param participant the participant object of the user\n+     * @param user the user who wants to particpate\n+     * @return the newly created and stored participation\n+     */\n+    public ProgrammingExerciseStudentParticipation createParticipation(ProgrammingExercise programmingExercise, Participant participant, User user) {\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = new ProgrammingExerciseStudentParticipation();\n+        programmingExerciseStudentParticipation.setBuildPlanId(programmingExercise.getProjectKey() + \"-\" + user.getLogin().toUpperCase());\n+        programmingExerciseStudentParticipation.setParticipant(participant);\n+        programmingExerciseStudentParticipation.setInitializationState(InitializationState.INITIALIZED);\n+        programmingExerciseStudentParticipation.setRepositoryUrl(\"http://\" + user.getLogin() + \"@\" + programmingExerciseSimulationService.domain\n+                + programmingExercise.getProjectKey() + \"/\" + programmingExercise.getProjectKey().toLowerCase() + \"-\" + user.getLogin() + \".git\");\n+        programmingExerciseStudentParticipation.setInitializationDate(ZonedDateTime.now());\n+        programmingExerciseStudentParticipation.setProgrammingExercise(programmingExercise);\n+        participationRepository.save(programmingExerciseStudentParticipation);\n+        return programmingExerciseStudentParticipation;\n+    }\n+\n+    /**\n+     * This method creates a new submission for the provided user\n+     * @param exerciseId the exerciseId of the exercise for which a submission should be created\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @return the newly created and stored submission\n+     */\n+    public ProgrammingSubmission createSubmission(Long exerciseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndStudentLoginWithEagerSubmissionsAnyState(programmingExercise,\n+                user.getLogin());\n+        if (optionalStudentParticipation.isEmpty()) {\n+            programmingExerciseStudentParticipation = createParticipation(programmingExercise, participant, user);\n+        }\n+        else {\n+            programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = new ProgrammingSubmission();\n+        programmingSubmission.setCommitHash(VCSSimulationUtils.simulateCommitHash());\n+        programmingSubmission.setSubmitted(true);\n+        programmingSubmission.setSubmissionDate(ZonedDateTime.now());\n+        programmingSubmission.setType(SubmissionType.MANUAL);\n+        programmingExerciseStudentParticipation.addSubmissions(programmingSubmission);\n+\n+        programmingSubmissionRepository.save(programmingSubmission);\n+        return programmingSubmission;\n+    }\n+\n+    /**\n+     *  This method creates a new result for the provided participation\n+     *  This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExerciseStudentParticipation the participation for which the new result should be created\n+     * @return the newly created and stored result\n+     */\n+    public Result createResult(ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation) {\n+        Optional<ProgrammingSubmission> programmingSubmission = programmingSubmissionRepository\n+                .findFirstByParticipationIdOrderBySubmissionDateDesc(programmingExerciseStudentParticipation.getId());\n+        Result result = new Result();\n+        result.setSubmission(programmingSubmission.get());\n+        result.setParticipation(programmingExerciseStudentParticipation);\n+        result.setRated(true);\n+        result.resultString(\"7 of 13 passed\");\n+        result.score(54L);\n+        result.setAssessmentType(AssessmentType.AUTOMATIC);\n+        result.setCompletionDate(ZonedDateTime.now());\n+        this.addFeedback(result);\n+        resultRepository.save(result);\n+        return result;\n+    }\n+\n+    /**\n+     * Creates feedback for the provided result\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param result for which the feedback should be created\n+     * @param methodName of the testcase\n+     * @param positive is the testcase positive or not\n+     * @param errorMessageString will only added if the test case fails otherwise use null\n+     */\n+    public void createFeedback(Result result, String methodName, boolean positive, @Nullable String errorMessageString) {\n+        Feedback feedback = new Feedback();\n+        feedback.setText(methodName);\n+        feedback.setDetailText(errorMessageString);\n+        feedback.setType(FeedbackType.AUTOMATIC);\n+        feedback.setPositive(positive);\n+        result.addFeedback(feedback);\n+    }\n+\n+    /**\n+     * adds the feedback to the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzEyNg=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk1OTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyNTo0OVrOGIXNXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo0MjowMVrOGIa6yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjA0Nw==", "bodyText": "Either use SecureRandom or UUID.randomUUID().toString()\nYou might need to replace \"-\" with a random number then.", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411422047", "createdAt": "2020-04-20T14:25:49Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.util.Random;\n+\n+import org.springframework.context.annotation.Profile;\n+\n+@Profile(\"dev\")\n+public class VCSSimulationUtils {\n+\n+    /**\n+     * Simulates a commit Hash, the returned string consist out of 40 times the same number\n+     * @return the simulated commitHash\n+     */\n+    public static String simulateCommitHash() {\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjgyNw==", "bodyText": "i added secureRandom", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411482827", "createdAt": "2020-04-20T15:42:01Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.util.Random;\n+\n+import org.springframework.context.annotation.Profile;\n+\n+@Profile(\"dev\")\n+public class VCSSimulationUtils {\n+\n+    /**\n+     * Simulates a commit Hash, the returned string consist out of 40 times the same number\n+     * @return the simulated commitHash\n+     */\n+    public static String simulateCommitHash() {\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjA0Nw=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk2NTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyNjo1NlrOGIXQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzozNzo0M1rOGIf8xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjkzOQ==", "bodyText": "/exercises/{exerciseId}/submissions/no-vcs-and-ci-available", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411422939", "createdAt": "2020-04-20T14:26:56Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzE0MA==", "bodyText": "!", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433140", "createdAt": "2020-04-20T14:40:01Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjkzOQ=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NTI1NA==", "bodyText": "i adapted the url", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411565254", "createdAt": "2020-04-20T17:37:43Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjkzOQ=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk2NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyNzowN1rOGIXRVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzozNzo1MVrOGIf9FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA2Mg==", "bodyText": "/exercises/{exerciseId}/results/no-vcs-and-ci-available", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411423062", "createdAt": "2020-04-20T14:27:07Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";\n+\n+        public static final String RESULTS_SIMULATION = \"/results/no-vcs-and-ci-available/{exerciseId}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzE5Mg==", "bodyText": "!", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433192", "createdAt": "2020-04-20T14:40:05Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";\n+\n+        public static final String RESULTS_SIMULATION = \"/results/no-vcs-and-ci-available/{exerciseId}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA2Mg=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NTMzMg==", "bodyText": "i adapted the url", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411565332", "createdAt": "2020-04-20T17:37:51Z", "author": {"login": "F4lka"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingSubmissionResultSimulationResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.ProgrammingSubmissionResultSimulationService;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * Only for local development\n+ * Simulates submission and results for a programming exercise without a connection to the VCS and CI server\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+\n+@Profile(\"dev\")\n+@RestController\n+@RequestMapping(ProgrammingSubmissionResultSimulationResource.Endpoints.ROOT)\n+public class ProgrammingSubmissionResultSimulationResource {\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingSubmissionResource.class);\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final UserService userService;\n+\n+    private final ParticipationService participationService;\n+\n+    private final WebsocketMessagingService messagingService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    public ProgrammingSubmissionResultSimulationResource(ProgrammingSubmissionService programmingSubmissionService, UserService userService,\n+            ParticipationService participationService, WebsocketMessagingService messagingService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionResultSimulationService programmingSubmissionResultSimulationService, ExerciseService exerciseService,\n+            AuthorizationCheckService authCheckService) {\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.userService = userService;\n+        this.participationService = participationService;\n+        this.messagingService = messagingService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionResultSimulationService = programmingSubmissionResultSimulationService;\n+        this.exerciseService = exerciseService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * This method is used to create a participation and a submission\n+     * This participation and submission are only SIMULATIONS for the testing\n+     * of programming exercises without a connection to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId the id of the exercise\n+     * @return HTTP OK and ProgrammingSubmission\n+     */\n+\n+    @PostMapping(Endpoints.SUBMISSIONS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingSubmission> createParticipationAndSubmissionSimulation(@PathVariable Long exerciseId) {\n+\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingSubmission programmingSubmission = programmingSubmissionResultSimulationService.createSubmission(exerciseId);\n+\n+        programmingSubmissionService.notifyUserAboutSubmission(programmingSubmission);\n+\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/submissions\" + programmingSubmission.getId())).body(programmingSubmission);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a submission\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a submission: \" + e.getMessage(), \"errorSubmission\")).body(null);\n+        }\n+    }\n+\n+    /**\n+     * This method is used to notify artemis that there is a new programming exercise build result.\n+     * This result is only a SIMULATION for the testing of programming exercises without a connection\n+     * to the VCS and CI server\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param exerciseId id of the exercise\n+     * @return HTTP OK and Result\n+     */\n+    @PostMapping(Endpoints.RESULTS_SIMULATION)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createNewProgrammingExerciseResult(@PathVariable Long exerciseId) {\n+        log.debug(\"Received result notify (NEW)\");\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Participant participant = user;\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findByIdWithEagerStudentParticipationsAndSubmissions(exerciseId);\n+        Optional<StudentParticipation> optionalStudentParticipation = participationService.findOneByExerciseAndParticipantAnyState(programmingExercise, participant);\n+\n+        if (optionalStudentParticipation.isEmpty()) {\n+            return forbidden();\n+        }\n+\n+        ProgrammingExerciseStudentParticipation programmingExerciseStudentParticipation = (ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get();\n+        Result result = programmingSubmissionResultSimulationService.createResult(programmingExerciseStudentParticipation);\n+\n+        messagingService.broadcastNewResult((Participation) optionalStudentParticipation.get(), result);\n+        log.info(\"The new result for {} was saved successfully\", ((ProgrammingExerciseStudentParticipation) optionalStudentParticipation.get()).getBuildPlanId());\n+        try {\n+            return ResponseEntity.created(new URI(\"/api/results\" + result.getId())).body(result);\n+        }\n+        catch (URISyntaxException e) {\n+            log.error(\"Error while simulating a result\", e);\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n+                    .headers(HeaderUtil.createAlert(applicationName, \"An error occurred while simulating a result: \" + e.getMessage(), \"errorResult\")).body(null);\n+        }\n+    }\n+\n+    public static final class Endpoints {\n+\n+        public static final String ROOT = \"/api\";\n+\n+        public static final String SUBMISSIONS_SIMULATION = \"/submissions/no-vcs-and-ci-available/{exerciseId}\";\n+\n+        public static final String RESULTS_SIMULATION = \"/results/no-vcs-and-ci-available/{exerciseId}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzA2Mg=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk5MzcxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMjozNFrOGIXiFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowNDoyN1rOGIcBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzM1MQ==", "bodyText": "please use a subscription and an async way here, e.g like the following code.\n    this.profileService.getProfileInfo().subscribe((profileInfo) => {\n        if (profileInfo && profileInfo.guidedTourMapping) {\n            this.guidedTourMapping = profileInfo.guidedTourMapping;\n        }\n    });", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411427351", "createdAt": "2020-04-20T14:32:34Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "diffHunk": "@@ -139,6 +146,8 @@ export class ProgrammingExerciseUpdateComponent implements OnInit {\n         if (this.programmingExercise.id !== undefined) {\n             this.problemStatementLoaded = true;\n         }\n+        // Checks if the current environment is production\n+        this.inProductionEnvironment = this.profileService.isInProduction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzQzMQ==", "bodyText": "!", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433431", "createdAt": "2020-04-20T14:40:21Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "diffHunk": "@@ -139,6 +146,8 @@ export class ProgrammingExerciseUpdateComponent implements OnInit {\n         if (this.programmingExercise.id !== undefined) {\n             this.problemStatementLoaded = true;\n         }\n+        // Checks if the current environment is production\n+        this.inProductionEnvironment = this.profileService.isInProduction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzM1MQ=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMDg4OQ==", "bodyText": "i added the a subscription for the profileInfo", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411500889", "createdAt": "2020-04-20T16:04:27Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/update/programming-exercise-update.component.ts", "diffHunk": "@@ -139,6 +146,8 @@ export class ProgrammingExerciseUpdateComponent implements OnInit {\n         if (this.programmingExercise.id !== undefined) {\n             this.problemStatementLoaded = true;\n         }\n+        // Checks if the current environment is production\n+        this.inProductionEnvironment = this.profileService.isInProduction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzM1MQ=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAxMDA3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozNTo0NFrOGIXr0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo0MTo0NFrOGIgHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyOTg0Mg==", "bodyText": "please make sure that the angular app does not break due to this error", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411429842", "createdAt": "2020-04-20T14:35:44Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "diffHunk": "@@ -0,0 +1,46 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { EntityResponseType, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { HttpClient } from '@angular/common/http';\n+import { map } from 'rxjs/operators';\n+import { Observable } from 'rxjs/Observable';\n+import { ProfileService } from 'app/shared/layouts/profiles/profile.service';\n+\n+/**\n+ *\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationService {\n+    public resourceUrl = SERVER_API_URL + 'api/programming-exercises';\n+\n+    constructor(private http: HttpClient, private programmingExerciseService: ProgrammingExerciseService, private profileService: ProfileService) {}\n+\n+    /**\n+     * Triggers the creation and setup of a new programming exercise without connection\n+     * to the VCS and CI\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExercise\n+     */\n+    automaticSetupWithoutConnectionToVCSandCI(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {\n+        this.failsIfInProduction();\n+        const copy = this.programmingExerciseService.convertDataFromClient(programmingExercise);\n+        return this.http\n+            .post<ProgrammingExercise>(this.resourceUrl + '/no-vcs-and-ci-available', copy, { observe: 'response' })\n+            .pipe(map((res: EntityResponseType) => this.programmingExerciseService.convertDateFromServer(res)));\n+    }\n+\n+    /**\n+     * Checks if the current environment is production, if yes the method throws an error\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * It should prevent developers from misusing methods, which should be only used for testing\n+     */\n+    failsIfInProduction() {\n+        if (this.profileService.isInProduction()) {\n+            alert('This action is NOT supported on production and should NOT be visible. Please contact a developer immediately!');\n+            throw new Error('This action is NOT supported on production and should NOT be visible. Please contact a developer immediately!');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NzkwMA==", "bodyText": "this does not break the app", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411567900", "createdAt": "2020-04-20T17:41:44Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/exercises/programming/manage/services/programming-exercise-simulation.service.ts", "diffHunk": "@@ -0,0 +1,46 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { EntityResponseType, ProgrammingExerciseService } from 'app/exercises/programming/manage/services/programming-exercise.service';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { HttpClient } from '@angular/common/http';\n+import { map } from 'rxjs/operators';\n+import { Observable } from 'rxjs/Observable';\n+import { ProfileService } from 'app/shared/layouts/profiles/profile.service';\n+\n+/**\n+ *\n+ * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+ */\n+@Injectable({ providedIn: 'root' })\n+export class ProgrammingExerciseSimulationService {\n+    public resourceUrl = SERVER_API_URL + 'api/programming-exercises';\n+\n+    constructor(private http: HttpClient, private programmingExerciseService: ProgrammingExerciseService, private profileService: ProfileService) {}\n+\n+    /**\n+     * Triggers the creation and setup of a new programming exercise without connection\n+     * to the VCS and CI\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * @param programmingExercise\n+     */\n+    automaticSetupWithoutConnectionToVCSandCI(programmingExercise: ProgrammingExercise): Observable<EntityResponseType> {\n+        this.failsIfInProduction();\n+        const copy = this.programmingExerciseService.convertDataFromClient(programmingExercise);\n+        return this.http\n+            .post<ProgrammingExercise>(this.resourceUrl + '/no-vcs-and-ci-available', copy, { observe: 'response' })\n+            .pipe(map((res: EntityResponseType) => this.programmingExerciseService.convertDateFromServer(res)));\n+    }\n+\n+    /**\n+     * Checks if the current environment is production, if yes the method throws an error\n+     * This functionality is only for testing purposes (noVersionControlAndContinuousIntegrationAvailable)\n+     * It should prevent developers from misusing methods, which should be only used for testing\n+     */\n+    failsIfInProduction() {\n+        if (this.profileService.isInProduction()) {\n+            alert('This action is NOT supported on production and should NOT be visible. Please contact a developer immediately!');\n+            throw new Error('This action is NOT supported on production and should NOT be visible. Please contact a developer immediately!');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyOTg0Mg=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAyMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozODowOVrOGIXy7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyNTo1NlrOGIc_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTY2Mw==", "bodyText": "not needed, please remove", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411431663", "createdAt": "2020-04-20T14:38:09Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -52,8 +55,11 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n     studentParticipation: StudentParticipation | null;\n     isAfterAssessmentDueDate: boolean;\n     public gradingCriteria: GradingCriterion[];\n-\n+    private programmingExercise: ProgrammingExercise;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzYyNA==", "bodyText": "!", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433624", "createdAt": "2020-04-20T14:40:35Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -52,8 +55,11 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n     studentParticipation: StudentParticipation | null;\n     isAfterAssessmentDueDate: boolean;\n     public gradingCriteria: GradingCriterion[];\n-\n+    private programmingExercise: ProgrammingExercise;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTY2Mw=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNjgwOA==", "bodyText": "i removed the variable", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411516808", "createdAt": "2020-04-20T16:25:56Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -52,8 +55,11 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n     studentParticipation: StudentParticipation | null;\n     isAfterAssessmentDueDate: boolean;\n     public gradingCriteria: GradingCriterion[];\n-\n+    private programmingExercise: ProgrammingExercise;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTY2Mw=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAyMzA3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozODozMlrOGIX0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyNTo0MVrOGIc-6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTk0OA==", "bodyText": "please separate this with a section from the real \"production\" code", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411431948", "createdAt": "2020-04-20T14:38:32Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -52,8 +55,11 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n     studentParticipation: StudentParticipation | null;\n     isAfterAssessmentDueDate: boolean;\n     public gradingCriteria: GradingCriterion[];\n-\n+    private programmingExercise: ProgrammingExercise;\n+    public wasSubmissionSimulated = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMzcwMg==", "bodyText": "!", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411433702", "createdAt": "2020-04-20T14:40:41Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -52,8 +55,11 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n     studentParticipation: StudentParticipation | null;\n     isAfterAssessmentDueDate: boolean;\n     public gradingCriteria: GradingCriterion[];\n-\n+    private programmingExercise: ProgrammingExercise;\n+    public wasSubmissionSimulated = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTk0OA=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNjY0OA==", "bodyText": "i separated the variables", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411516648", "createdAt": "2020-04-20T16:25:41Z", "author": {"login": "F4lka"}, "path": "src/main/webapp/app/overview/exercise-details/course-exercise-details.component.ts", "diffHunk": "@@ -52,8 +55,11 @@ export class CourseExerciseDetailsComponent implements OnInit, OnDestroy {\n     studentParticipation: StudentParticipation | null;\n     isAfterAssessmentDueDate: boolean;\n     public gradingCriteria: GradingCriterion[];\n-\n+    private programmingExercise: ProgrammingExercise;\n+    public wasSubmissionSimulated = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTk0OA=="}, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAyNDM1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/layouts/profiles/profile.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozODo0NVrOGIX0ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozODo0NVrOGIX0ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjEzMQ==", "bodyText": "see above, this should be async", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411432131", "createdAt": "2020-04-20T14:38:45Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/shared/layouts/profiles/profile.service.ts", "diffHunk": "@@ -57,6 +57,13 @@ export class ProfileService {\n         return this.profileInfo;\n     }\n \n+    /**\n+     * Checks if the current profile is production\n+     */\n+    public isInProduction(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9aff848146beedbbaab1d771f169a2dee8a69a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ4ODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNzoyM1rOGIljkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNzoyM1rOGIljkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NzEwNg==", "bodyText": "This can be changed in the follow-up PR:\nYou can simplify this code (and make it more readable in my opinion) by using the Strings class from com.google.common.base.Strings.\nThe code then looks like this:\nreturn Strings.repeat(number, 40);", "url": "https://github.com/ls1intum/Artemis/pull/1292#discussion_r411657106", "createdAt": "2020-04-20T20:07:23Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/util/VCSSimulationUtils.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.service.util;\n+\n+import java.security.SecureRandom;\n+\n+import org.springframework.context.annotation.Profile;\n+\n+@Profile(\"dev\")\n+public class VCSSimulationUtils {\n+\n+    /**\n+     * Simulates a commit Hash, the returned string consist out of 40 times the same number\n+     * @return the simulated commitHash\n+     */\n+    public static String simulateCommitHash() {\n+        SecureRandom secureRandom = new SecureRandom();\n+        String number = String.valueOf(secureRandom.nextInt(10));\n+        String commitHash = number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83d71b6120aa34766de44381f772cecd113e5db3"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 92, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}