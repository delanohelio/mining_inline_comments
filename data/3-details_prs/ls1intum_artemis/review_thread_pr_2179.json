{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODYxNjE3", "number": 2179, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxMzo0NFrOEtHgTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowOFrOEtLOZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQ0MzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxMzo0NFrOHguqcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxMzo0NFrOHguqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MTAwOQ==", "bodyText": "weird name for petri net arc", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504081009", "createdAt": "2020-10-13T16:13:44Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "diffHunk": "@@ -813,6 +814,161 @@ private static UMLControlFlow parseControlFlow(JsonObject controlFlowJson, Map<S\n         }\n     }\n \n+    /**\n+     * Create a petri net from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * petri net containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a petri net containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static PetriNet buildPetriNetFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<PetriNetArc> arcs = new ArrayList<>();\n+        Map<String, PetriNetPlace> places = new HashMap<>();\n+        Map<String, PetriNetTransition> transitions = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {\n+                case PetriNetPlace.PETRI_NET_PLACE_TYPE -> {\n+                    PetriNetPlace place = parsePetriNetPlace(jsonObject);\n+                    places.put(place.getJSONElementID(), place);\n+                    allElementsMap.put(place.getJSONElementID(), place);\n+                }\n+                case PetriNetTransition.PETRI_NET_TRANSITION_TYPE -> {\n+                    PetriNetTransition transition = parsePetriNetTransition(jsonObject);\n+                    transitions.put(transition.getJSONElementID(), transition);\n+                    allElementsMap.put(transition.getJSONElementID(), transition);\n+                }\n+                default -> {\n+                    // ignore unknown elements\n+                }\n+            }\n+        }\n+\n+        // loop over all JSON control flow elements and create syntax tree links\n+        for (JsonElement rel : relationships) {\n+            Optional<PetriNetArc> useCaseAssociation = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7151ae601d4843613532eb5dcdc748c73e62400"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQ1NDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxNjoxNVrOHguxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxNjoxNVrOHguxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4Mjc2Mg==", "bodyText": "same here, shouldn't useCaseAssociation be something like syntacTreeLink?", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504082762", "createdAt": "2020-10-13T16:16:15Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "diffHunk": "@@ -813,6 +814,161 @@ private static UMLControlFlow parseControlFlow(JsonObject controlFlowJson, Map<S\n         }\n     }\n \n+    /**\n+     * Create a petri net from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * petri net containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a petri net containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static PetriNet buildPetriNetFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<PetriNetArc> arcs = new ArrayList<>();\n+        Map<String, PetriNetPlace> places = new HashMap<>();\n+        Map<String, PetriNetTransition> transitions = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {\n+                case PetriNetPlace.PETRI_NET_PLACE_TYPE -> {\n+                    PetriNetPlace place = parsePetriNetPlace(jsonObject);\n+                    places.put(place.getJSONElementID(), place);\n+                    allElementsMap.put(place.getJSONElementID(), place);\n+                }\n+                case PetriNetTransition.PETRI_NET_TRANSITION_TYPE -> {\n+                    PetriNetTransition transition = parsePetriNetTransition(jsonObject);\n+                    transitions.put(transition.getJSONElementID(), transition);\n+                    allElementsMap.put(transition.getJSONElementID(), transition);\n+                }\n+                default -> {\n+                    // ignore unknown elements\n+                }\n+            }\n+        }\n+\n+        // loop over all JSON control flow elements and create syntax tree links\n+        for (JsonElement rel : relationships) {\n+            Optional<PetriNetArc> useCaseAssociation = parsePetriNetArc(rel.getAsJsonObject(), allElementsMap);\n+            useCaseAssociation.ifPresent(arcs::add);\n+        }\n+\n+        return new PetriNet(modelSubmissionId, List.copyOf(places.values()), List.copyOf(transitions.values()), arcs);\n+    }\n+\n+    private static PetriNetPlace parsePetriNetPlace(JsonObject componentJson) {\n+        String name = componentJson.get(ELEMENT_NAME).getAsString();\n+        String amountOfTokens = componentJson.get(\"amountOfTokens\").getAsString();\n+        String capacity = componentJson.get(\"capacity\").getAsString();\n+        return new PetriNetPlace(name, amountOfTokens, capacity, componentJson.get(ELEMENT_ID).getAsString());\n+    }\n+\n+    private static PetriNetTransition parsePetriNetTransition(JsonObject componentJson) {\n+        String name = componentJson.get(ELEMENT_NAME).getAsString();\n+        return new PetriNetTransition(name, componentJson.get(ELEMENT_ID).getAsString());\n+    }\n+\n+    /**\n+     * Parses the given JSON representation of a UML relationship to a PetriNetArc Java object.\n+     *\n+     * @param relationshipJson the JSON object containing the relationship\n+     * @param objectMap a map containing all objects of the corresponding syntax tree, necessary for assigning source and target element of the relationships\n+     * @return the PetriNetArc object parsed from the JSON object\n+     * @throws IOException when no class could be found in the classMap for the source and target ID in the JSON object\n+     */\n+    private static Optional<PetriNetArc> parsePetriNetArc(JsonObject relationshipJson, Map<String, UMLElement> allSyntaxTreeElements) throws IOException {\n+        String multiplicity = relationshipJson.get(ELEMENT_NAME).getAsString();\n+        UMLElement source = findElement(relationshipJson, allSyntaxTreeElements, RELATIONSHIP_SOURCE);\n+        UMLElement target = findElement(relationshipJson, allSyntaxTreeElements, RELATIONSHIP_TARGET);\n+\n+        if (source == null || target == null) {\n+            throw new IOException(\"Relationship source or target not part of model!\");\n+        }\n+        PetriNetArc newSPetriNetArc = new PetriNetArc(multiplicity, source, target, relationshipJson.get(ELEMENT_ID).getAsString());\n+        return Optional.of(newSPetriNetArc);\n+    }\n+\n+    /**\n+     * Create a syntax tree from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * syntax tree containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a syntax tree containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static SyntaxTree buildSyntaxTreeFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<SyntaxTreeLink> syntaxTreeLinkList = new ArrayList<>();\n+        Map<String, SyntaxTreeTerminal> terminalMap = new HashMap<>();\n+        Map<String, SyntaxTreeNonterminal> nonterminalMap = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {\n+                case SyntaxTreeTerminal.SYNTAX_TREE_TERMINAL_TYPE -> {\n+                    SyntaxTreeTerminal terminal = parseTerminal(jsonObject);\n+                    terminalMap.put(terminal.getJSONElementID(), terminal);\n+                    allElementsMap.put(terminal.getJSONElementID(), terminal);\n+                }\n+                case SyntaxTreeNonterminal.SYNTAX_TREE_NONTERMINAL_TYPE -> {\n+                    SyntaxTreeNonterminal nonterminal = parseNonterminal(jsonObject);\n+                    nonterminalMap.put(nonterminal.getJSONElementID(), nonterminal);\n+                    allElementsMap.put(nonterminal.getJSONElementID(), nonterminal);\n+                }\n+                default -> {\n+                    // ignore unknown elements\n+                }\n+            }\n+        }\n+\n+        // loop over all JSON control flow elements and create syntax tree links\n+        for (JsonElement rel : relationships) {\n+            Optional<SyntaxTreeLink> useCaseAssociation = parseSyntaxTreeLink(rel.getAsJsonObject(), allElementsMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7151ae601d4843613532eb5dcdc748c73e62400"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MjQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MDo1OVrOHg0kPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MDo1OVrOHg0kPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3NzcyNw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similarityPetriNet_differentModels' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177727", "createdAt": "2020-10-13T18:40:59Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNetTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.petrinet;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class PetriNetTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similarityPetriNet_equalModels() {\n+        compareSubmissions(modelingSubmission(PETRI_NET_MODEL_1A), modelingSubmission(PETRI_NET_MODEL_1A), 0.8, 1.0);\n+        compareSubmissions(modelingSubmission(PETRI_NET_MODEL_2), modelingSubmission(PETRI_NET_MODEL_2), 0.8, 1.0);\n+\n+        compareSubmissions(modelingSubmission(PETRI_NET_MODEL_1A), modelingSubmission(PETRI_NET_MODEL_1B), 0.8, 0.9375);\n+    }\n+\n+    @Test\n+    void similarityPetriNet_differentModels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MjUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTrees.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowMVrOHg0kTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowMVrOHg0kTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc0Mw==", "bodyText": "Codacy found an issue: The utility class name 'SyntaxTrees' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177743", "createdAt": "2020-10-13T18:41:01Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTrees.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+class SyntaxTrees {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MjY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowM1rOHg0kXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowM1rOHg0kXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc1OA==", "bodyText": "Codacy found an issue: The utility class name 'PetriNets' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177758", "createdAt": "2020-10-13T18:41:03Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNets.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.petrinet;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+class PetriNets {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowNFrOHg0kZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowNFrOHg0kZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc2NQ==", "bodyText": "Codacy found an issue: Switch statements should have a default label", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177765", "createdAt": "2020-10-13T18:41:04Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/compass/controller/UMLModelParser.java", "diffHunk": "@@ -813,6 +814,161 @@ private static UMLControlFlow parseControlFlow(JsonObject controlFlowJson, Map<S\n         }\n     }\n \n+    /**\n+     * Create a petri net from the model and relationship elements given as JSON arrays. It parses the JSON objects to corresponding Java objects and creates a\n+     * petri net containing these UML model elements.\n+     *\n+     * @param modelElements the model elements as JSON array\n+     * @param relationships the relationship elements as JSON array\n+     * @param modelSubmissionId the ID of the corresponding modeling submission\n+     * @return a petri net containing the parsed model elements and relationships\n+     * @throws IOException when no corresponding model elements could be found for the source and target IDs in the relationship JSON objects\n+     */\n+    private static PetriNet buildPetriNetFromJSON(JsonArray modelElements, JsonArray relationships, long modelSubmissionId) throws IOException {\n+        List<PetriNetArc> arcs = new ArrayList<>();\n+        Map<String, PetriNetPlace> places = new HashMap<>();\n+        Map<String, PetriNetTransition> transitions = new HashMap<>();\n+        Map<String, UMLElement> allElementsMap = new HashMap<>();\n+\n+        // loop over all JSON elements and create the UML objects\n+        for (JsonElement jsonElement : modelElements) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            String elementType = jsonObject.get(ELEMENT_TYPE).getAsString();\n+            // elementType is never null\n+            switch (elementType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MjcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTreeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowNVrOHg0kag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowNVrOHg0kag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc3MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similaritySyntaxTree_differentModels' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177770", "createdAt": "2020-10-13T18:41:05Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTreeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class SyntaxTreeTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similaritySyntaxTree_equalModels() {\n+        compareSubmissions(modelingSubmission(SYNTAX_TREE_MODEL_1A), modelingSubmission(SYNTAX_TREE_MODEL_1A), 0.8, 1.0);\n+        compareSubmissions(modelingSubmission(SYNTAX_TREE_MODEL_2), modelingSubmission(SYNTAX_TREE_MODEL_2), 0.8, 1.0);\n+\n+        compareSubmissions(modelingSubmission(SYNTAX_TREE_MODEL_1A), modelingSubmission(SYNTAX_TREE_MODEL_1B), 0.8, 1.0);\n+    }\n+\n+    @Test\n+    void similaritySyntaxTree_differentModels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1MjgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTreeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowNlrOHg0kdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowNlrOHg0kdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc4Mw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similaritySyntaxTree_equalModels' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177783", "createdAt": "2020-10-13T18:41:06Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/syntaxtree/SyntaxTreeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.syntaxtree.SyntaxTrees.SYNTAX_TREE_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class SyntaxTreeTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similaritySyntaxTree_equalModels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODA1Mjg1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowOFrOHg0kfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODo0MTowOFrOHg0kfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3Nzc5MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'similarityPetriNet_equalModels' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2179#discussion_r504177790", "createdAt": "2020-10-13T18:41:08Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/compass/umlmodel/petrinet/PetriNetTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package de.tum.in.www1.artemis.service.compass.umlmodel.petrinet;\n+\n+import static com.google.gson.JsonParser.parseString;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1A;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_1B;\n+import static de.tum.in.www1.artemis.service.compass.umlmodel.petrinet.PetriNets.PETRI_NET_MODEL_2;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.InstanceOfAssertFactories.type;\n+\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import de.tum.in.www1.artemis.service.compass.controller.UMLModelParser;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.AbstractUMLDiagramTest;\n+import de.tum.in.www1.artemis.service.compass.umlmodel.UMLDiagram;\n+\n+public class PetriNetTest extends AbstractUMLDiagramTest {\n+\n+    @Test\n+    void similarityPetriNet_equalModels() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5511ae3724d95eed56a9f29cd8b106ee0b30dd"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4508, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}