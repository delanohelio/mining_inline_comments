{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTE0OTcz", "number": 2540, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo0NjoyMVrOFE3dhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1MDo0NVrOFE3lIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjQ3MzAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/LtiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo0NjoyMVrOIFFnFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo0NjoyMVrOIFFnFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwNTcxNw==", "bodyText": "there are some Codcy issues, regarding this issue. Please fix those :)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(ltiUserId.getLtiUserId().equals(\"ff30145d6884eeb2c1cef50298939383\"));\n          \n          \n            \n                    assertThat(\"ff30145d6884eeb2c1cef50298939383\".equals(ltiUserId.getLtiUserId()));", "url": "https://github.com/ls1intum/Artemis/pull/2540#discussion_r542205717", "createdAt": "2020-12-14T08:46:21Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/LtiServiceTest.java", "diffHunk": "@@ -0,0 +1,286 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.*;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.security.authentication.InternalAuthenticationServiceException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import de.tum.in.www1.artemis.authentication.AuthenticationIntegrationTestHelper;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LtiOutcomeUrlRepository;\n+import de.tum.in.www1.artemis.repository.LtiUserIdRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.ArtemisAuthenticationProvider;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.dto.LtiLaunchRequestDTO;\n+\n+public class LtiServiceTest {\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private UserRepository userRepository;\n+\n+    @Mock\n+    private LtiOutcomeUrlRepository ltiOutcomeUrlRepository;\n+\n+    @Mock\n+    private ResultRepository resultRepository;\n+\n+    @Mock\n+    private ArtemisAuthenticationProvider artemisAuthenticationProvider;\n+\n+    @Mock\n+    private LtiUserIdRepository ltiUserIdRepository;\n+\n+    @Mock\n+    private HttpServletResponse response;\n+\n+    private Exercise exercise;\n+\n+    private LtiService ltiService;\n+\n+    private LtiLaunchRequestDTO launchRequest;\n+\n+    private User user;\n+\n+    private LtiUserId ltiUserId;\n+\n+    private Course course;\n+\n+    private String courseStudentGroupName = \"courseStudentGroupName\";\n+\n+    private LtiOutcomeUrl ltiOutcomeUrl;\n+\n+    @BeforeEach\n+    public void init() {\n+        MockitoAnnotations.openMocks(this);\n+        SecurityContextHolder.clearContext();\n+        ltiService = new LtiService(userService, userRepository, ltiOutcomeUrlRepository, resultRepository, artemisAuthenticationProvider, ltiUserIdRepository, response);\n+        course = new Course();\n+        course.setStudentGroupName(courseStudentGroupName);\n+        exercise = new TextExercise();\n+        exercise.setCourse(course);\n+        launchRequest = AuthenticationIntegrationTestHelper.setupDefaultLtiLaunchRequest();\n+        user = new User();\n+        user.setLogin(\"login\");\n+        user.setPassword(\"password\");\n+        user.setGroups(new HashSet<>());\n+        ltiUserId = new LtiUserId();\n+        ltiUserId.setUser(user);\n+        ltiOutcomeUrl = new LtiOutcomeUrl();\n+\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_U4I\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_U4I\", Optional.of(\"\"));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_LTILaunchFromEdx() {\n+        launchRequest.setUser_id(\"student\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Invalid username sent by launch request. Please do not launch the exercise from edX studio. Use 'Preview' instead.\";\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_InvalidContextLabel() {\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_existingMappingForLtiUserId() {\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.of(ltiUserId));\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_lookupWithLtiEmailAddress() {\n+        String username = \"username\";\n+        String email = launchRequest.getLis_person_contact_email_primary();\n+        launchRequest.setCustom_lookup_user_by_email(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(artemisAuthenticationProvider.getUsernameForEmail(email)).thenReturn(Optional.of(username));\n+        when(artemisAuthenticationProvider.getOrCreateUser(new UsernamePasswordAuthenticationToken(username, \"\"), \"\", launchRequest.getLis_person_sourcedid(), email, true))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_newUserIsNotRequired() {\n+        String username = launchRequest.getLis_person_sourcedid();\n+        Set<String> groups = new HashSet<>();\n+        groups.add(\"\");\n+        user.setActivated(false);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(userRepository.findOneByLogin(username)).thenReturn(Optional.empty());\n+        when(userService.createUser(username, groups, \"\", launchRequest.getLis_person_sourcedid(), launchRequest.getLis_person_contact_email_primary(), null, null, \"en\"))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+        verify(userService).activateUser(user);\n+\n+        SecurityContextHolder.clearContext();\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"User group not activated or unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_noAuthenticationWasSuccessful() {\n+        launchRequest.setCustom_require_existing_user(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(response.containsHeader(\"Set-Cookie\")).thenReturn(true);\n+        List<String> headers = new ArrayList<>();\n+        headers.add(\"JSESSIONID=(123);\");\n+        when(response.getHeaders(\"Set-Cookie\")).thenReturn(headers);\n+        when(response.getHeader(\"Set-Cookie\")).thenReturn(headers.get(0));\n+        String sessionId = \"(123)\";\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        assertThat(ltiService.launchRequestForSession.containsKey(sessionId));\n+        assertThat(ltiService.launchRequestForSession.containsValue(Pair.of(launchRequest, exercise)));\n+        assertThat(ltiService.launchRequestForSession.get(sessionId).equals(Pair.of(launchRequest, exercise)));\n+    }\n+\n+    @Test\n+    public void onSuccessfulLtiAuthentication() {\n+        ltiUserId.setLtiUserId(\"oldStudentId\");\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.onSuccessfulLtiAuthentication(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    private void onSuccessfulAuthenticationSetup(User user, LtiUserId ltiUserId) {\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+        when(ltiUserIdRepository.findByUser(user)).thenReturn(Optional.of(ltiUserId));\n+        when(ltiOutcomeUrlRepository.findByUserAndExercise(user, exercise)).thenReturn(Optional.of(ltiOutcomeUrl));\n+    }\n+\n+    private void onSuccessfulAuthenticationAssertions(User user, LtiUserId ltiUserId) {\n+        assertThat(user.getGroups().contains(courseStudentGroupName));\n+        assertThat(ltiUserId.getLtiUserId().equals(\"ff30145d6884eeb2c1cef50298939383\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e26ee654ed161ff282e1141597a03a43ef8af7"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjQ5MjUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/LtiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1MDo0NVrOIFFyMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1MDo0NVrOIFFyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODU2MQ==", "bodyText": "this line is used more than once.\nTry to setup the mocking in the init() function or another setup() function.", "url": "https://github.com/ls1intum/Artemis/pull/2540#discussion_r542208561", "createdAt": "2020-12-14T08:50:45Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/LtiServiceTest.java", "diffHunk": "@@ -0,0 +1,286 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.*;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.security.authentication.InternalAuthenticationServiceException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import de.tum.in.www1.artemis.authentication.AuthenticationIntegrationTestHelper;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LtiOutcomeUrlRepository;\n+import de.tum.in.www1.artemis.repository.LtiUserIdRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.ArtemisAuthenticationProvider;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.dto.LtiLaunchRequestDTO;\n+\n+public class LtiServiceTest {\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private UserRepository userRepository;\n+\n+    @Mock\n+    private LtiOutcomeUrlRepository ltiOutcomeUrlRepository;\n+\n+    @Mock\n+    private ResultRepository resultRepository;\n+\n+    @Mock\n+    private ArtemisAuthenticationProvider artemisAuthenticationProvider;\n+\n+    @Mock\n+    private LtiUserIdRepository ltiUserIdRepository;\n+\n+    @Mock\n+    private HttpServletResponse response;\n+\n+    private Exercise exercise;\n+\n+    private LtiService ltiService;\n+\n+    private LtiLaunchRequestDTO launchRequest;\n+\n+    private User user;\n+\n+    private LtiUserId ltiUserId;\n+\n+    private Course course;\n+\n+    private String courseStudentGroupName = \"courseStudentGroupName\";\n+\n+    private LtiOutcomeUrl ltiOutcomeUrl;\n+\n+    @BeforeEach\n+    public void init() {\n+        MockitoAnnotations.openMocks(this);\n+        SecurityContextHolder.clearContext();\n+        ltiService = new LtiService(userService, userRepository, ltiOutcomeUrlRepository, resultRepository, artemisAuthenticationProvider, ltiUserIdRepository, response);\n+        course = new Course();\n+        course.setStudentGroupName(courseStudentGroupName);\n+        exercise = new TextExercise();\n+        exercise.setCourse(course);\n+        launchRequest = AuthenticationIntegrationTestHelper.setupDefaultLtiLaunchRequest();\n+        user = new User();\n+        user.setLogin(\"login\");\n+        user.setPassword(\"password\");\n+        user.setGroups(new HashSet<>());\n+        ltiUserId = new LtiUserId();\n+        ltiUserId.setUser(user);\n+        ltiOutcomeUrl = new LtiOutcomeUrl();\n+\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_U4I\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_U4I\", Optional.of(\"\"));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_LTILaunchFromEdx() {\n+        launchRequest.setUser_id(\"student\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Invalid username sent by launch request. Please do not launch the exercise from edX studio. Use 'Preview' instead.\";\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_InvalidContextLabel() {\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_existingMappingForLtiUserId() {\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.of(ltiUserId));\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_lookupWithLtiEmailAddress() {\n+        String username = \"username\";\n+        String email = launchRequest.getLis_person_contact_email_primary();\n+        launchRequest.setCustom_lookup_user_by_email(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(artemisAuthenticationProvider.getUsernameForEmail(email)).thenReturn(Optional.of(username));\n+        when(artemisAuthenticationProvider.getOrCreateUser(new UsernamePasswordAuthenticationToken(username, \"\"), \"\", launchRequest.getLis_person_sourcedid(), email, true))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_newUserIsNotRequired() {\n+        String username = launchRequest.getLis_person_sourcedid();\n+        Set<String> groups = new HashSet<>();\n+        groups.add(\"\");\n+        user.setActivated(false);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(userRepository.findOneByLogin(username)).thenReturn(Optional.empty());\n+        when(userService.createUser(username, groups, \"\", launchRequest.getLis_person_sourcedid(), launchRequest.getLis_person_contact_email_primary(), null, null, \"en\"))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+        verify(userService).activateUser(user);\n+\n+        SecurityContextHolder.clearContext();\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"User group not activated or unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_noAuthenticationWasSuccessful() {\n+        launchRequest.setCustom_require_existing_user(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(response.containsHeader(\"Set-Cookie\")).thenReturn(true);\n+        List<String> headers = new ArrayList<>();\n+        headers.add(\"JSESSIONID=(123);\");\n+        when(response.getHeaders(\"Set-Cookie\")).thenReturn(headers);\n+        when(response.getHeader(\"Set-Cookie\")).thenReturn(headers.get(0));\n+        String sessionId = \"(123)\";\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        assertThat(ltiService.launchRequestForSession.containsKey(sessionId));\n+        assertThat(ltiService.launchRequestForSession.containsValue(Pair.of(launchRequest, exercise)));\n+        assertThat(ltiService.launchRequestForSession.get(sessionId).equals(Pair.of(launchRequest, exercise)));\n+    }\n+\n+    @Test\n+    public void onSuccessfulLtiAuthentication() {\n+        ltiUserId.setLtiUserId(\"oldStudentId\");\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.onSuccessfulLtiAuthentication(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    private void onSuccessfulAuthenticationSetup(User user, LtiUserId ltiUserId) {\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+        when(ltiUserIdRepository.findByUser(user)).thenReturn(Optional.of(ltiUserId));\n+        when(ltiOutcomeUrlRepository.findByUserAndExercise(user, exercise)).thenReturn(Optional.of(ltiOutcomeUrl));\n+    }\n+\n+    private void onSuccessfulAuthenticationAssertions(User user, LtiUserId ltiUserId) {\n+        assertThat(user.getGroups().contains(courseStudentGroupName));\n+        assertThat(ltiUserId.getLtiUserId().equals(\"ff30145d6884eeb2c1cef50298939383\"));\n+        assertThat(ltiOutcomeUrl.getUrl().equals(\"some.outcome.service.url.com\"));\n+        assertThat(ltiOutcomeUrl.getSourcedId().equals(\"someResultSourceId\"));\n+        verify(userService, times(1)).save(user);\n+        verify(artemisAuthenticationProvider, times(1)).addUserToGroup(user, courseStudentGroupName);\n+        verify(ltiOutcomeUrlRepository, times(1)).save(ltiOutcomeUrl);\n+    }\n+\n+    @Test\n+    public void verifyRequest_oauthSecretNotSpecified() {\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_SECRET\", Optional.empty());\n+        HttpServletRequest request = mock(HttpServletRequest.class);\n+\n+        String message = ltiService.verifyRequest(request);\n+\n+        assertThat(message.equals(\"verifyRequest for LTI is not supported on this Artemis instance, artemis.lti.oauth-secret was not specified in the yml configuration\"));\n+    }\n+\n+    @Test\n+    public void verifyRequest_unsuccessfulVerification() {\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_SECRET\", Optional.of(\"secret\"));\n+        String url = \"http://some.url.com\";\n+        HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getHeader(anyString())).thenReturn(null);\n+        when(request.getRequestURL()).thenReturn(new StringBuffer(url));\n+        when(request.getMethod()).thenReturn(\"GET\");\n+        when(request.getHeaderNames()).thenReturn(Collections.emptyEnumeration());\n+        when(request.getParameterNames()).thenReturn(Collections.emptyEnumeration());\n+\n+        String message = ltiService.verifyRequest(request);\n+\n+        assertThat(message.equals(\"LTI signature verification failed with message: Failed to validate: parameter_absent; error: bad_request, launch result: null\"));\n+    }\n+\n+    @Test\n+    public void onNewResult() {\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_KEY\", Optional.of(\"oauthKey\"));\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_SECRET\", Optional.of(\"oauthSecret\"));\n+\n+        StudentParticipation participation = new StudentParticipation();\n+        User user = new User();\n+        participation.setParticipant(user);\n+        participation.setExercise(exercise);\n+        participation.setId(27L);\n+        Result result = new Result();\n+        result.setScore(3L);\n+        LtiOutcomeUrl ltiOutcomeUrl = new LtiOutcomeUrl();\n+        ltiOutcomeUrl.setUrl(\"https://some.url.com/\");\n+        ltiOutcomeUrl.setSourcedId(\"sourceId\");\n+        ltiOutcomeUrl.setExercise(exercise);\n+        ltiOutcomeUrl.setUser(user);\n+\n+        when(ltiOutcomeUrlRepository.findByUserAndExercise(user, exercise)).thenReturn(Optional.of(ltiOutcomeUrl));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e26ee654ed161ff282e1141597a03a43ef8af7"}, "originalPosition": 266}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4340, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}