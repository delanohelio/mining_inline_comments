{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNTU1OTc4", "number": 2096, "title": "[Exam] Test Run", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features (with a high test coverage)\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I added multiple integration tests (Jest) related to the features (with a high test coverage)\n Client: I added authorities to all new routes and check the course groups for displaying navigation elements (links, buttons)\n Client: I documented the TypeScript code using JSDoc style.\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\nWhen instructors created exams, they have no way of testing their exam. Their only workaround was to create a new exam and register themselves as a student. We want to give the opportunity to instructors to create test runs to experience the exam as the students would.\nDescription\nDistinguishing test runs from student exams\nWe added a column test_run to flag student exams as test runs. Only Instructors are allowed to create test runs, for which they are registered as the student.\nDistinguishing test run participation, submissions and results\nWe also need a way to mark the student participation and its submissions which belong to test runs. This is important because we do not want these submissions to count against the statistics of the exam. Additionally, tutors should not be able to see or assess these submissions. Therefore, the chosen solution for this uses the student field of the participation and the assessor field of the result.\nWhen a test run is created for specific exercises, as part of the setup process, an initial submission is created (similar to the normal exam participations). Additionally, a result is created where the assessor is set using the same user. Therefore we create the condition: student_id = assessor_id.\nIf a participation.exercise.hasExerciseGroup() (is an exam exercise) and there is at least one submission which fulfils the condition: participation.id = submission.result.assessor.id, then we can be sure that this is a test run submission and we can ignore it.\nThe condition is set to at least one, as programming exercises can contain multiple submissions. However, the initial one will ensure that it is marked as a test run exercise.\nQuirks\nInstructors can create multiple test runs for exams, assess their submissions through the test run dashboard, submit complaints about their assessment and respond to these complaints in order to simulate a full cycle. Test runs can be created before, during or after an exam. They have no influence on the exam runtime (latestIndividualEndDate), exam statistics, tutor exam dashboard statistics or results. If an instructor creates multiple test runs which reference the same exercise, the same participation is used for all of them. If a test run is deleted, and its exercise participation is referenced by another test run, the participation is not deleted. Otherwise the test run participations are deleted, including all build plans and repositories.\nNew API Endpoints:\nCreate a test run: \t\t\t\t\t    POST /courses/{courseId}/exams/{examId}/create-test-run\nDelete a test run: \t\t\t\t\t    POST /courses/{courseId}/exams/{examId}/delete-test-run/{testRunId}\nGet all Test Runs for Exam: \t\t            GET /courses/{courseId}/exams/{examId}/test-runs\nGet interesting exercises for test run dashboard: GET /courses/:courseId/exams/:examId:for-exam-tutor-test-run-dashboard\nGet complaints for test run dashboard: \t    GET /exercises/{exerciseId}/complaints-for-test-run-dashboard\nGet test run for Conduction: \t\t\t    GET /courses/{courseId}/exams/{examId}/test-run/{testRunId}/conduction\nGet all testruns for exam: \t\t\t    GET /courses/{courseId}/exams/{examId}/test-runs\nGet all test run submissions: \t\t\t    GET /exercises/{exerciseId}/test-run-submissions\nSteps for Testing\nThe most important thing to test is that nothing is broken for real exams\nCreate an exam, register students, conduct and assess. Try out all features. Everything should work as expected.\nTesting test runs\nPart one: Test Run\n\nLog in as an administrator of a course & create an exam add exercises and register students\n(do not create a test run for an exam where you are already registered as a student and have conducted an exam, this leads to unspecified behaviour)\nCreate a test runs for exercises.\nRun the test run and submit.\nCheck the status bar for programming exercises. It should not default to a checkmark. It should only show submitted, once you have really submitted at least once!\nAssess the test run from the test run dashboard\nComplain about the assessment from the summary of the test run\nRespond to your own complaint\n\nPart two: Add Real Student Exams\n\nRegister students for the exam and run the conduction\nassess the student submissions from the tutor course dashboard. The statistics should not display any information about the test run submissions\nrelease the results and allow student reviews\ntry out the complain feature\nRespond to the complains.\nCheck out the scores view of the exam. It should only render results from real student exams.\n\n\nTest Coverage\nServer:\nExamResource: 99%\nStudentExamResource: 93%\nTextSubmissionResource: 93%\nModelingSubmissionResource: 98%\nComplaintResource: 78%\nResultResource 87%\nStudentExamService: 75%\nExamService: 84%\nSubmissionService: 92%\nClient:\ncreate-test-run-modal.component.ts 64%\ntest-run-management.component.ts 77%\nassessment-header.component.ts 100%\nassessment-layout.component.ts 98%\n\nScreenshots\nCreate test run Modal\nOnce you select an exercise, it is highlighted in Artemis blue to indicate that it will be part of the test run. Only once an exercise has been selected for every exercise group can the user create the test run.\n\nTest Run management screen\nHere you can manage the test runs and assess the test run submissions. These will not be visible from the other dashboards", "createdAt": "2020-09-10T08:52:50Z", "url": "https://github.com/ls1intum/Artemis/pull/2096", "merged": true, "mergeCommit": {"oid": "8302299e414d228c927055461fe699263128fd4d"}, "closed": true, "closedAt": "2020-09-24T08:26:43Z", "author": {"login": "anditurdiu"}, "timelineItems": {"totalCount": 140, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLm52dgH2gAyNDgzNTU1OTc4OjZjNDQzNzc5OTgyYWQ3M2I1ZjdjOTY5MjY0YTM3MGIyNGMyMDZmNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL6uKVgFqTQ5NTIzOTA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6c443779982ad73b5f7c969264a370b24c206f78", "committedDate": "2020-09-23T06:49:59Z", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MzU0OTYy", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494354962", "createdAt": "2020-09-23T07:32:01Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMjowMVrOHWaJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMjowMVrOHWaJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTAyMA==", "bodyText": "Question to the naming pattern: Shouldn't these method names also include a IgnoreTestRuns, like findWithExercisesByUserIdAndExamIdIgnoreTestRuns", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493259020", "createdAt": "2020-09-23T07:32:01Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MzU1ODE3", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494355817", "createdAt": "2020-09-23T07:32:33Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMjozM1rOHWaKTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMjozM1rOHWaKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTM0Mw==", "bodyText": "Same naming  pattern question here", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493259343", "createdAt": "2020-09-23T07:32:33Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Mzc2Njcw", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494376670", "createdAt": "2020-09-23T07:44:35Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo0NDozNVrOHWaoBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo0NDozNVrOHWaoBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2Njk1MA==", "bodyText": "Same naming pattern question here", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493266950", "createdAt": "2020-09-23T07:44:35Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = true\")\n+    List<StudentExam> findAllTestRunsByExamId(@Param(\"examId\") Long examId);\n \n-    Optional<StudentExam> findByExamIdAndUserId(Long examId, Long userId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s left join fetch s.result r left join fetch r.assessor a where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = sp.student.id\")\n+    List<StudentExam> findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se from StudentExam se left join se.exercises e where e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = :#{#userId}\")\n+    List<StudentExam> findAllTestRunsWithExercisesByExamIdForUser(@Param(\"examId\") Long examId, @Param(\"userId\") Long userId);\n+\n+    @Query(\"select distinct se from StudentExam se where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n+    Optional<StudentExam> findByExamIdAndUserId(@Param(\"examId\") long examId, @Param(\"userId\") long userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Mzc3MDU3", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494377057", "createdAt": "2020-09-23T07:44:47Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo0NDo0N1rOHWaokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo0NDo0N1rOHWaokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2NzA5MA==", "bodyText": "Same naming pattern question here", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493267090", "createdAt": "2020-09-23T07:44:47Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = true\")\n+    List<StudentExam> findAllTestRunsByExamId(@Param(\"examId\") Long examId);\n \n-    Optional<StudentExam> findByExamIdAndUserId(Long examId, Long userId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s left join fetch s.result r left join fetch r.assessor a where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = sp.student.id\")\n+    List<StudentExam> findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se from StudentExam se left join se.exercises e where e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = :#{#userId}\")\n+    List<StudentExam> findAllTestRunsWithExercisesByExamIdForUser(@Param(\"examId\") Long examId, @Param(\"userId\") Long userId);\n+\n+    @Query(\"select distinct se from StudentExam se where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n+    Optional<StudentExam> findByExamIdAndUserId(@Param(\"examId\") long examId, @Param(\"userId\") long userId);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n     Optional<StudentExam> findByExerciseIdAndUserId(@Param(\"exerciseId\") Long exerciseId, @Param(\"userId\") Long userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0Mzc5NzIy", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494379722", "createdAt": "2020-09-23T07:46:15Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo0NjoxNVrOHWasJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo0NjoxNVrOHWasJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2ODAwNQ==", "bodyText": "Same naming pattern question here", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493268005", "createdAt": "2020-09-23T07:46:15Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = true\")\n+    List<StudentExam> findAllTestRunsByExamId(@Param(\"examId\") Long examId);\n \n-    Optional<StudentExam> findByExamIdAndUserId(Long examId, Long userId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s left join fetch s.result r left join fetch r.assessor a where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = sp.student.id\")\n+    List<StudentExam> findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se from StudentExam se left join se.exercises e where e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = :#{#userId}\")\n+    List<StudentExam> findAllTestRunsWithExercisesByExamIdForUser(@Param(\"examId\") Long examId, @Param(\"userId\") Long userId);\n+\n+    @Query(\"select distinct se from StudentExam se where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n+    Optional<StudentExam> findByExamIdAndUserId(@Param(\"examId\") long examId, @Param(\"userId\") long userId);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n     Optional<StudentExam> findByExerciseIdAndUserId(@Param(\"exerciseId\") Long exerciseId, @Param(\"userId\") Long userId);\n \n-    @Query(\"select max(se.workingTime) from StudentExam se where se.exam.id = :#{#examId}\")\n+    @Query(\"select max(se.workingTime) from StudentExam se where se.testRun = false and se.exam.id = :#{#examId}\")\n     Optional<Integer> findMaxWorkingTimeByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se.workingTime from StudentExam se where se.exam.id = :#{#examId}\")\n+    @Query(\"select distinct se.workingTime from StudentExam se where se.testRun = false and se.exam.id = :#{#examId}\")\n     Set<Integer> findAllDistinctWorkingTimesByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select u from StudentExam se left join se.user u where se.exam.id = :#{#examId}\")\n+    @Query(\"select distinct u from StudentExam se left join se.user u where se.testRun = false and se.exam.id = :#{#examId}\")\n     Set<User> findUsersWithStudentExamsForExam(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDMxNDI2", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494431426", "createdAt": "2020-09-23T08:40:49Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo0MDo0OVrOHWd05g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo0MDo0OVrOHWd05g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMxOTM5OA==", "bodyText": "examMode: personally I like Enums better for that, because it is more explicit which mode you are setting and it is easier for new developers to debug (does not require that much of domain specific knowledge, i.e. what is the contrary of examMode), just my opinion", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493319398", "createdAt": "2020-09-23T08:40:49Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionService.java", "diffHunk": "@@ -88,11 +90,18 @@ public FileUploadSubmission handleFileUploadSubmission(FileUploadSubmission file\n      *\n      * @param exerciseId    - the id of the exercise we are interested into\n      * @param submittedOnly - if true, it returns only submission with submitted flag set to true\n+     * @param examMode - set flag to to ignore exam test run submissions\n      * @return a list of file upload submissions for the given exercise id\n      */\n     @Transactional(readOnly = true)\n-    public List<FileUploadSubmission> getFileUploadSubmissions(Long exerciseId, boolean submittedOnly) {\n-        List<StudentParticipation> participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+    public List<FileUploadSubmission> getFileUploadSubmissions(Long exerciseId, boolean submittedOnly, boolean examMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDM5MTU3", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494439157", "createdAt": "2020-09-23T08:50:18Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MDoxOFrOHWeZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MDoxOFrOHWeZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyODc3Ng==", "bodyText": "why do we filter TestRunParticipations here when we have the if else above?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493328776", "createdAt": "2020-09-23T08:50:18Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionService.java", "diffHunk": "@@ -106,28 +115,47 @@ public FileUploadSubmission handleFileUploadSubmission(FileUploadSubmission file\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of file upload Submissions\n      */\n-    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());\n+        }\n+        else {\n+            submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+        }\n         return submissions.stream().map(submission -> {\n             submission.getResult().setSubmission(null);\n             return (FileUploadSubmission) submission;\n         }).collect(Collectors.toList());\n     }\n \n     /**\n-     * Given an exercise id, find a random file upload submission for that exercise which still doesn't have any manual result. No manual result means that no user has started an\n-     * assessment for the corresponding submission yet.\n+     * Given an exercise id, find a random file upload submission for that exercise which still doesn't have any manual result.\n+     * No manual result means that no user has started an assessment for the corresponding submission yet.\n+     * For exam exercises we should also remove the test run participations as these should not be graded by the tutors.\n      *\n      * @param fileUploadExercise the exercise for which we want to retrieve a submission without manual result\n+     * @param removeTestRunParticipations flag to determine if test runs should be removed. This should be set to true for exam exercises\n      * @return a fileUploadSubmission without any manual result or an empty Optional if no submission without manual result could be found\n      */\n     @Transactional(readOnly = true)\n-    public Optional<FileUploadSubmission> getFileUploadSubmissionWithoutManualResult(FileUploadExercise fileUploadExercise) {\n+    public Optional<FileUploadSubmission> getRandomFileUploadSubmissionEligibleForNewAssessment(FileUploadExercise fileUploadExercise, boolean removeTestRunParticipations) {\n         Random random = new Random();\n-        var participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResults(fileUploadExercise.getId());\n-        var submissionsWithoutResult = participations.stream().map(StudentParticipation::findLatestSubmission).filter(Optional::isPresent).map(Optional::get)\n+        List<StudentParticipation> participations;\n+        if (removeTestRunParticipations) {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRun(fileUploadExercise.getId());\n+        }\n+        else {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResults(fileUploadExercise.getId());\n+        }\n+\n+        List<FileUploadSubmission> submissionsWithoutResult = participations.stream().filter(studentParticipation -> !studentParticipation.isTestRunParticipation())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d34fde32206570a0d2b0d35a30492481a064af2", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8d34fde32206570a0d2b0d35a30492481a064af2", "committedDate": "2020-09-23T10:26:37Z", "message": "revert change to circular dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23594f3d4db08340b08a546acfbc0fcb892ca72", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c23594f3d4db08340b08a546acfbc0fcb892ca72", "committedDate": "2020-09-23T11:17:49Z", "message": "refactor delete functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c9d4780785294c4aa6ad889c042e48133cec96", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f8c9d4780785294c4aa6ad889c042e48133cec96", "committedDate": "2020-09-23T11:44:00Z", "message": "refactor breakCircularDependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/778f8e54a5670a2b8ab206603cfd920c547ebd4a", "committedDate": "2020-09-23T11:45:16Z", "message": "fix merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1212dd9823f6c4162ca9a71c21fe7e0ccb586ec1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1212dd9823f6c4162ca9a71c21fe7e0ccb586ec1", "committedDate": "2020-09-23T12:59:42Z", "message": "fix delete test run"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NjM5MjIy", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494639222", "createdAt": "2020-09-23T13:07:44Z", "commit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNzo0NFrOHWs8tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNzo0NFrOHWs8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2NzE1Nw==", "bodyText": "remove console.log statement?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493567157", "createdAt": "2020-09-23T13:07:44Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/complaints/complaint-interactions.component.ts", "diffHunk": "@@ -47,6 +49,7 @@ export class ComplaintInteractionsComponent implements OnInit {\n      * Loads the number of allowed complaints and feedback requests\n      */\n     ngOnInit(): void {\n+        console.log('complaints active');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTk2Mjgy", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494596282", "createdAt": "2020-09-23T12:18:20Z", "commit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjoxODoyMFrOHWqF7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjoyMDozNVrOHWqOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUyMDM2Nw==", "bodyText": "Unused Import! Should be removed", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493520367", "createdAt": "2020-09-23T12:18:20Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -29,6 +29,7 @@\n import org.springframework.security.test.context.TestSecurityContextHolder;\n import org.springframework.stereotype.Service;\n import org.springframework.util.ResourceUtils;\n+import org.w3c.dom.Text;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUyMjQzNA==", "bodyText": "This looks weird! Please fix this", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493522434", "createdAt": "2020-09-23T12:20:35Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/tutor-exercise-dashboard.component.ts", "diffHunk": "@@ -131,6 +134,7 @@ export class TutorExerciseDashboardComponent implements OnInit, AfterViewInit {\n     ngOnInit(): void {\n         this.exerciseId = Number(this.route.snapshot.paramMap.get('exerciseId'));\n         this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.isTestRun = this.isTestRun = this.route.snapshot.url[3]?.toString() === 'test-run-tutor-dashboard';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3085be7fbafb2262e0636659493f7cc1d23affed", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/3085be7fbafb2262e0636659493f7cc1d23affed", "committedDate": "2020-09-23T13:34:58Z", "message": "fix nullpointer and fix delete for multiple referenced programming exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27ef44abd8b25df54bb8d9b6acbe2055d5bee58b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/27ef44abd8b25df54bb8d9b6acbe2055d5bee58b", "committedDate": "2020-09-23T15:00:32Z", "message": "code cleanup, improve tooltip for statusbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce4763cc0cced3255ad9c8328b0e429fc0c51a32", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ce4763cc0cced3255ad9c8328b0e429fc0c51a32", "committedDate": "2020-09-23T15:46:17Z", "message": "fix client test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODIyMTA3", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494822107", "createdAt": "2020-09-23T16:07:34Z", "commit": {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODM1NDc5", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494835479", "createdAt": "2020-09-23T16:23:02Z", "commit": {"oid": "ce4763cc0cced3255ad9c8328b0e429fc0c51a32"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTcxMjgx", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494571281", "createdAt": "2020-09-23T11:46:32Z", "commit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTo0NjozMlrOHWoVOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyMjo0OVrOHW2mAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTUxMw==", "bodyText": "examTestRun can be defined within the if block.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        examTestRun = instructors.stream().anyMatch(instructor -> instructor.getLogin().equals(principal.getName()));\n          \n          \n            \n                        boolean examTestRun = instructors.stream().anyMatch(instructor -> instructor.getLogin().equals(principal.getName()));", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493491513", "createdAt": "2020-09-23T11:46:32Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ComplaintService.java", "diffHunk": "@@ -64,10 +67,13 @@ public Complaint createComplaint(Complaint complaint, OptionalLong examId, Princ\n         StudentParticipation studentParticipation = (StudentParticipation) originalResult.getParticipation();\n         Participant participant = studentParticipation.getParticipant(); // Team or Student\n         Long courseId = studentParticipation.getExercise().getCourseViaExerciseGroupOrCourseMember().getId();\n+        boolean examTestRun;\n \n         if (examId.isPresent()) {\n             final Exam exam = examService.findOne(examId.getAsLong());\n-            if (!isTimeOfComplaintValid(exam)) {\n+            final List<User> instructors = userService.getInstructors(exam.getCourse());\n+            examTestRun = instructors.stream().anyMatch(instructor -> instructor.getLogin().equals(principal.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTc4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean examTestRun;", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493491780", "createdAt": "2020-09-23T11:46:49Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ComplaintService.java", "diffHunk": "@@ -64,10 +67,13 @@ public Complaint createComplaint(Complaint complaint, OptionalLong examId, Princ\n         StudentParticipation studentParticipation = (StudentParticipation) originalResult.getParticipation();\n         Participant participant = studentParticipation.getParticipant(); // Team or Student\n         Long courseId = studentParticipation.getExercise().getCourseViaExerciseGroupOrCourseMember().getId();\n+        boolean examTestRun;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMTM1MA==", "bodyText": "Is this done here for performance reasons?\nPlease add a short comment to describe why this is one in a catch block instead of doing this beforehand.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493501350", "createdAt": "2020-09-23T11:56:50Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamSubmissionService.java", "diffHunk": "@@ -62,7 +67,16 @@ public boolean isAllowedToSubmit(Exercise exercise, User user) {\n         if (isExamSubmission(exercise)) {\n             // Get the student exam if it was not passed to the function\n             Exam exam = exercise.getExerciseGroup().getExam();\n-            StudentExam studentExam = studentExamService.findOneWithExercisesByUserIdAndExamId(user.getId(), exam.getId());\n+            StudentExam studentExam;\n+            try {\n+                studentExam = studentExamService.findOneWithExercisesByUserIdAndExamId(user.getId(), exam.getId());\n+            }\n+            catch (EntityNotFoundException entityNotFoundException) {\n+                if (!isExamTestRunSubmission(exercise, user, exam)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMjY5Mg==", "bodyText": "Should we reuse the existing method for this check here? (The one usually used in REST Resources?)", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493502692", "createdAt": "2020-09-23T11:58:16Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamSubmissionService.java", "diffHunk": "@@ -80,6 +94,28 @@ public boolean isAllowedToSubmit(Exercise exercise, User user) {\n         return true;\n     }\n \n+    /**\n+     * Check if the submission is made as part of a test run exam\n+     * Only Instructors have access to test runs.\n+     * @param exercise the exercise\n+     * @param user the user\n+     * @param exam the exam\n+     * @return returns whether the submission is part of a test run exam.\n+     */\n+    private boolean isExamTestRunSubmission(Exercise exercise, User user, Exam exam) {\n+        // Check if user is an instructor or admin\n+        if (user.getGroups().contains(exam.getCourse().getInstructorGroupName()) || authorizationCheckService.isAdmin(user)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNDM2NA==", "bodyText": "Could this be simplified using .anyMatch()?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493504364", "createdAt": "2020-09-23T12:00:10Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamSubmissionService.java", "diffHunk": "@@ -80,6 +94,28 @@ public boolean isAllowedToSubmit(Exercise exercise, User user) {\n         return true;\n     }\n \n+    /**\n+     * Check if the submission is made as part of a test run exam\n+     * Only Instructors have access to test runs.\n+     * @param exercise the exercise\n+     * @param user the user\n+     * @param exam the exam\n+     * @return returns whether the submission is part of a test run exam.\n+     */\n+    private boolean isExamTestRunSubmission(Exercise exercise, User user, Exam exam) {\n+        // Check if user is an instructor or admin\n+        if (user.getGroups().contains(exam.getCourse().getInstructorGroupName()) || authorizationCheckService.isAdmin(user)) {\n+            // fetch all testRuns for the instructor\n+            List<StudentExam> testRuns = studentExamService.findAllTestRunsWithExercisesForUser(exam.getId(), user.getId());\n+            // count the test runs which contain this exercise\n+            final long numberOfTestRunsContainingExercise = testRuns.stream().filter(testRun -> testRun.getExercises().contains(exercise)).count();\n+            // if a test run contains the exercise, then the instructor is allowed to submit\n+            return numberOfTestRunsContainingExercise > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUxMTM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n          \n          \n            \n                                .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());\n          \n          \n            \n                        submissions = participations.stream().map(StudentParticipation::findLatestSubmission)\n          \n          \n            \n                                .filter(Optional::isPresent).map(Optional::get).collect(toList());", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493511364", "createdAt": "2020-09-23T12:08:07Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionService.java", "diffHunk": "@@ -106,28 +115,47 @@ public FileUploadSubmission handleFileUploadSubmission(FileUploadSubmission file\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of file upload Submissions\n      */\n-    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzMzQ5OQ==", "bodyText": "I think you have the same code for file upload also. Can you extract this into a protected method and pull it up SubmissionService?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493533499", "createdAt": "2020-09-23T12:32:32Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java", "diffHunk": "@@ -55,11 +57,18 @@ public ModelingSubmissionService(ModelingSubmissionRepository modelingSubmission\n      *\n      * @param exerciseId    - the id of the exercise we are interested into\n      * @param submittedOnly - if true, it returns only submission with submitted flag set to true\n+     * @param examMode - set flag to ignore exam test run submissions\n      * @return a list of modeling submissions for the given exercise id\n      */\n     @Transactional(readOnly = true)\n-    public List<ModelingSubmission> getModelingSubmissions(Long exerciseId, boolean submittedOnly) {\n-        List<StudentParticipation> participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+    public List<ModelingSubmission> getModelingSubmissions(Long exerciseId, boolean submittedOnly, boolean examMode) {\n+        List<StudentParticipation> participations;\n+        if (examMode) {\n+            participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseIdIgnoreTestRuns(exerciseId);\n+        }\n+        else {\n+            participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzNDc5Ng==", "bodyText": "Also, maybe there are similar cases in *SubmissionService classes with a if (examMode) else construct.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493534796", "createdAt": "2020-09-23T12:33:54Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java", "diffHunk": "@@ -55,11 +57,18 @@ public ModelingSubmissionService(ModelingSubmissionRepository modelingSubmission\n      *\n      * @param exerciseId    - the id of the exercise we are interested into\n      * @param submittedOnly - if true, it returns only submission with submitted flag set to true\n+     * @param examMode - set flag to ignore exam test run submissions\n      * @return a list of modeling submissions for the given exercise id\n      */\n     @Transactional(readOnly = true)\n-    public List<ModelingSubmission> getModelingSubmissions(Long exerciseId, boolean submittedOnly) {\n-        List<StudentParticipation> participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+    public List<ModelingSubmission> getModelingSubmissions(Long exerciseId, boolean submittedOnly, boolean examMode) {\n+        List<StudentParticipation> participations;\n+        if (examMode) {\n+            participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseIdIgnoreTestRuns(exerciseId);\n+        }\n+        else {\n+            participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzMzQ5OQ=="}, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzNzgyOQ==", "bodyText": "Switch map and filter as in FileUploadSubm..\nAlso, consider pulling this up.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493537829", "createdAt": "2020-09-23T12:37:14Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java", "diffHunk": "@@ -163,10 +181,20 @@ public ModelingSubmission lockModelingSubmissionWithoutResult(ModelingExercise m\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of modeling submissions\n      */\n-    public List<ModelingSubmission> getAllModelingSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<ModelingSubmission> getAllModelingSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4NDAyNA==", "bodyText": "Why AssessmentType.AUTOMATIC? What about AssessmentType.TEST_RUN?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493584024", "createdAt": "2020-09-23T13:24:48Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -241,9 +241,45 @@ public StudentParticipation startExercise(Exercise exercise, Participant partici\n                 }\n             }\n         }\n-        participation = save(participation);\n+        return save(participation);\n+    }\n \n-        return participation;\n+    /**\n+     * In order to distinguish test run submissions from student exam submissions we add a manual result to the test run submissions.\n+     * We add draft assessments with the instructor as assessor to the empty submissions in order to hide them from tutors for correction.\n+     * This way the submission appears to, and can only by assessed by, the instructor who created the test run.\n+     * @param participations The test run participations\n+     */\n+    public void markSubmissionsOfTestRunParticipations(List<StudentParticipation> participations) {\n+        for (final var participation : participations) {\n+            final Exercise exercise = participation.getExercise();\n+            Submission submission;\n+            if (participation instanceof ProgrammingExerciseParticipation) {\n+                Set<Submission> programmingSubmissions = new HashSet<>(submissionRepository.findAllByParticipationId(participation.getId()));\n+                participation.setSubmissions(programmingSubmissions);\n+                initializeSubmission(participation, exercise, null);\n+                submission = participation.getSubmissions().iterator().next();\n+                // required so that the tutor dashboard statistics are calculated correctly\n+                submission.setSubmitted(true);\n+            }\n+            else {\n+                submission = participation.getSubmissions().iterator().next();\n+            }\n+            submission.setSubmissionDate(ZonedDateTime.now());\n+            // We add a result for test runs with the user set as an assessor in order to make sure it doesnt show up for assessment for the tutors\n+            if (submission.getResult() == null) {\n+                Result result = new Result();\n+                result.setSubmission(submission);\n+                submission.setResult(result);\n+                result.setParticipation(submission.getParticipation());\n+                submission.getResult().setAssessor(participation.getStudent().get());\n+                submission.getResult().setAssessmentType(AssessmentType.AUTOMATIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNzYwMQ==", "bodyText": "Why is this ok as a fallback?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493717601", "createdAt": "2020-09-23T16:11:44Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -336,4 +340,118 @@ public Integer findMaxWorkingTimeByExamId(Long examId) {\n         log.debug(\"Request to find all distinct working times for Exam : {}\", examId);\n         return studentExamRepository.findAllDistinctWorkingTimesByExamId(examId);\n     }\n+\n+    /**\n+     * Generates a Student Exam marked as a testRun for the instructor to test the exam as a student would experience it.\n+     * Calls {@link StudentExamService#createTestRun and {@link ExamService#setUpTestRunExerciseParticipationsAndSubmissions}}\n+     * @param testRunConfiguration the configured studentExam\n+     * @return the created testRun studentExam\n+     */\n+    public StudentExam generateTestRun(StudentExam testRunConfiguration) {\n+        StudentExam testRun = createTestRun(testRunConfiguration);\n+        setUpTestRunExerciseParticipationsAndSubmissions(testRun.getId());\n+        return testRun;\n+    }\n+\n+    /**\n+     * Create TestRun student exam based on the configuration provided.\n+     *\n+     * @param testRunConfiguration Contains the exercises and working time for this test run\n+     * @return The created test run\n+     */\n+    private StudentExam createTestRun(StudentExam testRunConfiguration) {\n+        StudentExam testRun = new StudentExam();\n+        testRun.setExercises(testRunConfiguration.getExercises());\n+        testRun.setExam(testRunConfiguration.getExam());\n+        testRun.setWorkingTime(testRunConfiguration.getWorkingTime());\n+        testRun.setUser(userService.getUser());\n+        testRun.setTestRun(true);\n+        testRun.setSubmitted(false);\n+        testRun = studentExamRepository.save(testRun);\n+        return testRun;\n+    }\n+\n+    /**\n+     * Sets up the participations and submissions for all the exercises of the test run.\n+     * Calls {@link ExamService#setUpExerciseParticipationsAndSubmissions} to set up the exercise participations\n+     * and {@link ParticipationService#markSubmissionsOfTestRunParticipations} to mark them as test run participations\n+     *\n+     * @param testRunId the id of the TestRun\n+     */\n+    private void setUpTestRunExerciseParticipationsAndSubmissions(Long testRunId) {\n+        StudentExam testRun = studentExamRepository.findWithExercisesParticipationsSubmissionsById(testRunId, true)\n+                .orElseThrow(() -> new EntityNotFoundException(\"StudentExam with id: \\\"\" + testRunId + \"\\\" does not exist\"));\n+        List<StudentParticipation> generatedParticipations = Collections.synchronizedList(new ArrayList<>());\n+        examService.setUpExerciseParticipationsAndSubmissions(generatedParticipations, testRun);\n+        participationService.markSubmissionsOfTestRunParticipations(generatedParticipations);\n+    }\n+\n+    /**\n+     * Deletes a test run.\n+     * In case the participation is  not referenced by other test runs, the participation, submission, buildplans and repositories are deleted as well.\n+     * @param testRunId the id of the test run\n+     * @param instructorId the id of the instructor\n+     * @return the deleted test run\n+     */\n+    public StudentExam deleteTestRun(Long testRunId, Long instructorId) {\n+        StudentExam testRun = studentExamRepository.findWithExercisesParticipationsSubmissionsByIdForUser(testRunId, instructorId, true)\n+                .orElse(studentExamRepository.findWithExercisesParticipationsSubmissionsById(testRunId, true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxOTQzMA==", "bodyText": "First map, then filter for present.\nAlso, check with similar comments above.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493719430", "createdAt": "2020-09-23T16:14:19Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TextSubmissionService.java", "diffHunk": "@@ -235,10 +244,19 @@ public TextSubmission save(TextSubmission textSubmission) {\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of text Submissions\n      */\n-    public List<TextSubmission> getAllTextSubmissionsAssessedByTutorWithForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<TextSubmission> getAllTextSubmissionsAssessedByTutorWithForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMzg0Mw==", "bodyText": "This can be one migration!", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493723843", "createdAt": "2020-09-23T16:20:52Z", "author": {"login": "jpbernius"}, "path": "src/main/resources/config/liquibase/master.xml", "diffHunk": "@@ -80,4 +80,6 @@\n     <include file=\"classpath:config/liquibase/changelog/20200728142700_changelog.xml\" relativeToChangelogFile=\"false\"/>\n     <include file=\"classpath:config/liquibase/changelog/20200805101210_changelog.xml\" relativeToChangelogFile=\"false\"/>\n     <include file=\"classpath:config/liquibase/changelog/20200806141810_changelog.xml\" relativeToChangelogFile=\"false\"/>\n+    <include file=\"classpath:config/liquibase/changelog/20200908112330_changelog.xml\" relativeToChangelogFile=\"false\"/>\n+    <include file=\"classpath:config/liquibase/changelog/20200921155030_changelog.xml\" relativeToChangelogFile=\"false\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDU4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    console.log('complaints active');", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493724586", "createdAt": "2020-09-23T16:21:55Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/complaints/complaint-interactions.component.ts", "diffHunk": "@@ -47,6 +49,7 @@ export class ComplaintInteractionsComponent implements OnInit {\n      * Loads the number of allowed complaints and feedback requests\n      */\n     ngOnInit(): void {\n+        console.log('complaints active');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNTE4Ng==", "bodyText": "You only need to switch the translation string conditionally.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493725186", "createdAt": "2020-09-23T16:22:49Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/course/dashboards/tutor-course-dashboard/tutor-course-dashboard.component.html", "diffHunk": "@@ -4,7 +4,8 @@\n             <h2>\n                 <fa-icon [icon]=\"'arrow-left'\" (click)=\"back()\" class=\"back-button mr-2\"></fa-icon>\n                 <h2 *ngIf=\"!isExamMode\">{{ 'artemisApp.tutorCourseDashboard.pageHeader' | translate }} {{ course?.title }}</h2>\n-                <h2 *ngIf=\"isExamMode\">{{ 'artemisApp.tutorCourseDashboard.pageHeaderExam' | translate }} {{ exam?.title }}</h2>\n+                <h2 *ngIf=\"isExamMode && !isTestRun\">{{ 'artemisApp.tutorCourseDashboard.pageHeaderExam' | translate }} {{ exam?.title }}</h2>\n+                <h2 *ngIf=\"isExamMode && isTestRun\">{{ 'artemisApp.tutorCourseDashboard.pageHeaderExamTestRun' | translate }} {{ exam?.title }}</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c443779982ad73b5f7c969264a370b24c206f78"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "328b0c2043953041e3da7a6203a8fdc4efe37575", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/328b0c2043953041e3da7a6203a8fdc4efe37575", "committedDate": "2020-09-23T16:26:53Z", "message": "fix codestyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69acec46f86e280720e19050e00246acb22a9d0f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/69acec46f86e280720e19050e00246acb22a9d0f", "committedDate": "2020-09-23T17:04:57Z", "message": "move boolean inside if clause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb42ccc0154d3247849e99e0b8e7130af02aac3", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8fb42ccc0154d3247849e99e0b8e7130af02aac3", "committedDate": "2020-09-23T17:05:48Z", "message": "simplify check and add comment to describe rationale"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad133719f0f0c316287bfa038a00989c9bd3b7fe", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ad133719f0f0c316287bfa038a00989c9bd3b7fe", "committedDate": "2020-09-23T17:09:21Z", "message": "utilise inheritance to reduce code duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "781a856380be212ce234c33771cbcc231572e4c1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/781a856380be212ce234c33771cbcc231572e4c1", "committedDate": "2020-09-23T17:33:22Z", "message": "use inheritance to reduce code duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2705ce2342b4034e2d23269c85e2bb7112b95130", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2705ce2342b4034e2d23269c85e2bb7112b95130", "committedDate": "2020-09-23T17:33:57Z", "message": "mark test run assessments using new assessment type TEST_RUN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8111f8f1b9965ef189e6be645b839d9338416cf0", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8111f8f1b9965ef189e6be645b839d9338416cf0", "committedDate": "2020-09-23T17:44:40Z", "message": "merge data changesets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "488d9189189d5a4ef48ea0717b95cd9fe6656810", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/488d9189189d5a4ef48ea0717b95cd9fe6656810", "committedDate": "2020-09-23T17:58:30Z", "message": "only need to switch the translation string conditionally."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTM2MzMx", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494936331", "createdAt": "2020-09-23T18:32:16Z", "commit": {"oid": "488d9189189d5a4ef48ea0717b95cd9fe6656810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTUzNzgy", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494953782", "createdAt": "2020-09-23T18:49:10Z", "commit": {"oid": "488d9189189d5a4ef48ea0717b95cd9fe6656810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTU2MjU3", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-494956257", "createdAt": "2020-09-23T18:52:29Z", "commit": {"oid": "488d9189189d5a4ef48ea0717b95cd9fe6656810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDE0NDA4", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-495014408", "createdAt": "2020-09-23T20:15:46Z", "commit": {"oid": "488d9189189d5a4ef48ea0717b95cd9fe6656810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810bd782bb5aef35f70ec033568abd6a7a966393", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/810bd782bb5aef35f70ec033568abd6a7a966393", "committedDate": "2020-09-23T22:27:52Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "committedDate": "2020-09-24T05:51:39Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM5MDY4", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-495239068", "createdAt": "2020-09-24T05:55:15Z", "commit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxNVrOHXKu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxNVrOHXKu_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE2Nw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExamForTestRunDashboard_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055167", "createdAt": "2020-09-24T05:55:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -735,6 +735,98 @@ public void testDeleteStudentWithParticipationsAndSubmissions() throws Exception\n         request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam.getId(), HttpStatus.OK);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteExamWithOneTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRunWithReferencedParticipations() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun1 = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun2 = new StudentExam();\n+        testRun2.setTestRun(true);\n+        testRun2.setExam(testRun1.getExam());\n+        testRun2.setUser(instructor);\n+        testRun2.setExercises(testRun1.getExercises());\n+        testRun2.setWorkingTime(testRun1.getWorkingTime());\n+        studentExamRepository.save(testRun2);\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun2.getId(), HttpStatus.OK);\n+        SecurityUtils.setAuthorizationObject();\n+        var testRunList = studentExamRepository.findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(exam1.getId());\n+        assertThat(testRunList.size()).isEqualTo(1);\n+        testRunList.get(0).getExercises().forEach(exercise -> assertThat(exercise.getStudentParticipations()).isNotEmpty());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testDeleteTestRunAsTutor() throws Exception {\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + 1, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetExamForTestRunDashboard_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM5MDc5", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-495239079", "createdAt": "2020-09-24T05:55:16Z", "commit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxNlrOHXKvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxNlrOHXKvCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE3OA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExamForTestRunDashboard_ok' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055178", "createdAt": "2020-09-24T05:55:16Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -735,6 +735,98 @@ public void testDeleteStudentWithParticipationsAndSubmissions() throws Exception\n         request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam.getId(), HttpStatus.OK);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteExamWithOneTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRunWithReferencedParticipations() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun1 = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun2 = new StudentExam();\n+        testRun2.setTestRun(true);\n+        testRun2.setExam(testRun1.getExam());\n+        testRun2.setUser(instructor);\n+        testRun2.setExercises(testRun1.getExercises());\n+        testRun2.setWorkingTime(testRun1.getWorkingTime());\n+        studentExamRepository.save(testRun2);\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun2.getId(), HttpStatus.OK);\n+        SecurityUtils.setAuthorizationObject();\n+        var testRunList = studentExamRepository.findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(exam1.getId());\n+        assertThat(testRunList.size()).isEqualTo(1);\n+        testRunList.get(0).getExercises().forEach(exercise -> assertThat(exercise.getStudentParticipations()).isNotEmpty());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testDeleteTestRunAsTutor() throws Exception {\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + 1, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetExamForTestRunDashboard_forbidden() throws Exception {\n+        request.get(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/for-exam-tutor-test-run-dashboard\", HttpStatus.FORBIDDEN, Exam.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamForTestRunDashboard_conflict() throws Exception {\n+        request.get(\"/api/courses/\" + course2.getId() + \"/exams/\" + exam1.getId() + \"/for-exam-tutor-test-run-dashboard\", HttpStatus.CONFLICT, Exam.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamForTestRunDashboard_ok() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM5MDg1", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-495239085", "createdAt": "2020-09-24T05:55:17Z", "commit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxN1rOHXKvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxN1rOHXKvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE4OQ==", "bodyText": "Codacy found an issue: Avoid long parameter lists.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055189", "createdAt": "2020-09-24T05:55:17Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -53,11 +53,14 @@\n \n     private final ProgrammingExerciseParticipationService programmingExerciseParticipationService;\n \n-    public StudentExamService(StudentExamRepository studentExamRepository, ParticipationService participationService, QuizSubmissionRepository quizSubmissionRepository,\n-            TextSubmissionRepository textSubmissionRepository, ModelingSubmissionRepository modelingSubmissionRepository, SubmissionVersionService submissionVersionService,\n-            ProgrammingExerciseParticipationService programmingExerciseParticipationService, ProgrammingSubmissionRepository programmingSubmissionRepository) {\n+    public StudentExamService(StudentExamRepository studentExamRepository, ExamService examService, UserService userService, ParticipationService participationService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM5MDkx", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-495239091", "createdAt": "2020-09-24T05:55:18Z", "commit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxOFrOHXKvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxOFrOHXKvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE5NQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExamForTestRunDashboard_conflict' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055195", "createdAt": "2020-09-24T05:55:18Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -735,6 +735,98 @@ public void testDeleteStudentWithParticipationsAndSubmissions() throws Exception\n         request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam.getId(), HttpStatus.OK);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteExamWithOneTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRunWithReferencedParticipations() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun1 = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun2 = new StudentExam();\n+        testRun2.setTestRun(true);\n+        testRun2.setExam(testRun1.getExam());\n+        testRun2.setUser(instructor);\n+        testRun2.setExercises(testRun1.getExercises());\n+        testRun2.setWorkingTime(testRun1.getWorkingTime());\n+        studentExamRepository.save(testRun2);\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun2.getId(), HttpStatus.OK);\n+        SecurityUtils.setAuthorizationObject();\n+        var testRunList = studentExamRepository.findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(exam1.getId());\n+        assertThat(testRunList.size()).isEqualTo(1);\n+        testRunList.get(0).getExercises().forEach(exercise -> assertThat(exercise.getStudentParticipations()).isNotEmpty());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testDeleteTestRunAsTutor() throws Exception {\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + 1, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetExamForTestRunDashboard_forbidden() throws Exception {\n+        request.get(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/for-exam-tutor-test-run-dashboard\", HttpStatus.FORBIDDEN, Exam.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamForTestRunDashboard_conflict() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM5MDk4", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-495239098", "createdAt": "2020-09-24T05:55:19Z", "commit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxOVrOHXKvKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1NToxOVrOHXKvKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTIwOA==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Collectors.toList' due to existing static import 'java.util.stream.Collectors.toList'", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055208", "createdAt": "2020-09-24T05:55:19Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionService.java", "diffHunk": "@@ -126,6 +136,61 @@ public long countSubmissionLocks(long courseId) {\n         return submissionRepository.getLockedSubmissionsByUserIdAndCourseId(userService.getUserWithGroupsAndAuthorities().getId(), courseId);\n     }\n \n+    /**\n+     * Given an exercise id and a tutor id, it returns all the submissions where the tutor has a result associated.\n+     *\n+     * @param exerciseId - the id of the exercise we are looking for\n+     * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n+     * @return a list of Submissions\n+     */\n+    protected List<Submission> getAllSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().map(StudentParticipation::findLatestSubmission).filter(Optional::isPresent).map(Optional::get).collect(toList());\n+        }\n+        else {\n+            submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+        }\n+\n+        submissions.forEach(submission -> submission.getResult().setSubmission(null));\n+        return submissions;\n+    }\n+\n+    /**\n+     * Given an exercise id, find a random submission for that exercise which still doesn't have any manual result.\n+     * No manual result means that no user has started an assessment for the corresponding submission yet.\n+     * For exam exercises we should also remove the test run participations as these should not be graded by the tutors.\n+     *\n+     * @param fileUploadExercise the exercise for which we want to retrieve a submission without manual result\n+     * @param examMode flag to determine if test runs should be removed. This should be set to true for exam exercises\n+     * @return a submission without any manual result or an empty Optional if no submission without manual result could be found\n+     */\n+    @Transactional(readOnly = true)\n+    public Optional<Submission> getRandomSubmissionEligibleForNewAssessment(Exercise fileUploadExercise, boolean examMode) {\n+        Random random = new Random();\n+        List<StudentParticipation> participations;\n+        if (examMode) {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRun(fileUploadExercise.getId());\n+        }\n+        else {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResults(fileUploadExercise.getId());\n+        }\n+\n+        List<Submission> submissionsWithoutResult = participations.stream().map(StudentParticipation::findLatestSubmission).filter(Optional::isPresent).map(Optional::get)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba95f7a66519db4719e47cf84728cc711f6032a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/dba95f7a66519db4719e47cf84728cc711f6032a", "committedDate": "2020-09-04T13:24:36Z", "message": "Add test run management page and button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71fca9f231da8fe91031910b4d37de46073fd6f1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/71fca9f231da8fe91031910b4d37de46073fd6f1", "committedDate": "2020-09-04T19:54:00Z", "message": "implement test run management view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df5982698b8ac296998e0f71b399c3dbb240cac", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7df5982698b8ac296998e0f71b399c3dbb240cac", "committedDate": "2020-09-04T19:54:32Z", "message": "refactor translation strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df8b5e0acb0ef990048183706be6c6449a63880d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/df8b5e0acb0ef990048183706be6c6449a63880d", "committedDate": "2020-09-05T07:11:39Z", "message": "identify if testrun in the tutor dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5faa501e60c73a8d3abb82e43e7a9aacc45d09b4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5faa501e60c73a8d3abb82e43e7a9aacc45d09b4", "committedDate": "2020-09-05T07:50:40Z", "message": "create singular assess test runs button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26fef40a2a77fb02038323726ef4705dc94744b5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/26fef40a2a77fb02038323726ef4705dc94744b5", "committedDate": "2020-09-05T07:59:12Z", "message": "disable assess test run button if view is loading, set isExamStarted flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b087de003fa956c65acf256c834566aeb9ca6f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a2b087de003fa956c65acf256c834566aeb9ca6f", "committedDate": "2020-09-06T11:07:34Z", "message": "Add manage working time button\nremove load course, just check permissions\nAdd test run modal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86bf8721f7fb5471e0f5f33df91ac7e3662748d3", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/86bf8721f7fb5471e0f5f33df91ac7e3662748d3", "committedDate": "2020-09-06T16:49:52Z", "message": "create the configure test run modal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4c09c6c73014d0dc118208d473d3cd5bd68e7b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9c4c09c6c73014d0dc118208d473d3cd5bd68e7b", "committedDate": "2020-09-06T18:07:53Z", "message": "add working time configuration to modal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06594d58aad5168d6e221eb5f207d37f44bcfdd", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e06594d58aad5168d6e221eb5f207d37f44bcfdd", "committedDate": "2020-09-08T17:52:05Z", "message": "Add client calls and fix layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "033903efbeb300d6dd8436a74795890623324975", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/033903efbeb300d6dd8436a74795890623324975", "committedDate": "2020-09-08T17:52:55Z", "message": "Add testRun column to studentExam"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7ebd26492998623a064ec7a326c48fb616dc6ff", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f7ebd26492998623a064ec7a326c48fb616dc6ff", "committedDate": "2020-09-08T17:58:58Z", "message": "Change the studentExam repository calls to ignore the test runs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ee3710175b9018514d6cf750c35ab9d6af2ad1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/70ee3710175b9018514d6cf750c35ab9d6af2ad1", "committedDate": "2020-09-08T18:10:19Z", "message": "Add the server routes for creating deleting test runs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eacc724360f78a97ffb2e18af683fe6e56e00eb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9eacc724360f78a97ffb2e18af683fe6e56e00eb", "committedDate": "2020-09-09T14:59:55Z", "message": "Fix CRUD operations for student exams and test runs, make sure they dont interfere with eachother"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd34bef05a935330335f38e3babd5135a10c510d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/bd34bef05a935330335f38e3babd5135a10c510d", "committedDate": "2020-09-09T15:59:40Z", "message": "adapt test run management view to handle test runs from multiple instructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82515015b6128637453f62488c9698500b68ff49", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/82515015b6128637453f62488c9698500b68ff49", "committedDate": "2020-09-09T20:21:31Z", "message": "add the test run conduction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fba2817b76373a6fb1e91ff097ef0fd860462b8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7fba2817b76373a6fb1e91ff097ef0fd860462b8", "committedDate": "2020-09-10T14:02:37Z", "message": "fix test run conduction and exercise submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2432980f725c7a23e1dbda83c95e6991d456324a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2432980f725c7a23e1dbda83c95e6991d456324a", "committedDate": "2020-09-11T11:44:26Z", "message": "Tutor dashboard ignores test run submissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f95031023aa90a38cdeeb445f57388b599c8c5d8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f95031023aa90a38cdeeb445f57388b599c8c5d8", "committedDate": "2020-09-11T12:00:41Z", "message": "fix assessment detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32b183cda31b433480896ea0b99a320651f9bb28", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/32b183cda31b433480896ea0b99a320651f9bb28", "committedDate": "2020-09-13T20:45:36Z", "message": "refactor test run submissions, add result when first creating student exam"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d18e5d2ad99804ac9e495ce2e2a5559e333276f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9d18e5d2ad99804ac9e495ce2e2a5559e333276f", "committedDate": "2020-09-13T20:46:23Z", "message": "ignore instructor participations (test runs) in exam scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2da5996f67fa5a2c1e4e6bb3d937f9b1a6b3fa", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4a2da5996f67fa5a2c1e4e6bb3d937f9b1a6b3fa", "committedDate": "2020-09-15T05:25:18Z", "message": "allow complaints for test runs, fix assessment counter to ignore test runs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02eb6c24e232e9118b35113ee6cebecd23e1ab31", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/02eb6c24e232e9118b35113ee6cebecd23e1ab31", "committedDate": "2020-09-15T05:26:50Z", "message": "Fix integration tests:\nAdd testRun= false to student exam generation\nDo not add studentExams for isntructors as their participations are ignored from the scores calculation. Their submissions are exclusive for test runs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a2b02dfcc0714103771c3e98635c63d1c2bf17", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/80a2b02dfcc0714103771c3e98635c63d1c2bf17", "committedDate": "2020-09-15T05:33:21Z", "message": "fix client code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87f1fc641f41e8dd4e376eb852b0fc505bce0b8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f87f1fc641f41e8dd4e376eb852b0fc505bce0b8", "committedDate": "2020-09-15T06:08:44Z", "message": "fix codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd6f417eaeb056f19ea311215009e54283474cb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/edd6f417eaeb056f19ea311215009e54283474cb", "committedDate": "2020-09-15T12:17:39Z", "message": "fix back buttons to return to test run dashboards. Allow complaints for test runs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e03545494a9d221b7280503bfaa566382b991148", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/e03545494a9d221b7280503bfaa566382b991148", "committedDate": "2020-09-15T13:50:09Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f98193ff148b8ec8b7da6721548a9100959a08", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/14f98193ff148b8ec8b7da6721548a9100959a08", "committedDate": "2020-09-15T14:31:19Z", "message": "add test run ribbon to clearly indicate test run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "963e2f5867792491fe87ac7d009de1ab753afc8a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/963e2f5867792491fe87ac7d009de1ab753afc8a", "committedDate": "2020-09-15T14:32:29Z", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acec654ae950d0ebe7fc9e033b057c5fbc8a79f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6acec654ae950d0ebe7fc9e033b057c5fbc8a79f", "committedDate": "2020-09-16T08:58:28Z", "message": "improve display of test run exercise display"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d6571b69e6c14ae523e2dc6db6e3feea20efaa", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/95d6571b69e6c14ae523e2dc6db6e3feea20efaa", "committedDate": "2020-09-16T09:38:06Z", "message": "reduce nPath complexity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22540becc0804c1cc9b90ba7464a41c6106c0079", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/22540becc0804c1cc9b90ba7464a41c6106c0079", "committedDate": "2020-09-16T11:00:02Z", "message": "fix null pointers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ed12e6477fba48b46dcbc4dba42e43dbe815ad", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f1ed12e6477fba48b46dcbc4dba42e43dbe815ad", "committedDate": "2020-09-16T11:42:09Z", "message": "save participation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cec10190a1f06f28cb6b81284ab16e123955d8b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4cec10190a1f06f28cb6b81284ab16e123955d8b", "committedDate": "2020-09-16T12:25:06Z", "message": "fix linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f76213a8624d5e53f71f3dbcb79d2bf98fa63819", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/f76213a8624d5e53f71f3dbcb79d2bf98fa63819", "committedDate": "2020-09-16T13:04:54Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6002d153db238d912bb5b8801a52b769e4091f4e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6002d153db238d912bb5b8801a52b769e4091f4e", "committedDate": "2020-09-16T15:33:35Z", "message": "refactor calculation of tutor dashboard stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "137ec3f030e5a9f9473f3675ab0c8397e81fb733", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/137ec3f030e5a9f9473f3675ab0c8397e81fb733", "committedDate": "2020-09-17T06:59:06Z", "message": "Refactor test run statistic deduction and resuse for exercise dashboard\nfix circular dependency\ndo not allow tutors to create a test run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af558f26ad37bad57ba7a7ceabbaf9b8015b5090", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/af558f26ad37bad57ba7a7ceabbaf9b8015b5090", "committedDate": "2020-09-17T08:49:12Z", "message": "fix dashboard view for test run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6921629bf5d052cdde2d7f8da769f176abcc38b4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6921629bf5d052cdde2d7f8da769f176abcc38b4", "committedDate": "2020-09-17T08:51:08Z", "message": "only remove test run submissions from statistics if it is exam mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2039a39590af35852bd9b06a3c8259f6bc3b40a6", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2039a39590af35852bd9b06a3c8259f6bc3b40a6", "committedDate": "2020-09-17T09:08:35Z", "message": "filter out test run submissions from the normal tutor/instructor dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2b46078a03286307cef5efcfb8bf52a50b6f15", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2e2b46078a03286307cef5efcfb8bf52a50b6f15", "committedDate": "2020-09-17T09:53:02Z", "message": "only show own test run submissions for test run dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30091dfc79e4cfb3dbd301515a6f0301805812a0", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/30091dfc79e4cfb3dbd301515a6f0301805812a0", "committedDate": "2020-09-17T10:09:07Z", "message": "add author of testruns to test run management\nhide quiz exercises from test run dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8a23b9044e5e2189f5307db43202a031769cac", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/be8a23b9044e5e2189f5307db43202a031769cac", "committedDate": "2020-09-17T12:40:25Z", "message": "codacy improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9a5bbfb6cf7581d6b35b7737e546ab743d9489", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/bc9a5bbfb6cf7581d6b35b7737e546ab743d9489", "committedDate": "2020-09-17T12:52:20Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdfeded2abf4717a50635a7814b60766471f845", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/dfdfeded2abf4717a50635a7814b60766471f845", "committedDate": "2020-09-17T22:59:57Z", "message": "fix statistic calculation for programming exercises\nrefactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e566aafe7e22ab1ef752e04299436e5401dba9", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e3e566aafe7e22ab1ef752e04299436e5401dba9", "committedDate": "2020-09-18T12:33:44Z", "message": "refactor testRun participation detection, move to utility method in class StudentParticipation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b067cc9f7d2958d249b60f14d73f255bb9f6477e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b067cc9f7d2958d249b60f14d73f255bb9f6477e", "committedDate": "2020-09-18T17:40:09Z", "message": "code cleanup, fix programming code editor assessment view for test runs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce98e87cf7498b7865c84569a01ceafe723c74d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/fce98e87cf7498b7865c84569a01ceafe723c74d", "committedDate": "2020-09-18T17:42:55Z", "message": "block tutors from fetching test run assessments with \"next assessment\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7bf8c75e90a4c5b7b4ffe632df0338588b0b2ec", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c7bf8c75e90a4c5b7b4ffe632df0338588b0b2ec", "committedDate": "2020-09-18T17:55:35Z", "message": "do not delete test runs when generating student exams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca0e4a3bd00a851f5c26519fffe0fd9ebf39a8c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8ca0e4a3bd00a851f5c26519fffe0fd9ebf39a8c", "committedDate": "2020-09-18T18:57:33Z", "message": "fix server tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8733400efcb0bf584baa484e2daa7cef0338a48", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d8733400efcb0bf584baa484e2daa7cef0338a48", "committedDate": "2020-09-21T14:25:43Z", "message": "extend abstractAuditingEntity for student exams to help with administrative tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758383960d0f05968e561d31988a225327e81582", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/758383960d0f05968e561d31988a225327e81582", "committedDate": "2020-09-21T18:56:04Z", "message": "Do not display a checkmark when the programming exercise was initially loaded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d683ec8a64c2b96c5fad86df6e215580729a9dd", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0d683ec8a64c2b96c5fad86df6e215580729a9dd", "committedDate": "2020-09-21T18:59:22Z", "message": "fix mapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4abf5e33fcd83bd31548d96558e88fbdde1fabb5", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/4abf5e33fcd83bd31548d96558e88fbdde1fabb5", "committedDate": "2020-09-21T19:06:55Z", "message": "Merge remote-tracking branch 'origin/enhancement/fix-programming-exam-nav-bar-status' into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46bc766c49c9c9a2258af81b98fb0dca4374187d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/46bc766c49c9c9a2258af81b98fb0dca4374187d", "committedDate": "2020-09-21T19:11:55Z", "message": "fix server test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c032064c027657a5d8a09dee1a0e499f65881b74", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c032064c027657a5d8a09dee1a0e499f65881b74", "committedDate": "2020-09-21T19:13:17Z", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1033b8745a980f63a25387e5deb10c3b564132f5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1033b8745a980f63a25387e5deb10c3b564132f5", "committedDate": "2020-09-21T19:15:58Z", "message": "update to java version 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efe848b46757fb317299b960745eea399b89f066", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/efe848b46757fb317299b960745eea399b89f066", "committedDate": "2020-09-21T19:22:34Z", "message": "Bump github build action to Java 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a0250803dcdfc1e5953f00688ae396c643e2ff", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/43a0250803dcdfc1e5953f00688ae396c643e2ff", "committedDate": "2020-09-21T19:27:43Z", "message": "Bump Java for codeQL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0c9cc35cd0b00faacc2fa129e6becc1809d35f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7e0c9cc35cd0b00faacc2fa129e6becc1809d35f", "committedDate": "2020-09-21T19:40:42Z", "message": "Revert \"Bump Java for codeQL\"\n\nThis reverts commit 43a0250803dcdfc1e5953f00688ae396c643e2ff."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cde9ab4f4bb98e0bbfc35c1b176136c9eb5a264", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9cde9ab4f4bb98e0bbfc35c1b176136c9eb5a264", "committedDate": "2020-09-21T19:40:50Z", "message": "Revert \"Bump github build action to Java 15\"\n\nThis reverts commit efe848b46757fb317299b960745eea399b89f066."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d58a2eb61f27974f670113c51703c46e617f7de", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6d58a2eb61f27974f670113c51703c46e617f7de", "committedDate": "2020-09-21T19:40:54Z", "message": "Revert \"update to java version 15\"\n\nThis reverts commit 1033b8745a980f63a25387e5deb10c3b564132f5."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b24958643ad12e0f9287514ae9e48ab3d9c2f37", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9b24958643ad12e0f9287514ae9e48ab3d9c2f37", "committedDate": "2020-09-21T19:42:24Z", "message": "remove enable preview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9466ef6fe58a6220084df68b3002c09b532ff617", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9466ef6fe58a6220084df68b3002c09b532ff617", "committedDate": "2020-09-21T19:49:04Z", "message": "remove preview features"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b2dbba79a09eeb614ed4001615803926022824", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a0b2dbba79a09eeb614ed4001615803926022824", "committedDate": "2020-09-21T20:27:06Z", "message": "update liquibase master.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9adfded4dc26b80660b8edea7993d1997f221327", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9adfded4dc26b80660b8edea7993d1997f221327", "committedDate": "2020-09-21T20:29:33Z", "message": "enable preview for server tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b873501fb2080cac34f631f08f7b04cd46f2b9", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/29b873501fb2080cac34f631f08f7b04cd46f2b9", "committedDate": "2020-09-21T21:06:07Z", "message": "Fix tooltip for programming exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ff26d14ba91bc3a7d5e18b4952fa2524a506a1", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/06ff26d14ba91bc3a7d5e18b4952fa2524a506a1", "committedDate": "2020-09-21T21:06:58Z", "message": "Merge branch 'feature/exam/test-run-server' of https://github.com/ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56173dc1dcaa2a707c34e234ae756b7a88e4c586", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/56173dc1dcaa2a707c34e234ae756b7a88e4c586", "committedDate": "2020-09-22T13:12:01Z", "message": "ignore test run submissions directly on the database for counting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a0d62b19e52560231f9f7bf7606d85067b9cf8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e4a0d62b19e52560231f9f7bf7606d85067b9cf8", "committedDate": "2020-09-22T13:12:30Z", "message": "make codacy proud"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb707bb62b1aca587ec3956b96dc9407760d9be", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ebb707bb62b1aca587ec3956b96dc9407760d9be", "committedDate": "2020-09-22T13:13:10Z", "message": "add server integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f5c9bcd7b8d2e7214eda0e1efe33310a41ad2e1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6f5c9bcd7b8d2e7214eda0e1efe33310a41ad2e1", "committedDate": "2020-09-22T13:18:27Z", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f95e74133663c4242aa8d7075ecbdc951b9e2f9", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1f95e74133663c4242aa8d7075ecbdc951b9e2f9", "committedDate": "2020-09-22T13:37:52Z", "message": "fix query for late submissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09bbf8cbd83be9f68642c4ba5c34287c2bae9cd4", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/09bbf8cbd83be9f68642c4ba5c34287c2bae9cd4", "committedDate": "2020-09-22T13:41:59Z", "message": "Sync nav bar when correctly when pushing from IDE."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11170e35948e87777a6f53e28a186c8240c6acec", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/11170e35948e87777a6f53e28a186c8240c6acec", "committedDate": "2020-09-22T13:46:37Z", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a538f5f72ccc75053a9fcf3c7d8c743f76ea78", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/43a538f5f72ccc75053a9fcf3c7d8c743f76ea78", "committedDate": "2020-09-22T13:46:54Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8974195cc6c51be7c259ed64610d477cded5bbbf", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8974195cc6c51be7c259ed64610d477cded5bbbf", "committedDate": "2020-09-22T14:06:32Z", "message": "add tests for the isTestRun flag: allow assessors to respond to own complaint and hide assess next button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156b4b24661d15ae1b1d88a1199ab469caf2c1bd", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/156b4b24661d15ae1b1d88a1199ab469caf2c1bd", "committedDate": "2020-09-22T14:06:50Z", "message": "fix documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78728748fd06710243db1418a75377bdfcf3f6d", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/d78728748fd06710243db1418a75377bdfcf3f6d", "committedDate": "2020-09-22T14:33:47Z", "message": "Test for test run management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a98504b33d8aa3833bf8bcbb85af862bba1c13e", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/7a98504b33d8aa3833bf8bcbb85af862bba1c13e", "committedDate": "2020-09-22T14:34:04Z", "message": "Merge branch 'feature/exam/test-run-server' of https://github.com/ls1intum/Artemis into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d3bd2a03cc04d1b137026dbb734765b2924c8b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b8d3bd2a03cc04d1b137026dbb734765b2924c8b", "committedDate": "2020-09-22T15:56:59Z", "message": "add client tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c78036d7b191adf1457d597dbec7a2cb86273058", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c78036d7b191adf1457d597dbec7a2cb86273058", "committedDate": "2020-09-22T16:44:42Z", "message": "fix bug where test run submissions were shown on tutor dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86aacf88a6da319ea56f074c40bff390ce0ca305", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/86aacf88a6da319ea56f074c40bff390ce0ca305", "committedDate": "2020-09-22T17:03:55Z", "message": "Revert \"fix bug where test run submissions were shown on tutor dashboard\"\n\nThis reverts commit c78036d7b191adf1457d597dbec7a2cb86273058."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af2572798b61fca8c663a6a1ef582b1a2b0ae66", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/3af2572798b61fca8c663a6a1ef582b1a2b0ae66", "committedDate": "2020-09-22T17:04:14Z", "message": "add integration test for test run dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f673479cbe31479fd09b453fe15d1958306acdac", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f673479cbe31479fd09b453fe15d1958306acdac", "committedDate": "2020-09-22T17:36:18Z", "message": "Revert \"Revert \"fix bug where test run submissions were shown on tutor dashboard\"\"\n\nThis reverts commit 86aacf88a6da319ea56f074c40bff390ce0ca305."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b91b555a0b8ad3f5298ffdad0cd2316829dd21", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/25b91b555a0b8ad3f5298ffdad0cd2316829dd21", "committedDate": "2020-09-22T17:36:40Z", "message": "improve query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72dfca8d8b136b4e359eb08081e13430d99042fb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/72dfca8d8b136b4e359eb08081e13430d99042fb", "committedDate": "2020-09-22T18:03:39Z", "message": "fix codestyle and uncought promise exception when canceling modal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79476aaceab6ba2eadffd6d0f11527d77bda9814", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/79476aaceab6ba2eadffd6d0f11527d77bda9814", "committedDate": "2020-09-22T19:46:26Z", "message": "make codacy happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2d189067470549910bf5be3ce6cdfd0178172a30", "committedDate": "2020-09-22T19:55:30Z", "message": "remove test run submissions participations and scores from the specific exercise view if in exam mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19279a16c1c6ec5ed6f8a2deb118f0e56b2ce17d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/19279a16c1c6ec5ed6f8a2deb118f0e56b2ce17d", "committedDate": "2020-09-22T20:10:38Z", "message": "fix java tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5674b3233824694d42d21dcc5488e997b2b5b63", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c5674b3233824694d42d21dcc5488e997b2b5b63", "committedDate": "2020-09-22T20:54:26Z", "message": "increase test coverage of studentExamService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58bdcd215649c172a124baa753bbab1cbb58194", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/a58bdcd215649c172a124baa753bbab1cbb58194", "committedDate": "2020-09-22T21:15:04Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzU3ODk2", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-493757896", "createdAt": "2020-09-22T18:57:00Z", "commit": {"oid": "72dfca8d8b136b4e359eb08081e13430d99042fb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo1NzowMFrOHWIKuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyODo1OFrOHWNCzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NDUzNw==", "bodyText": "Should this change be reverted before the merge?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r492964537", "createdAt": "2020-09-22T18:57:00Z", "author": {"login": "kloessst"}, "path": "build.gradle", "diffHunk": "@@ -91,9 +91,6 @@ springBoot {\n     mainClassName = \"de.tum.in.www1.artemis.ArtemisApp\"\n }\n \n-tasks.withType(JavaCompile).each {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72dfca8d8b136b4e359eb08081e13430d99042fb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5OTI3Mg==", "bodyText": "Don't you need to check for exam mode here as well?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r492999272", "createdAt": "2020-09-22T20:01:34Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ComplaintResponseService.java", "diffHunk": "@@ -114,6 +115,11 @@ private boolean isUserAuthorizedToRespondToComplaint(StudentParticipation partic\n             return assessor.equals(reviewer);\n         }\n         else if (complaint.getComplaintType() == null || complaint.getComplaintType().equals(ComplaintType.COMPLAINT)) {\n+            // if test run complaint\n+            if (complaint.getStudent() != null && complaint.getStudent().getLogin().equals(assessor.getLogin())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjEyNg==", "bodyText": "Would be easier to already fetch only student exams which do not belong to a test run from the DB.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493002126", "createdAt": "2020-09-22T20:07:00Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -607,6 +605,18 @@ public void setNumberOfRegisteredUsersForExams(List<Exam> exams) {\n         exams.forEach(exam -> exam.setNumberOfRegisteredUsers(registeredUsersCountMap.get(exam.getId()).longValue()));\n     }\n \n+    /**\n+     * Finds an exam based on the id with all student exams which are not marked as test runs.\n+     * @param examId the id of the exam\n+     * @return the exam with student exams loaded\n+     */\n+    private Exam findWithStudentExamsById(long examId) {\n+        Exam exam = examRepository.findWithStudentExamsById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id \" + examId + \" does not exist\"));\n+        // drop all test runs and set the remaining students exams to the exam\n+        exam.setStudentExams(exam.getStudentExams().stream().dropWhile(StudentExam::getTestRun).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTcwMQ==", "bodyText": "I'd rather return an optional so the caller knows that he has to check whether a value is present", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493015701", "createdAt": "2020-09-22T20:32:25Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1234,6 +1301,33 @@ private boolean userHasPermissions(StudentParticipation participation) {\n         return studentParticipationRepository.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentId, exercises);\n     }\n \n+    /**\n+     * Loads the test run participation for the instructor.\n+     * See {@link StudentParticipation#isTestRunParticipation()}\n+     * @param instructorId the id of the instructor\n+     * @param exercise the exercise id\n+     * @return the test run participation with submissions and results loaded\n+     */\n+    public StudentParticipation findTestRunParticipationOfInstructorForExercise(Long instructorId, Exercise exercise) {\n+        var studentParticipations = findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(instructorId, List.of(exercise));\n+        if (studentParticipations.isEmpty() || !studentParticipations.get(0).isTestRunParticipation()) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxOTg2Mg==", "bodyText": "te instructor -> the instructor :)", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493019862", "createdAt": "2020-09-22T20:40:19Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -336,4 +340,118 @@ public Integer findMaxWorkingTimeByExamId(Long examId) {\n         log.debug(\"Request to find all distinct working times for Exam : {}\", examId);\n         return studentExamRepository.findAllDistinctWorkingTimesByExamId(examId);\n     }\n+\n+    /**\n+     * Generates a Student Exam marked as a testRun for te instructor to test the exam as a student would experience it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyOTI3Ng==", "bodyText": "indicates", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493029276", "createdAt": "2020-09-22T20:57:41Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ComplaintResource.java", "diffHunk": "@@ -239,7 +240,29 @@ public ComplaintResource(AuthorizationCheckService authCheckService, ExerciseSer\n         }\n \n         List<Complaint> responseComplaints = complaintService.getAllComplaintsByExerciseIdButMine(exerciseId);\n-        responseComplaints = buildComplaintsListForAssessor(responseComplaints, principal, false);\n+        responseComplaints = buildComplaintsListForAssessor(responseComplaints, principal, false, false);\n+        return ResponseEntity.ok(responseComplaints);\n+    }\n+\n+    /**\n+     * Get /exercises/:exerciseId/complaints-for-test-run-dashboard\n+     * <p>\n+     * Get all the complaints associated to a test run exercise, but filter out the ones that are not about the tutor who is doing the request, since this idicated test run exercises", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMTY0MA==", "bodyText": "Could it happen for normal exercises that (student != null && assessor.getLogin().equals(student.getLogin())) evaluates to true because the assessor was the same person (e.g. for a quick testing session) and testRun is false? Might not matter in this case but I'm curios.", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493031640", "createdAt": "2020-09-22T21:02:09Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ComplaintResource.java", "diffHunk": "@@ -463,8 +486,9 @@ private void filterOutUselessDataFromComplaints(List<Complaint> complaints, bool\n         complaints.forEach(complaint -> {\n             String submissorName = principal.getName();\n             User assessor = complaint.getResult().getAssessor();\n+            User student = complaint.getStudent();\n \n-            if (assessor.getLogin().equals(submissorName) == assessorSameAsCaller) {\n+            if (assessor.getLogin().equals(submissorName) == assessorSameAsCaller && (student != null && assessor.getLogin().equals(student.getLogin())) == testRun) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNDEwMQ==", "bodyText": "Do you need this request? I don't see any additional test run logic. You could probably reuse getExamForTutorDashboard but I might be wrong", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493034101", "createdAt": "2020-09-22T21:07:08Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -289,7 +290,38 @@ public ExamResource(UserService userService, CourseService courseService, ExamRe\n         }\n \n         List<TutorParticipation> tutorParticipations = tutorParticipationService.findAllByCourseAndTutor(course, user);\n-        tutorDashboardService.prepareExercisesForTutorDashboard(exercises, tutorParticipations);\n+        tutorDashboardService.prepareExercisesForTutorDashboard(exercises, tutorParticipations, true);\n+\n+        return ResponseEntity.ok(exam);\n+    }\n+\n+    /**\n+     * GET /courses/:courseId/exams/:examId:for-exam-tutor-test-run-dashboard\n+     *\n+     * @param courseId the id of the course to retrieve\n+     * @param examId the id of the exam that contains the exercises\n+     * @return data about a exam test run including all exercises, plus some data for the tutor as tutor status for assessment\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/for-exam-tutor-test-run-dashboard\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Exam> getExamForTutorTestRunDashboard(@PathVariable long courseId, @PathVariable long examId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MDg5MA==", "bodyText": "I would add this to the other changelog file. One changeSet is fine for these changes", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493040890", "createdAt": "2020-09-22T21:21:06Z", "author": {"login": "kloessst"}, "path": "src/main/resources/config/liquibase/changelog/20200908112330_changelog.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"turdiu\" id=\"20200908112330\">\n+        <addColumn tableName=\"student_exam\">\n+            <column name=\"test_run\" type=\"bit\" defaultValueBoolean=\"false\"/>\n+        </addColumn>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58bdcd215649c172a124baa753bbab1cbb58194"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MjY4Mg==", "bodyText": "Do we need 'ROLE_TA' here?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493042682", "createdAt": "2020-09-22T21:24:57Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -220,6 +223,39 @@ export const examManagementRoute: Routes = [\n         },\n         canActivate: [UserRouteAccessService],\n     },\n+    {\n+        path: ':examId/test-runs',\n+        component: TestRunManagementComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/test-runs/assess',\n+        component: TutorCourseDashboardComponent,\n+        data: {\n+            authorities: ['ROLE_ADMIN', 'ROLE_INSTRUCTOR', 'ROLE_TA'],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58bdcd215649c172a124baa753bbab1cbb58194"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDQyOQ==", "bodyText": "Could you just use item.id where ever this function is called?", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493044429", "createdAt": "2020-09-22T21:28:58Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/test-runs/test-run-management.component.ts", "diffHunk": "@@ -0,0 +1,134 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ActivatedRoute } from '@angular/router';\n+import { Course } from 'app/entities/course.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { SortService } from 'app/shared/service/sort.service';\n+import { Exam } from 'app/entities/exam.model';\n+import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n+import { CreateTestRunModalComponent } from 'app/exam/manage/test-runs/create-test-run-modal.component';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { Subject } from 'rxjs';\n+import { User } from 'app/core/user/user.model';\n+\n+@Component({\n+    selector: 'jhi-test-run-management',\n+    templateUrl: './test-run-management.component.html',\n+})\n+export class TestRunManagementComponent implements OnInit {\n+    course: Course;\n+    exam: Exam;\n+    isLoading: boolean;\n+    isExamStarted: boolean;\n+    testRuns: StudentExam[] = [];\n+    instructor: User;\n+    private dialogErrorSource = new Subject<string>();\n+    dialogError$ = this.dialogErrorSource.asObservable();\n+    predicate: string;\n+    ascending: boolean;\n+\n+    constructor(\n+        private route: ActivatedRoute,\n+        private jhiAlertService: JhiAlertService,\n+        private examManagementService: ExamManagementService,\n+        private accountService: AccountService,\n+        private sortService: SortService,\n+        private modalService: NgbModal,\n+    ) {\n+        this.predicate = 'id';\n+        this.ascending = true;\n+    }\n+\n+    ngOnInit(): void {\n+        this.examManagementService.find(Number(this.route.snapshot.paramMap.get('courseId')), Number(this.route.snapshot.paramMap.get('examId')), false, true).subscribe(\n+            (response: HttpResponse<Exam>) => {\n+                this.exam = response.body!;\n+                this.isExamStarted = this.exam.started;\n+                this.course = this.exam.course;\n+                this.course.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.course);\n+                this.examManagementService.findAllTestRunsForExam(this.course.id, this.exam.id).subscribe(\n+                    (res) => {\n+                        this.testRuns = res.body!;\n+                    },\n+                    (err) => this.onError(err),\n+                );\n+            },\n+            (error) => this.onError(error),\n+        );\n+        this.accountService.fetch().subscribe((res) => {\n+            if (res.body != null) {\n+                this.instructor = res.body;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Open modal to configure a new test run\n+     */\n+    openCreateTestRunModal() {\n+        const modalRef: NgbModalRef = this.modalService.open(CreateTestRunModalComponent as Component, { size: 'lg', backdrop: 'static' });\n+        modalRef.componentInstance.exam = this.exam;\n+        modalRef.result\n+            .then((testRunConfiguration: StudentExam) => {\n+                this.examManagementService.createTestRun(this.course.id, this.exam.id, testRunConfiguration).subscribe(\n+                    (res) => {\n+                        if (res.body != null) {\n+                            this.testRuns.push(res.body!);\n+                        }\n+                    },\n+                    (error) => {\n+                        this.onError(error);\n+                    },\n+                );\n+            })\n+            .catch(() => {});\n+    }\n+\n+    /**\n+     * Delete the test run with the given id.\n+     * @param testRunId {number}\n+     */\n+    deleteTestRun(testRunId: number) {\n+        this.examManagementService.deleteTestRun(this.course.id, this.exam.id, testRunId).subscribe(\n+            () => {\n+                this.testRuns = this.testRuns!.filter((testRun) => testRun.id !== testRunId);\n+                this.dialogErrorSource.next('');\n+            },\n+            (error) => this.dialogErrorSource.next(error.message),\n+        );\n+    }\n+\n+    /**\n+     * Track the items on the testruns Table\n+     * @param index {number}\n+     * @param item {StudentExam}\n+     */\n+    trackId(index: number, item: StudentExam) {\n+        return item.id;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58bdcd215649c172a124baa753bbab1cbb58194"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d964591c0aa2ce970692afb597bf5812f060b2", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/62d964591c0aa2ce970692afb597bf5812f060b2", "committedDate": "2020-09-22T22:24:17Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a23510e415a7fb627b9f5373e63cbbd7e6bbf4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/43a23510e415a7fb627b9f5373e63cbbd7e6bbf4", "committedDate": "2020-09-22T22:25:41Z", "message": "implement CR from Stefan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94568de0decc592a28a696fa3a220f4ee1c8e22", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b94568de0decc592a28a696fa3a220f4ee1c8e22", "committedDate": "2020-09-22T22:31:16Z", "message": "revert changes to build.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODkyNzE5", "url": "https://github.com/ls1intum/Artemis/pull/2096#pullrequestreview-493892719", "createdAt": "2020-09-22T22:35:27Z", "commit": {"oid": "b94568de0decc592a28a696fa3a220f4ee1c8e22"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b23932ee23b7b679d157c8d0d2e99f1cf8df321d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b23932ee23b7b679d157c8d0d2e99f1cf8df321d", "committedDate": "2020-09-22T22:54:41Z", "message": "Revert liquibase change: cannot modify a liquibase changeset that has already been executed by Liquibase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec04beec81895044754def77fa1d05ece2cd5a2", "author": {"user": {"login": "anditurdiu", "name": "Andi Turdiu"}}, "url": "https://github.com/ls1intum/Artemis/commit/7ec04beec81895044754def77fa1d05ece2cd5a2", "committedDate": "2020-09-22T23:14:15Z", "message": "Merge branch 'develop' into feature/exam/test-run-server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cae46ff8cb0689871cc3146fd070e11f9f5baeb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4cae46ff8cb0689871cc3146fd070e11f9f5baeb", "committedDate": "2020-09-23T06:47:54Z", "message": "fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4143, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}