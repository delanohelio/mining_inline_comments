{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDU0NDM4", "number": 1984, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozMjoyMFrOETzA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTozNjoyNFrOET0TAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk0MjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozMjoyMFrOG5vCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1Njo1NFrOG5xtqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjU5NQ==", "bodyText": "Unless this is needed in the webapp, we should mark this with @JsonIgnore. I think otherwise, Jackson will serialize this.", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463192595", "createdAt": "2020-07-30T18:32:20Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -161,8 +161,34 @@ public Boolean isEnded() {\n         if (this.getExam() == null || this.getExam().getStartDate() == null || this.getWorkingTime() == null) {\n             return null;\n         }\n-        var individualEndDate = this.getExam().getStartDate().plusSeconds(this.getWorkingTime());\n-        return ZonedDateTime.now().isAfter(individualEndDate);\n+        return ZonedDateTime.now().isAfter(getIndividualEndDate());\n+    }\n+\n+    /**\n+     * Returns the individual exam end date taking the working time of this student exam into account\n+     *  \n+     * @return the ZonedDateTime that marks the exam end for this student (excluding grace period)\n+     */\n+    public ZonedDateTime getIndividualEndDate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjUyMg==", "bodyText": "See 41c7643", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463236522", "createdAt": "2020-07-30T19:56:54Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -161,8 +161,34 @@ public Boolean isEnded() {\n         if (this.getExam() == null || this.getExam().getStartDate() == null || this.getWorkingTime() == null) {\n             return null;\n         }\n-        var individualEndDate = this.getExam().getStartDate().plusSeconds(this.getWorkingTime());\n-        return ZonedDateTime.now().isAfter(individualEndDate);\n+        return ZonedDateTime.now().isAfter(getIndividualEndDate());\n+    }\n+\n+    /**\n+     * Returns the individual exam end date taking the working time of this student exam into account\n+     *  \n+     * @return the ZonedDateTime that marks the exam end for this student (excluding grace period)\n+     */\n+    public ZonedDateTime getIndividualEndDate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjU5NQ=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk0MjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozMjoyN1rOG5vCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1Njo0OVrOG5xtjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjY0Nw==", "bodyText": "Unless this is needed in the webapp, we should mark this with @JsonIgnore. I think otherwise, Jackson will serialize this.", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463192647", "createdAt": "2020-07-30T18:32:27Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -161,8 +161,34 @@ public Boolean isEnded() {\n         if (this.getExam() == null || this.getExam().getStartDate() == null || this.getWorkingTime() == null) {\n             return null;\n         }\n-        var individualEndDate = this.getExam().getStartDate().plusSeconds(this.getWorkingTime());\n-        return ZonedDateTime.now().isAfter(individualEndDate);\n+        return ZonedDateTime.now().isAfter(getIndividualEndDate());\n+    }\n+\n+    /**\n+     * Returns the individual exam end date taking the working time of this student exam into account\n+     *  \n+     * @return the ZonedDateTime that marks the exam end for this student (excluding grace period)\n+     */\n+    public ZonedDateTime getIndividualEndDate() {\n+        return exam.getStartDate().plusSeconds(workingTime);\n+    }\n+\n+    /**\n+     * Returns the individual exam end date taking the working time of this student exam into account and the grace period set for this exam\n+     *  \n+     * @return the ZonedDateTime that marks the exam end for this student, including the exam's grace period\n+     */\n+    public ZonedDateTime getIndividualEndDateWithGracePeriod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjQ5NQ==", "bodyText": "See 41c7643", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463236495", "createdAt": "2020-07-30T19:56:49Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -161,8 +161,34 @@ public Boolean isEnded() {\n         if (this.getExam() == null || this.getExam().getStartDate() == null || this.getWorkingTime() == null) {\n             return null;\n         }\n-        var individualEndDate = this.getExam().getStartDate().plusSeconds(this.getWorkingTime());\n-        return ZonedDateTime.now().isAfter(individualEndDate);\n+        return ZonedDateTime.now().isAfter(getIndividualEndDate());\n+    }\n+\n+    /**\n+     * Returns the individual exam end date taking the working time of this student exam into account\n+     *  \n+     * @return the ZonedDateTime that marks the exam end for this student (excluding grace period)\n+     */\n+    public ZonedDateTime getIndividualEndDate() {\n+        return exam.getStartDate().plusSeconds(workingTime);\n+    }\n+\n+    /**\n+     * Returns the individual exam end date taking the working time of this student exam into account and the grace period set for this exam\n+     *  \n+     * @return the ZonedDateTime that marks the exam end for this student, including the exam's grace period\n+     */\n+    public ZonedDateTime getIndividualEndDateWithGracePeriod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjY0Nw=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk0NzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/quiz/QuizSubmission.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNDowMVrOG5vFWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1Njo0NFrOG5xtZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzQzNA==", "bodyText": "I think there is a @link missing", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463193434", "createdAt": "2020-07-30T18:34:01Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/quiz/QuizSubmission.java", "diffHunk": "@@ -68,6 +69,21 @@ public QuizSubmission removeSubmittedAnswers(SubmittedAnswer submittedAnswer) {\n         return this;\n     }\n \n+    /**\n+     * Filters the sensitive quiz submission information for exams, if the results are not published or the user is not an instructor\n+     * It sets the {@link QuizSubmission#setScoreInPoints(Double)} & {SubmittedAnswer#setScoreInPoints(Double)} to null for every submitted answer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjQ1Mw==", "bodyText": "See 41c7643", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463236453", "createdAt": "2020-07-30T19:56:44Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/quiz/QuizSubmission.java", "diffHunk": "@@ -68,6 +69,21 @@ public QuizSubmission removeSubmittedAnswers(SubmittedAnswer submittedAnswer) {\n         return this;\n     }\n \n+    /**\n+     * Filters the sensitive quiz submission information for exams, if the results are not published or the user is not an instructor\n+     * It sets the {@link QuizSubmission#setScoreInPoints(Double)} & {SubmittedAnswer#setScoreInPoints(Double)} to null for every submitted answer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzQzNA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk3MDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTowOVrOG5vUAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1Njo0MVrOG5xtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA==", "bodyText": "I don't see where this is used.", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463197184", "createdAt": "2020-07-30T18:41:09Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxODk1MA==", "bodyText": "This is used in line 217 for example :)", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463218950", "createdAt": "2020-07-30T19:22:59Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMDc4NQ==", "bodyText": "You are right, it is not used in this method.", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463220785", "createdAt": "2020-07-30T19:26:22Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMTc5NA==", "bodyText": "Isn't 217 another method? I don't see where currentUser is passed to another method. Maybe I'm blind :)", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463221794", "createdAt": "2020-07-30T19:28:22Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMjU2OA==", "bodyText": "But 217 is another method^^", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463222568", "createdAt": "2020-07-30T19:29:55Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMjg1Nw==", "bodyText": "jupe, my bad :D", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463222857", "createdAt": "2020-07-30T19:30:29Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNDc2Ng==", "bodyText": "(Sorry didn't see Stefan's comment, GitHub should add auto-refresh for that)", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463224766", "createdAt": "2020-07-30T19:34:22Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjQxNQ==", "bodyText": "See 41c7643", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463236415", "createdAt": "2020-07-30T19:56:41Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -93,10 +98,13 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n                 studentExam.getExercises());\n \n+        // fetch user here to avoid fetching the user for each exercise individually\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzE4NA=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjA1OTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTowODoxOFrOG5wLpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTowODoxOFrOG5wLpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMTQzMA==", "bodyText": "Is it intended that students who haven't submitted their solution, can use this call after their exam ended? This wasn't possible before.", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463211430", "createdAt": "2020-07-30T19:08:18Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -240,13 +234,83 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     }\n \n     /**\n-     * Find the participation in participations that belongs to the given exercise that includes the exercise data\n+     * GET /courses/{courseId}/exams/{examId}/studentExams/summary : Find a student exam for the summary.\n+     * This will be used to display the summary of the exam. The student exam will be returned with the exercises\n+     * and with the student participation and with the submissions.\n+     *\n+     * @param courseId  the course to which the student exam belongs to\n+     * @param examId    the exam to which the student exam belongs to\n+     * @return the ResponseEntity with status 200 (OK) and with the found student exam as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/studentExams/summary\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<StudentExam> getStudentExamForSummary(@PathVariable Long courseId, @PathVariable Long examId) {\n+        long start = System.currentTimeMillis();\n+        User currentUser = userService.getUserWithGroupsAndAuthorities();\n+        log.debug(\"REST request to get the student exam of user {} for exam {}\", currentUser.getLogin(), examId);\n+\n+        Optional<ResponseEntity<StudentExam>> courseAndExamAccessFailure = studentExamAccessService.checkCourseAndExamAccess(courseId, examId, currentUser);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure.get();\n+        }\n+\n+        // 1st: load the studentExam with all associated exercises\n+        Optional<StudentExam> optionalStudentExam = studentExamRepository.findWithExercisesByUserIdAndExamId(currentUser.getId(), examId);\n+        if (optionalStudentExam.isEmpty()) {\n+            return notFound();\n+        }\n+        var studentExam = optionalStudentExam.get();\n+\n+        // check that the studentExam is over, otherwise /studentExams/conduction should be used\n+        if (!studentExam.isSubmitted() && !studentExam.isEnded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjA2ODcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToxMDo1OFrOG5wQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NTo1MFrOG5xrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMjc5Ng==", "bodyText": "This sentence sounds weird :)", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463212796", "createdAt": "2020-07-30T19:10:58Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -291,17 +349,44 @@ public void filterForExam(StudentExam studentExam, Exercise exercise, List<Stude\n     }\n \n     /**\n-     * we also need the quiz questions and it is not possible to load them in a generic way with the entity graph used\n+     * Helper method which attaches the result to its participation.\n+     * For direct automatic feedback during the exam conduction for {@link ProgrammingExercise, we need to attach the results.\n+     * We also attach the result if the results are already published for the exam. See {@link StudentExamResource#areResultsPublishedYet(StudentExam)}\n+     * @param studentExam the given studentExam\n+     * @param participation the given participation of the student\n+     * @param latestSubmission the latest\n+     * @param isAtLeastInstructor\n+     */\n+    private void setResultIfNecessary(StudentExam studentExam, StudentParticipation participation, boolean isAtLeastInstructor) {\n+        // Only set the result during the exam (direct automatic feedback) or after publishing the results\n+        boolean studentAllowedToSeeResult = (studentExam.getExam().isStarted() && !studentExam.isEnded()) || studentExam.areResultsPublishedYet();\n+        Optional<Submission> latestSubmission = participation.findLatestSubmission();\n+\n+        if ((studentAllowedToSeeResult || isAtLeastInstructor) && latestSubmission.isPresent()) {\n+            // Set the latest result into the participation as the client expects it there for programming exercises\n+            Result result = latestSubmission.get().getResult();\n+            if (result != null) {\n+                participation.setResults(Set.of(result));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Helper method to load the quiz questions.\n+     * It is not possible to load them in a generic way with the entity graph used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNTk4OQ==", "bodyText": "See 6d6270a", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463235989", "createdAt": "2020-07-30T19:55:50Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -291,17 +349,44 @@ public void filterForExam(StudentExam studentExam, Exercise exercise, List<Stude\n     }\n \n     /**\n-     * we also need the quiz questions and it is not possible to load them in a generic way with the entity graph used\n+     * Helper method which attaches the result to its participation.\n+     * For direct automatic feedback during the exam conduction for {@link ProgrammingExercise, we need to attach the results.\n+     * We also attach the result if the results are already published for the exam. See {@link StudentExamResource#areResultsPublishedYet(StudentExam)}\n+     * @param studentExam the given studentExam\n+     * @param participation the given participation of the student\n+     * @param latestSubmission the latest\n+     * @param isAtLeastInstructor\n+     */\n+    private void setResultIfNecessary(StudentExam studentExam, StudentParticipation participation, boolean isAtLeastInstructor) {\n+        // Only set the result during the exam (direct automatic feedback) or after publishing the results\n+        boolean studentAllowedToSeeResult = (studentExam.getExam().isStarted() && !studentExam.isEnded()) || studentExam.areResultsPublishedYet();\n+        Optional<Submission> latestSubmission = participation.findLatestSubmission();\n+\n+        if ((studentAllowedToSeeResult || isAtLeastInstructor) && latestSubmission.isPresent()) {\n+            // Set the latest result into the participation as the client expects it there for programming exercises\n+            Result result = latestSubmission.get().getResult();\n+            if (result != null) {\n+                participation.setResults(Set.of(result));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Helper method to load the quiz questions.\n+     * It is not possible to load them in a generic way with the entity graph used", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMjc5Ng=="}, "originalCommit": {"oid": "9b2cc1b6551fde08d4070f7c44145199570cd356"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjE1MjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTozNjoyNFrOG5xELQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1NDo0NlrOG5xpbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTkwMQ==", "bodyText": "I think this still isn't right. Scenario hand-in early: isSubmitted = true & isEnded = false. This would lead to forbidden(). Couldn't we just use isSubmitted? If the student handed in his exam then his exam is definitely over.", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463225901", "createdAt": "2020-07-30T19:36:24Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -261,8 +258,8 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         }\n         var studentExam = optionalStudentExam.get();\n \n-        // check that the studentExam is over, otherwise /studentExams/conduction should be used\n-        if (!studentExam.isSubmitted() && !studentExam.isEnded()) {\n+        // check that the studentExam is over and that it has been submitted, otherwise /studentExams/conduction should be used\n+        if (!studentExam.isSubmitted() || !studentExam.isEnded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c76431d8ad0de45243cda006ac76eea2415b8f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNTQzNg==", "bodyText": "See 8519b5d", "url": "https://github.com/ls1intum/Artemis/pull/1984#discussion_r463235436", "createdAt": "2020-07-30T19:54:46Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -261,8 +258,8 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         }\n         var studentExam = optionalStudentExam.get();\n \n-        // check that the studentExam is over, otherwise /studentExams/conduction should be used\n-        if (!studentExam.isSubmitted() && !studentExam.isEnded()) {\n+        // check that the studentExam is over and that it has been submitted, otherwise /studentExams/conduction should be used\n+        if (!studentExam.isSubmitted() || !studentExam.isEnded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTkwMQ=="}, "originalCommit": {"oid": "41c76431d8ad0de45243cda006ac76eea2415b8f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4823, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}