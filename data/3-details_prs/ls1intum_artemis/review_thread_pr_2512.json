{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzk2OTA1", "number": 2512, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoyMzo1NlrOFCPh0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0ODoyOVrOFKScQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODk1ODkwOnYy", "diffSide": "RIGHT", "path": "src/main/docker/bamboo/Dockerfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoyMzo1NlrOIBSEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoyMzo1NlrOIBSEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIxNTUwNA==", "bodyText": "which version are we using at the moment? So that the codacy issue is getting fixed.", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r538215504", "createdAt": "2020-12-08T10:23:56Z", "author": {"login": "derLalla"}, "path": "src/main/docker/bamboo/Dockerfile", "diffHunk": "@@ -5,9 +5,10 @@ LABEL description=\"Bamboo pre-configured for Artemis\"\n USER root\n ENV DEBIAN_FRONTEND noninteractive\n \n-RUN apt-get update\n-RUN apt-get install -y maven\n-RUN apt-get install -y software-properties-common apt-utils\n+RUN apt-get update && apt-get install -y \\\n+    maven \\\n+    software-properties-common \\\n+    apt-utils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60534c147a7ae95f8b40a1334479b40dc386d186"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mzg5MDM0OnYy", "diffSide": "RIGHT", "path": "src/main/docker/bamboo/Dockerfile", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjo1MToxMFrOIKWWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo1ODoxMlrOIKnLrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyMjgwNQ==", "bodyText": "why do we need to change this Dockerfile at all?\nIt also does not include dependencies to any other programming language", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r547722805", "createdAt": "2020-12-23T06:51:10Z", "author": {"login": "krusche"}, "path": "src/main/docker/bamboo/Dockerfile", "diffHunk": "@@ -5,9 +5,10 @@ LABEL description=\"Bamboo pre-configured for Artemis\"\n USER root\n ENV DEBIAN_FRONTEND noninteractive\n \n-RUN apt-get update\n-RUN apt-get install -y maven\n-RUN apt-get install -y software-properties-common apt-utils\n+RUN apt-get update && apt-get install -y --no-install-recommends \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa31211df404b200cee43efdb3beec75f1c8ea0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5ODYzOA==", "bodyText": "in case we wanted to use an updated version of maven, we need a way to tell docker to skip the cache and use the defined version. This is why it's a good practice to name the version of dependencies. This technique is known as \u201ccache busting\u201d (https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r547998638", "createdAt": "2020-12-23T14:58:12Z", "author": {"login": "derLalla"}, "path": "src/main/docker/bamboo/Dockerfile", "diffHunk": "@@ -5,9 +5,10 @@ LABEL description=\"Bamboo pre-configured for Artemis\"\n USER root\n ENV DEBIAN_FRONTEND noninteractive\n \n-RUN apt-get update\n-RUN apt-get install -y maven\n-RUN apt-get install -y software-properties-common apt-utils\n+RUN apt-get update && apt-get install -y --no-install-recommends \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyMjgwNQ=="}, "originalCommit": {"oid": "aaa31211df404b200cee43efdb3beec75f1c8ea0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzMxOTExOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultJenkinsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0NjoxM1rOIM_CDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzozNTowN1rOINXM8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjU0MQ==", "bodyText": "please add swift here as well", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550486541", "createdAt": "2020-12-31T13:46:13Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultJenkinsIntegrationTest.java", "diffHunk": "@@ -38,20 +39,24 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateTestResultDTO(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjU0NA==", "bodyText": "resolved in bb13122 e7d6a4a", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550882544", "createdAt": "2021-01-02T13:35:07Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultJenkinsIntegrationTest.java", "diffHunk": "@@ -38,20 +39,24 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateTestResultDTO(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjU0MQ=="}, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzMxOTYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultJenkinsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0NjozMVrOIM_CSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzozNDo1OVrOINXM1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, ProgrammingLanguage.JAVA);\n          \n          \n            \n                    programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, programmingLanguage);", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550486603", "createdAt": "2020-12-31T13:46:31Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultJenkinsIntegrationTest.java", "diffHunk": "@@ -38,20 +39,24 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateTestResultDTO(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\" })\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport() {\n+    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(ProgrammingLanguage programmingLanguage) {\n+        programmingExerciseResultTestService.setupForProgrammingLanguage(programmingLanguage);\n         var notification = ModelFactory.generateTestResultDTO(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of());\n-        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification);\n+        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, ProgrammingLanguage.JAVA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjUxOA==", "bodyText": "resolved in bb13122 e7d6a4a", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550882518", "createdAt": "2021-01-02T13:34:59Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultJenkinsIntegrationTest.java", "diffHunk": "@@ -38,20 +39,24 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateTestResultDTO(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\" })\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport() {\n+    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(ProgrammingLanguage programmingLanguage) {\n+        programmingExerciseResultTestService.setupForProgrammingLanguage(programmingLanguage);\n         var notification = ModelFactory.generateTestResultDTO(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of());\n-        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification);\n+        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, ProgrammingLanguage.JAVA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjYwMw=="}, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzMyMTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0NzozNlrOIM_DBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzozMzozMlrOINXMWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4Njc5MQ==", "bodyText": "why do you move the setup method to here?\nThe setup method should be called in the setup method above and not in each test case!", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550486791", "createdAt": "2020-12-31T13:47:36Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "diffHunk": "@@ -38,27 +40,42 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateBambooBuildResult(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\" })\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport() {\n-        var notification = ModelFactory.generateBambooBuildResultWithStaticCodeAnalysisReport(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of());\n-        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification);\n+    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(ProgrammingLanguage programmingLanguage) {\n+        programmingExerciseResultTestService.setupForProgrammingLanguage(programmingLanguage);\n+        var notification = ModelFactory.generateBambooBuildResultWithStaticCodeAnalysisReport(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of(), programmingLanguage);\n+        var scaReports = notification.getBuild().getJobs().get(0).getStaticCodeAnalysisReports();\n+        if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n+            // SwiftLint has only one category at the moment\n+            assertThat(scaReports.size()).isEqualTo(1);\n+            assertThat(scaReports.get(0).getIssues().get(0).getCategory()).isEqualTo(\"swiftLint\");\n+        }\n+        else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n+            assertThat(scaReports.size()).isEqualTo(4);\n+            scaReports.get(0).getIssues().forEach(issue -> assertThat(issue.getCategory()).isNotNull());\n+        }\n+        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, programmingLanguage);\n     }\n \n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldStoreBuildLogsForSubmission() {\n+        programmingExerciseResultTestService.setup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg3NjgyNA==", "bodyText": "the setup method always creates a Java exercise, so we would need a parameterized @beforeeach method, which always initializes the correct programming language exercise.\nTherefore I needed to split the setup() method into setup() and setupForProgrammingLanguage(programmingLanguage).\nOtherwise, each time the testcase is non-Java, we would create an exercise with Java and an exercise for the specified prog. language.", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550876824", "createdAt": "2021-01-02T12:23:48Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "diffHunk": "@@ -38,27 +40,42 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateBambooBuildResult(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\" })\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport() {\n-        var notification = ModelFactory.generateBambooBuildResultWithStaticCodeAnalysisReport(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of());\n-        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification);\n+    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(ProgrammingLanguage programmingLanguage) {\n+        programmingExerciseResultTestService.setupForProgrammingLanguage(programmingLanguage);\n+        var notification = ModelFactory.generateBambooBuildResultWithStaticCodeAnalysisReport(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of(), programmingLanguage);\n+        var scaReports = notification.getBuild().getJobs().get(0).getStaticCodeAnalysisReports();\n+        if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n+            // SwiftLint has only one category at the moment\n+            assertThat(scaReports.size()).isEqualTo(1);\n+            assertThat(scaReports.get(0).getIssues().get(0).getCategory()).isEqualTo(\"swiftLint\");\n+        }\n+        else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n+            assertThat(scaReports.size()).isEqualTo(4);\n+            scaReports.get(0).getIssues().forEach(issue -> assertThat(issue.getCategory()).isNotNull());\n+        }\n+        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, programmingLanguage);\n     }\n \n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldStoreBuildLogsForSubmission() {\n+        programmingExerciseResultTestService.setup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4Njc5MQ=="}, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjM5NQ==", "bodyText": "resolved in ba1458f", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550882395", "createdAt": "2021-01-02T13:33:32Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "diffHunk": "@@ -38,27 +40,42 @@ void tearDown() {\n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult() {\n+        programmingExerciseResultTestService.setup();\n         var notification = ModelFactory.generateBambooBuildResult(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\", \"test2\", \"test4\"), List.of());\n         programmingExerciseResultTestService.shouldUpdateTestCasesAndResultScoreFromSolutionParticipationResult(notification);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\", \"SWIFT\" })\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport() {\n-        var notification = ModelFactory.generateBambooBuildResultWithStaticCodeAnalysisReport(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of());\n-        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification);\n+    public void shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(ProgrammingLanguage programmingLanguage) {\n+        programmingExerciseResultTestService.setupForProgrammingLanguage(programmingLanguage);\n+        var notification = ModelFactory.generateBambooBuildResultWithStaticCodeAnalysisReport(Constants.ASSIGNMENT_REPO_NAME, List.of(\"test1\"), List.of(), programmingLanguage);\n+        var scaReports = notification.getBuild().getJobs().get(0).getStaticCodeAnalysisReports();\n+        if (programmingLanguage == ProgrammingLanguage.SWIFT) {\n+            // SwiftLint has only one category at the moment\n+            assertThat(scaReports.size()).isEqualTo(1);\n+            assertThat(scaReports.get(0).getIssues().get(0).getCategory()).isEqualTo(\"swiftLint\");\n+        }\n+        else if (programmingLanguage == ProgrammingLanguage.JAVA) {\n+            assertThat(scaReports.size()).isEqualTo(4);\n+            scaReports.get(0).getIssues().forEach(issue -> assertThat(issue.getCategory()).isNotNull());\n+        }\n+        programmingExerciseResultTestService.shouldStoreFeedbackForResultWithStaticCodeAnalysisReport(notification, programmingLanguage);\n     }\n \n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void shouldStoreBuildLogsForSubmission() {\n+        programmingExerciseResultTestService.setup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4Njc5MQ=="}, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzMyMTE5OnYy", "diffSide": "LEFT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0Nzo1MFrOIM_DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzozMzoxOVrOINXMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjgxMQ==", "bodyText": "please revert this change and keep the setup method here!", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550486811", "createdAt": "2020-12-31T13:47:50Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "diffHunk": "@@ -24,8 +28,6 @@\n \n     @BeforeEach\n     void setup() {\n-        programmingExerciseResultTestService.setup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MjM5MA==", "bodyText": "done in ba1458f", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550882390", "createdAt": "2021-01-02T13:33:19Z", "author": {"login": "derLalla"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseResultBambooIntegrationTest.java", "diffHunk": "@@ -24,8 +28,6 @@\n \n     @BeforeEach\n     void setup() {\n-        programmingExerciseResultTestService.setup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjgxMQ=="}, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzMyMjI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGitlabJenkinsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0ODoyOVrOIM_Dmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMzo0ODoyOVrOIM_Dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NjkzOQ==", "bodyText": "why is Swift still missing here? Please add it!", "url": "https://github.com/ls1intum/Artemis/pull/2512#discussion_r550486939", "createdAt": "2020-12-31T13:48:29Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGitlabJenkinsIntegrationTest.java", "diffHunk": "@@ -73,10 +73,13 @@ public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws E\n         programmingExerciseTestService.createProgrammingExercise_validExercise_bonusPointsIsNull();\n     }\n \n-    @Test\n+    // TODO: Add template for Swift\n+    @ParameterizedTest\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"JAVA\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55211bc4ac127fd03a6906374de4afc14b87e858"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4309, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}