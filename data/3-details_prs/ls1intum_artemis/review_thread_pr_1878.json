{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzAxOTM2", "number": 1878, "reviewThreads": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOTowOTo0NFrOEYu8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowODowMFrOErD9Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzcwMzY4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOTowOTo0NFrOHBNE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODowNzo1NFrOHBei1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDg3Mg==", "bodyText": "not sure, how we save icons to the database, but I think VARCHAR(45) is too less space\nIf you save the image data itself, I used to do that with blobs, but maybe a bigger VARCHAR will be sufficient. If this is this just a reference to icons from icon libraries we use or is it actually the image data?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r471024872", "createdAt": "2020-08-15T19:09:44Z", "author": {"login": "TobiasPr"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(45)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24c127f441012f187c865ed3467f7f569f147dc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxMTA2MA==", "bodyText": "the idea was to use font awesome icons, so VARCHAR(45) should be sufficient for the identifier strings", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r471311060", "createdAt": "2020-08-17T08:07:54Z", "author": {"login": "balazs-czopf"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(45)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDg3Mg=="}, "originalCommit": {"oid": "f24c127f441012f187c865ed3467f7f569f147dc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzYxMDgzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoxMzo0NVrOHCohUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoyODozOVrOHCo3ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzA4OA==", "bodyText": "This might be too small for a nice description?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472523088", "createdAt": "2020-08-18T22:13:45Z", "author": {"login": "kloessst"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd7af35f35cc660130e8fa4c003e003ef6969b12"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyODc0Ng==", "bodyText": "Good catch, might actually be better to make longer descriptions possible.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472528746", "createdAt": "2020-08-18T22:28:39Z", "author": {"login": "balazs-czopf"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzA4OA=="}, "originalCommit": {"oid": "dd7af35f35cc660130e8fa4c003e003ef6969b12"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzg3MzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoxNToxOVrOHCq7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTo1Njo0OVrOHDAFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjQ1NA==", "bodyText": "AchievementEntity", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472562454", "createdAt": "2020-08-19T00:15:19Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the StudentExam entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwOTE3Nw==", "bodyText": "Oh thanks, don\u00b4t know how I could overlook that \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472909177", "createdAt": "2020-08-19T09:56:49Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the StudentExam entity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjQ1NA=="}, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzg4MDMwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoxOToyN1rOHCq_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDowMjo0N1rOHDASKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzU1OA==", "bodyText": "Why the 45 char limit?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472563558", "createdAt": "2020-08-19T00:19:27Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxMjQyNA==", "bodyText": "Seemed like a sufficient quantity to me \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472912424", "createdAt": "2020-08-19T10:02:47Z", "author": {"login": "balazs-czopf"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzU1OA=="}, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzg4MDM4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoxOTozMFrOHCq_cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxNjoyNlrOHDAvhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzU2OA==", "bodyText": "Is 255 chars enough for the whole achievement description?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472563568", "createdAt": "2020-08-19T00:19:30Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkxOTk0MQ==", "bodyText": "I would guess so, I mean the exemplary description \"Get enough points in the EIST course to receive an achievement while also receiving enough points in PGdP to be a real coding master. And you submitted all your solutions for all exercises right after their releases. Now even Stefan approves your efforts.\" is exactly 255 characters long. \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472919941", "createdAt": "2020-08-19T10:16:26Z", "author": {"login": "balazs-czopf"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzU2OA=="}, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzg4MTMxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoxOTo1NVrOHCq__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxODowMFrOHDAzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzcwOQ==", "bodyText": "I do not quite get why this is a Varchar?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472563709", "createdAt": "2020-08-19T00:19:55Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMDkwMQ==", "bodyText": "Cause the idea was to use font awesome icons and only store their identifier string", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472920901", "createdAt": "2020-08-19T10:18:00Z", "author": {"login": "balazs-czopf"}, "path": "src/main/resources/config/liquibase/changelog/20200706223010_changelog.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazsczopf\" id=\"20200706223010\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"title\" type=\"VARCHAR(45)\"/>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(45)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzcwOQ=="}, "originalCommit": {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODYxOTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMjo1NDozNlrOHJbUtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOTozNTo1N1rOHJhaFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0NjkwMw==", "bodyText": "I think we need here also getAllByUserIdAndCourseId as it can be that students are registered for several courses.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479646903", "createdAt": "2020-08-29T12:54:36Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NjU4MQ==", "bodyText": "Yeah sure.\nMy idea was to display a list of all achievements in a course in its dashboard with the achievements not yet received grayed out and the earned ones in color. So you would have to get all achievements for the course but without the user being able to see other students' information.\nBut it doesn\u00b4t hurt to also have the possibility to get achievements by course id and user id.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479746581", "createdAt": "2020-08-30T09:35:57Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0NjkwMw=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODYyODI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzowNTozN1rOHJbY8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOTozODoxNVrOHJha3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0Nzk4NA==", "bodyText": "I would move that to AchievementResource.java", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479647984", "createdAt": "2020-08-29T13:05:37Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "diffHunk": "@@ -994,4 +982,18 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n             return forbidden();\n         }\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0Njc4MQ==", "bodyText": "This was also my first thought, but looking at the URI wouldn\u00b4t it make more sense in the CourseResource.java since I am loading sth. for the course?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479746781", "createdAt": "2020-08-30T09:38:15Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "diffHunk": "@@ -994,4 +982,18 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n             return forbidden();\n         }\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0Nzk4NA=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODYzMDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzowOToxNlrOHJbaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMToyOTo0M1rOHJiF_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg==", "bodyText": "Add REST call to delete achievements", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648262", "createdAt": "2020-08-29T13:09:16Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    public AchievementResource(AchievementService achievementService, UserService userService) {\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODY4Ng==", "bodyText": "Add REST call to create/update achievements", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648686", "createdAt": "2020-08-29T13:14:24Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    public AchievementResource(AchievementService achievementService, UserService userService) {\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NzgyMw==", "bodyText": "Done :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479757823", "createdAt": "2020-08-30T11:29:43Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    public AchievementResource(AchievementService achievementService, UserService userService) {\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODYzMzE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzoxMjoyMlrOHJbbJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTozMDoxMVrOHJiGOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODU1MQ==", "bodyText": "Use delete REST call", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648551", "createdAt": "2020-08-29T13:12:22Z", "author": {"login": "fde312"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {\n+            achievementToUpdate.get().setDescription(\"Updated achievement\");\n+            achievementRepository.save(achievementToUpdate.get());\n+            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        achievementService.delete(achievement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1Nzg4MQ==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479757881", "createdAt": "2020-08-30T11:30:11Z", "author": {"login": "balazs-czopf"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {\n+            achievementToUpdate.get().setDescription(\"Updated achievement\");\n+            achievementRepository.save(achievementToUpdate.get());\n+            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        achievementService.delete(achievement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODU1MQ=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODYzNjc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzoxNzoxOVrOHJbczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOTo1NDoxNVrOHJhg_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODk3Mw==", "bodyText": "I think this test will be also successful even though the achievementToUpdate.isPresent() is false as the assert is in the if statement", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648973", "createdAt": "2020-08-29T13:17:19Z", "author": {"login": "fde312"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0ODM0OA==", "bodyText": "Removed the if statement :) thanks", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479748348", "createdAt": "2020-08-30T09:54:15Z", "author": {"login": "balazs-czopf"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODk3Mw=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODYzOTU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzoyMToxN1rOHJbeCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1MDowN1rOHJiOsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTI5MA==", "bodyText": "You could use here the create REST Call instead and for the above lines (same for tests below)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479649290", "createdAt": "2020-08-29T13:21:17Z", "author": {"login": "fde312"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MDA0OA==", "bodyText": "There is no create REST call for achievements, only update.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479760048", "createdAt": "2020-08-30T11:50:07Z", "author": {"login": "balazs-czopf"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTI5MA=="}, "originalCommit": {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTk4NzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDoxNjozMFrOHJlWRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNTozMFrOHJlczg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTE0MQ==", "bodyText": "The variable name result is here a bit misleading (as we have a Result class). I would use response, achievementResponse or just achievement", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811141", "createdAt": "2020-08-30T20:16:30Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -47,4 +65,52 @@ public AchievementResource(AchievementService achievementService, UserService us\n         return ResponseEntity.ok(achievements);\n     }\n \n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) throws URISyntaxException {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Achievement result = achievementRepository.save(achievement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "669ba95aca108519bc3499ee88a04461aaa1f1b6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjgxNA==", "bodyText": "yeah, makes sense \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479812814", "createdAt": "2020-08-30T20:35:30Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -47,4 +65,52 @@ public AchievementResource(AchievementService achievementService, UserService us\n         return ResponseEntity.ok(achievements);\n     }\n \n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) throws URISyntaxException {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Achievement result = achievementRepository.save(achievement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTE0MQ=="}, "originalCommit": {"oid": "669ba95aca108519bc3499ee88a04461aaa1f1b6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTk5MDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDoyMDo1M1rOHJlXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozNzo1NlrOHJldmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5Mg==", "bodyText": "Why did you add here and below @Transactional?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811492", "createdAt": "2020-08-30T20:20:53Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497e3316832c66677399172c3bc6bd223073c1b2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzAxNw==", "bodyText": "The users are lazily initialized for achievements, so to be able to get the users within the hideUsersInAchievements function, I added that annotation.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479813017", "createdAt": "2020-08-30T20:37:56Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5Mg=="}, "originalCommit": {"oid": "497e3316832c66677399172c3bc6bd223073c1b2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTk5MjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDoyMjo1NVrOHJlYbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDo0NDowNFrOHJlfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY5Mg==", "bodyText": "I think you can leave out the @Transactional above when you persist here the achievements into the database.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811692", "createdAt": "2020-08-30T20:22:55Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n+        var achievements = achievementRepository.getAllByCourseId(courseId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        var achievements = achievementRepository.getAllByUserId(userId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n+        }\n+        achievementRepository.delete(achievement);\n+    }\n+\n+    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n+        for (Achievement achievement : achievements) {\n+            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n+        }\n+        return achievements;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497e3316832c66677399172c3bc6bd223073c1b2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzU3MQ==", "bodyText": "I don\u00b4t want to persist them here, since I just removed all the users (besides the requesting one) from the achievements. This is for data protection purposes only before sending the data to the client. I don\u00b4t want to actually delete those achievements for all other users. \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479813571", "createdAt": "2020-08-30T20:44:04Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n+        var achievements = achievementRepository.getAllByCourseId(courseId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        var achievements = achievementRepository.getAllByUserId(userId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n+        }\n+        achievementRepository.delete(achievement);\n+    }\n+\n+    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n+        for (Achievement achievement : achievements) {\n+            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n+        }\n+        return achievements;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY5Mg=="}, "originalCommit": {"oid": "497e3316832c66677399172c3bc6bd223073c1b2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQwNzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1NTozNFrOHKEruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyODo0OFrOHKGNMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDUzNg==", "bodyText": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480324536", "createdAt": "2020-08-31T18:55:34Z", "author": {"login": "linusmichel"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTQ5MA==", "bodyText": "Well, this is how we usually check for access rights based on authorities", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480349490", "createdAt": "2020-08-31T19:28:48Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDUzNg=="}, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQwODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1NTo1M1rOHKEslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyODo1N1rOHKGNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDc1OQ==", "bodyText": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480324759", "createdAt": "2020-08-31T18:55:53Z", "author": {"login": "linusmichel"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTYzOQ==", "bodyText": "Same as above", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480349639", "createdAt": "2020-08-31T19:28:57Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDc1OQ=="}, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQyMDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1ODo1M1rOHKEzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0NzowM1rOHKG4GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjQ1OA==", "bodyText": "Is there a chance of some sensitive data coming along with achievements? In this case, I guess we would need to check for the user access rights for the course first.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480326458", "createdAt": "2020-08-31T18:58:53Z", "author": {"login": "linusmichel"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2MDQ3Mw==", "bodyText": "Not really. Well achievements do have a relation to users but users are loaded lazily within achievements by default and since not requested explicitly they remain null here.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480360473", "createdAt": "2020-08-31T19:47:03Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjQ1OA=="}, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQzOTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNDo0MVrOHKE-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1OTowM1rOHKHO2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTQxOA==", "bodyText": "I would move this check to the method start", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480329418", "createdAt": "2020-08-31T19:04:41Z", "author": {"login": "linusmichel"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NjI5Ng==", "bodyText": "Done :) thanks", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480366296", "createdAt": "2020-08-31T19:59:03Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTQxOA=="}, "originalCommit": {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDQzOTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1ODo0NFrOHKOM_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNToyNDoxOFrOHKjfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MDUxMQ==", "bodyText": "Double check if this is correct: https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#pc-cascade-on-delete. Sounds to me like this is only for auto generated schemas. We also never use this in Artemis at the moment", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480480511", "createdAt": "2020-08-31T23:58:44Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;\n+\n+    @ManyToOne\n+    @OnDelete(action = OnDeleteAction.CASCADE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgyOTI5Mw==", "bodyText": "Well, the example in this link shows quite the behavior I want to have here.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480829293", "createdAt": "2020-09-01T05:24:18Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;\n+\n+    @ManyToOne\n+    @OnDelete(action = OnDeleteAction.CASCADE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MDUxMQ=="}, "originalCommit": {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDUzMzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNjoyM1rOHKPHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTozNToxN1rOHKj5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTM3OQ==", "bodyText": "I'd rather use an enum here to standardize the ranks across the system. For example AchievementRanks with PLATIN, GOLD, SILVER, BRONZE. Then you can easily couple these values with your achievement definitions.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480495379", "createdAt": "2020-09-01T00:26:23Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjA5Mg==", "bodyText": "That\u00b4s a good point actually, thanks \ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480836092", "createdAt": "2020-09-01T05:35:17Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTM3OQ=="}, "originalCommit": {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDUzOTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNzo1NVrOHKPKvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTozNjozOFrOHKj9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjMxOA==", "bodyText": "I would add an validation for the rank which is defined as INT at the moment. For example only allow ranks >0 or use the enum approach explained above.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480496318", "createdAt": "2020-09-01T00:27:55Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjk5NQ==", "bodyText": "Went for the enum approach :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480836995", "createdAt": "2020-09-01T05:36:38Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjMxOA=="}, "originalCommit": {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzExOTU5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MDo1M1rOHKqGVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MDo1M1rOHKqGVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzNzU1OA==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480937558", "createdAt": "2020-09-01T07:50:53Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMDgyOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTowNlrOHKqHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTowNlrOHKqHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzNzc1Nw==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480937757", "createdAt": "2020-09-01T07:51:06Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMTE5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToxMFrOHKqHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToxMFrOHKqHVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzNzgxNQ==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480937815", "createdAt": "2020-09-01T07:51:10Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMTY1OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToxNVrOHKqHmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToxNVrOHKqHmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzNzg4Mw==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480937883", "createdAt": "2020-09-01T07:51:15Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-56\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMTk0OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToxOVrOHKqHzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToxOVrOHKqHzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzNzkzNQ==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480937935", "createdAt": "2020-09-01T07:51:19Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-56\">\n+        <addForeignKeyConstraint baseColumnNames=\"user_id\" baseTableName=\"user_achievement\" constraintName=\"FKag0f3cay7w8r2nn3qa42qjcmj\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"jhi_user\" validate=\"true\"/>\n+    </changeSet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMjM1OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToyNFrOHKqIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MToyNFrOHKqIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzODAwOA==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480938008", "createdAt": "2020-09-01T07:51:24Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-56\">\n+        <addForeignKeyConstraint baseColumnNames=\"user_id\" baseTableName=\"user_achievement\" constraintName=\"FKag0f3cay7w8r2nn3qa42qjcmj\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"jhi_user\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-57\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMjgzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTozMFrOHKqIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTozMFrOHKqIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzODA5MA==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480938090", "createdAt": "2020-09-01T07:51:30Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-56\">\n+        <addForeignKeyConstraint baseColumnNames=\"user_id\" baseTableName=\"user_achievement\" constraintName=\"FKag0f3cay7w8r2nn3qa42qjcmj\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"jhi_user\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-57\">\n+        <addForeignKeyConstraint baseColumnNames=\"achievement_id\" baseTableName=\"user_achievement\" constraintName=\"FKcxeo6malce3dsw6tc43bcrwfd\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"achievement\" validate=\"true\"/>\n+    </changeSet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTozN1rOHKqI1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTozN1rOHKqI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzODE5OA==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480938198", "createdAt": "2020-09-01T07:51:37Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-56\">\n+        <addForeignKeyConstraint baseColumnNames=\"user_id\" baseTableName=\"user_achievement\" constraintName=\"FKag0f3cay7w8r2nn3qa42qjcmj\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"jhi_user\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-57\">\n+        <addForeignKeyConstraint baseColumnNames=\"achievement_id\" baseTableName=\"user_achievement\" constraintName=\"FKcxeo6malce3dsw6tc43bcrwfd\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"achievement\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-58\">\n+        <addForeignKeyConstraint baseColumnNames=\"exercise_id\" baseTableName=\"achievement\" constraintName=\"FKqdk7gj5csvsa1dq48aihd4lk\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"exercise\" validate=\"true\"/>\n+    </changeSet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzEyMzgwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTo0MVrOHKqJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1MTo0MVrOHKqJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkzODI2MA==", "bodyText": "remove this line", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480938260", "createdAt": "2020-09-01T07:51:41Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>\n+            <column name=\"title\" type=\"VARCHAR(255)\"/>\n+            <column name=\"course_id\" type=\"BIGINT\"/>\n+            <column name=\"exercise_id\" type=\"BIGINT\"/>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-35\">\n+        <createTable tableName=\"user_achievement\">\n+            <column name=\"user_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+            <column name=\"achievement_id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\"/>\n+            </column>\n+        </createTable>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-56\">\n+        <addForeignKeyConstraint baseColumnNames=\"user_id\" baseTableName=\"user_achievement\" constraintName=\"FKag0f3cay7w8r2nn3qa42qjcmj\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"jhi_user\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-57\">\n+        <addForeignKeyConstraint baseColumnNames=\"achievement_id\" baseTableName=\"user_achievement\" constraintName=\"FKcxeo6malce3dsw6tc43bcrwfd\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"achievement\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-58\">\n+        <addForeignKeyConstraint baseColumnNames=\"exercise_id\" baseTableName=\"achievement\" constraintName=\"FKqdk7gj5csvsa1dq48aihd4lk\" deferrable=\"false\" initiallyDeferred=\"false\" referencedColumnNames=\"id\" referencedTableName=\"exercise\" validate=\"true\"/>\n+    </changeSet>\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-59\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzE0MDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1NDo1N1rOHKqT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxODozNFrOHK-fMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTAyMg==", "bodyText": "what happens if the user objects are proxy objects here?\nIf you expect that the achievement includes the actual users, please clearly mention this in the JavaDoc", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480941022", "createdAt": "2020-09-01T07:54:57Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public Set<Achievement> findAllForCourse(Long courseId) {\n+        return achievementRepository.getAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        return achievementRepository.getAllByUserId(userId);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTYwMQ==", "bodyText": "refactored", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271601", "createdAt": "2020-09-01T16:18:34Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public Set<Achievement> findAllForCourse(Long courseId) {\n+        return achievementRepository.getAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        return achievementRepository.getAllByUserId(userId);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTAyMg=="}, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzE0MzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1NToyNVrOHKqVmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxODoxN1rOHK-eiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTQ2Nw==", "bodyText": "please remove Transactional, we don't want to use it!", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480941467", "createdAt": "2020-09-01T07:55:25Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTQzNQ==", "bodyText": "removed", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271435", "createdAt": "2020-09-01T16:18:17Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTQ2Nw=="}, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzE1MTUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzo1NzowMFrOHKqarw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxODoyNlrOHK-e6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0Mjc2Nw==", "bodyText": "When you save new entities to the database, they should not contain an id already!", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480942767", "createdAt": "2020-09-01T07:57:00Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Rank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTUyOA==", "bodyText": "removed", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271528", "createdAt": "2020-09-01T16:18:26Z", "author": {"login": "balazs-czopf"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Rank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0Mjc2Nw=="}, "originalCommit": {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY1NDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMjoyN1rOHLChQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNjo1NlrOHLG_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ==", "bodyText": "Should be findAllWithEagerAchivement or not?\nI think this would be more understandable, when you do it the other way around.\nSo in the AchievementRepository and make findByIdWithEagerUsers(achievementId)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481337665", "createdAt": "2020-09-01T18:12:27Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -96,4 +96,7 @@\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllWithEagerAchievements(@Param(\"achievementId\") Long achievementId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b93d0e90fde6137e06a126e85edefb5814f653c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mjg5NA==", "bodyText": "yeah, a renaming to findAllByAchievementId makes sense, but I do want to get the users", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481342894", "createdAt": "2020-09-01T18:21:54Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -96,4 +96,7 @@\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllWithEagerAchievements(@Param(\"achievementId\") Long achievementId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ=="}, "originalCommit": {"oid": "4b93d0e90fde6137e06a126e85edefb5814f653c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTAwNg==", "bodyText": "sounds good! :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481411006", "createdAt": "2020-09-01T20:26:56Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -96,4 +96,7 @@\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllWithEagerAchievements(@Param(\"achievementId\") Long achievementId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ=="}, "originalCommit": {"oid": "4b93d0e90fde6137e06a126e85edefb5814f653c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDE0Njg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDozNDo1NVrOHLHPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDozNjoyOVrOHLHSnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTAzMg==", "bodyText": "Maybe rename this to AchievementRank so that one can see directly that this belongs to achievements :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481415032", "createdAt": "2020-09-01T20:34:55Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package de.tum.in.www1.artemis.domain.enumeration;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9508d2e30a1f565543bf539723faac6031854da4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTgzNw==", "bodyText": "Good point :) done so", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481415837", "createdAt": "2020-09-01T20:36:29Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package de.tum.in.www1.artemis.domain.enumeration;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTAzMg=="}, "originalCommit": {"oid": "9508d2e30a1f565543bf539723faac6031854da4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI0NDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowNDoxNFrOHLILFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToyNjozMFrOHLI2wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA==", "bodyText": "Don't you need to add a user relationship somewhere, when you give out achievements?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481430294", "createdAt": "2020-09-01T21:04:14Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTczOQ==", "bodyText": "no, not on creation itself, only on assignment of the achievement later", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481431739", "createdAt": "2020-09-01T21:07:04Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMjM2OQ==", "bodyText": "Good catch @kloessst\nIf I remember the data model correctly, it should also have a connection to an exercise.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481432369", "createdAt": "2020-09-01T21:08:19Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNjgyNg==", "bodyText": "I think this is ok. You can create the achievement first and then add the relationship.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481436826", "createdAt": "2020-09-01T21:17:04Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MTQ3Mg==", "bodyText": "I guess you can add the connection to an exercise later, but it could also be possible right here.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481441472", "createdAt": "2020-09-01T21:26:30Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI1NTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowNzoyNFrOHLIRaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToyODowMlrOHLI5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTkxMg==", "bodyText": "Don't you have to save the altered achievements?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481431912", "createdAt": "2020-09-01T21:07:24Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "diffHunk": "@@ -285,6 +288,9 @@ public void delete(long exerciseId, boolean deleteStudentReposBuildPlans, boolea\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n+        // delete exercise in all achievements\n+        achievementService.findAllByExerciseId(exercise.getId()).forEach(achievement -> achievement.setExercise(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MjIyNw==", "bodyText": "yes, I should", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481442227", "createdAt": "2020-09-01T21:28:02Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "diffHunk": "@@ -285,6 +288,9 @@ public void delete(long exerciseId, boolean deleteStudentReposBuildPlans, boolea\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n+        // delete exercise in all achievements\n+        achievementService.findAllByExerciseId(exercise.getId()).forEach(achievement -> achievement.setExercise(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTkxMg=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI3NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxMzoxM1rOHLIdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToyODoyN1rOHLI6dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDg4Nw==", "bodyText": "I would just use VARCHAR(255) to future proof this. No need to be frugal here in this range.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481434887", "createdAt": "2020-09-01T21:13:13Z", "author": {"login": "kloessst"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzOTc4OQ==", "bodyText": "Or atleast a bit more than 8 Characters. 32 could be fine. In the end it doesn't really matter as varchar will only use what it needs + a little bit of overhead for character enumeration.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481439789", "createdAt": "2020-09-01T21:23:14Z", "author": {"login": "kloessst"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDg4Nw=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MjQyMg==", "bodyText": "okay, adjusted it accordingly :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481442422", "createdAt": "2020-09-01T21:28:27Z", "author": {"login": "balazs-czopf"}, "path": "src/main/resources/config/liquibase/changelog/20200824233945_changelog.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"balazs-czopf\" id=\"1598305196706-34\">\n+        <createTable tableName=\"achievement\">\n+            <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"achievementPK\"/>\n+            </column>\n+            <column name=\"description\" type=\"VARCHAR(255)\"/>\n+            <column name=\"icon\" type=\"VARCHAR(255)\"/>\n+            <column name=\"rank\" type=\"VARCHAR(8)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDg4Nw=="}, "originalCommit": {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzE4MDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxOTo0NVrOHcUcNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoxNzowMlrOHcWjHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzA3Ng==", "bodyText": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499457076", "createdAt": "2020-10-05T09:19:45Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MTYxMg==", "bodyText": "same as above", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499491612", "createdAt": "2020-10-05T10:17:02Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzA3Ng=="}, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzE4MTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToyMDowMFrOHcUczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMjowMlrOHcXDfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA==", "bodyText": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499457230", "createdAt": "2020-10-05T09:20:00Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MTUxMw==", "bodyText": "I did this just the way we\u00b4re using it in User.java:", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499491513", "createdAt": "2020-10-05T10:16:53Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MzE4MA==", "bodyText": "If I understand the comment correctly, groups was not a keyword when the column was created but added at a later date. This is not the situation here, therefore this workaround is not appropriate imo", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499493180", "createdAt": "2020-10-05T10:20:07Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTkwMw==", "bodyText": "Okay, I\u00b4ll rename the columns \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499499903", "createdAt": "2020-10-05T10:32:02Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzIyMjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToyODo0N1rOHcU0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozNDo0NFrOHcXI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MzI2NQ==", "bodyText": "I am not certain if this implementation of equals and hashcode is a good idea, as you are also calling equals and hashcode of other entities.  But I am not an expert so @krusche might help here\nMaybe read through this here https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/persistent-classes-equalshashcode.html.\nIs title a natural key?", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499463265", "createdAt": "2020-10-05T09:28:47Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getIcon() {\n+        return icon;\n+    }\n+\n+    public void setIcon(String icon) {\n+        this.icon = icon;\n+    }\n+\n+    public AchievementRank getRank() {\n+        return rank;\n+    }\n+\n+    public void setRank(AchievementRank rank) {\n+        this.rank = rank;\n+    }\n+\n+    public AchievementType getType() {\n+        return type;\n+    }\n+\n+    public void setType(AchievementType type) {\n+        this.type = type;\n+    }\n+\n+    public Set<User> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(Set<User> users) {\n+        this.users = users;\n+    }\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        this.course = course;\n+    }\n+\n+    public Exercise getExercise() {\n+        return exercise;\n+    }\n+\n+    public void setExercise(Exercise exercise) {\n+        this.exercise = exercise;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Achievement{\" + \"id=\" + getId() + \", title='\" + getTitle() + \"'\" + \", description='\" + getDescription() + \"'\" + \", icon='\" + getIcon() + \"'\" + \", rank='\"\n+                + getRank() + \"'\" + \", type='\" + getType() + \"'\" + \"}\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMTI2NA==", "bodyText": "Removing the functions for now as they are not needed in this PR", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499501264", "createdAt": "2020-10-05T10:34:44Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getIcon() {\n+        return icon;\n+    }\n+\n+    public void setIcon(String icon) {\n+        this.icon = icon;\n+    }\n+\n+    public AchievementRank getRank() {\n+        return rank;\n+    }\n+\n+    public void setRank(AchievementRank rank) {\n+        this.rank = rank;\n+    }\n+\n+    public AchievementType getType() {\n+        return type;\n+    }\n+\n+    public void setType(AchievementType type) {\n+        this.type = type;\n+    }\n+\n+    public Set<User> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(Set<User> users) {\n+        this.users = users;\n+    }\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        this.course = course;\n+    }\n+\n+    public Exercise getExercise() {\n+        return exercise;\n+    }\n+\n+    public void setExercise(Exercise exercise) {\n+        this.exercise = exercise;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Achievement{\" + \"id=\" + getId() + \", title='\" + getTitle() + \"'\" + \", description='\" + getDescription() + \"'\" + \", icon='\" + getIcon() + \"'\" + \", rank='\"\n+                + getRank() + \"'\" + \", type='\" + getType() + \"'\" + \"}\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MzI2NQ=="}, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzIyODcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozMDowN1rOHcU31Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMzoxM1rOHcXFxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NDE0OQ==", "bodyText": "Why is it nullable if false is the default value? That would imply it is never null? You could also set it using liquibase for all already existing courses to false.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499464149", "createdAt": "2020-10-05T09:30:07Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +103,10 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMDQ4Nw==", "bodyText": "Oh yeah, I forgot about that. Removing it now.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499500487", "createdAt": "2020-10-05T10:33:13Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +103,10 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NDE0OQ=="}, "originalCommit": {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODA3NjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyNDo0MlrOHcc5OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNDo1OFrOHcffsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTU3Ng==", "bodyText": "We introduced a new superclass for domain classes a few days ago that comes with the benefits of:\n\nalready implementing Serializable\nalready having an id attribute including getId() and setId(Long)\nalready overriding Object.hashCode() and Object.equals(Object) correctly, based on the id.\n\nI think it would be a good idea (and with the tests of #2155 almost necessary) to use DomainObject here.\nThen there are also fewer problems to deal with.\nI just want to mention it here and now already, to avoid confusion and possibly problems later on.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class Achievement implements Serializable {\n          \n          \n            \n            \n          \n          \n            \n                @Id\n          \n          \n            \n                @Column(name = \"id\")\n          \n          \n            \n                @GeneratedValue(strategy = GenerationType.IDENTITY)\n          \n          \n            \n                private Long id;\n          \n          \n            \n            public class Achievement extends DomainObject {", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499595576", "createdAt": "2020-10-05T13:24:42Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODE5NQ==", "bodyText": "Awesome, thank you for the hint and explanation \ud83d\udc4d\nApplied the changes as suggested", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499638195", "createdAt": "2020-10-05T14:24:58Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTU3Ng=="}, "originalCommit": {"oid": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODA3ODYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyNToxM1rOHcc6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyNToxM1rOHcc6lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTkyNg==", "bodyText": "See comment above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                public Long getId() {\n          \n          \n            \n                    return id;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void setId(Long id) {\n          \n          \n            \n                    this.id = id;\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499595926", "createdAt": "2020-10-05T13:25:13Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_rank\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_type\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDAxMzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoyMTozNlrOHcvuwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxNjoyNVrOHcw0Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDE5Mg==", "bodyText": "If I see it correctly, this is used for all exercise types. To reduce code duplication you could extract this into ExerciseService.java :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499904192", "createdAt": "2020-10-05T22:21:36Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "diffHunk": "@@ -106,6 +110,11 @@ public FileUploadExerciseResource(FileUploadExerciseService fileUploadExerciseSe\n \n         FileUploadExercise result = fileUploadExerciseRepository.save(fileUploadExercise);\n \n+        // Generate achievements if enabled in course and exercise not part of exam\n+        if (course.getHasAchievements() && (result.getExerciseGroup() == null || result.getExerciseGroup().getExam() == null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjAwNw==", "bodyText": "yeah, makes sense :) thanks", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499922007", "createdAt": "2020-10-05T23:16:25Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "diffHunk": "@@ -106,6 +110,11 @@ public FileUploadExerciseResource(FileUploadExerciseService fileUploadExerciseSe\n \n         FileUploadExercise result = fileUploadExerciseRepository.save(fileUploadExercise);\n \n+        // Generate achievements if enabled in course and exercise not part of exam\n+        if (course.getHasAchievements() && (result.getExerciseGroup() == null || result.getExerciseGroup().getExam() == null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDE5Mg=="}, "originalCommit": {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA5MTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1Nzo1MlrOHcwdhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxNjo1NlrOHcw08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE2Nw==", "bodyText": "I think you can remove the Transactional here when you just fetch the achievements for the users in the findAllByCourseId", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916167", "createdAt": "2020-10-05T22:57:52Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjE2MQ==", "bodyText": "also true, thanks for the advice :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499922161", "createdAt": "2020-10-05T23:16:56Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE2Nw=="}, "originalCommit": {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA5NDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1OToyN1rOHcwfXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1OToyN1rOHcwfXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjYzNg==", "bodyText": "For my comment in the delete call:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n          \n          \n            \n                @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916636", "createdAt": "2020-10-05T22:59:27Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA5NTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1OTo1NFrOHcwf8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1OTo1NFrOHcwf8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjc4Nw==", "bodyText": "Same as above :)", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916787", "createdAt": "2020-10-05T22:59:54Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDcyMzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzowMDoxNVrOHdc1Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MDo1M1rOHdm1yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzA3OA==", "bodyText": "Is this attribute set when the course is created by the instructor? If this is the case I would rename it to something like achievementsEnabled.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500643078", "createdAt": "2020-10-06T23:00:15Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +102,9 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n+    private Boolean hasAchievements = false; // default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzExNA==", "bodyText": "Yes, it is. Renaming it then.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500807114", "createdAt": "2020-10-07T07:50:53Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +102,9 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n+    private Boolean hasAchievements = false; // default value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzA3OA=="}, "originalCommit": {"oid": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDczNTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzowNjoyMVrOHdc8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTo1NFrOHdm4Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDg4Nw==", "bodyText": "You could use exercise.hasExerciseGroup() to check for exam exercises.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500644887", "createdAt": "2020-10-06T23:06:21Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n+    }\n+\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    /**\n+     * Generates achievements for an exercise\n+     * If achievements are enabled for corresponding course and exercise is not part of exam\n+     * Used when exercise is created\n+     * @param course\n+     * @param exercise\n+     */\n+    public void generateForExercise(Course course, Exercise exercise) {\n+        if (course.getHasAchievements() && (exercise.getExerciseGroup() == null || exercise.getExerciseGroup().getExam() == null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzc3NA==", "bodyText": "If that is sufficient, sure.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500807774", "createdAt": "2020-10-07T07:51:54Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n+    }\n+\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    /**\n+     * Generates achievements for an exercise\n+     * If achievements are enabled for corresponding course and exercise is not part of exam\n+     * Used when exercise is created\n+     * @param course\n+     * @param exercise\n+     */\n+    public void generateForExercise(Course course, Exercise exercise) {\n+        if (course.getHasAchievements() && (exercise.getExerciseGroup() == null || exercise.getExerciseGroup().getExam() == null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDg4Nw=="}, "originalCommit": {"oid": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTg5MDE2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNzo1OVrOHdneYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNzo1OVrOHdneYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUwNA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817504", "createdAt": "2020-10-07T08:07:59Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    CourseService courseService;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course firstCourse;\n+\n+    private Course secondCourse;\n+\n+    private Exercise firstExercise;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstCourse.setAchievementsEnabled(true);\n+        courseRepository.save(firstCourse);\n+        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n+\n+        achievementService.generateForCourse(firstCourse);\n+        achievementService.generateForCourse(secondCourse);\n+        achievementService.generateForExercise(firstCourse, firstExercise);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTg5MDE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowODowMFrOHdneZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowODowMFrOHdneZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUxMA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817510", "createdAt": "2020-10-07T08:08:00Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    CourseService courseService;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course firstCourse;\n+\n+    private Course secondCourse;\n+\n+    private Exercise firstExercise;\n+\n+    @BeforeEach", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTg5MDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowODowMFrOHdneaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowODowMFrOHdneaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUxNQ==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817515", "createdAt": "2020-10-07T08:08:00Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement extends DomainObject {\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_rank\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_type\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties(\"achievements\")\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4769, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}