{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjM3MDc0", "number": 2107, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMTowODoxM1rOEqCuOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxOTozMFrOEqg1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTIwMjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMTowODoxM1rOHcDpyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDozMzo0NFrOHcEWkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjAyNQ==", "bodyText": "This JavaDoc should be stored in the corresponding interface.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499182025", "createdAt": "2020-10-03T21:08:13Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -833,6 +833,13 @@ private void addFeedbackToResult(Result result, List<BambooBuildResultNotificati\n         }\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MzQ4OA==", "bodyText": "This is now removed, since it is already documented in the superclass.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499193488", "createdAt": "2020-10-04T00:33:44Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -833,6 +833,13 @@ private void addFeedbackToResult(Result result, List<BambooBuildResultNotificati\n         }\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjAyNQ=="}, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTIwMzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StaticCodeAnalysisService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMTowOToyMFrOHcDqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDozMjo1NVrOHcEWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjEwMA==", "bodyText": "this is unreadable and not understandable. Please do not abuse the stream API and simplify this code so that it is easier to understand!", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499182100", "createdAt": "2020-10-03T21:09:20Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StaticCodeAnalysisService.java", "diffHunk": "@@ -98,6 +104,26 @@ public void createDefaultCategories(ProgrammingExercise programmingExercise) {\n             originalCategory.setState(matchingCategory.getState());\n         }\n         staticCodeAnalysisCategoryRepository.saveAll(originalCategories);\n+\n+        // At least one category was updated. We use this flag to inform the instructor about outdated student results.\n+        programmingSubmissionService.setTestCasesChangedAndTriggerTestCaseUpdate(exerciseId);\n+\n         return originalCategories;\n     }\n+\n+    /**\n+     * Links the categories of an exercise with the default category mappings.\n+     * @param programmingExercise The programming exercise\n+     * @return A list of pairs of categories and their mappings.\n+     */\n+    public List<ImmutablePair<StaticCodeAnalysisCategory, List<StaticCodeAnalysisDefaultCategory.CategoryMapping>>> getCategoriesWithMappingForExercise(\n+            ProgrammingExercise programmingExercise) {\n+        var categories = findByExerciseId(programmingExercise.getId());\n+        var defaultCategories = staticCodeAnalysisDefaultConfigurations.get(programmingExercise.getProgrammingLanguage());\n+\n+        return categories.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MzQ2OQ==", "bodyText": "I improved the code readability here.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499193469", "createdAt": "2020-10-04T00:32:55Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StaticCodeAnalysisService.java", "diffHunk": "@@ -98,6 +104,26 @@ public void createDefaultCategories(ProgrammingExercise programmingExercise) {\n             originalCategory.setState(matchingCategory.getState());\n         }\n         staticCodeAnalysisCategoryRepository.saveAll(originalCategories);\n+\n+        // At least one category was updated. We use this flag to inform the instructor about outdated student results.\n+        programmingSubmissionService.setTestCasesChangedAndTriggerTestCaseUpdate(exerciseId);\n+\n         return originalCategories;\n     }\n+\n+    /**\n+     * Links the categories of an exercise with the default category mappings.\n+     * @param programmingExercise The programming exercise\n+     * @return A list of pairs of categories and their mappings.\n+     */\n+    public List<ImmutablePair<StaticCodeAnalysisCategory, List<StaticCodeAnalysisDefaultCategory.CategoryMapping>>> getCategoriesWithMappingForExercise(\n+            ProgrammingExercise programmingExercise) {\n+        var categories = findByExerciseId(programmingExercise.getId());\n+        var defaultCategories = staticCodeAnalysisDefaultConfigurations.get(programmingExercise.getProgrammingLanguage());\n+\n+        return categories.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjEwMA=="}, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTIwMzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMTowOTo1N1rOHcDqPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDozMjoxNVrOHcEWWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjE0MA==", "bodyText": "please add some inline comments what you are doing here! Otherwise the code is hard to understand!", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499182140", "createdAt": "2020-10-03T21:09:57Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,6 +369,35 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n+\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjE5NA==", "bodyText": "I would also suggest to extract two additional methods here.\nOne takes case about the tests, the other one about static code analysis.\nThe method updateScore takes care about invoking both (the 2nd only if static code analysis is enabled)", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499182194", "createdAt": "2020-10-03T21:11:06Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,6 +369,35 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n+\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjE0MA=="}, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MzQzMg==", "bodyText": "I improved the readability and separated the penalty calculation into a new function.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499193432", "createdAt": "2020-10-04T00:32:15Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,6 +369,35 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n+\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjE0MA=="}, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTIwNDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMToxMTozNFrOHcDqkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDozMjozNFrOHcEWbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjIyNw==", "bodyText": "please add more inline comments", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499182227", "createdAt": "2020-10-03T21:11:34Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -297,6 +310,43 @@ private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingE\n             result.setHasFeedback(false);\n     }\n \n+    /**\n+     * Sets the category for each feedback and removes feedback with no or an inactive category\n+     * @param result of the build run\n+     * @param staticCodeAnalysisFeedback List of feedback objects\n+     * @param programmingExercise The current exercise\n+     * @return The filtered list of feedback objects\n+     */\n+    private List<Feedback> removeInvisibleScaFeedback(Result result, List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+        var categories = staticCodeAnalysisService.getCategoriesWithMappingForExercise(programmingExercise);\n+\n+        return staticCodeAnalysisFeedback.stream().filter(feedback -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjI4OQ==", "bodyText": "It's unclear why you need an ObjectMapper here", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499182289", "createdAt": "2020-10-03T21:12:24Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -297,6 +310,43 @@ private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingE\n             result.setHasFeedback(false);\n     }\n \n+    /**\n+     * Sets the category for each feedback and removes feedback with no or an inactive category\n+     * @param result of the build run\n+     * @param staticCodeAnalysisFeedback List of feedback objects\n+     * @param programmingExercise The current exercise\n+     * @return The filtered list of feedback objects\n+     */\n+    private List<Feedback> removeInvisibleScaFeedback(Result result, List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+        var categories = staticCodeAnalysisService.getCategoriesWithMappingForExercise(programmingExercise);\n+\n+        return staticCodeAnalysisFeedback.stream().filter(feedback -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjIyNw=="}, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MzQ1NA==", "bodyText": "Added comments and improved the code readability.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499193454", "createdAt": "2020-10-04T00:32:34Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -297,6 +310,43 @@ private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingE\n             result.setHasFeedback(false);\n     }\n \n+    /**\n+     * Sets the category for each feedback and removes feedback with no or an inactive category\n+     * @param result of the build run\n+     * @param staticCodeAnalysisFeedback List of feedback objects\n+     * @param programmingExercise The current exercise\n+     * @return The filtered list of feedback objects\n+     */\n+    private List<Feedback> removeInvisibleScaFeedback(Result result, List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+        var categories = staticCodeAnalysisService.getCategoriesWithMappingForExercise(programmingExercise);\n+\n+        return staticCodeAnalysisFeedback.stream().filter(feedback -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjIyNw=="}, "originalCommit": {"oid": "838a8c85816f4d94632dca2af973691ad3232b91"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxNTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzo0N1rOHcmBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzo0N1rOHcmBpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTE5MA==", "bodyText": "Should log something here.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499745190", "createdAt": "2020-10-05T17:03:47Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -297,6 +309,53 @@ private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingE\n             result.setHasFeedback(false);\n     }\n \n+    /**\n+     * Sets the category for each feedback and removes feedback with no or an inactive category\n+     * @param result of the build run\n+     * @param staticCodeAnalysisFeedback List of feedback objects\n+     * @param programmingExercise The current exercise\n+     * @return The filtered list of feedback objects\n+     */\n+    private List<Feedback> removeInvisibleScaFeedback(Result result, List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+        var categoryPairs = staticCodeAnalysisService.getCategoriesWithMappingForExercise(programmingExercise);\n+\n+        return staticCodeAnalysisFeedback.stream().filter(feedback -> {\n+            // ObjectMapper to extract the static code analysis issue from the feedback\n+            ObjectMapper mapper = new ObjectMapper();\n+            // the category for this feedback\n+            Optional<StaticCodeAnalysisCategory> category = Optional.empty();\n+            try {\n+\n+                // extract the sca issue\n+                var issue = mapper.readValue(feedback.getDetailText(), StaticCodeAnalysisReportDTO.StaticCodeAnalysisIssue.class);\n+\n+                // find the category for this issue\n+                for (var categoryPair : categoryPairs) {\n+                    var categoryMappings = categoryPair.right;\n+                    if (categoryMappings.stream()\n+                            .anyMatch(mapping -> mapping.getTool().name().equals(feedback.getReference()) && mapping.getCategory().equals(issue.getCategory()))) {\n+                        category = Optional.of(categoryPair.left);\n+                        break;\n+                    }\n+                }\n+\n+            }\n+            catch (JsonProcessingException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxNTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzo1MlrOHcmB3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzo1MlrOHcmB3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTI0NA==", "bodyText": "All feedback which is currently invisible will be removed and not saved in the database if I understand this right. This has the advantage that feedback doesn't need to be filtered when sending it to the client but also makes a proper re-evaluate impossible.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499745244", "createdAt": "2020-10-05T17:03:52Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -297,6 +309,53 @@ private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingE\n             result.setHasFeedback(false);\n     }\n \n+    /**\n+     * Sets the category for each feedback and removes feedback with no or an inactive category\n+     * @param result of the build run\n+     * @param staticCodeAnalysisFeedback List of feedback objects\n+     * @param programmingExercise The current exercise\n+     * @return The filtered list of feedback objects\n+     */\n+    private List<Feedback> removeInvisibleScaFeedback(Result result, List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+        var categoryPairs = staticCodeAnalysisService.getCategoriesWithMappingForExercise(programmingExercise);\n+\n+        return staticCodeAnalysisFeedback.stream().filter(feedback -> {\n+            // ObjectMapper to extract the static code analysis issue from the feedback\n+            ObjectMapper mapper = new ObjectMapper();\n+            // the category for this feedback\n+            Optional<StaticCodeAnalysisCategory> category = Optional.empty();\n+            try {\n+\n+                // extract the sca issue\n+                var issue = mapper.readValue(feedback.getDetailText(), StaticCodeAnalysisReportDTO.StaticCodeAnalysisIssue.class);\n+\n+                // find the category for this issue\n+                for (var categoryPair : categoryPairs) {\n+                    var categoryMappings = categoryPair.right;\n+                    if (categoryMappings.stream()\n+                            .anyMatch(mapping -> mapping.getTool().name().equals(feedback.getReference()) && mapping.getCategory().equals(issue.getCategory()))) {\n+                        category = Optional.of(categoryPair.left);\n+                        break;\n+                    }\n+                }\n+\n+            }\n+            catch (JsonProcessingException ignored) {\n+            }\n+\n+            if (category.isEmpty() || category.get().getState().equals(CategoryState.INACTIVE)) {\n+                // remove feedback in no or inactive category\n+                result.removeFeedback(feedback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxNjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNDoxOFrOHcmCwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNDoxOFrOHcmCwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTQ3Mg==", "bodyText": "I think this information should be added when the feedback is generated.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499745472", "createdAt": "2020-10-05T17:04:18Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -297,6 +309,53 @@ private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingE\n             result.setHasFeedback(false);\n     }\n \n+    /**\n+     * Sets the category for each feedback and removes feedback with no or an inactive category\n+     * @param result of the build run\n+     * @param staticCodeAnalysisFeedback List of feedback objects\n+     * @param programmingExercise The current exercise\n+     * @return The filtered list of feedback objects\n+     */\n+    private List<Feedback> removeInvisibleScaFeedback(Result result, List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+        var categoryPairs = staticCodeAnalysisService.getCategoriesWithMappingForExercise(programmingExercise);\n+\n+        return staticCodeAnalysisFeedback.stream().filter(feedback -> {\n+            // ObjectMapper to extract the static code analysis issue from the feedback\n+            ObjectMapper mapper = new ObjectMapper();\n+            // the category for this feedback\n+            Optional<StaticCodeAnalysisCategory> category = Optional.empty();\n+            try {\n+\n+                // extract the sca issue\n+                var issue = mapper.readValue(feedback.getDetailText(), StaticCodeAnalysisReportDTO.StaticCodeAnalysisIssue.class);\n+\n+                // find the category for this issue\n+                for (var categoryPair : categoryPairs) {\n+                    var categoryMappings = categoryPair.right;\n+                    if (categoryMappings.stream()\n+                            .anyMatch(mapping -> mapping.getTool().name().equals(feedback.getReference()) && mapping.getCategory().equals(issue.getCategory()))) {\n+                        category = Optional.of(categoryPair.left);\n+                        break;\n+                    }\n+                }\n+\n+            }\n+            catch (JsonProcessingException ignored) {\n+            }\n+\n+            if (category.isEmpty() || category.get().getState().equals(CategoryState.INACTIVE)) {\n+                // remove feedback in no or inactive category\n+                result.removeFeedback(feedback);\n+                return false; // filter this feedback\n+            }\n+            else {\n+                // add the category name to the feedback text\n+                feedback.setText(Feedback.STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER + category.get().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAzMzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowOToxOVrOHcmNEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowOToxOVrOHcmNEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {\n          \n          \n            \n                        if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled()) && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499748113", "createdAt": "2020-10-05T17:09:19Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,11 +379,22 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n-            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+\n+            // if static code analysis is enabled, reduce the points by the calculated penalty\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA2MDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxNzowMVrOHcmd0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxNzowMVrOHcmd0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MjQwMQ==", "bodyText": "I don't think this condition does what is supposed to do. If programmingExercise.getMaxStaticCodeAnalysisPenalty() is null, the user does not want to apply a limit. Here 0>0 is false and the grading won't take place.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499752401", "createdAt": "2020-10-05T17:17:01Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,11 +379,22 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n-            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+\n+            // if static code analysis is enabled, reduce the points by the calculated penalty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTEyNTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozNjoxMVrOHcnGzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxODoyMFrOHdPukg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2Mjg5Mg==", "bodyText": "I think the testCasePoints need to be capped first and then the penalty is subtracted. Imagine bonusPoints+maxPoints = 20. Temporarily, a student can get more test case points e.g. 30 in this calculation and then the subtracted penalty would not have any effect.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499762892", "createdAt": "2020-10-05T17:36:11Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,11 +379,22 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n-            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+\n+            // if static code analysis is enabled, reduce the points by the calculated penalty\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {\n+                successfulTestPoints -= calculateStaticCodeAnalysisPenalty(staticCodeAnalysisFeedback, programmingExercise);\n+\n+                if (successfulTestPoints < 0) {\n+                    successfulTestPoints = 0;\n+                }\n+            }\n+\n             // The points are capped by the maximum achievable points\n+            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n             if (successfulTestPoints > maxPoints) {\n                 successfulTestPoints = maxPoints;\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExNzI3Mg==", "bodyText": "please fix it in this PR", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r500117272", "createdAt": "2020-10-06T09:00:00Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,11 +379,22 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n-            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+\n+            // if static code analysis is enabled, reduce the points by the calculated penalty\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {\n+                successfulTestPoints -= calculateStaticCodeAnalysisPenalty(staticCodeAnalysisFeedback, programmingExercise);\n+\n+                if (successfulTestPoints < 0) {\n+                    successfulTestPoints = 0;\n+                }\n+            }\n+\n             // The points are capped by the maximum achievable points\n+            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n             if (successfulTestPoints > maxPoints) {\n                 successfulTestPoints = maxPoints;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2Mjg5Mg=="}, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyODQzNA==", "bodyText": "This is changed now.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r500428434", "createdAt": "2020-10-06T16:18:20Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -318,11 +379,22 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n                 return testPointsWithBonus;\n             }).sum();\n-            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+\n+            // if static code analysis is enabled, reduce the points by the calculated penalty\n+            if (programmingExercise.isStaticCodeAnalysisEnabled() && Optional.ofNullable(programmingExercise.getMaxStaticCodeAnalysisPenalty()).orElse(0) > 0) {\n+                successfulTestPoints -= calculateStaticCodeAnalysisPenalty(staticCodeAnalysisFeedback, programmingExercise);\n+\n+                if (successfulTestPoints < 0) {\n+                    successfulTestPoints = 0;\n+                }\n+            }\n+\n             // The points are capped by the maximum achievable points\n+            double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n             if (successfulTestPoints > maxPoints) {\n                 successfulTestPoints = maxPoints;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2Mjg5Mg=="}, "originalCommit": {"oid": "99f0f4b3d7a301a9dffb166d240002a9cb1f78db"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTYxMzY2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/programmingExercise.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDowNDo0M1rOHcr33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMjowOVrOHcsvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MDk5MQ==", "bodyText": "Suggestion: use \"Bepunktung\" / \"Bewertung\" here.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499840991", "createdAt": "2020-10-05T20:04:43Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/webapp/i18n/de/programmingExercise.json", "diffHunk": "@@ -100,33 +100,36 @@\n                 \"ok\": \"Hinweise ok.\",\n                 \"invalidHint\": \"Der Hinweis mit Id '{{id}}' konnte nicht in der Datenbank f\u00fcr diese Programmier\u00fcbung gefunden werden.\"\n             },\n-            \"manageTestCases\": {\n-                \"title\": \"Verwalte Testf\u00e4lle\",\n-                \"hideInactive\": \"Inaktive Testf\u00e4lle verbergen\",\n-                \"showInactive\": \"Inaktive Testf\u00e4lle anzeigen\",\n-                \"reset\": \"Testf\u00e4lle zur\u00fccksetzen\",\n-                \"resetSuccessful\": \"Die Tests wurden erfolgreich zur\u00fcckgesetzt.\",\n-                \"resetFailed\": \"Die Tests konnten nicht zur\u00fcckgesetzt werden.\",\n-                \"save\": \"Gewichtung speichern\",\n-                \"testsUpdated\": \"Die Tests wurde erfolgreich gespeichert.\",\n-                \"testsCouldNotBeUpdated\": \"Die Tests {{id}} konnte nicht \u00fcbernommen werden: {{error}}.\",\n-                \"saveTestCases\": \"Testf\u00e4lle speichern\",\n-                \"testCasesUpdated\": \"Die Testf\u00e4lle wurden erfolgreich gespeichert.\",\n-                \"testCasesCouldNotBeUpdated\": \"Die folgenden Testf\u00e4lle konnten nicht gespeichert werden: {{testCases}}.\",\n-                \"noUnsavedChanges\": \"Keine ungespeicherten \u00c4nderungen\",\n-                \"unsavedChanges\": \"Ungespeicherte \u00c4nderungen\",\n-                \"updatedTestCasesShort\": \"Ver\u00e4nderte Testf\u00e4lle\",\n-                \"updatedTestCases\": \"Achtung: Du hast die Testf\u00e4lle der Aufgabe ver\u00e4ndert, aber nicht alle Einreichungen der Studenten mit den aktualisierten Testfall Einstellungen erneut ausgef\u00fchrt. Neu erstellte Ergebnisse werden mit den aktualisierten Testfall Einstellungen bewertet, w\u00e4hrend existierende Ergebnisse nicht ver\u00e4ndert werden. Hierdurch kann es unter den Studenten zu inkonsistenten Ergebnissen kommen. Du kannst die erneute Ausf\u00fchrung der Einreichungen auch zu einem sp\u00e4teren Zeitpunkt veranlassen. Willst du wirklich den Bereich verlassen?\",\n-                \"updatedTestCasesTooltip\": \"Du hast die Testf\u00e4lle ver\u00e4ndert, allerdings hat diese Aktion keine Auswirkungen auf die bereits vorhandenen Ergebnisse der Studenten. Neu erstellte Ergebnisse werden mit den aktualisierten Testfall Einstellungen bewertet, w\u00e4hrend existierende Ergebnisse nicht ver\u00e4ndert werden. Hierdurch kann es unter den Studenten zu inkonsistenten Ergebnissen kommen. \u00dcber den Button 'Alle erneut ausf\u00fchren' kannst du die Einreichungen aller Studenten mit den ver\u00e4nderten Testf\u00e4llen erneut bewerten.\",\n-                \"noUpdatedTestCases\": \"Keine ver\u00e4nderten Testf\u00e4lle\",\n-                \"runAfterDueDateDisabled\": \"Du kannst diese Option nicht aktivieren, weil f\u00fcr diese \u00dcbung kein Build & Test Datum definiert ist. Klicke auf den Button, um in die Bearbeitungsmaske zu wechseln und das Datum zu setzen.\",\n-                \"notReleased\": \"Nicht ver\u00f6ffentlicht\",\n-                \"notReleasedTooltip\": \"Die Programmier\u00fcbung ist nicht ver\u00f6ffentlicht oder ist ver\u00f6ffentlicht und besitzt noch keine Ergebnisse von Studenten. Daher k\u00f6nnen die Testf\u00e4lle ge\u00e4ndert werden, ohne dass die Studentenabgaben erneut ausgef\u00fchrt werden m\u00fcssen.\"\n-            },\n             \"configureGrading\": {\n                 \"title\": \"Setze Benotung\",\n                 \"save\": \"Speichern\",\n-                \"reset\": \"Zur\u00fccksetzen\"\n+                \"reset\": \"Zur\u00fccksetzen\",\n+                \"status\": {\n+                    \"unsavedChanges\": \"Ungespeicherte \u00c4nderungen\",\n+                    \"unsavedTestCaseChanges\": \"Ungespeicherte Tests\",\n+                    \"unsavedCategoryChanges\": \"Ungespeicherte Kategorien\",\n+                    \"noUnsavedChanges\": \"Keine ungespeicherten \u00c4nderungen\"\n+                },\n+                \"testCases\": {\n+                    \"resetSuccessful\": \"Die Tests wurden erfolgreich zur\u00fcckgesetzt.\",\n+                    \"resetFailed\": \"Die Tests konnten nicht zur\u00fcckgesetzt werden.\",\n+                    \"updated\": \"Die Testf\u00e4lle wurden erfolgreich gespeichert.\",\n+                    \"couldNotBeUpdated\": \"Die folgenden Testf\u00e4lle konnten nicht gespeichert werden: {{testCases}}.\",\n+                    \"runAfterDueDateDisabled\": \"Du kannst diese Option nicht aktivieren, weil f\u00fcr diese \u00dcbung kein Build & Test Datum definiert ist. Klicke auf den Button, um in die Bearbeitungsmaske zu wechseln und das Datum zu setzen.\",\n+                    \"showInactive\": \"Inaktive Testf\u00e4lle anzeigen\"\n+                },\n+                \"categories\": {\n+                    \"notGraded\": \"Nicht benotet.\",\n+                    \"noFeedback\": \"Ohne sichtbares feedback.\",\n+                    \"updated\": \"Die Kategorien wurden erfolgreich gespeichert.\",\n+                    \"couldNotBeUpdated\": \"Die folgenden Kategorien konnten nicht gespeichert werden: {{categories}}.\"\n+                },\n+                \"updatedGradingConfigShort\": \"Ver\u00e4nderte Benotung\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ac76dad9939c094ec6aba02f9253862fddfcb1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTI3MQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499855271", "createdAt": "2020-10-05T20:32:09Z", "author": {"login": "schultek"}, "path": "src/main/webapp/i18n/de/programmingExercise.json", "diffHunk": "@@ -100,33 +100,36 @@\n                 \"ok\": \"Hinweise ok.\",\n                 \"invalidHint\": \"Der Hinweis mit Id '{{id}}' konnte nicht in der Datenbank f\u00fcr diese Programmier\u00fcbung gefunden werden.\"\n             },\n-            \"manageTestCases\": {\n-                \"title\": \"Verwalte Testf\u00e4lle\",\n-                \"hideInactive\": \"Inaktive Testf\u00e4lle verbergen\",\n-                \"showInactive\": \"Inaktive Testf\u00e4lle anzeigen\",\n-                \"reset\": \"Testf\u00e4lle zur\u00fccksetzen\",\n-                \"resetSuccessful\": \"Die Tests wurden erfolgreich zur\u00fcckgesetzt.\",\n-                \"resetFailed\": \"Die Tests konnten nicht zur\u00fcckgesetzt werden.\",\n-                \"save\": \"Gewichtung speichern\",\n-                \"testsUpdated\": \"Die Tests wurde erfolgreich gespeichert.\",\n-                \"testsCouldNotBeUpdated\": \"Die Tests {{id}} konnte nicht \u00fcbernommen werden: {{error}}.\",\n-                \"saveTestCases\": \"Testf\u00e4lle speichern\",\n-                \"testCasesUpdated\": \"Die Testf\u00e4lle wurden erfolgreich gespeichert.\",\n-                \"testCasesCouldNotBeUpdated\": \"Die folgenden Testf\u00e4lle konnten nicht gespeichert werden: {{testCases}}.\",\n-                \"noUnsavedChanges\": \"Keine ungespeicherten \u00c4nderungen\",\n-                \"unsavedChanges\": \"Ungespeicherte \u00c4nderungen\",\n-                \"updatedTestCasesShort\": \"Ver\u00e4nderte Testf\u00e4lle\",\n-                \"updatedTestCases\": \"Achtung: Du hast die Testf\u00e4lle der Aufgabe ver\u00e4ndert, aber nicht alle Einreichungen der Studenten mit den aktualisierten Testfall Einstellungen erneut ausgef\u00fchrt. Neu erstellte Ergebnisse werden mit den aktualisierten Testfall Einstellungen bewertet, w\u00e4hrend existierende Ergebnisse nicht ver\u00e4ndert werden. Hierdurch kann es unter den Studenten zu inkonsistenten Ergebnissen kommen. Du kannst die erneute Ausf\u00fchrung der Einreichungen auch zu einem sp\u00e4teren Zeitpunkt veranlassen. Willst du wirklich den Bereich verlassen?\",\n-                \"updatedTestCasesTooltip\": \"Du hast die Testf\u00e4lle ver\u00e4ndert, allerdings hat diese Aktion keine Auswirkungen auf die bereits vorhandenen Ergebnisse der Studenten. Neu erstellte Ergebnisse werden mit den aktualisierten Testfall Einstellungen bewertet, w\u00e4hrend existierende Ergebnisse nicht ver\u00e4ndert werden. Hierdurch kann es unter den Studenten zu inkonsistenten Ergebnissen kommen. \u00dcber den Button 'Alle erneut ausf\u00fchren' kannst du die Einreichungen aller Studenten mit den ver\u00e4nderten Testf\u00e4llen erneut bewerten.\",\n-                \"noUpdatedTestCases\": \"Keine ver\u00e4nderten Testf\u00e4lle\",\n-                \"runAfterDueDateDisabled\": \"Du kannst diese Option nicht aktivieren, weil f\u00fcr diese \u00dcbung kein Build & Test Datum definiert ist. Klicke auf den Button, um in die Bearbeitungsmaske zu wechseln und das Datum zu setzen.\",\n-                \"notReleased\": \"Nicht ver\u00f6ffentlicht\",\n-                \"notReleasedTooltip\": \"Die Programmier\u00fcbung ist nicht ver\u00f6ffentlicht oder ist ver\u00f6ffentlicht und besitzt noch keine Ergebnisse von Studenten. Daher k\u00f6nnen die Testf\u00e4lle ge\u00e4ndert werden, ohne dass die Studentenabgaben erneut ausgef\u00fchrt werden m\u00fcssen.\"\n-            },\n             \"configureGrading\": {\n                 \"title\": \"Setze Benotung\",\n                 \"save\": \"Speichern\",\n-                \"reset\": \"Zur\u00fccksetzen\"\n+                \"reset\": \"Zur\u00fccksetzen\",\n+                \"status\": {\n+                    \"unsavedChanges\": \"Ungespeicherte \u00c4nderungen\",\n+                    \"unsavedTestCaseChanges\": \"Ungespeicherte Tests\",\n+                    \"unsavedCategoryChanges\": \"Ungespeicherte Kategorien\",\n+                    \"noUnsavedChanges\": \"Keine ungespeicherten \u00c4nderungen\"\n+                },\n+                \"testCases\": {\n+                    \"resetSuccessful\": \"Die Tests wurden erfolgreich zur\u00fcckgesetzt.\",\n+                    \"resetFailed\": \"Die Tests konnten nicht zur\u00fcckgesetzt werden.\",\n+                    \"updated\": \"Die Testf\u00e4lle wurden erfolgreich gespeichert.\",\n+                    \"couldNotBeUpdated\": \"Die folgenden Testf\u00e4lle konnten nicht gespeichert werden: {{testCases}}.\",\n+                    \"runAfterDueDateDisabled\": \"Du kannst diese Option nicht aktivieren, weil f\u00fcr diese \u00dcbung kein Build & Test Datum definiert ist. Klicke auf den Button, um in die Bearbeitungsmaske zu wechseln und das Datum zu setzen.\",\n+                    \"showInactive\": \"Inaktive Testf\u00e4lle anzeigen\"\n+                },\n+                \"categories\": {\n+                    \"notGraded\": \"Nicht benotet.\",\n+                    \"noFeedback\": \"Ohne sichtbares feedback.\",\n+                    \"updated\": \"Die Kategorien wurden erfolgreich gespeichert.\",\n+                    \"couldNotBeUpdated\": \"Die folgenden Kategorien konnten nicht gespeichert werden: {{categories}}.\"\n+                },\n+                \"updatedGradingConfigShort\": \"Ver\u00e4nderte Benotung\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MDk5MQ=="}, "originalCommit": {"oid": "56ac76dad9939c094ec6aba02f9253862fddfcb1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTY1Mzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoxNzo1NlrOHcsSLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMTo1OFrOHcsvXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0NzcyNg==", "bodyText": "If not graded, continue.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499847726", "createdAt": "2020-10-05T20:17:56Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -333,6 +405,50 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n         }\n     }\n \n+    /**\n+     * Calculates the total penalty over all static code analysis issues\n+     * @param staticCodeAnalysisFeedback The list of static code analysis feedback\n+     * @param programmingExercise The current exercise\n+     * @return The sum of all penalties, capped at the maximum allowed penalty\n+     */\n+    private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+\n+        double codeAnalysisPenaltyPoints = 0;\n+\n+        var gradedCategories = staticCodeAnalysisService.findByExerciseId(programmingExercise.getId()).stream()\n+                .filter(staticCodeAnalysisCategory -> staticCodeAnalysisCategory.getState().equals(CategoryState.GRADED)).collect(Collectors.toList());\n+\n+        for (var category : gradedCategories) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ac76dad9939c094ec6aba02f9253862fddfcb1"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTE5Nw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499855197", "createdAt": "2020-10-05T20:31:58Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -333,6 +405,50 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n         }\n     }\n \n+    /**\n+     * Calculates the total penalty over all static code analysis issues\n+     * @param staticCodeAnalysisFeedback The list of static code analysis feedback\n+     * @param programmingExercise The current exercise\n+     * @return The sum of all penalties, capped at the maximum allowed penalty\n+     */\n+    private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+\n+        double codeAnalysisPenaltyPoints = 0;\n+\n+        var gradedCategories = staticCodeAnalysisService.findByExerciseId(programmingExercise.getId()).stream()\n+                .filter(staticCodeAnalysisCategory -> staticCodeAnalysisCategory.getState().equals(CategoryState.GRADED)).collect(Collectors.toList());\n+\n+        for (var category : gradedCategories) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0NzcyNg=="}, "originalCommit": {"oid": "56ac76dad9939c094ec6aba02f9253862fddfcb1"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTY1NjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoxODo0N1rOHcsT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMjowM1rOHcsvgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODE1Mw==", "bodyText": "Consider grouping this first (Collectors.groupingBy)\nstaticCodeAnalysisFeedback.stream().collect(Collectors.groupingBy(feedback -> feedback.getText().substring(Feedback.STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER.length())))", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499848153", "createdAt": "2020-10-05T20:18:47Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -333,6 +405,50 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n         }\n     }\n \n+    /**\n+     * Calculates the total penalty over all static code analysis issues\n+     * @param staticCodeAnalysisFeedback The list of static code analysis feedback\n+     * @param programmingExercise The current exercise\n+     * @return The sum of all penalties, capped at the maximum allowed penalty\n+     */\n+    private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+\n+        double codeAnalysisPenaltyPoints = 0;\n+\n+        var gradedCategories = staticCodeAnalysisService.findByExerciseId(programmingExercise.getId()).stream()\n+                .filter(staticCodeAnalysisCategory -> staticCodeAnalysisCategory.getState().equals(CategoryState.GRADED)).collect(Collectors.toList());\n+\n+        for (var category : gradedCategories) {\n+\n+            // get all feedback in this category\n+            List<Feedback> categoryFeedback = staticCodeAnalysisFeedback.stream()\n+                    .filter(feedback -> feedback.getText().substring(Feedback.STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER.length()).equals(category.getName()))\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ac76dad9939c094ec6aba02f9253862fddfcb1"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTIzMw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499855233", "createdAt": "2020-10-05T20:32:03Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -333,6 +405,50 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n         }\n     }\n \n+    /**\n+     * Calculates the total penalty over all static code analysis issues\n+     * @param staticCodeAnalysisFeedback The list of static code analysis feedback\n+     * @param programmingExercise The current exercise\n+     * @return The sum of all penalties, capped at the maximum allowed penalty\n+     */\n+    private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+\n+        double codeAnalysisPenaltyPoints = 0;\n+\n+        var gradedCategories = staticCodeAnalysisService.findByExerciseId(programmingExercise.getId()).stream()\n+                .filter(staticCodeAnalysisCategory -> staticCodeAnalysisCategory.getState().equals(CategoryState.GRADED)).collect(Collectors.toList());\n+\n+        for (var category : gradedCategories) {\n+\n+            // get all feedback in this category\n+            List<Feedback> categoryFeedback = staticCodeAnalysisFeedback.stream()\n+                    .filter(feedback -> feedback.getText().substring(Feedback.STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER.length()).equals(category.getName()))\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODE1Mw=="}, "originalCommit": {"oid": "56ac76dad9939c094ec6aba02f9253862fddfcb1"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTkwMDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozNzo1MlrOHcuqwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozNzo1MlrOHcuqwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4Njc4NA==", "bodyText": "I think a division by zero is possible here.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499886784", "createdAt": "2020-10-05T21:37:52Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -333,6 +405,52 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n         }\n     }\n \n+    /**\n+     * Calculates the total penalty over all static code analysis issues\n+     * @param staticCodeAnalysisFeedback The list of static code analysis feedback\n+     * @param programmingExercise The current exercise\n+     * @return The sum of all penalties, capped at the maximum allowed penalty\n+     */\n+    private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+\n+        double codeAnalysisPenaltyPoints = 0;\n+\n+        var feedbackByCategory = staticCodeAnalysisFeedback.stream()\n+                .collect(Collectors.groupingBy(feedback -> feedback.getText().substring(Feedback.STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER.length())));\n+\n+        for (var category : staticCodeAnalysisService.findByExerciseId(programmingExercise.getId())) {\n+\n+            if (!category.getState().equals(CategoryState.GRADED)) {\n+                continue;\n+            }\n+\n+            // get all feedback in this category\n+            List<Feedback> categoryFeedback = feedbackByCategory.getOrDefault(category.getName(), List.of());\n+\n+            // calculate the sum of all per-feedback penalties\n+            double categoryPenaltyPoints = categoryFeedback.size() * category.getPenalty();\n+\n+            // cap at the maximum allowed penalty for this category\n+            if (categoryPenaltyPoints > category.getMaxPenalty()) {\n+                categoryPenaltyPoints = category.getMaxPenalty();\n+            }\n+\n+            // update credits of feedbacks in category\n+            double perFeedbackPenalty = categoryPenaltyPoints / categoryFeedback.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5357568611504c5c02e41b06c516328b640a6f"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTkxODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo0NDoyNFrOHcu1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo0NDoyNFrOHcu1fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4OTUzMg==", "bodyText": "I think programmingExercise.getMaxStaticCodeAnalysisPenalty() could be null and this needs to be checked.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499889532", "createdAt": "2020-10-05T21:44:24Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -333,6 +405,52 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n         }\n     }\n \n+    /**\n+     * Calculates the total penalty over all static code analysis issues\n+     * @param staticCodeAnalysisFeedback The list of static code analysis feedback\n+     * @param programmingExercise The current exercise\n+     * @return The sum of all penalties, capped at the maximum allowed penalty\n+     */\n+    private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnalysisFeedback, ProgrammingExercise programmingExercise) {\n+\n+        double codeAnalysisPenaltyPoints = 0;\n+\n+        var feedbackByCategory = staticCodeAnalysisFeedback.stream()\n+                .collect(Collectors.groupingBy(feedback -> feedback.getText().substring(Feedback.STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER.length())));\n+\n+        for (var category : staticCodeAnalysisService.findByExerciseId(programmingExercise.getId())) {\n+\n+            if (!category.getState().equals(CategoryState.GRADED)) {\n+                continue;\n+            }\n+\n+            // get all feedback in this category\n+            List<Feedback> categoryFeedback = feedbackByCategory.getOrDefault(category.getName(), List.of());\n+\n+            // calculate the sum of all per-feedback penalties\n+            double categoryPenaltyPoints = categoryFeedback.size() * category.getPenalty();\n+\n+            // cap at the maximum allowed penalty for this category\n+            if (categoryPenaltyPoints > category.getMaxPenalty()) {\n+                categoryPenaltyPoints = category.getMaxPenalty();\n+            }\n+\n+            // update credits of feedbacks in category\n+            double perFeedbackPenalty = categoryPenaltyPoints / categoryFeedback.size();\n+            categoryFeedback.forEach(feedback -> feedback.setCredits(-perFeedbackPenalty));\n+\n+            codeAnalysisPenaltyPoints += categoryPenaltyPoints;\n+        }\n+\n+        // cap at the maximum allowed penalty for this exercise (maxStaticCodeAnalysisPenalty is in percent)\n+        final var maxExercisePenaltyPoints = (double) programmingExercise.getMaxStaticCodeAnalysisPenalty() / 100.0 * programmingExercise.getMaxScore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5357568611504c5c02e41b06c516328b640a6f"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDEzNjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StaticCodeAnalysisService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxOTozMFrOHcw32w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxOTozMFrOHcw32w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjkwNw==", "bodyText": "It might be possible to store the mappings in a more efficient way. For example a Map with keys Pair<Tool,Rule> and values the category names. This must only be created once at startup. This can also be done in a follow-up.", "url": "https://github.com/ls1intum/Artemis/pull/2107#discussion_r499922907", "createdAt": "2020-10-05T23:19:30Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StaticCodeAnalysisService.java", "diffHunk": "@@ -98,6 +103,33 @@ public void createDefaultCategories(ProgrammingExercise programmingExercise) {\n             originalCategory.setState(matchingCategory.getState());\n         }\n         staticCodeAnalysisCategoryRepository.saveAll(originalCategories);\n+\n+        // At least one category was updated. We use this flag to inform the instructor about outdated student results.\n+        programmingSubmissionService.setTestCasesChangedAndTriggerTestCaseUpdate(exerciseId);\n+\n         return originalCategories;\n     }\n+\n+    /**\n+     * Links the categories of an exercise with the default category mappings.\n+     * @param programmingExercise The programming exercise\n+     * @return A list of pairs of categories and their mappings.\n+     */\n+    public List<ImmutablePair<StaticCodeAnalysisCategory, List<StaticCodeAnalysisDefaultCategory.CategoryMapping>>> getCategoriesWithMappingForExercise(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5357568611504c5c02e41b06c516328b640a6f"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4697, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}