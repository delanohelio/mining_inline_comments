{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzU5NTI2", "number": 1679, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo0Nzo1NVrOEHXAzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo0Nzo1NVrOEHXAzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTUyNTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo0Nzo1NVrOGmryJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODozNDo0N1rOGm3AIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQyMw==", "bodyText": "I don't get the goal here. Why null as the user? Shouldn't fail this all the time?", "url": "https://github.com/ls1intum/Artemis/pull/1679#discussion_r443216423", "createdAt": "2020-06-21T12:47:55Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -155,20 +159,28 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n             return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n         }\n \n-        if (programmingExercise.getCourse() == null) {\n-            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        // Valid exercises have set either a course or an exerciseGroup\n+        exerciseService.checkCourseAndExerciseGroupExclusivity(programmingExercise, ENTITY_NAME);\n+\n+        // Retrieve the course over the exerciseGroup or the given courseId\n+        // Security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        Course course;\n+        if (programmingExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(programmingExercise.getExerciseGroup().getId());\n+            course = exerciseGroup.getExam().getCourse();\n+            programmingExercise.setExerciseGroup(exerciseGroup);\n+        }\n+        else {\n+            course = courseService.findOne(programmingExercise.getCourse().getId());\n+            programmingExercise.setCourse(course);\n         }\n \n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        // Check authorization\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d436eb5b8930caabdcee267563e2f40b8e6239c5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMzc4Nw==", "bodyText": "When the user is null, the check service defaults to checking the currently logged in user", "url": "https://github.com/ls1intum/Artemis/pull/1679#discussion_r443223787", "createdAt": "2020-06-21T14:16:09Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -155,20 +159,28 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n             return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n         }\n \n-        if (programmingExercise.getCourse() == null) {\n-            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        // Valid exercises have set either a course or an exerciseGroup\n+        exerciseService.checkCourseAndExerciseGroupExclusivity(programmingExercise, ENTITY_NAME);\n+\n+        // Retrieve the course over the exerciseGroup or the given courseId\n+        // Security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        Course course;\n+        if (programmingExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(programmingExercise.getExerciseGroup().getId());\n+            course = exerciseGroup.getExam().getCourse();\n+            programmingExercise.setExerciseGroup(exerciseGroup);\n+        }\n+        else {\n+            course = courseService.findOne(programmingExercise.getCourse().getId());\n+            programmingExercise.setCourse(course);\n         }\n \n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        // Check authorization\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQyMw=="}, "originalCommit": {"oid": "d436eb5b8930caabdcee267563e2f40b8e6239c5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDA0OQ==", "bodyText": "Do you think it would make sense to overload the method to have a method\nBoolean isAtLeastInstructorInCourse(Course course){}\nI think it's more intuitive than setting user null.\nHowever it's not a relevant thing for release but maybe you could consider this to change in the future or reason why not.", "url": "https://github.com/ls1intum/Artemis/pull/1679#discussion_r443244049", "createdAt": "2020-06-21T18:22:16Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -155,20 +159,28 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n             return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n         }\n \n-        if (programmingExercise.getCourse() == null) {\n-            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        // Valid exercises have set either a course or an exerciseGroup\n+        exerciseService.checkCourseAndExerciseGroupExclusivity(programmingExercise, ENTITY_NAME);\n+\n+        // Retrieve the course over the exerciseGroup or the given courseId\n+        // Security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        Course course;\n+        if (programmingExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(programmingExercise.getExerciseGroup().getId());\n+            course = exerciseGroup.getExam().getCourse();\n+            programmingExercise.setExerciseGroup(exerciseGroup);\n+        }\n+        else {\n+            course = courseService.findOne(programmingExercise.getCourse().getId());\n+            programmingExercise.setCourse(course);\n         }\n \n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        // Check authorization\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQyMw=="}, "originalCommit": {"oid": "d436eb5b8930caabdcee267563e2f40b8e6239c5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwMDIyNg==", "bodyText": "out of scope for this PR", "url": "https://github.com/ls1intum/Artemis/pull/1679#discussion_r443400226", "createdAt": "2020-06-22T08:34:47Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -155,20 +159,28 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n             return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"A new programmingExercise cannot already have an ID\", \"idexists\")).body(null);\n         }\n \n-        if (programmingExercise.getCourse() == null) {\n-            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The course is not set\", \"courseNotSet\")).body(null);\n+        // Valid exercises have set either a course or an exerciseGroup\n+        exerciseService.checkCourseAndExerciseGroupExclusivity(programmingExercise, ENTITY_NAME);\n+\n+        // Retrieve the course over the exerciseGroup or the given courseId\n+        // Security mechanism: make sure that we use the values from the database and not the once which might have been altered in the client\n+        Course course;\n+        if (programmingExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(programmingExercise.getExerciseGroup().getId());\n+            course = exerciseGroup.getExam().getCourse();\n+            programmingExercise.setExerciseGroup(exerciseGroup);\n+        }\n+        else {\n+            course = courseService.findOne(programmingExercise.getCourse().getId());\n+            programmingExercise.setCourse(course);\n         }\n \n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(programmingExercise.getCourse().getId());\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        // Check authorization\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQyMw=="}, "originalCommit": {"oid": "d436eb5b8930caabdcee267563e2f40b8e6239c5"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4897, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}