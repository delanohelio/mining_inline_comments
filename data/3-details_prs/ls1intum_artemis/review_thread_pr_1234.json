{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODc5NDk4", "number": 1234, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0NDo0MlrODe-QSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0NTozNVrODe-RRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAzODUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0NDo0MlrOFoaSFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo0OTozNFrOFqvajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzk3NQ==", "bodyText": "wrong style, please use doReturn...when\nMake sure to check other tests before implementing something wrong", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r377917975", "createdAt": "2020-02-11T21:44:42Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MTM1Nw==", "bodyText": "Well I used the current test implementation. But yes I switched to this syntax. I see it offers a bit better type check.", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r380361357", "createdAt": "2020-02-17T20:49:34Z", "author": {"login": "maxr96"}, "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzk3NQ=="}, "originalCommit": {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA0MDY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0NToyN1rOFoaTaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1MDoyMVrOFqvbSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODMxNQ==", "bodyText": "if you mock this multiple times, please move it into the method\n@beforeeach\npublic void init() {}", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r377918315", "createdAt": "2020-02-11T21:45:27Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultExists() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+        result = resultRepository.save(result);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MTU0Ng==", "bodyText": "True. I moved the part of creating result and mocking with dummy hash into the @BeforeEach method", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r380361546", "createdAt": "2020-02-17T20:50:21Z", "author": {"login": "maxr96"}, "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultExists() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+        result = resultRepository.save(result);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODMxNQ=="}, "originalCommit": {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA0MTAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0NTozNlrOFoaTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1MDozMFrOFqvbcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODM3Mw==", "bodyText": "wrong style", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r377918373", "createdAt": "2020-02-11T21:45:36Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultExists() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+        result = resultRepository.save(result);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultPropertyMissing() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = new Result();\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MTU4Nw==", "bodyText": "Changed it", "url": "https://github.com/ls1intum/Artemis/pull/1234#discussion_r380361587", "createdAt": "2020-02-17T20:50:30Z", "author": {"login": "maxr96"}, "path": "src/test/java/de/tum/in/www1/artemis/ResultServiceIntegrationTest.java", "diffHunk": "@@ -294,23 +289,66 @@ public void createManualProgrammingExerciseResult() throws Exception {\n         assertThat(response.getFeedbacks().size()).isEqualTo(result.getFeedbacks().size());\n     }\n \n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_manualResultsNotAllowed() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultExists() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = ModelFactory.generateResult(true, 200).resultString(\"Good effort!\");\n+        List<Feedback> feedbacks = ModelFactory.generateFeedback().stream().peek(feedback -> feedback.setText(\"Good work here\")).collect(Collectors.toList());\n+        result.setFeedbacks(feedbacks);\n+        result.setParticipation(participation);\n+        result = resultRepository.save(result);\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));\n+\n+        request.postWithResponseBody(\"/api/participations/\" + participation.getId() + \"/manual-results\", result, Result.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void createManualProgrammingExerciseResult_resultPropertyMissing() throws Exception {\n+        var participation = setParticipationForProgrammingExercise(AssessmentType.SEMI_AUTOMATIC);\n+        Result result = new Result();\n+\n+        String dummyHash = \"9b3a9bd71a0d80e5bbc42204c319ed3d1d4f0d6d\";\n+        when(gitService.getLastCommitHash(ArgumentMatchers.any())).thenReturn(ObjectId.fromString(dummyHash));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxODM3Mw=="}, "originalCommit": {"oid": "5bd37f73260057528f2dd92c712bb9f525491b63"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 218, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}