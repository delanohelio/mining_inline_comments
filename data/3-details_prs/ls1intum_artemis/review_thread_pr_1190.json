{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjM2NTE4", "number": 1190, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDozNTowMVrODYhfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTowNDoyOFrODZhjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDQxMDkwOnYy", "diffSide": "LEFT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDozNTowMVrOFeba3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDozNTowMVrOFeba3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ1MDg0NQ==", "bodyText": "This code is not necessary because findOneWithEagerSubmissionsAndResults throws an exception if there is no entity found.", "url": "https://github.com/ls1intum/Artemis/pull/1190#discussion_r367450845", "createdAt": "2020-01-16T14:35:01Z", "author": {"login": "lovaiible"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingSubmissionResource.java", "diffHunk": "@@ -329,18 +329,16 @@ else if (!authCheckService.isAtLeastInstructorForExercise(exercise)) {\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<ModelingSubmission> getSubmissionForModelingEditor(@PathVariable Long participationId) {\n         StudentParticipation participation = participationService.findOneWithEagerSubmissionsAndResults(participationId);\n-        if (participation == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557f0469523d05a4856b3371c06542575a66e0c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY4OTUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ModelingSubmissionIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODowNjoyNlrOFexWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1Mzo1NlrOFf6tqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMDA3Ng==", "bodyText": "I think you should invoke @GetMapping(value = \"/exercises/{exerciseId}/modeling-submission-without-assessment\") once before, so that there are optimal submissions calculated on the server.\nThen please also check that the list of optimal models is empty. You might need to add a public getter to obtain this information, it is stored in CompassService (can be injected) -> CompassCalculationEngine -> ModelSelector -> modelsWaitingForAssessment", "url": "https://github.com/ls1intum/Artemis/pull/1190#discussion_r367810076", "createdAt": "2020-01-17T08:06:26Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ModelingSubmissionIntegrationTest.java", "diffHunk": "@@ -387,19 +492,19 @@ public void getNextOptimalModelSubmission_lockLimitReached() throws Exception {\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\")\n-    public void getModelSubmissionForModelingEditor() throws Exception {\n-        ModelingSubmission submission = ModelFactory.generateModelingSubmission(validModel, true);\n-        submission = database.addModelingSubmissionWithFinishedResultAndAssessor(classExercise, submission, \"student1\", \"tutor1\");\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void deleteNextOptimalModelSubmission() throws Exception {\n+        request.delete(\"/api/exercises/\" + classExercise.getId() + \"/optimal-model-submissions\", HttpStatus.NO_CONTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557f0469523d05a4856b3371c06542575a66e0c4"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMjEzNg==", "bodyText": "@krusche Thank you for your feedback! I have adjusted the test and added the mentioned REST calls :)", "url": "https://github.com/ls1intum/Artemis/pull/1190#discussion_r369012136", "createdAt": "2020-01-21T13:53:56Z", "author": {"login": "lovaiible"}, "path": "src/test/java/de/tum/in/www1/artemis/ModelingSubmissionIntegrationTest.java", "diffHunk": "@@ -387,19 +492,19 @@ public void getNextOptimalModelSubmission_lockLimitReached() throws Exception {\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\")\n-    public void getModelSubmissionForModelingEditor() throws Exception {\n-        ModelingSubmission submission = ModelFactory.generateModelingSubmission(validModel, true);\n-        submission = database.addModelingSubmissionWithFinishedResultAndAssessor(classExercise, submission, \"student1\", \"tutor1\");\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void deleteNextOptimalModelSubmission() throws Exception {\n+        request.delete(\"/api/exercises/\" + classExercise.getId() + \"/optimal-model-submissions\", HttpStatus.NO_CONTENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMDA3Ng=="}, "originalCommit": {"oid": "557f0469523d05a4856b3371c06542575a66e0c4"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDkwNjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/compass/CompassService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTowNDoyOFrOFf9RPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTowNDoyOFrOFf9RPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NDAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<Long> getCalculationEngineModelsWaitingForAssessment(Long exerciseId) {\n          \n          \n            \n                public List<Long> getCalculationEngineModelsWaitingForAssessment(long exerciseId) {", "url": "https://github.com/ls1intum/Artemis/pull/1190#discussion_r369054012", "createdAt": "2020-01-21T15:04:28Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/service/compass/CompassService.java", "diffHunk": "@@ -585,4 +585,13 @@ public void printStatistic(Long exerciseId) {\n         compassCalculationEngines.get(exerciseId).printStatistic(exerciseId,\n                 resultRepository.findAllWithEagerFeedbackByAssessorIsNotNullAndParticipation_ExerciseIdAndCompletionDateIsNotNull(exerciseId));\n     }\n+\n+    /**\n+     * Method to access to the compass calculation engine getModelsWaitingForAssessment() method\n+     * @param exerciseId the id of the exercise the models should belong to\n+     * @return a list of modelIds that should be assessed next\n+     */\n+    public List<Long> getCalculationEngineModelsWaitingForAssessment(Long exerciseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffc0954309e24e48c3cedb0f0561a62e8248431d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 188, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}