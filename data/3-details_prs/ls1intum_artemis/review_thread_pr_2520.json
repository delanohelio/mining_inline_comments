{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjI2OTEw", "number": 2520, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTo0MDoyMVrOFCrwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1NTowM1rOFDKD8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzU4MzYyOnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTo0MDoyMVrOIB-QIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTo0MDoyMVrOIB-QIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzOTQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import { MockAlertService } from '../../helpers/mocks/service/mock-alert.service';", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r538939427", "createdAt": "2020-12-09T01:40:21Z", "author": {"login": "fde312"}, "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "diffHunk": "@@ -39,6 +39,7 @@ import { MockCookieService } from '../../helpers/mocks/service/mock-cookie.servi\n import { MockProgrammingExerciseService } from '../../helpers/mocks/service/mock-programming-exercise.service';\n import { MockRouter } from '../../helpers/mocks/mock-router';\n import { StaticCodeAnalysisCategory, StaticCodeAnalysisCategoryState } from 'app/entities/static-code-analysis-category.model';\n+import { MockAlertService } from '../../helpers/mocks/service/mock-alert.service';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0865e6f99dc264f7369c287184506697ace33c1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzA0MTk0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMzowNFrOICdaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzozOTozN1rOICuhew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0OTg2Ng==", "bodyText": "This can/should simplify to return sumOfWeightNewTestCases > 0;.", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539449866", "createdAt": "2020-12-09T16:23:04Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "diffHunk": "@@ -522,4 +534,22 @@ export class ProgrammingExerciseConfigureGradingComponent implements OnInit, OnD\n             )\n             .subscribe();\n     }\n+\n+    public isSumOfWeightsGreaterThanZero(testCaseUpdates: ProgrammingExerciseTestCaseUpdate[]): boolean {\n+        // Copy the existing test cases and update the test cases that were changed\n+        const copyTestCases = cloneDeep(this.testCases);\n+        testCaseUpdates.forEach((testCaseUpdate) => {\n+            const index = copyTestCases.findIndex((testCase) => testCase.id === testCaseUpdate.id);\n+            if (index !== -1) {\n+                copyTestCases[index] = testCaseUpdate;\n+            }\n+        });\n+        // Make sure that the at least one test weight is greater than 0, so that students can still reach a score of 100%\n+        const sumOfWeightNewTestCases = copyTestCases.reduce((sum, testCase) => sum + (testCase.weight ?? 0), 0);\n+        if (sumOfWeightNewTestCases <= 0) {\n+            return false;\n+        } else {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczMDI5OQ==", "bodyText": "Done in 16df0615c", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539730299", "createdAt": "2020-12-09T23:39:37Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "diffHunk": "@@ -522,4 +534,22 @@ export class ProgrammingExerciseConfigureGradingComponent implements OnInit, OnD\n             )\n             .subscribe();\n     }\n+\n+    public isSumOfWeightsGreaterThanZero(testCaseUpdates: ProgrammingExerciseTestCaseUpdate[]): boolean {\n+        // Copy the existing test cases and update the test cases that were changed\n+        const copyTestCases = cloneDeep(this.testCases);\n+        testCaseUpdates.forEach((testCaseUpdate) => {\n+            const index = copyTestCases.findIndex((testCase) => testCase.id === testCaseUpdate.id);\n+            if (index !== -1) {\n+                copyTestCases[index] = testCaseUpdate;\n+            }\n+        });\n+        // Make sure that the at least one test weight is greater than 0, so that students can still reach a score of 100%\n+        const sumOfWeightNewTestCases = copyTestCases.reduce((sum, testCase) => sum + (testCase.weight ?? 0), 0);\n+        if (sumOfWeightNewTestCases <= 0) {\n+            return false;\n+        } else {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0OTg2Ng=="}, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzA3ODE0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyOTo0NFrOICdwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0MDoyN1rOICuiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1NTQ5NQ==", "bodyText": "Not sure how much memory/perf this is taking, but I would guess that doing everything in one loop would save us a bit here (?):\nlet weight = 0;\nthis.testCases.foreach((testCase) => {\n    const index = testCaseUpdates.findIndex((update) => testCase.id === update.id);\n    if (index !== -1) {\n        weight += testCaseUpdates[index].weight ?? 0;\n    } else {\n        weight += testCase.weight ?? 0;\n    }\n});\nreturn weight > 0;\n\n(untested)", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539455495", "createdAt": "2020-12-09T16:29:44Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "diffHunk": "@@ -522,4 +534,22 @@ export class ProgrammingExerciseConfigureGradingComponent implements OnInit, OnD\n             )\n             .subscribe();\n     }\n+\n+    public isSumOfWeightsGreaterThanZero(testCaseUpdates: ProgrammingExerciseTestCaseUpdate[]): boolean {\n+        // Copy the existing test cases and update the test cases that were changed\n+        const copyTestCases = cloneDeep(this.testCases);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczMDYyNQ==", "bodyText": "Yep, you are right. Your way is cleaner, thanks! :)\nDone in 16df0615c", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539730625", "createdAt": "2020-12-09T23:40:27Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/exercises/programming/manage/grading/programming-exercise-configure-grading.component.ts", "diffHunk": "@@ -522,4 +534,22 @@ export class ProgrammingExerciseConfigureGradingComponent implements OnInit, OnD\n             )\n             .subscribe();\n     }\n+\n+    public isSumOfWeightsGreaterThanZero(testCaseUpdates: ProgrammingExerciseTestCaseUpdate[]): boolean {\n+        // Copy the existing test cases and update the test cases that were changed\n+        const copyTestCases = cloneDeep(this.testCases);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1NTQ5NQ=="}, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODQ4MDY1OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozODowOVrOICqqdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyNTozOFrOICuJPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NzA2Mg==", "bodyText": "I do not think you need fakeAsync here. I removed both this and the ticks and it still works", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539667062", "createdAt": "2020-12-09T21:38:09Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "diffHunk": "@@ -362,6 +362,54 @@ describe('ProgrammingExerciseConfigureGradingComponent', () => {\n         flush();\n     }));\n \n+    it('should show error alert when test case weights are less or equal zero', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDA5Mg==", "bodyText": "Done in 8177c86", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539724092", "createdAt": "2020-12-09T23:25:38Z", "author": {"login": "fde312"}, "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "diffHunk": "@@ -362,6 +362,54 @@ describe('ProgrammingExerciseConfigureGradingComponent', () => {\n         flush();\n     }));\n \n+    it('should show error alert when test case weights are less or equal zero', fakeAsync(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NzA2Mg=="}, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODUxMjA1OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo0NjowOFrOICq82g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyNTo0N1rOICuJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3MTc3MA==", "bodyText": "This and the ticks seems not needed. I removed them and it still works. The component is recreated in the beforeEach already", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539671770", "createdAt": "2020-12-09T21:46:08Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "diffHunk": "@@ -362,6 +362,54 @@ describe('ProgrammingExerciseConfigureGradingComponent', () => {\n         flush();\n     }));\n \n+    it('should show error alert when test case weights are less or equal zero', fakeAsync(() => {\n+        initGradingComponent({ showInactive: true });\n+\n+        fixture.detectChanges();\n+\n+        const orderedTests = _sortBy(testCases1, 'testName');\n+\n+        const table = debugElement.query(By.css(testCaseTableId));\n+\n+        // get all input fields\n+        const editingInputs = table.queryAll(By.css(tableEditingInput));\n+        expect(editingInputs).to.have.lengthOf(testCases1.length * 3);\n+        // Set only the weight input fields to 0 of all test cases\n+        for (let i = 0; i < editingInputs.length; i += 3) {\n+            const weightInput = editingInputs[i].nativeElement;\n+            expect(weightInput).to.exist;\n+            weightInput.focus();\n+\n+            // Set new weight.\n+            weightInput.value = '0';\n+            weightInput.dispatchEvent(new Event('blur'));\n+        }\n+\n+        fixture.detectChanges();\n+        expect(comp.changedTestCaseIds).to.deep.equal(orderedTests.map((test) => test.id));\n+\n+        // Mock which should be return from update service call\n+        const updateTestCases = orderedTests.map((test) => {\n+            return { ...test, weight: 0, bonusMultiplier: 2, bonusPoints: 1 };\n+        });\n+        // Save weight.\n+        updateTestCasesStub.returns(of(updateTestCases));\n+\n+        // Initialize spy for error alert\n+        const alertService = TestBed.inject(JhiAlertService);\n+        const alertServiceSpy = spy(alertService, 'error');\n+\n+        const saveButton = getSaveButton();\n+        expectElementToBeEnabled(saveButton);\n+        saveButton.click();\n+\n+        expect(alertServiceSpy).to.be.calledOnce;\n+\n+        tick();\n+        fixture.destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDE1Nw==", "bodyText": "Done in 8177c86", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539724157", "createdAt": "2020-12-09T23:25:47Z", "author": {"login": "fde312"}, "path": "src/test/javascript/spec/component/programming-exercise/programming-exercise-configure-grading.component.spec.ts", "diffHunk": "@@ -362,6 +362,54 @@ describe('ProgrammingExerciseConfigureGradingComponent', () => {\n         flush();\n     }));\n \n+    it('should show error alert when test case weights are less or equal zero', fakeAsync(() => {\n+        initGradingComponent({ showInactive: true });\n+\n+        fixture.detectChanges();\n+\n+        const orderedTests = _sortBy(testCases1, 'testName');\n+\n+        const table = debugElement.query(By.css(testCaseTableId));\n+\n+        // get all input fields\n+        const editingInputs = table.queryAll(By.css(tableEditingInput));\n+        expect(editingInputs).to.have.lengthOf(testCases1.length * 3);\n+        // Set only the weight input fields to 0 of all test cases\n+        for (let i = 0; i < editingInputs.length; i += 3) {\n+            const weightInput = editingInputs[i].nativeElement;\n+            expect(weightInput).to.exist;\n+            weightInput.focus();\n+\n+            // Set new weight.\n+            weightInput.value = '0';\n+            weightInput.dispatchEvent(new Event('blur'));\n+        }\n+\n+        fixture.detectChanges();\n+        expect(comp.changedTestCaseIds).to.deep.equal(orderedTests.map((test) => test.id));\n+\n+        // Mock which should be return from update service call\n+        const updateTestCases = orderedTests.map((test) => {\n+            return { ...test, weight: 0, bonusMultiplier: 2, bonusPoints: 1 };\n+        });\n+        // Save weight.\n+        updateTestCasesStub.returns(of(updateTestCases));\n+\n+        // Initialize spy for error alert\n+        const alertService = TestBed.inject(JhiAlertService);\n+        const alertServiceSpy = spy(alertService, 'error');\n+\n+        const saveButton = getSaveButton();\n+        expectElementToBeEnabled(saveButton);\n+        saveButton.click();\n+\n+        expect(alertServiceSpy).to.be.calledOnce;\n+\n+        tick();\n+        fixture.destroy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3MTc3MA=="}, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU0ODk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1NTowM1rOICrSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzozODoyNlrOICufhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NzIxNg==", "bodyText": "Will getWeight ever return null? I think this method will fail in this case. I am asking because I think in the client you are testinf if weight is undefined", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539677216", "createdAt": "2020-12-09T21:55:03Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -77,6 +78,13 @@ public ProgrammingExerciseTestCaseService(ProgrammingExerciseTestCaseRepository\n             matchingTestCase.setBonusPoints(programmingExerciseTestCaseDTO.getBonusPoints());\n             updatedTests.add(matchingTestCase);\n         }\n+\n+        // Make sure that at least one test has a weight so that students can still achieve 100% score\n+        var testWeightsSum = existingTestCases.stream().mapToDouble(ProgrammingExerciseTestCase::getWeight).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyOTc5Ng==", "bodyText": "Done in 2b46a47", "url": "https://github.com/ls1intum/Artemis/pull/2520#discussion_r539729796", "createdAt": "2020-12-09T23:38:26Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -77,6 +78,13 @@ public ProgrammingExerciseTestCaseService(ProgrammingExerciseTestCaseRepository\n             matchingTestCase.setBonusPoints(programmingExerciseTestCaseDTO.getBonusPoints());\n             updatedTests.add(matchingTestCase);\n         }\n+\n+        // Make sure that at least one test has a weight so that students can still achieve 100% score\n+        var testWeightsSum = existingTestCases.stream().mapToDouble(ProgrammingExerciseTestCase::getWeight).sum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NzIxNg=="}, "originalCommit": {"oid": "2161943d20a84122092680b4d6dbfdb930b6bc10"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4316, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}