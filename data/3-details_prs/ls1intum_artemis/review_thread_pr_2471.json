{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Njk1NTQ1", "number": 2471, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNzo0NjoyNVrOE-PG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMjowNlrOFACQkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk0NzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNzo0NjoyNVrOH7Wmyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNjozNVrOH7aKfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTk5ODQxMA==", "bodyText": "why is where s.submissionDate > '1970-01-01 00:00:01' in there?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r531998410", "createdAt": "2020-11-28T07:46:25Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")\n+    Integer getConductedExams(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct se.id) from StudentExam se, Exam e where se.submitted = true and se.exam = e and e.endDate >= :#{#span}\")\n+    Integer getExamParticipations(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select sum(e.registeredUsers.size) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")\n+    Integer getExamRegistrations(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct r.assessor.id) from Result r where (r.assessmentType = 'MANUAL' or r.assessmentType = 'SEMI-AUTOMATIC') and r.completionDate >= :#{#span}\")\n+    Integer getActiveTutors(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct r.id) from Result r where r.completionDate >= :#{#span}\")\n+    Integer getCreatedResults(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select sum(r.feedbacks.size) from Result r where r.completionDate >= :#{#span}\")\n+    Integer getResultFeedbacks(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select 'DATE(s.submissionDate)' as day, count(s.id) as amount from Submission s where s.submissionDate > '1970-01-01 00:00:01' group by 'DATE(s.submissionDate)' order by 'DATE(s.submissionDate)' asc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjcwMw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056703", "createdAt": "2020-11-28T16:16:35Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")\n+    Integer getConductedExams(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct se.id) from StudentExam se, Exam e where se.submitted = true and se.exam = e and e.endDate >= :#{#span}\")\n+    Integer getExamParticipations(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select sum(e.registeredUsers.size) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")\n+    Integer getExamRegistrations(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct r.assessor.id) from Result r where (r.assessmentType = 'MANUAL' or r.assessmentType = 'SEMI-AUTOMATIC') and r.completionDate >= :#{#span}\")\n+    Integer getActiveTutors(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct r.id) from Result r where r.completionDate >= :#{#span}\")\n+    Integer getCreatedResults(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select sum(r.feedbacks.size) from Result r where r.completionDate >= :#{#span}\")\n+    Integer getResultFeedbacks(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select 'DATE(s.submissionDate)' as day, count(s.id) as amount from Submission s where s.submissionDate > '1970-01-01 00:00:01' group by 'DATE(s.submissionDate)' order by 'DATE(s.submissionDate)' asc\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTk5ODQxMA=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk1ODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNzo0OTowNFrOH7WusA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNzo0OTowNFrOH7WusA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMDQzMg==", "bodyText": "is it correct that getTotalSumbmissionsDay has no ZonedDateTime parameter name?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532000432", "createdAt": "2020-11-28T07:49:04Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")\n+    Integer getConductedExams(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct se.id) from StudentExam se, Exam e where se.submitted = true and se.exam = e and e.endDate >= :#{#span}\")\n+    Integer getExamParticipations(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select sum(e.registeredUsers.size) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")\n+    Integer getExamRegistrations(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct r.assessor.id) from Result r where (r.assessmentType = 'MANUAL' or r.assessmentType = 'SEMI-AUTOMATIC') and r.completionDate >= :#{#span}\")\n+    Integer getActiveTutors(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct r.id) from Result r where r.completionDate >= :#{#span}\")\n+    Integer getCreatedResults(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select sum(r.feedbacks.size) from Result r where r.completionDate >= :#{#span}\")\n+    Integer getResultFeedbacks(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select 'DATE(s.submissionDate)' as day, count(s.id) as amount from Submission s where s.submissionDate > '1970-01-01 00:00:01' group by 'DATE(s.submissionDate)' order by 'DATE(s.submissionDate)' asc\")\n+    List<Map<String, Object>> getTotalSubmissionsDay();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk3MTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNzo1Nzo0MlrOH7W3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNzo1Nzo0MlrOH7W3Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMjYyNg==", "bodyText": "I think we should use a Map<ZonedDateTime, Integer> here.\nIt gives us the benefit that it will be compatible with the other cases of the switch statement and also improves readability when debugging.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532002626", "createdAt": "2020-11-28T07:57:42Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {\n+        switch (span) {\n+            case \"DAY\": // result = this.statisticsRepository.getTotalSubmissionsDay(ZonedDateTime.now().minusDays(7));\n+                return null;\n+            case \"WEEK\":\n+                Integer[] result = new Integer[7];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk3NTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODowMzoyMVrOH7W5Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNTowNlrOH7aJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzA3NA==", "bodyText": "what is the distinct doing? we only query from one table -> id should be distinct anyway", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532003074", "createdAt": "2020-11-28T08:03:21Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjUwNQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056505", "createdAt": "2020-11-28T16:15:06Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzA3NA=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk3NTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODowMzozNlrOH7W5GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNDo1NVrOH7aJoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzA5Ng==", "bodyText": "Same here", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532003096", "createdAt": "2020-11-28T08:03:36Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjQ4MA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056480", "createdAt": "2020-11-28T16:14:55Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzA5Ng=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk3NjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODowMzo1N1rOH7W5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNDo0N1rOH7aJmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzEyNg==", "bodyText": "Same here", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532003126", "createdAt": "2020-11-28T08:03:57Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjQ3Mg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056472", "createdAt": "2020-11-28T16:14:47Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exercise e where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"select count(distinct e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzEyNg=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk4NTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODoxNjowNVrOH7W9ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNDozOFrOH7aJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNDIwMg==", "bodyText": "Should we move this to a .model.ts?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532004202", "createdAt": "2020-11-28T08:16:05Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjQ2Mw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056463", "createdAt": "2020-11-28T16:14:38Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNDIwMg=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk4Nzc1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODoxOTozM1rOH7W-hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNDozMVrOH7aJew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNDQ4NQ==", "bodyText": "use moment().daysInMonth()", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532004485", "createdAt": "2020-11-28T08:19:33Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjQ0Mw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056443", "createdAt": "2020-11-28T16:14:31Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNDQ4NQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk5ODA1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODozMzoyMlrOH7XDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozMDoyNVrOH8qd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNTY0Nw==", "bodyText": "we shouldn't introduce the labels for weekdays, moment can give them to you momentObject.format('dddd')", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532005647", "createdAt": "2020-11-28T08:33:22Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {\n+        switch (span) {\n+            case 'Day':\n+                this.span = SpanType.DAY;\n+                break;\n+            case 'Week':\n+                this.span = SpanType.WEEK;\n+                break;\n+            case 'Month':\n+                this.span = SpanType.MONTH;\n+                break;\n+            case 'Year':\n+                this.span = SpanType.YEAR;\n+                break;\n+        }\n+    }\n+    private getWeekdays(day: number): string[] {\n+        const days = [\n+            this.translateService.instant('weekdays.monday'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjQyNQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056425", "createdAt": "2020-11-28T16:14:22Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {\n+        switch (span) {\n+            case 'Day':\n+                this.span = SpanType.DAY;\n+                break;\n+            case 'Week':\n+                this.span = SpanType.WEEK;\n+                break;\n+            case 'Month':\n+                this.span = SpanType.MONTH;\n+                break;\n+            case 'Year':\n+                this.span = SpanType.YEAR;\n+                break;\n+        }\n+    }\n+    private getWeekdays(day: number): string[] {\n+        const days = [\n+            this.translateService.instant('weekdays.monday'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNTY0Nw=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MDU2OA==", "bodyText": "@FuchsDominik did this not work, because the weekday translations are still there", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r533060568", "createdAt": "2020-12-01T04:09:18Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {\n+        switch (span) {\n+            case 'Day':\n+                this.span = SpanType.DAY;\n+                break;\n+            case 'Week':\n+                this.span = SpanType.WEEK;\n+                break;\n+            case 'Month':\n+                this.span = SpanType.MONTH;\n+                break;\n+            case 'Year':\n+                this.span = SpanType.YEAR;\n+                break;\n+        }\n+    }\n+    private getWeekdays(day: number): string[] {\n+        const days = [\n+            this.translateService.instant('weekdays.monday'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNTY0Nw=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3MjM3Nw==", "bodyText": "I implemented it as requested but withdrawed it again, as moment().format('dddd') does not translate the weekdays into german. I would handle it like this, unless you have another approach which would also translate the labels @fde312", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r533372377", "createdAt": "2020-12-01T12:30:25Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {\n+        switch (span) {\n+            case 'Day':\n+                this.span = SpanType.DAY;\n+                break;\n+            case 'Week':\n+                this.span = SpanType.WEEK;\n+                break;\n+            case 'Month':\n+                this.span = SpanType.MONTH;\n+                break;\n+            case 'Year':\n+                this.span = SpanType.YEAR;\n+                break;\n+        }\n+    }\n+    private getWeekdays(day: number): string[] {\n+        const days = [\n+            this.translateService.instant('weekdays.monday'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNTY0Nw=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzAwMTA0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/statistics.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODozNzowNFrOH7XEYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNDowMVrOH7aJQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNTk4NQ==", "bodyText": "get rid of this", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532005985", "createdAt": "2020-11-28T08:37:04Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/i18n/en/statistics.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+    \"statistics\": {\n+        \"amountOfStudents\": \"# of students\",\n+        \"span\": {\n+            \"day\": \"Day\",\n+            \"week\": \"Week\",\n+            \"month\": \"Month\",\n+            \"year\": \"Year\"\n+        },\n+        \"title\": \"User statistics\",\n+        \"days\": \" days\",\n+        \"loggedInUsers\": \"Amount of logins of distinct users in the last \",\n+        \"activeUsers\": \"Amount of logins of active users in the last \",\n+        \"totalSubmissions\": \"Total amount of submissions in the last \",\n+        \"exercises\": {\n+            \"released\": \"Total amount of released exercises in the last \",\n+            \"due\": \"Total amount of exercise deadlines in the last \"\n+        },\n+        \"conductedExams\": \"Total amount of conducted exams in the last \",\n+        \"examParticipation\": \" -> amount of student who participated: \",\n+        \"examRegistrations\": \" -> with the amount of students being registered in these exam: \",\n+        \"activeTutors\": \"Total amount of tutors which have created an assessment in the last \",\n+        \"results\": \"Total amount of results created in the last \",\n+        \"resultFeedbacks\": \"-> feedback count: \",\n+        \"userLogins\": \"User Logins\",\n+        \"submissions\": \"Submissions\"\n+    },\n+    \"weekdays\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjM4Ng==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056386", "createdAt": "2020-11-28T16:14:01Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/i18n/en/statistics.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+    \"statistics\": {\n+        \"amountOfStudents\": \"# of students\",\n+        \"span\": {\n+            \"day\": \"Day\",\n+            \"week\": \"Week\",\n+            \"month\": \"Month\",\n+            \"year\": \"Year\"\n+        },\n+        \"title\": \"User statistics\",\n+        \"days\": \" days\",\n+        \"loggedInUsers\": \"Amount of logins of distinct users in the last \",\n+        \"activeUsers\": \"Amount of logins of active users in the last \",\n+        \"totalSubmissions\": \"Total amount of submissions in the last \",\n+        \"exercises\": {\n+            \"released\": \"Total amount of released exercises in the last \",\n+            \"due\": \"Total amount of exercise deadlines in the last \"\n+        },\n+        \"conductedExams\": \"Total amount of conducted exams in the last \",\n+        \"examParticipation\": \" -> amount of student who participated: \",\n+        \"examRegistrations\": \" -> with the amount of students being registered in these exam: \",\n+        \"activeTutors\": \"Total amount of tutors which have created an assessment in the last \",\n+        \"results\": \"Total amount of results created in the last \",\n+        \"resultFeedbacks\": \"-> feedback count: \",\n+        \"userLogins\": \"User Logins\",\n+        \"submissions\": \"Submissions\"\n+    },\n+    \"weekdays\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNTk4NQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzAwMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/statistics.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODozNzoxOFrOH7XEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxMzo1NVrOH7aJPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNjAwMw==", "bodyText": "get rid of this", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532006003", "createdAt": "2020-11-28T08:37:18Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/i18n/de/statistics.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+    \"statistics\": {\n+        \"amountOfStudents\": \"# an Studenten\",\n+        \"span\": {\n+            \"day\": \"Tag\",\n+            \"week\": \"Woche\",\n+            \"month\": \"Monat\",\n+            \"year\": \"Jahr\"\n+        },\n+        \"title\": \"Benutzer Statistiken\",\n+        \"days\": \" Tagen\",\n+        \"loggedInUsers\": \"Anzahl an Anmeldungen unterschiedlicher Benutzer in den letzten \",\n+        \"activeUsers\": \"Anzahl an Anmeldungen aktiver Benutzer in den letzten \",\n+        \"totalSubmissions\": \"Anzahl an Abgaben in den letzten \",\n+        \"exercises\": {\n+            \"released\": \"Anzahl an ver\u00f6ffentlichten Aufgaben in den letzten \",\n+            \"due\": \"Anzahl an Aufgaben mit einer Deadline in den letzten \"\n+        },\n+        \"conductedExams\": \"Anzahl an abgehaltenen Klausuen in den letzten \",\n+        \"examParticipation\": \" -> und Anzahl Studenten, die daran teilgenommen haben: \",\n+        \"examRegistrations\": \" -> Die Anzahl an Studenten mit einer Registrierung f\u00fcr die Klausur: \",\n+        \"activeTutors\": \"Anzahl der Tutoren, die eine Bewertung erstellt haben in den letzten \",\n+        \"results\": \"Anzahl erstellter Resultate in den letzten \",\n+        \"resultFeedbacks\": \"-> mit der absoluten Feedbackanzahl: \",\n+        \"userLogins\": \"Benutzer Anmeldungen\",\n+        \"submissions\": \"Abgaben\"\n+    },\n+    \"weekdays\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjM4Mg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056382", "createdAt": "2020-11-28T16:13:55Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/i18n/de/statistics.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+    \"statistics\": {\n+        \"amountOfStudents\": \"# an Studenten\",\n+        \"span\": {\n+            \"day\": \"Tag\",\n+            \"week\": \"Woche\",\n+            \"month\": \"Monat\",\n+            \"year\": \"Jahr\"\n+        },\n+        \"title\": \"Benutzer Statistiken\",\n+        \"days\": \" Tagen\",\n+        \"loggedInUsers\": \"Anzahl an Anmeldungen unterschiedlicher Benutzer in den letzten \",\n+        \"activeUsers\": \"Anzahl an Anmeldungen aktiver Benutzer in den letzten \",\n+        \"totalSubmissions\": \"Anzahl an Abgaben in den letzten \",\n+        \"exercises\": {\n+            \"released\": \"Anzahl an ver\u00f6ffentlichten Aufgaben in den letzten \",\n+            \"due\": \"Anzahl an Aufgaben mit einer Deadline in den letzten \"\n+        },\n+        \"conductedExams\": \"Anzahl an abgehaltenen Klausuen in den letzten \",\n+        \"examParticipation\": \" -> und Anzahl Studenten, die daran teilgenommen haben: \",\n+        \"examRegistrations\": \" -> Die Anzahl an Studenten mit einer Registrierung f\u00fcr die Klausur: \",\n+        \"activeTutors\": \"Anzahl der Tutoren, die eine Bewertung erstellt haben in den letzten \",\n+        \"results\": \"Anzahl erstellter Resultate in den letzten \",\n+        \"resultFeedbacks\": \"-> mit der absoluten Feedbackanzahl: \",\n+        \"userLogins\": \"Benutzer Anmeldungen\",\n+        \"submissions\": \"Abgaben\"\n+    },\n+    \"weekdays\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwNjAwMw=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzIyNjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMjozNjoxN1rOH7Y3Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0NDozMlrOH860rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTQzMQ==", "bodyText": "Why are you using a Promise here? Can't we work with Observables here as well?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532035431", "createdAt": "2020-11-28T12:36:17Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0NzM0OA==", "bodyText": "The graph was initialized before the Submissions got fetched, so I used asynchronous method calls to wait for the result", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532047348", "createdAt": "2020-11-28T14:41:21Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTQzMQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MjkzMQ==", "bodyText": "But why not do it using observables? @FuchsDominik . It is highly unusual in angular to work with promises as everything is based on observables", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532642931", "createdAt": "2020-11-30T14:37:24Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTQzMQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0Nzc3NQ==", "bodyText": "Well i still work with observables. All i can say is that using an explicit Promise did the trick as through asynchronous method calls the graph is not instantiated before the result comes back.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532747775", "createdAt": "2020-11-30T16:55:10Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTQzMQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MDg2OA==", "bodyText": "@FuchsDominik Lets have a look together. Maybe some RxJs magic can help :)", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r533060868", "createdAt": "2020-12-01T04:10:27Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTQzMQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MDM2NA==", "bodyText": "Resolved in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r533640364", "createdAt": "2020-12-01T18:44:32Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                const days = this.daysInMonth();\n+                this.histogramData = Array(days).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    private daysInMonth(): number {\n+        return new Date(new Date().getFullYear(), new Date().getMonth(), 0).getDate();\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTQzMQ=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzIyODEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMjozODozMlrOH7Y4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxMzo0MVrOH7aJJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTYyMw==", "bodyText": "You do not need parentheses here", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532035623", "createdAt": "2020-11-28T12:38:32Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {\n+        switch (span) {\n+            case \"DAY\": // result = this.statisticsRepository.getTotalSubmissionsDay(ZonedDateTime.now().minusDays(7));\n+                return null;\n+            case \"WEEK\":\n+                Integer[] result = new Integer[7];\n+                Arrays.fill(result, 0);\n+                ZonedDateTime border = ZonedDateTime.now().minusDays(6).withHour(0).withMinute(0).withSecond(0);\n+                List<Map<String, Object>> outcome = this.statisticsRepository.getTotalSubmissionsWeek(border);\n+                for (Map<String, Object> map : outcome) {\n+                    ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n+                    Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n+                    for (int i = 0; i < 7; i++) {\n+                        if (date.getDayOfMonth() == ZonedDateTime.now().minusDays(i).getDayOfMonth()) {\n+                            result[6 - i] += amount;\n+                        }\n+                    }\n+                }\n+                return result;\n+            case \"MONTH\":\n+                return null;\n+            case \"YEAR\":\n+                return null;\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public Integer getReleasedExercises(Long span) {\n+        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getExerciseDeadlines(Long span) {\n+        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getConductedExams(Long span) {\n+        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getExamParticipations(Long span) {\n+        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    public Integer getExamRegistrations(Long span) {\n+        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getActiveTutors(Long span) {\n+        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    public Integer getCreatedResults(Long span) {\n+        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    public Integer getResultFeedbacks(Long span) {\n+        Integer result = this.statisticsRepository.getResultFeedbacks(ZonedDateTime.now().minusDays(span));\n+        return (result != null ? result : 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjM1OQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056359", "createdAt": "2020-11-28T16:13:41Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {\n+        switch (span) {\n+            case \"DAY\": // result = this.statisticsRepository.getTotalSubmissionsDay(ZonedDateTime.now().minusDays(7));\n+                return null;\n+            case \"WEEK\":\n+                Integer[] result = new Integer[7];\n+                Arrays.fill(result, 0);\n+                ZonedDateTime border = ZonedDateTime.now().minusDays(6).withHour(0).withMinute(0).withSecond(0);\n+                List<Map<String, Object>> outcome = this.statisticsRepository.getTotalSubmissionsWeek(border);\n+                for (Map<String, Object> map : outcome) {\n+                    ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n+                    Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n+                    for (int i = 0; i < 7; i++) {\n+                        if (date.getDayOfMonth() == ZonedDateTime.now().minusDays(i).getDayOfMonth()) {\n+                            result[6 - i] += amount;\n+                        }\n+                    }\n+                }\n+                return result;\n+            case \"MONTH\":\n+                return null;\n+            case \"YEAR\":\n+                return null;\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public Integer getReleasedExercises(Long span) {\n+        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getExerciseDeadlines(Long span) {\n+        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getConductedExams(Long span) {\n+        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getExamParticipations(Long span) {\n+        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    public Integer getExamRegistrations(Long span) {\n+        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n+    }\n+\n+    public Integer getActiveTutors(Long span) {\n+        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    public Integer getCreatedResults(Long span) {\n+        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    public Integer getResultFeedbacks(Long span) {\n+        Integer result = this.statisticsRepository.getResultFeedbacks(ZonedDateTime.now().minusDays(span));\n+        return (result != null ? result : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTYyMw=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzIyODkzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMjozOTozNFrOH7Y4gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxMzoxN1rOH7aJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTcxMw==", "bodyText": "Just name it StatisticsComponent", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532035713", "createdAt": "2020-11-28T12:39:34Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjM0MA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532056340", "createdAt": "2020-11-28T16:13:17Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,178 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+\n+export enum SpanType {\n+    DAY = 'DAY',\n+    WEEK = 'WEEK',\n+    MONTH = 'MONTH',\n+    YEAR = 'YEAR',\n+}\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class JhiStatisticsComponent implements OnInit, OnChanges {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzNTcxMw=="}, "originalCommit": {"oid": "ac7257d174ed321c706cf7f8a28037403a3871ae"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDc1NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo1NjozOFrOH710Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTozOToxNVrOH73SFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwOTc1NA==", "bodyText": "You could probably change this to 'api/management/statistics/' and adjust the other urls.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532509754", "createdAt": "2020-11-30T10:56:38Z", "author": {"login": "sjagla27"}, "path": "src/main/webapp/app/admin/statistics/statistics.service.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient, HttpParams } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class StatisticsService {\n+    private resourceUrl = SERVER_API_URL + 'api/';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c261e7ea86df36f0fc1d13f0ac96f1864a3046a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUzMzc4Mg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532533782", "createdAt": "2020-11-30T11:39:15Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.service.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient, HttpParams } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class StatisticsService {\n+    private resourceUrl = SERVER_API_URL + 'api/';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwOTc1NA=="}, "originalCommit": {"oid": "0c261e7ea86df36f0fc1d13f0ac96f1864a3046a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTUxMjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoxMjo0NFrOH783aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1MDozMVrOH8GrXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNTI1Ng==", "bodyText": "Could you please reformat the querys using Java 13 Textblocks? See: https://thorben-janssen.com/java-text-blocks-hibernate-jpa/\nIt makes them much nicer to read imo :)\nConcerns all querys", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532625256", "createdAt": "2020-11-30T14:12:44Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NjAxNA==", "bodyText": "Thanks for the hint, done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532786014", "createdAt": "2020-11-30T17:50:31Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNTI1Ng=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTUyOTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoxNjoyNFrOH79Bsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1MTowNlrOH8Gs1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNzg5MA==", "bodyText": "The parameters are named a little bit confusing. Maybe something like startInclusive and endInclusive? Concerns all querys", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532627890", "createdAt": "2020-11-30T14:16:24Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NjM5MA==", "bodyText": "Thanks for the hint, adjusted the relevant query", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532786390", "createdAt": "2020-11-30T17:51:06Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"select count(distinct u.login) from User u, Submission s, StudentParticipation p where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(sub.id) from Submission sub where sub.submissionDate >= :#{#span}\")\n+    Integer getTotalSubmissions(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"select count(e.id) from Exercise e where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNzg5MA=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTU2Njk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoyNDoyNVrOH79YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzozMjozM1rOH-Cc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzMzYzMQ==", "bodyText": "As far as I can see all the querys here query for something in certain range (from dateA to dateB), but sometimes you use only one parameter, and sometimes you use two parameters. Could you maybe rewrite the querys to always use two parameters? IMO it makes them easier to understand because I can clearly see: \"this gets the logged in users from data A to data B\" and the querys become more useful as i can input any timeframe i want", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532633631", "createdAt": "2020-11-30T14:24:25Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNDAxMQ==", "bodyText": "Also maybe rename the methods to something more clearer like countNumberOfLoggedInUsers, so it is more clear from the method name what the quer does", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532634011", "createdAt": "2020-11-30T14:24:58Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzMzYzMQ=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMDczMQ==", "bodyText": "Yes, sorry, like mentioned in the PR description, this is deprecated code which will be refactored after this PR and is just here for semantic purposes.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532710731", "createdAt": "2020-11-30T16:06:00Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzMzYzMQ=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxMzkyNA==", "bodyText": "I was also very confused until I read @stefanwaldhauser's comment. If the code is going to be refactored and deprecated it might be a good idea to add a comment above the method and mention that. Just to not confuse others.\nIt's just a suggestion, otherwise just resolve this conversation again :)", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534813924", "createdAt": "2020-12-03T07:32:33Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzMzYzMQ=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTU4MzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoyODowMVrOH79iCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1MTo0OVrOH8Gutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNjE3MA==", "bodyText": "Why are you not using the Enum here?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532636170", "createdAt": "2020-11-30T14:28:01Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4Njg3MA==", "bodyText": "Good catch, done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532786870", "createdAt": "2020-11-30T17:51:49Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNjE3MA=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTU4NTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoyODozMlrOH79jbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjowNDoxNlrOH8CADg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNjUyNw==", "bodyText": "The parameter name span confuses me here. It is not the span you defined in the enum? It looks to be just a number of days", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532636527", "createdAt": "2020-11-30T14:28:32Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTM5MA==", "bodyText": "Yes, sorry, like mentioned in the PR description, this is deprecated code which will be refactored after this PR and is just here for semantic purposes.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532709390", "createdAt": "2020-11-30T16:04:16Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNjUyNw=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTU5MzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDozMDoyMFrOH79oeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxMzo1NVrOH8CdNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNzgxNw==", "bodyText": "This does not what I would expect. If I click on the week tab i would expect it to show me the values for THIS week and not just go back 7 days, same for month and so on. I mean if it currently wednesday I expect it to show me the values for monday, tuesday and wednesday. Does anybody else have an opinion here? Or you have to rename the client to something like Last 7 Days Last 30 Days", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532637817", "createdAt": "2020-11-30T14:30:20Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {\n+        switch (span) {\n+            case \"DAY\": // result = this.statisticsRepository.getTotalSubmissionsDay(ZonedDateTime.now().minusDays(7));\n+                return null;\n+            case \"WEEK\":\n+                Integer[] result = new Integer[7];\n+                Arrays.fill(result, 0);\n+                ZonedDateTime border = ZonedDateTime.now().minusDays(6).withHour(0).withMinute(0).withSecond(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNjg1NQ==", "bodyText": "Yes this is a debatable issue. However, I orientate myself roughly on the Apple Health App, which also displays the last 7/30 etc. days. Plus it displays more information, especially if its Monday and there is no data yet, this seems a bit weird IMO", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532716855", "createdAt": "2020-11-30T16:13:55Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(String span) {\n+        switch (span) {\n+            case \"DAY\": // result = this.statisticsRepository.getTotalSubmissionsDay(ZonedDateTime.now().minusDays(7));\n+                return null;\n+            case \"WEEK\":\n+                Integer[] result = new Integer[7];\n+                Arrays.fill(result, 0);\n+                ZonedDateTime border = ZonedDateTime.now().minusDays(6).withHour(0).withMinute(0).withSecond(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNzgxNw=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTYxNzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDozNTozNlrOH793KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxMjoyNlrOH8FGmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MTU3Nw==", "bodyText": "why are you not using the enum here?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532641577", "createdAt": "2020-11-30T14:35:36Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                this.histogramData = Array(moment().daysInMonth()).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MDIxOA==", "bodyText": "As we dont use Enums in the .html file, the method gets a String passed", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532760218", "createdAt": "2020-11-30T17:12:26Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                this.histogramData = Array(moment().daysInMonth()).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MTU3Nw=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTYyMDgyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDozNjoxNVrOH795KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1MzoxN1rOH8Gydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MjA4OA==", "bodyText": "You should support both english and german", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532642088", "createdAt": "2020-11-30T14:36:15Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                this.histogramData = Array(moment().daysInMonth()).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {\n+        switch (span) {\n+            case 'Day':\n+                this.span = SpanType.DAY;\n+                break;\n+            case 'Week':\n+                this.span = SpanType.WEEK;\n+                break;\n+            case 'Month':\n+                this.span = SpanType.MONTH;\n+                break;\n+            case 'Year':\n+                this.span = SpanType.YEAR;\n+                break;\n+        }\n+    }\n+\n+    private getWeekdays(): string[] {\n+        const days: string[] = [];\n+\n+        for (let i = 0; i < 7; i++) {\n+            days.push(\n+                moment()\n+                    .subtract(6 - i, 'd')\n+                    .format('dddd'),\n+            );\n+        }\n+        return days;\n+    }\n+\n+    private createLabels(): string[] {\n+        let labels: string[] = [];\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                for (let i = 0; i < this.histogramData.length; i++) {\n+                    labels[i] = `${i}:00,${i + 1}:00`;\n+                }\n+                break;\n+            case SpanType.WEEK:\n+                labels = this.getWeekdays();\n+                break;\n+            case SpanType.MONTH:\n+                for (let i = 0; i < this.histogramData.length; i++) {\n+                    labels[i] = i + 1 + '';\n+                }\n+                break;\n+            case SpanType.YEAR:\n+                labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NzgzMQ==", "bodyText": "Now does :)", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532787831", "createdAt": "2020-11-30T17:53:17Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, OnChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { SPAN_PATTERN } from 'app/app.constants';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit, OnChanges {\n+    spanPattern = SPAN_PATTERN;\n+    span: SpanType = SpanType.WEEK;\n+\n+    // Histogram related properties\n+    public histogramData: number[] = [];\n+    public barChartOptions: ChartOptions = {};\n+    public barChartLabels: Label[] = [];\n+    public barChartType: ChartType = 'bar';\n+    public barChartLegend = true;\n+    public UserLoginChartData: ChartDataSets[] = [];\n+    public SubmissionsChartData: ChartDataSets[] = [];\n+\n+    @ViewChild(BaseChartDirective) chart: BaseChartDirective;\n+\n+    constructor(private service: StatisticsService, private translateService: TranslateService) {}\n+\n+    async ngOnInit() {\n+        await this.setBinWidth();\n+        await this.createChart();\n+    }\n+\n+    async ngOnChanges() {}\n+\n+    private async setBinWidth(): Promise<void> {\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                this.histogramData = Array(24).fill(0);\n+                break;\n+            case SpanType.WEEK:\n+                this.histogramData = Array(7).fill(0);\n+                break;\n+            case SpanType.MONTH:\n+                this.histogramData = Array(moment().daysInMonth()).fill(0);\n+                break;\n+            case SpanType.YEAR:\n+                this.histogramData = Array(12).fill(0);\n+                break;\n+        }\n+    }\n+\n+    async getSubmissions(): Promise<number[]> {\n+        return new Promise<number[]>((resolve, reject) => {\n+            this.service.getTotalSubmissions(this.span).subscribe((res: number[]) => {\n+                if (res !== null) {\n+                    resolve(res);\n+                } else {\n+                    reject('Submissions could not get fetched');\n+                }\n+            });\n+        });\n+    }\n+\n+    onTabChanged(span: string): void {\n+        switch (span) {\n+            case 'Day':\n+                this.span = SpanType.DAY;\n+                break;\n+            case 'Week':\n+                this.span = SpanType.WEEK;\n+                break;\n+            case 'Month':\n+                this.span = SpanType.MONTH;\n+                break;\n+            case 'Year':\n+                this.span = SpanType.YEAR;\n+                break;\n+        }\n+    }\n+\n+    private getWeekdays(): string[] {\n+        const days: string[] = [];\n+\n+        for (let i = 0; i < 7; i++) {\n+            days.push(\n+                moment()\n+                    .subtract(6 - i, 'd')\n+                    .format('dddd'),\n+            );\n+        }\n+        return days;\n+    }\n+\n+    private createLabels(): string[] {\n+        let labels: string[] = [];\n+        switch (this.span) {\n+            case SpanType.DAY:\n+                for (let i = 0; i < this.histogramData.length; i++) {\n+                    labels[i] = `${i}:00,${i + 1}:00`;\n+                }\n+                break;\n+            case SpanType.WEEK:\n+                labels = this.getWeekdays();\n+                break;\n+            case SpanType.MONTH:\n+                for (let i = 0; i < this.histogramData.length; i++) {\n+                    labels[i] = i + 1 + '';\n+                }\n+                break;\n+            case SpanType.YEAR:\n+                labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MjA4OA=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTYzMTUxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDozODo0MFrOH79_4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNDo0N1rOH8Cf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MzgwOA==", "bodyText": "getNumberOfReleasedExercises and so on :)", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532643808", "createdAt": "2020-11-30T14:38:40Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/admin/statistics/statistics.service.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient, HttpParams } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class StatisticsService {\n+    private resourceUrl = SERVER_API_URL + 'api/management/statistics/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of logged in users in the last *span* days\n+     */\n+    getloggedUsers(span: number): Observable<number> {\n+        const params = new HttpParams().set('span', '' + span);\n+        return this.http.get<number>(`${this.resourceUrl}users`, { params });\n+    }\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of users with an submission in the last *span* days\n+     */\n+    getActiveUsers(span: number): Observable<number> {\n+        const params = new HttpParams().set('span', '' + span);\n+        return this.http.get<number>(`${this.resourceUrl}activeUsers`, { params });\n+    }\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of submissions made in the last *span* days\n+     */\n+    getTotalSubmissions(span: SpanType): Observable<number[]> {\n+        const params = new HttpParams().set('span', '' + span);\n+        return this.http.get<number[]>(`${this.resourceUrl}submissions`, { params });\n+    }\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of released exercises in the last *span* days\n+     */\n+    getReleasedExercises(span: number): Observable<number> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNzU1Mw==", "bodyText": "Yes, sorry, this is also deprecated code which will be refactored after this PR and ist just here for semantic purposes.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532717553", "createdAt": "2020-11-30T16:14:47Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.service.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient, HttpParams } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Injectable({ providedIn: 'root' })\n+export class StatisticsService {\n+    private resourceUrl = SERVER_API_URL + 'api/management/statistics/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of logged in users in the last *span* days\n+     */\n+    getloggedUsers(span: number): Observable<number> {\n+        const params = new HttpParams().set('span', '' + span);\n+        return this.http.get<number>(`${this.resourceUrl}users`, { params });\n+    }\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of users with an submission in the last *span* days\n+     */\n+    getActiveUsers(span: number): Observable<number> {\n+        const params = new HttpParams().set('span', '' + span);\n+        return this.http.get<number>(`${this.resourceUrl}activeUsers`, { params });\n+    }\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of submissions made in the last *span* days\n+     */\n+    getTotalSubmissions(span: SpanType): Observable<number[]> {\n+        const params = new HttpParams().set('span', '' + span);\n+        return this.http.get<number[]>(`${this.resourceUrl}submissions`, { params });\n+    }\n+\n+    /**\n+     * Sends a GET request to retrieve the amount of released exercises in the last *span* days\n+     */\n+    getReleasedExercises(span: number): Observable<number> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MzgwOA=="}, "originalCommit": {"oid": "93880c069ec7d455857ded7e074f90b4f68e2720"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjY3MTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoyMzowNVrOH8H6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoyNzo0N1rOH8IF_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwNjIwMg==", "bodyText": "This doesn't use the text-block style yet.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532806202", "createdAt": "2020-11-30T18:23:05Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea28fa7ce583b5250cde3499d6659b38eb254195"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwOTIxMg==", "bodyText": "Thanks, done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532809212", "createdAt": "2020-11-30T18:27:47Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"select count(distinct u.login) from User u, PersistentAuditEvent p where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwNjIwMg=="}, "originalCommit": {"oid": "ea28fa7ce583b5250cde3499d6659b38eb254195"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjg0MzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNzowNVrOH8JgIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToxNTozMlrOH8Jzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMjI4OA==", "bodyText": "This one is not formatted like the rest is.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532832288", "createdAt": "2020-11-30T19:07:05Z", "author": {"login": "sjagla27"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\n+            \"\"\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\n+            \"\"\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "366a0ca658674e94cb50c2a87b3660bdc387288e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNzIyNw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r532837227", "createdAt": "2020-11-30T19:15:32Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\n+            \"\"\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\n+            \"\"\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id) from Exam e where e.endDate >= :#{#span} and e.endDate <= :#{#now}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMjI4OA=="}, "originalCommit": {"oid": "366a0ca658674e94cb50c2a87b3660bdc387288e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTU2MzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzozNToyOVrOH-CvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxOTozMFrOH-qsXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxODY1MQ==", "bodyText": "Might be better to rename this to something like getActiveUserCount?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534818651", "createdAt": "2020-12-03T07:35:29Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgyMzgzNg==", "bodyText": "Or maybe \"active\" is the wrong word here since the query returns users that have submitted something from a given date.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534823836", "createdAt": "2020-12-03T07:38:48Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxODY1MQ=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MzI0Ng==", "bodyText": "This deprecated code, i really should have marked it somehow, sorry. I will refactor most of the server side code.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535473246", "createdAt": "2020-12-03T18:19:30Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxODY1MQ=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTYxMjc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0MTowNFrOH-DR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyMDo1NFrOH-qxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgyNzQ5NQ==", "bodyText": "Why does the method name contain \"yesterday\" when there are date range parameters?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534827495", "createdAt": "2020-12-03T07:41:04Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\n+            \"\"\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\n+            \"\"\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exam e\n+            where e.endDate >= :#{#span} and e.endDate <= :#{#now}\n+            \"\"\")\n+    Integer getConductedExams(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(se.id)\n+            from StudentExam se, Exam e\n+            where se.submitted = true and se.exam = e and e.endDate >= :#{#span}\n+            \"\"\")\n+    Integer getExamParticipations(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select sum(e.registeredUsers.size)\n+            from Exam e\n+            where e.endDate >= :#{#span} and e.endDate <= :#{#now}\n+            \"\"\")\n+    Integer getExamRegistrations(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(distinct r.assessor.id)\n+            from Result r\n+            where (r.assessmentType = 'MANUAL' or r.assessmentType = 'SEMI-AUTOMATIC') and r.completionDate >= :#{#span}\n+            \"\"\")\n+    Integer getActiveTutors(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select count(r.id)\n+            from Result r\n+            where r.completionDate >= :#{#span}\n+            \"\"\")\n+    Integer getCreatedResults(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select sum(r.feedbacks.size)\n+            from Result r\n+            where r.completionDate >= :#{#span}\n+            \"\"\")\n+    Integer getResultFeedbacks(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select s.submissionDate as day, count(s.id) as amount\n+            from Submission s\n+            where s.submissionDate > :#{#startDate}\n+            group by s.submissionDate\n+            order by s.submissionDate asc\n+            \"\"\")\n+    List<Map<String, Object>> getTotalSubmissions(ZonedDateTime startDate);\n+\n+    @Query(\"\"\"\n+            select s.submissionDate as day, count(s.id) as amount\n+            from Submission s\n+            where s.submissionDate > :#{#startDate} and s.submissionDate < :#{#endDate}\n+            group by s.submissionDate\n+            order by s.submissionDate asc\n+            \"\"\")\n+    List<Map<String, Object>> getTotalSubmissionsYesterday(ZonedDateTime startDate, ZonedDateTime endDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NDQ5Nw==", "bodyText": "Also deprecated, this was used to extract the submission from yesterday, not needed atm. Will be refactored", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535474497", "createdAt": "2020-12-03T18:20:54Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StatisticsRepository.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.User;\n+\n+/**\n+ * Spring Data JPA repository for the user statistics\n+ */\n+@Repository\n+public interface StatisticsRepository extends JpaRepository<User, Long> {\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, PersistentAuditEvent p\n+            where u.login like p.principal and p.auditEventType = 'AUTHENTICATION_SUCCESS' and u.login not like '%test%' and p.auditEventDate >= :#{#span}\n+            \"\"\")\n+    Integer getLoggedInUsers(@Param(\"span\") Instant span);\n+\n+    @Query(\"\"\"\n+            select count(distinct u.login)\n+            from User u, Submission s, StudentParticipation p\n+            where s.participation.id = p.id and p.student.id = u.id and s.submissionDate >= :#{#span} and u.login not like '%test%'\n+            \"\"\")\n+    Integer getActiveUsers(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.releaseDate >= :#{#span} and e.releaseDate <= :#{#now}\n+            \"\"\")\n+    Integer getReleasedExercises(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exercise e\n+            where e.dueDate >= :#{#span} and e.dueDate <= :#{#now}\n+            \"\"\")\n+    Integer getExerciseDeadlines(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(e.id)\n+            from Exam e\n+            where e.endDate >= :#{#span} and e.endDate <= :#{#now}\n+            \"\"\")\n+    Integer getConductedExams(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(se.id)\n+            from StudentExam se, Exam e\n+            where se.submitted = true and se.exam = e and e.endDate >= :#{#span}\n+            \"\"\")\n+    Integer getExamParticipations(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select sum(e.registeredUsers.size)\n+            from Exam e\n+            where e.endDate >= :#{#span} and e.endDate <= :#{#now}\n+            \"\"\")\n+    Integer getExamRegistrations(@Param(\"span\") ZonedDateTime span, @Param(\"now\") ZonedDateTime now);\n+\n+    @Query(\"\"\"\n+            select count(distinct r.assessor.id)\n+            from Result r\n+            where (r.assessmentType = 'MANUAL' or r.assessmentType = 'SEMI-AUTOMATIC') and r.completionDate >= :#{#span}\n+            \"\"\")\n+    Integer getActiveTutors(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select count(r.id)\n+            from Result r\n+            where r.completionDate >= :#{#span}\n+            \"\"\")\n+    Integer getCreatedResults(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select sum(r.feedbacks.size)\n+            from Result r\n+            where r.completionDate >= :#{#span}\n+            \"\"\")\n+    Integer getResultFeedbacks(@Param(\"span\") ZonedDateTime span);\n+\n+    @Query(\"\"\"\n+            select s.submissionDate as day, count(s.id) as amount\n+            from Submission s\n+            where s.submissionDate > :#{#startDate}\n+            group by s.submissionDate\n+            order by s.submissionDate asc\n+            \"\"\")\n+    List<Map<String, Object>> getTotalSubmissions(ZonedDateTime startDate);\n+\n+    @Query(\"\"\"\n+            select s.submissionDate as day, count(s.id) as amount\n+            from Submission s\n+            where s.submissionDate > :#{#startDate} and s.submissionDate < :#{#endDate}\n+            group by s.submissionDate\n+            order by s.submissionDate asc\n+            \"\"\")\n+    List<Map<String, Object>> getTotalSubmissionsYesterday(ZonedDateTime startDate, ZonedDateTime endDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgyNzQ5NQ=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY1NDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0NjowMVrOH-DvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTozMjozMVrOH-t2mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNDk2MA==", "bodyText": "Holy that's a really big and complex method. Is there a way to break this down into smaller functions and/or define queries that will do the heavy work for you?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534834960", "createdAt": "2020-12-03T07:46:01Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.YearMonth;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.SpanType;\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(SpanType span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNzIzOA==", "bodyText": "It's really hard to understand what's happening here. If it's impossible to break this down then I'd suggest writing comments so that developers can understand this quicker.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534837238", "createdAt": "2020-12-03T07:47:13Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.YearMonth;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.SpanType;\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(SpanType span) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNDk2MA=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNTAxOQ==", "bodyText": "Yes you are right. It is a pretty complex method due to the fact that every SpanType needs to get handled seperately. I tried to split it up in smaller methods now and commented it in a pretty detailed way. Hope this is better. Done in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535525019", "createdAt": "2020-12-03T19:32:31Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.YearMonth;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.SpanType;\n+import de.tum.in.www1.artemis.repository.StatisticsRepository;\n+\n+@Service\n+public class StatisticsService {\n+\n+    private final StatisticsRepository statisticsRepository;\n+\n+    public StatisticsService(StatisticsRepository statisticsRepository) {\n+        this.statisticsRepository = statisticsRepository;\n+    }\n+\n+    public Integer getLoggedInUsers(Long span) {\n+        return this.statisticsRepository.getLoggedInUsers(ZonedDateTime.now().minusDays(span).toInstant());\n+    }\n+\n+    public Integer getActiveUsers(Long span) {\n+        return this.statisticsRepository.getActiveUsers(ZonedDateTime.now().minusDays(span));\n+    }\n+\n+    /**\n+     * Forwards the request to the repository, which returns a List<Map<String, Object>>, with String being the column name, \"day\" and \"amount\" and Object being the value,\n+     * either the date or the amount of submissions. It then collects the amounts in an array, depending on the span value, and returns it\n+     *\n+     * @param span DAY,WEEK,MONTH or YEAR depending on the active tab in the view\n+     * @return a array, containing the values for each bar in the graph\n+     */\n+    public Integer[] getTotalSubmissions(SpanType span) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNDk2MA=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY5NTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1MDowMlrOH-EMIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozNzoxNlrOH-rcpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MjQwMg==", "bodyText": "Not really sure here but does Artemis use came case for urls? Wouldn't active-users be a bit better (same goes for the routes defined below)?", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534842402", "createdAt": "2020-12-03T07:50:02Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.SpanType;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.*;\n+\n+/**\n+ * REST controller for managing user statistics.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@PreAuthorize(\"hasRole('ADMIN')\")\n+public class StatisticsResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(StatisticsResource.class);\n+\n+    private final StatisticsService service;\n+\n+    public StatisticsResource(StatisticsService service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * GET management/statistics/users : get the amount of logged in user in the last \"span\" days.\n+     *\n+     * @param span the period of which the amount should be calculated\n+     * @return the ResponseEntity with status 200 (OK) and the amount of users in body, or status 404 (Not Found)\n+     */\n+    @GetMapping(\"management/statistics/users\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Integer> getloggedUsers(@RequestParam long span) {\n+        log.debug(\"REST request to get user login count in the last {} days\", span);\n+        return ResponseEntity.ok(this.service.getLoggedInUsers(span));\n+    }\n+\n+    /**\n+     * GET management/statistics/activeUsers : get the amount of active users which made a submission in the last \"span\" days.\n+     *\n+     * @param span the period of which the amount should be calculated\n+     * @return the ResponseEntity with status 200 (OK) and the amount of submissions in body, or status 404 (Not Found)\n+     */\n+    @GetMapping(\"management/statistics/activeUsers\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NTYwNw==", "bodyText": "Thats actually true, yes. If its ok, i would change this when i refactor this method. (Which will be soon) Thanks for the tip! The only route actively used right now is \"management/statistics/submission\" which should be fine", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535485607", "createdAt": "2020-12-03T18:37:16Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.SpanType;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.*;\n+\n+/**\n+ * REST controller for managing user statistics.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@PreAuthorize(\"hasRole('ADMIN')\")\n+public class StatisticsResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(StatisticsResource.class);\n+\n+    private final StatisticsService service;\n+\n+    public StatisticsResource(StatisticsService service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * GET management/statistics/users : get the amount of logged in user in the last \"span\" days.\n+     *\n+     * @param span the period of which the amount should be calculated\n+     * @return the ResponseEntity with status 200 (OK) and the amount of users in body, or status 404 (Not Found)\n+     */\n+    @GetMapping(\"management/statistics/users\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Integer> getloggedUsers(@RequestParam long span) {\n+        log.debug(\"REST request to get user login count in the last {} days\", span);\n+        return ResponseEntity.ok(this.service.getLoggedInUsers(span));\n+    }\n+\n+    /**\n+     * GET management/statistics/activeUsers : get the amount of active users which made a submission in the last \"span\" days.\n+     *\n+     * @param span the period of which the amount should be calculated\n+     * @return the ResponseEntity with status 200 (OK) and the amount of submissions in body, or status 404 (Not Found)\n+     */\n+    @GetMapping(\"management/statistics/activeUsers\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MjQwMg=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTcyNzU2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1MzoxM1rOH-Eh7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToyOTo0MFrOH-truw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0Nzk4Mg==", "bodyText": "There is a trick in Angular on how to use enums in HTML templates. You can write something like:\nSpanType = SpanType;\n\nIt creates a private variable that holds your enum so that in the template you can do stuff like SpanType.DAY", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534847982", "createdAt": "2020-12-03T07:53:13Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit {\n+    DAY = SpanType.DAY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyMjIzNQ==", "bodyText": "Thanks for the tip! I refactored the code as you suggested in this commit.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535522235", "createdAt": "2020-12-03T19:29:40Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit {\n+    DAY = SpanType.DAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0Nzk4Mg=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTc1NzE4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1NjoyMVrOH-E3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToyOTowN1rOH-tpvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MzQzMw==", "bodyText": "Is this the currently active span? If so it's better to rename this.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534853433", "createdAt": "2020-12-03T07:56:21Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit {\n+    DAY = SpanType.DAY;\n+    WEEK = SpanType.WEEK;\n+    MONTH = SpanType.MONTH;\n+    YEAR = SpanType.YEAR;\n+    span: SpanType = SpanType.WEEK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyMTcyNQ==", "bodyText": "Thanks, adjusted it in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535521725", "createdAt": "2020-12-03T19:29:07Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics.component.ts", "diffHunk": "@@ -0,0 +1,165 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics',\n+    templateUrl: './statistics.component.html',\n+})\n+export class StatisticsComponent implements OnInit {\n+    DAY = SpanType.DAY;\n+    WEEK = SpanType.WEEK;\n+    MONTH = SpanType.MONTH;\n+    YEAR = SpanType.YEAR;\n+    span: SpanType = SpanType.WEEK;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MzQzMw=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTgxMzI4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/statistics.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMjowNlrOH-FdqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo0Njo0OFrOH-rz4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MzI3Mw==", "bodyText": "Just fyi but you can also define enums like:\nenum SpanType {\n   Day,\n   Week, \n   Month, \n   Year\n}\n\nYou don't need to always write the string representation.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r534863273", "createdAt": "2020-12-03T08:02:06Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/entities/statistics.model.ts", "diffHunk": "@@ -0,0 +1,6 @@\n+export enum SpanType {\n+    DAY = 'DAY',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5MTU1Mw==", "bodyText": "Good to know, however i would like to keep it that way in order to keep it consistent, as we use this declaration all the time.", "url": "https://github.com/ls1intum/Artemis/pull/2471#discussion_r535491553", "createdAt": "2020-12-03T18:46:48Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/entities/statistics.model.ts", "diffHunk": "@@ -0,0 +1,6 @@\n+export enum SpanType {\n+    DAY = 'DAY',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MzI3Mw=="}, "originalCommit": {"oid": "d94ad86f5471576bf5fd0bdc7ed3479cd84a49fb"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}