{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MjAyMTg4", "number": 1652, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTozMToyOVrOEFWX0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyMjo0NVrOEFqmeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ0ODgwOnYy", "diffSide": "LEFT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/JiraAuthenticationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTozMToyOVrOGjfgSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowNjoyMlrOGj7FZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2OTUxMw==", "bodyText": "Why removing the TODO?\nThe length of the method won't go away.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439869513", "createdAt": "2020-06-14T21:31:29Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/JiraAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,6 @@ public User getOrCreateUser(Authentication authentication, String firstName, Str\n         return getOrCreateUser(authentication, skipPasswordCheck);\n     }\n \n-    // TODO this method is way too long, split it up", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTM4Mg==", "bodyText": "I think the length is ok and we have more important TODOs ;-)\nI now refactored it because some parts were a bit confusing", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440321382", "createdAt": "2020-06-15T17:06:22Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/JiraAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,6 @@ public User getOrCreateUser(Authentication authentication, String firstName, Str\n         return getOrCreateUser(authentication, skipPasswordCheck);\n     }\n \n-    // TODO this method is way too long, split it up", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2OTUxMw=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ0OTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTozMzowNFrOGjfg0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowNToyNFrOGj7DSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2OTY1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TUM_LDAP_MATRIKEL_NUMBER = \"imMatrikelNr\";\n          \n          \n            \n                public static final String TUM_LDAP_REGISTRATION_NUMBER = \"imMatrikelNr\";\n          \n      \n    \n    \n  \n\nSince you use the term \"registration number\" for all your attributes I think it would make sense to use it here too.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439869650", "createdAt": "2020-06-14T21:33:04Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/config/Constants.java", "diffHunk": "@@ -71,6 +71,8 @@\n \n     public static final Pattern TITLE_NAME_PATTERN = Pattern.compile(\"^[a-zA-Z0-9_\\\\-\\\\s]*\");\n \n+    public static final String TUM_LDAP_MATRIKEL_NUMBER = \"imMatrikelNr\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDg0Mg==", "bodyText": "It's just a constant and in the context of the LDAP it's called Matrikel number. It think this is fine.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440320842", "createdAt": "2020-06-15T17:05:24Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/config/Constants.java", "diffHunk": "@@ -71,6 +71,8 @@\n \n     public static final Pattern TITLE_NAME_PATTERN = Pattern.compile(\"^[a-zA-Z0-9_\\\\-\\\\s]*\");\n \n+    public static final String TUM_LDAP_MATRIKEL_NUMBER = \"imMatrikelNr\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2OTY1MA=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ1MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTozNTo1NFrOGjfhug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxNTozMlrOGj7YjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2OTg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return forbidden();\n          \n          \n            \n                        return conflict();\n          \n      \n    \n    \n  \n\nWe introduced a new HTTP status earlier this weekend I think it would fit here.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439869882", "createdAt": "2020-06-14T21:35:54Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNjI4NQ==", "bodyText": "Thanks for noticing it, I am not really sure if conflict is correct here, but to be consistent I changed it accordingly", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440326285", "createdAt": "2020-06-15T17:15:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2OTg4Mg=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ1MzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTozODowOFrOGjfibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyODozNlrOGj_wOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MDA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return forbidden();\n          \n          \n            \n                        return conflict();\n          \n      \n    \n    \n  \n\nWe introduced a new HTTP status earlier this weekend I think it would fit here.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439870060", "createdAt": "2020-06-14T21:38:08Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                continue;\n+            }\n+            // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+            log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            notFoundStudents.add(student);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudents);\n+    }\n+\n+    /**\n+     * DELETE /courses/:courseId/exams/:examId/students/:studentLogin : Remove one single given user (based on the login) from the students of the exam so that the student cannot access the exam any more\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should lose student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @DeleteMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> removeStudentFromExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to remove {} as student from exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5Nzg4MA==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440397880", "createdAt": "2020-06-15T19:28:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                continue;\n+            }\n+            // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+            log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            notFoundStudents.add(student);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudents);\n+    }\n+\n+    /**\n+     * DELETE /courses/:courseId/exams/:examId/students/:studentLogin : Remove one single given user (based on the login) from the students of the exam so that the student cannot access the exam any more\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should lose student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @DeleteMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> removeStudentFromExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to remove {} as student from exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MDA2MA=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ1Mzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTozOTo1MlrOGjfi2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowOTozMlrOGj7MDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MDE2OA==", "bodyText": "If I see this correctly if the user is not part of the exam but has access to the course there will still be a HTTP 200, right? I think that should either be a HTTP 404 or HTTP 409 as well in that case.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439870168", "createdAt": "2020-06-14T21:39:52Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                continue;\n+            }\n+            // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+            log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            notFoundStudents.add(student);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudents);\n+    }\n+\n+    /**\n+     * DELETE /courses/:courseId/exams/:examId/students/:studentLogin : Remove one single given user (based on the login) from the students of the exam so that the student cannot access the exam any more\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should lose student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @DeleteMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> removeStudentFromExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to remove {} as student from exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.removeUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMzA4NQ==", "bodyText": "Why should this be a problem? I guess this is fine, because then the request worked. This call should be used when the instructor clicks on Remove in the mockups for one user. This does not automatically remove the user from the course.\nIt could be the case that students are registered for a course, but not for an exam.\nWhat we actually need on the other hand is that students who are added to the exam, also have access to the course. I will add this above.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440323085", "createdAt": "2020-06-15T17:09:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                continue;\n+            }\n+            // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+            log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            notFoundStudents.add(student);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudents);\n+    }\n+\n+    /**\n+     * DELETE /courses/:courseId/exams/:examId/students/:studentLogin : Remove one single given user (based on the login) from the students of the exam so that the student cannot access the exam any more\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should lose student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @DeleteMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> removeStudentFromExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to remove {} as student from exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.removeUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MDE2OA=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ1NDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMTo0MDo0NFrOGjfjOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxNTozOFrOGj7Yug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MDI2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return forbidden();\n          \n          \n            \n                        return conflict();\n          \n      \n    \n    \n  \n\nWe introduced a new HTTP status earlier this weekend I think it would fit here.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439870264", "createdAt": "2020-06-14T21:40:44Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNjMzMA==", "bodyText": "Thanks for noticing it, I am not really sure if conflict is correct here, but to be consistent I changed it accordingly", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440326330", "createdAt": "2020-06-15T17:15:38Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MDI2NA=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDQ2NTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMjowMTowOFrOGjfo7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxNjo0MVrOGj7bIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MTcyNg==", "bodyText": "Could this be an improvement? I think you can cut the for loop there and improve the performance through intelligend Database queries instead of tackeling this one by one.\nDon't know for sure though. Would be interesting what you think.\nKeep in mind this was only written in Github not with a proper IDE and I invented some \"multiple count\"-variations of already existing methods were I thought it would help the performance. This is not a safe and finished code.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<StudentDTO> notFoundStudents = new ArrayList<>();\n          \n          \n            \n                    for (var student : students) {\n          \n          \n            \n                        var registrationNumber = student.getRegistrationNumber();\n          \n          \n            \n                        // 1) we use the registration number and try to find the student in the Artemis user database\n          \n          \n            \n                        Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n          \n          \n            \n                        if (user.isPresent()) {\n          \n          \n            \n                            exam.addUser(user.get());\n          \n          \n            \n                            // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n          \n          \n            \n                            if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n          \n          \n            \n                                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n          \n          \n            \n                            }\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n          \n          \n            \n                        user = userService.createUserFromLdap(registrationNumber);\n          \n          \n            \n                        if (user.isPresent()) {\n          \n          \n            \n                            exam.addUser(user.get());\n          \n          \n            \n                            // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n          \n          \n            \n                            userService.addUserToGroup(user.get(), course.getStudentGroupName());\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n          \n          \n            \n                        log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n          \n          \n            \n                        notFoundStudents.add(student);\n          \n          \n            \n                    }\n          \n          \n            \n                    examRepository.save(exam);\n          \n          \n            \n                    return ResponseEntity.ok().body(notFoundStudents);\n          \n          \n            \n                }\n          \n          \n            \n                    List<String> registrationNumbers = students.stream().map(StudentDTO::getRegistrationNumber()).collect(Collections.toList());\n          \n          \n            \n                    List<User> artemisUsers = userService.findAllUsersWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumbers);\n          \n          \n            \n                    exam.addAllUsers(artemisUsers);\n          \n          \n            \n                    \n          \n          \n            \n                    //Get only registration numbers in here that are not present in artemis\n          \n          \n            \n                    registrationNumbers.removeAll(artemisUsers.stream().map(User::getRegistrationNumber()).collect(Collections.toList());\n          \n          \n            \n                    List<User> artemisUsersFromLdap = registrationNumbers.stream().map(e->userService.createUserFromLdap(e)).collect(Collections.toList());\n          \n          \n            \n                    exam.addAllUsers(artemisUsersFromLdap);\n          \n          \n            \n                    userService.addUsersToGroup(artemisUsersFromLdap, course.getStudentGroupName());\n          \n          \n            \n                    \n          \n          \n            \n                    //Get only registration numbers in here that were not found at all\n          \n          \n            \n                    registrationNumbers.removeAll(artemisUsersFromLdap.stream().map(User::getRegistrationNumber()).collect(Collections.toList());\n          \n          \n            \n                    \n          \n          \n            \n                    //ToDo: print proper warning\n          \n          \n            \n                        // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n          \n          \n            \n                        log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n          \n          \n            \n                    examRepository.save(exam);\n          \n          \n            \n                    \n          \n          \n            \n                    return ResponseEntity.ok().body(students.stream.filter(e->registrationNumbers.contains(e.getRegistrationNumber())).collect(Collections.toList()));\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439871726", "createdAt": "2020-06-14T22:01:08Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                continue;\n+            }\n+            // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+            log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            notFoundStudents.add(student);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudents);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNjk0NA==", "bodyText": "Thanks for the detailed comment. This functionality won't be used often, so I keep the slower (but in my opinion easier to understand) version for now. I also added some additional source code and reworking it would be too much effort for now.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440326944", "createdAt": "2020-06-15T17:16:41Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // the newly created user needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                continue;\n+            }\n+            // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+            log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            notFoundStudents.add(student);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudents);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MTcyNg=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTE2Mzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/UserService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMjowOVrOGjmA_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzozODoyMlrOGjmfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjE4OA==", "bodyText": "Maybe it would be a good idea to create the users with a randomised password and send it to them via email. As the users will access their exams from Artemis, there might be data privacy concerns if their accounts are left with an empty password. To my knowledge, it is not possible to change the password later in Artemis?\nThis extension could be part of a follow-up PR.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439976188", "createdAt": "2020-06-15T07:22:09Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/UserService.java", "diffHunk": "@@ -325,6 +311,35 @@ private boolean removeNonActivatedUser(User existingUser) {\n         return true;\n     }\n \n+    /**\n+     * searches the (optional) LDAP service for a user with the give registration number (= Matrikelnummer) and returns a new Artemis user\n+     * Note: this method should only be used if the user does not yet exist in the database\n+     *\n+     * @param registrationNumber the matriculation number of the student\n+     * @return a new user or null if the LDAP user was not found\n+     */\n+    public Optional<User> createUserFromLdap(String registrationNumber) {\n+        if (ldapUserService.isPresent()) {\n+            Optional<LdapUserDto> ldapUserOptional = ldapUserService.get().findByRegistrationNumber(registrationNumber);\n+            if (ldapUserOptional.isPresent()) {\n+                LdapUserDto ldapUser = ldapUserOptional.get();\n+                log.info(\"Ldap User \" + ldapUser.getUsername() + \" has registration number: \" + ldapUser.getRegistrationNumber());\n+                // Use empty password, so that we don't store the credentials of Jira users in the Artemis DB\n+                User user = createUser(ldapUser.getUsername(), \"\", ldapUser.getFirstName(), ldapUser.getLastName(), ldapUser.getEmail(), null, \"en\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NDAzMA==", "bodyText": "This is intentional. Students use their TUM LDAP password, which is NOT stored in the Artemis database (therefore we have an empty password here). In the TUM setup it works as follows: during login, Artemis asks JIRA, which in turn asks the TUM LDAP. If the password is correct, the user is logged in, otherwise an error message is shown. So basically, for TUM users, the password column in the database is ignore. We can, however, not set it null, because then Spring would complain", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r439984030", "createdAt": "2020-06-15T07:38:22Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/UserService.java", "diffHunk": "@@ -325,6 +311,35 @@ private boolean removeNonActivatedUser(User existingUser) {\n         return true;\n     }\n \n+    /**\n+     * searches the (optional) LDAP service for a user with the give registration number (= Matrikelnummer) and returns a new Artemis user\n+     * Note: this method should only be used if the user does not yet exist in the database\n+     *\n+     * @param registrationNumber the matriculation number of the student\n+     * @return a new user or null if the LDAP user was not found\n+     */\n+    public Optional<User> createUserFromLdap(String registrationNumber) {\n+        if (ldapUserService.isPresent()) {\n+            Optional<LdapUserDto> ldapUserOptional = ldapUserService.get().findByRegistrationNumber(registrationNumber);\n+            if (ldapUserOptional.isPresent()) {\n+                LdapUserDto ldapUser = ldapUserOptional.get();\n+                log.info(\"Ldap User \" + ldapUser.getUsername() + \" has registration number: \" + ldapUser.getRegistrationNumber());\n+                // Use empty password, so that we don't store the credentials of Jira users in the Artemis DB\n+                User user = createUser(ldapUser.getUsername(), \"\", ldapUser.getFirstName(), ldapUser.getLastName(), ldapUser.getEmail(), null, \"en\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjE4OA=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU2NDE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNjowNlrOGjp4UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyODoyN1rOGj_v1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzOTUwNQ==", "bodyText": "TODO: make sure the user is actually created in the external authentication provider (e.g. JIRA), otherwise the call below userService.addUserToGroup(..) will throw an exception", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440039505", "createdAt": "2020-06-15T09:16:06Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5Nzc4MA==", "bodyText": "fixed", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440397780", "createdAt": "2020-06-15T19:28:27Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,119 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param students     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentToCourse(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> students) {\n+        log.debug(\"REST request to add {} as students to exam : {}\", students, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return forbidden();\n+        }\n+        List<StudentDTO> notFoundStudents = new ArrayList<>();\n+        for (var student : students) {\n+            var registrationNumber = student.getRegistrationNumber();\n+            // 1) we use the registration number and try to find the student in the Artemis user database\n+            Optional<User> user = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+            if (user.isPresent()) {\n+                exam.addUser(user.get());\n+                // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                if (!user.get().getGroups().contains(course.getStudentGroupName())) {\n+                    userService.addUserToGroup(user.get(), course.getStudentGroupName());\n+                }\n+                continue;\n+            }\n+            // 2) if we cannot find the user, we use the registration number and try to find the student in the (TUM) LDAP\n+            user = userService.createUserFromLdap(registrationNumber);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzOTUwNQ=="}, "originalCommit": {"oid": "2d9b3cfa79cde5fe638f18a8b40e4ea042ed466b"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjY2ODk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyOTozMFrOGj0vGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxNjo1M1rOGj7bjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNzM2OQ==", "bodyText": "This should be Typo instead of Type, also in the 2 other occurrences. Also, we could probably replace \"3456789\" with registrationNumber3.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440217369", "createdAt": "2020-06-15T14:29:30Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -70,22 +75,108 @@\n     private Exam exam1;\n \n     @BeforeEach\n-    public void initTestCase() {\n+    public void initTestCase() throws URISyntaxException {\n         users = database.addUsers(4, 5, 1);\n         course1 = database.addEmptyCourse();\n         course2 = database.addEmptyCourse();\n         exam1 = database.addExam(course1);\n+        jiraRequestMockProvider.enableMockingOfRequests();\n+        jiraRequestMockProvider.mockAddUserToGroup(Set.of(course1.getStudentGroupName()));\n     }\n \n     @AfterEach\n     public void resetDatabase() {\n         database.resetDatabase();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void registerUsersInExam() throws Exception {\n+\n+        var exam = createExam();\n+        var savedExam = examRepository.save(exam);\n+        var student1 = database.getUserByLogin(\"student1\");\n+        var student2 = database.getUserByLogin(\"student2\");\n+        var student3 = database.getUserByLogin(\"student3\");\n+        var registrationNumber1 = \"1234567\";\n+        var registrationNumber2 = \"2345678\";\n+        var registrationNumber3 = \"3456789\";\n+        var registrationNumber3WithType = \"3456789\" + \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002c8ee88faeb3e6e36b1805b9cf18a824b09de2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNzA1Mw==", "bodyText": "done, thanks!", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440327053", "createdAt": "2020-06-15T17:16:53Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -70,22 +75,108 @@\n     private Exam exam1;\n \n     @BeforeEach\n-    public void initTestCase() {\n+    public void initTestCase() throws URISyntaxException {\n         users = database.addUsers(4, 5, 1);\n         course1 = database.addEmptyCourse();\n         course2 = database.addEmptyCourse();\n         exam1 = database.addExam(course1);\n+        jiraRequestMockProvider.enableMockingOfRequests();\n+        jiraRequestMockProvider.mockAddUserToGroup(Set.of(course1.getStudentGroupName()));\n     }\n \n     @AfterEach\n     public void resetDatabase() {\n         database.resetDatabase();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void registerUsersInExam() throws Exception {\n+\n+        var exam = createExam();\n+        var savedExam = examRepository.save(exam);\n+        var student1 = database.getUserByLogin(\"student1\");\n+        var student2 = database.getUserByLogin(\"student2\");\n+        var student3 = database.getUserByLogin(\"student3\");\n+        var registrationNumber1 = \"1234567\";\n+        var registrationNumber2 = \"2345678\";\n+        var registrationNumber3 = \"3456789\";\n+        var registrationNumber3WithType = \"3456789\" + \"0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNzM2OQ=="}, "originalCommit": {"oid": "002c8ee88faeb3e6e36b1805b9cf18a824b09de2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc2MDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyMTo1M1rOGj_iPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0MToyNFrOGkAJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDMwMQ==", "bodyText": "We could use checkCourseAndExamAccess() from ExamAccessService here.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440394301", "createdAt": "2020-06-15T19:21:53Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,136 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4212faeb47276b33f8e74c1ca4e7ba6bcaaa4f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNDQyNw==", "bodyText": "\ud83d\udc4d I will change it in a follow-up PR", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440404427", "createdAt": "2020-06-15T19:41:24Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,136 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDMwMQ=="}, "originalCommit": {"oid": "8d4212faeb47276b33f8e74c1ca4e7ba6bcaaa4f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc2MTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyMjoyMVrOGj_jIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyOTozM1rOGj_ydA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDUyOQ==", "bodyText": "We could use checkCourseAndExamAccess() from ExamAccessService here.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440394529", "createdAt": "2020-06-15T19:22:21Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,136 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        // NOTE: we intentionally add the user to the course group, because the user only has access to the exam of a course, if the student also\n+        // has access to the course of the exam.\n+        // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+        if (!student.get().getGroups().contains(course.getStudentGroupName())) {\n+            userService.addUserToGroup(student.get(), course.getStudentGroupName());\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentDtos     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentsToExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        log.debug(\"REST request to add {} as students to exam {}\", studentDtos, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4212faeb47276b33f8e74c1ca4e7ba6bcaaa4f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5ODQ1Mg==", "bodyText": "\ud83d\udc4d I will change it in a follow-up PR", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440398452", "createdAt": "2020-06-15T19:29:33Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,136 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        // NOTE: we intentionally add the user to the course group, because the user only has access to the exam of a course, if the student also\n+        // has access to the course of the exam.\n+        // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+        if (!student.get().getGroups().contains(course.getStudentGroupName())) {\n+            userService.addUserToGroup(student.get(), course.getStudentGroupName());\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentDtos     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentsToExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        log.debug(\"REST request to add {} as students to exam {}\", studentDtos, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDUyOQ=="}, "originalCommit": {"oid": "8d4212faeb47276b33f8e74c1ca4e7ba6bcaaa4f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc2MzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyMjo0NVrOGj_kFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyOTozNlrOGj_yig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDc3Mw==", "bodyText": "We could use checkCourseAndExamAccess() from ExamAccessService here.", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440394773", "createdAt": "2020-06-15T19:22:45Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,136 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        // NOTE: we intentionally add the user to the course group, because the user only has access to the exam of a course, if the student also\n+        // has access to the course of the exam.\n+        // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+        if (!student.get().getGroups().contains(course.getStudentGroupName())) {\n+            userService.addUserToGroup(student.get(), course.getStudentGroupName());\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentDtos     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentsToExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        log.debug(\"REST request to add {} as students to exam {}\", studentDtos, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    exam.addUser(student);\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    exam.addUser(student);\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudentsDtos);\n+    }\n+\n+    /**\n+     * DELETE /courses/:courseId/exams/:examId/students/:studentLogin : Remove one single given user (based on the login) from the students of the exam so that the student cannot access the exam any more\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should lose student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @DeleteMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> removeStudentFromExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to remove {} as student from exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4212faeb47276b33f8e74c1ca4e7ba6bcaaa4f"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5ODQ3NA==", "bodyText": "\ud83d\udc4d I will change it in a follow-up PR", "url": "https://github.com/ls1intum/Artemis/pull/1652#discussion_r440398474", "createdAt": "2020-06-15T19:29:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -177,4 +186,136 @@ public ExamResource(UserService userService, ExamService examService, ExamAccess\n \n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, exam.getTitle())).build();\n     }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students/:studentLogin : Add one single given user (based on the login) to the students of the exam so that the student can access the exam\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should get student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> addStudentToExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to add {} as student to exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }\n+        Optional<User> student = userService.getUserWithGroupsAndAuthoritiesByLogin(studentLogin);\n+        if (student.isEmpty()) {\n+            return notFound();\n+        }\n+        exam.addUser(student.get());\n+        // NOTE: we intentionally add the user to the course group, because the user only has access to the exam of a course, if the student also\n+        // has access to the course of the exam.\n+        // we only need to add the user to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+        if (!student.get().getGroups().contains(course.getStudentGroupName())) {\n+            userService.addUserToGroup(student.get(), course.getStudentGroupName());\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(null);\n+    }\n+\n+    /**\n+     * Post /courses/:courseId/exams/:examId/students : Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentDtos     the list of students (with at least registration number) who should get access to the exam\n+     * @return             the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    @PostMapping(value = \"/courses/{courseId}/exams/{examId}/students\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<List<StudentDTO>> addStudentsToExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        log.debug(\"REST request to add {} as students to exam {}\", studentDtos, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    exam.addUser(student);\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    exam.addUser(student);\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return ResponseEntity.ok().body(notFoundStudentsDtos);\n+    }\n+\n+    /**\n+     * DELETE /courses/:courseId/exams/:examId/students/:studentLogin : Remove one single given user (based on the login) from the students of the exam so that the student cannot access the exam any more\n+     *\n+     * @param courseId     the id of the course\n+     * @param examId       the id of the exam\n+     * @param studentLogin the login of the user who should lose student access\n+     * @return empty ResponseEntity with status 200 (OK) or with status 404 (Not Found)\n+     */\n+    @DeleteMapping(value = \"/courses/{courseId}/exams/{examId}/students/{studentLogin:\" + Constants.LOGIN_REGEX + \"}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> removeStudentFromExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable String studentLogin) {\n+        log.debug(\"REST request to remove {} as student from exam : {}\", studentLogin, examId);\n+        var course = courseService.findOne(courseId);\n+        var instructorOrAdmin = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, instructorOrAdmin)) {\n+            return forbidden();\n+        }\n+        var exam = examService.findOneWithRegisteredUsers(examId);\n+        if (!course.equals(exam.getCourse())) {\n+            return conflict();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDc3Mw=="}, "originalCommit": {"oid": "8d4212faeb47276b33f8e74c1ca4e7ba6bcaaa4f"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4873, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}