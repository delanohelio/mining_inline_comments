{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MjUyOTEx", "number": 1835, "title": "Submission Export for Text/Modeling/FileUpload Exercises", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n\n\n\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\n\n\nResolves #1635\nDescription\n\n\nAdded a 'Export Submissions' Button for Text & Modeling & File Upload Exercises\nAdded an export dialog for the above button\nAdded api endpoints for each of the exercise types to generate a zip file with the exercises submissions\n\nSteps for Testing\n\n\nLog in to Artemis\nNavigate to Course Administration\nGo to an Text, Modeling or File Upload Exercise (Course or Exam)\nGo to the Scores Page\nClick on 'Export Submissions' and try different options in the dialog.\n\nScreenshots", "createdAt": "2020-07-08T13:43:04Z", "url": "https://github.com/ls1intum/Artemis/pull/1835", "merged": true, "mergeCommit": {"oid": "f3fdf3a2db3fc20eebc1e40277727c81d076a603"}, "closed": true, "closedAt": "2020-07-12T18:57:45Z", "author": {"login": "schultek"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcymT-DAH2gAyNDQ2MjUyOTExOjY5MTE5YTI3MGQ1NGZiNjhiYTQwNWUxZmY2Njk3NjZhMTE5ZmY5YmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0RtXggFqTQ0NjkwMjU5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69119a270d54fb68ba405e1ff669766a119ff9be", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/69119a270d54fb68ba405e1ff669766a119ff9be", "committedDate": "2020-07-07T14:00:30Z", "message": "duplicate files from programming repo export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfbdf3773dd3bd8fb91a86d8f12085bbcfb70c47", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/cfbdf3773dd3bd8fb91a86d8f12085bbcfb70c47", "committedDate": "2020-07-07T14:39:32Z", "message": "declare in module\nremove not needed code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54273f6c01ac8535476829cee69fa7e8f96ca75d", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/54273f6c01ac8535476829cee69fa7e8f96ca75d", "committedDate": "2020-07-07T15:29:55Z", "message": "add server endpoints and export service stub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e3118fc4ce3958f1908dbc382dfc6e475fd5c43", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/4e3118fc4ce3958f1908dbc382dfc6e475fd5c43", "committedDate": "2020-07-07T15:33:17Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c9c49b76d5fb851857d039cb53ac564cea1598", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/a2c9c49b76d5fb851857d039cb53ac564cea1598", "committedDate": "2020-07-07T17:54:52Z", "message": "add zipping logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb054af3f3fa06e7cd208c3645283b0b6bda5be2", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/eb054af3f3fa06e7cd208c3645283b0b6bda5be2", "committedDate": "2020-07-07T18:33:58Z", "message": "fix imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b84b32387e0a4812406a1692abd07c033eb5ffc3", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/b84b32387e0a4812406a1692abd07c033eb5ffc3", "committedDate": "2020-07-07T18:44:50Z", "message": "Merge branch 'develop' into feature/download-submissions/text-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e66566c52b321933e4a5d4cd9eea8439b14748f", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/4e66566c52b321933e4a5d4cd9eea8439b14748f", "committedDate": "2020-07-08T09:26:11Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "788cf28216c83ea0b36309f5a8422ddd633aa3d4", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/788cf28216c83ea0b36309f5a8422ddd633aa3d4", "committedDate": "2020-07-08T09:26:21Z", "message": "Merge branch 'feature/download-submissions/text-exercises' of https://github.com/ls1intum/Artemis into feature/download-submissions/text-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "400764068ae477d2efa3b5f10226d674480ae5d0", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/400764068ae477d2efa3b5f10226d674480ae5d0", "committedDate": "2020-07-08T09:27:11Z", "message": "Merge branch 'develop' into feature/download-submissions/text-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a0d8a4cb9c65671f989a94fa42f95cfc1a77954", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/4a0d8a4cb9c65671f989a94fa42f95cfc1a77954", "committedDate": "2020-07-08T10:23:36Z", "message": "refactor as exercise-type independent service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1c43ae0fa40ce2c2aebc92b568da4473e8b4dd", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/6f1c43ae0fa40ce2c2aebc92b568da4473e8b4dd", "committedDate": "2020-07-08T10:29:33Z", "message": "fix reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7130112a5478f448c5001d86eaf4c0a3ff446fb", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/b7130112a5478f448c5001d86eaf4c0a3ff446fb", "committedDate": "2020-07-08T10:39:34Z", "message": "move logic to export service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44aea976eea92718dae0cbb70646863ee370caed", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/44aea976eea92718dae0cbb70646863ee370caed", "committedDate": "2020-07-08T10:46:56Z", "message": "add modeling export service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f715282dc11101dda52b390917934e5b092adb6", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/5f715282dc11101dda52b390917934e5b092adb6", "committedDate": "2020-07-08T10:47:48Z", "message": "java formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67dc5b6a2ce077ff50a98b9fbd4db756700bc243", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/67dc5b6a2ce077ff50a98b9fbd4db756700bc243", "committedDate": "2020-07-08T10:48:52Z", "message": "js formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a8915de1da119b3a7e8ab6a2bd6d71ca8f0eeb", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/e5a8915de1da119b3a7e8ab6a2bd6d71ca8f0eeb", "committedDate": "2020-07-08T10:50:59Z", "message": "fix module declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b742e7828eb3b3f9f51e6a7656f0d542929a0554", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/b742e7828eb3b3f9f51e6a7656f0d542929a0554", "committedDate": "2020-07-08T11:19:45Z", "message": "add correct translations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05599ae1eb9d192a2336f70135f22e21e2768566", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/05599ae1eb9d192a2336f70135f22e21e2768566", "committedDate": "2020-07-08T12:44:39Z", "message": "fix id check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ccc0c3543e3dddd0325ea69c491c21f4bf1b76", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/58ccc0c3543e3dddd0325ea69c491c21f4bf1b76", "committedDate": "2020-07-08T13:21:40Z", "message": "use submissions directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524dc3f288a92d67e5a08b575c1523c5db7a7e2f", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/524dc3f288a92d67e5a08b575c1523c5db7a7e2f", "committedDate": "2020-07-08T13:43:19Z", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c829cbcaf78e71a8fdf61140d5d532229cea6b1", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/6c829cbcaf78e71a8fdf61140d5d532229cea6b1", "committedDate": "2020-07-08T13:45:57Z", "message": "fix reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf3227d782851ba5ce08880f1c80460ba089dc35", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/bf3227d782851ba5ce08880f1c80460ba089dc35", "committedDate": "2020-07-08T14:02:10Z", "message": "fix url path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a573f1ab05616171084a39bd30f8ce8ff3e690c", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/1a573f1ab05616171084a39bd30f8ce8ff3e690c", "committedDate": "2020-07-08T14:02:17Z", "message": "add java docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2689496851787d5803b357e4d99ffcee4c2dfbe2", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/2689496851787d5803b357e4d99ffcee4c2dfbe2", "committedDate": "2020-07-08T14:16:52Z", "message": "fix module declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aecbfc5c2b9820f050ee6f88cfd9bfe2b9a7b09", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/6aecbfc5c2b9820f050ee6f88cfd9bfe2b9a7b09", "committedDate": "2020-07-08T14:48:27Z", "message": "fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26d589e3fe784065f6a7fa1352b3a7734a27177d", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/26d589e3fe784065f6a7fa1352b3a7734a27177d", "committedDate": "2020-07-08T14:53:28Z", "message": "fix service declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b85ff7ca8e7a85d35ea64ac7d8f1680768da10", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/24b85ff7ca8e7a85d35ea64ac7d8f1680768da10", "committedDate": "2020-07-08T15:09:38Z", "message": "fix modeling service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbca9e139d49a289f306bd4370f342ff410a5884", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/cbca9e139d49a289f306bd4370f342ff410a5884", "committedDate": "2020-07-08T16:00:35Z", "message": "fix double slash"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5851f89f3792aa8ca4d439ff056458929bb7391", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/e5851f89f3792aa8ca4d439ff056458929bb7391", "committedDate": "2020-07-08T16:45:56Z", "message": "create directories for files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52c591596d0565a039511dd6ae17d9c03a6619b4", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/52c591596d0565a039511dd6ae17d9c03a6619b4", "committedDate": "2020-07-08T17:28:10Z", "message": "adjust filenames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0b50dbd9311773df038614932ae21cf3203d21", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/2a0b50dbd9311773df038614932ae21cf3203d21", "committedDate": "2020-07-08T18:03:30Z", "message": "set success message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06182958274676751262dfbab013c0f77f026c83", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/06182958274676751262dfbab013c0f77f026c83", "committedDate": "2020-07-08T18:03:42Z", "message": "handle empty results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e685c37fc62729e348d322703c53c481644c49d", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/4e685c37fc62729e348d322703c53c481644c49d", "committedDate": "2020-07-08T18:09:06Z", "message": "specify error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ce776dca30d480fb72c7b285d96bc327742061", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/c8ce776dca30d480fb72c7b285d96bc327742061", "committedDate": "2020-07-08T18:58:08Z", "message": "add support for file upload exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e2c0169b96bf0271e65d321ab2e7bd5cac6cb1", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/12e2c0169b96bf0271e65d321ab2e7bd5cac6cb1", "committedDate": "2020-07-08T20:17:50Z", "message": "add basic text & modeling integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aaa1d533ef8df7ba72b7eb67b4255f63fbe1209", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/5aaa1d533ef8df7ba72b7eb67b4255f63fbe1209", "committedDate": "2020-07-09T09:01:41Z", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NjQzNjA4", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-445643608", "createdAt": "2020-07-09T13:59:06Z", "commit": {"oid": "5aaa1d533ef8df7ba72b7eb67b4255f63fbe1209"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjM2MTQx", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446236141", "createdAt": "2020-07-10T08:55:40Z", "commit": {"oid": "5aaa1d533ef8df7ba72b7eb67b4255f63fbe1209"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "531efe4da96470b76cb4c53c6fdc9d921ad66eb8", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/531efe4da96470b76cb4c53c6fdc9d921ad66eb8", "committedDate": "2020-07-10T09:35:54Z", "message": "fix file upload exports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dffbd4ef37cf9d3d3fd1135b13540734b000c4c", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/8dffbd4ef37cf9d3d3fd1135b13540734b000c4c", "committedDate": "2020-07-10T12:50:38Z", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a0403831a238029e08ffc5341d496fd738732e", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/a0a0403831a238029e08ffc5341d496fd738732e", "committedDate": "2020-07-10T12:52:46Z", "message": "add file upload export tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3819973b153f3f65f7e61198c5b4942c14efa14c", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/3819973b153f3f65f7e61198c5b4942c14efa14c", "committedDate": "2020-07-10T12:53:15Z", "message": "Merge branch 'feature/download-submissions/modeling-exercises' of https://github.com/ls1intum/Artemis into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/723144a5aa43cc6147471925ee15811a77160fcd", "committedDate": "2020-07-10T13:06:15Z", "message": "java formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Mzk2NDAz", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446396403", "createdAt": "2020-07-10T13:22:54Z", "commit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Mzk5ODE5", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446399819", "createdAt": "2020-07-10T13:27:24Z", "commit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoyNzoyNFrOGv3UMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo0ODo0NVrOGv-WVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MjU0Ng==", "bodyText": "Use { }", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452842546", "createdAt": "2020-07-10T13:27:24Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NDQ4MQ==", "bodyText": "Returning an Optional might be safer for the caller", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452864481", "createdAt": "2020-07-10T14:04:27Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NTEyNw==", "bodyText": "See above", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452865127", "createdAt": "2020-07-10T14:05:28Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg3MTA0OQ==", "bodyText": "Use { }", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452871049", "createdAt": "2020-07-10T14:15:18Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzQ1NA==", "bodyText": "You could move this to outside the lambda as submissionsFolderPath has to be created only once.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452893454", "createdAt": "2020-07-10T14:52:00Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NDIxMA==", "bodyText": "Could use Optional", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452894210", "createdAt": "2020-07-10T14:53:16Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwOTUyNg==", "bodyText": "Would be nice if we could issue a warning in the UI if something went wrong and some submissions might be missing. But I guess this is out of scope.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452909526", "createdAt": "2020-07-10T15:18:33Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTA0Ng==", "bodyText": "Shouldn't this folder already exist because zipFilePath parent is \".../zippedSubmissions\" and submissionFolderPath was already created and contains the path segment \".../zippedSubmissions\"?", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452925046", "createdAt": "2020-07-10T15:46:06Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())\n+            return null;\n+\n+        try {\n+\n+            File parent = zipFilePath.getParent().toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTUxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param paths the paths that should be zipped\n          \n          \n            \n                 * @param paths the paths that should be zipped\n          \n          \n            \n                 * @param pathsRoot the root path relative to <code>paths</code>", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452931517", "createdAt": "2020-07-10T15:57:35Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())\n+            return null;\n+\n+        try {\n+\n+            File parent = zipFilePath.getParent().toFile();\n+            if (!parent.exists() && !parent.mkdirs()) {\n+                log.error(\"Couldn't create dir: \" + parent);\n+                return null;\n+            }\n+\n+            createZipFile(zipFilePath, submissionFilePaths, submissionsFolderPath);\n+        }\n+        finally {\n+            deleteTempFiles(submissionFilePaths);\n+        }\n+\n+        scheduleForDeletion(zipFilePath, 15);\n+\n+        return zipFilePath.toFile();\n+    }\n+\n+    protected abstract void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException;\n+\n+    protected abstract String getFileEndingForSubmission(Submission submission);\n+\n+    /**\n+     * Create a zipfile of the given paths and save it in the zipFilePath\n+     *\n+     * @param zipFilePath path where the zip file should be saved\n+     * @param paths the paths that should be zipped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NzcxMA==", "bodyText": "Should also check this on the server. if submissionExportOptions.exportAllParticipants is true but the user is just TA return forbidden()", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452947710", "createdAt": "2020-07-10T16:28:28Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/shared/submission-export/submission-export-dialog.component.html", "diffHunk": "@@ -0,0 +1,69 @@\n+<form *ngIf=\"!isLoading; else loadingContainer\" name=\"exportForm\" role=\"form\" (ngSubmit)=\"exportSubmissions(exercise.id)\" #exportForm=\"ngForm\">\n+    <div class=\"modal-header\">\n+        <h4 class=\"modal-title\" jhiTranslate=\"instructorDashboard.exportSubmissions.title\">Confirm export operation</h4>\n+        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"clear()\">&times;</button>\n+    </div>\n+    <div class=\"modal-body\">\n+        <jhi-alert-error></jhi-alert-error>\n+        <p [jhiTranslate]=\"'instructorDashboard.exportSubmissions.question'\" [translateValues]=\"{ exerciseTitle: exercise.title, courseTitle: exercise.course?.title }\">\n+            Confirm export\n+        </p>\n+        <textarea\n+            name=\"studentIds\"\n+            class=\"export-textarea\"\n+            [(ngModel)]=\"submissionExportOptions.participantIdentifierList\"\n+            required\n+            [disabled]=\"submissionExportOptions.exportAllParticipants\"\n+        ></textarea>\n+\n+        <!--\n+        Only show download all checkbox for instructors & admins.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1MTAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        [disabled]=\"!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants && !exportInProgress\"\n          \n          \n            \n                        [disabled]=\"(!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants) || exportInProgress\"", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452951005", "createdAt": "2020-07-10T16:34:52Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/shared/submission-export/submission-export-dialog.component.html", "diffHunk": "@@ -0,0 +1,69 @@\n+<form *ngIf=\"!isLoading; else loadingContainer\" name=\"exportForm\" role=\"form\" (ngSubmit)=\"exportSubmissions(exercise.id)\" #exportForm=\"ngForm\">\n+    <div class=\"modal-header\">\n+        <h4 class=\"modal-title\" jhiTranslate=\"instructorDashboard.exportSubmissions.title\">Confirm export operation</h4>\n+        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"clear()\">&times;</button>\n+    </div>\n+    <div class=\"modal-body\">\n+        <jhi-alert-error></jhi-alert-error>\n+        <p [jhiTranslate]=\"'instructorDashboard.exportSubmissions.question'\" [translateValues]=\"{ exerciseTitle: exercise.title, courseTitle: exercise.course?.title }\">\n+            Confirm export\n+        </p>\n+        <textarea\n+            name=\"studentIds\"\n+            class=\"export-textarea\"\n+            [(ngModel)]=\"submissionExportOptions.participantIdentifierList\"\n+            required\n+            [disabled]=\"submissionExportOptions.exportAllParticipants\"\n+        ></textarea>\n+\n+        <!--\n+        Only show download all checkbox for instructors & admins.\n+        -->\n+        <ng-container>\n+            <div *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_INSTRUCTOR']\" class=\"checkbox\">\n+                <label class=\"control-label\">\n+                    <input type=\"checkbox\" name=\"allStudents\" [(ngModel)]=\"submissionExportOptions.exportAllParticipants\" />\n+                    <strong [jhiTranslate]=\"'instructorDashboard.exportSubmissions.downloadAllStudents'\">\n+                        Or download the submissions of all students }}\n+                    </strong>\n+                </label>\n+            </div>\n+        </ng-container>\n+        <ng-container>\n+            <div class=\"checkbox\">\n+                <label class=\"control-label\">\n+                    <input type=\"checkbox\" name=\"filterLateSubmissions\" [(ngModel)]=\"this.submissionExportOptions.filterLateSubmissions\" />\n+                    <strong jhiTranslate=\"instructorDashboard.exportSubmissions.filterLateSubmissions\">Filter late submissions</strong>\n+                </label>\n+            </div>\n+            <div class=\"form-group\">\n+                <strong jhiTranslate=\"instructorDashboard.exportSubmissions.filterLateSubmissionsDate\"\n+                    >Date for filter late submissions (defaults to exercise due date if not set)</strong\n+                >\n+                <jhi-date-time-picker\n+                    [(ngModel)]=\"this.submissionExportOptions.filterLateSubmissionsDate\"\n+                    [disabled]=\"!this.submissionExportOptions.filterLateSubmissions\"\n+                    name=\"filterLateSubmissionsDate\"\n+                ></jhi-date-time-picker>\n+            </div>\n+        </ng-container>\n+    </div>\n+    <div class=\"modal-footer\">\n+        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" (click)=\"clear()\">\n+            <span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span jhiTranslate=\"entity.action.cancel\">Cancel</span>\n+        </button>\n+        <button\n+            type=\"submit\"\n+            [disabled]=\"!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants && !exportInProgress\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1Nzc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"question\": \"Tragen sie hier alle Kennungen der Studenten ein, die heruntergeladen werden sollen getrennt durch ein Komma (z.B. ga87fix,ga63dut)\",\n          \n          \n            \n                        \"question\": \"Tragen sie hier alle Kennungen der Studenten getrennt durch ein Komma ein, deren Abgaben heruntergeladen werden sollen (z.B. ga87fix,ga63dut)\",", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452957782", "createdAt": "2020-07-10T16:48:45Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/i18n/de/instructorDashboard.json", "diffHunk": "@@ -34,6 +34,14 @@\n             \"timeWarning\": \"<b>Achtung:</b> Diese Aktion kann abh\u00e4ngig von Gr\u00f6\u00dfe und Anzahl der Repositories mehrere Minuten dauern.\"\n         },\n         \"exportCSV\": \"Als CSV exportieren\",\n+        \"exportSubmissions\": {\n+            \"title\": \"Abgaben exportieren\",\n+            \"downloadAllStudents\": \"Oder lade die Abgaben aller Studenten herunter\",\n+            \"question\": \"Tragen sie hier alle Kennungen der Studenten ein, die heruntergeladen werden sollen getrennt durch ein Komma (z.B. ga87fix,ga63dut)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjA0MTcx", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446604171", "createdAt": "2020-07-10T18:17:53Z", "commit": {"oid": "723144a5aa43cc6147471925ee15811a77160fcd"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b016d80a4400ca7da3b784100a6b099e96dc7b", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/85b016d80a4400ca7da3b784100a6b099e96dc7b", "committedDate": "2020-07-10T21:10:26Z", "message": "proposed changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c759c78045e39d8b89393ae76887e1616236d6", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/21c759c78045e39d8b89393ae76887e1616236d6", "committedDate": "2020-07-11T12:57:04Z", "message": "fix null submissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1183100c63e62e7c3bf9734a6e4a5c41fcc0bfd9", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/1183100c63e62e7c3bf9734a6e4a5c41fcc0bfd9", "committedDate": "2020-07-11T13:07:06Z", "message": "fix missing translation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "640db77285f34cfa639273aee7652687e24a9cf2", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/640db77285f34cfa639273aee7652687e24a9cf2", "committedDate": "2020-07-11T13:07:28Z", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "686abfc02382d55235cf1d469cd46cc19b9c7a90", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/686abfc02382d55235cf1d469cd46cc19b9c7a90", "committedDate": "2020-07-12T10:09:49Z", "message": "java code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "committedDate": "2020-07-12T10:11:31Z", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODcyNTgz", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446872583", "createdAt": "2020-07-12T12:06:40Z", "commit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODkzNDIw", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446893420", "createdAt": "2020-07-12T16:40:49Z", "commit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNjo0MDo0OVrOGwVjdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNjo0ODoyOVrOGwVmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzNzk3NQ==", "bodyText": "Please use { and }.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453337975", "createdAt": "2020-07-12T16:40:49Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionExportService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.FileUploadSubmission;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+\n+@Service\n+public class FileUploadSubmissionExportService extends SubmissionExportService {\n+\n+    public FileUploadSubmissionExportService(ExerciseRepository exerciseRepository) {\n+        super(exerciseRepository);\n+    }\n+\n+    @Override\n+    protected void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException {\n+\n+        if (((FileUploadSubmission) submission).getFilePath() == null) {\n+            throw new IOException(\"Could not find uploaded file for submission.\");\n+        }\n+\n+        // we need to get the 'real' file path here, the submission only has the api url path\n+        String filePath = FileUploadSubmission.buildFilePath(exercise.getId(), submission.getId());\n+        String[] apiFilePathParts = ((FileUploadSubmission) submission).getFilePath().split(\"/\");\n+\n+        Path submissionPath = Path.of(filePath, apiFilePathParts[apiFilePathParts.length - 1]);\n+\n+        if (!submissionPath.toFile().exists()) // throw if submission file does not exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODAyNQ==", "bodyText": "Please use { and }.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338025", "createdAt": "2020-07-12T16:41:23Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionExportService.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+\n+@Service\n+public class ModelingSubmissionExportService extends SubmissionExportService {\n+\n+    public ModelingSubmissionExportService(ExerciseRepository exerciseRepository) {\n+        super(exerciseRepository);\n+    }\n+\n+    @Override\n+    protected void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException {\n+        if (((ModelingSubmission) submission).getModel() == null) {\n+            if (!file.exists())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODEzNQ==", "bodyText": "Please use { and }.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338135", "createdAt": "2020-07-12T16:42:25Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    public Optional<File> exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    private Optional<File> createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter)\n+            throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        File submissionFolder = submissionsFolderPath.toFile();\n+        if (!submissionFolder.exists() && !submissionFolder.mkdirs()) {\n+            log.error(\"Couldn't create dir: \" + submissionFolder);\n+            return Optional.empty();\n+        }\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null) {\n+                return Optional.<Path>empty();\n+            }\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \" for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODE3NQ==", "bodyText": "Please use { and }.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338175", "createdAt": "2020-07-12T16:42:57Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TextSubmissionExportService.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+\n+@Service\n+public class TextSubmissionExportService extends SubmissionExportService {\n+\n+    public TextSubmissionExportService(ExerciseRepository exerciseRepository) {\n+        super(exerciseRepository);\n+    }\n+\n+    @Override\n+    protected void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException {\n+        if (((TextSubmission) submission).getText() == null) {\n+            if (!file.exists())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODY4MQ==", "bodyText": "This check caused some problems for me during testing: If you are both instructor/admin AND tutor, you cannot download all submissions.\nI do not know if this is a real scenario in normal courses, but in test courses, this can happen.\nMaybe you should change the check to something like submissionExportOptions.isExportAllParticipants() && !authCheckService.isAtLeastInstructorInCourse.\nAlso, no error message was shown to me, so I had to check the source code to identify the issue. Maybe you can display error messages in a follow up or so.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338681", "createdAt": "2020-07-12T16:48:13Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "diffHunk": "@@ -274,4 +284,51 @@ else if (!authCheckService.isAtLeastTeachingAssistantForExercise(fileUploadExerc\n         exerciseService.delete(exerciseId, false, false);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, fileUploadExercise.getTitle())).build();\n     }\n+\n+    /**\n+     * POST /file-upload-exercises/:exerciseId/export-submissions : sends exercise submissions as zip\n+     *\n+     * @param exerciseId the id of the exercise to get the repos from\n+     * @param submissionExportOptions the options that should be used for the export\n+     * @return ResponseEntity with status\n+     */\n+    @PostMapping(\"/file-upload-exercises/{exerciseId}/export-submissions\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Resource> exportSubmissions(@PathVariable long exerciseId, @RequestBody SubmissionExportOptionsDTO submissionExportOptions) {\n+\n+        Optional<FileUploadExercise> optionalFileUploadExercise = fileUploadExerciseRepository.findById(exerciseId);\n+        if (optionalFileUploadExercise.isEmpty()) {\n+            return notFound();\n+        }\n+\n+        FileUploadExercise fileUploadExercise = optionalFileUploadExercise.get();\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(fileUploadExercise)) {\n+            return forbidden();\n+        }\n+\n+        // ta's are not allowed to download all participations\n+        if (submissionExportOptions.isExportAllParticipants() && authCheckService.isTeachingAssistantInCourse(fileUploadExercise.getCourseViaExerciseGroupOrCourseMember(), null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODY5Nw==", "bodyText": "See above.", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338697", "createdAt": "2020-07-12T16:48:29Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java", "diffHunk": "@@ -340,4 +351,50 @@ public ModelingExerciseResource(ModelingExerciseRepository modelingExerciseRepos\n         return ResponseEntity.created(new URI(\"/api/modeling-exercises/\" + newExercise.getId()))\n                 .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newExercise.getId().toString())).body((ModelingExercise) newExercise);\n     }\n+\n+    /**\n+     * POST /modeling-exercises/:exerciseId/export-submissions : sends exercise submissions as zip\n+     *\n+     * @param exerciseId the id of the exercise to get the repos from\n+     * @param submissionExportOptions the options that should be used for the export\n+     * @return ResponseEntity with status\n+     */\n+    @PostMapping(\"/modeling-exercises/{exerciseId}/export-submissions\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Resource> exportSubmissions(@PathVariable long exerciseId, @RequestBody SubmissionExportOptionsDTO submissionExportOptions) {\n+\n+        Optional<ModelingExercise> optionalModelingExercise = modelingExerciseRepository.findById(exerciseId);\n+        if (optionalModelingExercise.isEmpty()) {\n+            return notFound();\n+        }\n+        ModelingExercise modelingExercise = optionalModelingExercise.get();\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(modelingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // ta's are not allowed to download all participations\n+        if (submissionExportOptions.isExportAllParticipants() && authCheckService.isTeachingAssistantInCourse(modelingExercise.getCourseViaExerciseGroupOrCourseMember(), null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c3633e50915c8c740064a79575550c95fdb712", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/f8c3633e50915c8c740064a79575550c95fdb712", "committedDate": "2020-07-12T17:21:49Z", "message": "suggested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODk3OTIw", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446897920", "createdAt": "2020-07-12T17:51:35Z", "commit": {"oid": "f8c3633e50915c8c740064a79575550c95fdb712"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "178586331a717b30c834c3e54794a4a306a15124", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/178586331a717b30c834c3e54794a4a306a15124", "committedDate": "2020-07-12T18:03:55Z", "message": "Update src/main/webapp/i18n/de/instructorDashboard.json\n\nCo-authored-by: Stefan Kl\u00f6ss-Schuster <16407766+kloessst@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b4fe5908f35e909c7d48cc4986a250659b73d6", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/94b4fe5908f35e909c7d48cc4986a250659b73d6", "committedDate": "2020-07-12T18:10:16Z", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTAxMzgz", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446901383", "createdAt": "2020-07-12T18:48:52Z", "commit": {"oid": "94b4fe5908f35e909c7d48cc4986a250659b73d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTAxOTUw", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446901950", "createdAt": "2020-07-12T18:57:30Z", "commit": {"oid": "94b4fe5908f35e909c7d48cc4986a250659b73d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTAyNTky", "url": "https://github.com/ls1intum/Artemis/pull/1835#pullrequestreview-446902592", "createdAt": "2020-07-12T19:08:05Z", "commit": {"oid": "94b4fe5908f35e909c7d48cc4986a250659b73d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4281, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}