{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTc1MjM3", "number": 1224, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyMjozOVrODc7RLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozMDowMVrODc7ajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjU3Nzc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AssessmentComplaintIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyMjozOVrOFlO8JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyMjozOVrOFlO8JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4NjQwNA==", "bodyText": "Shouldn't the exercise be taken from the passed in receivedComplaint that is the result of a REST call? As far as I can see, modelingExercise is simply taken from the database and could thus contain very different information than exericse in the lines above. I think something along those lines would make more sense (I didn't test it but you get the idea):\nif (exercise instanceof ModelingExercise) {\n  ModelingExercise modelingExercise = (ModelingExercise) exercise;\n  assertThat(modelingExercise.getSampleSolutionModel()).as(\"Exercise only contains title and ID\").isNull();\n}", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374586404", "createdAt": "2020-02-04T10:22:39Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/AssessmentComplaintIntegrationTest.java", "diffHunk": "@@ -429,6 +440,8 @@ private void checkIfNoSensitiveExerciseDataPresent(Complaint receivedComplaint)\n             assertThat(exercise.getStudentParticipations()).as(\"Exercise only contains title and ID\").isNullOrEmpty();\n             assertThat(exercise.getTutorParticipations()).as(\"Exercise only contains title and ID\").isNullOrEmpty();\n             // TODO check exercise type specific sensitive attributes\n+            assertThat(modelingExercise.getSampleSolutionModel()).as(\"Exercise only contains title and ID\").isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjU4OTI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyNjoyMFrOFlPDIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyNjoyMFrOFlPDIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4ODE5NQ==", "bodyText": "The method name would suggest that the lecture itself also gets saved. I also saw that in most use cases, the lecture is saved after this method is called. Maybe it makes sense to have a boolean flag for this where the default is that the lecture also gets saved?", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374588195", "createdAt": "2020-02-04T10:26:20Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -268,6 +268,17 @@ public void addTeachingAssistant(final String taGroup, final String taName) {\n         assertThat(ta.getId()).as(\"Teaching assistant has been created\").isNotNull();\n     }\n \n+    public Lecture createCourseWithLecture() {\n+        Course course = ModelFactory.generateCourse(null, pastTimestamp, futureFutureTimestamp, new HashSet<>(), \"tumuser\", \"tutor\", \"instructor\");\n+\n+        Lecture lecture = new Lecture();\n+        lecture.setDescription(\"Test Lecture\");\n+        lecture.setCourse(course);\n+        courseRepo.save(course);\n+        // lectureRepo.save(lecture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjU5NzMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyODozNlrOFlPHxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyODozNlrOFlPHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4OTM4Mw==", "bodyText": "This is not actually testing if an update has been performed. Could you change an attribute and then verify that it has actually changed?", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374589383", "createdAt": "2020-02-04T10:28:36Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjYwMTc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozMDowMVrOFlPKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzozNzo1NVrOFmA32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5MDA5OQ==", "bodyText": "Can tutors delete a lecture? If not, maybe add another test or change the role.", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374590099", "createdAt": "2020-02-04T10:30:01Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void updateLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void deleteLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.delete(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK);\n+        assertThat(lectureRepo.findAll().isEmpty()).isTrue();\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYwMTA3MQ==", "bodyText": "Yes, they do not have permission to delete a lecture. However, since TA is a subset of USER I would argue that it should be covered by this test case. I could still add a separate test tho as it has no bad effect :)", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374601071", "createdAt": "2020-02-04T10:52:28Z", "author": {"login": "HanyaElhashemy"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void updateLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void deleteLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.delete(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK);\n+        assertThat(lectureRepo.findAll().isEmpty()).isTrue();\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5MDA5OQ=="}, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNjIzOQ==", "bodyText": "I don't think it's covered: It could both be true that the test succeeds and that a tutor is able to delete a lecture since a regular user might be denied but a tutor not.", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374736239", "createdAt": "2020-02-04T15:21:42Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void updateLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void deleteLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.delete(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK);\n+        assertThat(lectureRepo.findAll().isEmpty()).isTrue();\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5MDA5OQ=="}, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNDUwNQ==", "bodyText": "I don't think tutors should be able to delete lectures. If this is possible, we should change it so that only instructors can delete it.", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r375404505", "createdAt": "2020-02-05T17:37:55Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void updateLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void deleteLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.delete(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK);\n+        assertThat(lectureRepo.findAll().isEmpty()).isTrue();\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5MDA5OQ=="}, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 207, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}