{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODA4NzQy", "number": 1360, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowNjoxOFrOD5X1bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo1Mjo1N1rOD5fgKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg1OTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowNjoxOFrOGQmTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1NjoyN1rOGRPhLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1Nzg3Mg==", "bodyText": "Maybe include notificationType in the error message so it's clear which notification type is unsupported and caused the error.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420057872", "createdAt": "2020-05-05T12:06:18Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param attachment for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Attachment attachment, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.ATTACHMENT_CHANGE) {\n+            title = \"Attachment updated\";\n+            text = \"Attachment \\\"\" + attachment.getName() + \"\\\" updated.\";\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Unsupported NotificationType.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMzIyOA==", "bodyText": "Good point, I will add it!", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420733228", "createdAt": "2020-05-06T11:56:27Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param attachment for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Attachment attachment, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.ATTACHMENT_CHANGE) {\n+            title = \"Attachment updated\";\n+            text = \"Attachment \\\"\" + attachment.getName() + \"\\\" updated.\";\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Unsupported NotificationType.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1Nzg3Mg=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg2MzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowNzo0MVrOGQmV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1Nzo0MFrOGRPjnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1ODU4Mw==", "bodyText": "This comment doesn't really add much value since it's just the method name. I'd say leave it out or expand more.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420058583", "createdAt": "2020-05-05T12:07:41Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param attachment for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Attachment attachment, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.ATTACHMENT_CHANGE) {\n+            title = \"Attachment updated\";\n+            text = \"Attachment \\\"\" + attachment.getName() + \"\\\" updated.\";\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Unsupported NotificationType.\");\n+        }\n+\n+        Course course = attachment.getLecture().getCourse();\n+        GroupNotification notification = new GroupNotification(course, title, text, author, groupNotificationType);\n+\n+        // Set target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMzg1Mw==", "bodyText": "I will remove it :-)", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420733853", "createdAt": "2020-05-06T11:57:40Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param attachment for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Attachment attachment, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.ATTACHMENT_CHANGE) {\n+            title = \"Attachment updated\";\n+            text = \"Attachment \\\"\" + attachment.getName() + \"\\\" updated.\";\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Unsupported NotificationType.\");\n+        }\n+\n+        Course course = attachment.getLecture().getCourse();\n+        GroupNotification notification = new GroupNotification(course, title, text, author, groupNotificationType);\n+\n+        // Set target", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1ODU4Mw=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg2OTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowOToyMFrOGQmZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowNDoyNVrOGRUrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1OTQxMQ==", "bodyText": "This seems like a good opportunity for a switch statement.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420059411", "createdAt": "2020-05-05T12:09:20Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param attachment for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Attachment attachment, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.ATTACHMENT_CHANGE) {\n+            title = \"Attachment updated\";\n+            text = \"Attachment \\\"\" + attachment.getName() + \"\\\" updated.\";\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Unsupported NotificationType.\");\n+        }\n+\n+        Course course = attachment.getLecture().getCourse();\n+        GroupNotification notification = new GroupNotification(course, title, text, author, groupNotificationType);\n+\n+        // Set target\n+        notification.setTarget(notification.getAttachmentUpdated(attachment.getLecture()));\n+\n+        return notification;\n+    }\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param exercise for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Exercise exercise, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.EXERCISE_CREATED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNzc1Mw==", "bodyText": "Normally I prefer if-else over switch statements in Java but the new enhanced switch statements or really nice (multiple values possible, no break in every case needed). I will adjust my implementation :-)", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420817753", "createdAt": "2020-05-06T14:04:25Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param attachment for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Attachment attachment, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.ATTACHMENT_CHANGE) {\n+            title = \"Attachment updated\";\n+            text = \"Attachment \\\"\" + attachment.getName() + \"\\\" updated.\";\n+        }\n+        else {\n+            throw new UnsupportedOperationException(\"Unsupported NotificationType.\");\n+        }\n+\n+        Course course = attachment.getLecture().getCourse();\n+        GroupNotification notification = new GroupNotification(course, title, text, author, groupNotificationType);\n+\n+        // Set target\n+        notification.setTarget(notification.getAttachmentUpdated(attachment.getLecture()));\n+\n+        return notification;\n+    }\n+\n+    /**\n+     * Creates an instance of GroupNotification based on the passed parameters.\n+     *\n+     * @param exercise for which a notification should be created\n+     * @param author of the notification\n+     * @param groupNotificationType user group type the notification should target\n+     * @param notificationType type of the notification that should be created\n+     * @return an instance of GroupNotification\n+     */\n+    public static GroupNotification createNotification(Exercise exercise, User author, GroupNotificationType groupNotificationType, NotificationType notificationType) {\n+        String title, text;\n+        if (notificationType == NotificationType.EXERCISE_CREATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1OTQxMQ=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg5MTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNTo1MVrOGQmmjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjozOTozNVrOGRQ_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Mjg2Mg==", "bodyText": "I think this would be easier to parse mentally:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n          \n          \n            \n                    if (attachment.getReleaseDate() != null && attachment.getReleaseDate().isAfter(ZonedDateTime.now())) {", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420062862", "createdAt": "2020-05-05T12:15:51Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NzM4OQ==", "bodyText": "Definitely!", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420757389", "createdAt": "2020-05-06T12:39:35Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Mjg2Mg=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg5NzY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNzo0M1rOGQmqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozNTowM1rOGRTP_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Mzg0Mw==", "bodyText": "Could this be removed now or are there difficulties associated with removing it?", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420063843", "createdAt": "2020-05-05T12:17:43Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n+            return;\n+        }\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(attachment, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.ATTACHMENT_CHANGE));\n     }\n \n-    private GroupNotification createAttachmentUpdatedGroupNotification(Attachment attachment, String notificationText) {\n-        Course course = attachment.getLecture().getCourse();\n-        String title = \"Attachment \" + attachment.getName() + \" updated\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(course, title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getAttachmentUpdated(attachment.getLecture()));\n-        return groupNotification;\n+    /**\n+     * Notify students groups about an exercise opened for practice.\n+     *\n+     * @param exercise that has been opened for practice\n+     */\n+    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_PRACTICE));\n     }\n \n+    /**\n+     * Notify student groups about an exercise started.\n+     *\n+     * @param exercise that has been started\n+     */\n     public void notifyStudentGroupAboutExerciseStart(Exercise exercise) {\n-        String title = \"Exercise started\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" just started.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExerciseVisibility(Exercise exercise) {\n-        String title = \"New exercise available\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now available.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n-        String title = \"Exercise open for practice\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now open for practice.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_STARTED));\n     }\n \n     /**\n-     * Notify student group about an exercise update\n+     * Notify student groups about an exercise update.\n      *\n      * @param exercise that has been updated\n-     * @param notificationText that should be displayed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NDM2NQ==", "bodyText": "Forgot to work on that. Actually, we need to keep the notification text as there is an option to set a custom notification message when updating an attachment or an exercise.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420794365", "createdAt": "2020-05-06T13:35:03Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n+            return;\n+        }\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(attachment, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.ATTACHMENT_CHANGE));\n     }\n \n-    private GroupNotification createAttachmentUpdatedGroupNotification(Attachment attachment, String notificationText) {\n-        Course course = attachment.getLecture().getCourse();\n-        String title = \"Attachment \" + attachment.getName() + \" updated\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(course, title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getAttachmentUpdated(attachment.getLecture()));\n-        return groupNotification;\n+    /**\n+     * Notify students groups about an exercise opened for practice.\n+     *\n+     * @param exercise that has been opened for practice\n+     */\n+    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_PRACTICE));\n     }\n \n+    /**\n+     * Notify student groups about an exercise started.\n+     *\n+     * @param exercise that has been started\n+     */\n     public void notifyStudentGroupAboutExerciseStart(Exercise exercise) {\n-        String title = \"Exercise started\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" just started.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExerciseVisibility(Exercise exercise) {\n-        String title = \"New exercise available\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now available.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n-        String title = \"Exercise open for practice\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now open for practice.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_STARTED));\n     }\n \n     /**\n-     * Notify student group about an exercise update\n+     * Notify student groups about an exercise update.\n      *\n      * @param exercise that has been updated\n-     * @param notificationText that should be displayed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Mzg0Mw=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkwOTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyMDo1MFrOGQmxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0MzoyOVrOGRRImQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NTY3NA==", "bodyText": "Who is this question directed at? Maybe it'd be better to clarify the question since the TODO adds more confusion than it alleviates, I feel.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420065674", "createdAt": "2020-05-05T12:20:50Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n+            return;\n+        }\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(attachment, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.ATTACHMENT_CHANGE));\n     }\n \n-    private GroupNotification createAttachmentUpdatedGroupNotification(Attachment attachment, String notificationText) {\n-        Course course = attachment.getLecture().getCourse();\n-        String title = \"Attachment \" + attachment.getName() + \" updated\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(course, title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getAttachmentUpdated(attachment.getLecture()));\n-        return groupNotification;\n+    /**\n+     * Notify students groups about an exercise opened for practice.\n+     *\n+     * @param exercise that has been opened for practice\n+     */\n+    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_PRACTICE));\n     }\n \n+    /**\n+     * Notify student groups about an exercise started.\n+     *\n+     * @param exercise that has been started\n+     */\n     public void notifyStudentGroupAboutExerciseStart(Exercise exercise) {\n-        String title = \"Exercise started\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" just started.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExerciseVisibility(Exercise exercise) {\n-        String title = \"New exercise available\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now available.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n-        String title = \"Exercise open for practice\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now open for practice.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_STARTED));\n     }\n \n     /**\n-     * Notify student group about an exercise update\n+     * Notify student groups about an exercise update.\n      *\n      * @param exercise that has been updated\n-     * @param notificationText that should be displayed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n      */\n     public void notifyStudentGroupAboutExerciseUpdate(Exercise exercise, String notificationText) {\n+        // Do not send a notification before the release date of the exercise.\n         if (exercise.getReleaseDate() != null && exercise.getReleaseDate().isAfter(ZonedDateTime.now())) {\n             return;\n         }\n-        String title = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" updated\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyInstructorGroupAboutExerciseUpdate(Exercise exercise, String notificationText) {\n-        String title = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" updated\";\n-        notifyInstructorGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    private void notifyInstructorGroupAboutExerciseChange(Exercise exercise, String title, String notificationText) {\n-        GroupNotification groupNotification = createExerciseUpdatedGroupNotificationForInstructors(exercise, title, notificationText);\n-        saveAndSendGroupNotification(groupNotification);\n-    }\n-\n-    private void notifyStudentGroupAboutExerciseChange(Exercise exercise, String title, String notificationText) {\n-        GroupNotification groupNotification = createExerciseUpdatedGroupNotificationForStudents(exercise, title, notificationText);\n-        saveAndSendGroupNotification(groupNotification);\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_UPDATED));\n     }\n \n     /**\n-     * Notify tutor group about the creation of an exercise\n+     * Notify tutor groups about the creation of an exercise.\n      *\n      * @param exercise that has been created\n      */\n     public void notifyTutorGroupAboutExerciseCreated(Exercise exercise) {\n-        GroupNotification groupNotification = createExerciseCreatedGroupNotificationForTutors(exercise);\n-        saveAndSendGroupNotification(groupNotification);\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.TA, NotificationType.EXERCISE_CREATED));\n+    }\n+\n+    /**\n+     * Notify instructor groups about an exercise update.\n+     *\n+     * @param exercise that has been updated\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyInstructorGroupAboutExerciseUpdate(Exercise exercise, String notificationText) {\n+        // TODO: why null for author?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1OTcwNQ==", "bodyText": "I forgot this and the previous TODO. Was somehow a reminder for myself. I will resolve both todos.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420759705", "createdAt": "2020-05-06T12:43:29Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n+            return;\n+        }\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(attachment, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.ATTACHMENT_CHANGE));\n     }\n \n-    private GroupNotification createAttachmentUpdatedGroupNotification(Attachment attachment, String notificationText) {\n-        Course course = attachment.getLecture().getCourse();\n-        String title = \"Attachment \" + attachment.getName() + \" updated\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(course, title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getAttachmentUpdated(attachment.getLecture()));\n-        return groupNotification;\n+    /**\n+     * Notify students groups about an exercise opened for practice.\n+     *\n+     * @param exercise that has been opened for practice\n+     */\n+    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_PRACTICE));\n     }\n \n+    /**\n+     * Notify student groups about an exercise started.\n+     *\n+     * @param exercise that has been started\n+     */\n     public void notifyStudentGroupAboutExerciseStart(Exercise exercise) {\n-        String title = \"Exercise started\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" just started.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExerciseVisibility(Exercise exercise) {\n-        String title = \"New exercise available\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now available.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyStudentGroupAboutExercisePractice(Exercise exercise) {\n-        String title = \"Exercise open for practice\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" is now open for practice.\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_STARTED));\n     }\n \n     /**\n-     * Notify student group about an exercise update\n+     * Notify student groups about an exercise update.\n      *\n      * @param exercise that has been updated\n-     * @param notificationText that should be displayed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n      */\n     public void notifyStudentGroupAboutExerciseUpdate(Exercise exercise, String notificationText) {\n+        // Do not send a notification before the release date of the exercise.\n         if (exercise.getReleaseDate() != null && exercise.getReleaseDate().isAfter(ZonedDateTime.now())) {\n             return;\n         }\n-        String title = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" updated\";\n-        notifyStudentGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    public void notifyInstructorGroupAboutExerciseUpdate(Exercise exercise, String notificationText) {\n-        String title = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" updated\";\n-        notifyInstructorGroupAboutExerciseChange(exercise, title, notificationText);\n-    }\n-\n-    private void notifyInstructorGroupAboutExerciseChange(Exercise exercise, String title, String notificationText) {\n-        GroupNotification groupNotification = createExerciseUpdatedGroupNotificationForInstructors(exercise, title, notificationText);\n-        saveAndSendGroupNotification(groupNotification);\n-    }\n-\n-    private void notifyStudentGroupAboutExerciseChange(Exercise exercise, String title, String notificationText) {\n-        GroupNotification groupNotification = createExerciseUpdatedGroupNotificationForStudents(exercise, title, notificationText);\n-        saveAndSendGroupNotification(groupNotification);\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.EXERCISE_UPDATED));\n     }\n \n     /**\n-     * Notify tutor group about the creation of an exercise\n+     * Notify tutor groups about the creation of an exercise.\n      *\n      * @param exercise that has been created\n      */\n     public void notifyTutorGroupAboutExerciseCreated(Exercise exercise) {\n-        GroupNotification groupNotification = createExerciseCreatedGroupNotificationForTutors(exercise);\n-        saveAndSendGroupNotification(groupNotification);\n+        saveAndSend(GroupNotificationFactory.createNotification(exercise, userService.getUser(), GroupNotificationType.TA, NotificationType.EXERCISE_CREATED));\n+    }\n+\n+    /**\n+     * Notify instructor groups about an exercise update.\n+     *\n+     * @param exercise that has been updated\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyInstructorGroupAboutExerciseUpdate(Exercise exercise, String notificationText) {\n+        // TODO: why null for author?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NTY3NA=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkxNzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyMzoyMFrOGQm2sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjozNTozNVrOGRQ2mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Njk5Mg==", "bodyText": "Is this date format wanted here? Maybe it makes sense in this scenario but I think in general we wanted to go with dd-MM-yyyy HH:mm everywhere on the platform.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420066992", "createdAt": "2020-05-05T12:23:20Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "diffHunk": "@@ -0,0 +1,23 @@\n+<div *ngIf=\"notification\">\n+    <h2>\n+        <span jhiTranslate=\"artemisApp.systemNotification.systemNotification\">System notification</span> [<b>{{ notification.id }}</b\n+        >]\n+    </h2>\n+    <dl class=\"row-md jh-entity-details\">\n+        <dt><span jhiTranslate=\"global.field.id\">Id</span></dt>\n+        <dd>\n+            <span>{{ notification.id }}</span>\n+        </dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.title\">Title</span></dt>\n+        <dd>{{ notification.title }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.text\">Text</span></dt>\n+        <dd>{{ notification.text }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.type\">Type</span></dt>\n+        <dd>{{ notification.type }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.expireDate\">Expire Date</span></dt>\n+        <dd>{{ notification.expireDate | date: 'yyyy-MM-dd HH:mm' }}</dd>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1MzMzNA==", "bodyText": "I just took it from the existing implementation of notification-component.html. I will adjust it in both places.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420753334", "createdAt": "2020-05-06T12:32:33Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "diffHunk": "@@ -0,0 +1,23 @@\n+<div *ngIf=\"notification\">\n+    <h2>\n+        <span jhiTranslate=\"artemisApp.systemNotification.systemNotification\">System notification</span> [<b>{{ notification.id }}</b\n+        >]\n+    </h2>\n+    <dl class=\"row-md jh-entity-details\">\n+        <dt><span jhiTranslate=\"global.field.id\">Id</span></dt>\n+        <dd>\n+            <span>{{ notification.id }}</span>\n+        </dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.title\">Title</span></dt>\n+        <dd>{{ notification.title }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.text\">Text</span></dt>\n+        <dd>{{ notification.text }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.type\">Type</span></dt>\n+        <dd>{{ notification.type }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.expireDate\">Expire Date</span></dt>\n+        <dd>{{ notification.expireDate | date: 'yyyy-MM-dd HH:mm' }}</dd>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Njk5Mg=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NTA5Ng==", "bodyText": "I will use dd.MM.yyyy HH:mm as it seems to be the most common format in the code base.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420755096", "createdAt": "2020-05-06T12:35:35Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "diffHunk": "@@ -0,0 +1,23 @@\n+<div *ngIf=\"notification\">\n+    <h2>\n+        <span jhiTranslate=\"artemisApp.systemNotification.systemNotification\">System notification</span> [<b>{{ notification.id }}</b\n+        >]\n+    </h2>\n+    <dl class=\"row-md jh-entity-details\">\n+        <dt><span jhiTranslate=\"global.field.id\">Id</span></dt>\n+        <dd>\n+            <span>{{ notification.id }}</span>\n+        </dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.title\">Title</span></dt>\n+        <dd>{{ notification.title }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.text\">Text</span></dt>\n+        <dd>{{ notification.text }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.type\">Type</span></dt>\n+        <dd>{{ notification.type }}</dd>\n+        <dt><span jhiTranslate=\"artemisApp.systemNotification.expireDate\">Expire Date</span></dt>\n+        <dd>{{ notification.expireDate | date: 'yyyy-MM-dd HH:mm' }}</dd>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Njk5Mg=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkyMjAzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyNDozNFrOGQm5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjoxNjoxNFrOGRQKcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NzY4OA==", "bodyText": "The line break looks a bit odd.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420067688", "createdAt": "2020-05-05T12:24:34Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "diffHunk": "@@ -0,0 +1,23 @@\n+<div *ngIf=\"notification\">\n+    <h2>\n+        <span jhiTranslate=\"artemisApp.systemNotification.systemNotification\">System notification</span> [<b>{{ notification.id }}</b\n+        >]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0Mzc5Mw==", "bodyText": "Good catch! Prettier introduced that line break. I split it up in two lines.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420743793", "createdAt": "2020-05-06T12:16:14Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.html", "diffHunk": "@@ -0,0 +1,23 @@\n+<div *ngIf=\"notification\">\n+    <h2>\n+        <span jhiTranslate=\"artemisApp.systemNotification.systemNotification\">System notification</span> [<b>{{ notification.id }}</b\n+        >]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NzY4OA=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkzMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyNjo1NFrOGQm-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjoxODowMlrOGRQOVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2OTA5MQ==", "bodyText": "Should we switch Mgmt to Management? I think the overall codebase tends to favor verbosity over abbreviations.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420069091", "createdAt": "2020-05-05T12:26:54Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.ts", "diffHunk": "@@ -6,9 +6,9 @@ import { SystemNotificationService } from 'app/core/system-notification/system-n\n \n @Component({\n     selector: 'jhi-notification-mgmt-detail',\n-    templateUrl: './notification-management-detail.component.html',\n+    templateUrl: './system-notification-management-detail.component.html',\n })\n-export class NotificationMgmtDetailComponent implements OnInit, OnDestroy {\n+export class SystemNotificationMgmtDetailComponent implements OnInit, OnDestroy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NDc4OQ==", "bodyText": "I will change that :-)", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420744789", "createdAt": "2020-05-06T12:18:02Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management-detail.component.ts", "diffHunk": "@@ -6,9 +6,9 @@ import { SystemNotificationService } from 'app/core/system-notification/system-n\n \n @Component({\n     selector: 'jhi-notification-mgmt-detail',\n-    templateUrl: './notification-management-detail.component.html',\n+    templateUrl: './system-notification-management-detail.component.html',\n })\n-export class NotificationMgmtDetailComponent implements OnInit, OnDestroy {\n+export class SystemNotificationMgmtDetailComponent implements OnInit, OnDestroy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2OTA5MQ=="}, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDk0MjMyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/notification.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMDowMFrOGQnFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMDowMFrOGQnFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MDgyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"expireDate\": \"Expire Date\",\n          \n          \n            \n                        \"expireDate\": \"Expiration Date\",", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420070824", "createdAt": "2020-05-05T12:30:00Z", "author": {"login": "madwau"}, "path": "src/main/webapp/i18n/en/notification.json", "diffHunk": "@@ -0,0 +1,38 @@\n+{\n+    \"artemisApp\": {\n+        \"notification\": {\n+            \"notifications\": \"Notifications\",\n+            \"noNotifications\": \"No notifications available\",\n+            \"showAllNotifications\": \"Show all notifications\",\n+            \"title\": \"Title\",\n+            \"text\": \"Text\",\n+            \"notificationDate\": \"Notification Date\",\n+            \"target\": {\n+                \"newAnswer\": \"View answer\",\n+                \"newQuestion\": \"View question\",\n+                \"exerciseCreated\": \"View exercise\",\n+                \"exerciseUpdated\": \"View exercise\",\n+                \"attachmentUpdated\": \"View lecture\"\n+            }\n+        },\n+        \"systemNotification\": {\n+            \"systemNotification\": \"System notification\",\n+            \"systemNotifications\": \"System notifications\",\n+            \"title\": \"Title\",\n+            \"text\": \"Text\",\n+            \"type\": \"Type\",\n+            \"expireDate\": \"Expire Date\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b7bac18b1111525ed7c198c8cdbf61f3dbf57a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjA1NjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0MDoyMFrOGQyDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozMDowMFrOGRTB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MDQxMw==", "bodyText": "I am wondering whether this could be prevented entirely if instead of having the NotificationType Enum, you would add subclasses for each Type and use their constructors?\nMaybe a bit over the top. What does everyone think?", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420250413", "createdAt": "2020-05-05T16:40:20Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3Nzg0NQ==", "bodyText": "I'm actually planning that as a part of the upcoming outdated mechanism for the different notification types (e.g. newAnswerForExercise, exerciseUpdate, ...). But I think for now this is a little bit out of scope for this PR :-)", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420777845", "createdAt": "2020-05-06T13:11:48Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MDQxMw=="}, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MDc2Ng==", "bodyText": "Sure, just an idea.  :D", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420790766", "createdAt": "2020-05-06T13:30:00Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/GroupNotificationFactory.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package de.tum.in.www1.artemis.domain.notification;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+\n+public class GroupNotificationFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MDQxMw=="}, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjA2MTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/Notification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0MTozOFrOGQyGbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0MTozOFrOGQyGbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MTI0NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420251245", "createdAt": "2020-05-05T16:41:38Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/notification/Notification.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package de.tum.in.www1.artemis.domain;\n+package de.tum.in.www1.artemis.domain.notification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjA3NTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NToyOFrOGQyP4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzowMDo1OVrOGRR0YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzY2Ng==", "bodyText": "Maybe add a static import for GroupNotificationFactory.createNotification?", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420253666", "createdAt": "2020-05-05T16:45:28Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n+            return;\n+        }\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(attachment, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.ATTACHMENT_CHANGE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MDkxMg==", "bodyText": "Didn't know that this possibility exists in Java. I will add it :-)", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420770912", "createdAt": "2020-05-06T13:00:59Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GroupNotificationService.java", "diffHunk": "@@ -7,220 +7,145 @@\n \n import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.enumeration.GroupNotificationType;\n+import de.tum.in.www1.artemis.domain.enumeration.NotificationType;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n+import de.tum.in.www1.artemis.domain.notification.GroupNotificationFactory;\n import de.tum.in.www1.artemis.repository.GroupNotificationRepository;\n \n-// TODO: There is a lot of code duplication in this class. This could be solved by e.g. using a builder or factory pattern.\n @Service\n public class GroupNotificationService {\n \n-    private GroupNotificationRepository groupNotificationRepository;\n+    private final GroupNotificationRepository groupNotificationRepository;\n \n     private final SimpMessageSendingOperations messagingTemplate;\n \n-    private UserService userService;\n+    private final UserService userService;\n \n     public GroupNotificationService(GroupNotificationRepository groupNotificationRepository, SimpMessageSendingOperations messagingTemplate, UserService userService) {\n         this.groupNotificationRepository = groupNotificationRepository;\n         this.messagingTemplate = messagingTemplate;\n         this.userService = userService;\n     }\n \n-    private GroupNotification createExerciseCreatedGroupNotificationForTutors(Exercise exercise) {\n-        String title = \"Exercise created\";\n-        String notificationText = \"A new exercise \\\"\" + exercise.getTitle() + \"\\\" got created.\";\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.TA;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseCreatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForStudents(Exercise exercise, String title, String notificationText) {\n-        User user = userService.getUser();\n-        GroupNotificationType type = GroupNotificationType.STUDENT;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseUpdatedGroupNotificationForInstructors(Exercise exercise, String title, String notificationText) {\n-        GroupNotificationType type = GroupNotificationType.INSTRUCTOR;\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, null, type);\n-        groupNotification.setTarget(groupNotification.getExerciseUpdatedTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Exercise exercise = studentQuestion.getExercise();\n-        String title = \"New Question\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseQuestionTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureQuestionCreatedGroupNotification(StudentQuestion studentQuestion, GroupNotificationType type) {\n-        Lecture lecture = studentQuestion.getLecture();\n-        String title = \"New Question\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new question.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureQuestionTarget(lecture));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createExerciseAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Exercise exercise = studentQuestionAnswer.getQuestion().getExercise();\n-        String title = \"New Answer\";\n-        String notificationText = \"Exercise \\\"\" + exercise.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(exercise.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getExerciseAnswerTarget(exercise));\n-        return groupNotification;\n-    }\n-\n-    private GroupNotification createLectureAnswerCreatedGroupNotification(StudentQuestionAnswer studentQuestionAnswer, GroupNotificationType type) {\n-        Lecture lecture = studentQuestionAnswer.getQuestion().getLecture();\n-        String title = \"New Answer\";\n-        String notificationText = \"Lecture \\\"\" + lecture.getTitle() + \"\\\" got a new answer.\";\n-        User user = userService.getUser();\n-        GroupNotification groupNotification = new GroupNotification(lecture.getCourse(), title, notificationText, user, type);\n-        groupNotification.setTarget(groupNotification.getLectureAnswerTarget(lecture));\n-        return groupNotification;\n+    /**\n+     * Notify student groups about an attachment change.\n+     *\n+     * @param attachment that has been changed\n+     * @param notificationText that should be displayed  TODO: can be removed in the future as notification's text attribute is not used in the client\n+     */\n+    public void notifyStudentGroupAboutAttachmentChange(Attachment attachment, String notificationText) {\n+        // Do not send a notification before the release date of the attachment.\n+        if (attachment.getReleaseDate() != null && !attachment.getReleaseDate().isBefore(ZonedDateTime.now())) {\n+            return;\n+        }\n+        // Create and send the notification.\n+        saveAndSend(GroupNotificationFactory.createNotification(attachment, userService.getUser(), GroupNotificationType.STUDENT, NotificationType.ATTACHMENT_CHANGE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzY2Ng=="}, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjExNTYzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management.route.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo1Mjo1N1rOGQyobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoxOTowN1rOGRSjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1OTk1MA==", "bodyText": "Is there a particular reason why every route is it's own object here? I think usually we export an array.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420259950", "createdAt": "2020-05-05T16:52:57Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management.route.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import { Injectable } from '@angular/core';\n+import { ActivatedRouteSnapshot, Resolve, Route } from '@angular/router';\n+import { JhiResolvePagingParams } from 'ng-jhipster';\n+import { SystemNotificationMgmtUpdateComponent } from 'app/admin/system-notification-management/system-notification-management-update.component';\n+import { SystemNotification } from 'app/entities/system-notification.model';\n+import { SystemNotificationService } from 'app/core/system-notification/system-notification.service';\n+import { SystemNotificationMgmtComponent } from 'app/admin/system-notification-management/system-notification-management.component';\n+import { SystemNotificationMgmtDetailComponent } from 'app/admin/system-notification-management/system-notification-management-detail.component';\n+\n+@Injectable({ providedIn: 'root' })\n+export class SystemNotificationMgmtResolve implements Resolve<any> {\n+    constructor(private service: SystemNotificationService) {}\n+\n+    /**\n+     * Resolves the route and initializes system notification from id route param\n+     * @param route\n+     */\n+    resolve(route: ActivatedRouteSnapshot) {\n+        const id = route.params['id'] ? route.params['id'] : null;\n+        if (id) {\n+            return this.service.find(parseInt(id, 10));\n+        }\n+        return new SystemNotification();\n+    }\n+}\n+\n+export const systemNotificationMgmtRoutes1: Route = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4Mjg3NA==", "bodyText": "I have simply stuck to the previous implementation. I will adjust that.", "url": "https://github.com/ls1intum/Artemis/pull/1360#discussion_r420782874", "createdAt": "2020-05-06T13:19:07Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/admin/system-notification-management/system-notification-management.route.ts", "diffHunk": "@@ -0,0 +1,70 @@\n+import { Injectable } from '@angular/core';\n+import { ActivatedRouteSnapshot, Resolve, Route } from '@angular/router';\n+import { JhiResolvePagingParams } from 'ng-jhipster';\n+import { SystemNotificationMgmtUpdateComponent } from 'app/admin/system-notification-management/system-notification-management-update.component';\n+import { SystemNotification } from 'app/entities/system-notification.model';\n+import { SystemNotificationService } from 'app/core/system-notification/system-notification.service';\n+import { SystemNotificationMgmtComponent } from 'app/admin/system-notification-management/system-notification-management.component';\n+import { SystemNotificationMgmtDetailComponent } from 'app/admin/system-notification-management/system-notification-management-detail.component';\n+\n+@Injectable({ providedIn: 'root' })\n+export class SystemNotificationMgmtResolve implements Resolve<any> {\n+    constructor(private service: SystemNotificationService) {}\n+\n+    /**\n+     * Resolves the route and initializes system notification from id route param\n+     * @param route\n+     */\n+    resolve(route: ActivatedRouteSnapshot) {\n+        const id = route.params['id'] ? route.params['id'] : null;\n+        if (id) {\n+            return this.service.find(parseInt(id, 10));\n+        }\n+        return new SystemNotification();\n+    }\n+}\n+\n+export const systemNotificationMgmtRoutes1: Route = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1OTk1MA=="}, "originalCommit": {"oid": "19cb53c263d8735e7a9cb43527d872ae53987367"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 127, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}