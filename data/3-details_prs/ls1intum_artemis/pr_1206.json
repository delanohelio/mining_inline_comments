{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjA1NDcw", "number": 1206, "title": "Allow instructors to add results for external submissions", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I added multiple integration tests (Jest) related to the features\n Client: I added authorities to all new routes and check the course groups for displaying navigation elements (links, buttons)\n Client: I documented the TypeScript code using JSDoc style.\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\nThis PR addresses issue #1121. The use case is the following: Sometimes students submit their work off the Artemis platform, e.g. via email. Right now, it is not possible to feed these submissions into Artemis so that they can be assessed together with the regular submissions. This PR is the first step to solving this problem. It provides instructors with a way to create manual results for an exercise by providing the student login and the result details.\nIn the background, a participation is created (if it does not exist yet), an empty submission is created and a result is created according to the details that the instructor entered into the creation dialog. The dialog can be accessed by instructors from the exercise detail page via a button Add external submission. The aforementioned applies to all exercise types but Quiz exercises.\nDescription\n\nAdd new components external-submission-button and external-submission-dialog\nInsert new button Add External Submission onto the administrative detail pages of Programming, Modeling, Text, File Upload exercises\nAdd service external-submission-service that calls backend endpoint /exercises/{exerciseId}/external-submission-results to create a new participation, submission and result (with the student login as a query param and the result to be created as the request body)\nAdd new function createParticipationWithEmptySubmission to ParticipationService that creates a finished participation for the given student and exercise (or uses the existing participation) and then initialized a submission with the new submission type EXTERNAL and sets the status to submitted\nThe backend endpoint calls this function and then creates a result for the created submission. If a result already exists for the submission, no changes are performed and an alert \"A result already exists for this submission\" is displayed\n\nSteps for Testing\n\nLog in to Artemis\nNavigate to Course Administration\nClick on Exercises for a course\nClick on View for an exercise\nClick on the yelow button Add External Submission\nFill out the form and click Save\nCheck that a participation, submission and result were created correctly\n\nScreenshots", "createdAt": "2020-01-23T22:51:25Z", "url": "https://github.com/ls1intum/Artemis/pull/1206", "merged": true, "mergeCommit": {"oid": "2ee0b2e11ce3562a62f9e7821c3b9de1124b0eb9"}, "closed": true, "closedAt": "2020-01-27T21:23:35Z", "author": {"login": "madwau"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9PalDgH2gAyMzY2NjA1NDcwOjhjMjI4NDYwZTA4NWQxZDcyYzIyNjgxMmI3OWY4MDAwMWUyYjlhYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-ji7sAFqTM0ODk4NDE4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c228460e085d1d72c226812b79f80001e2b9ac1", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/8c228460e085d1d72c226812b79f80001e2b9ac1", "committedDate": "2020-01-23T19:21:55Z", "message": "External submission button and dialog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90cdca32729fbc6ac4af1d9dc81dcaf28a723945", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/90cdca32729fbc6ac4af1d9dc81dcaf28a723945", "committedDate": "2020-01-23T19:36:58Z", "message": "Add button to other exercise types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9d066a7f92ffd1259d0787fe8eb69a564096b9", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/dc9d066a7f92ffd1259d0787fe8eb69a564096b9", "committedDate": "2020-01-23T22:41:19Z", "message": "Backend logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24cc7e8612d11ef1f03e049868482bb2588cf994", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/24cc7e8612d11ef1f03e049868482bb2588cf994", "committedDate": "2020-01-23T22:51:42Z", "message": "Merge branch 'develop' into feature/emailed-participations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bbd88e13d3724c66bdeb8fc39a368c42d5e548a", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/8bbd88e13d3724c66bdeb8fc39a368c42d5e548a", "committedDate": "2020-01-23T22:56:43Z", "message": "Add missing import to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf73796f46cba6981605c30680814c179af7b45", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/fcf73796f46cba6981605c30680814c179af7b45", "committedDate": "2020-01-23T22:57:03Z", "message": "Merge branch 'develop' into feature/emailed-participations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fdf4092d83c9030018bdb281bac54ffefdb04d", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/34fdf4092d83c9030018bdb281bac54ffefdb04d", "committedDate": "2020-01-23T23:04:18Z", "message": "Add missing @param tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0314128dea6a27311e6c72dd72d80b2b8a853e7", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/f0314128dea6a27311e6c72dd72d80b2b8a853e7", "committedDate": "2020-01-23T23:13:14Z", "message": "Add missing providers to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "908a797562920a174bdd08f201cde16810252a21", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/908a797562920a174bdd08f201cde16810252a21", "committedDate": "2020-01-24T01:07:44Z", "message": "Finish up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/4c39cb4880c5d389739aab28f0badaa4e228c66b", "committedDate": "2020-01-24T01:30:31Z", "message": "Set submission date"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU2MjE4", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-347856218", "createdAt": "2020-01-24T10:12:43Z", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMjo0NFrOFhZHDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMjo0NFrOFhZHDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n          \n          \n            \n                        throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370558735", "createdAt": "2020-01-24T10:12:44Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU2NzU5", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-347856759", "createdAt": "2020-01-24T10:13:36Z", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMzozNlrOFhZI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMzozNlrOFhZI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTE5Mw==", "bodyText": "please add some comments here", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370559193", "createdAt": "2020-01-24T10:13:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU3NzM5", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-347857739", "createdAt": "2020-01-24T10:15:16Z", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNToxN1rOFhZLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNToxN1rOFhZLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTk0OA==", "bodyText": "please add JavaDoc.\nYou might want to rename this method and append IfNotExisting", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370559948", "createdAt": "2020-01-24T10:15:17Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,57 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    public StudentParticipation createParticipationWithEmptySubmission(Exercise exercise, User user, SubmissionType submissionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU4MTUw", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-347858150", "createdAt": "2020-01-24T10:15:59Z", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNTo1OVrOFhZNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNTo1OVrOFhZNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDM2Nw==", "bodyText": "JavaDoc missing", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370560367", "createdAt": "2020-01-24T10:15:59Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU5NDE3", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-347859417", "createdAt": "2020-01-24T10:18:18Z", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxODoxOFrOFhZRXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxODoxOFrOFhZRXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTM3NA==", "bodyText": "Can this case really happen that the latest submission is empty?", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370561374", "createdAt": "2020-01-24T10:18:18Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODYwNzE3", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-347860717", "createdAt": "2020-01-24T10:20:38Z", "commit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMDozOFrOFhZVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMDozOFrOFhZVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ==", "bodyText": "this is a good check, however you have already saved some additional data previously into the database, so this check might be too late. Maybe it would be a good idea to analyze the situation in the beginning of this method and only create and save additional objects in the database in case all prerequisites are fulfilled", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370562439", "createdAt": "2020-01-24T10:20:38Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,\n+                    \"Submission for \" + studentLogin + \" in exercise \" + exerciseId + \" was neither found nor could be created\");\n+        }\n+        result.setSubmission(optionalSubmission.get());\n+        Result existingResult = optionalSubmission.get().getResult();\n+        if (existingResult != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc163f172a566c6787dad780365336026ea046a8", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/bc163f172a566c6787dad780365336026ea046a8", "committedDate": "2020-01-24T10:33:52Z", "message": "Use course in error message\n\nCo-Authored-By: Stephan Krusche <krusche@in.tum.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f0c1a2571bff91fc56ffe76de5b73aee210daa", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/e8f0c1a2571bff91fc56ffe76de5b73aee210daa", "committedDate": "2020-01-26T15:12:43Z", "message": "Merge branch 'develop' into feature/emailed-participations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b6acec9e99164c25a976e43fdbea81723f0a5d6", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/0b6acec9e99164c25a976e43fdbea81723f0a5d6", "committedDate": "2020-01-26T16:16:12Z", "message": "Add JavaDoc, move existing result check up in sequence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/e9305967af3045e2f909c03ddddda91b278a85c0", "committedDate": "2020-01-26T16:20:49Z", "message": "throws tag in Doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NDE2NTE3", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-348416517", "createdAt": "2020-01-27T01:06:36Z", "commit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTowNjozN1rOFh2orw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTo1MTowNVrOFh23cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MjQ3OQ==", "bodyText": "Why do we need to do this in this case? The participation should already be connected to the exercise, if it was present in the DB", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371042479", "createdAt": "2020-01-27T01:06:37Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw==", "bodyText": "This is pretty much the same code as for startExercise. You could maybe extract some generic participation initialization method here.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371043037", "createdAt": "2020-01-27T01:14:41Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzgxMA==", "bodyText": "As far as I could see it, we never have the case that this is false and the exercise is a programming exercise. The method you created in line 324 only gets called if the exercise is not a programing exercise. Besides, because you created an overloaded method here, you hide the fact that the alternative in line 324 does not initialize programming submissions. I would suggest to just remove the overloaded variant. If a developer does not want to initialize a programming submission in this case, he should not call it at all.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371043810", "createdAt": "2020-01-27T01:24:22Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }\n+        participation = save(participation);\n+\n+        // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n+        if (optionalStudentParticipation.isEmpty() || !submissionRepository.existsByParticipationId(participation.getId())) {\n+            participation = (StudentParticipation) findOneWithEagerSubmissions(participation.getId());\n+            initializeSubmission(participation, exercise, true, submissionType);\n+            participation = save(participation);\n+        }\n+\n+        return participation;\n+    }\n+\n     /**\n      * Initializes a new text, modeling or file upload submission (depending on the type of the given exercise), connects it with the given participation and stores it in the\n      * database.\n      *\n-     * @param participation the participation for which the submission should be initialized\n-     * @param exercise      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param participation                 the participation for which the submission should be initialized\n+     * @param exercise                      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param allowProgrammingExercise      whether to explicitly allow the submission initialization for programming exercises", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDE4MQ==", "bodyText": "You can remove the if-check. This method creates a new submission with type=null anyway.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371044181", "createdAt": "2020-01-27T01:29:04Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -260,11 +308,23 @@ else if (exercise instanceof TextExercise) {\n             submission = new FileUploadSubmission();\n         }\n \n+        if (submissionType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {\n          \n          \n            \n                public Result createNewRatedManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371044578", "createdAt": "2020-01-27T01:33:20Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -313,6 +314,10 @@ public Result createNewManualResult(Result result, boolean isProgrammingExercise\n         return savedResult;\n     }\n \n+    public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTY1NQ==", "bodyText": "Please don't create barrel files. We had so many problems with them in the past, that we decided to refrain from using them for new code.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371045655", "createdAt": "2020-01-27T01:45:10Z", "author": {"login": "ungaralex"}, "path": "src/main/webapp/app/assessment-shared/external-submission/index.ts", "diffHunk": "@@ -0,0 +1,3 @@\n+export * from './external-submission-button.component';\n+export * from './external-submission.service';\n+export * from './external-submission-dialog.component';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTkzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                providers: [JhiAlertService, ExampleSubmissionService],\n          \n          \n            \n                providers: [JhiAlertService],\n          \n      \n    \n    \n  \n\nIf you specify providedIn: 'root' in your service, then Angular will take care of injecting it where needed. You should almost never specify services in modules, since this can break your app, because of problems like circular dependencies (We also had some really annoying problems because of that, just like with the barrel files).\nYou also prevent Angular from performing tree shaking, if you specify a service like this.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371045930", "createdAt": "2020-01-27T01:48:05Z", "author": {"login": "ungaralex"}, "path": "src/main/webapp/app/assessment-shared/assessment-shared.module.ts", "diffHunk": "@@ -22,8 +25,18 @@ import { AssessmentFiltersComponent } from 'app/assessment-shared/assessment-fil\n         ScoreDisplayComponent,\n         AssessmentDetailComponent,\n         AssessmentFiltersComponent,\n+        ExternalSubmissionButtonComponent,\n+        ExternalSubmissionDialogComponent,\n     ],\n-    exports: [AssessmentLayoutComponent, AssessmentGeneralFeedbackComponent, ScoreDisplayComponent, AssessmentDetailComponent, AssessmentFiltersComponent],\n-    providers: [JhiAlertService],\n+    entryComponents: [ExternalSubmissionDialogComponent],\n+    exports: [\n+        AssessmentLayoutComponent,\n+        AssessmentGeneralFeedbackComponent,\n+        ScoreDisplayComponent,\n+        AssessmentDetailComponent,\n+        AssessmentFiltersComponent,\n+        ExternalSubmissionButtonComponent,\n+    ],\n+    providers: [JhiAlertService, ExampleSubmissionService],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NjI1OQ==", "bodyText": "We should be consistent: \"Externe Submission\" or \"Externe Einreichung\"", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371046259", "createdAt": "2020-01-27T01:51:05Z", "author": {"login": "ungaralex"}, "path": "src/main/webapp/i18n/de/submission.json", "diffHunk": "@@ -21,7 +21,8 @@\n             \"result\": \"Ergebnis\",\n             \"participation\": \"Participation\",\n             \"lockedSubmissionsLimitReached\": \"Du hast die maximale Anzahl von unvollst\u00e4ndigen Bewertungen in diesem Kurs erreicht. Bitte beende deine offenen Bewertungen, bevor du eine neue beginnen kannst.\",\n-            \"resultTimeout\": \"Das Ergebnis zu deiner letzten Abgabe ist nicht verf\u00fcgbar. Bitte gebe deinen Code erneut ab.\"\n+            \"resultTimeout\": \"Das Ergebnis zu deiner letzten Abgabe ist nicht verf\u00fcgbar. Bitte gebe deinen Code erneut ab.\",\n+            \"createExternal\": \"Externe Submission erstellen\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8f456afef451a9f35109c9a710b39e33dc73c73", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/c8f456afef451a9f35109c9a710b39e33dc73c73", "committedDate": "2020-01-27T15:28:26Z", "message": "Merge branch 'develop' into feature/emailed-participations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Nzc4MTMy", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-348778132", "createdAt": "2020-01-27T16:02:19Z", "commit": {"oid": "c8f456afef451a9f35109c9a710b39e33dc73c73"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5322ca9d67df2bd1a2709cd69526a7e240577f7d", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/5322ca9d67df2bd1a2709cd69526a7e240577f7d", "committedDate": "2020-01-27T16:43:16Z", "message": "Merge branch 'develop' into feature/emailed-participations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9aff92c486cd8206e7efb29ab7d628740f5e821", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/c9aff92c486cd8206e7efb29ab7d628740f5e821", "committedDate": "2020-01-27T17:13:43Z", "message": "Set initialization state to FINISHED even for existing participation when creating a result for an external submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ead428192d7de251c67ce2b4cceaef9ce28b844", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/5ead428192d7de251c67ce2b4cceaef9ce28b844", "committedDate": "2020-01-27T17:55:22Z", "message": "Remove overloaded initializeSubmission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a1c15fd2011ab9aec98a0bfcb827e4aca04e192", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/2a1c15fd2011ab9aec98a0bfcb827e4aca04e192", "committedDate": "2020-01-27T18:05:13Z", "message": "Rename to createNewRatedManualResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9298261da0bfad1b0b5149b251fe193eebe74d29", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/9298261da0bfad1b0b5149b251fe193eebe74d29", "committedDate": "2020-01-27T18:10:59Z", "message": "Switch submission to Einreichung in German"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90fec545d6616a0641f5e22b1cb0c0abcb5bbf1", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/f90fec545d6616a0641f5e22b1cb0c0abcb5bbf1", "committedDate": "2020-01-27T18:14:31Z", "message": "Remove barrel file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a50435e423e64956c76429b4272e4581e8b1a5de", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/a50435e423e64956c76429b4272e4581e8b1a5de", "committedDate": "2020-01-27T18:17:20Z", "message": "Remove service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5960c580d521496e765669d0112620b036b08a", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/2b5960c580d521496e765669d0112620b036b08a", "committedDate": "2020-01-27T18:25:22Z", "message": "Fix user model import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3101c384d2e78f4e10052a848d6f7fd70daba42", "author": {"user": {"login": "madwau", "name": "Martin Wauligmann"}}, "url": "https://github.com/ls1intum/Artemis/commit/f3101c384d2e78f4e10052a848d6f7fd70daba42", "committedDate": "2020-01-27T18:47:11Z", "message": "Merge branch 'develop' into feature/emailed-participations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTg0MTg1", "url": "https://github.com/ls1intum/Artemis/pull/1206#pullrequestreview-348984185", "createdAt": "2020-01-27T21:23:04Z", "commit": {"oid": "f3101c384d2e78f4e10052a848d6f7fd70daba42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3134, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}