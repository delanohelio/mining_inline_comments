{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Njc1MDUy", "number": 1678, "title": "[Exam] Generate student exams", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I documented the TypeScript code using JSDoc style.\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\nWe need a first basic implementation of the generate student exams feature.\nDescription\n\n We've implemented a first basic version of the generate student exams algorithm\n We've added a corresponding Spring integration test for the generation of student exams\n We've implemented the algorithm in a way that it ensures that numberOfExercisesInExam is equal to the actual number of exercises added to all generated student exams\n We've implemented the client functionality to trigger the generation\n We've implemented the error handling in the client\n\nOn re-generation of student exams all existing student exams of the exam should be deleted. This could be done by making use of orphanRemoval. As this leads to A collection with cascade=\"all-delete-orphan\" was no longer referenced by the owning entity instance I've used deleteInBatch(). It ensures that the student exams of the exam and the relation with the exercises is removed from the database.\nSteps for Testing\nYou can test it on the test server and locally. To test the generation algorithm completely, you have to test locally and inspect the following database tables: student_exam, student_exam_exercise.\n\nLog in to Artemis\nGo to the exam overview of any course (e.g. https://artemistest.ase.in.tum.de/#/course-management/33/exams)\nCreate a new exam (we have some backward compatibility problems caused by other features)\nCreate multiple mandatory and optional exercise groups (see possible configuration below)\nRegister at least on user for the exam\nClick on Student exams in the overview\nClick on Generate student exams\nIf an error message appears solve it by adjusting the exam configuration. If no error message appears, check that you don't get an error on console and that student exams got created\nClick again on Generate student exams\nThe existing student exams should have been deleted and new ones should have been created (compare by ID)\n\nA valid configuration would be:\n\nnumberOfExercisesInExam = 5\nnumber of mandatory exercise groups: 3\nnumber of optional exercise groups: 5 (--> then one exercise from two of the optional exercise groups will be selected)\n\nScreenshots", "createdAt": "2020-06-18T17:54:23Z", "url": "https://github.com/ls1intum/Artemis/pull/1678", "merged": true, "mergeCommit": {"oid": "20da21ac0c33c3584151ef1b368224d02a7ee717"}, "closed": true, "closedAt": "2020-06-18T21:31:24Z", "author": {"login": "sascha11110"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcseNm_AH2gAyNDM2Njc1MDUyOmI4ZDgyOGE1ZDRmYTgyZjI0MTg0YzRlYmJiNDcxOWUyNDVlYjNiYzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcslIFWAFqTQzMzY1MTk3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b8d828a5d4fa82f24184c4ebbb4719e245eb3bc9", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b8d828a5d4fa82f24184c4ebbb4719e245eb3bc9", "committedDate": "2020-06-18T13:10:46Z", "message": "add REST call stub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8fb579a49d5673970c73728d9ffd3d0664f3aa0", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b8fb579a49d5673970c73728d9ffd3d0664f3aa0", "committedDate": "2020-06-18T13:37:17Z", "message": "first (simplified) verison of the random assignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2350bdcc66d71a4732206b61bab106b0a7e651", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ac2350bdcc66d71a4732206b61bab106b0a7e651", "committedDate": "2020-06-18T14:21:20Z", "message": "add test and fix errors in random generation algorithm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e541113e56444640f7e6798e79856973fec196a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9e541113e56444640f7e6798e79856973fec196a", "committedDate": "2020-06-18T14:25:08Z", "message": "move logic into service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39dda8372bc7027aa5f90bb4f09fa9514a3e7967", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/39dda8372bc7027aa5f90bb4f09fa9514a3e7967", "committedDate": "2020-06-18T14:29:46Z", "message": "fix cycles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14fd6149418731535e72b4674a7b0ff3f65e82ea", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/14fd6149418731535e72b4674a7b0ff3f65e82ea", "committedDate": "2020-06-18T15:18:30Z", "message": "Implement \"Generate student exams\" functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f991447ff3c513068e492e68871c9efab6c6f8be", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/f991447ff3c513068e492e68871c9efab6c6f8be", "committedDate": "2020-06-18T16:25:14Z", "message": "Show error messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f3ee048ecc67cc8825f09d54840cc55e5650df", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/98f3ee048ecc67cc8825f09d54840cc55e5650df", "committedDate": "2020-06-18T17:30:48Z", "message": "Delete existing student exams on re-generate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09abf20b9de59bc2ac44bdc6f997718a7aad29ab", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/09abf20b9de59bc2ac44bdc6f997718a7aad29ab", "committedDate": "2020-06-18T17:43:44Z", "message": "Fix that undefined is returned"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81e835acf7119debfe41c1c42f472cc86fc3b3a4", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/81e835acf7119debfe41c1c42f472cc86fc3b3a4", "committedDate": "2020-06-18T17:58:28Z", "message": "Check that all exercise groups have an exam"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29e112860a8e9c41c5a99aac503aa94e1e08cd49", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/29e112860a8e9c41c5a99aac503aa94e1e08cd49", "committedDate": "2020-06-18T19:05:00Z", "message": "Ensure that numberOfExercisesInExam is equal to the actual number of exercises added to all generated student exams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/280e53357491b0e859f51ef9f0392ee25314c385", "committedDate": "2020-06-18T19:09:42Z", "message": "Fix testDeleteExamThatDoesNotExist"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjE0MTM2", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433614136", "createdAt": "2020-06-18T20:14:01Z", "commit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjE5NTIz", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433619523", "createdAt": "2020-06-18T20:22:39Z", "commit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyMjozOVrOGl-7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyMjozOVrOGl-7Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MTQ2Ng==", "bodyText": "I like that you explicitly assign this, it helps with understanding what you are doing here. I would suggest to copy the whole array instead of just referencing it. This way no one will use a modified mandatoryIndices in the future.", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442481466", "createdAt": "2020-06-18T20:22:39Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,163 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        // Prepare indices of mandatory and optional exercise groups to preserve order of exercise groups\n+        List<Integer> indicesOfMandatoryExerciseGroups = new ArrayList<>();\n+        List<Integer> indicesOfOptionalExerciseGroups = new ArrayList<>();\n+        for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+            if (Boolean.TRUE.equals(exam.getExerciseGroups().get(i).getIsMandatory())) {\n+                indicesOfMandatoryExerciseGroups.add(i);\n+            }\n+            else {\n+                indicesOfOptionalExerciseGroups.add(i);\n+            }\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Check that there are not too much mandatory exercise groups\n+        if (numberOfOptionalExercises < 0) {\n+            throw new BadRequestAlertException(\"The number of mandatory exercise groups is too large\", \"Exam\", \"artemisApp.exam.validation.tooManyMandatoryExerciseGroups\");\n+        }\n+\n+        for (User registeredUser : exam.getRegisteredUsers()) {\n+            // Create one student exam per user\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.setExam(exam);\n+            studentExam.setUser(registeredUser);\n+\n+            // Select exercises from exercise groups randomly\n+            List<Integer> assembledIndices = assembleIndicesListWithRandomSelection(indicesOfMandatoryExerciseGroups, indicesOfOptionalExerciseGroups, numberOfOptionalExercises);\n+            for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+                if (assembledIndices.contains(i)) {\n+                    // we get one random exercise from all preselected exercise groups\n+                    studentExam.addExercise(selectRandomExercise(random, exam.getExerciseGroups().get(i)));\n+                }\n+            }\n+\n+            // Apply random exercise order\n+            if (Boolean.TRUE.equals(exam.getRandomizeExerciseOrder())) {\n+                Collections.shuffle(studentExam.getExercises());\n+            }\n+\n+            studentExams.add(studentExam);\n+        }\n+\n+        studentExams = studentExamRepository.saveAll(studentExams);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId      the id of the course\n+     * @param examId        the id of the exam\n+     * @param studentDtos   the list of students (with at least registration number) who should get access to the exam\n+     * @return the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    public List<StudentDTO> registerStudentsForExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        var course = courseService.findOne(courseId);\n+        var exam = findOneWithRegisteredUsers(examId);\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return notFoundStudentsDtos;\n+    }\n+\n+    private List<Integer> assembleIndicesListWithRandomSelection(List<Integer> mandatoryIndices, List<Integer> optionalIndices, Long numberOfOptionalExercises) {\n+        // Add all mandatory indices\n+        List<Integer> indices = mandatoryIndices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9", "committedDate": "2020-06-18T20:27:48Z", "message": "Improve code readability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjI0MjM2", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433624236", "createdAt": "2020-06-18T20:30:09Z", "commit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjMwMzg3", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433630387", "createdAt": "2020-06-18T20:39:49Z", "commit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozOTo1MFrOGl_bOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozOTo1MFrOGl_bOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4OTY1OQ==", "bodyText": "Do we really need this to be a long?", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442489659", "createdAt": "2020-06-18T20:39:50Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjMzNDQy", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433633442", "createdAt": "2020-06-18T20:44:49Z", "commit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NDo0OVrOGl_kYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NDo0OVrOGl_kYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MjAwMw==", "bodyText": "Please clarify why you sort the indices.", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442492003", "createdAt": "2020-06-18T20:44:49Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Check that there are not too much mandatory exercise groups\n+        if (numberOfOptionalExercises < 0) {\n+            throw new BadRequestAlertException(\"The number of mandatory exercise groups is too large\", \"Exam\", \"artemisApp.exam.validation.tooManyMandatoryExerciseGroups\");\n+        }\n+\n+        // Prepare indices of mandatory and optional exercise groups to preserve order of exercise groups\n+        List<Integer> indicesOfMandatoryExerciseGroups = new ArrayList<>();\n+        List<Integer> indicesOfOptionalExerciseGroups = new ArrayList<>();\n+        for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+            if (Boolean.TRUE.equals(exam.getExerciseGroups().get(i).getIsMandatory())) {\n+                indicesOfMandatoryExerciseGroups.add(i);\n+            }\n+            else {\n+                indicesOfOptionalExerciseGroups.add(i);\n+            }\n+        }\n+\n+        for (User registeredUser : exam.getRegisteredUsers()) {\n+            // Create one student exam per user\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.setExam(exam);\n+            studentExam.setUser(registeredUser);\n+\n+            // Add a random exercise for each exercise group if the index of the exercise group is in assembledIndices\n+            List<Integer> assembledIndices = assembleIndicesListWithRandomSelection(indicesOfMandatoryExerciseGroups, indicesOfOptionalExerciseGroups, numberOfOptionalExercises);\n+            for (Integer index : assembledIndices) {\n+                // we get one random exercise from all preselected exercise groups\n+                studentExam.addExercise(selectRandomExercise(random, exerciseGroups.get(index)));\n+            }\n+\n+            // Apply random exercise order\n+            if (Boolean.TRUE.equals(exam.getRandomizeExerciseOrder())) {\n+                Collections.shuffle(studentExam.getExercises());\n+            }\n+\n+            studentExams.add(studentExam);\n+        }\n+\n+        studentExams = studentExamRepository.saveAll(studentExams);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId      the id of the course\n+     * @param examId        the id of the exam\n+     * @param studentDtos   the list of students (with at least registration number) who should get access to the exam\n+     * @return the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    public List<StudentDTO> registerStudentsForExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        var course = courseService.findOne(courseId);\n+        var exam = findOneWithRegisteredUsers(examId);\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return notFoundStudentsDtos;\n+    }\n+\n+    private List<Integer> assembleIndicesListWithRandomSelection(List<Integer> mandatoryIndices, List<Integer> optionalIndices, Long numberOfOptionalExercises) {\n+        // Add all mandatory indices\n+        List<Integer> indices = new ArrayList<>(mandatoryIndices);\n+\n+        // Add as many optional indices as numberOfOptionalExercises\n+        if (numberOfOptionalExercises > 0) {\n+            Collections.shuffle(optionalIndices);\n+            indices = Stream.concat(indices.stream(), optionalIndices.stream().limit(numberOfOptionalExercises)).collect(Collectors.toList());\n+        }\n+\n+        // Sort the indices", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjMzNDcz", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433633473", "createdAt": "2020-06-18T20:44:52Z", "commit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92df128e2ff65a9b2309ae9d663ddd9a8be2b791", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/92df128e2ff65a9b2309ae9d663ddd9a8be2b791", "committedDate": "2020-06-18T20:46:15Z", "message": "Enhance comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc53e5211fd789bf12b09197549cbaab0d901c6d", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/dc53e5211fd789bf12b09197549cbaab0d901c6d", "committedDate": "2020-06-18T20:51:29Z", "message": "Merge branch 'develop' into feature/generate-student-exams"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjQwODEx", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433640811", "createdAt": "2020-06-18T20:56:08Z", "commit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjowOFrOGl_6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjowOFrOGl_6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzYyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"numberOfExercisesInExamNotSet\": \"The Anzahl an Aufgaben in der Klausur ist nicht gesetzt.\",\n          \n          \n            \n                            \"numberOfExercisesInExamNotSet\": \"Die Anzahl an Aufgaben in der Klausur ist nicht gesetzt.\",", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442497622", "createdAt": "2020-06-18T20:56:08Z", "author": {"login": "JonasPetry"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -14,9 +14,14 @@\n             \"endDate\": \"Ende\",\n             \"duration\": \"Dauer\",\n             \"nrOfStudents\": \"Anzahl der registrierten Studenten\",\n-\n             \"created\": \"Neue Klausur erstellt\",\n-            \"updated\": \"Klausur bearbeitet\"\n+            \"updated\": \"Klausur bearbeitet\",\n+            \"validation\": {\n+                \"atLeastOneExercisePerExerciseGroup\": \"Alle Aufgabengruppen m\u00fcssen mindestens eine Aufgabe haben.\",\n+                \"numberOfExercisesInExamNotSet\": \"The Anzahl an Aufgaben in der Klausur ist nicht gesetzt.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjQxMjc4", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433641278", "createdAt": "2020-06-18T20:56:53Z", "commit": {"oid": "dc53e5211fd789bf12b09197549cbaab0d901c6d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568448d97a26ebbfb069ec76a6f3da46aaa8edb9", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/568448d97a26ebbfb069ec76a6f3da46aaa8edb9", "committedDate": "2020-06-18T20:57:12Z", "message": "Update src/main/webapp/i18n/de/exam.json\n\nCo-authored-by: Jonas Petry <51994246+JonasPetry@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa5dcfac8a119720d909092c261b93980d8634c", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/4aa5dcfac8a119720d909092c261b93980d8634c", "committedDate": "2020-06-18T21:08:42Z", "message": "Merge branch 'develop' into feature/generate-student-exams"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjQ4OTU3", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433648957", "createdAt": "2020-06-18T21:08:58Z", "commit": {"oid": "4aa5dcfac8a119720d909092c261b93980d8634c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjQ5MzY1", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433649365", "createdAt": "2020-06-18T21:09:40Z", "commit": {"oid": "4aa5dcfac8a119720d909092c261b93980d8634c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjUxNjQ3", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433651647", "createdAt": "2020-06-18T21:13:30Z", "commit": {"oid": "4aa5dcfac8a119720d909092c261b93980d8634c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjUxOTc3", "url": "https://github.com/ls1intum/Artemis/pull/1678#pullrequestreview-433651977", "createdAt": "2020-06-18T21:14:04Z", "commit": {"oid": "568448d97a26ebbfb069ec76a6f3da46aaa8edb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2461, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}