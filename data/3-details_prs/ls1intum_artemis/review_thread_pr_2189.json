{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODM4NzU4", "number": 2189, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxNzo1MVrOEuGIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxNzo1MVrOEuGIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzcwMzE2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxNzo1MVrOHiSGWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODo1MTozNVrOHivHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxMDE3MQ==", "bodyText": "We usually have networking code in a service class. I'd argue that would also improve the structure here.", "url": "https://github.com/ls1intum/Artemis/pull/2189#discussion_r505710171", "createdAt": "2020-10-15T17:17:51Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.component.ts", "diffHunk": "@@ -13,35 +13,97 @@ import { ExportToCsv } from 'export-to-csv';\n     templateUrl: './plagiarism-inspector.component.html',\n })\n export class PlagiarismInspectorComponent implements OnInit {\n-    selectedComparisonIndex: number;\n-    plagiarismCheckInProgress: boolean;\n+    /**\n+     * The modeling exercise for which plagiarism is to be detected.\n+     */\n     modelingExercise: ModelingExercise;\n+\n+    /**\n+     * Results of the plagiarism detection.\n+     */\n     modelingSubmissionComparisons: Array<ModelingSubmissionComparisonDTO>;\n-    splitControlSubject: Subject<string> = new Subject<string>();\n \n-    private subscription: Subscription;\n+    /**\n+     * Flag to indicate whether the plagiarism detection is currently in progress.\n+     */\n+    plagiarismDetectionInProgress: boolean;\n+\n+    /**\n+     * Index of the currently selected plagiarism.\n+     */\n+    selectedPlagiarismIndex: number;\n+\n+    /**\n+     * Subject to be passed into PlagiarismSplitViewComponent to control the split view.\n+     */\n+    splitControlSubject: Subject<string> = new Subject<string>();\n \n     constructor(private route: ActivatedRoute, private router: Router, private modelingExerciseService: ModelingExerciseService) {}\n \n     ngOnInit() {\n-        this.subscription = this.route.params.subscribe((params) => {\n-            this.modelingExerciseService.find(params['exerciseId']).subscribe((response: HttpResponse<ModelingExercise>) => {\n-                this.modelingExercise = response.body!;\n-            });\n+        this.route.params.subscribe((params) => {\n+            this.fetchModelingExercise(params['exerciseId']);\n+        });\n+    }\n+\n+    /**\n+     * Fetch the modeling exercise with the given id.\n+     *\n+     * @param modelingExerciseId\n+     */\n+    fetchModelingExercise(modelingExerciseId: number) {\n+        this.modelingExerciseService.find(modelingExerciseId).subscribe((response: HttpResponse<ModelingExercise>) => {\n+            this.modelingExercise = response.body!;\n         });\n     }\n \n-    handleTagPlagiarism(confirmed: boolean) {\n-        this.modelingSubmissionComparisons[this.selectedComparisonIndex].confirmed = confirmed;\n+    /**\n+     * Handle the 'plagiarismStatusChange' event emitted by PlagiarismHeaderComponent.\n+     *\n+     * @param confirmed\n+     */\n+    handlePlagiarismStatusChange(confirmed: boolean) {\n+        this.modelingSubmissionComparisons[this.selectedPlagiarismIndex].confirmed = confirmed;\n+    }\n+\n+    /**\n+     * Handle the 'splitViewChange' event emitted by PlagiarismHeaderComponent.\n+     *\n+     * @param pane\n+     */\n+    handleSplitViewChange(pane: string) {\n+        this.splitControlSubject.next(pane);\n+    }\n+\n+    /**\n+     * Trigger the server-side plagiarism detection and fetch its result.\n+     */\n+    checkPlagiarism() {\n+        this.plagiarismDetectionInProgress = true;\n+\n+        this.modelingExerciseService.checkPlagiarism(this.modelingExercise.id!).subscribe(\n+            (response: HttpResponse<Array<ModelingSubmissionComparisonDTO>>) => {\n+                this.plagiarismDetectionInProgress = false;\n+                this.modelingSubmissionComparisons = response.body!.sort((c1, c2) => c2.similarity - c1.similarity);\n+            },\n+            () => (this.plagiarismDetectionInProgress = false),\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056183861958ee2eea181f57b6abfaada4bd6391"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4NTUwMQ==", "bodyText": "Mapped the response to its body attribute in modelingExerciseService.checkPlagiarism(...) now, so I can work with the comparison results in the component directly.", "url": "https://github.com/ls1intum/Artemis/pull/2189#discussion_r506185501", "createdAt": "2020-10-16T08:51:35Z", "author": {"login": "philippbauch"}, "path": "src/main/webapp/app/exercises/shared/plagiarism/plagiarism-inspector/plagiarism-inspector.component.ts", "diffHunk": "@@ -13,35 +13,97 @@ import { ExportToCsv } from 'export-to-csv';\n     templateUrl: './plagiarism-inspector.component.html',\n })\n export class PlagiarismInspectorComponent implements OnInit {\n-    selectedComparisonIndex: number;\n-    plagiarismCheckInProgress: boolean;\n+    /**\n+     * The modeling exercise for which plagiarism is to be detected.\n+     */\n     modelingExercise: ModelingExercise;\n+\n+    /**\n+     * Results of the plagiarism detection.\n+     */\n     modelingSubmissionComparisons: Array<ModelingSubmissionComparisonDTO>;\n-    splitControlSubject: Subject<string> = new Subject<string>();\n \n-    private subscription: Subscription;\n+    /**\n+     * Flag to indicate whether the plagiarism detection is currently in progress.\n+     */\n+    plagiarismDetectionInProgress: boolean;\n+\n+    /**\n+     * Index of the currently selected plagiarism.\n+     */\n+    selectedPlagiarismIndex: number;\n+\n+    /**\n+     * Subject to be passed into PlagiarismSplitViewComponent to control the split view.\n+     */\n+    splitControlSubject: Subject<string> = new Subject<string>();\n \n     constructor(private route: ActivatedRoute, private router: Router, private modelingExerciseService: ModelingExerciseService) {}\n \n     ngOnInit() {\n-        this.subscription = this.route.params.subscribe((params) => {\n-            this.modelingExerciseService.find(params['exerciseId']).subscribe((response: HttpResponse<ModelingExercise>) => {\n-                this.modelingExercise = response.body!;\n-            });\n+        this.route.params.subscribe((params) => {\n+            this.fetchModelingExercise(params['exerciseId']);\n+        });\n+    }\n+\n+    /**\n+     * Fetch the modeling exercise with the given id.\n+     *\n+     * @param modelingExerciseId\n+     */\n+    fetchModelingExercise(modelingExerciseId: number) {\n+        this.modelingExerciseService.find(modelingExerciseId).subscribe((response: HttpResponse<ModelingExercise>) => {\n+            this.modelingExercise = response.body!;\n         });\n     }\n \n-    handleTagPlagiarism(confirmed: boolean) {\n-        this.modelingSubmissionComparisons[this.selectedComparisonIndex].confirmed = confirmed;\n+    /**\n+     * Handle the 'plagiarismStatusChange' event emitted by PlagiarismHeaderComponent.\n+     *\n+     * @param confirmed\n+     */\n+    handlePlagiarismStatusChange(confirmed: boolean) {\n+        this.modelingSubmissionComparisons[this.selectedPlagiarismIndex].confirmed = confirmed;\n+    }\n+\n+    /**\n+     * Handle the 'splitViewChange' event emitted by PlagiarismHeaderComponent.\n+     *\n+     * @param pane\n+     */\n+    handleSplitViewChange(pane: string) {\n+        this.splitControlSubject.next(pane);\n+    }\n+\n+    /**\n+     * Trigger the server-side plagiarism detection and fetch its result.\n+     */\n+    checkPlagiarism() {\n+        this.plagiarismDetectionInProgress = true;\n+\n+        this.modelingExerciseService.checkPlagiarism(this.modelingExercise.id!).subscribe(\n+            (response: HttpResponse<Array<ModelingSubmissionComparisonDTO>>) => {\n+                this.plagiarismDetectionInProgress = false;\n+                this.modelingSubmissionComparisons = response.body!.sort((c1, c2) => c2.similarity - c1.similarity);\n+            },\n+            () => (this.plagiarismDetectionInProgress = false),\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxMDE3MQ=="}, "originalCommit": {"oid": "056183861958ee2eea181f57b6abfaada4bd6391"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4514, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}