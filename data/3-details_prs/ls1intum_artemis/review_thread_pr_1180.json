{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzM1NTQ3", "number": 1180, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNTowNzowMFrODXVZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNjo1NDo1N1rODXVoVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk0NDQ2OnYy", "diffSide": "LEFT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNTowNzowMFrOFcl8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNTowNzowMFrOFcl8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUyNjEzMQ==", "bodyText": "I think this auth check is not necessary since all users who do not have the user role ADMIN cannot access this endpoint (@PreAuthorize(\"hasAnyRole('ADMIN')\"))", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365526131", "createdAt": "2020-01-11T15:07:00Z", "author": {"login": "lovaiible"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java", "diffHunk": "@@ -211,10 +210,6 @@ public ModelingExerciseResource(ModelingExerciseRepository modelingExerciseRepos\n     @PreAuthorize(\"hasAnyRole('ADMIN')\")\n     public ResponseEntity<Void> getCompassStatisticForExercise(@PathVariable Long exerciseId) {\n         ModelingExercise modelingExercise = modelingExerciseService.findOne(exerciseId);\n-        if (!authCheckService.isAdmin()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk4MTcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNjo1MzowNFrOFcmPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMToxOTo0N1rOFcm9Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTAzOA==", "bodyText": "is this really necessary? I would like to avoid this, because this would mean all tests use the courseService as SypBean", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365531038", "createdAt": "2020-01-11T16:53:04Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationTest.java", "diffHunk": "@@ -42,4 +43,7 @@\n \n     @SpyBean\n     protected WebsocketMessagingService websocketMessagingService;\n+\n+    @SpyBean\n+    protected CourseService courseService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MjY5OA==", "bodyText": "@krusche Yes, you are right. I can add the SpyBean only to the ModelingExerciseIntegrationTest", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365542698", "createdAt": "2020-01-11T21:19:47Z", "author": {"login": "lovaiible"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationTest.java", "diffHunk": "@@ -42,4 +43,7 @@\n \n     @SpyBean\n     protected WebsocketMessagingService websocketMessagingService;\n+\n+    @SpyBean\n+    protected CourseService courseService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTAzOA=="}, "originalCommit": {"oid": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzk4MjMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ModelingExerciseIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxNjo1NDo1N1rOFcmP9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMToxODo1M1rOFcm9Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTEyNw==", "bodyText": "Is this mocking behavior really necessary? I would like to avoid something like this and rather insert the data correctly into the database before executing a certain REST Call", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365531127", "createdAt": "2020-01-11T16:54:57Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ModelingExerciseIntegrationTest.java", "diffHunk": "@@ -59,4 +70,74 @@ public void getCompassStatistic_asInstructor_Forbidden() throws Exception {\n     public void getCompassStatistic_asAdmin_Success() throws Exception {\n         request.getNullable(\"/api/exercises/\" + classExercise.getId() + \"/compass-statistic\", HttpStatus.OK, String.class);\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"user1\", roles = \"USER\")\n+    public void testGetModelingExercise_asStudent_Forbidden() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId(), HttpStatus.FORBIDDEN, ModelingExercise.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExercise_asTA() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId(), HttpStatus.OK, ModelingExercise.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExerciseForCourse_asTA() throws Exception {\n+        request.get(\"/api/courses/\" + classExercise.getCourse().getId() + \"/modeling-exercises\", HttpStatus.OK, List.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExerciseStatistics_asTA() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.OK, String.class);\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + 1 + \"/statistics\", HttpStatus.NOT_FOUND, String.class);\n+\n+        classExercise.setDiagramType(CommunicationDiagram);\n+        exerciseRepo.save(classExercise);\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.NOT_FOUND, String.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateModelingExercise_asInstructor() throws Exception {\n+        ModelingExercise modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId());\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.CREATED);\n+\n+        modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId(), 1L);\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.BAD_REQUEST);\n+\n+        modelingExercise = modelingExerciseUtilService.createModelingExercise(2L);\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.NOT_FOUND);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateModelingExercise_asInstructor() throws Exception {\n+        ModelingExercise modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId());\n+        ModelingExercise createdModelingExercise = request.putWithResponseBody(\"/api/modeling-exercises\", modelingExercise, ModelingExercise.class, HttpStatus.CREATED);\n+\n+        ModelingExercise modelingExerciseWithSubmission = modelingExerciseUtilService.addExampleSubmission(createdModelingExercise);\n+        ModelingExercise returnedModelingExercise = request.putWithResponseBody(\"/api/modeling-exercises\", modelingExerciseWithSubmission, ModelingExercise.class, HttpStatus.OK);\n+        assertThat(returnedModelingExercise.getExampleSubmissions().size()).isEqualTo(1);\n+\n+        when(courseService.findOne(classExercise.getCourse().getId())).thenReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MjY2Nw==", "bodyText": "@krusche  Yes, I added it because the ModelingExerciseResource checks if the course is null in the checkModelingExercise, even though courseService.findOne(modelingExercise.getCourse().getId()) throws an EntityNotFoundException if the course is null:\n\n  \n    \n      Artemis/src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java\n    \n    \n         Line 109\n      in\n      0919a20\n    \n    \n    \n    \n\n        \n          \n           if (course == null) {", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365542667", "createdAt": "2020-01-11T21:18:53Z", "author": {"login": "lovaiible"}, "path": "src/test/java/de/tum/in/www1/artemis/ModelingExerciseIntegrationTest.java", "diffHunk": "@@ -59,4 +70,74 @@ public void getCompassStatistic_asInstructor_Forbidden() throws Exception {\n     public void getCompassStatistic_asAdmin_Success() throws Exception {\n         request.getNullable(\"/api/exercises/\" + classExercise.getId() + \"/compass-statistic\", HttpStatus.OK, String.class);\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"user1\", roles = \"USER\")\n+    public void testGetModelingExercise_asStudent_Forbidden() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId(), HttpStatus.FORBIDDEN, ModelingExercise.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExercise_asTA() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId(), HttpStatus.OK, ModelingExercise.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExerciseForCourse_asTA() throws Exception {\n+        request.get(\"/api/courses/\" + classExercise.getCourse().getId() + \"/modeling-exercises\", HttpStatus.OK, List.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExerciseStatistics_asTA() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.OK, String.class);\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + 1 + \"/statistics\", HttpStatus.NOT_FOUND, String.class);\n+\n+        classExercise.setDiagramType(CommunicationDiagram);\n+        exerciseRepo.save(classExercise);\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.NOT_FOUND, String.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateModelingExercise_asInstructor() throws Exception {\n+        ModelingExercise modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId());\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.CREATED);\n+\n+        modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId(), 1L);\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.BAD_REQUEST);\n+\n+        modelingExercise = modelingExerciseUtilService.createModelingExercise(2L);\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.NOT_FOUND);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateModelingExercise_asInstructor() throws Exception {\n+        ModelingExercise modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId());\n+        ModelingExercise createdModelingExercise = request.putWithResponseBody(\"/api/modeling-exercises\", modelingExercise, ModelingExercise.class, HttpStatus.CREATED);\n+\n+        ModelingExercise modelingExerciseWithSubmission = modelingExerciseUtilService.addExampleSubmission(createdModelingExercise);\n+        ModelingExercise returnedModelingExercise = request.putWithResponseBody(\"/api/modeling-exercises\", modelingExerciseWithSubmission, ModelingExercise.class, HttpStatus.OK);\n+        assertThat(returnedModelingExercise.getExampleSubmissions().size()).isEqualTo(1);\n+\n+        when(courseService.findOne(classExercise.getCourse().getId())).thenReturn(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTEyNw=="}, "originalCommit": {"oid": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 181, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}