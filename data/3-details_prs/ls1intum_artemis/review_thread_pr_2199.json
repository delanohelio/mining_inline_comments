{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTM3NjIw", "number": 2199, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyNlrOEt8fAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MVrOEt8fmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyNlrOHiC1Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyNlrOHiC1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk3MA==", "bodyText": "Codacy found an issue: The instance method name 'createProgrammingExercise_programmingLanguage_validExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459970", "createdAt": "2020-10-15T11:15:26Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -137,14 +135,33 @@ public void tearDown() throws IOException {\n         studentTeamRepo.resetLocalRepo();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n+        exercise.setSequentialTestRuns(true);\n+        mockConnectorRequestsForSetup(exercise);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+\n     @ParameterizedTest\n     @EnumSource(ExerciseMode.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void createProgrammingExercise_validExercise_created(ExerciseMode mode) throws Exception {\n+    public void createProgrammingExercise_mode_validExercise_created(ExerciseMode mode) throws Exception {\n         exercise.setMode(mode);\n         mockConnectorRequestsForSetup(exercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_programmingLanguage_validExercise_created(ProgrammingLanguage language) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyN1rOHiC1Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyN1rOHiC1Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk3NA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459974", "createdAt": "2020-10-15T11:15:27Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOFrOHiC1FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOFrOHiC1FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk4OA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459988", "createdAt": "2020-10-15T11:15:28Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -222,16 +201,61 @@ public void triggerBuild(ProgrammingExerciseParticipation participation) throws\n \n     @Override\n     public boolean isBuildPlanEnabled(final String projectKey, final String planId) {\n-        final var headers = HeaderUtil.createAuthorization(bambooUser, bambooPassword);\n-        headers.setAccept(List.of(MediaType.APPLICATION_JSON));\n-        final var entity = new HttpEntity<>(null, headers);\n-        final var planInfo = restTemplate.exchange(bambooServerUrl + \"/rest/api/latest/plan/\" + planId, HttpMethod.GET, entity, Map.class, new HashMap<>()).getBody();\n-        return planInfo != null && planInfo.containsKey(\"enabled\") && ((boolean) planInfo.get(\"enabled\"));\n+        final var buildPlan = getBuildPlan(planId, false, true);\n+        return buildPlan != null && buildPlan.isEnabled();\n     }\n \n     @Override\n     public void deleteBuildPlan(String projectKey, String buildPlanId) {\n-        deletePlan(buildPlanId);\n+\n+        var buildPlan = getBuildPlan(buildPlanId, false, false);\n+        if (buildPlan == null) {\n+            log.error(\"Cannot delete \" + buildPlanId + \", because it does not exist!\");\n+            return;\n+        }\n+\n+        // NOTE: we cannot use official the REST API, e.g. restTemplate.delete(bambooServerUrl + \"/rest/api/latest/plan/\" + buildPlanId) here,\n+        // because then the build plan is not deleted directly and subsequent calls to create build plans with the same id might fail\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"selectedBuilds\", buildPlanId);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+\n+        String requestUrl = bambooServerUrl + \"/admin/deleteBuilds.action\";\n+        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParams(parameters);\n+        // TODO: in order to do error handling, we have to read the return value of this REST call\n+        var response = restTemplate.exchange(builder.build().toUri(), HttpMethod.POST, null, String.class);\n+    }\n+\n+    /**\n+     * NOTE: the REST call in this method fails silently with a 404 in case all build plans have already been deleted before\n+     * @param projectKey the project which build plans should be retrieved\n+     * @return a list of build plans\n+     */\n+    private List<BambooBuildPlanDTO> getBuildPlans(String projectKey) {\n+\n+        String requestUrl = bambooServerUrl + \"/rest/api/latest/project/\" + projectKey;\n+        // we use 5000 just in case of exercises with really really many students ;-)\n+        try {\n+            UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParam(\"expand\", \"plans\").queryParam(\"max-results\", 5000);\n+            var response = restTemplate.exchange(builder.build().toUri(), HttpMethod.GET, null, BambooProjectDTO.class);\n+\n+            if (response.getBody() != null && response.getBody().getPlans() != null) {\n+                return response.getBody().getPlans().getPlan();\n+            }\n+        }\n+        catch (HttpClientErrorException ex) {\n+            if (HttpStatus.NOT_FOUND.equals(ex.getStatusCode())) {\n+                // return an empty list silently (without log), because this is the typical case when deleting projects\n+                return List.of();\n+            }\n+            log.warn(ex.getMessage());\n+        }\n+        catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzczOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOVrOHiC1Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOVrOHiC1Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk5OA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459998", "createdAt": "2020-10-15T11:15:29Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {\n+        mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        // we only support one very specific case here\n+        parameters.add(\"repositoryTrigger\", repository);\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"triggerId\", \"-1\");\n+        parameters.add(\"createTriggerKey\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stashTrigger\");\n+        parameters.add(\"userDescription\", null);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/createChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n+    }\n \n-        return mockUpdatePlanRepository(exercise, username, bambooRepoName, bitbucketRepoName, List.of());\n+    public void mockDeleteTrigger(String buildPlanKey, Long id) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMVrOHiC1Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMVrOHiC1Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAxMA==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'ignored'.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460010", "createdAt": "2020-10-15T11:15:31Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "diffHunk": "@@ -109,23 +112,97 @@\n     @Autowired\n     protected BitbucketRequestMockProvider bitbucketRequestMockProvider;\n \n+    @Autowired\n+    protected DatabaseUtilService database;\n+\n+    @Autowired\n+    protected RequestUtilService request;\n+\n+    /**\n+     * used to mimic the caching behavior of BambooService\n+     */\n+    private final List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n+\n     @AfterEach\n     public void resetSpyBeans() {\n         Mockito.reset(ltiService, continuousIntegrationService, versionControlService, bambooServer, gitService, groupNotificationService, websocketMessagingService,\n                 plantUmlService, messagingTemplate, programmingSubmissionService, examAccessService, instanceMessageSendService, programmingExerciseScheduleService,\n                 programmingExerciseParticipationServiceSpy);\n     }\n \n-    protected List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws Exception {\n+    protected List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n         final var verifications = new LinkedList<Verifiable>();\n         bitbucketRequestMockProvider.mockCopyRepositoryForParticipation(exercise, username);\n         bitbucketRequestMockProvider.mockConfigureRepository(exercise, username, users);\n-        verifications.addAll(bambooRequestMockProvider.mockCopyBuildPlanForParticipation(exercise, username));\n-        verifications.addAll(bambooRequestMockProvider.mockUpdatePlanRepositoryForParticipation(exercise, username));\n+        bambooRequestMockProvider.mockCopyBuildPlanForParticipation(exercise, username);\n+        mockUpdatePlanRepositoryForParticipation(exercise, username);\n+        bambooRequestMockProvider.mockEnablePlan(exercise.getProjectKey(), username);\n         bitbucketRequestMockProvider.mockAddWebHooks(exercise);\n         return verifications;\n     }\n \n+    protected void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        final var projectKey = exercise.getProjectKey();\n+        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+\n+        mockUpdatePlanRepository(exercise, username, ASSIGNMENT_REPO_NAME, bitbucketRepoName, List.of());\n+    }\n+\n+    private Optional<ApplicationLinksDTO.ApplicationLinkDTO> findCachedLinkForUrl(String url) {\n+        return cachedApplicationLinks.stream().filter(link -> url.equalsIgnoreCase(link.getRpcUrl())).findFirst();\n+    }\n+\n+    private void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        final var projectKey = exercise.getProjectKey();\n+        final var buildPlanKey = (projectKey + \"-\" + planName).toUpperCase();\n+\n+        final var bambooRepositoryAssignment = new BambooRepositoryDTO(296200357L, ASSIGNMENT_REPO_NAME);\n+        final var bambooRepositoryTests = new BambooRepositoryDTO(296200356L, TEST_REPO_NAME);\n+        final var bitbucketRepository = new BitbucketRepositoryDTO(\"id\", bitbucketRepoName, projectKey, \"ssh:cloneUrl\");\n+\n+        bambooRequestMockProvider.mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        bitbucketRequestMockProvider.mockGetBitbucketRepository(exercise, bitbucketRepoName, bitbucketRepository);\n+\n+        var applicationLinksToBeReturned = bambooRequestMockProvider.createApplicationLink();\n+        // support caching for multiple tests (reusing the same continuousIntegrationUpdateService)\n+        var url = applicationLinksToBeReturned.getApplicationLinks().get(0).getRpcUrl();\n+        var applicationLink = continuousIntegrationUpdateService.findCachedLinkForUrl(url);\n+        if (applicationLink.isEmpty()) {\n+            // and also support caching for multiple calls in the same test (then continuousIntegrationUpdateService is not yet caching during the mock initialization)\n+            applicationLink = findCachedLinkForUrl(url);\n+\n+            if (applicationLink.isEmpty()) {\n+                // no cached application link is available\n+                bambooRequestMockProvider.mockGetApplicationLinks(applicationLinksToBeReturned);\n+                applicationLink = Optional.of(applicationLinksToBeReturned.getApplicationLinks().get(0));\n+                cachedApplicationLinks.add(applicationLink.get());\n+            }\n+        }\n+\n+        if (ASSIGNMENT_REPO_NAME.equals(bambooRepoName)) {\n+            bambooRequestMockProvider.mockUpdateRepository(buildPlanKey, bambooRepositoryAssignment, bitbucketRepository, applicationLink.get());\n+        }\n+        else {\n+            bambooRequestMockProvider.mockUpdateRepository(buildPlanKey, bambooRepositoryTests, bitbucketRepository, applicationLink.get());\n+        }\n+\n+        if (!triggeredBy.isEmpty()) {\n+            // in case there are triggers\n+            List<BambooTriggerDTO> triggerList = bambooRequestMockProvider.mockGetTriggerList(buildPlanKey);\n+\n+            for (var trigger : triggerList) {\n+                bambooRequestMockProvider.mockDeleteTrigger(buildPlanKey, trigger.getId());\n+            }\n+\n+            for (var ignored : triggeredBy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/BitbucketServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMlrOHiC1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMlrOHiC1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAxNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460017", "createdAt": "2020-10-15T11:15:32Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/BitbucketServiceTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+\n+public class BitbucketServiceTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        bitbucketRequestMockProvider.enableMockingOfRequests();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+        bitbucketRequestMockProvider.reset();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\")\n+    public void testHealthRunning() throws URISyntaxException, JsonProcessingException {\n+        bitbucketRequestMockProvider.mockHealth(\"RUNNING\", HttpStatus.OK);\n+        var health = versionControlService.health();\n+        assertThat(health.getAdditionalInfo().get(\"url\")).isEqualTo(bitbucketServerUrl);\n+        assertThat(health.isUp()).isEqualTo(true);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\")\n+    public void testHealthNotRunning() throws URISyntaxException, JsonProcessingException {\n+        bitbucketRequestMockProvider.mockHealth(\"PAUSED\", HttpStatus.OK);\n+        var health = versionControlService.health();\n+        assertThat(health.getAdditionalInfo().get(\"url\")).isEqualTo(bitbucketServerUrl);\n+        assertThat(health.isUp()).isEqualTo(false);\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozM1rOHiC1Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozM1rOHiC1Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAzMA==", "bodyText": "Codacy found an issue: Expected @param tag for 'buildLogs'.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460030", "createdAt": "2020-10-15T11:15:33Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -268,18 +288,16 @@ public void mockRetrieveEmptyArtifactPage() throws URISyntaxException, JsonProce\n      *\n      * @param planKey the build plan id\n      */\n-    public void mockFetchBuildLogs(String planKey) throws URISyntaxException, JsonProcessingException, MalformedURLException {\n-        var newDate = new Date().getTime();\n-        Map firstLogEntry = Map.of(\"log\", \"java.lang.AssertionError: BubbleSort does not sort correctly\", \"date\", newDate);\n-        Map response = Map.of(\"logEntries\", Map.of(\"logEntry\", List.of(firstLogEntry)));\n-        final var uri = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/result\").pathSegment(planKey.toUpperCase() + \"-JOB1\")\n+    public void mockGetBuildLogs(String planKey, List<BambooBuildResultDTO.BambooBuildLogEntryDTO> buildLogs) throws URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 372}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooTriggerDTO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNFrOHiC1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNFrOHiC1RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAzNg==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460036", "createdAt": "2020-10-15T11:15:34Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooTriggerDTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooTriggerDTO {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String description;\n+\n+    private boolean enabled = true;\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public BambooTriggerDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNVrOHiC1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNVrOHiC1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA0Nw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460047", "createdAt": "2020-10-15T11:15:35Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {\n+        mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        // we only support one very specific case here\n+        parameters.add(\"repositoryTrigger\", repository);\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"triggerId\", \"-1\");\n+        parameters.add(\"createTriggerKey\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stashTrigger\");\n+        parameters.add(\"userDescription\", null);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/createChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n+    }\n \n-        return mockUpdatePlanRepository(exercise, username, bambooRepoName, bitbucketRepoName, List.of());\n+    public void mockDeleteTrigger(String buildPlanKey, Long id) throws URISyntaxException {\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"triggerId\", Long.toString(id));\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"planKey\", buildPlanKey);\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/deleteChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n-        final var projectKey = exercise.getProjectKey();\n-        final var planKey = (projectKey + \"-\" + planName).toUpperCase();\n-        final var repositoryResponse = new RemoteRepository(null, 12345678L, \"testName\");\n-\n-        doReturn(repositoryResponse).when(repositoryHelper).getRemoteRepository(bambooRepoName, planKey, false);\n-        verifications.add(() -> verify(repositoryHelper, times(1)).getRemoteRepository(bambooRepoName, planKey, false));\n-\n-        doNothing().when(bambooBuildPlanUpdateProvider).updateRepository(any(), anyString(), anyString(), anyString());\n-\n-        if (!triggeredBy.isEmpty()) {\n-            // Bamboo specific format for the used CLI dependency. Nothing we can improve here\n-            final var oldTriggers = \"foo,123,artemis\\nbar,456,artemis\";\n-            doReturn(oldTriggers).when(triggerHelper).getTriggerList(anyString(), isNull(), isNull(), anyInt(), any());\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            verifications.add(() -> {\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            });\n-            for (final var repo : triggeredBy) {\n-                doReturn(\"foobar\").when(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n-                verifications.add(() -> verify(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false));\n-            }\n-        }\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNlrOHiC1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNlrOHiC1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA1Mw==", "bodyText": "Codacy found an issue: Avoid catching NullPointerException; consider removing the cause of the NPE.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460053", "createdAt": "2020-10-15T11:15:36Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -181,17 +171,8 @@ public void performEmptySetupCommit(ProgrammingExerciseParticipation participati\n                     }\n                 }\n             }\n-            catch (GitAPIException ex) {\n-                log.error(\"Git error while doing empty commit\", ex);\n-            }\n-            catch (IOException ex) {\n-                log.error(\"IOError while doing empty commit\", ex);\n-            }\n-            catch (InterruptedException ex) {\n-                log.error(\"InterruptedException while doing empty commit\", ex);\n-            }\n-            catch (NullPointerException ex) {\n-                log.error(\"NullPointerException while doing empty commit\", ex);\n+            catch (GitAPIException | IOException | InterruptedException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozN1rOHiC1YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozN1rOHiC1YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA2NA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460064", "createdAt": "2020-10-15T11:15:37Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {\n+        mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        // we only support one very specific case here\n+        parameters.add(\"repositoryTrigger\", repository);\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"triggerId\", \"-1\");\n+        parameters.add(\"createTriggerKey\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stashTrigger\");\n+        parameters.add(\"userDescription\", null);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/createChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n+    }\n \n-        return mockUpdatePlanRepository(exercise, username, bambooRepoName, bitbucketRepoName, List.of());\n+    public void mockDeleteTrigger(String buildPlanKey, Long id) throws URISyntaxException {\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"triggerId\", Long.toString(id));\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"planKey\", buildPlanKey);\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/deleteChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n-        final var projectKey = exercise.getProjectKey();\n-        final var planKey = (projectKey + \"-\" + planName).toUpperCase();\n-        final var repositoryResponse = new RemoteRepository(null, 12345678L, \"testName\");\n-\n-        doReturn(repositoryResponse).when(repositoryHelper).getRemoteRepository(bambooRepoName, planKey, false);\n-        verifications.add(() -> verify(repositoryHelper, times(1)).getRemoteRepository(bambooRepoName, planKey, false));\n-\n-        doNothing().when(bambooBuildPlanUpdateProvider).updateRepository(any(), anyString(), anyString(), anyString());\n-\n-        if (!triggeredBy.isEmpty()) {\n-            // Bamboo specific format for the used CLI dependency. Nothing we can improve here\n-            final var oldTriggers = \"foo,123,artemis\\nbar,456,artemis\";\n-            doReturn(oldTriggers).when(triggerHelper).getTriggerList(anyString(), isNull(), isNull(), anyInt(), any());\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            verifications.add(() -> {\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            });\n-            for (final var repo : triggeredBy) {\n-                doReturn(\"foobar\").when(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n-                verifications.add(() -> verify(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false));\n-            }\n-        }\n+    @NotNull\n+    public List<BambooTriggerDTO> mockGetTriggerList(String buildPlanKey) throws IOException, URISyntaxException {\n+        var triggerList = List.of(new BambooTriggerDTO(1L, \"foo\", \"artemis\"));\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"buildKey\", buildPlanKey);\n+        final var triggerListHtmlResponse = loadFileFromResources(\"test-data/bamboo-response/build-plan-trigger-list-response.html\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/editChainTriggers.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.OK).contentType(MediaType.TEXT_HTML).body(triggerListHtmlResponse));\n+        return triggerList;\n+    }\n \n-        return verifications;\n+    public void mockUpdateRepository(String buildPlanKey, BambooRepositoryDTO bambooRepository, BitbucketRepositoryDTO bitbucketRepository,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOFrOHiC1aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOFrOHiC1aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA3NQ==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'response'.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460075", "createdAt": "2020-10-15T11:15:38Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -222,16 +201,61 @@ public void triggerBuild(ProgrammingExerciseParticipation participation) throws\n \n     @Override\n     public boolean isBuildPlanEnabled(final String projectKey, final String planId) {\n-        final var headers = HeaderUtil.createAuthorization(bambooUser, bambooPassword);\n-        headers.setAccept(List.of(MediaType.APPLICATION_JSON));\n-        final var entity = new HttpEntity<>(null, headers);\n-        final var planInfo = restTemplate.exchange(bambooServerUrl + \"/rest/api/latest/plan/\" + planId, HttpMethod.GET, entity, Map.class, new HashMap<>()).getBody();\n-        return planInfo != null && planInfo.containsKey(\"enabled\") && ((boolean) planInfo.get(\"enabled\"));\n+        final var buildPlan = getBuildPlan(planId, false, true);\n+        return buildPlan != null && buildPlan.isEnabled();\n     }\n \n     @Override\n     public void deleteBuildPlan(String projectKey, String buildPlanId) {\n-        deletePlan(buildPlanId);\n+\n+        var buildPlan = getBuildPlan(buildPlanId, false, false);\n+        if (buildPlan == null) {\n+            log.error(\"Cannot delete \" + buildPlanId + \", because it does not exist!\");\n+            return;\n+        }\n+\n+        // NOTE: we cannot use official the REST API, e.g. restTemplate.delete(bambooServerUrl + \"/rest/api/latest/plan/\" + buildPlanId) here,\n+        // because then the build plan is not deleted directly and subsequent calls to create build plans with the same id might fail\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"selectedBuilds\", buildPlanId);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+\n+        String requestUrl = bambooServerUrl + \"/admin/deleteBuilds.action\";\n+        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParams(parameters);\n+        // TODO: in order to do error handling, we have to read the return value of this REST call\n+        var response = restTemplate.exchange(builder.build().toUri(), HttpMethod.POST, null, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOVrOHiC1eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOVrOHiC1eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA5MA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460090", "createdAt": "2020-10-15T11:15:39Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -1,106 +1,343 @@\n package de.tum.in.www1.artemis.service.connectors;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Profile;\n+import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-\n-import com.appfire.bamboo.cli.BambooClient;\n-import com.appfire.common.cli.CliClient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n import de.tum.in.www1.artemis.config.Constants;\n import de.tum.in.www1.artemis.exception.BambooException;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.ApplicationLinksDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooRepositoryDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooTriggerDTO;\n+import de.tum.in.www1.artemis.service.connectors.bitbucket.dto.BitbucketRepositoryDTO;\n \n @Service\n // Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n // this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL bambooServerUrl;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n     private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n \n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n-    private final BambooClient bambooClient;\n+    private final RestTemplate bambooRestTemplate;\n+\n+    private final RestTemplate bitbucketRestTemplate;\n \n-    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+    private List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n \n-    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n-        this.bambooClient = bambooClient;\n-        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    public BitbucketBambooUpdateService(@Qualifier(\"bambooRestTemplate\") RestTemplate bambooRestTemplate, @Qualifier(\"bitbucketRestTemplate\") RestTemplate bitbucketRestTemplate) {\n+        this.bambooRestTemplate = bambooRestTemplate;\n+        this.bitbucketRestTemplate = bitbucketRestTemplate;\n     }\n \n     @Override\n-    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n-            Optional<List<String>> triggeredBy) {\n+    public void updatePlanRepository(String bambooProject, String buildPlanKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> optionalTriggeredByRepositories) {\n         try {\n-            log.debug(\"Update plan repository for build plan \" + planKey);\n-            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n-            // Workaround for old exercises which used a different repositoryName\n-            if (bambooRemoteRepository == null) {\n-                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(OLD_ASSIGNMENT_REPO_NAME, planKey, false);\n-                if (bambooRemoteRepository == null) {\n-                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n-                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n-                }\n+            log.debug(\"Update plan repository for build plan \" + buildPlanKey);\n+            BambooRepositoryDTO bambooRepository = findBambooRepository(bambooRepositoryName, OLD_ASSIGNMENT_REPO_NAME, buildPlanKey);\n+            if (bambooRepository == null) {\n+                throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + buildPlanKey\n+                        + \" to the student repository : Could not find assignment nor Assignment repository\");\n             }\n \n-            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+            updateBambooPlanRepository(bambooRepository, bitbucketRepository, bitbucketProject, buildPlanKey);\n \n             // Overwrite triggers if needed, incl workaround for different repo names, triggered by is present means that the exercise (the BASE build plan) is imported from a\n             // previous exercise\n-            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n-                triggeredBy = Optional\n-                        .of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n+            if (optionalTriggeredByRepositories.isPresent() && bambooRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n+                optionalTriggeredByRepositories = Optional.of(optionalTriggeredByRepositories.get().stream()\n+                        .map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n             }\n-            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, repoTriggers));\n+            optionalTriggeredByRepositories.ifPresent(triggeredByRepositories -> overwriteTriggers(buildPlanKey, triggeredByRepositories));\n+\n+            log.info(\"Update plan repository for build plan \" + buildPlanKey + \" was successful\");\n+        }\n+        catch (Exception e) {\n+            throw new BambooException(\n+                    \"Something went wrong while updating the template repository of the build plan \" + buildPlanKey + \" to the student repository : \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Update the build plan repository using the cli plugin. This is e.g. invoked, when a student starts a programming exercise.\n+     * Then the build plan (which was cloned before) needs to be updated to work with the student repository\n+     *\n+     * @param bambooRepository the bamboo repository which was obtained before\n+     * @param bitbucketRepositoryName the name of the new bitbucket repository\n+     * @param bitbucketProjectKey the key of the corresponding bitbucket project\n+     * @param buildPlanKey the complete name of the plan\n+     */\n+    private void updateBambooPlanRepository(@Nonnull BambooRepositoryDTO bambooRepository, String bitbucketRepositoryName, String bitbucketProjectKey, String buildPlanKey) {\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"selectedRepository\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stash-rep\");\n+        // IMPORTANT: Don't change the name of the repo! We depend on the naming (assignment, tests) in some other parts of the application\n+        parameters.add(\"repositoryName\", bambooRepository.getName());\n+        parameters.add(\"repositoryId\", Long.toString(bambooRepository.getId()));\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"save\", \"Save repository\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"repository.stash.branch\", \"master\");\n+\n+        BitbucketRepositoryDTO bitbucketRepository = getBitbucketRepository(bitbucketProjectKey, bitbucketRepositoryName);\n+        parameters.add(\"repository.stash.repositoryId\", bitbucketRepository.getId());\n+        parameters.add(\"repository.stash.repositorySlug\", bitbucketRepository.getSlug());\n+        parameters.add(\"repository.stash.projectKey\", bitbucketRepository.getProject().getKey());\n+        parameters.add(\"repository.stash.repositoryUrl\", bitbucketRepository.getCloneSshUrl());\n+\n+        Optional<ApplicationLinksDTO.ApplicationLinkDTO> applicationLink = getApplicationLink(bitbucketServerUrl.toString());\n+        applicationLink.ifPresent(link -> parameters.add(\"repository.stash.server\", link.getId()));\n+\n+        try {\n+            String requestUrl = bambooServerUrl + \"/chain/admin/config/updateRepository.action\";\n+            UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParams(parameters);\n+            bambooRestTemplate.exchange(builder.build().toUri(), HttpMethod.POST, null, Void.class);\n+        }\n+        catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MFrOHiC1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MFrOHiC1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEwMg==", "bodyText": "Codacy found an issue: The instance method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460102", "createdAt": "2020-10-15T11:15:40Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -194,17 +211,22 @@ public void createProgrammingExerciseForExam_validExercise_created() throws Exce\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importExercise_created() throws Exception {\n+    public void importExercise_created(ProgrammingLanguage programmingLanguage) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MVrOHiC1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MVrOHiC1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDExNQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460115", "createdAt": "2020-10-15T11:15:41Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MlrOHiC1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MlrOHiC1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEyMg==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460122", "createdAt": "2020-10-15T11:15:42Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooBuildResultDTO {\n+\n+    BambooBuildLogEntriesDTO logEntries;\n+\n+    public BambooBuildLogEntriesDTO getLogEntries() {\n+        return logEntries;\n+    }\n+\n+    public void setLogEntries(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    public BambooBuildResultDTO() {\n+    }\n+\n+    public BambooBuildResultDTO(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static final class BambooBuildLogEntriesDTO {\n+\n+        List<BambooBuildLogEntryDTO> logEntry = new ArrayList<>();\n+\n+        public BambooBuildLogEntriesDTO() {\n+        }\n+\n+        public BambooBuildLogEntriesDTO(List<BambooBuildLogEntryDTO> logEntry) {\n+            this.logEntry = logEntry;\n+        }\n+\n+        public List<BambooBuildLogEntryDTO> getLogEntry() {\n+            return logEntry;\n+        }\n+\n+        public void setLogEntry(List<BambooBuildLogEntryDTO> logEntry) {\n+            this.logEntry = logEntry;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static final class BambooBuildLogEntryDTO {\n+\n+        @JsonDeserialize(using = UnixTimestampDeserializer.class)\n+        @JsonSerialize(using = UnixTimestampSerializer.class)\n+        private ZonedDateTime date;\n+\n+        private String log;\n+\n+        private String unstyledLog;\n+\n+        /**\n+         * needed for Jackson\n+         */\n+        public BambooBuildLogEntryDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0M1rOHiC1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0M1rOHiC1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEyOA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460128", "createdAt": "2020-10-15T11:15:43Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooBuildResultDTO {\n+\n+    BambooBuildLogEntriesDTO logEntries;\n+\n+    public BambooBuildLogEntriesDTO getLogEntries() {\n+        return logEntries;\n+    }\n+\n+    public void setLogEntries(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    public BambooBuildResultDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NFrOHiC1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NFrOHiC1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEzNA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460134", "createdAt": "2020-10-15T11:15:44Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooBuildResultDTO {\n+\n+    BambooBuildLogEntriesDTO logEntries;\n+\n+    public BambooBuildLogEntriesDTO getLogEntries() {\n+        return logEntries;\n+    }\n+\n+    public void setLogEntries(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    public BambooBuildResultDTO() {\n+    }\n+\n+    public BambooBuildResultDTO(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static final class BambooBuildLogEntriesDTO {\n+\n+        List<BambooBuildLogEntryDTO> logEntry = new ArrayList<>();\n+\n+        public BambooBuildLogEntriesDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NVrOHiC1sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NVrOHiC1sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE0NA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460144", "createdAt": "2020-10-15T11:15:45Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -181,17 +171,8 @@ public void performEmptySetupCommit(ProgrammingExerciseParticipation participati\n                     }\n                 }\n             }\n-            catch (GitAPIException ex) {\n-                log.error(\"Git error while doing empty commit\", ex);\n-            }\n-            catch (IOException ex) {\n-                log.error(\"IOError while doing empty commit\", ex);\n-            }\n-            catch (InterruptedException ex) {\n-                log.error(\"InterruptedException while doing empty commit\", ex);\n-            }\n-            catch (NullPointerException ex) {\n-                log.error(\"NullPointerException while doing empty commit\", ex);\n+            catch (GitAPIException | IOException | InterruptedException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NlrOHiC1uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NlrOHiC1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE1Mw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_sequential_validExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460153", "createdAt": "2020-10-15T11:15:46Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -137,14 +135,33 @@ public void tearDown() throws IOException {\n         studentTeamRepo.resetLocalRepo();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketRepositoryDTO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0N1rOHiC1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0N1rOHiC1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE2Mg==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460162", "createdAt": "2020-10-15T11:15:47Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketRepositoryDTO.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package de.tum.in.www1.artemis.service.connectors.bitbucket.dto;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BitbucketRepositoryDTO {\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private String slug;\n+\n+    private BitbucketProjectDTO project;\n+\n+    private String scmId;\n+\n+    private String state;\n+\n+    private String statusMessage;\n+\n+    private boolean forkable;\n+\n+    private LinksDTO links;\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketRepositoryDTO() {\n+    }\n+\n+    public BitbucketRepositoryDTO(String id, String slug, String projectKey, String cloneSshUrl) {\n+        this.id = id;\n+        this.slug = slug;\n+        this.project = new BitbucketProjectDTO(projectKey);\n+        this.links = new LinksDTO();\n+        this.links.clone.add(new LinksDTO.CloneDTO(cloneSshUrl, \"ssh\"));\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getSlug() {\n+        return slug;\n+    }\n+\n+    public void setSlug(String slug) {\n+        this.slug = slug;\n+    }\n+\n+    public BitbucketProjectDTO getProject() {\n+        return project;\n+    }\n+\n+    public void setProject(BitbucketProjectDTO project) {\n+        this.project = project;\n+    }\n+\n+    public String getScmId() {\n+        return scmId;\n+    }\n+\n+    public void setScmId(String scmId) {\n+        this.scmId = scmId;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getStatusMessage() {\n+        return statusMessage;\n+    }\n+\n+    public void setStatusMessage(String statusMessage) {\n+        this.statusMessage = statusMessage;\n+    }\n+\n+    public boolean forkable() {\n+        return forkable;\n+    }\n+\n+    public void setForkable(boolean forkable) {\n+        this.forkable = forkable;\n+    }\n+\n+    public LinksDTO getLinks() {\n+        return links;\n+    }\n+\n+    public void setLinks(LinksDTO links) {\n+        this.links = links;\n+    }\n+\n+    /**\n+     * helper method\n+     * @return the clone url stored in the link based on http href\n+     */\n+    public String getCloneUrl() {\n+        if (this.links == null) {\n+            return null;\n+        }\n+\n+        for (var clone : this.links.clone) {\n+            if (\"http\".equals(clone.getName())) {\n+                return clone.getHref();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * helper method\n+     * @return the clone url stored in the link based on ssh href\n+     */\n+    public String getCloneSshUrl() {\n+        if (this.links == null) {\n+            return null;\n+        }\n+\n+        for (var clone : this.links.clone) {\n+            if (\"ssh\".equals(clone.getName())) {\n+                return clone.getHref();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static class LinksDTO {\n+\n+        private List<CloneDTO> clone = new ArrayList<>();\n+\n+        private List<CloneDTO> self = new ArrayList<>();\n+\n+        public List<CloneDTO> getClone() {\n+            return clone;\n+        }\n+\n+        public void setClone(List<CloneDTO> clone) {\n+            this.clone = clone;\n+        }\n+\n+        public List<CloneDTO> getSelf() {\n+            return self;\n+        }\n+\n+        public void setSelf(List<CloneDTO> self) {\n+            this.self = self;\n+        }\n+\n+        public static class CloneDTO {\n+\n+            private String href;\n+\n+            private String name;\n+\n+            /**\n+             * empty constructor needed for Jackson\n+             */\n+            public CloneDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketProjectDTO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OFrOHiC1zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OFrOHiC1zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE3NQ==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460175", "createdAt": "2020-10-15T11:15:48Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketProjectDTO.java", "diffHunk": "@@ -5,13 +5,73 @@\n @JsonIgnoreProperties(ignoreUnknown = true)\n public class BitbucketProjectDTO {\n \n+    private String key;\n+\n     private String name;\n \n+    private String description;\n+\n+    private Long id;\n+\n+    private String url;\n+\n+    private String link;\n+\n+    public BitbucketProjectDTO(String key) {\n+        this.key = key;\n+    }\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketProjectDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OVrOHiC12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OVrOHiC12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE4NA==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'optionalTriggeredByRepositories'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460184", "createdAt": "2020-10-15T11:15:49Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -1,106 +1,343 @@\n package de.tum.in.www1.artemis.service.connectors;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Profile;\n+import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-\n-import com.appfire.bamboo.cli.BambooClient;\n-import com.appfire.common.cli.CliClient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n import de.tum.in.www1.artemis.config.Constants;\n import de.tum.in.www1.artemis.exception.BambooException;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.ApplicationLinksDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooRepositoryDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooTriggerDTO;\n+import de.tum.in.www1.artemis.service.connectors.bitbucket.dto.BitbucketRepositoryDTO;\n \n @Service\n // Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n // this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL bambooServerUrl;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n     private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n \n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n-    private final BambooClient bambooClient;\n+    private final RestTemplate bambooRestTemplate;\n+\n+    private final RestTemplate bitbucketRestTemplate;\n \n-    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+    private List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n \n-    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n-        this.bambooClient = bambooClient;\n-        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    public BitbucketBambooUpdateService(@Qualifier(\"bambooRestTemplate\") RestTemplate bambooRestTemplate, @Qualifier(\"bitbucketRestTemplate\") RestTemplate bitbucketRestTemplate) {\n+        this.bambooRestTemplate = bambooRestTemplate;\n+        this.bitbucketRestTemplate = bitbucketRestTemplate;\n     }\n \n     @Override\n-    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n-            Optional<List<String>> triggeredBy) {\n+    public void updatePlanRepository(String bambooProject, String buildPlanKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> optionalTriggeredByRepositories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MFrOHiC13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MFrOHiC13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE5MQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460191", "createdAt": "2020-10-15T11:15:50Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -1,106 +1,343 @@\n package de.tum.in.www1.artemis.service.connectors;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Profile;\n+import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-\n-import com.appfire.bamboo.cli.BambooClient;\n-import com.appfire.common.cli.CliClient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n import de.tum.in.www1.artemis.config.Constants;\n import de.tum.in.www1.artemis.exception.BambooException;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.ApplicationLinksDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooRepositoryDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooTriggerDTO;\n+import de.tum.in.www1.artemis.service.connectors.bitbucket.dto.BitbucketRepositoryDTO;\n \n @Service\n // Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n // this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL bambooServerUrl;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n     private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n \n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n-    private final BambooClient bambooClient;\n+    private final RestTemplate bambooRestTemplate;\n+\n+    private final RestTemplate bitbucketRestTemplate;\n \n-    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+    private List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n \n-    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n-        this.bambooClient = bambooClient;\n-        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    public BitbucketBambooUpdateService(@Qualifier(\"bambooRestTemplate\") RestTemplate bambooRestTemplate, @Qualifier(\"bitbucketRestTemplate\") RestTemplate bitbucketRestTemplate) {\n+        this.bambooRestTemplate = bambooRestTemplate;\n+        this.bitbucketRestTemplate = bitbucketRestTemplate;\n     }\n \n     @Override\n-    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n-            Optional<List<String>> triggeredBy) {\n+    public void updatePlanRepository(String bambooProject, String buildPlanKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> optionalTriggeredByRepositories) {\n         try {\n-            log.debug(\"Update plan repository for build plan \" + planKey);\n-            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n-            // Workaround for old exercises which used a different repositoryName\n-            if (bambooRemoteRepository == null) {\n-                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(OLD_ASSIGNMENT_REPO_NAME, planKey, false);\n-                if (bambooRemoteRepository == null) {\n-                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n-                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n-                }\n+            log.debug(\"Update plan repository for build plan \" + buildPlanKey);\n+            BambooRepositoryDTO bambooRepository = findBambooRepository(bambooRepositoryName, OLD_ASSIGNMENT_REPO_NAME, buildPlanKey);\n+            if (bambooRepository == null) {\n+                throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + buildPlanKey\n+                        + \" to the student repository : Could not find assignment nor Assignment repository\");\n             }\n \n-            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+            updateBambooPlanRepository(bambooRepository, bitbucketRepository, bitbucketProject, buildPlanKey);\n \n             // Overwrite triggers if needed, incl workaround for different repo names, triggered by is present means that the exercise (the BASE build plan) is imported from a\n             // previous exercise\n-            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n-                triggeredBy = Optional\n-                        .of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n+            if (optionalTriggeredByRepositories.isPresent() && bambooRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n+                optionalTriggeredByRepositories = Optional.of(optionalTriggeredByRepositories.get().stream()\n+                        .map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n             }\n-            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, repoTriggers));\n+            optionalTriggeredByRepositories.ifPresent(triggeredByRepositories -> overwriteTriggers(buildPlanKey, triggeredByRepositories));\n+\n+            log.info(\"Update plan repository for build plan \" + buildPlanKey + \" was successful\");\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyNTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MVrOHiC15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MVrOHiC15A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE5Ng==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460196", "createdAt": "2020-10-15T11:15:51Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -83,7 +76,7 @@ public void configureRepository(ProgrammingExercise exercise, URL repositoryUrl,\n         for (User user : users) {\n             String username = user.getLogin();\n \n-            if ((USER_PREFIX_EDX.isPresent() && username.startsWith(USER_PREFIX_EDX.get())) || (USER_PREFIX_U4I.isPresent() && username.startsWith((USER_PREFIX_U4I.get())))) {\n+            if ((userPrefixEdx.isPresent() && username.startsWith(userPrefixEdx.get())) || (userPrefixU4I.isPresent() && username.startsWith((userPrefixU4I.get())))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}