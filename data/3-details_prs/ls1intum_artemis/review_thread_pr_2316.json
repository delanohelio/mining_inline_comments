{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTQ1ODE1", "number": 2316, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowMjo0MlrOE5elsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMToxM1rOE5lwaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzA1NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgressBasedAchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowMjo0MlrOHz9xBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo0NzoyOVrOHz_bKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MTM5Nw==", "bodyText": "No sure if the strict equality would hold. Better check for the participation id instead.", "url": "https://github.com/ls1intum/Artemis/pull/2316#discussion_r524251397", "createdAt": "2020-11-16T13:02:42Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgressBasedAchievementService.java", "diffHunk": "@@ -21,12 +25,57 @@\n \n     private final static long EXERCISES_AMOUNT_BRONZE = 5L;\n \n+    private final static long EXERCISES_AMOUNT_UNRANKED = 1L;\n+\n     private final static long MIN_SCORE_TO_QUALIFY = 50L;\n \n-    public ProgressBasedAchievementService(AchievementRepository achievementRepository) {\n+    public ProgressBasedAchievementService(StudentParticipationRepository studentParticipationRepository, AchievementRepository achievementRepository) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n         this.achievementRepository = achievementRepository;\n     }\n \n+    /**\n+     * Checks whether a user earned progress based achievements\n+     * @param result the currently saved result\n+     * @param course the given course\n+     * @param user the given user\n+     * @param achievements all progress based achievements within the given course\n+     * @return the highest rank reached, returns null if no rank was reached\n+     */\n+    public AchievementRank checkForAchievement(Result result, Course course, User user, Set<Achievement> achievements) {\n+        if (!achievements.iterator().hasNext()) {\n+            return null;\n+        }\n+        var minScore = achievements.iterator().next().getMinScoreToQualify();\n+        var participations = studentParticipationRepository.findAllByCourseIdAndUserId(course.getId(), user.getId());\n+        var numberOfExercises = 0;\n+        if (result.getScore() != null && result.getScore() >= minScore) {\n+            numberOfExercises++;\n+        }\n+        for (var participation : participations) {\n+            var latestResult = participation.findLatestResult();\n+            if (latestResult == null || result.getParticipation() == participation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ee4450b30c58559fd460b99d613a099b16e700"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3ODU2OA==", "bodyText": "oh right, good point", "url": "https://github.com/ls1intum/Artemis/pull/2316#discussion_r524278568", "createdAt": "2020-11-16T13:47:29Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgressBasedAchievementService.java", "diffHunk": "@@ -21,12 +25,57 @@\n \n     private final static long EXERCISES_AMOUNT_BRONZE = 5L;\n \n+    private final static long EXERCISES_AMOUNT_UNRANKED = 1L;\n+\n     private final static long MIN_SCORE_TO_QUALIFY = 50L;\n \n-    public ProgressBasedAchievementService(AchievementRepository achievementRepository) {\n+    public ProgressBasedAchievementService(StudentParticipationRepository studentParticipationRepository, AchievementRepository achievementRepository) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n         this.achievementRepository = achievementRepository;\n     }\n \n+    /**\n+     * Checks whether a user earned progress based achievements\n+     * @param result the currently saved result\n+     * @param course the given course\n+     * @param user the given user\n+     * @param achievements all progress based achievements within the given course\n+     * @return the highest rank reached, returns null if no rank was reached\n+     */\n+    public AchievementRank checkForAchievement(Result result, Course course, User user, Set<Achievement> achievements) {\n+        if (!achievements.iterator().hasNext()) {\n+            return null;\n+        }\n+        var minScore = achievements.iterator().next().getMinScoreToQualify();\n+        var participations = studentParticipationRepository.findAllByCourseIdAndUserId(course.getId(), user.getId());\n+        var numberOfExercises = 0;\n+        if (result.getScore() != null && result.getScore() >= minScore) {\n+            numberOfExercises++;\n+        }\n+        for (var participation : participations) {\n+            var latestResult = participation.findLatestResult();\n+            if (latestResult == null || result.getParticipation() == participation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MTM5Nw=="}, "originalCommit": {"oid": "a8ee4450b30c58559fd460b99d613a099b16e700"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzA3NzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TimeBasedAchievementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowODo0OFrOHz9-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowODo0OFrOHz9-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NDg0OA==", "bodyText": "You can shorten this if you like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (submissionDay.minusDays(achievement.getSuccessCriteria()).isEqual(exerciseReleaseDay)\n          \n          \n            \n                                || submissionDay.minusDays(achievement.getSuccessCriteria()).isBefore(exerciseReleaseDay)) {\n          \n          \n            \n                        if (submissionDay.minusDays(achievement.getSuccessCriteria()+1).isBefore(exerciseReleaseDay)) {", "url": "https://github.com/ls1intum/Artemis/pull/2316#discussion_r524254848", "createdAt": "2020-11-16T13:08:48Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TimeBasedAchievementService.java", "diffHunk": "@@ -29,6 +32,38 @@ public TimeBasedAchievementService(AchievementRepository achievementRepository)\n         this.achievementRepository = achievementRepository;\n     }\n \n+    /**\n+     * Checks whether a user earned time based achievements\n+     * @param result the result which is checked if it earned any achievements\n+     * @param achievements all time based achievements within the given course\n+     * @return the highest rank reached by the result, returns null if no rank was reached\n+     */\n+    public AchievementRank checkForAchievement(Result result, Set<Achievement> achievements) {\n+        if (result.getScore() == null || !achievements.iterator().hasNext() || result.getScore() < achievements.iterator().next().getMinScoreToQualify()) {\n+            return null;\n+        }\n+        var submission = result.getSubmission();\n+        if (submission == null) {\n+            return null;\n+        }\n+\n+        var submissionDay = submission.getSubmissionDate().truncatedTo(DAYS);\n+        var exerciseReleaseDay = result.getParticipation().getExercise().getReleaseDate().truncatedTo(DAYS);\n+\n+        Set<AchievementRank> ranks = new HashSet<>();\n+\n+        for (Achievement achievement : achievements) {\n+            if (submissionDay.minusDays(achievement.getSuccessCriteria()).isEqual(exerciseReleaseDay)\n+                    || submissionDay.minusDays(achievement.getSuccessCriteria()).isBefore(exerciseReleaseDay)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ee4450b30c58559fd460b99d613a099b16e700"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzA5MDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/listeners/ResultListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxMjowM1rOHz-GOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxMjowM1rOHz-GOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NjgyNA==", "bodyText": "You can change this to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (result.getScore() != null && result.isRated() != null && result.isRated()) {\n          \n          \n            \n                            if (result.getScore() != null && Boolean.TRUE.equals(result.isRated())) {", "url": "https://github.com/ls1intum/Artemis/pull/2316#discussion_r524256824", "createdAt": "2020-11-16T13:12:03Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/listeners/ResultListener.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package de.tum.in.www1.artemis.service.listeners;\n+\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+\n+import org.springframework.beans.factory.ObjectFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.Assert;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+\n+@Configurable\n+public class ResultListener {\n+\n+    private @Nullable ObjectFactory<AchievementService> achievementService;\n+\n+    @Autowired\n+    public void setAchievementService(ObjectFactory<AchievementService> achievementService) {\n+        Assert.notNull(achievementService, \"AuditingHandler must not be null!\");\n+        this.achievementService = achievementService;\n+    }\n+\n+    /**\n+     * Checks if a user has earned an achievement by looking at the saved or updated result.\n+     * @param result\n+     */\n+    @PreUpdate\n+    @PrePersist\n+    public void checkForAchievements(Result result) {\n+        Assert.notNull(result, \"Entity must not be null!\");\n+\n+        if (achievementService != null) {\n+            if (achievementService.getObject() != null) {\n+                if (result.getScore() != null && result.isRated() != null && result.isRated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ee4450b30c58559fd460b99d613a099b16e700"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODIyODg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgressBasedAchievementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMToxM1rOH0I4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODoxMDo1MVrOH0LSYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AchievementRank checkForAchievement(Result result, Course course, User user, Set<Achievement> achievements) {\n          \n          \n            \n                public Optional<AchievementRank> getAchievementRank(Result result, Course course, User user, Set<Achievement> achievements) {\n          \n      \n    \n    \n  \n\nBy reading check in the method name, I would assume this method either returns a boolean or throws an exception if a check fails, so get might describe the purpose of this function a little better.\nAlso, since there are multiple conditions making this method return null, using an Optional in the method signature clearly indicates the returned AchievementRank might not exist.\nThe same applies to the checkForAchievement methods in the other [...]BasedAchievementServices.", "url": "https://github.com/ls1intum/Artemis/pull/2316#discussion_r524433435", "createdAt": "2020-11-16T17:11:13Z", "author": {"login": "philippbauch"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgressBasedAchievementService.java", "diffHunk": "@@ -21,12 +25,58 @@\n \n     private final static long EXERCISES_AMOUNT_BRONZE = 5L;\n \n+    private final static long EXERCISES_AMOUNT_UNRANKED = 1L;\n+\n     private final static long MIN_SCORE_TO_QUALIFY = 50L;\n \n-    public ProgressBasedAchievementService(AchievementRepository achievementRepository) {\n+    public ProgressBasedAchievementService(StudentParticipationRepository studentParticipationRepository, AchievementRepository achievementRepository) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n         this.achievementRepository = achievementRepository;\n     }\n \n+    /**\n+     * Checks whether a user earned progress based achievements by counting all participations\n+     * where the user scored at least as many points as defined in the achievement's minScoreToQualify property\n+     * @param result the currently saved result\n+     * @param course the given course\n+     * @param user the given user\n+     * @param achievements all progress based achievements within the given course\n+     * @return the highest rank reached, returns null if no rank was reached\n+     */\n+    public AchievementRank checkForAchievement(Result result, Course course, User user, Set<Achievement> achievements) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8485826b3a60d1f606932dac21c3e782531ccc7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ3MjkzMA==", "bodyText": "That makes perfect sense, thanks for the advice :)\nRefactored the functions accordingly.", "url": "https://github.com/ls1intum/Artemis/pull/2316#discussion_r524472930", "createdAt": "2020-11-16T18:10:51Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgressBasedAchievementService.java", "diffHunk": "@@ -21,12 +25,58 @@\n \n     private final static long EXERCISES_AMOUNT_BRONZE = 5L;\n \n+    private final static long EXERCISES_AMOUNT_UNRANKED = 1L;\n+\n     private final static long MIN_SCORE_TO_QUALIFY = 50L;\n \n-    public ProgressBasedAchievementService(AchievementRepository achievementRepository) {\n+    public ProgressBasedAchievementService(StudentParticipationRepository studentParticipationRepository, AchievementRepository achievementRepository) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n         this.achievementRepository = achievementRepository;\n     }\n \n+    /**\n+     * Checks whether a user earned progress based achievements by counting all participations\n+     * where the user scored at least as many points as defined in the achievement's minScoreToQualify property\n+     * @param result the currently saved result\n+     * @param course the given course\n+     * @param user the given user\n+     * @param achievements all progress based achievements within the given course\n+     * @return the highest rank reached, returns null if no rank was reached\n+     */\n+    public AchievementRank checkForAchievement(Result result, Course course, User user, Set<Achievement> achievements) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzQzNQ=="}, "originalCommit": {"oid": "c8485826b3a60d1f606932dac21c3e782531ccc7"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4402, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}