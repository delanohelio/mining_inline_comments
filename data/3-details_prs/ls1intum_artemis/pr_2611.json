{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NDI4MzQ2", "number": 2611, "title": "Add tests for exams-management.component.ts", "bodyText": "Checklist\n\n Client: I followed the coding and design guidelines.\n\nMotivation and Context\n\n\nImprove code coverage for the exams-management.component.ts component.\nDescription\n\nAdded client tests for exams-management.component.ts and exam-management.service.ts.\nTest Coverage\n\n\n\nexam-management.component.ts: 85.71%\nexam-management.service.ts: 80%", "createdAt": "2020-12-29T10:35:49Z", "url": "https://github.com/ls1intum/Artemis/pull/2611", "merged": true, "mergeCommit": {"oid": "954603a4700b87cb88369042a2c268cb1009ed71"}, "closed": true, "closedAt": "2021-01-04T12:50:13Z", "author": {"login": "ivanchimeno"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqkPURAH2gAyNTQ2NDI4MzQ2OmExNGJkNWY3MTJjZTg0OTcyOTVlMDIyOTFjMTQzMTRjN2FmNjUyOWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABds1yjEgFqTU2MTAwNTA2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a14bd5f712ce8497295e02291c14314c7af6529a", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/a14bd5f712ce8497295e02291c14314c7af6529a", "committedDate": "2020-12-28T11:15:22Z", "message": "add tests for exam-management.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c495ba8c65287099625d6c5d1604afbf87b353f3", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/c495ba8c65287099625d6c5d1604afbf87b353f3", "committedDate": "2020-12-29T10:34:06Z", "message": "add tests for exam-management.service.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/be220c952cbd7208df3d696129f4fe6f198f3018", "committedDate": "2020-12-29T10:34:21Z", "message": "remove unused query function from exam-management.service.ts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NDk0MDc4", "url": "https://github.com/ls1intum/Artemis/pull/2611#pullrequestreview-559494078", "createdAt": "2020-12-29T11:36:41Z", "commit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTozNjo0MVrOIMNVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1NzozN1rOIMNq4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MjM5NQ==", "bodyText": "Could you do me a favor and also add this code to the file. This would also reset all mocks after every test and is a good practice :)\n   afterEach(function () {\n        // completely restore all fakes created through the sandbox\n        sinon.restore();\n    });", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549672395", "createdAt": "2020-12-29T11:36:41Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -17,6 +17,7 @@ import { Exam } from 'app/entities/exam.model';\n import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n import { CourseManagementService } from 'app/course/manage/course-management.service';\n import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MjY1MA==", "bodyText": "Could you do me a favor and add this code to the test to reset all mocks, stub etc after every test.\nafterEach(function () {\n        sinon.restore();\n    });", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549672650", "createdAt": "2020-12-29T11:37:39Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ==", "bodyText": "Why did you mock this? It would be useful to test the real function here", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549676905", "createdAt": "2020-12-29T11:54:28Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "diffHunk": "@@ -0,0 +1,405 @@\n+import { TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Course } from 'app/entities/course.model';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { Exam } from 'app/entities/exam.model';\n+import * as chai from 'chai';\n+import * as moment from 'moment';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n+import { StudentDTO } from 'app/entities/student-dto.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\n+\n+const expect = chai.expect;\n+describe('Exam Management Service Tests', () => {\n+    let service: ExamManagementService;\n+    let httpMock: HttpTestingController;\n+\n+    const course = { id: 456 } as Course;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            providers: [ExamManagementService],\n+            imports: [ArtemisTestModule, HttpClientTestingModule],\n+        });\n+\n+        service = TestBed.inject(ExamManagementService);\n+        httpMock = TestBed.inject(HttpTestingController);\n+    });\n+\n+    afterEach(() => {\n+        httpMock.verify();\n+    });\n+\n+    it('should create an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.create(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should update an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.update(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'PUT', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find an exam with no students and no exercise groups', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.find(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}?withStudents=false&withExerciseGroups=false` });\n+        expect(req.request.url).to.equal(`${service.resourceUrl}/${course.id!}/exams/${mockExam.id}`);\n+        expect(req.request.params.get('withStudents')).to.be.false;\n+        expect(req.request.params.get('withExerciseGroups')).to.be.false;\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should get exam scores', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExamScore: ExamScoreDTO = { examId: mockExam.id!, title: '', averagePointsAchieved: 1, exerciseGroups: [], maxPoints: 1, studentResults: [] };\n+\n+        // WHEN\n+        service.getExamScores(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExamScore));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/scores` });\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find all exams for course', () => {\n+        // WHEN\n+        service.findAllExamsForCourse(course.id!).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams` });\n+    });\n+\n+    it('should find all current and upcoming exams', () => {\n+        // WHEN\n+        service.findAllCurrentAndUpcomingExams().subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/upcoming-exams` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=false', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, false).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-dashboard` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=true', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, true).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-test-run-dashboard` });\n+    });\n+\n+    it('should get latest individual end date of exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockResponse: ExamInformationDTO = { latestIndividualEndDate: moment() };\n+\n+        // WHEN\n+        service.getLatestIndividualEndDateOfExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockResponse));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/latest-end-date` });\n+    });\n+\n+    it('should delete an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.delete(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'DELETE', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}` });\n+    });\n+\n+    it('should add student to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.addStudentToExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}` });\n+    });\n+\n+    it('should add students to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudents: StudentDTO[] = [\n+            { firstName: 'firstName1', lastName: 'lastName1', registrationNumber: '1' },\n+            { firstName: 'firstName2', lastName: 'lastName2', registrationNumber: '2' },\n+        ];\n+\n+        // WHEN\n+        service.addStudentsToExam(course.id!, mockExam.id!, mockStudents).subscribe((res) => expect(res.body).to.eq(mockStudents));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students` });\n+        expect(req.request.body).to.eq(mockStudents);\n+\n+        // CLEAN\n+        req.flush(mockStudents);\n+    });\n+\n+    it('should remove student from exam with no participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=false`,\n+        });\n+\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should remove student from exam with participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should generate student exams', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam }];\n+\n+        // WHEN\n+        service.generateStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/generate-student-exams`,\n+        });\n+    });\n+\n+    it('should create test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam };\n+\n+        // WHEN\n+        service.createTestRun(course.id!, mockExam.id!, mockStudentExam).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/test-run`,\n+        });\n+    });\n+\n+    it('should delete test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam, id: 2 };\n+\n+        // WHEN\n+        service.deleteTestRun(course.id!, mockExam.id!, mockStudentExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-run/${mockStudentExam.id}`,\n+        });\n+    });\n+\n+    it('should find all test runs for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.findAllTestRunsForExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'GET',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-runs`,\n+        });\n+    });\n+\n+    it('should generate missing student for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.generateMissingStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/generate-missing-student-exams`,\n+        });\n+    });\n+\n+    it('should start exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.startExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockStudentExams.length));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/start-exercises`,\n+        });\n+    });\n+\n+    it('should evaluate quiz exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockEvaluatedExercises = 1;\n+\n+        // WHEN\n+        service.evaluateQuizExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockEvaluatedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/evaluate-quiz-exercises`,\n+        });\n+    });\n+\n+    it('should assess unsubmitted exam modelling and text participations', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockUnsubmittedExercises = 1;\n+\n+        // WHEN\n+        service.assessUnsubmittedExamModelingAndTextParticipations(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockUnsubmittedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/assess-unsubmitted-and-empty-student-exams`,\n+        });\n+    });\n+\n+    it('should unlock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.unlockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/unlock-all-repositories`,\n+        });\n+    });\n+\n+    it('should lock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.lockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/lock-all-repositories`,\n+        });\n+    });\n+\n+    it('should update order', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExerciseGroups: ExerciseGroup[] = [{ exam: mockExam, id: 1 }];\n+\n+        // WHEN\n+        service.updateOrder(course.id!, mockExam.id!, mockExerciseGroups).subscribe((res) => expect(res.body).to.equal(mockExerciseGroups));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'PUT',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/exerciseGroupsOrder`,\n+        });\n+    });\n+});\n+\n+function mockConvertDateFromClient(exam: Exam): Exam {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NzQ0NA==", "bodyText": "I do not understand this test case? What do you mean by has information of other exams", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549677444", "createdAt": "2020-12-29T11:56:19Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {\n+        // GIVEN\n+        comp.examIdToExamInformation = new Map<number, ExamInformationDTO>();\n+\n+        // WHEN\n+        const examHasFinished = comp.examHasFinished(exam.id!);\n+\n+        // THEN\n+        expect(examHasFinished).to.be.true;\n+    });\n+\n+    it('Should return true for examHasFinished when component has information of other exams', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg==", "bodyText": "The tests are valid but I am questioning their usefulness somehow. This is a very simple method:\n    examHasFinished(examId: number): boolean {\n        if (this.examIdToExamInformation.has(examId)) {\n            return this.examIdToExamInformation.get(examId)!.latestIndividualEndDate.isBefore(moment());\n        }\n        return true;\n    }\n\nWriting that many test cases for it seems excessive. What do other reviewers say? @krusche", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549677792", "createdAt": "2020-12-29T11:57:37Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTAyMTU2", "url": "https://github.com/ls1intum/Artemis/pull/2611#pullrequestreview-559502156", "createdAt": "2020-12-29T12:02:53Z", "commit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245eeef8344a0da6abf2bff1948ad1604bb5497d", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/245eeef8344a0da6abf2bff1948ad1604bb5497d", "committedDate": "2020-12-29T14:32:05Z", "message": "add afterEach in exam-management.component.spec.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38c462828d119b650097a10e8c874dd3c7ae7a2b", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/38c462828d119b650097a10e8c874dd3c7ae7a2b", "committedDate": "2020-12-30T22:17:36Z", "message": "Merge branch 'develop' into chore/test/exam-management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350bd714a2f6f03e114949572a54ad01e054a00f", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/350bd714a2f6f03e114949572a54ad01e054a00f", "committedDate": "2021-01-03T22:54:56Z", "message": "Merge branch 'develop' into chore/test/exam-management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194ca1b0ed8079b6980c56adcfcab8bb353516b8", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/194ca1b0ed8079b6980c56adcfcab8bb353516b8", "committedDate": "2021-01-04T00:04:59Z", "message": "Merge branch 'develop' into chore/test/exam-management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d810213fb12316a32e27c5be99ac0826ab197d", "author": {"user": {"login": "ivanchimeno", "name": "Ivan Chimeno"}}, "url": "https://github.com/ls1intum/Artemis/commit/b7d810213fb12316a32e27c5be99ac0826ab197d", "committedDate": "2021-01-04T09:44:54Z", "message": "remove mockConvertDateFromClient and use real function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwOTUzMTk4", "url": "https://github.com/ls1intum/Artemis/pull/2611#pullrequestreview-560953198", "createdAt": "2021-01-04T11:16:56Z", "commit": {"oid": "b7d810213fb12316a32e27c5be99ac0826ab197d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwOTY5NTQ1", "url": "https://github.com/ls1intum/Artemis/pull/2611#pullrequestreview-560969545", "createdAt": "2021-01-04T11:46:13Z", "commit": {"oid": "b7d810213fb12316a32e27c5be99ac0826ab197d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMDA1MDY1", "url": "https://github.com/ls1intum/Artemis/pull/2611#pullrequestreview-561005065", "createdAt": "2021-01-04T12:50:05Z", "commit": {"oid": "b7d810213fb12316a32e27c5be99ac0826ab197d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3284, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}