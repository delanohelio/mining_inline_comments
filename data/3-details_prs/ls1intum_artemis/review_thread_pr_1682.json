{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODAxMTAy", "number": 1682, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0NTo1NFrOEHBj_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1MjoyMFrOEIy-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxMDg0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/student-exam.model.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0NTo1NFrOGmLaag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0NTo1NFrOGmLaag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NjA1OA==", "bodyText": "The StudentExam does not have participations. I would rather navigate over the exercises", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442686058", "createdAt": "2020-06-19T07:45:54Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/student-exam.model.ts", "diffHunk": "@@ -2,10 +2,12 @@ import { User } from 'app/core/user/user.model';\n import { Exam } from 'app/entities/exam.model';\n import { Exercise } from 'app/entities/exercise.model';\n import { BaseEntity } from 'app/shared/model/base-entity';\n+import { Participation } from 'app/entities/participation/participation.model';\n \n export class StudentExam implements BaseEntity {\n     public id: number;\n     public student: User;\n     public exam: Exam;\n     public exercises: Exercise[];\n+    public participations: Participation[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxNDgwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0Njo1OFrOGmLcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1NDowMFrOGmVrBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NjYyMQ==", "bodyText": "I think we should not store the submissions separately. They are already part of studentExam.exercises.participations.submissions", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442686621", "createdAt": "2020-06-19T07:46:58Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1NDE1MA==", "bodyText": "Those are the submissions that we synchronize back to the server. I am reusing the submissionServices from other components -> they will be synchronized synchronized separately. But you are right it is not good to keep multiple references to the same object, because some may become outdated, I will look for another way (maybe a list of submissionIds)", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442854150", "createdAt": "2020-06-19T13:54:00Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NjYyMQ=="}, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxNzIzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0Nzo0NVrOGmLeDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0Nzo0NVrOGmLeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4Njk5MA==", "bodyText": "do not invoke create (POST) here, we should invoke update (PUT)", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442686990", "createdAt": "2020-06-19T07:47:45Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxODIxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODowNFrOGmLepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODowNFrOGmLepg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzE0Mg==", "bodyText": "do not invoke create (POST) here, we should invoke update (PUT)", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442687142", "createdAt": "2020-06-19T07:48:04Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;\n+                case ExerciseType.MODELING:\n+                    this.modelingSubmissionService.create(submission as ModelingSubmission, submission.participation.exercise.id).subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxODU0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODoxMlrOGmLe5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODoxMlrOGmLe5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzIwNA==", "bodyText": "do not invoke create (POST) here, we should invoke update (PUT)", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442687204", "createdAt": "2020-06-19T07:48:12Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;\n+                case ExerciseType.MODELING:\n+                    this.modelingSubmissionService.create(submission as ModelingSubmission, submission.participation.exercise.id).subscribe(\n+                        (response) => {\n+                            submission = response.body!;\n+                            submission.participation.submissions = [submission];\n+                            this.onSaveSuccess();\n+                        },\n+                        () => this.onSaveError(),\n+                    );\n+                    break;\n+                case ExerciseType.PROGRAMMING:\n+                    return this.programmingSubmissionService;\n+                case ExerciseType.QUIZ:\n+                    // TODO find submissionService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxOTIwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODoyNVrOGmLfRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODoyNVrOGmLfRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzMwMw==", "bodyText": "programming exercises are handled differently", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442687303", "createdAt": "2020-06-19T07:48:25Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;\n+                case ExerciseType.MODELING:\n+                    this.modelingSubmissionService.create(submission as ModelingSubmission, submission.participation.exercise.id).subscribe(\n+                        (response) => {\n+                            submission = response.body!;\n+                            submission.participation.submissions = [submission];\n+                            this.onSaveSuccess();\n+                        },\n+                        () => this.onSaveError(),\n+                    );\n+                    break;\n+                case ExerciseType.PROGRAMMING:\n+                    return this.programmingSubmissionService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAxOTc2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODozNlrOGmLfmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODozNlrOGmLfmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzM4Nw==", "bodyText": "file upload exercises are handled differently", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442687387", "createdAt": "2020-06-19T07:48:36Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODA0NzY3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1Nzo0NVrOGmLxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0MjoxOFrOGmXRtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTg4MA==", "bodyText": "I don't think this method should be necessary.\nWhen the user clicks on start in the exam, the studentExam for the user should be downloaded with all exercises, participations and (for text, modeling, quiz) an initial empty submission.\n(In the 2nd iteration, we can develop a fallback solution, in case one participation does not exist, then we would invoke startExercise on the server, when the student navigates into the exercise for the first time)\nDuring the exam, there should be no need to load these objects again from the server", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442691880", "createdAt": "2020-06-19T07:57:45Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;\n+                case ExerciseType.MODELING:\n+                    this.modelingSubmissionService.create(submission as ModelingSubmission, submission.participation.exercise.id).subscribe(\n+                        (response) => {\n+                            submission = response.body!;\n+                            submission.participation.submissions = [submission];\n+                            this.onSaveSuccess();\n+                        },\n+                        () => this.onSaveError(),\n+                    );\n+                    break;\n+                case ExerciseType.PROGRAMMING:\n+                    return this.programmingSubmissionService;\n+                case ExerciseType.QUIZ:\n+                    // TODO find submissionService\n+                    return null;\n+            }\n+        });\n+    }\n+\n+    private onSaveSuccess() {\n+        console.log('saved');\n+    }\n+\n+    private onSaveError() {\n+        console.log('error while saving');\n+    }\n+\n+    /**\n+     * Updates StudentExam on server\n+     * @param studentExam\n+     */\n+    createSubmission(submission: Submission, courseId: number, examId: number, exerciseId: number) {\n+        // TODO: Add to updates\n+\n+        // update immediately in localStorage and online every 60seconds\n+        this.localStorageService.store(this.getLocalStorageKeyForStudentExam(courseId, examId), JSON.stringify(this.studentExam));\n+    }\n+\n+    getLatestSubmissionForParticipation(participationId: number): Observable<Submission | undefined> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1NjQ5OQ==", "bodyText": "You are right. One question though: What happens when the student switches the browser for whatever reason? Will the most current submissions be downloaded with the studentExam?", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442856499", "createdAt": "2020-06-19T13:58:13Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;\n+                case ExerciseType.MODELING:\n+                    this.modelingSubmissionService.create(submission as ModelingSubmission, submission.participation.exercise.id).subscribe(\n+                        (response) => {\n+                            submission = response.body!;\n+                            submission.participation.submissions = [submission];\n+                            this.onSaveSuccess();\n+                        },\n+                        () => this.onSaveError(),\n+                    );\n+                    break;\n+                case ExerciseType.PROGRAMMING:\n+                    return this.programmingSubmissionService;\n+                case ExerciseType.QUIZ:\n+                    // TODO find submissionService\n+                    return null;\n+            }\n+        });\n+    }\n+\n+    private onSaveSuccess() {\n+        console.log('saved');\n+    }\n+\n+    private onSaveError() {\n+        console.log('error while saving');\n+    }\n+\n+    /**\n+     * Updates StudentExam on server\n+     * @param studentExam\n+     */\n+    createSubmission(submission: Submission, courseId: number, examId: number, exerciseId: number) {\n+        // TODO: Add to updates\n+\n+        // update immediately in localStorage and online every 60seconds\n+        this.localStorageService.store(this.getLocalStorageKeyForStudentExam(courseId, examId), JSON.stringify(this.studentExam));\n+    }\n+\n+    getLatestSubmissionForParticipation(participationId: number): Observable<Submission | undefined> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTg4MA=="}, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MDQzOQ==", "bodyText": "Yes, then the student needs to \"start\" the exam again and the latest (synced) submission will be downloaded in StudentExam -> Exercises -> Participations -> Submissions", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r442880439", "createdAt": "2020-06-19T14:42:18Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.service.ts", "diffHunk": "@@ -1,9 +1,145 @@\n import { Injectable } from '@angular/core';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Observable } from 'rxjs';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { HttpClient } from '@angular/common/http';\n+import { LocalStorageService } from 'ngx-webstorage';\n+import { Submission } from 'app/entities/submission.model';\n+import { ModelingSubmissionService } from 'app/exercises/modeling/participate/modeling-submission.service';\n+import { ProgrammingSubmissionService } from 'app/exercises/programming/participate/programming-submission.service';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { FileUploadSubmissionService } from 'app/exercises/file-upload/participate/file-upload-submission.service';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n+import { ModelingSubmission } from 'app/entities/modeling-submission.model';\n+import { tap } from 'rxjs/operators';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n \n @Injectable({ providedIn: 'root' })\n export class ExamParticipationService {\n-    public resourceUrl = SERVER_API_URL + 'api/courses';\n+    private resourceUrl = SERVER_API_URL + 'api/courses';\n+    private studentExam: StudentExam;\n+    private submissionSaveList: Submission[] = [];\n \n-    constructor() {}\n+    // autoTimerInterval in seconds\n+    autoSaveTime = 60;\n+    autoSaveInterval: number;\n+\n+    constructor(\n+        private httpClient: HttpClient,\n+        private localStorageService: LocalStorageService,\n+        private modelingSubmissionService: ModelingSubmissionService,\n+        private programmingSubmissionService: ProgrammingSubmissionService,\n+        private textSubmissionService: TextSubmissionService,\n+        private fileUploadSubmissionService: FileUploadSubmissionService,\n+    ) {}\n+\n+    public getStudentExam(courseId: number, examId: number): Observable<StudentExam> {\n+        // TODO: check local storage\n+        const localStoredExam: StudentExam = this.localStorageService.retrieve(this.getLocalStorageKeyForStudentExam(courseId, examId));\n+\n+        if (localStoredExam) {\n+            this.studentExam = localStoredExam;\n+            return Observable.of(this.studentExam);\n+        } else {\n+            // download student exam from server on service init\n+            return this.getStudentExamFromServer(courseId, examId).pipe(\n+                tap((studentExam: StudentExam) => {\n+                    this.studentExam = studentExam;\n+                }),\n+            );\n+        }\n+    }\n+\n+    private getLocalStorageKeyForStudentExam(courseId: number, examId: number) {\n+        const prefix = 'artemis_student_exam';\n+        return `${prefix}_${courseId}_${examId}`;\n+    }\n+\n+    /**\n+     * Retrieves a {@link StudentExam} from server\n+     */\n+    private getStudentExamFromServer(courseId: number, examId: number): Observable<StudentExam> {\n+        return this.httpClient.get<StudentExam>(this.resourceUrl);\n+    }\n+\n+    /**\n+     * start AutoSaveTimer\n+     */\n+    public startAutoSaveTimer(): void {\n+        // auto save of submission if there are changes\n+        this.autoSaveInterval = window.setInterval(() => {\n+            this.synchronizeSubmissionsWithServer();\n+        }, 1000 * this.autoSaveTime);\n+    }\n+\n+    /**\n+     * creates submissions for all submissions in SubmissionSaveList\n+     */\n+    private synchronizeSubmissionsWithServer() {\n+        // TODO: handle synchronization properly\n+        this.submissionSaveList.forEach((submission) => {\n+            switch (submission.participation.exercise?.type) {\n+                case ExerciseType.TEXT:\n+                    this.textSubmissionService.create(submission as TextSubmission, submission.participation.exercise?.id);\n+                    break;\n+                case ExerciseType.FILE_UPLOAD:\n+                    return this.fileUploadSubmissionService;\n+                case ExerciseType.MODELING:\n+                    this.modelingSubmissionService.create(submission as ModelingSubmission, submission.participation.exercise.id).subscribe(\n+                        (response) => {\n+                            submission = response.body!;\n+                            submission.participation.submissions = [submission];\n+                            this.onSaveSuccess();\n+                        },\n+                        () => this.onSaveError(),\n+                    );\n+                    break;\n+                case ExerciseType.PROGRAMMING:\n+                    return this.programmingSubmissionService;\n+                case ExerciseType.QUIZ:\n+                    // TODO find submissionService\n+                    return null;\n+            }\n+        });\n+    }\n+\n+    private onSaveSuccess() {\n+        console.log('saved');\n+    }\n+\n+    private onSaveError() {\n+        console.log('error while saving');\n+    }\n+\n+    /**\n+     * Updates StudentExam on server\n+     * @param studentExam\n+     */\n+    createSubmission(submission: Submission, courseId: number, examId: number, exerciseId: number) {\n+        // TODO: Add to updates\n+\n+        // update immediately in localStorage and online every 60seconds\n+        this.localStorageService.store(this.getLocalStorageKeyForStudentExam(courseId, examId), JSON.stringify(this.studentExam));\n+    }\n+\n+    getLatestSubmissionForParticipation(participationId: number): Observable<Submission | undefined> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTg4MA=="}, "originalCommit": {"oid": "b068db03fbce07fa6b2a9e2822d70143b2e0819f"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzI5NDg2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exercises/text/text-editor-exam.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxMzowOVrOGm8ONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxMzowOVrOGm8ONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NTc0OA==", "bodyText": "this should be done by the parent component", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r443485748", "createdAt": "2020-06-22T11:13:09Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exercises/text/text-editor-exam.component.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import { Component, OnDestroy, OnInit, Input } from '@angular/core';\n+import { TranslateService } from '@ngx-translate/core';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { AlertService } from 'app/core/alert/alert.service';\n+import { ParticipationService } from 'app/exercises/shared/participation/participation.service';\n+import { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\n+import { TextEditorService } from 'app/exercises/text/participate/text-editor.service';\n+import * as moment from 'moment';\n+import { Subject } from 'rxjs';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n+import { Observable } from 'rxjs/Observable';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\n+import { participationStatus } from 'app/exercises/shared/exercise/exercise-utils';\n+import { TextExercise } from 'app/entities/text-exercise.model';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n+import { StringCountService } from 'app/exercises/text/participate/string-count.service';\n+import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n+import { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\n+import { Exercise } from 'app/entities/exercise.model';\n+\n+@Component({\n+    selector: 'jhi-text-editor-exam',\n+    templateUrl: './text-editor-exam.component.html',\n+    providers: [ParticipationService],\n+    styleUrls: ['./text-editor-exam.component.scss'],\n+})\n+export class TextEditorExamComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\n+    @Input()\n+    studentParticipation: StudentParticipation;\n+    @Input()\n+    exercise: Exercise;\n+\n+    submission: TextSubmission;\n+\n+    answer: string;\n+    private textEditorInput = new Subject<string>();\n+    textEditorStream$: Observable<TextSubmission>;\n+\n+    isSaving: boolean;\n+\n+    constructor(\n+        private textService: TextEditorService,\n+        private jhiAlertService: AlertService,\n+        private artemisMarkdown: ArtemisMarkdownService,\n+        private translateService: TranslateService,\n+        private stringCountService: StringCountService,\n+        private examParticipationService: ExamParticipationService,\n+    ) {\n+        this.isSaving = false;\n+    }\n+\n+    ngOnInit() {\n+        if (this.studentParticipation.submissions && this.studentParticipation.submissions.length === 1) {\n+            this.submission = this.studentParticipation.submissions[0];\n+        }\n+        this.textEditorStream$ = this.buildSubmissionStream$();\n+        this.textEditorStream$.subscribe((textSubmission) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25cfceaf21b74e7644236e3e0b77ae18bfdb682"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzI5NzM1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exercises/text/text-editor-exam.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxNDowNFrOGm8Pug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxNDowNFrOGm8Pug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NjEzOA==", "bodyText": "this should be done by the parent component", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r443486138", "createdAt": "2020-06-22T11:14:04Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exercises/text/text-editor-exam.component.ts", "diffHunk": "@@ -0,0 +1,114 @@\n+import { Component, OnDestroy, OnInit, Input } from '@angular/core';\n+import { TranslateService } from '@ngx-translate/core';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { AlertService } from 'app/core/alert/alert.service';\n+import { ParticipationService } from 'app/exercises/shared/participation/participation.service';\n+import { ParticipationWebsocketService } from 'app/overview/participation-websocket.service';\n+import { TextEditorService } from 'app/exercises/text/participate/text-editor.service';\n+import * as moment from 'moment';\n+import { Subject } from 'rxjs';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n+import { Observable } from 'rxjs/Observable';\n+import { TextSubmissionService } from 'app/exercises/text/participate/text-submission.service';\n+import { ComponentCanDeactivate } from 'app/shared/guard/can-deactivate.model';\n+import { participationStatus } from 'app/exercises/shared/exercise/exercise-utils';\n+import { TextExercise } from 'app/entities/text-exercise.model';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n+import { StringCountService } from 'app/exercises/text/participate/string-count.service';\n+import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n+import { ExamParticipationService } from 'app/exam/participate/exam-participation.service';\n+import { Exercise } from 'app/entities/exercise.model';\n+\n+@Component({\n+    selector: 'jhi-text-editor-exam',\n+    templateUrl: './text-editor-exam.component.html',\n+    providers: [ParticipationService],\n+    styleUrls: ['./text-editor-exam.component.scss'],\n+})\n+export class TextEditorExamComponent implements OnInit, OnDestroy, ComponentCanDeactivate {\n+    @Input()\n+    studentParticipation: StudentParticipation;\n+    @Input()\n+    exercise: Exercise;\n+\n+    submission: TextSubmission;\n+\n+    answer: string;\n+    private textEditorInput = new Subject<string>();\n+    textEditorStream$: Observable<TextSubmission>;\n+\n+    isSaving: boolean;\n+\n+    constructor(\n+        private textService: TextEditorService,\n+        private jhiAlertService: AlertService,\n+        private artemisMarkdown: ArtemisMarkdownService,\n+        private translateService: TranslateService,\n+        private stringCountService: StringCountService,\n+        private examParticipationService: ExamParticipationService,\n+    ) {\n+        this.isSaving = false;\n+    }\n+\n+    ngOnInit() {\n+        if (this.studentParticipation.submissions && this.studentParticipation.submissions.length === 1) {\n+            this.submission = this.studentParticipation.submissions[0];\n+        }\n+        this.textEditorStream$ = this.buildSubmissionStream$();\n+        this.textEditorStream$.subscribe((textSubmission) => {\n+            this.examParticipationService.updateSubmission(this.exercise.id, this.studentParticipation.id, textSubmission);\n+        });\n+    }\n+\n+    /**\n+     * Stream of submissions being emitted on:\n+     * 1. text editor input after a debounce time of 2 seconds\n+     */\n+    private buildSubmissionStream$() {\n+        const textEditorStream$ = this.textEditorInput\n+            .asObservable()\n+            .pipe(debounceTime(2000), distinctUntilChanged())\n+            .pipe(map((answer: string) => this.submissionForAnswer(answer)));\n+        return textEditorStream$;\n+    }\n+\n+    private submissionForAnswer(answer: string): TextSubmission {\n+        return { ...this.submission, text: answer, language: this.textService.predictLanguage(answer) };\n+    }\n+\n+    ngOnDestroy() {\n+        if (this.canDeactivate() && this.exercise.id) {\n+            this.submission.text = this.answer;\n+            if (this.submission.id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25cfceaf21b74e7644236e3e0b77ae18bfdb682"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjU5MTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1MjoyMFrOGo-cBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzoyNzozNFrOGpEoiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxOTIwNA==", "bodyText": "Something is off here. Should the name be addExamSession?", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r445619204", "createdAt": "2020-06-25T14:52:20Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -92,6 +86,24 @@ public StudentExam removeExercise(Exercise exercise) {\n         return this;\n     }\n \n+    public Set<ExamSession> getExamSessions() {\n+        return examSessions;\n+    }\n+\n+    public void setExamSessions(Set<ExamSession> examSessions) {\n+        this.examSessions = examSessions;\n+    }\n+\n+    public StudentExam addExercise(ExamSession examSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ffcd83db393485a2fd7d0d3cea18b828524382"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyMDcxMw==", "bodyText": "Yes we will fix this in a follow up", "url": "https://github.com/ls1intum/Artemis/pull/1682#discussion_r445720713", "createdAt": "2020-06-25T17:27:34Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -92,6 +86,24 @@ public StudentExam removeExercise(Exercise exercise) {\n         return this;\n     }\n \n+    public Set<ExamSession> getExamSessions() {\n+        return examSessions;\n+    }\n+\n+    public void setExamSessions(Set<ExamSession> examSessions) {\n+        this.examSessions = examSessions;\n+    }\n+\n+    public StudentExam addExercise(ExamSession examSession) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxOTIwNA=="}, "originalCommit": {"oid": "96ffcd83db393485a2fd7d0d3cea18b828524382"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4901, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}