{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjA1NDcw", "number": 1206, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMjo0NFrODacGQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTo1MTowNVrODawORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDQ5OTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMjo0NFrOFhZHDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMjo0NFrOFhZHDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n          \n          \n            \n                        throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in course \" + course.getTitle());", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370558735", "createdAt": "2020-01-24T10:12:44Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDUwMjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMzozNlrOFhZI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMzozNlrOFhZI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTE5Mw==", "bodyText": "please add some comments here", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370559193", "createdAt": "2020-01-24T10:13:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDUwNzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNToxN1rOFhZLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDozMzoxNlrOFhZqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTk0OA==", "bodyText": "please add JavaDoc.\nYou might want to rename this method and append IfNotExisting", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370559948", "createdAt": "2020-01-24T10:15:17Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,57 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    public StudentParticipation createParticipationWithEmptySubmission(Exercise exercise, User user, SubmissionType submissionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2Nzc3NQ==", "bodyText": "Will add it and perform the renaming.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370567775", "createdAt": "2020-01-24T10:33:16Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,57 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    public StudentParticipation createParticipationWithEmptySubmission(Exercise exercise, User user, SubmissionType submissionType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1OTk0OA=="}, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDUxMDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNTo1OVrOFhZNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDozMjo1MVrOFhZptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDM2Nw==", "bodyText": "JavaDoc missing", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370560367", "createdAt": "2020-01-24T10:15:59Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzYwNA==", "bodyText": "Will add it.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370567604", "createdAt": "2020-01-24T10:32:51Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDM2Nw=="}, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDUxNzE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxODoxOFrOFhZRXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDozMjoyOVrOFhZo9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTM3NA==", "bodyText": "Can this case really happen that the latest submission is empty?", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370561374", "createdAt": "2020-01-24T10:18:18Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NzQxNA==", "bodyText": "No, it should not happen. If that were the case, an exception should have already been thrown previously. I wasn't sure if just assuming the Optional to exist is bad style but I guess checking if it is empty could also cause confusion for other developers since this is not an expected state.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370567414", "createdAt": "2020-01-24T10:32:29Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTM3NA=="}, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDUyNDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMDozOFrOFhZVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNjoxNjozOFrOFh0ulQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ==", "bodyText": "this is a good check, however you have already saved some additional data previously into the database, so this check might be too late. Maybe it would be a good idea to analyze the situation in the beginning of this method and only create and save additional objects in the database in case all prerequisites are fulfilled", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370562439", "createdAt": "2020-01-24T10:20:38Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,\n+                    \"Submission for \" + studentLogin + \" in exercise \" + exerciseId + \" was neither found nor could be created\");\n+        }\n+        result.setSubmission(optionalSubmission.get());\n+        Result existingResult = optionalSubmission.get().getResult();\n+        if (existingResult != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NTMwMA==", "bodyText": "If a result already exists, a submission and participation also already exist, so no additional data should have been saved at that point if I didn't make a mistake since they are both only created if they do not exist yet. But I agree that it's a safer approach to check the prerequisites in the beginning.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r370565300", "createdAt": "2020-01-24T10:27:29Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,\n+                    \"Submission for \" + studentLogin + \" in exercise \" + exerciseId + \" was neither found nor could be created\");\n+        }\n+        result.setSubmission(optionalSubmission.get());\n+        Result existingResult = optionalSubmission.get().getResult();\n+        if (existingResult != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ=="}, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMTIyMQ==", "bodyText": "I moved the check up before any database write operations.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371011221", "createdAt": "2020-01-26T16:16:38Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ResultResource.java", "diffHunk": "@@ -485,4 +492,46 @@ else if (participation instanceof ProgrammingExerciseParticipation) {\n         final var result = resultService.createNewExampleResultForSubmissionWithExampleSubmission(submissionId, isProgrammingExerciseWithFeedback);\n         return new ResponseEntity<>(result, HttpStatus.CREATED);\n     }\n+\n+    @PostMapping(value = \"/exercises/{exerciseId}/external-submission-results\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Result> createResultForExternalSubmission(@PathVariable Long exerciseId, @RequestParam String studentLogin, @RequestBody Result result)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create Result for External Submission for Exercise : {}\", exerciseId);\n+\n+        Exercise exercise = exerciseService.findOneWithAdditionalElements(exerciseId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<User> student = userService.getUserWithAuthoritiesByLogin(studentLogin);\n+        Course course = exercise.getCourse();\n+\n+        if (!authCheckService.isAtLeastInstructorForExercise(exercise, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+        if (student.isEmpty() || !authCheckService.isAtLeastStudentInCourse(course, student.get())) {\n+            throw new ResponseStatusException(HttpStatus.FAILED_DEPENDENCY, \"No student found for \" + studentLogin + \" in exercise \" + exerciseId);\n+        }\n+        if (exercise instanceof QuizExercise) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"External submissions are not supported for Quiz exercises.\");\n+        }\n+\n+        StudentParticipation participation = participationService.createParticipationWithEmptySubmission(exercise, student.get(), SubmissionType.EXTERNAL);\n+        result.setParticipation(participation);\n+\n+        participation = (StudentParticipation) participationService.findOneWithEagerSubmissions(participation.getId());\n+        Optional<Submission> optionalSubmission = participation.findLatestSubmission();\n+        if (optionalSubmission.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR,\n+                    \"Submission for \" + studentLogin + \" in exercise \" + exerciseId + \" was neither found nor could be created\");\n+        }\n+        result.setSubmission(optionalSubmission.get());\n+        Result existingResult = optionalSubmission.get().getResult();\n+        if (existingResult != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MjQzOQ=="}, "originalCommit": {"oid": "4c39cb4880c5d389739aab28f0badaa4e228c66b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc2OTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTowNjozN1rOFh2orw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzo1ODozNlrOFiMCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MjQ3OQ==", "bodyText": "Why do we need to do this in this case? The participation should already be connected to the exercise, if it was present in the DB", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371042479", "createdAt": "2020-01-27T01:06:37Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5MzEwNg==", "bodyText": "I'm not sure if it is really needed here or if it is completely redundant. I thought since it's included in startExercise, it might be imprudent to leave it out here since the original author probably had a reason to include it. I removed it for now though in the new method and will test later if this leads to any issues.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371393106", "createdAt": "2020-01-27T17:58:36Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MjQ3OQ=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc3MzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMToxNDo0MVrOFh2q3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODowMTozNFrOFiMIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw==", "bodyText": "This is pretty much the same code as for startExercise. You could maybe extract some generic participation initialization method here.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371043037", "createdAt": "2020-01-27T01:14:41Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0NjgxOA==", "bodyText": "not sure if we should change startExercise here. Even if it overlaps, these are 2 different use cases and they should not overlap too much in the code, otherwise future changes in one of the use case might destroy the other one. I guess we can live with some code duplication", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371146818", "createdAt": "2020-01-27T09:56:58Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5NDYxNg==", "bodyText": "While the code is still pretty similar, it has diverged a bit already from the original. I think there is not that much substance in those lines that we should avoid duplication by all means.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371394616", "createdAt": "2020-01-27T18:01:34Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzAzNw=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc3ODg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMToyNDoyMlrOFh2t4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzoyMzo1M1rOFiK-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzgxMA==", "bodyText": "As far as I could see it, we never have the case that this is false and the exercise is a programming exercise. The method you created in line 324 only gets called if the exercise is not a programing exercise. Besides, because you created an overloaded method here, you hide the fact that the alternative in line 324 does not initialize programming submissions. I would suggest to just remove the overloaded variant. If a developer does not want to initialize a programming submission in this case, he should not call it at all.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371043810", "createdAt": "2020-01-27T01:24:22Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }\n+        participation = save(participation);\n+\n+        // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n+        if (optionalStudentParticipation.isEmpty() || !submissionRepository.existsByParticipationId(participation.getId())) {\n+            participation = (StudentParticipation) findOneWithEagerSubmissions(participation.getId());\n+            initializeSubmission(participation, exercise, true, submissionType);\n+            participation = save(participation);\n+        }\n+\n+        return participation;\n+    }\n+\n     /**\n      * Initializes a new text, modeling or file upload submission (depending on the type of the given exercise), connects it with the given participation and stores it in the\n      * database.\n      *\n-     * @param participation the participation for which the submission should be initialized\n-     * @param exercise      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param participation                 the participation for which the submission should be initialized\n+     * @param exercise                      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param allowProgrammingExercise      whether to explicitly allow the submission initialization for programming exercises", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3NTc4Mw==", "bodyText": "Fair enough. I was a bit hesitant to just change the current behavior of initializeSubmission (since it explicitly does nothing for programming exercises at the moment) and thus went with the overloaded variant but you are right that there are no such usages at the moment, so I'll refactor it as you described. The responsibility will then be on the user of this method, if he passes in a programming exercise, he should indeed not be surprised if it actually initializes a submission for it.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371375783", "createdAt": "2020-01-27T17:23:53Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -237,20 +237,68 @@ public StudentParticipation startExercise(Exercise exercise, User user) {\n         return participation;\n     }\n \n+    /**\n+     * This method checks whether a participation exists for a given exercise and user. If not, it creates such a participation with initialization state FINISHED.\n+     * If the participation had to be newly created or there were no submissions yet for the existing participation, a new submission is created with the given submission type.\n+     * For external submissions, the submission is assumed to be submitted immediately upon creation.\n+     *\n+     * @param exercise the exercise for which to create a participation and submission\n+     * @param user the user for which to create a participation and submission\n+     * @param submissionType the type of submission to create if none exist yet\n+     * @return the participation connecting the given exercise and user\n+     */\n+    public StudentParticipation createParticipationWithEmptySubmissionIfNotExisting(Exercise exercise, User user, SubmissionType submissionType) {\n+        Optional<StudentParticipation> optionalStudentParticipation = findOneByExerciseIdAndStudentLoginAnyState(exercise.getId(), user.getLogin());\n+        StudentParticipation participation;\n+        if (optionalStudentParticipation.isEmpty()) {\n+            // create a new participation only if no participation can be found\n+            if (exercise instanceof ProgrammingExercise) {\n+                participation = new ProgrammingExerciseStudentParticipation();\n+            }\n+            else {\n+                participation = new StudentParticipation();\n+            }\n+            participation.setInitializationState(FINISHED);\n+            participation.setInitializationDate(ZonedDateTime.now());\n+            participation.setExercise(exercise);\n+            participation.setStudent(user);\n+        }\n+        else {\n+            // make sure participation and exercise are connected\n+            participation = optionalStudentParticipation.get();\n+            participation.setExercise(exercise);\n+        }\n+        participation = save(participation);\n+\n+        // initialize a programming, modeling, text or file upload submission (depending on the exercise type), it will not do anything in the case of a quiz exercise\n+        if (optionalStudentParticipation.isEmpty() || !submissionRepository.existsByParticipationId(participation.getId())) {\n+            participation = (StudentParticipation) findOneWithEagerSubmissions(participation.getId());\n+            initializeSubmission(participation, exercise, true, submissionType);\n+            participation = save(participation);\n+        }\n+\n+        return participation;\n+    }\n+\n     /**\n      * Initializes a new text, modeling or file upload submission (depending on the type of the given exercise), connects it with the given participation and stores it in the\n      * database.\n      *\n-     * @param participation the participation for which the submission should be initialized\n-     * @param exercise      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param participation                 the participation for which the submission should be initialized\n+     * @param exercise                      the corresponding exercise, should be either a text, modeling or file upload exercise, otherwise it will instantly return and not do anything\n+     * @param allowProgrammingExercise      whether to explicitly allow the submission initialization for programming exercises", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzgxMA=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc4MTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMToyOTowNFrOFh2vVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzoxMzo1OVrOFiKqKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDE4MQ==", "bodyText": "You can remove the if-check. This method creates a new submission with type=null anyway.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371044181", "createdAt": "2020-01-27T01:29:04Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -260,11 +308,23 @@ else if (exercise instanceof TextExercise) {\n             submission = new FileUploadSubmission();\n         }\n \n+        if (submissionType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM3MDUzOA==", "bodyText": "You are right. I removed it.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371370538", "createdAt": "2020-01-27T17:13:59Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -260,11 +308,23 @@ else if (exercise instanceof TextExercise) {\n             submission = new FileUploadSubmission();\n         }\n \n+        if (submissionType != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDE4MQ=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc4NDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTozMzoyMFrOFh2w4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODowNTo0NFrOFiMPxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {\n          \n          \n            \n                public Result createNewRatedManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371044578", "createdAt": "2020-01-27T01:33:20Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -313,6 +314,10 @@ public Result createNewManualResult(Result result, boolean isProgrammingExercise\n         return savedResult;\n     }\n \n+    public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5NjU1MA==", "bodyText": "I renamed the method and updated all occurrences.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371396550", "createdAt": "2020-01-27T18:05:44Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -313,6 +314,10 @@ public Result createNewManualResult(Result result, boolean isProgrammingExercise\n         return savedResult;\n     }\n \n+    public Result createNewManualResult(Result result, boolean isProgrammingExerciseWithFeedback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NDU3OA=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc5MjEzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/assessment-shared/external-submission/index.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTo0NToxMFrOFh21Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxNDo0OFrOFiMf_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTY1NQ==", "bodyText": "Please don't create barrel files. We had so many problems with them in the past, that we decided to refrain from using them for new code.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371045655", "createdAt": "2020-01-27T01:45:10Z", "author": {"login": "ungaralex"}, "path": "src/main/webapp/app/assessment-shared/external-submission/index.ts", "diffHunk": "@@ -0,0 +1,3 @@\n+export * from './external-submission-button.component';\n+export * from './external-submission.service';\n+export * from './external-submission-dialog.component';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQwMDcwMQ==", "bodyText": "I removed the barrel file.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371400701", "createdAt": "2020-01-27T18:14:48Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/assessment-shared/external-submission/index.ts", "diffHunk": "@@ -0,0 +1,3 @@\n+export * from './external-submission-button.component';\n+export * from './external-submission.service';\n+export * from './external-submission-dialog.component';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTY1NQ=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc5NDExOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/assessment-shared/assessment-shared.module.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTo0ODowNVrOFh22Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxNjozMlrOFiMi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTkzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                providers: [JhiAlertService, ExampleSubmissionService],\n          \n          \n            \n                providers: [JhiAlertService],\n          \n      \n    \n    \n  \n\nIf you specify providedIn: 'root' in your service, then Angular will take care of injecting it where needed. You should almost never specify services in modules, since this can break your app, because of problems like circular dependencies (We also had some really annoying problems because of that, just like with the barrel files).\nYou also prevent Angular from performing tree shaking, if you specify a service like this.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371045930", "createdAt": "2020-01-27T01:48:05Z", "author": {"login": "ungaralex"}, "path": "src/main/webapp/app/assessment-shared/assessment-shared.module.ts", "diffHunk": "@@ -22,8 +25,18 @@ import { AssessmentFiltersComponent } from 'app/assessment-shared/assessment-fil\n         ScoreDisplayComponent,\n         AssessmentDetailComponent,\n         AssessmentFiltersComponent,\n+        ExternalSubmissionButtonComponent,\n+        ExternalSubmissionDialogComponent,\n     ],\n-    exports: [AssessmentLayoutComponent, AssessmentGeneralFeedbackComponent, ScoreDisplayComponent, AssessmentDetailComponent, AssessmentFiltersComponent],\n-    providers: [JhiAlertService],\n+    entryComponents: [ExternalSubmissionDialogComponent],\n+    exports: [\n+        AssessmentLayoutComponent,\n+        AssessmentGeneralFeedbackComponent,\n+        ScoreDisplayComponent,\n+        AssessmentDetailComponent,\n+        AssessmentFiltersComponent,\n+        ExternalSubmissionButtonComponent,\n+    ],\n+    providers: [JhiAlertService, ExampleSubmissionService],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQwMTQ2NQ==", "bodyText": "Thanks, very good point. I removed the explicit service import here.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371401465", "createdAt": "2020-01-27T18:16:32Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/assessment-shared/assessment-shared.module.ts", "diffHunk": "@@ -22,8 +25,18 @@ import { AssessmentFiltersComponent } from 'app/assessment-shared/assessment-fil\n         ScoreDisplayComponent,\n         AssessmentDetailComponent,\n         AssessmentFiltersComponent,\n+        ExternalSubmissionButtonComponent,\n+        ExternalSubmissionDialogComponent,\n     ],\n-    exports: [AssessmentLayoutComponent, AssessmentGeneralFeedbackComponent, ScoreDisplayComponent, AssessmentDetailComponent, AssessmentFiltersComponent],\n-    providers: [JhiAlertService],\n+    entryComponents: [ExternalSubmissionDialogComponent],\n+    exports: [\n+        AssessmentLayoutComponent,\n+        AssessmentGeneralFeedbackComponent,\n+        ScoreDisplayComponent,\n+        AssessmentDetailComponent,\n+        AssessmentFiltersComponent,\n+        ExternalSubmissionButtonComponent,\n+    ],\n+    providers: [JhiAlertService, ExampleSubmissionService],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTkzMA=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzc5NjUzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/submission.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTo1MTowNVrOFh23cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxMjowOFrOFiMbFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NjI1OQ==", "bodyText": "We should be consistent: \"Externe Submission\" or \"Externe Einreichung\"", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371046259", "createdAt": "2020-01-27T01:51:05Z", "author": {"login": "ungaralex"}, "path": "src/main/webapp/i18n/de/submission.json", "diffHunk": "@@ -21,7 +21,8 @@\n             \"result\": \"Ergebnis\",\n             \"participation\": \"Participation\",\n             \"lockedSubmissionsLimitReached\": \"Du hast die maximale Anzahl von unvollst\u00e4ndigen Bewertungen in diesem Kurs erreicht. Bitte beende deine offenen Bewertungen, bevor du eine neue beginnen kannst.\",\n-            \"resultTimeout\": \"Das Ergebnis zu deiner letzten Abgabe ist nicht verf\u00fcgbar. Bitte gebe deinen Code erneut ab.\"\n+            \"resultTimeout\": \"Das Ergebnis zu deiner letzten Abgabe ist nicht verf\u00fcgbar. Bitte gebe deinen Code erneut ab.\",\n+            \"createExternal\": \"Externe Submission erstellen\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5OTQ0Ng==", "bodyText": "I think the consensus was to go with Einreichung for submission in German, right? I updated all entries in that file that had submission in it or were otherwise completely untranslated.", "url": "https://github.com/ls1intum/Artemis/pull/1206#discussion_r371399446", "createdAt": "2020-01-27T18:12:08Z", "author": {"login": "madwau"}, "path": "src/main/webapp/i18n/de/submission.json", "diffHunk": "@@ -21,7 +21,8 @@\n             \"result\": \"Ergebnis\",\n             \"participation\": \"Participation\",\n             \"lockedSubmissionsLimitReached\": \"Du hast die maximale Anzahl von unvollst\u00e4ndigen Bewertungen in diesem Kurs erreicht. Bitte beende deine offenen Bewertungen, bevor du eine neue beginnen kannst.\",\n-            \"resultTimeout\": \"Das Ergebnis zu deiner letzten Abgabe ist nicht verf\u00fcgbar. Bitte gebe deinen Code erneut ab.\"\n+            \"resultTimeout\": \"Das Ergebnis zu deiner letzten Abgabe ist nicht verf\u00fcgbar. Bitte gebe deinen Code erneut ab.\",\n+            \"createExternal\": \"Externe Submission erstellen\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NjI1OQ=="}, "originalCommit": {"oid": "e9305967af3045e2f909c03ddddda91b278a85c0"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 200, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}