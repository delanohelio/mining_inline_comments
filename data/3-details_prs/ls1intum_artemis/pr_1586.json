{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5ODkzMzQx", "number": 1586, "title": "Feature/jhipster registry", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n\nMotivation and Context\nThe JHipster Registry offers several components that we need for a distributed deployment of Artemis, especially the Eureka server. This server allows several instances of Artemis to discover each other, which is needed for the usage of the Hazelcast distributed cache.\nAdditionally, several comfort functions like a metrics overview and a log overview are implemented.\nDescription\nI've changed the hibernate cache from ehcache to hazelcast. Hazelcast allows distributed usage of the cached objects. In order for Hazelcast to work correctly with multiple instances of Artemis, these instances have to discover each other.\nThis discovery service is provided by the Eureka server which is part of the JHipster Registry.\nI have therefore added Hazelcast, enabled the eureka client in Artemis and added the registry to the repository.\nThe documentation for how to setup the registry can be found here: https://confluence.ase.in.tum.de/display/ArTEMiS/JHipster+Registry\nSteps for Testing\nFirst of all, the current setup should not be impacted. Therefore, start your current deployment of Artemis (can be in dev-, or prod-profile) and verify that Artemis starts as before. In the dev-profile, there should be no error messages related to a missing registry, in the prod-profile, there should be error-messages (as the registry is not reachable), but they should not prevent the startup or the functionality.\nTo test the jhipster registry locally, follow the configuration steps from the confluence page, but instead of adjusting the values in /opt/registry/application-prod.yml and /opt/registry/bootstrap-prod.yml, you only have to add the base64-encoded secret to src/main/docker/central-server-config/localhost-config/application.yml and set the password for the admin user in the src/main/docker/jhipster-registry.yml using the env-variables SPRING_SECURITY_USER_PASSWORD and JHIPSTER_REGISTRY_PASSWORD.\nThen run the registry using docker-compose -f src/main/docker/jhipster-registry.yml up. In case you run Artemis with the dev profile, you have to enable the registry by setting the value of eureka.client.enable to true in the application-dev.yml. You should then be able to login to the registry on localhost:8761 and the Artemis instance should be visible. Once you click on Administration > Metrics, you should be able to select the Artemis instance from the dropdown and see the metrics of Artemis.", "createdAt": "2020-06-07T09:12:19Z", "url": "https://github.com/ls1intum/Artemis/pull/1586", "merged": true, "mergeCommit": {"oid": "eb0b04026627f9cbfbee7910baa88b5a2c760ce7"}, "closed": true, "closedAt": "2020-06-10T20:46:21Z", "author": {"login": "sleiss"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgWzPGAH2gAyNDI5ODkzMzQxOmU5NzVjOTFiY2Y0NDA1NjEyZjljYTAxYmU5ZmQ5NmQ4ODVkMDUwODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp_6qIAFqTQyODQxNDMyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e975c91bcf4405612f9ca01be9fd96d885d05085", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/e975c91bcf4405612f9ca01be9fd96d885d05085", "committedDate": "2020-05-11T21:45:32Z", "message": "Add jhipster registry & hazelcast."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44213412f165236be423f8672f1abca837198a2a", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/44213412f165236be423f8672f1abca837198a2a", "committedDate": "2020-05-12T07:36:27Z", "message": "Remove ehcache config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221acb104fda23a15ea6609bb2013d85eb9d9411", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/221acb104fda23a15ea6609bb2013d85eb9d9411", "committedDate": "2020-05-12T08:22:50Z", "message": "Disable spring cloud config for now."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3c203d0ae0708f3988cfb4b449454ea1db9c88", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/3a3c203d0ae0708f3988cfb4b449454ea1db9c88", "committedDate": "2020-05-12T08:37:48Z", "message": "Add documentation for hazelcastInstance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c1a4cc81ae9fcf046867728d594be9c82a6f92", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/b9c1a4cc81ae9fcf046867728d594be9c82a6f92", "committedDate": "2020-05-12T15:33:07Z", "message": "Add hazelcast management center."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd586465c29a7f6b034a2e7ddeb437da21341cb4", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/bd586465c29a7f6b034a2e7ddeb437da21341cb4", "committedDate": "2020-05-13T11:30:16Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b565abfe28ae542088cc3b4ebec4d976c906aba", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/7b565abfe28ae542088cc3b4ebec4d976c906aba", "committedDate": "2020-05-14T16:29:14Z", "message": "Use dev deployment for now in prod profile for Hazelcast."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61c5aa4d2f52366e31c43e68e2d6172564ed32b5", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/61c5aa4d2f52366e31c43e68e2d6172564ed32b5", "committedDate": "2020-05-25T07:17:50Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84c416adfd84c969de68fd01dcfa7c57c9f3927", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/a84c416adfd84c969de68fd01dcfa7c57c9f3927", "committedDate": "2020-05-25T07:59:33Z", "message": "Resolve merge conflict."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225eaa7879494f8d826d8c443373cf311da34aab", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/225eaa7879494f8d826d8c443373cf311da34aab", "committedDate": "2020-05-25T09:54:08Z", "message": "Unify duplicated keys in config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b8501cb6a3a385c20d366d6f3700bf25b74b541", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/0b8501cb6a3a385c20d366d6f3700bf25b74b541", "committedDate": "2020-05-26T21:01:52Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600026ed1818088e8f93cc8d1afcf22f4505b2c4", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/600026ed1818088e8f93cc8d1afcf22f4505b2c4", "committedDate": "2020-05-27T21:24:59Z", "message": "Change some log messages to INFO."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e658dd559b373fa9e8e0847ee411f88b5ffafba", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/0e658dd559b373fa9e8e0847ee411f88b5ffafba", "committedDate": "2020-05-27T21:27:11Z", "message": "Merge remote-tracking branch 'origin/feature/jhipster-registry' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "614331ce93910fba8ddd668cc5a396f5a3f6f8ab", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/614331ce93910fba8ddd668cc5a396f5a3f6f8ab", "committedDate": "2020-06-02T16:18:57Z", "message": "Start adding registry for websocket messages."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd49ff2ab3b0fd475ce36ef288f411ff2ddc13b", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/2dd49ff2ab3b0fd475ce36ef288f411ff2ddc13b", "committedDate": "2020-06-02T16:20:48Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d84727e9cb358874eb0f1de986f68650fc0249", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/46d84727e9cb358874eb0f1de986f68650fc0249", "committedDate": "2020-06-04T18:21:01Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a009d25a2d609981700c4267b145a9ba8dfd54", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/30a009d25a2d609981700c4267b145a9ba8dfd54", "committedDate": "2020-06-04T23:11:43Z", "message": "Set User Destination & Registry Broadcast, change team map to hazelcast."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79cf06e7ab3f8421f142674f0b01031e3cf1fab3", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/79cf06e7ab3f8421f142674f0b01031e3cf1fab3", "committedDate": "2020-06-07T09:12:49Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a25dd7b9fa86e0c366444e8ee42bc10f295723d", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/7a25dd7b9fa86e0c366444e8ee42bc10f295723d", "committedDate": "2020-06-07T09:17:42Z", "message": "Revert \"Set User Destination & Registry Broadcast, change team map to hazelcast.\"\n\nThis reverts commit 30a009d25a2d609981700c4267b145a9ba8dfd54."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8152a54adc6cc9c3f154869dab55f47656302ea1", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/8152a54adc6cc9c3f154869dab55f47656302ea1", "committedDate": "2020-06-07T09:18:54Z", "message": "Revert \"Start adding registry for websocket messages.\"\n\nThis reverts commit 614331ce93910fba8ddd668cc5a396f5a3f6f8ab."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e56db8423a366eac49a072c1c589ee316ce1ead", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/5e56db8423a366eac49a072c1c589ee316ce1ead", "committedDate": "2020-06-07T09:51:50Z", "message": "Add config values to application.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "412bc6b3b5581db179fa918dad449caa498e2165", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/412bc6b3b5581db179fa918dad449caa498e2165", "committedDate": "2020-06-07T10:48:14Z", "message": "Disable registry in dev profile."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTk1ODQ0", "url": "https://github.com/ls1intum/Artemis/pull/1586#pullrequestreview-426595844", "createdAt": "2020-06-08T20:29:40Z", "commit": {"oid": "412bc6b3b5581db179fa918dad449caa498e2165"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoyOTo0MFrOGgvN9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoyOTo0MFrOGgvN9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTIzNw==", "bodyText": "why do we need an earlier version?", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r436981237", "createdAt": "2020-06-08T20:29:40Z", "author": {"login": "krusche"}, "path": "build.gradle", "diffHunk": "@@ -182,22 +182,24 @@ dependencies {\n \n     implementation \"io.github.jhipster:jhipster-framework\"\n     implementation \"org.springframework.boot:spring-boot-starter-cache:${spring_boot_version}\"\n-    implementation \"io.micrometer:micrometer-registry-prometheus:1.5.1\"\n+    implementation \"io.micrometer:micrometer-registry-prometheus:1.3.5\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412bc6b3b5581db179fa918dad449caa498e2165"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78df486e19e84ffa98e0cd2bf4d0de8fe0cd03a2", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/78df486e19e84ffa98e0cd2bf4d0de8fe0cd03a2", "committedDate": "2020-06-09T09:42:17Z", "message": "Revert micrometer-registry-prometheus version."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fcf5432539d30b00500645ad2f1a266b6fe6f92", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/4fcf5432539d30b00500645ad2f1a266b6fe6f92", "committedDate": "2020-06-09T11:28:52Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTE5OTk5", "url": "https://github.com/ls1intum/Artemis/pull/1586#pullrequestreview-427119999", "createdAt": "2020-06-09T13:02:37Z", "commit": {"oid": "4fcf5432539d30b00500645ad2f1a266b6fe6f92"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64e604b74b540f6ff0eb8c67d39c4c96ddcf817", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/f64e604b74b540f6ff0eb8c67d39c4c96ddcf817", "committedDate": "2020-06-09T15:30:43Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/d59ae206f0089d65bd2fe677c862addec7382dc3", "committedDate": "2020-06-09T15:33:28Z", "message": "Merge branch 'develop' into feature/jhipster-registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDgyMTUy", "url": "https://github.com/ls1intum/Artemis/pull/1586#pullrequestreview-427482152", "createdAt": "2020-06-09T19:39:21Z", "commit": {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozOToyMVrOGhZa1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo1MDoxNlrOGhZxrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjY2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.registration == null) {\n          \n          \n            \n                    if (registration == null) {\n          \n      \n    \n    \n  \n\nUnneeded this", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437672662", "createdAt": "2020-06-09T19:39:21Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/config/CacheConfiguration.java", "diffHunk": "@@ -1,215 +1,127 @@\n package de.tum.in.www1.artemis.config;\n \n-import java.time.Duration;\n+import javax.annotation.PreDestroy;\n \n-import javax.cache.CacheManager;\n-\n-import org.ehcache.config.builders.CacheConfigurationBuilder;\n-import org.ehcache.config.builders.ExpiryPolicyBuilder;\n-import org.ehcache.config.builders.ResourcePoolsBuilder;\n-import org.ehcache.jsr107.Eh107Configuration;\n-import org.hibernate.cache.jcache.ConfigSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;\n-import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.info.BuildProperties;\n import org.springframework.boot.info.GitProperties;\n+import org.springframework.cache.CacheManager;\n import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.cache.interceptor.KeyGenerator;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.client.serviceregistry.Registration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.Profiles;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n \n-import de.tum.in.www1.artemis.domain.*;\n-import de.tum.in.www1.artemis.domain.exam.Exam;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.exam.StudentExam;\n-import de.tum.in.www1.artemis.domain.modeling.*;\n-import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n-import de.tum.in.www1.artemis.domain.notification.Notification;\n-import de.tum.in.www1.artemis.domain.notification.SingleUserNotification;\n-import de.tum.in.www1.artemis.domain.notification.SystemNotification;\n-import de.tum.in.www1.artemis.domain.participation.Participation;\n-import de.tum.in.www1.artemis.domain.participation.TutorParticipation;\n-import de.tum.in.www1.artemis.domain.quiz.*;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n+import io.github.jhipster.config.JHipsterConstants;\n import io.github.jhipster.config.JHipsterProperties;\n import io.github.jhipster.config.cache.PrefixedKeyGenerator;\n \n @Configuration\n @EnableCaching\n public class CacheConfiguration {\n \n+    private final Logger log = LoggerFactory.getLogger(CacheConfiguration.class);\n+\n     private GitProperties gitProperties;\n \n     private BuildProperties buildProperties;\n \n-    private final javax.cache.configuration.Configuration<Object, Object> jcacheConfiguration;\n+    private final Environment env;\n+\n+    private final ServerProperties serverProperties;\n \n-    public CacheConfiguration(JHipsterProperties jHipsterProperties) {\n-        JHipsterProperties.Cache.Ehcache ehcache = jHipsterProperties.getCache().getEhcache();\n+    private final DiscoveryClient discoveryClient;\n \n-        jcacheConfiguration = Eh107Configuration.fromEhcacheCacheConfiguration(\n-                CacheConfigurationBuilder.newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder.heap(ehcache.getMaxEntries()))\n-                        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ehcache.getTimeToLiveSeconds()))).build());\n+    private Registration registration;\n+\n+    public CacheConfiguration(Environment env, ServerProperties serverProperties, DiscoveryClient discoveryClient) {\n+        this.env = env;\n+        this.serverProperties = serverProperties;\n+        this.discoveryClient = discoveryClient;\n+    }\n+\n+    @Autowired(required = false)\n+    public void setRegistration(Registration registration) {\n+        this.registration = registration;\n+    }\n+\n+    @PreDestroy\n+    public void destroy() {\n+        log.info(\"Closing Cache Manager\");\n+        Hazelcast.shutdownAll();\n     }\n \n     @Bean\n-    public HibernatePropertiesCustomizer hibernatePropertiesCustomizer(javax.cache.CacheManager cacheManager) {\n-        return hibernateProperties -> hibernateProperties.put(ConfigSettings.CACHE_MANAGER, cacheManager);\n+    public CacheManager cacheManager(HazelcastInstance hazelcastInstance) {\n+        log.debug(\"Starting HazelcastCacheManager\");\n+        return new com.hazelcast.spring.cache.HazelcastCacheManager(hazelcastInstance);\n     }\n \n     /**\n-     * @return the initialized cache manager\n+     * Setup the hazelcast instance based on the given jHipster properties and the enabled spring profiles.\n+     * @param jHipsterProperties the jhipster properties\n+     * @return the created HazelcastInstance\n      */\n     @Bean\n-    public JCacheManagerCustomizer cacheManagerCustomizer() {\n-        return cm -> {\n-            createIfNotExists(cm, UserRepository.USERS_CACHE, jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Authority.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".authorities\", jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".persistentTokens\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".exampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, LtiOutcomeUrl.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, LtiUserId.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".results\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName() + \".quizQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName() + \".answerOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, AnswerOption.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName() + \".selectedOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dropLocations\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dragItems\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName() + \".versions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmissionVersion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName() + \".submittedAnswers\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TextSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName() + \".quizExercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName() + \".feedbacks\", jcacheConfiguration);\n-            createIfNotExists(cm, Feedback.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, AnswerCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DropLocationCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".ratedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".unRatedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".ratedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".unRatedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".ratedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".unRatedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatisticCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, PointCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".pointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".answerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".dropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ApollonDiagram.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".submissions\", jcacheConfiguration);\n-            createIfNotExists(cm, TextExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName() + \".shortAnswerSpotCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpotCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".spots\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".solutions\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName() + \".submittedTexts\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedText.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, Complaint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ComplaintResponse.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName() + \".trainedExampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".lectures\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".tutorGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName() + \".answers\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestionAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Notification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SystemNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GroupNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SingleUserNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, Attachment.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName() + \".resultsInConflict\", jcacheConfiguration);\n-            createIfNotExists(cm, ConflictingResult.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExerciseTestCase.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseHint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GuidedTourSetting.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".guidedTourSettings\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".teams\", jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".gradingCriteria\", jcacheConfiguration);\n-            createIfNotExists(cm, GradingInstruction.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName() + \".structuredGradingInstructions\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, Exam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".exerciseGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".studentExams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".registeredUsers\", jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName() + \".exercises\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, \"files\", jcacheConfiguration);\n-        };\n-    }\n-\n-    // This method is a hotfix for the issue described in: https://github.com/jhipster/generator-jhipster/issues/5354.\n-    // During the execution of tests, spring boot will try to instantiate the same cache multiple times, leading to an error.\n-    // This issue appears if e.g. a MockBean is used in a test.\n-    private void createIfNotExists(CacheManager cacheManager, String cacheName, javax.cache.configuration.Configuration<Object, Object> cacheConfiguration) {\n-        if (cacheManager.getCache(cacheName) == null) {\n-            cacheManager.createCache(cacheName, cacheConfiguration);\n+    public HazelcastInstance hazelcastInstance(JHipsterProperties jHipsterProperties) {\n+        log.debug(\"Configuring Hazelcast\");\n+        HazelcastInstance hazelCastInstance = Hazelcast.getHazelcastInstanceByName(\"Artemis\");\n+        if (hazelCastInstance != null) {\n+            log.debug(\"Hazelcast already initialized\");\n+            return hazelCastInstance;\n+        }\n+        Config config = new Config();\n+        config.setInstanceName(\"Artemis\");\n+        config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);\n+        if (this.registration == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MzA3NA==", "bodyText": "Should \"Artemis\" be a constant? Or can we even inject and use spring.application.name OR hibernate.cache.hazelcast.instance_name?", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437673074", "createdAt": "2020-06-09T19:40:08Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/config/CacheConfiguration.java", "diffHunk": "@@ -1,215 +1,127 @@\n package de.tum.in.www1.artemis.config;\n \n-import java.time.Duration;\n+import javax.annotation.PreDestroy;\n \n-import javax.cache.CacheManager;\n-\n-import org.ehcache.config.builders.CacheConfigurationBuilder;\n-import org.ehcache.config.builders.ExpiryPolicyBuilder;\n-import org.ehcache.config.builders.ResourcePoolsBuilder;\n-import org.ehcache.jsr107.Eh107Configuration;\n-import org.hibernate.cache.jcache.ConfigSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;\n-import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.info.BuildProperties;\n import org.springframework.boot.info.GitProperties;\n+import org.springframework.cache.CacheManager;\n import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.cache.interceptor.KeyGenerator;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.client.serviceregistry.Registration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.Profiles;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n \n-import de.tum.in.www1.artemis.domain.*;\n-import de.tum.in.www1.artemis.domain.exam.Exam;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.exam.StudentExam;\n-import de.tum.in.www1.artemis.domain.modeling.*;\n-import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n-import de.tum.in.www1.artemis.domain.notification.Notification;\n-import de.tum.in.www1.artemis.domain.notification.SingleUserNotification;\n-import de.tum.in.www1.artemis.domain.notification.SystemNotification;\n-import de.tum.in.www1.artemis.domain.participation.Participation;\n-import de.tum.in.www1.artemis.domain.participation.TutorParticipation;\n-import de.tum.in.www1.artemis.domain.quiz.*;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n+import io.github.jhipster.config.JHipsterConstants;\n import io.github.jhipster.config.JHipsterProperties;\n import io.github.jhipster.config.cache.PrefixedKeyGenerator;\n \n @Configuration\n @EnableCaching\n public class CacheConfiguration {\n \n+    private final Logger log = LoggerFactory.getLogger(CacheConfiguration.class);\n+\n     private GitProperties gitProperties;\n \n     private BuildProperties buildProperties;\n \n-    private final javax.cache.configuration.Configuration<Object, Object> jcacheConfiguration;\n+    private final Environment env;\n+\n+    private final ServerProperties serverProperties;\n \n-    public CacheConfiguration(JHipsterProperties jHipsterProperties) {\n-        JHipsterProperties.Cache.Ehcache ehcache = jHipsterProperties.getCache().getEhcache();\n+    private final DiscoveryClient discoveryClient;\n \n-        jcacheConfiguration = Eh107Configuration.fromEhcacheCacheConfiguration(\n-                CacheConfigurationBuilder.newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder.heap(ehcache.getMaxEntries()))\n-                        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ehcache.getTimeToLiveSeconds()))).build());\n+    private Registration registration;\n+\n+    public CacheConfiguration(Environment env, ServerProperties serverProperties, DiscoveryClient discoveryClient) {\n+        this.env = env;\n+        this.serverProperties = serverProperties;\n+        this.discoveryClient = discoveryClient;\n+    }\n+\n+    @Autowired(required = false)\n+    public void setRegistration(Registration registration) {\n+        this.registration = registration;\n+    }\n+\n+    @PreDestroy\n+    public void destroy() {\n+        log.info(\"Closing Cache Manager\");\n+        Hazelcast.shutdownAll();\n     }\n \n     @Bean\n-    public HibernatePropertiesCustomizer hibernatePropertiesCustomizer(javax.cache.CacheManager cacheManager) {\n-        return hibernateProperties -> hibernateProperties.put(ConfigSettings.CACHE_MANAGER, cacheManager);\n+    public CacheManager cacheManager(HazelcastInstance hazelcastInstance) {\n+        log.debug(\"Starting HazelcastCacheManager\");\n+        return new com.hazelcast.spring.cache.HazelcastCacheManager(hazelcastInstance);\n     }\n \n     /**\n-     * @return the initialized cache manager\n+     * Setup the hazelcast instance based on the given jHipster properties and the enabled spring profiles.\n+     * @param jHipsterProperties the jhipster properties\n+     * @return the created HazelcastInstance\n      */\n     @Bean\n-    public JCacheManagerCustomizer cacheManagerCustomizer() {\n-        return cm -> {\n-            createIfNotExists(cm, UserRepository.USERS_CACHE, jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Authority.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".authorities\", jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".persistentTokens\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".exampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, LtiOutcomeUrl.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, LtiUserId.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".results\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName() + \".quizQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName() + \".answerOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, AnswerOption.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName() + \".selectedOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dropLocations\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dragItems\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName() + \".versions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmissionVersion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName() + \".submittedAnswers\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TextSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName() + \".quizExercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName() + \".feedbacks\", jcacheConfiguration);\n-            createIfNotExists(cm, Feedback.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, AnswerCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DropLocationCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".ratedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".unRatedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".ratedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".unRatedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".ratedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".unRatedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatisticCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, PointCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".pointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".answerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".dropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ApollonDiagram.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".submissions\", jcacheConfiguration);\n-            createIfNotExists(cm, TextExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName() + \".shortAnswerSpotCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpotCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".spots\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".solutions\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName() + \".submittedTexts\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedText.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, Complaint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ComplaintResponse.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName() + \".trainedExampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".lectures\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".tutorGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName() + \".answers\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestionAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Notification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SystemNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GroupNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SingleUserNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, Attachment.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName() + \".resultsInConflict\", jcacheConfiguration);\n-            createIfNotExists(cm, ConflictingResult.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExerciseTestCase.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseHint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GuidedTourSetting.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".guidedTourSettings\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".teams\", jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".gradingCriteria\", jcacheConfiguration);\n-            createIfNotExists(cm, GradingInstruction.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName() + \".structuredGradingInstructions\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, Exam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".exerciseGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".studentExams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".registeredUsers\", jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName() + \".exercises\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, \"files\", jcacheConfiguration);\n-        };\n-    }\n-\n-    // This method is a hotfix for the issue described in: https://github.com/jhipster/generator-jhipster/issues/5354.\n-    // During the execution of tests, spring boot will try to instantiate the same cache multiple times, leading to an error.\n-    // This issue appears if e.g. a MockBean is used in a test.\n-    private void createIfNotExists(CacheManager cacheManager, String cacheName, javax.cache.configuration.Configuration<Object, Object> cacheConfiguration) {\n-        if (cacheManager.getCache(cacheName) == null) {\n-            cacheManager.createCache(cacheName, cacheConfiguration);\n+    public HazelcastInstance hazelcastInstance(JHipsterProperties jHipsterProperties) {\n+        log.debug(\"Configuring Hazelcast\");\n+        HazelcastInstance hazelCastInstance = Hazelcast.getHazelcastInstanceByName(\"Artemis\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3Nzg0MQ==", "bodyText": "This is duplicating your additions in application-dev.yml. Is this needed?", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437677841", "createdAt": "2020-06-09T19:48:57Z", "author": {"login": "jpbernius"}, "path": "src/main/resources/config/application.yml", "diffHunk": "@@ -101,6 +101,10 @@ spring:\n             hibernate.order_updates: true\n #            hibernate.query.fail_on_pagination_over_collection_fetch: true  # not appropriate in our case: https://vladmihalcea.com/hibernate-query-fail-on-pagination-over-collection-fetch/\n             hibernate.query.in_clause_parameter_padding: true\n+            hibernate.cache.region.factory_class: com.hazelcast.hibernate.HazelcastCacheRegionFactory\n+            hibernate.cache.use_minimal_puts: true\n+            hibernate.cache.hazelcast.instance_name: Artemis\n+            hibernate.cache.hazelcast.use_lite_member: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODUxMA==", "bodyText": "Also duplicated config here?", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437678510", "createdAt": "2020-06-09T19:50:16Z", "author": {"login": "jpbernius"}, "path": "src/main/resources/config/application.yml", "diffHunk": "@@ -164,3 +168,41 @@ jhipster:\n         #max-age: 1800\n     mail:\n         from: artemis@localhost\n+    registry:\n+        password: AN-ADMIN-PASSWORD-THAT-MUST-BE-CHANGED (FROM REGISTRY CONFIG)\n+    cache: # Cache configuration\n+        hazelcast: # Hazelcast distributed cache\n+            time-to-live-seconds: 3600\n+            backup-count: 1\n+            management-center: # Full reference is available at: http://docs.hazelcast.org/docs/management-center/3.9/manual/html/Deploying_and_Starting.html\n+                enabled: false\n+                update-interval: 3\n+                url: http://localhost:8180/hazelcast-mancenter/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e7971672b191d0f53a409b3cc6c510ac57d819", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/18e7971672b191d0f53a409b3cc6c510ac57d819", "committedDate": "2020-06-09T20:33:40Z", "message": "Update src/main/java/de/tum/in/www1/artemis/config/CacheConfiguration.java\n\nCo-authored-by: Jan Philip Bernius <janphilip.bernius@tum.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb0e68b2769acde6033a30b2475ac2c82bd55e2", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/acb0e68b2769acde6033a30b2475ac2c82bd55e2", "committedDate": "2020-06-09T20:35:24Z", "message": "update server dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e2a12e8923e5a11534f780613be7f1e83e1221", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/17e2a12e8923e5a11534f780613be7f1e83e1221", "committedDate": "2020-06-09T20:35:57Z", "message": "Merge branch 'feature/jhipster-registry' of https://github.com/ls1intum/Artemis into feature/jhipster-registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e5d76ef443eaf3eb57cfb3d6a32606cff2e689", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d4e5d76ef443eaf3eb57cfb3d6a32606cff2e689", "committedDate": "2020-06-09T21:23:38Z", "message": "fix compile errors after upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9adfd45498021a89ee8492db13e6724815bb432", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f9adfd45498021a89ee8492db13e6724815bb432", "committedDate": "2020-06-10T12:17:10Z", "message": "change max size policy to Per_Node in Hazelcast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bd92c6fdd225ce6e23379dfcdc2ef05520b79d7", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5bd92c6fdd225ce6e23379dfcdc2ef05520b79d7", "committedDate": "2020-06-10T12:49:48Z", "message": "fix weird test errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9155729f009b91e0ae2af70466b42b8696954412", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9155729f009b91e0ae2af70466b42b8696954412", "committedDate": "2020-06-10T13:08:57Z", "message": "add entry to application.yml to prevent warning during tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08f8a3e50e7bd2cf0f66221b6a7b05928481240", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/d08f8a3e50e7bd2cf0f66221b6a7b05928481240", "committedDate": "2020-06-10T14:29:09Z", "message": "Remove unneeded config values and load instance name from config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d17f65aaffa5bc342d11dd12031cf453206a9a", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/f8d17f65aaffa5bc342d11dd12031cf453206a9a", "committedDate": "2020-06-10T14:34:10Z", "message": "Remove more unneeded config values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f730e5b056b29fb97e80c107b2ec2f524529d8d", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/8f730e5b056b29fb97e80c107b2ec2f524529d8d", "committedDate": "2020-06-10T15:14:00Z", "message": "Fix value injection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03fa1f44ad5af27a951aba01d29845a5e036a5bd", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/03fa1f44ad5af27a951aba01d29845a5e036a5bd", "committedDate": "2020-06-10T18:51:52Z", "message": "Add instance name to test config."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDE0MzI5", "url": "https://github.com/ls1intum/Artemis/pull/1586#pullrequestreview-428414329", "createdAt": "2020-06-10T20:45:04Z", "commit": {"oid": "03fa1f44ad5af27a951aba01d29845a5e036a5bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2761, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}