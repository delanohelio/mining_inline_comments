{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzI1NTkz", "number": 2012, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDowNjowMVrOEajPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowMzo0MVrOEaqsdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mjc1ODY2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/orion/orion-connector.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDowNjowMVrOHEDRfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo0NzoyMFrOHEKtwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwOTk4Mw==", "bodyText": "does this type change introduce errors in the orion plugin? I am not sure if it can handle that correctly", "url": "https://github.com/ls1intum/Artemis/pull/2012#discussion_r474009983", "createdAt": "2020-08-20T14:06:01Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/shared/orion/orion-connector.service.ts", "diffHunk": "@@ -130,7 +130,7 @@ export class OrionConnectorService implements ArtemisOrionConnector {\n      *\n      * @param buildErrors All compile errors for the current build\n      */\n-    onBuildFailed(buildErrors: BuildLogErrors) {\n+    onBuildFailed(buildErrors: Array<Annotation>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2add8084d445291ae7368a7438753ba028977bd2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzMDYwNg==", "bodyText": "i will look into it", "url": "https://github.com/ls1intum/Artemis/pull/2012#discussion_r474030606", "createdAt": "2020-08-20T14:34:12Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/shared/orion/orion-connector.service.ts", "diffHunk": "@@ -130,7 +130,7 @@ export class OrionConnectorService implements ArtemisOrionConnector {\n      *\n      * @param buildErrors All compile errors for the current build\n      */\n-    onBuildFailed(buildErrors: BuildLogErrors) {\n+    onBuildFailed(buildErrors: Array<Annotation>) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwOTk4Mw=="}, "originalCommit": {"oid": "2add8084d445291ae7368a7438753ba028977bd2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMTkwNg==", "bodyText": "I added code to transform the annotations to the format used by orion.", "url": "https://github.com/ls1intum/Artemis/pull/2012#discussion_r474131906", "createdAt": "2020-08-20T16:47:20Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/shared/orion/orion-connector.service.ts", "diffHunk": "@@ -130,7 +130,7 @@ export class OrionConnectorService implements ArtemisOrionConnector {\n      *\n      * @param buildErrors All compile errors for the current build\n      */\n-    onBuildFailed(buildErrors: BuildLogErrors) {\n+    onBuildFailed(buildErrors: Array<Annotation>) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwOTk4Mw=="}, "originalCommit": {"oid": "2add8084d445291ae7368a7438753ba028977bd2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzk3OTQwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/shared/code-editor/ace/code-editor-ace.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowMzo0MVrOHEPR4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowNzowM1rOHERgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNjY5MA==", "bodyText": "I think you could merge the two maps into one and save one loop", "url": "https://github.com/ls1intum/Artemis/pull/2012#discussion_r474206690", "createdAt": "2020-08-20T19:03:41Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/programming/shared/code-editor/ace/code-editor-ace.component.ts", "diffHunk": "@@ -208,8 +177,115 @@ export class CodeEditorAceComponent implements AfterViewInit, OnChanges, OnDestr\n         if (this.annotationChange) {\n             this.annotationChange.unsubscribe();\n         }\n-        if (this.resizeSubscription) {\n-            this.resizeSubscription.unsubscribe();\n+    }\n+\n+    /**\n+     * Recalculates the position of annotations according to changes in the editor.\n+     * Annotations are affected by changes in previous rows for row updates,\n+     * in the same row and previous columns for column updates.\n+     * @param change\n+     */\n+    updateAnnotations(change: TextChange) {\n+        const {\n+            start: { row: rowStart, column: columnStart },\n+            end: { row: rowEnd, column: columnEnd },\n+            action,\n+        } = change;\n+        if (action === 'remove' || action === 'insert') {\n+            const sign = action === 'remove' ? -1 : 1;\n+            const updateRowDiff = sign * (rowEnd - rowStart);\n+            const updateColDiff = sign * (columnEnd - columnStart);\n+\n+            this.annotationsArray = this.annotationsArray.map((a) => {\n+                return this.selectedFile !== a.fileName\n+                    ? a\n+                    : {\n+                          ...a,\n+                          row: a.row > rowStart ? a.row + updateRowDiff : a.row,\n+                          column: a.column > columnStart && a.row === rowStart && a.row === rowEnd ? a.column + updateColDiff : a.column,\n+                      };\n+            });\n+            this.displayAnnotations();\n+        }\n+    }\n+\n+    /**\n+     * Sets the annotations for the editor.\n+     * Checks for each annotation whether an updated version exists in local storage.\n+     * @param annotations The new annotations array\n+     */\n+    setAnnotations(annotations: Array<Annotation> = []) {\n+        if (annotations.length > 0) {\n+            const sessionAnnotations = this.loadAnnotations();\n+            this.annotationsArray = annotations\n+                .map((a) => ({ ...a, hash: a.fileName + a.row + a.column + a.text }))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "218ad1126a35c00e6f16446070784a3a983c4c32"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MzIwOQ==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/2012#discussion_r474243209", "createdAt": "2020-08-20T20:07:03Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/exercises/programming/shared/code-editor/ace/code-editor-ace.component.ts", "diffHunk": "@@ -208,8 +177,115 @@ export class CodeEditorAceComponent implements AfterViewInit, OnChanges, OnDestr\n         if (this.annotationChange) {\n             this.annotationChange.unsubscribe();\n         }\n-        if (this.resizeSubscription) {\n-            this.resizeSubscription.unsubscribe();\n+    }\n+\n+    /**\n+     * Recalculates the position of annotations according to changes in the editor.\n+     * Annotations are affected by changes in previous rows for row updates,\n+     * in the same row and previous columns for column updates.\n+     * @param change\n+     */\n+    updateAnnotations(change: TextChange) {\n+        const {\n+            start: { row: rowStart, column: columnStart },\n+            end: { row: rowEnd, column: columnEnd },\n+            action,\n+        } = change;\n+        if (action === 'remove' || action === 'insert') {\n+            const sign = action === 'remove' ? -1 : 1;\n+            const updateRowDiff = sign * (rowEnd - rowStart);\n+            const updateColDiff = sign * (columnEnd - columnStart);\n+\n+            this.annotationsArray = this.annotationsArray.map((a) => {\n+                return this.selectedFile !== a.fileName\n+                    ? a\n+                    : {\n+                          ...a,\n+                          row: a.row > rowStart ? a.row + updateRowDiff : a.row,\n+                          column: a.column > columnStart && a.row === rowStart && a.row === rowEnd ? a.column + updateColDiff : a.column,\n+                      };\n+            });\n+            this.displayAnnotations();\n+        }\n+    }\n+\n+    /**\n+     * Sets the annotations for the editor.\n+     * Checks for each annotation whether an updated version exists in local storage.\n+     * @param annotations The new annotations array\n+     */\n+    setAnnotations(annotations: Array<Annotation> = []) {\n+        if (annotations.length > 0) {\n+            const sessionAnnotations = this.loadAnnotations();\n+            this.annotationsArray = annotations\n+                .map((a) => ({ ...a, hash: a.fileName + a.row + a.column + a.text }))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNjY5MA=="}, "originalCommit": {"oid": "218ad1126a35c00e6f16446070784a3a983c4c32"}, "originalPosition": 185}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4615, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}