{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDA3NDk3", "number": 1684, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDo0MTo1OFrOEHWj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODo0NjoxM1rOEHez-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQ1MTI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDo0MTo1OFrOGmrKpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODozNzo1OVrOGm3HUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNjMxMQ==", "bodyText": "do we only support java atm? I know that @anditurdiu was working on programming exercises in other languages which will come at some point in the future (if not already there). Should the programming language also be configurable?", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443206311", "createdAt": "2020-06-21T10:41:58Z", "author": {"login": "TobiasPr"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -71,6 +71,17 @@ public static ProgrammingExercise generateProgrammingExercise(ZonedDateTime rele\n         return programmingExercise;\n     }\n \n+    public static ProgrammingExercise generateProgrammingExerciseForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate, ExerciseGroup exerciseGroup) {\n+        ProgrammingExercise programmingExercise = new ProgrammingExercise();\n+        programmingExercise = (ProgrammingExercise) populateExerciseForExam(programmingExercise, releaseDate, dueDate, null, exerciseGroup);\n+        programmingExercise.generateAndSetProjectKey();\n+        programmingExercise.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.JAVA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwMjA2NQ==", "bodyText": "this is only a test case", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443402065", "createdAt": "2020-06-22T08:37:59Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -71,6 +71,17 @@ public static ProgrammingExercise generateProgrammingExercise(ZonedDateTime rele\n         return programmingExercise;\n     }\n \n+    public static ProgrammingExercise generateProgrammingExerciseForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate, ExerciseGroup exerciseGroup) {\n+        ProgrammingExercise programmingExercise = new ProgrammingExercise();\n+        programmingExercise = (ProgrammingExercise) populateExerciseForExam(programmingExercise, releaseDate, dueDate, null, exerciseGroup);\n+        programmingExercise.generateAndSetProjectKey();\n+        programmingExercise.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.JAVA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNjMxMQ=="}, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjc5NDUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODo0Mzo1MlrOGm3UVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODo0Mzo1MlrOGm3UVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwNTM5OA==", "bodyText": "comment is wrong", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443405398", "createdAt": "2020-06-22T08:43:52Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -167,6 +171,90 @@ public void testRegisterUsersInExam() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testStartExercisesWithTextExercise() throws Exception {\n+        // registering users\n+        var student1 = database.getUserByLogin(\"student1\");\n+        var student2 = database.getUserByLogin(\"student2\");\n+        var registeredUsers = Set.of(student1, student2);\n+        exam2.setRegisteredUsers(registeredUsers);\n+        // setting dates\n+        exam2.setStartDate(ZonedDateTime.now().plusHours(2));\n+        exam2.setEndDate(ZonedDateTime.now().plusHours(3));\n+        exam2.setVisibleDate(ZonedDateTime.now().plusHours(1));\n+\n+        // creating exercise\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(exam2.getStartDate(), exam2.getEndDate(), exam2.getEndDate().plusWeeks(2),\n+                exam2.getExerciseGroups().get(0));\n+        exam2.getExerciseGroups().get(0).addExercise(textExercise);\n+        exerciseGroupRepository.save(exam2.getExerciseGroups().get(0));\n+        textExercise = exerciseRepo.save(textExercise);\n+\n+        // creating student exams\n+        for (User user : registeredUsers) {\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.addExercise(textExercise);\n+            studentExam.setUser(user);\n+            exam2.addStudentExam(studentExam);\n+            studentExamRepository.save(studentExam);\n+        }\n+\n+        exam2 = examRepository.save(exam2);\n+\n+        // invoke generate student exams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjgwMDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODo0NTo0MVrOGm3YaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo0ODoyMVrOGm7fMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwNjQ0MQ==", "bodyText": "Please do not use Transactional here and rather use a query such as\nstudentExamRepository.findWithExercisesAndParticipationsByExamId\nThen make sure that only the participations for the user of the student exam is loaded, otherwise your \"isEmpty()\" check does not make any sense later on", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443406441", "createdAt": "2020-06-22T08:45:41Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -297,4 +302,24 @@ private Exercise selectRandomExercise(SecureRandom random, ExerciseGroup exercis\n         int randomIndex = random.nextInt(exercises.size());\n         return exercises.get(randomIndex);\n     }\n+\n+    /**\n+     * Starts all the exercises of all the student exams of an exam\n+     *\n+     * @param examId exam to which the student exams belong\n+     * @return list of generated participations\n+     */\n+    @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3MzcxMw==", "bodyText": "I'll add comments and we have to improve this later on, but as others need this functionality for testing, we'll merge this now", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443473713", "createdAt": "2020-06-22T10:48:21Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -297,4 +302,24 @@ private Exercise selectRandomExercise(SecureRandom random, ExerciseGroup exercis\n         int randomIndex = random.nextInt(exercises.size());\n         return exercises.get(randomIndex);\n     }\n+\n+    /**\n+     * Starts all the exercises of all the student exams of an exam\n+     *\n+     * @param examId exam to which the student exams belong\n+     * @return list of generated participations\n+     */\n+    @Transactional", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwNjQ0MQ=="}, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjgwMzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODo0NjoxM1rOGm3ZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo0ODoyNFrOGm7fTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwNjc4OA==", "bodyText": "exercise.getStudentParticipations().isEmpty() is problematic here, because it might include participations of other users than the user specified in the studentExam", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443406788", "createdAt": "2020-06-22T08:46:13Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -297,4 +302,24 @@ private Exercise selectRandomExercise(SecureRandom random, ExerciseGroup exercis\n         int randomIndex = random.nextInt(exercises.size());\n         return exercises.get(randomIndex);\n     }\n+\n+    /**\n+     * Starts all the exercises of all the student exams of an exam\n+     *\n+     * @param examId exam to which the student exams belong\n+     * @return list of generated participations\n+     */\n+    @Transactional\n+    public List<Participation> startExercises(Long examId) {\n+        List<StudentExam> studentExams = studentExamRepository.findByExamId(examId);\n+        List<Participation> generatedParticipations = new ArrayList<>();\n+\n+        for (StudentExam studentExam : studentExams) {\n+            User student = studentExam.getUser();\n+            studentExam.getExercises().stream().filter(exercise -> exercise.getStudentParticipations().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3Mzc0MA==", "bodyText": "I'll add comments and we have to improve this later on, but as others need this functionality for testing, we'll merge this now", "url": "https://github.com/ls1intum/Artemis/pull/1684#discussion_r443473740", "createdAt": "2020-06-22T10:48:24Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -297,4 +302,24 @@ private Exercise selectRandomExercise(SecureRandom random, ExerciseGroup exercis\n         int randomIndex = random.nextInt(exercises.size());\n         return exercises.get(randomIndex);\n     }\n+\n+    /**\n+     * Starts all the exercises of all the student exams of an exam\n+     *\n+     * @param examId exam to which the student exams belong\n+     * @return list of generated participations\n+     */\n+    @Transactional\n+    public List<Participation> startExercises(Long examId) {\n+        List<StudentExam> studentExams = studentExamRepository.findByExamId(examId);\n+        List<Participation> generatedParticipations = new ArrayList<>();\n+\n+        for (StudentExam studentExam : studentExams) {\n+            User student = studentExam.getUser();\n+            studentExam.getExercises().stream().filter(exercise -> exercise.getStudentParticipations().isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwNjc4OA=="}, "originalCommit": {"oid": "f6e6ba18a09ee439b661bc1dd1e63ea14564e374"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4902, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}