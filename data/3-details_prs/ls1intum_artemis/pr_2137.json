{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTgyMjEz", "number": 2137, "title": "[Enhancement] AssessmentDueDate for programming exercises", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features (with a high test coverage)\n Client: I added multiple integration tests (Jest) related to the features (with a high test coverage)\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\n\n\nThe assessment due date was not fully implemented for programming exercises. Furthermore, this solves also an issue which we encountered during testing of #2131. Student could see in the response of the REST call the result of his submission even though he should not be able to as the assessment due date was not passed.\nDescription\n\n\nAdded check for assessmentDueDate in findResultsFilteredForStudents for the exercise /details REST call\nImplemented override for findResultsFilteredForStudents for programming exercises /for-dashboard REST call\nImplemented override for findLatestSubmissionWithRatedResultWithCompletionDate\nAdapted database query to check for assessmentDueDate for the Student CodeEditor\nAdded label to indicate that the assessment due date has passed and that the results will be published immediately (when assessing a exercise for the first time after the assessment due date)\nRemove result button on scores page when assessment due date is in the past (programming exercises)\n\nSteps for Testing\n\nAlert and functionality in assessment view when assessment due date is in the past\n\nLog in to Artemis\nNavigate to Course Administration\nCreate a exercise (Programming, File Upload, Modeling and Text)\nParticipate on exercise\nSet Assessment Due Date\nCheck if alert is there which indicates that first assessment of submission will be published immediately when assessment due date is in the past\nCheck (as tutor) that after you clicked on submit the override button is not displayed anymore (as instructor you can override as usual)\nGo to the scores page of the programming exercise, there the result button should not be displayed anymore when the assessment due date is in the past\n\nPublishing of results before assessment due date and after assessment due date (student)\n\nLog in to Artemis as tutor/instructor\nNavigate to Course Administration\nRemove assessment due date from created exercises and assess the submissions\nLogin as student, but keep logged in as well as tutor/instructor\nGo to course overview -> select your course -> check if you can see the assessed result (course-exercise view + course exercise detail view + student submission view (e.g. Student Code Editor)\nCheck that the assessed result is displayed\nNow set a assessment due date in the future\nCheck that for Modeling, FileUpload and Text no result is displayed at all. For Programming you should see the automatic result\nSet the assessment due date now in the past\nCheck that for all exercises the latest manual result is displayed.\nCheck also network tab for the three views, that no result is send out before the assessment due date :)\n\nTest Coverage\n\n\nExerciseService.java: 85%\nprogramming-exercise.component.ts 95%\n\nScreenshots\n\n\nAlert and functionality in assessment view when assessment due date is in the past (tutor/instructor)\nAlert that indicates that the first assessment of a submission will be published immediately:\n\nNo override button when assessment due date is in the past:\n\nResult button on scores pages before assessment due date:\n\n..and after assessment due date:\n\nPublishing of results before assessment due date and after assessment due date (student)\nBefore assessment due date - Course exercise view:\n\nBefore assessment due date - Course exercise detail view:\n\nBefore assessment due date - Student submission view:\n\nAfter assessment due date - Course exercise view:\n\nAfter assessment due date - Course exercise detail view:\n\nAfter assessment due date - Student submission view:", "createdAt": "2020-09-29T17:14:00Z", "url": "https://github.com/ls1intum/Artemis/pull/2137", "merged": true, "mergeCommit": {"oid": "f8f19039c3204b59d5298659082769fadbd79030"}, "closed": true, "closedAt": "2020-10-06T22:19:53Z", "author": {"login": "fde312"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNUvtmAH2gAyNDk0OTgyMjEzOmJjZDM2ODJjYTEzMzc0NGEyMTE2YmM4NTY5NGJlOGY4YjIwYzlmZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP__dbAFqTUwMzM5OTUxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcd3682ca133744a2116bc85694be8f8b20c9ff0", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/bcd3682ca133744a2116bc85694be8f8b20c9ff0", "committedDate": "2020-09-28T14:48:28Z", "message": "fix result for participation endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333ab1960a7a95c154f81e838e0c89479b8bd35b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/333ab1960a7a95c154f81e838e0c89479b8bd35b", "committedDate": "2020-09-29T16:13:18Z", "message": "filter out results when the assessment due date is not over"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf949d8b1d7ff4f8d6b5ec10ff84c1976804bb9b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/cf949d8b1d7ff4f8d6b5ec10ff84c1976804bb9b", "committedDate": "2020-09-29T16:14:32Z", "message": "override for programming exercises, show only manual result when assessment due date is passed or null, else show automatic result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bea84dcbf72e8ae97f982375557623418c0a9cd4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/bea84dcbf72e8ae97f982375557623418c0a9cd4", "committedDate": "2020-09-29T16:55:52Z", "message": "add override for for-dashboard call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c89a7e23e8b1041d3da4697cc914323c9f372348", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c89a7e23e8b1041d3da4697cc914323c9f372348", "committedDate": "2020-09-29T17:05:24Z", "message": "add todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cff4394293365451e8e5415304b85b2679c960f", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/9cff4394293365451e8e5415304b85b2679c960f", "committedDate": "2020-09-29T17:35:18Z", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfb133bc5f27fb493528570c2540b217ddc0dfda", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/bfb133bc5f27fb493528570c2540b217ddc0dfda", "committedDate": "2020-10-01T16:28:57Z", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f75369a08f23efd5be14d64c84ddfd51e28880d3", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/f75369a08f23efd5be14d64c84ddfd51e28880d3", "committedDate": "2020-10-01T18:18:43Z", "message": "Fix and improve tests for GET /student-participaton-with-latest-result-and-feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7205852c9c0b69b359cb8c59e50bf905d6a4e0", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/cc7205852c9c0b69b359cb8c59e50bf905d6a4e0", "committedDate": "2020-10-02T19:01:28Z", "message": "fix empty results array error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980464363638f2633ce7887732ff82043512c7a4", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/980464363638f2633ce7887732ff82043512c7a4", "committedDate": "2020-10-02T19:04:16Z", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d72346e1dd8e8ec7ecc416f68981fe6b793881c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2d72346e1dd8e8ec7ecc416f68981fe6b793881c", "committedDate": "2020-10-05T06:14:13Z", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into bugfix/hide-manual-assessment-draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641d19fa646e553f797a095ddc17a94174fcaacc", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/641d19fa646e553f797a095ddc17a94174fcaacc", "committedDate": "2020-10-05T10:24:15Z", "message": "add check for manual assessment for programming exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "170a1cf5250b9dd26d3e93da31273e6de1bb8b59", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/170a1cf5250b9dd26d3e93da31273e6de1bb8b59", "committedDate": "2020-10-05T13:26:54Z", "message": "remove manual result button from scores page after assessment due date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5de816dd5f713ba977180c7f64b4fbe32566d2", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4c5de816dd5f713ba977180c7f64b4fbe32566d2", "committedDate": "2020-10-06T01:53:01Z", "message": "add warning when assessment due date is over"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93f0f3d373b5c273f5636589267af0e232eb3efb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/93f0f3d373b5c273f5636589267af0e232eb3efb", "committedDate": "2020-10-06T06:50:13Z", "message": "add client test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183816508443aeb2ebc2b83182bf8d87809baee4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/183816508443aeb2ebc2b83182bf8d87809baee4", "committedDate": "2020-10-06T07:24:37Z", "message": "run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7114332197a05bb1fc7fbdee184be1f7222ba84e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7114332197a05bb1fc7fbdee184be1f7222ba84e", "committedDate": "2020-10-06T12:07:57Z", "message": "add server test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eaad59a156264e98b97c6930267d0cb94313897", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9eaad59a156264e98b97c6930267d0cb94313897", "committedDate": "2020-10-06T15:56:38Z", "message": "adapt databaseUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc5129f17d72ce0128d041a07f0455e9a37af353", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/fc5129f17d72ce0128d041a07f0455e9a37af353", "committedDate": "2020-10-06T16:15:11Z", "message": "add more server tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba2c8d85e14db5c3c494a5ed36858011b97800ea", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ba2c8d85e14db5c3c494a5ed36858011b97800ea", "committedDate": "2020-10-06T16:53:11Z", "message": "fix failing tests and run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1e02996fd53c7a1a360240aa03fb334b780529ae", "committedDate": "2020-10-06T16:53:22Z", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into bugfix/hide-manual-assessment-draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgxOTQw", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503181940", "createdAt": "2020-10-06T17:07:06Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowNlrOHdRoeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowNlrOHdRoeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY0MQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459641", "createdAt": "2020-10-06T17:07:06Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgxOTY3", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503181967", "createdAt": "2020-10-06T17:07:07Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowN1rOHdRoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowN1rOHdRoiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY1Nw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459657", "createdAt": "2020-10-06T17:07:07Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -482,6 +486,44 @@ public void filterSensitiveInformation() {\n         super.filterSensitiveInformation();\n     }\n \n+    @Override\n+    public Set<Result> findResultsFilteredForStudents(Participation participation) {\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream()\n+                .filter(result -> (result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgxOTgy", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503181982", "createdAt": "2020-10-06T17:07:08Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowOVrOHdRomA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowOVrOHdRomA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY3Mg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExerciseDetails_assessmentDueDate_notPassed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459672", "createdAt": "2020-10-06T17:07:09Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDAz", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182003", "createdAt": "2020-10-06T17:07:10Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMFrOHdRopg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMFrOHdRopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY4Ng==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'filterForCourseDashboard_assessmentDueDate_passed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459686", "createdAt": "2020-10-06T17:07:10Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(true);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add an manual result, to check whether this is correctly displayed after the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should now how two results and the latest one is the manual result.\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(2);\n+                    assertThat(participation.getResults().stream().sorted(Comparator.comparing(Result::getId).reversed()).iterator().next().getAssessmentType())\n+                            .isEqualTo(AssessmentType.MANUAL);\n+                }\n+                else {\n+                    // All other exercises have only one visible result now\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_notPassed() {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                exercise.getStudentParticipations().iterator().next().setResults(Set\n+                        .of(database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next())));\n+            }\n+            exerciseService.filterForCourseDashboard(exercise, List.copyOf(exercise.getStudentParticipations()), \"student1\", true);\n+            // Programming exercises should only have one automatic result\n+            if (exercise instanceof ProgrammingExercise) {\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(1);\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+            }\n+            else if (exercise instanceof QuizExercise) {\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(1);\n+            }\n+            else {\n+                // All other exercises have only one visible result now\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(0);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_passed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDIw", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182020", "createdAt": "2020-10-06T17:07:11Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMVrOHdRosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMVrOHdRosg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY5OA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459698", "createdAt": "2020-10-06T17:07:11Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -482,6 +486,44 @@ public void filterSensitiveInformation() {\n         super.filterSensitiveInformation();\n     }\n \n+    @Override\n+    public Set<Result> findResultsFilteredForStudents(Participation participation) {\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream()\n+                .filter(result -> (result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Submission findLatestSubmissionWithRatedResultWithCompletionDate(Participation participation, Boolean ignoreAssessmentDueDate) {\n+        // for most types of exercises => return latest result (all results are relevant)\n+        Submission latestSubmission = null;\n+        // we get the results over the submissions\n+        if (participation.getSubmissions() == null || participation.getSubmissions().isEmpty()) {\n+            return null;\n+        }\n+        for (var submission : participation.getSubmissions()) {\n+            var result = submission.getResult();\n+            if (result == null) {\n+                continue;\n+            }\n+            // NOTE: for the dashboard we only use rated results with completion date or automatic result\n+            boolean isAssessmentOver = ignoreAssessmentDueDate || getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+            if ((result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDM1", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182035", "createdAt": "2020-10-06T17:07:12Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMlrOHdRovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMlrOHdRovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcxMQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459711", "createdAt": "2020-10-06T17:07:12Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        // Add an automatic result first\n+        var firstResult = addStudentParticipationWithResult(AssessmentType.AUTOMATIC, null);\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        // Add a parameterized second result\n+        var secondResult = database.addResultToParticipation(assessmentType, completionDate, programmingExerciseParticipation);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+\n+        // Expect the request to always be ok because it should at least return the first automatic result\n+        var requestedParticipation = request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+                ProgrammingExerciseStudentParticipation.class);\n+\n+        assertThat(requestedParticipation.getResults()).hasSize(1);\n+        var requestedResult = requestedParticipation.getResults().iterator().next();\n+        // Depending on the parameters we expect to get the first or the second created result from the server\n+        if (expectLastCreatedResult) {\n+            assertThat(requestedResult).isEqualTo(secondResult);\n+        }\n+        else {\n+            assertThat(requestedResult).isEqualTo(firstResult);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void getParticipationWithLatestResultAsAnInstructor() throws Exception {\n-        addStudentParticipationWithResult();\n+    public void getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDU2", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182056", "createdAt": "2020-10-06T17:07:13Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxM1rOHdRoyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxM1rOHdRoyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcyMw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459723", "createdAt": "2020-10-06T17:07:13Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -286,7 +288,9 @@ public void generateAndSetProjectKey() {\n     public Submission findAppropriateSubmissionByResults(Set<Submission> submissions) {\n         return submissions.stream().filter(submission -> {\n             if (submission.getResult() != null) {\n-                return submission.getResult().isRated();\n+                return (submission.getResult().isRated() && !submission.getResult().getAssessmentType().equals(AssessmentType.MANUAL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDcx", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182071", "createdAt": "2020-10-06T17:07:14Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNFrOHdRo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNFrOHdRo1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTczMw==", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setArgumentsForGetParticipationWithLatestResult()'.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459733", "createdAt": "2020-10-06T17:07:14Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDg0", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182084", "createdAt": "2020-10-06T17:07:15Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc0MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'filterForCourseDashboard_assessmentDueDate_notPassed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459740", "createdAt": "2020-10-06T17:07:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(true);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add an manual result, to check whether this is correctly displayed after the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should now how two results and the latest one is the manual result.\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(2);\n+                    assertThat(participation.getResults().stream().sorted(Comparator.comparing(Result::getId).reversed()).iterator().next().getAssessmentType())\n+                            .isEqualTo(AssessmentType.MANUAL);\n+                }\n+                else {\n+                    // All other exercises have only one visible result now\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_notPassed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMDky", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182092", "createdAt": "2020-10-06T17:07:15Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc0Mg==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The setter 'setArgumentsForGetParticipationWithLatestResult' should not return any type except void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459742", "createdAt": "2020-10-06T17:07:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTEw", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182110", "createdAt": "2020-10-06T17:07:16Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNlrOHdRo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNlrOHdRo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc1NQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459755", "createdAt": "2020-10-06T17:07:16Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -316,6 +316,15 @@ public static ModelingSubmission generateModelingSubmission(String model, boolea\n         return submission;\n     }\n \n+    public static QuizSubmission generateQuizSubmission(boolean submitted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTIz", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182123", "createdAt": "2020-10-06T17:07:17Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxN1rOHdRo9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxN1rOHdRo9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc2Ng==", "bodyText": "Codacy found an issue: The instance method name 'getParticipationWithLatestResult_multipleResultsAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459766", "createdAt": "2020-10-06T17:07:17Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTQy", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182142", "createdAt": "2020-10-06T17:07:19Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxOVrOHdRpAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxOVrOHdRpAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc3Ng==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResultAsAStudent' should not return void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459776", "createdAt": "2020-10-06T17:07:19Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTUz", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182153", "createdAt": "2020-10-06T17:07:20Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc4Mw==", "bodyText": "Codacy found an issue: Avoid really long methods.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459783", "createdAt": "2020-10-06T17:07:20Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -563,6 +563,164 @@ public Course createCourseWithExamAndExerciseGroupAndExercises(User user) {\n         return studentQuestions;\n     }\n \n+    public Course createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(boolean hasAssessmentDueDatePassed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTU4", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182158", "createdAt": "2020-10-06T17:07:20Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc4OA==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResult_multipleResultsAvailable' should not return void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459788", "createdAt": "2020-10-06T17:07:20Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTc1", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182175", "createdAt": "2020-10-06T17:07:21Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMVrOHdRpFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMVrOHdRpFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc5OQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExerciseDetails_assessmentDueDate_passed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459799", "createdAt": "2020-10-06T17:07:21Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTgyMTg1", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503182185", "createdAt": "2020-10-06T17:07:22Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMlrOHdRpHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMlrOHdRpHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTgwNg==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound' should not return void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459806", "createdAt": "2020-10-06T17:07:22Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        // Add an automatic result first\n+        var firstResult = addStudentParticipationWithResult(AssessmentType.AUTOMATIC, null);\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        // Add a parameterized second result\n+        var secondResult = database.addResultToParticipation(assessmentType, completionDate, programmingExerciseParticipation);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+\n+        // Expect the request to always be ok because it should at least return the first automatic result\n+        var requestedParticipation = request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+                ProgrammingExerciseStudentParticipation.class);\n+\n+        assertThat(requestedParticipation.getResults()).hasSize(1);\n+        var requestedResult = requestedParticipation.getResults().iterator().next();\n+        // Depending on the parameters we expect to get the first or the second created result from the server\n+        if (expectLastCreatedResult) {\n+            assertThat(requestedResult).isEqualTo(secondResult);\n+        }\n+        else {\n+            assertThat(requestedResult).isEqualTo(firstResult);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void getParticipationWithLatestResultAsAnInstructor() throws Exception {\n-        addStudentParticipationWithResult();\n+    public void getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1db642cf737eb35cf60b95c3529e5552f4551cf9", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1db642cf737eb35cf60b95c3529e5552f4551cf9", "committedDate": "2020-10-06T19:23:30Z", "message": "add translation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f587050d3f1091246a2c5ebe0dc232283a2c5626", "committedDate": "2020-10-06T19:38:01Z", "message": "fix flaky test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzI0ODcx", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503324871", "createdAt": "2020-10-06T20:16:50Z", "commit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxNjo1MFrOHdYXRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxNzowMVrOHdYXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2OTkyNQ==", "bodyText": "See reason given by Codacy.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n          \n          \n            \n                private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500569925", "createdAt": "2020-10-06T20:16:50Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDAyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n          \n          \n            \n                @MethodSource(\"argumentsForGetParticipationWithLatestResult\")", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500570028", "createdAt": "2020-10-06T20:17:01Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzI2MjUy", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503326252", "createdAt": "2020-10-06T20:18:51Z", "commit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxODo1MlrOHdYbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxODo1MlrOHdYbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDk1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());\n          \n          \n            \n                    if (!isAssessmentOver) {\n          \n          \n            \n                        return Set.of();\n          \n          \n            \n                    }\n          \n          \n            \n                    return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500570959", "createdAt": "2020-10-06T20:18:52Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -591,7 +591,8 @@ else if (resultDate1.isAfter(resultDate2)) {\n      * @return all results of given participation, or null, if none exist\n      */\n     public Set<Result> findResultsFilteredForStudents(Participation participation) {\n-        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzI2ODgy", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503326882", "createdAt": "2020-10-06T20:19:46Z", "commit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxOTo0NlrOHdYdMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxOTo0NlrOHdYdMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MTQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n          \n          \n            \n                @MethodSource(\"argumentsForGetParticipationWithLatestResult\")", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500571440", "createdAt": "2020-10-06T20:19:46Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "author": {"user": {"login": "fde312", "name": "Francisco De las Casas Young"}}, "url": "https://github.com/ls1intum/Artemis/commit/65d59c687b9b50e2bd6b28ed6e33a5767a48441c", "committedDate": "2020-10-06T21:10:27Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Simon Lei\u00df <5084100+sleiss@users.noreply.github.com>\nCo-authored-by: Christian Femers <c.femers@tum.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8283f3c0e2a658ad8153bfe6a887abb34ff9b566", "author": {"user": {"login": "fde312", "name": "Francisco De las Casas Young"}}, "url": "https://github.com/ls1intum/Artemis/commit/8283f3c0e2a658ad8153bfe6a887abb34ff9b566", "committedDate": "2020-10-06T21:18:55Z", "message": "Merge branch 'develop' into bugfix/hide-manual-assessment-draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzY4OTY1", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503368965", "createdAt": "2020-10-06T21:22:51Z", "commit": {"oid": "8283f3c0e2a658ad8153bfe6a887abb34ff9b566"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzc4MjEx", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503378211", "createdAt": "2020-10-06T21:38:25Z", "commit": {"oid": "8283f3c0e2a658ad8153bfe6a887abb34ff9b566"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzkyMzUz", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503392353", "createdAt": "2020-10-06T22:04:53Z", "commit": {"oid": "8283f3c0e2a658ad8153bfe6a887abb34ff9b566"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzk5NTE0", "url": "https://github.com/ls1intum/Artemis/pull/2137#pullrequestreview-503399514", "createdAt": "2020-10-06T22:19:27Z", "commit": {"oid": "8283f3c0e2a658ad8153bfe6a887abb34ff9b566"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4252, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}