{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNTcwNTM0", "number": 2299, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzo0MDozNlrOE1-eKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOTowMjo0MVrOE5JUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDMzNTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzo0MDozNlrOHujFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzo0MDozNlrOHujFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3MTM2NQ==", "bodyText": "Should be possible to allocate the HashSet in the groupingBy\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Map<Long, List<TextBlock>> textBlocks = allTextBlocks.stream().collect(groupingBy(block -> block.getSubmission().getId()));\n          \n          \n            \n                    textSubmissionSet.forEach(textSubmission -> textSubmission.setBlocks(new HashSet<>(textBlocks.get(textSubmission.getId()))));\n          \n          \n            \n                    final Map<Long, List<TextBlock>> textBlocks = allTextBlocks.stream().collect(groupingBy(block -> block.getSubmission().getId(), toSet()));\n          \n          \n            \n                    textSubmissionSet.forEach(textSubmission -> textSubmission.setBlocks(textBlocks.get(textSubmission.getId())));", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r518571365", "createdAt": "2020-11-06T07:40:36Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "diffHunk": "@@ -149,9 +145,9 @@ public void asyncCheckFeedbackConsistency(List<TextBlock> textBlocks, List<Feedb\n                 return (TextSubmission) conflict.getFirstFeedback().getResult().getSubmission();\n             }\n         }).collect(toSet());\n-        final Map<Long, List<TextBlock>> textBlocks = textBlockRepository.findAllBySubmissionIdIn(textSubmissionSet.stream().map(TextSubmission::getId).collect(toList())).stream()\n-                .collect(groupingBy(b -> b.getSubmission().getId()));\n-        textSubmissionSet.forEach(textSubmission -> textSubmission.setBlocks(textBlocks.get(textSubmission.getId())));\n+        var allTextBlocks = textBlockRepository.findAllBySubmissionIdIn(textSubmissionSet.stream().map(TextSubmission::getId).collect(toSet()));\n+        final Map<Long, List<TextBlock>> textBlocks = allTextBlocks.stream().collect(groupingBy(block -> block.getSubmission().getId()));\n+        textSubmissionSet.forEach(textSubmission -> textSubmission.setBlocks(new HashSet<>(textBlocks.get(textSubmission.getId()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225128d540f2e876d0ba30dfb9528f61a2cb35d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDM4NzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzo1OToyOFrOHujkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzo1OToyOFrOHujkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3OTM5Ng==", "bodyText": "This can be changed to public Set<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission). Will submit a commit.", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r518579396", "createdAt": "2020-11-06T07:59:28Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "diffHunk": "@@ -49,11 +46,11 @@\n      * @param submission TextSubmission to split\n      * @return List of TextBlocks\n      */\n-    @Transactional(readOnly = true)\n     public List<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225128d540f2e876d0ba30dfb9528f61a2cb35d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODIxNDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMTo0NjozNFrOHyrUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwODozNzoxMlrOHzdwtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMDY2Nw==", "bodyText": "Would it make sense to use Collections.emptySet() here, which avoids allocating a new HashSet if we don't need it?", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r522900667", "createdAt": "2020-11-13T11:46:34Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "diffHunk": "@@ -49,23 +46,24 @@\n      * @param submission TextSubmission to split\n      * @return List of TextBlocks\n      */\n-    @Transactional(readOnly = true)\n-    public List<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {\n+    public Set<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {\n+        final Set<TextBlock> blocks = new HashSet<>();\n+\n+        // Return empty set for missing submission text.\n         final String submissionText = submission.getText();\n-        if (submissionText == null)\n-            return new ArrayList<>();\n-        // Return empty list for missing submission text.\n+        if (submissionText == null) {\n+            return blocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89af7f5ea49a7f8855dc50bb0269e442a3714b14"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcyNzAyOQ==", "bodyText": "changed it, but I don't think it will make a noticeable difference (maybe 1ns faster ;-)", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r523727029", "createdAt": "2020-11-15T08:37:12Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "diffHunk": "@@ -49,23 +46,24 @@\n      * @param submission TextSubmission to split\n      * @return List of TextBlocks\n      */\n-    @Transactional(readOnly = true)\n-    public List<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {\n+    public Set<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {\n+        final Set<TextBlock> blocks = new HashSet<>();\n+\n+        // Return empty set for missing submission text.\n         final String submissionText = submission.getText();\n-        if (submissionText == null)\n-            return new ArrayList<>();\n-        // Return empty list for missing submission text.\n+        if (submissionText == null) {\n+            return blocks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMDY2Nw=="}, "originalCommit": {"oid": "89af7f5ea49a7f8855dc50bb0269e442a3714b14"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODIyMTEyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/service/TextBlockServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMTo0ODo1NVrOHyrYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwODozNjo1M1rOHzdwjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMTYyOA==", "bodyText": "Typo: expectedText", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r522901628", "createdAt": "2020-11-13T11:48:55Z", "author": {"login": "FrankeLukas"}, "path": "src/test/java/de/tum/in/www1/artemis/service/TextBlockServiceTest.java", "diffHunk": "@@ -47,42 +45,57 @@ public void splitSubmissionIntoBlocksForEmptyText() {\n     @Test\n     public void splitSubmissionIntoBlocksForSingleSentence() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Hello World.\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         assertThat(textBlocks, hasSize(1));\n-        assertThat(textBlocks.get(0).getText(), is(equalTo(\"Hello World.\")));\n+        assertThat(textBlocks.iterator().next().getText(), is(equalTo(\"Hello World.\")));\n     }\n \n     @Test\n     public void splitSubmissionIntoBlocksForTwoSentencesWithoutNewLine() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Hello World. This is a Test.\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         assertThat(textBlocks, hasSize(2));\n-        assertThat(textBlocks.get(0).getText(), is(equalTo(\"Hello World.\")));\n-        assertThat(textBlocks.get(1).getText(), is(equalTo(\"This is a Test.\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"Hello World.\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"This is a Test.\")));\n     }\n \n     @Test\n     public void splitSubmissionsIntoBlocksForManySentencesWithNewlinesWithoutFullstop() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Hello World. This is a Test\\n\\n\\nAnother Test\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         assertThat(textBlocks, hasSize(3));\n-        assertThat(textBlocks.get(0).getText(), is(equalTo(\"Hello World.\")));\n-        assertThat(textBlocks.get(1).getText(), is(equalTo(\"This is a Test\")));\n-        assertThat(textBlocks.get(2).getText(), is(equalTo(\"Another Test\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"Hello World.\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"This is a Test\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"Another Test\")));\n     }\n \n     @Test\n     public void splitSubmissionIntoBlocksForManySentencesWithoutPunctuation() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Example:\\nThis is the first example\\n\\nSection 2:\\n- Here is a list\\n- Of many bullet  points\\n\\n\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         String[] sections = new String[] { \"Example:\", \"This is the first example\", \"Section 2:\", \"- Here is a list\", \"- Of many bullet  points\" };\n         assertThat(textBlocks, hasSize(sections.length));\n-        for (int i = 0; i < sections.length; i++) {\n-            assertThat(textBlocks.get(i).getText(), is(equalTo(sections[i])));\n+        for (String section : sections) {\n+            assertThat(textBlocks, hasItem(textBlockWithEqualText(section)));\n         }\n     }\n+\n+    private Matcher<TextBlock> textBlockWithEqualText(String expextedText) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89af7f5ea49a7f8855dc50bb0269e442a3714b14"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcyNjk4OA==", "bodyText": "fixed", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r523726988", "createdAt": "2020-11-15T08:36:53Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/service/TextBlockServiceTest.java", "diffHunk": "@@ -47,42 +45,57 @@ public void splitSubmissionIntoBlocksForEmptyText() {\n     @Test\n     public void splitSubmissionIntoBlocksForSingleSentence() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Hello World.\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         assertThat(textBlocks, hasSize(1));\n-        assertThat(textBlocks.get(0).getText(), is(equalTo(\"Hello World.\")));\n+        assertThat(textBlocks.iterator().next().getText(), is(equalTo(\"Hello World.\")));\n     }\n \n     @Test\n     public void splitSubmissionIntoBlocksForTwoSentencesWithoutNewLine() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Hello World. This is a Test.\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         assertThat(textBlocks, hasSize(2));\n-        assertThat(textBlocks.get(0).getText(), is(equalTo(\"Hello World.\")));\n-        assertThat(textBlocks.get(1).getText(), is(equalTo(\"This is a Test.\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"Hello World.\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"This is a Test.\")));\n     }\n \n     @Test\n     public void splitSubmissionsIntoBlocksForManySentencesWithNewlinesWithoutFullstop() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Hello World. This is a Test\\n\\n\\nAnother Test\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         assertThat(textBlocks, hasSize(3));\n-        assertThat(textBlocks.get(0).getText(), is(equalTo(\"Hello World.\")));\n-        assertThat(textBlocks.get(1).getText(), is(equalTo(\"This is a Test\")));\n-        assertThat(textBlocks.get(2).getText(), is(equalTo(\"Another Test\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"Hello World.\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"This is a Test\")));\n+        assertThat(textBlocks, hasItem(textBlockWithEqualText(\"Another Test\")));\n     }\n \n     @Test\n     public void splitSubmissionIntoBlocksForManySentencesWithoutPunctuation() {\n         final TextSubmission submission = new TextSubmission(0L).text(\"Example:\\nThis is the first example\\n\\nSection 2:\\n- Here is a list\\n- Of many bullet  points\\n\\n\");\n-        final List<TextBlock> textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n+        final var textBlocks = textBlockService.splitSubmissionIntoBlocks(submission);\n \n         String[] sections = new String[] { \"Example:\", \"This is the first example\", \"Section 2:\", \"- Here is a list\", \"- Of many bullet  points\" };\n         assertThat(textBlocks, hasSize(sections.length));\n-        for (int i = 0; i < sections.length; i++) {\n-            assertThat(textBlocks.get(i).getText(), is(equalTo(sections[i])));\n+        for (String section : sections) {\n+            assertThat(textBlocks, hasItem(textBlockWithEqualText(section)));\n         }\n     }\n+\n+    private Matcher<TextBlock> textBlockWithEqualText(String expextedText) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMTYyOA=="}, "originalCommit": {"oid": "89af7f5ea49a7f8855dc50bb0269e442a3714b14"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzU2OTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOTowMjo0MVrOHzd7Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOTowMjo0MVrOHzd7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcyOTczNA==", "bodyText": "Does it make sense to use a immutable set here? The other returned set are mutable. Maybe refactor to only return immutable sets? Set<String> immutable = ImmutableSet.copyOf(set);", "url": "https://github.com/ls1intum/Artemis/pull/2299#discussion_r523729734", "createdAt": "2020-11-15T09:02:41Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TextBlockService.java", "diffHunk": "@@ -49,23 +46,23 @@\n      * @param submission TextSubmission to split\n      * @return List of TextBlocks\n      */\n-    @Transactional(readOnly = true)\n-    public List<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {\n+    public Set<TextBlock> splitSubmissionIntoBlocks(TextSubmission submission) {\n+\n+        // Return empty set for missing submission text.\n         final String submissionText = submission.getText();\n-        if (submissionText == null)\n-            return new ArrayList<>();\n-        // Return empty list for missing submission text.\n+        if (submissionText == null) {\n+            return Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08ff0671c4916522654e75ba2ab846d4beffcfb6"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4375, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}