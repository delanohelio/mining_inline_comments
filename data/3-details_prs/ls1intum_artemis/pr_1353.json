{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTIzMDc1", "number": 1353, "title": "Integration test/test repository resource", "bodyText": "Checklist\n\n Server: I added multiple integration tests (Spring) related to the features\n\nMotivation and Context\n\n\nThis PR is part of the initiative   to increase the test coverage for the REST controllers.\nDescription\n\nadded several test cases to cover all REST calls and at least 80% line coverage\nScreenshot", "createdAt": "2020-04-26T17:26:04Z", "url": "https://github.com/ls1intum/Artemis/pull/1353", "merged": true, "mergeCommit": {"oid": "381deaba5854bc5785e1872669dd1892255c04f7"}, "closed": true, "closedAt": "2020-05-05T12:20:53Z", "author": {"login": "F4lka"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca3g-1gH2gAyNDA5MTIzMDc1OjNiOTYyOWQ4MDAyY2Q0ZGM5OWU1YTZlNjY0NTcyMWU2NjQ0NDUyMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceTHsygFqTQwNTczMjY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b9629d8002cd4dc99e5a6e6645721e66444522b", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/3b9629d8002cd4dc99e5a6e6645721e66444522b", "committedDate": "2020-04-24T20:28:55Z", "message": "added testcases for getFile, getFiles and createFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8421ceddd2ee476056f434deb8709d1fb1c7e037", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/8421ceddd2ee476056f434deb8709d1fb1c7e037", "committedDate": "2020-04-25T10:31:59Z", "message": "added testcases for deleteFile and createFolder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c465eb1c4b205c236f6ff5706f6f5f6aab2d3e4c", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/c465eb1c4b205c236f6ff5706f6f5f6aab2d3e4c", "committedDate": "2020-04-25T10:50:29Z", "message": "added testcase for getStatus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "731530966ca82487da3223a17e46317ae90db7b5", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/731530966ca82487da3223a17e46317ae90db7b5", "committedDate": "2020-04-25T11:35:51Z", "message": "added testcase for commitChanges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fdf54aa0b223613b73e2e4f22fb9f875df8d0ab", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/3fdf54aa0b223613b73e2e4f22fb9f875df8d0ab", "committedDate": "2020-04-25T17:15:20Z", "message": "added testcase for renameFile and pullChanges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a59d54775b08f5246ba7e4b8ba3db9ddd061b79", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/4a59d54775b08f5246ba7e4b8ba3db9ddd061b79", "committedDate": "2020-04-26T11:01:34Z", "message": "code refactoring and class extraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c27fb44ef3555c1faad9f189b48069a6e66bc0", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/02c27fb44ef3555c1faad9f189b48069a6e66bc0", "committedDate": "2020-04-26T14:47:46Z", "message": "added comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e38651b55c4cd6b1bb9562d073726e046a133ae", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/7e38651b55c4cd6b1bb9562d073726e046a133ae", "committedDate": "2020-04-26T14:50:08Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f3cc70b5fd0b3278d5bcabee01166a5f746ef16", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/4f3cc70b5fd0b3278d5bcabee01166a5f746ef16", "committedDate": "2020-04-27T12:20:14Z", "message": "refactored code(renaming and extract variable)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9", "committedDate": "2020-04-27T12:34:54Z", "message": "removed not needed variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTA2ODkw", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-401106890", "createdAt": "2020-04-27T16:10:49Z", "commit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxMDo1MFrOGMrgdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjoxNDo0M1rOGMrseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0ODkxNw==", "bodyText": "Maybe use File.separator instead of /.", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r415948917", "createdAt": "2020-04-27T16:10:50Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0OTMwOQ==", "bodyText": "Please check that newFile is a file and not a folder.", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r415949309", "createdAt": "2020-04-27T16:11:18Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0OTU3OA==", "bodyText": "Please check that newFolder is a folder and not a file.", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r415949578", "createdAt": "2020-04-27T16:11:31Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFolder() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isFalse();\n+        params.add(\"folder\", \"newFolder\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/folder\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MDczOQ==", "bodyText": "Maybe also test renaming a folder.", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r415950739", "createdAt": "2020-04-27T16:13:04Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFolder() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isFalse();\n+        params.add(\"folder\", \"newFolder\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/folder\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldRenameFile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MTk5NA==", "bodyText": "There is no assert here, is this correct?", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r415951994", "createdAt": "2020-04-27T16:14:43Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFolder() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isFalse();\n+        params.add(\"folder\", \"newFolder\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/folder\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldRenameFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFileName))).isFalse();\n+        FileMove fileMove = new FileMove();\n+        fileMove.setCurrentFilePath(currentLocalFileName);\n+        fileMove.setNewFilename(newLocalFileName);\n+        request.postWithoutLocation(testRepoBaseUrl + exercise.getId() + \"/rename-file\", fileMove, HttpStatus.OK, null);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isFalse();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFileName))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldDeleteFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        params.add(\"file\", currentLocalFileName);\n+        request.delete(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCommitChanges() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var receivedStatusBeforeCommit = request.get(testRepoBaseUrl + exercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusBeforeCommit.repositoryStatus.toString()).isEqualTo(\"UNCOMMITTED_CHANGES\");\n+        request.postWithoutLocation(testRepoBaseUrl + exercise.getId() + \"/commit\", null, HttpStatus.OK, null);\n+        var receivedStatusAfterCommit = request.get(testRepoBaseUrl + exercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusAfterCommit.repositoryStatus.toString()).isEqualTo(\"CLEAN\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldPullChanges() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        request.get(testRepoBaseUrl + exercise.getId() + \"/pull\", HttpStatus.OK, Void.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1f728ef7fc66c5bf8f666de64b5cea051b4cc9"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0c67adc74d4a6731c2bfa65b0393dfcf3d11bf6", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/d0c67adc74d4a6731c2bfa65b0393dfcf3d11bf6", "committedDate": "2020-04-27T17:04:04Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "effb05bd56e945a1b4f7e36f2b79ebb52c699cc7", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/effb05bd56e945a1b4f7e36f2b79ebb52c699cc7", "committedDate": "2020-04-27T18:58:10Z", "message": "added testcase for renamefolder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffa1d77d88de2371f41db4028725529772665a04", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/ffa1d77d88de2371f41db4028725529772665a04", "committedDate": "2020-04-27T18:58:38Z", "message": "Merge remote-tracking branch 'origin/IntegrationTest/TestRepositoryResource' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19256b6faa4a5bca01a93ddd92974d62584015a2", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/19256b6faa4a5bca01a93ddd92974d62584015a2", "committedDate": "2020-04-27T19:07:43Z", "message": "added checks, to check if the new created file or directory is actually the expected file type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f104e30fe8f8f4af33e19d0ed3004eeeabf878", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/71f104e30fe8f8f4af33e19d0ed3004eeeabf878", "committedDate": "2020-04-27T19:31:09Z", "message": "added test case resetToLastCommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "573875e51c34b9ec9bef49948ac6d282e708c960", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/573875e51c34b9ec9bef49948ac6d282e708c960", "committedDate": "2020-04-28T11:52:29Z", "message": "adapted comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODY4NDI5", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-401868429", "createdAt": "2020-04-28T14:03:53Z", "commit": {"oid": "573875e51c34b9ec9bef49948ac6d282e708c960"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowMzo1M1rOGNVriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowMzo1M1rOGNVriw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzOTg4Mw==", "bodyText": "first create some \"local\" changes without committing them (in the best case, use the online code editor to add and modify files). If this is not possible, then directly manipulate the local git\nThen create a merge conflict by changing the same files in the originGit\nTODO: check if the Artemis server detects the conflict\nThen invoke reset\nThen check, that all local changes are removed and there is no conflict any more", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r416639883", "createdAt": "2020-04-28T14:03:53Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String currentLocalFolderName = \"currentFolderName\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    private String newLocalFolderName = \"newFolderName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        // add folder to the repository folder\n+        filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName);\n+        var folder = Files.createDirectory(filePath).toFile();\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.isRegularFile(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFolder() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isFalse();\n+        params.add(\"folder\", \"newFolder\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + exercise.getId() + \"/folder\", HttpStatus.OK, params);\n+        assertThat(Files.isDirectory(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldRenameFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFileName))).isFalse();\n+        FileMove fileMove = new FileMove();\n+        fileMove.setCurrentFilePath(currentLocalFileName);\n+        fileMove.setNewFilename(newLocalFileName);\n+        request.postWithoutLocation(testRepoBaseUrl + exercise.getId() + \"/rename-file\", fileMove, HttpStatus.OK, null);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isFalse();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFileName))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldRenameFolder() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName))).isTrue();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFolderName))).isFalse();\n+        FileMove fileMove = new FileMove();\n+        fileMove.setCurrentFilePath(currentLocalFolderName);\n+        fileMove.setNewFilename(newLocalFolderName);\n+        request.postWithoutLocation(testRepoBaseUrl + exercise.getId() + \"/rename-file\", fileMove, HttpStatus.OK, null);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName))).isFalse();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFolderName))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldDeleteFile() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        params.add(\"file\", currentLocalFileName);\n+        request.delete(testRepoBaseUrl + exercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCommitChanges() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var receivedStatusBeforeCommit = request.get(testRepoBaseUrl + exercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusBeforeCommit.repositoryStatus.toString()).isEqualTo(\"UNCOMMITTED_CHANGES\");\n+        request.postWithoutLocation(testRepoBaseUrl + exercise.getId() + \"/commit\", null, HttpStatus.OK, null);\n+        var receivedStatusAfterCommit = request.get(testRepoBaseUrl + exercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusAfterCommit.repositoryStatus.toString()).isEqualTo(\"CLEAN\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldPullChanges() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        request.get(testRepoBaseUrl + exercise.getId() + \"/pull\", HttpStatus.OK, Void.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldResetToLastCommit() throws Exception {\n+        programmingExerciseRepository.save(exercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573875e51c34b9ec9bef49948ac6d282e708c960"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODY5NTA2", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-401869506", "createdAt": "2020-04-28T14:05:00Z", "commit": {"oid": "573875e51c34b9ec9bef49948ac6d282e708c960"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowNTowMFrOGNVu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowNTowMFrOGNVu6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0MDc0Nw==", "bodyText": "check that the files actually exists, some of them might get filtered by the way?", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r416640747", "createdAt": "2020-04-28T14:05:00Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise exercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String currentLocalFolderName = \"currentFolderName\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    private String newLocalFolderName = \"newFolderName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        // add folder to the repository folder\n+        filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName);\n+        var folder = Files.createDirectory(filePath).toFile();\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.originRepoFile);\n+        exercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(exercise);\n+        var files = request.getMap(testRepoBaseUrl + exercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573875e51c34b9ec9bef49948ac6d282e708c960"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a2637b6a9987eda6ef84add9f3decc0a9733c5", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/85a2637b6a9987eda6ef84add9f3decc0a9733c5", "committedDate": "2020-05-01T11:26:37Z", "message": "added additional check, checks if the files actually exit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6b7b6316e458013980fa8906e27c6ee0b54455", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/3f6b7b6316e458013980fa8906e27c6ee0b54455", "committedDate": "2020-05-01T16:03:30Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "611b4fd20583999a283cb3667e4465ca81d6d2ef", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/611b4fd20583999a283cb3667e4465ca81d6d2ef", "committedDate": "2020-05-02T09:29:57Z", "message": "moved method getAllCommits to LocalRepository and adapted shouldCommitChanges()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83478816b8a1de9533293dc12fca82f1b21f4fbd", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/83478816b8a1de9533293dc12fca82f1b21f4fbd", "committedDate": "2020-05-03T12:18:52Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41bb85cac098dda0c777cb98237fa9f28eca787f", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/41bb85cac098dda0c777cb98237fa9f28eca787f", "committedDate": "2020-05-03T18:13:23Z", "message": "added documentation for programming-exercise-update.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98ba712cbed2904fd46570c094e38804c485a1c", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/d98ba712cbed2904fd46570c094e38804c485a1c", "committedDate": "2020-05-03T18:18:01Z", "message": "added missing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5238ef739ee75822ba0d08694db670692599b2", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/fe5238ef739ee75822ba0d08694db670692599b2", "committedDate": "2020-05-04T13:45:39Z", "message": "updated the testcase shouldPullChanges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8ea1c371f24be92e099e47fa098e040e395900", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/af8ea1c371f24be92e099e47fa098e040e395900", "committedDate": "2020-05-04T13:47:35Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e0d356d91be0ec3e29f0e327ba7e1874ee6c32", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/10e0d356d91be0ec3e29f0e327ba7e1874ee6c32", "committedDate": "2020-05-04T17:10:46Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "115a3f71820b8d222cecd773e15df908e5c17012", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/115a3f71820b8d222cecd773e15df908e5c17012", "committedDate": "2020-05-04T20:30:12Z", "message": "updated the shouldResetToLastCommit and renamed exercise to programmingexercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f84cd431566760114438fa436c76a04ee839000e", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/f84cd431566760114438fa436c76a04ee839000e", "committedDate": "2020-05-04T20:30:41Z", "message": "Merge remote-tracking branch 'origin/IntegrationTest/TestRepositoryResource' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aebd153b0faa21d9e2d00fea661c7fec17c8d665", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/aebd153b0faa21d9e2d00fea661c7fec17c8d665", "committedDate": "2020-05-04T20:32:03Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/14e3ec07d468f3237b4fdc5be4c07cfaba35fff8", "committedDate": "2020-05-04T21:48:45Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjY5MDAz", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-405669003", "createdAt": "2020-05-05T10:35:09Z", "commit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNTowOVrOGQjjdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNTowOVrOGQjjdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjkxNw==", "bodyText": "please convert this into a non static method that is invoked on itself.", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r420012917", "createdAt": "2020-05-05T10:35:09Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/util/LocalRepository.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.transport.URIish;\n+\n+public class LocalRepository {\n+\n+    public File localRepoFile;\n+\n+    public File originRepoFile;\n+\n+    public Git localGit;\n+\n+    public Git originGit;\n+\n+    public void configureRepos(String localRepoFileName, String originRepoFileName) throws Exception {\n+\n+        this.localRepoFile = Files.createTempDirectory(localRepoFileName).toFile();\n+        this.localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        this.originRepoFile = Files.createTempDirectory(originRepoFileName).toFile();\n+        this.originGit = Git.init().setDirectory(originRepoFile).call();\n+\n+        this.localGit.remoteAdd().setName(\"origin\").setUri(new URIish(String.valueOf(this.originRepoFile))).call();\n+    }\n+\n+    public static void resetLocalRepo(LocalRepository localRepo) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjY5ODY3", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-405669867", "createdAt": "2020-05-05T10:36:42Z", "commit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNjo0MlrOGQjmXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNjo0MlrOGQjmXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMzY2Mw==", "bodyText": "I would also prefer non static methods here. You could distinguish between\npublic List<RevCommit> getAllLocalCommits()\nand\npublic List<RevCommit> getAllOriginCommits()\nand use the corresponding variable then", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r420013663", "createdAt": "2020-05-05T10:36:42Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/util/LocalRepository.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.transport.URIish;\n+\n+public class LocalRepository {\n+\n+    public File localRepoFile;\n+\n+    public File originRepoFile;\n+\n+    public Git localGit;\n+\n+    public Git originGit;\n+\n+    public void configureRepos(String localRepoFileName, String originRepoFileName) throws Exception {\n+\n+        this.localRepoFile = Files.createTempDirectory(localRepoFileName).toFile();\n+        this.localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        this.originRepoFile = Files.createTempDirectory(originRepoFileName).toFile();\n+        this.originGit = Git.init().setDirectory(originRepoFile).call();\n+\n+        this.localGit.remoteAdd().setName(\"origin\").setUri(new URIish(String.valueOf(this.originRepoFile))).call();\n+    }\n+\n+    public static void resetLocalRepo(LocalRepository localRepo) throws IOException {\n+        if (localRepo.localRepoFile != null && localRepo.localRepoFile.exists()) {\n+            FileUtils.deleteDirectory(localRepo.localRepoFile);\n+        }\n+        if (localRepo.localGit != null) {\n+            localRepo.localGit.close();\n+        }\n+\n+        if (localRepo.originRepoFile != null && localRepo.originRepoFile.exists()) {\n+            FileUtils.deleteDirectory(localRepo.originRepoFile);\n+        }\n+        if (localRepo.originGit != null) {\n+            localRepo.originGit.close();\n+        }\n+    }\n+\n+    public static List<RevCommit> getAllCommits(Git gitRepo) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjcwNTcz", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-405670573", "createdAt": "2020-05-05T10:37:54Z", "commit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNzo1NFrOGQjogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNzo1NFrOGQjogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxNDIwOA==", "bodyText": "can you be a bit more specific here when testing for the correct status?", "url": "https://github.com/ls1intum/Artemis/pull/1353#discussion_r420014208", "createdAt": "2020-05-05T10:37:54Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/TestRepositoryResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.eclipse.jgit.api.ListBranchCommand;\n+import org.eclipse.jgit.api.MergeResult;\n+import org.eclipse.jgit.lib.Ref;\n+import org.eclipse.jgit.merge.MergeStrategy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.util.LinkedMultiValueMap;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.FileType;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.util.*;\n+import de.tum.in.www1.artemis.web.rest.dto.FileMove;\n+import de.tum.in.www1.artemis.web.rest.dto.RepositoryStatusDTO;\n+\n+@TestPropertySource(properties = \"artemis.repo-clone-path=\")\n+public class TestRepositoryResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    private final String testRepoBaseUrl = \"/api/test-repository/\";\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    private Course course;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    private String currentLocalFileName = \"currentFileName\";\n+\n+    private String currentLocalFileContent = \"testContent\";\n+\n+    private String currentLocalFolderName = \"currentFolderName\";\n+\n+    private String newLocalFileName = \"newFileName\";\n+\n+    private String newLocalFolderName = \"newFolderName\";\n+\n+    LocalRepository testRepo = new LocalRepository();\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        database.addUsers(0, 0, 1);\n+        course = database.addEmptyCourse();\n+        programmingExercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+\n+        // add file to the repository folder\n+        Path filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName);\n+        var file = Files.createFile(filePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(file, currentLocalFileContent);\n+\n+        // add folder to the repository folder\n+        filePath = Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName);\n+        var folder = Files.createDirectory(filePath).toFile();\n+\n+        var testRepoUrl = new GitUtilService.MockFileRepositoryUrl(testRepo.localRepoFile);\n+        programmingExercise.setTestRepositoryUrl(testRepoUrl.toString());\n+        doReturn(gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoUrl.getURL(), true);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        reset(gitService);\n+        LocalRepository.resetLocalRepo(testRepo);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFiles() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        var files = request.getMap(testRepoBaseUrl + programmingExercise.getId() + \"/files\", HttpStatus.OK, String.class, FileType.class);\n+        assertThat(files).isNotEmpty();\n+\n+        // Check if all files exist\n+        for (String key : files.keySet()) {\n+            assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + key))).isTrue();\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetFile() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(\"file\", currentLocalFileName);\n+        var file = request.get(testRepoBaseUrl + programmingExercise.getId() + \"/file\", HttpStatus.OK, byte[].class, params);\n+        assertThat(file).isNotEmpty();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        assertThat(new String(file)).isEqualTo(currentLocalFileContent);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFile() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isFalse();\n+        params.add(\"file\", \"newFile\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + programmingExercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.isRegularFile(Paths.get(testRepo.localRepoFile + \"/newFile\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCreateFolder() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isFalse();\n+        params.add(\"folder\", \"newFolder\");\n+        request.postWithoutResponseBody(testRepoBaseUrl + programmingExercise.getId() + \"/folder\", HttpStatus.OK, params);\n+        assertThat(Files.isDirectory(Paths.get(testRepo.localRepoFile + \"/newFolder\"))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldRenameFile() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFileName))).isFalse();\n+        FileMove fileMove = new FileMove();\n+        fileMove.setCurrentFilePath(currentLocalFileName);\n+        fileMove.setNewFilename(newLocalFileName);\n+        request.postWithoutLocation(testRepoBaseUrl + programmingExercise.getId() + \"/rename-file\", fileMove, HttpStatus.OK, null);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isFalse();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFileName))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldRenameFolder() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName))).isTrue();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFolderName))).isFalse();\n+        FileMove fileMove = new FileMove();\n+        fileMove.setCurrentFilePath(currentLocalFolderName);\n+        fileMove.setNewFilename(newLocalFolderName);\n+        request.postWithoutLocation(testRepoBaseUrl + programmingExercise.getId() + \"/rename-file\", fileMove, HttpStatus.OK, null);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFolderName))).isFalse();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + newLocalFolderName))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldDeleteFile() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        LinkedMultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isTrue();\n+        params.add(\"file\", currentLocalFileName);\n+        request.delete(testRepoBaseUrl + programmingExercise.getId() + \"/file\", HttpStatus.OK, params);\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + currentLocalFileName))).isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldCommitChanges() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        var receivedStatusBeforeCommit = request.get(testRepoBaseUrl + programmingExercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusBeforeCommit.repositoryStatus.toString()).isEqualTo(\"UNCOMMITTED_CHANGES\");\n+        request.postWithoutLocation(testRepoBaseUrl + programmingExercise.getId() + \"/commit\", null, HttpStatus.OK, null);\n+        var receivedStatusAfterCommit = request.get(testRepoBaseUrl + programmingExercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusAfterCommit.repositoryStatus.toString()).isEqualTo(\"CLEAN\");\n+        var testRepoCommits = LocalRepository.getAllCommits(testRepo.localGit);\n+        assertThat(testRepoCommits.size() == 1).isTrue();\n+        assertThat(database.getUserByLogin(\"instructor1\").getName()).isEqualTo(testRepoCommits.get(0).getAuthorIdent().getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldPullChanges() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        String fileName = \"remoteFile\";\n+\n+        // Create a commit for the local and the remote repository\n+        request.postWithoutLocation(testRepoBaseUrl + programmingExercise.getId() + \"/commit\", null, HttpStatus.OK, null);\n+        var remote = gitService.getRepositoryByLocalPath(testRepo.originRepoFile.toPath());\n+\n+        // Create file in the remote repository\n+        Path filePath = Paths.get(testRepo.originRepoFile + \"/\" + fileName);\n+        Files.createFile(filePath).toFile();\n+\n+        // Check if the file exists in the remote repository and that it doesn't yet exists in the local repository\n+        assertThat(Files.exists(Paths.get(testRepo.originRepoFile + \"/\" + fileName))).isTrue();\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + fileName))).isFalse();\n+\n+        // Stage all changes and make a second commit in the remote repository\n+        gitService.stageAllChanges(remote);\n+        testRepo.originGit.commit().setMessage(\"TestCommit\").setAllowEmpty(true).setCommitter(\"testname\", \"test@email\").call();\n+\n+        // Checks if the current commit is not equal on the local and the remote repository\n+        assertThat(LocalRepository.getAllCommits(testRepo.localGit).get(0)).isNotEqualTo(LocalRepository.getAllCommits(testRepo.originGit).get(0));\n+\n+        // Execute the Rest call\n+        request.get(testRepoBaseUrl + programmingExercise.getId() + \"/pull\", HttpStatus.OK, Void.class);\n+\n+        // Check if the current commit is the same on the local and the remote repository and if the file exists on the local repository\n+        assertThat(LocalRepository.getAllCommits(testRepo.localGit).get(0)).isEqualTo(LocalRepository.getAllCommits(testRepo.originGit).get(0));\n+        assertThat(Files.exists(Paths.get(testRepo.localRepoFile + \"/\" + fileName))).isTrue();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldResetToLastCommit() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        String fileName = \"testFile\";\n+        var localRepo = gitService.getRepositoryByLocalPath(testRepo.localRepoFile.toPath());\n+        var remoteRepo = gitService.getRepositoryByLocalPath(testRepo.originRepoFile.toPath());\n+\n+        // Check status of git before the commit\n+        var receivedStatusBeforeCommit = request.get(testRepoBaseUrl + programmingExercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusBeforeCommit.repositoryStatus.toString()).isEqualTo(\"UNCOMMITTED_CHANGES\");\n+\n+        // Create a commit for the local and the remote repository\n+        request.postWithoutLocation(testRepoBaseUrl + programmingExercise.getId() + \"/commit\", null, HttpStatus.OK, null);\n+\n+        // Check status of git after the commit\n+        var receivedStatusAfterCommit = request.get(testRepoBaseUrl + programmingExercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusAfterCommit.repositoryStatus.toString()).isEqualTo(\"CLEAN\");\n+\n+        // Create file in the local repository and commit it\n+        Path localFilePath = Paths.get(testRepo.localRepoFile + \"/\" + fileName);\n+        var localFile = Files.createFile(localFilePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(localFile, \"local\");\n+        gitService.stageAllChanges(localRepo);\n+        testRepo.localGit.commit().setMessage(\"local\").call();\n+\n+        // Create file in the remote repository and commit it\n+        Path remoteFilePath = Paths.get(testRepo.originRepoFile + \"/\" + fileName);\n+        var remoteFile = Files.createFile(remoteFilePath).toFile();\n+        // write content to the created file\n+        FileUtils.write(remoteFile, \"remote\");\n+        gitService.stageAllChanges(remoteRepo);\n+        testRepo.originGit.commit().setMessage(\"remote\").call();\n+\n+        // Merge the two and a conflict will occur\n+        testRepo.localGit.fetch().setRemote(\"origin\").call();\n+        List<Ref> refs = testRepo.localGit.branchList().setListMode(ListBranchCommand.ListMode.REMOTE).call();\n+        var result = testRepo.localGit.merge().include(refs.get(0).getObjectId()).setStrategy(MergeStrategy.RESOLVE).call();\n+        var status = testRepo.localGit.status().call();\n+        assertThat(status.getConflicting().size() > 0).isTrue();\n+        assertThat(MergeResult.MergeStatus.CONFLICTING).isEqualTo(result.getMergeStatus());\n+\n+        // Execute the reset Rest call\n+        request.postWithoutLocation(testRepoBaseUrl + programmingExercise.getId() + \"/reset\", null, HttpStatus.OK, null);\n+\n+        // Check the git status after the reset\n+        status = testRepo.localGit.status().call();\n+        assertThat(status.getConflicting().size() == 0).isTrue();\n+        assertThat(LocalRepository.getAllCommits(testRepo.localGit).get(0)).isEqualTo(LocalRepository.getAllCommits(testRepo.originGit).get(0));\n+        var receivedStatusAfterReset = request.get(testRepoBaseUrl + programmingExercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatusAfterReset.repositoryStatus.toString()).isEqualTo(\"CLEAN\");\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void shouldGetStatus() throws Exception {\n+        programmingExerciseRepository.save(programmingExercise);\n+        var receivedStatus = request.get(testRepoBaseUrl + programmingExercise.getId(), HttpStatus.OK, RepositoryStatusDTO.class);\n+        assertThat(receivedStatus).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "originalPosition": 287}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjcxODU1", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-405671855", "createdAt": "2020-05-05T10:40:02Z", "commit": {"oid": "14e3ec07d468f3237b4fdc5be4c07cfaba35fff8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6937e6837d722048b0e67bbe113505eb4d4bf7c4", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/6937e6837d722048b0e67bbe113505eb4d4bf7c4", "committedDate": "2020-05-05T11:04:31Z", "message": "updated method resetLocalRepo(now not static) and getAllCommits(now not static and two methods local and origin)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29b8bcd70b7a3edbab31ec217d195274a2ca280", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/e29b8bcd70b7a3edbab31ec217d195274a2ca280", "committedDate": "2020-05-05T11:05:08Z", "message": "Merge remote-tracking branch 'origin/IntegrationTest/TestRepositoryResource' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80236cd8bea8f578725cd4192db6e328ea6fa458", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/80236cd8bea8f578725cd4192db6e328ea6fa458", "committedDate": "2020-05-05T11:30:18Z", "message": "adapted the naming scheme of the test cases and adapted the testGetStatus method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86112712d6603052edd1e82e401dfbda6bce56c8", "author": {"user": {"login": "F4lka", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/86112712d6603052edd1e82e401dfbda6bce56c8", "committedDate": "2020-05-05T11:36:31Z", "message": "Merge branch 'develop' into IntegrationTest/TestRepositoryResource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzMyNjg2", "url": "https://github.com/ls1intum/Artemis/pull/1353#pullrequestreview-405732686", "createdAt": "2020-05-05T12:20:25Z", "commit": {"oid": "86112712d6603052edd1e82e401dfbda6bce56c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2949, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}