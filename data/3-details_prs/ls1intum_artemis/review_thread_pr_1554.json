{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzA4NzEw", "number": 1554, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo0NTozOVrOEB4HWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo0NTozOVrOEB4HWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAzNDE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/CourseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo0NTozOVrOGd_d3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowNjo0NlrOGeALzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMTcyNA==", "bodyText": "If I'm correct, this tests if the old course still exists, but not of the new one does not exist.", "url": "https://github.com/ls1intum/Artemis/pull/1554#discussion_r434101724", "createdAt": "2020-06-02T18:45:39Z", "author": {"login": "sleiss"}, "path": "src/test/java/de/tum/in/www1/artemis/CourseIntegrationTest.java", "diffHunk": "@@ -124,6 +124,101 @@ public void testCreateCourseWithPermission() throws Exception {\n         assertThat(courseRepo.findAll()).as(\"Course has not been stored\").contains(repoContent.toArray(new Course[0]));\n     }\n \n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testCreateCourseWithSameShortName() throws Exception {\n+        Course course = ModelFactory.generateCourse(null, null, null, new HashSet<>());\n+        course.setShortName(\"shortName\");\n+        jiraRequestMockProvider.enableMockingOfRequests();\n+        jiraRequestMockProvider.mockCreateGroup(course.getDefaultStudentGroupName());\n+        jiraRequestMockProvider.mockCreateGroup(course.getDefaultTeachingAssistantGroupName());\n+        jiraRequestMockProvider.mockCreateGroup(course.getDefaultInstructorGroupName());\n+        request.post(\"/api/courses\", course, HttpStatus.CREATED);\n+        List<Course> repoContent = courseRepo.findAll();\n+        assertThat(repoContent.size()).as(\"Course got stored\").isEqualTo(1);\n+        course = ModelFactory.generateCourse(null, null, null, new HashSet<>());\n+        course.setShortName(\"shortName\");\n+        request.post(\"/api/courses\", course, HttpStatus.BAD_REQUEST);\n+        assertThat(courseRepo.findAll()).as(\"Course has not been stored\").contains(repoContent.toArray(new Course[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72c0e7d4c3bd309852ad9c066bbe21be949824c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMzQ4NQ==", "bodyText": "thank you for the review, i adjusted the test case", "url": "https://github.com/ls1intum/Artemis/pull/1554#discussion_r434113485", "createdAt": "2020-06-02T19:06:46Z", "author": {"login": "F4lka"}, "path": "src/test/java/de/tum/in/www1/artemis/CourseIntegrationTest.java", "diffHunk": "@@ -124,6 +124,101 @@ public void testCreateCourseWithPermission() throws Exception {\n         assertThat(courseRepo.findAll()).as(\"Course has not been stored\").contains(repoContent.toArray(new Course[0]));\n     }\n \n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void testCreateCourseWithSameShortName() throws Exception {\n+        Course course = ModelFactory.generateCourse(null, null, null, new HashSet<>());\n+        course.setShortName(\"shortName\");\n+        jiraRequestMockProvider.enableMockingOfRequests();\n+        jiraRequestMockProvider.mockCreateGroup(course.getDefaultStudentGroupName());\n+        jiraRequestMockProvider.mockCreateGroup(course.getDefaultTeachingAssistantGroupName());\n+        jiraRequestMockProvider.mockCreateGroup(course.getDefaultInstructorGroupName());\n+        request.post(\"/api/courses\", course, HttpStatus.CREATED);\n+        List<Course> repoContent = courseRepo.findAll();\n+        assertThat(repoContent.size()).as(\"Course got stored\").isEqualTo(1);\n+        course = ModelFactory.generateCourse(null, null, null, new HashSet<>());\n+        course.setShortName(\"shortName\");\n+        request.post(\"/api/courses\", course, HttpStatus.BAD_REQUEST);\n+        assertThat(courseRepo.findAll()).as(\"Course has not been stored\").contains(repoContent.toArray(new Course[0]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMTcyNA=="}, "originalCommit": {"oid": "b72c0e7d4c3bd309852ad9c066bbe21be949824c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 14, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}