{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNjE2MDI4", "number": 1639, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0NzoxN1rOEFQsFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1Njo1NlrOEFno5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUxNzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamAccessService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0NzoxN1rOGjYHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0NzoxN1rOGjYHPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODQxMg==", "bodyText": "I don't think forbidden() is a good choice here. The user is allowed however the exam doesn't belong to the course.\nYou could either agrue with a \"notFound()\" here since you can't finde an exercise belonging to the course, maybe a HTTP 409 would be a good choice here?", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748412", "createdAt": "2020-06-13T15:47:17Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamAccessService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.notFound;\n+\n+import java.util.Optional;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+import de.tum.in.www1.artemis.repository.ExamRepository;\n+\n+/**\n+ * Service Implementation to check Exam access.\n+ */\n+@Service\n+public class ExamAccessService {\n+\n+    private final ExamRepository examRepository;\n+\n+    private final CourseService courseService;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    public ExamAccessService(ExamRepository examRepository, CourseService courseService, AuthorizationCheckService authorizationCheckService) {\n+        this.examRepository = examRepository;\n+        this.courseService = courseService;\n+        this.authorizationCheckService = authorizationCheckService;\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course\n+     *\n+     * @param courseId  The id of the course\n+     * @param <T>       The type of the return type of the requesting route so that the response can be returned there\n+     * @return an optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <T> Optional<ResponseEntity<T>> checkCourseAccess(Long courseId) {\n+        Course course = courseService.findOne(courseId);\n+        if (!authorizationCheckService.isAtLeastInstructorInCourse(course, null)) {\n+            return Optional.of(forbidden());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course, that the exam exists and that the exam\n+     * belongs to the given course.\n+     *\n+     * @param courseId  The id of the course\n+     * @param examId    The id of the exam\n+     * @param <X>       The type of the return type of the requesting route so that the response can be returned there\n+     * @return an optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <X> Optional<ResponseEntity<X>> checkCourseAndExamAccess(Long courseId, Long examId) {\n+        Optional<ResponseEntity<X>> courseAccessFailure = checkCourseAccess(courseId);\n+        if (courseAccessFailure.isPresent()) {\n+            return courseAccessFailure;\n+        }\n+        Optional<Exam> exam = examRepository.findById(examId);\n+        if (exam.isEmpty()) {\n+            return Optional.of(notFound());\n+        }\n+        if (!exam.get().getCourse().getId().equals(courseId)) {\n+            return Optional.of(forbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUxODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseGroupService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0ODo0OVrOGjYHrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0ODo0OVrOGjYHrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODUyNg==", "bodyText": "I don't think forbidden() is a good choice here. The user is allowed however the exam doesn't belong to the exercise group.\nYou could either agrue with a \"notFound()\" here since you can't finde an exercise belonging to the course, maybe a HTTP 409 would be a good choice here?", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748526", "createdAt": "2020-06-13T15:48:49Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseGroupService.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.notFound;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.repository.ExerciseGroupRepository;\n+import de.tum.in.www1.artemis.web.rest.errors.EntityNotFoundException;\n+\n+/**\n+ * Service Implementation for managing ExerciseGroup.\n+ */\n+@Service\n+public class ExerciseGroupService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ExerciseGroupService.class);\n+\n+    private final ExerciseGroupRepository exerciseGroupRepository;\n+\n+    private final ExamAccessService examAccessService;\n+\n+    public ExerciseGroupService(ExerciseGroupRepository exerciseGroupRepository, ExamAccessService examAccessService) {\n+        this.exerciseGroupRepository = exerciseGroupRepository;\n+        this.examAccessService = examAccessService;\n+    }\n+\n+    /**\n+     * Save an exerciseGroup\n+     *\n+     * @param exerciseGroup the entity to save\n+     * @return the persisted entity\n+     */\n+    public ExerciseGroup save(ExerciseGroup exerciseGroup) {\n+        log.debug(\"Request to save exerciseGroup : {}\", exerciseGroup);\n+        return exerciseGroupRepository.save(exerciseGroup);\n+    }\n+\n+    /**\n+     * Get one exercise group by id.\n+     *\n+     * @param exerciseGroupId the id of the exercise group\n+     * @return the entity\n+     */\n+    @NotNull\n+    public ExerciseGroup findOne(Long exerciseGroupId) {\n+        log.debug(\"Request to get exercise group : {}\", exerciseGroupId);\n+        return exerciseGroupRepository.findById(exerciseGroupId)\n+                .orElseThrow(() -> new EntityNotFoundException(\"Exercise group with id \\\"\" + exerciseGroupId + \"\\\" does not exist\"));\n+    }\n+\n+    /**\n+     * Get all exercise groups for the given exam.\n+     *\n+     * @param examId the id of the exam\n+     * @return the list of all exercise groups\n+     */\n+    public List<ExerciseGroup> findAllByExamId(Long examId) {\n+        log.debug(\"REST request to get all exercise groups for Exam : {}\", examId);\n+        return exerciseGroupRepository.findByExamId(examId);\n+    }\n+\n+    /**\n+     * Delete the exercise group by id.\n+     *\n+     * @param exerciseGroupId the id of the entity\n+     */\n+    public void delete(Long exerciseGroupId) {\n+        log.debug(\"Request to delete exercise group : {}\", exerciseGroupId);\n+        exerciseGroupRepository.deleteById(exerciseGroupId);\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course, that the exam exists,\n+     * that the exam belongs to the given course and the exercise group belongs to the given exam.\n+     *\n+     * @param courseId          The id of the course\n+     * @param examId            The id of the exam\n+     * @param exerciseGroupId   The id of the exercise group\n+     * @param <X>               The type of the return type of the requesting route so that the\n+     *                          response can be returned there\n+     * @return an Optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <X> Optional<ResponseEntity<X>> checkCourseAndExamAndExerciseGroupAccess(Long courseId, Long examId, Long exerciseGroupId) {\n+        Optional<ResponseEntity<X>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure;\n+        }\n+        Optional<ExerciseGroup> exerciseGroup = exerciseGroupRepository.findById(exerciseGroupId);\n+        if (exerciseGroup.isEmpty()) {\n+            return Optional.of(notFound());\n+        }\n+        if (!exerciseGroup.get().getExam().getId().equals(examId)) {\n+            return Optional.of(forbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUxODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0OToyNVrOGjYH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0OToyNVrOGjYH4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODU3OQ==", "bodyText": "I don't think forbidden() is a good choice here. The user is allowed however the student exam doesn't belong to the exam.\nYou could either agrue with a \"notFound()\" here since you can't finde an exercise belonging to the course, maybe a HTTP 409 would be a good choice here?", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748579", "createdAt": "2020-06-13T15:49:25Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.notFound;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.exam.StudentExam;\n+import de.tum.in.www1.artemis.repository.StudentExamRepository;\n+import de.tum.in.www1.artemis.web.rest.errors.EntityNotFoundException;\n+\n+/**\n+ * Service Implementation for managing StudentExam.\n+ */\n+@Service\n+public class StudentExamService {\n+\n+    private final Logger log = LoggerFactory.getLogger(StudentExamService.class);\n+\n+    private final StudentExamRepository studentExamRepository;\n+\n+    private final ExamAccessService examAccessService;\n+\n+    public StudentExamService(StudentExamRepository studentExamRepository, ExamAccessService examAccessService) {\n+        this.studentExamRepository = studentExamRepository;\n+        this.examAccessService = examAccessService;\n+    }\n+\n+    /**\n+     * Get one student exam by id.\n+     *\n+     * @param studentExamId the id of the student exam\n+     * @return the entity\n+     */\n+    @NotNull\n+    public StudentExam findOne(Long studentExamId) {\n+        log.debug(\"Request to get student exam : {}\", studentExamId);\n+        return studentExamRepository.findById(studentExamId).orElseThrow(() -> new EntityNotFoundException(\"Student exam with id \\\"\" + studentExamId + \"\\\" does not exist\"));\n+    }\n+\n+    /**\n+     * Get all student exams for the given exam.\n+     *\n+     * @param examId the id of the exam\n+     * @return the list of all student exams\n+     */\n+    public List<StudentExam> findAllByExamId(Long examId) {\n+        log.debug(\"REST request to get all student exams for Exam : {}\", examId);\n+        return studentExamRepository.findByExamId(examId);\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course, that the exam exists,\n+     * that the exam belongs to the given course and the student exam belongs to the given exam.\n+     *\n+     * @param courseId      The id of the course\n+     * @param examId        The id of the exam\n+     * @param studentExamId The if of the student exam\n+     * @param <X>           The type of the return type of the requesting route so that the\n+     *      *               response can be returned there\n+     * @return an Optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <X> Optional<ResponseEntity<X>> checkCourseAndExamAndStudentExamAccess(Long courseId, Long examId, Long studentExamId) {\n+        Optional<ResponseEntity<X>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure;\n+        }\n+        Optional<StudentExam> studentExam = studentExamRepository.findById(studentExamId);\n+        if (studentExam.isEmpty()) {\n+            return Optional.of(notFound());\n+        }\n+        if (!studentExam.get().getExam().getId().equals(examId)) {\n+            return Optional.of(forbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUxOTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MDowOVrOGjYIHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MDowOVrOGjYIHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Exam exam = examService.findOne(examId);\n          \n          \n            \n                    return courseAndExamAccessFailure.orElseGet(() -> ResponseEntity.ok(exam));\n          \n          \n            \n                    return courseAndExamAccessFailure.orElseGet(() -> ResponseEntity.ok(examService.findOne(examId)));", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748637", "createdAt": "2020-06-13T15:50:09Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -104,18 +94,71 @@ public ExamResource(UserService userService, CourseService courseService, ExamSe\n             return createExam(courseId, updatedExam);\n         }\n \n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Course course = courseService.findOne(courseId);\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            return forbidden();\n-        }\n-\n-        Optional<Exam> existingExam = examRepository.findById(updatedExam.getId());\n-        if (existingExam.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n+        Optional<ResponseEntity<Exam>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, updatedExam.getId());\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure.get();\n         }\n \n         Exam result = examService.save(updatedExam);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, result.getTitle())).body(result);\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/exams/{examId} : Find an exam by id.\n+     *\n+     * @param courseId  the course to which the exam belongs\n+     * @param examId    the exam to find\n+     * @return the ResponseEntity with status 200 (OK) and with the found exam as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<Exam> getExam(@PathVariable Long courseId, @PathVariable Long examId) {\n+        log.debug(\"REST request to get exam : {}\", examId);\n+        Optional<ResponseEntity<Exam>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        Exam exam = examService.findOne(examId);\n+        return courseAndExamAccessFailure.orElseGet(() -> ResponseEntity.ok(exam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUxOTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MDozOFrOGjYIQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MDozOFrOGjYIQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ExerciseGroup exerciseGroup = exerciseGroupService.findOne(exerciseGroupId);\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(exerciseGroup));\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(exerciseGroupService.findOne(exerciseGroupId)));", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748673", "createdAt": "2020-06-13T15:50:38Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.actuate.audit.AuditEvent;\n+import org.springframework.boot.actuate.audit.AuditEventRepository;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.service.ExamAccessService;\n+import de.tum.in.www1.artemis.service.ExerciseGroupService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing ExerciseGroup.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ExerciseGroupResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ExerciseGroupResource.class);\n+\n+    private static final String ENTITY_NAME = \"exerciseGroup\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final ExerciseGroupService exerciseGroupService;\n+\n+    private final ExamAccessService examAccessService;\n+\n+    private final UserService userService;\n+\n+    private final AuditEventRepository auditEventRepository;\n+\n+    public ExerciseGroupResource(ExerciseGroupService exerciseGroupService, ExamAccessService examAccessService, UserService userService,\n+            AuditEventRepository auditEventRepository) {\n+        this.exerciseGroupService = exerciseGroupService;\n+        this.examAccessService = examAccessService;\n+        this.userService = userService;\n+        this.auditEventRepository = auditEventRepository;\n+    }\n+\n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/exerciseGroups : Create a new exercise group.\n+     *\n+     * @param courseId      the course to which the exercise group belongs to\n+     * @param examId        the exam to which the exercise group belongs to\n+     * @param exerciseGroup the exercise group to create\n+     * @return the ResponseEntity with status 201 (Created) and with the new exerciseGroup as body,\n+     *         or with status 400 (Bad Request) if the exerciseGroup has already an ID\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/exerciseGroups\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<ExerciseGroup> createExerciseGroup(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody ExerciseGroup exerciseGroup)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create an exercise group : {}\", exerciseGroup);\n+        if (exerciseGroup.getId() != null) {\n+            throw new BadRequestAlertException(\"A new exerciseGroup cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+\n+        Optional<ResponseEntity<ExerciseGroup>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure.get();\n+        }\n+\n+        ExerciseGroup savedExerciseGroup = exerciseGroupService.save(exerciseGroup);\n+        return ResponseEntity.created(new URI(\"/api/courses/\" + courseId + \"/exams/\" + examId + \"/exerciseGroups/\" + savedExerciseGroup.getId()))\n+                .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, savedExerciseGroup.getTitle())).body(savedExerciseGroup);\n+    }\n+\n+    /**\n+     * PUT /courses/{courseId}/exams/{examId}/exerciseGroups : Update an existing exercise group.\n+     *\n+     * @param courseId              the course to which the exercise group belongs to\n+     * @param examId                the exam to which the exercise group belongs to\n+     * @param updatedExerciseGroup  the exercise group to update\n+     * @return the ResponseEntity with status 200 (OK) and with the body of the updated exercise group\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/courses/{courseId}/exams/{examId}/exerciseGroups\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<ExerciseGroup> updateExerciseGroup(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody ExerciseGroup updatedExerciseGroup)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to update an exercise group : {}\", updatedExerciseGroup);\n+        if (updatedExerciseGroup.getId() == null) {\n+            return createExerciseGroup(courseId, examId, updatedExerciseGroup);\n+        }\n+\n+        Optional<ResponseEntity<ExerciseGroup>> accessFailure = exerciseGroupService.checkCourseAndExamAndExerciseGroupAccess(courseId, examId, updatedExerciseGroup.getId());\n+        if (accessFailure.isPresent()) {\n+            return accessFailure.get();\n+        }\n+\n+        ExerciseGroup result = exerciseGroupService.save(updatedExerciseGroup);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, result.getTitle())).body(result);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/exams/{examId}/exerciseGroups/{exerciseGroupId} : Find an exercise group by id.\n+     *\n+     * @param courseId          the course to which the exercise group belongs to\n+     * @param examId            the exam to which the exercise group belongs to\n+     * @param exerciseGroupId   the id of the exercise group to find\n+     * @return the ResponseEntity with status 200 (OK) and with the found exercise group as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/exerciseGroups/{exerciseGroupId}\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<ExerciseGroup> getExerciseGroup(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long exerciseGroupId) {\n+        log.debug(\"REST request to get exercise group : {}\", exerciseGroupId);\n+        Optional<ResponseEntity<ExerciseGroup>> accessFailure = exerciseGroupService.checkCourseAndExamAndExerciseGroupAccess(courseId, examId, exerciseGroupId);\n+        ExerciseGroup exerciseGroup = exerciseGroupService.findOne(exerciseGroupId);\n+        return accessFailure.orElseGet(() -> ResponseEntity.ok(exerciseGroup));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTUxOTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MTowNVrOGjYIaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MTowNVrOGjYIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StudentExam studentExam = studentExamService.findOne(studentExamId);\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExam));\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOne(studentExamId)));", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748713", "createdAt": "2020-06-13T15:51:05Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.exam.StudentExam;\n+import de.tum.in.www1.artemis.service.ExamAccessService;\n+import de.tum.in.www1.artemis.service.StudentExamService;\n+\n+/**\n+ * REST controller for managing ExerciseGroup.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StudentExamResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(StudentExamResource.class);\n+\n+    private final ExamAccessService examAccessService;\n+\n+    private final StudentExamService studentExamService;\n+\n+    public StudentExamResource(ExamAccessService examAccessService, StudentExamService studentExamService) {\n+        this.examAccessService = examAccessService;\n+        this.studentExamService = studentExamService;\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/exams/{examId}/studentExams/{studentExamId} : Find a student exam by id.\n+     *\n+     * @param courseId      the course to which the student exam belongs to\n+     * @param examId        the exam to which the student exam belongs to\n+     * @param studentExamId the id of the student exam to find\n+     * @return the ResponseEntity with status 200 (OK) and with the found student exam as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/studentExams/{studentExamId}\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n+        log.debug(\"REST request to get student exam : {}\", studentExamId);\n+        Optional<ResponseEntity<StudentExam>> accessFailure = studentExamService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n+        StudentExam studentExam = studentExamService.findOne(studentExamId);\n+        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1MzoyNlrOGj6oiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1OToxMlrOGj82XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzk5NQ==", "bodyText": "You can remove this line with @Query(...) completely", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440313995", "createdAt": "2020-06-15T16:53:26Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "diffHunk": "@@ -16,7 +16,8 @@\n @Repository\n public interface ExerciseGroupRepository extends JpaRepository<ExerciseGroup, Long> {\n \n-    List<ExerciseGroup> findByExamId(Long examId);\n+    @Query(\"SELECT e FROM ExerciseGroup e WHERE e.exam.id = :#{#examId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MDMwMA==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440350300", "createdAt": "2020-06-15T17:59:12Z", "author": {"login": "sjagla27"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "diffHunk": "@@ -16,7 +16,8 @@\n @Repository\n public interface ExerciseGroupRepository extends JpaRepository<ExerciseGroup, Long> {\n \n-    List<ExerciseGroup> findByExamId(Long examId);\n+    @Query(\"SELECT e FROM ExerciseGroup e WHERE e.exam.id = :#{#examId}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzk5NQ=="}, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2NzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1Mzo1N1rOGj6pnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1OToxNlrOGj82gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDI2OA==", "bodyText": "You could then also remove @Param(\"examId\") here", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440314268", "createdAt": "2020-06-15T16:53:57Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "diffHunk": "@@ -16,7 +16,8 @@\n @Repository\n public interface ExerciseGroupRepository extends JpaRepository<ExerciseGroup, Long> {\n \n-    List<ExerciseGroup> findByExamId(Long examId);\n+    @Query(\"SELECT e FROM ExerciseGroup e WHERE e.exam.id = :#{#examId}\")\n+    List<ExerciseGroup> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MDMzNw==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440350337", "createdAt": "2020-06-15T17:59:16Z", "author": {"login": "sjagla27"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "diffHunk": "@@ -16,7 +16,8 @@\n @Repository\n public interface ExerciseGroupRepository extends JpaRepository<ExerciseGroup, Long> {\n \n-    List<ExerciseGroup> findByExamId(Long examId);\n+    @Query(\"SELECT e FROM ExerciseGroup e WHERE e.exam.id = :#{#examId}\")\n+    List<ExerciseGroup> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDI2OA=="}, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2OTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NDozNVrOGj6qyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1ODo1OFrOGj814A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDU3MQ==", "bodyText": "Can also be removed", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440314571", "createdAt": "2020-06-15T16:54:35Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -13,5 +15,6 @@\n @Repository\n public interface StudentExamRepository extends JpaRepository<StudentExam, Long> {\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"SELECT s FROM StudentExam s WHERE s.exam.id = :#{#examId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MDE3Ng==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440350176", "createdAt": "2020-06-15T17:58:58Z", "author": {"login": "sjagla27"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -13,5 +15,6 @@\n @Repository\n public interface StudentExamRepository extends JpaRepository<StudentExam, Long> {\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"SELECT s FROM StudentExam s WHERE s.exam.id = :#{#examId}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDU3MQ=="}, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NDo0M1rOGj6rEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1ODo1M1rOGj81rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDY0Mw==", "bodyText": "You could then also remove @Param(\"examId\") here", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440314643", "createdAt": "2020-06-15T16:54:43Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -13,5 +15,6 @@\n @Repository\n public interface StudentExamRepository extends JpaRepository<StudentExam, Long> {\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"SELECT s FROM StudentExam s WHERE s.exam.id = :#{#examId}\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MDEyNQ==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440350125", "createdAt": "2020-06-15T17:58:53Z", "author": {"login": "sjagla27"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -13,5 +15,6 @@\n @Repository\n public interface StudentExamRepository extends JpaRepository<StudentExam, Long> {\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"SELECT s FROM StudentExam s WHERE s.exam.id = :#{#examId}\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDY0Mw=="}, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI3MjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NToyM1rOGj6stw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1ODo0OFrOGj81gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTA2Mw==", "bodyText": "Remove :-)", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440315063", "createdAt": "2020-06-15T16:55:23Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "diffHunk": "@@ -146,6 +146,7 @@ public ExerciseGroupResource(ExerciseGroupService exerciseGroupService, ExamAcce\n     @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n     public ResponseEntity<List<ExerciseGroup>> getExerciseGroupsForExam(@PathVariable Long courseId, @PathVariable Long examId) {\n         log.debug(\"REST request to get all exercise groups for exam : {}\", examId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MDA4Mg==", "bodyText": "done", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440350082", "createdAt": "2020-06-15T17:58:48Z", "author": {"login": "sjagla27"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "diffHunk": "@@ -146,6 +146,7 @@ public ExerciseGroupResource(ExerciseGroupService exerciseGroupService, ExamAcce\n     @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n     public ResponseEntity<List<ExerciseGroup>> getExerciseGroupsForExam(@PathVariable Long courseId, @PathVariable Long examId) {\n         log.debug(\"REST request to get all exercise groups for exam : {}\", examId);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTA2Mw=="}, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI3NjMwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/exam.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NjozMFrOGj6vhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NjozMFrOGj6vhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTc4MA==", "bodyText": "Should be lowercase", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440315780", "createdAt": "2020-06-15T16:56:30Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/i18n/en/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Assessment Dashboard\",\n             \"studentExams\": \"Student Exams\",\n             \"students\": \"Students\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Student exams\",\n+            \"generateStudentExams\": \"Generate student exams\",\n+            \"searchForStudents\": \"Search for students by login or name (comma separated)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Result\",\n+            \"created\": \"Created\",\n+            \"View\": \"View\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI3NjY0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/exam.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NjozNVrOGj6vtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NzoxOVrOGj6xUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTgzMA==", "bodyText": "Small typo here", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440315830", "createdAt": "2020-06-15T16:56:35Z", "author": {"login": "anditurdiu"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Bewertungstafel\",\n             \"studentExams\": \"Klausuren der Studenten\",\n             \"students\": \"Studenten\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Klausuren\",\n+            \"generateStudentExams\": \"Klausuren erstellen\",\n+            \"searchForStudents\": \"Suche nach Studenten Logins oder Namen (Komma getrennt)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Ergebnis\",\n+            \"created\": \"Erstellt\",\n+            \"View\": \"Ansich\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjI0Mw==", "bodyText": "fixed", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440316243", "createdAt": "2020-06-15T16:57:19Z", "author": {"login": "sjagla27"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Bewertungstafel\",\n             \"studentExams\": \"Klausuren der Studenten\",\n             \"students\": \"Studenten\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Klausuren\",\n+            \"generateStudentExams\": \"Klausuren erstellen\",\n+            \"searchForStudents\": \"Suche nach Studenten Logins oder Namen (Komma getrennt)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Ergebnis\",\n+            \"created\": \"Erstellt\",\n+            \"View\": \"Ansich\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTgzMA=="}, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI3NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/exam.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1Njo1NlrOGj6weQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1Njo1NlrOGj6weQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjAyNQ==", "bodyText": "Should be lowercase and Ansicht", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440316025", "createdAt": "2020-06-15T16:56:56Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Bewertungstafel\",\n             \"studentExams\": \"Klausuren der Studenten\",\n             \"students\": \"Studenten\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Klausuren\",\n+            \"generateStudentExams\": \"Klausuren erstellen\",\n+            \"searchForStudents\": \"Suche nach Studenten Logins oder Namen (Komma getrennt)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Ergebnis\",\n+            \"created\": \"Erstellt\",\n+            \"View\": \"Ansich\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 55, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}