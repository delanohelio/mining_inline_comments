{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjE3MTQ5", "number": 1721, "title": "Create Exam Scores Page", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I added authorities to all new routes and check the course groups for displaying navigation elements (links, buttons)\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\n\n\nSpring Backlog item\nDescription\n\nAdded an exam scores board with csv export.\nSteps for Testing\n\n\nLog in to Artemis\nNavigate to Course Administration\nCreate an Exam, Conduct the Exam, Correct the Exam\nLook at the results in the exam results page and check for errors / wrong calculations. ALso try the csv export\n\nScreenshots", "createdAt": "2020-06-26T14:27:23Z", "url": "https://github.com/ls1intum/Artemis/pull/1721", "merged": true, "mergeCommit": {"oid": "43fb4ec70505f251dba9f0d476a979756a6b3d41"}, "closed": true, "closedAt": "2020-07-05T20:43:31Z", "author": {"login": "stefanwaldhauser"}, "timelineItems": {"totalCount": 70, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvEETzgH2gAyNDQwNjE3MTQ5Ojc3Mjk2NTdmY2Y0MGE4ODdhZGNiYzY4MmY2NzFhNzU5Yjg1MzJjNGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyC8yTAFqTQ0MjcwNTM1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7729657fcf40a887adcbc682f671a759b8532c4a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7729657fcf40a887adcbc682f671a759b8532c4a", "committedDate": "2020-06-26T14:24:51Z", "message": "Set Up Routing, Component and Modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a26feab0c46e39a565ec9d526dd33e13a81d66", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f9a26feab0c46e39a565ec9d526dd33e13a81d66", "committedDate": "2020-06-26T14:40:29Z", "message": "Secured Routes correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd2e59ebf912e298eab6f7d7adb06e7b4f7c9a6", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5cd2e59ebf912e298eab6f7d7adb06e7b4f7c9a6", "committedDate": "2020-06-26T14:40:48Z", "message": "Provided correct page title and started i18 section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf36c425d9003bde0b04c03bf26d5db7cc4aa12", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/3cf36c425d9003bde0b04c03bf26d5db7cc4aa12", "committedDate": "2020-06-27T16:43:09Z", "message": "page draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a8a799249bb4caf4875154405b48fe9bb51b787", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5a8a799249bb4caf4875154405b48fe9bb51b787", "committedDate": "2020-06-29T07:53:21Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f0bcc423b9c2be85bb1157d4e325f99799ce4d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d1f0bcc423b9c2be85bb1157d4e325f99799ce4d", "committedDate": "2020-06-29T15:04:27Z", "message": "Simple Dummy Table Implementation and DTO Idea"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9fdb9d6827491acfd7cc181aa703fc826d23d81", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/c9fdb9d6827491acfd7cc181aa703fc826d23d81", "committedDate": "2020-06-29T20:06:47Z", "message": "page prepare"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad345955c08311124698e26796120789d25ed76", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1ad345955c08311124698e26796120789d25ed76", "committedDate": "2020-06-30T13:02:33Z", "message": "Implemented REST Endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d36a57a5fb4681b9b4889de127b7da1d8f17f394", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/d36a57a5fb4681b9b4889de127b7da1d8f17f394", "committedDate": "2020-06-30T16:09:46Z", "message": "score table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b013fff08445344b6b0b3709d019f559bf75b5da", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/b013fff08445344b6b0b3709d019f559bf75b5da", "committedDate": "2020-06-30T16:19:16Z", "message": "exerciseGroup average"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faec91d53b48d5dc68a7514cc615266dce359526", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/faec91d53b48d5dc68a7514cc615266dce359526", "committedDate": "2020-06-30T16:21:24Z", "message": "fixed looks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59af2f3e9371a3db10c8b6a2fab273a367d6d62d", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/59af2f3e9371a3db10c8b6a2fab273a367d6d62d", "committedDate": "2020-06-30T16:40:29Z", "message": "server side comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda4342e9773cf385fa69f72636016d576f66093", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/cda4342e9773cf385fa69f72636016d576f66093", "committedDate": "2020-06-30T17:03:20Z", "message": "more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "484eccd29f0eeda80fd307240d1274553cdec69b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/484eccd29f0eeda80fd307240d1274553cdec69b", "committedDate": "2020-06-30T21:02:12Z", "message": "Fixed case when no result exists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f1e4f8c968de01dca358cf2d219692ee7c60b2", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/35f1e4f8c968de01dca358cf2d219692ee7c60b2", "committedDate": "2020-07-01T07:45:03Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87349ab4997a951926ad6196fe74499b6379b2ec", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/87349ab4997a951926ad6196fe74499b6379b2ec", "committedDate": "2020-07-01T08:19:48Z", "message": "first export work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fde546702fad8b7bf163a2251cbc9ea292c0bfa", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/1fde546702fad8b7bf163a2251cbc9ea292c0bfa", "committedDate": "2020-07-01T08:56:41Z", "message": "runden"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a927366844c0d9326d9d9133cd8150ddeb8b65c", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/5a927366844c0d9326d9d9133cd8150ddeb8b65c", "committedDate": "2020-07-01T08:58:00Z", "message": "unfinished export auskommentiert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "682645d3e7099694e9199dad7074f5a0b8d85af1", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/682645d3e7099694e9199dad7074f5a0b8d85af1", "committedDate": "2020-07-01T11:30:00Z", "message": "Merge remote-tracking branch 'origin/develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b599590d6438a59c82fba4c7e11e052e09f21e35", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/b599590d6438a59c82fba4c7e11e052e09f21e35", "committedDate": "2020-07-01T12:02:31Z", "message": "Merge remote-tracking branch 'origin/develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8e72a12b53f38b1a8c45c24a9c279153b3e7245", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/f8e72a12b53f38b1a8c45c24a9c279153b3e7245", "committedDate": "2020-07-01T12:03:26Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462f3123c2547deeae18f9a24a0567ef157b9ff5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/462f3123c2547deeae18f9a24a0567ef157b9ff5", "committedDate": "2020-07-01T23:59:03Z", "message": "Moved calculation logic to server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cf48952e261e79cac7cf9a435225af2438e9b22", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0cf48952e261e79cac7cf9a435225af2438e9b22", "committedDate": "2020-07-02T09:39:38Z", "message": "Improved Layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114e444e6372e963e5a92a40c630e2fb116c1522", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/114e444e6372e963e5a92a40c630e2fb116c1522", "committedDate": "2020-07-02T09:42:56Z", "message": "Further layout tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bfe3f3be5536381d56b724ee2b7e01c1e60d6f6", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8bfe3f3be5536381d56b724ee2b7e01c1e60d6f6", "committedDate": "2020-07-02T09:51:04Z", "message": "Added missing javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae4f47c327296ea3fa91b49c824af98b9df99e89", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ae4f47c327296ea3fa91b49c824af98b9df99e89", "committedDate": "2020-07-02T10:02:05Z", "message": "Fixed javadoc again..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e1134d3095d733107e2fb98214d3ca1499a873", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/62e1134d3095d733107e2fb98214d3ca1499a873", "committedDate": "2020-07-02T10:56:15Z", "message": "Added CSV Export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d9fc2b0167487c3c5aa5db6d67598bb8db3b2b4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4d9fc2b0167487c3c5aa5db6d67598bb8db3b2b4", "committedDate": "2020-07-02T12:59:47Z", "message": "Added Types to Frontend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f67702d6a139ae3d316e697fc35d3acbfeb670b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6f67702d6a139ae3d316e697fc35d3acbfeb670b", "committedDate": "2020-07-02T13:07:20Z", "message": "Added achieved score to table and csv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d8d7c04c76dc70c4270ee472b2735d0998fe6bf", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7d8d7c04c76dc70c4270ee472b2735d0998fe6bf", "committedDate": "2020-07-02T13:12:16Z", "message": "Added error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3f4de4e483831b72daedda9daacc43990b1c010", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b3f4de4e483831b72daedda9daacc43990b1c010", "committedDate": "2020-07-02T13:16:41Z", "message": "Added loading indicator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22878fe320d758aaa31823330f315373ba60043", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e22878fe320d758aaa31823330f315373ba60043", "committedDate": "2020-07-02T13:48:12Z", "message": "Added translations to everything"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd04fc824efdfff37f4eeb6ed4670b2c6c5c8129", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/cd04fc824efdfff37f4eeb6ed4670b2c6c5c8129", "committedDate": "2020-07-02T14:21:19Z", "message": "Took out exam average score calculation for the moment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a7a34576525ec65e9086d71f7c6787443a32c6", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/40a7a34576525ec65e9086d71f7c6787443a32c6", "committedDate": "2020-07-02T14:24:39Z", "message": "Fixes average score calculation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ba10febb2898f1ccd0fd11d0ce57a78bf0e96a", "author": {"user": {"login": "stefanwaldhauser", "name": "Stefan Waldhauser"}}, "url": "https://github.com/ls1intum/Artemis/commit/d2ba10febb2898f1ccd0fd11d0ce57a78bf0e96a", "committedDate": "2020-07-02T14:32:30Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e02b017c0a74298d268a65cd2ff7e794ec0a18c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4e02b017c0a74298d268a65cd2ff7e794ec0a18c", "committedDate": "2020-07-02T14:46:39Z", "message": "Formatted wrongly formatted file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1ad784ff68ccc4ae992813422239cbda18b4109e", "committedDate": "2020-07-02T14:58:52Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTgyNzY3", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-441982767", "createdAt": "2020-07-02T19:58:14Z", "commit": {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1ODoxNFrOGsbTrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1ODoxNFrOGsbTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNzkzNQ==", "bodyText": "I'd prefer returning an Optional instead of null.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449237935", "createdAt": "2020-07-02T19:58:14Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return relevant result of student participation or null if none exists\n+     */\n+    private Result getRelevantResult(StudentParticipation studentParticipation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMDM0NDE4", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442034418", "createdAt": "2020-07-02T21:40:29Z", "commit": {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "048929dd6f5323765c9f43ea4699a7536d0d4e15", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/048929dd6f5323765c9f43ea4699a7536d0d4e15", "committedDate": "2020-07-02T23:16:47Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a4e80748dfa1479a0955c14117c3381c79865f7", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7a4e80748dfa1479a0955c14117c3381c79865f7", "committedDate": "2020-07-02T23:31:33Z", "message": "Added ngIf checks to frontend code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/fd0250513c752c1f9f2dbcdc4e1237652146dc68", "committedDate": "2020-07-02T23:35:49Z", "message": "Changed Code to Usage of Optional"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjYwOTk1", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442260995", "createdAt": "2020-07-03T09:00:18Z", "commit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowMDoxOFrOGspSNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowMDoxOFrOGspSNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ==", "bodyText": "I don't think you need \"exerciseGroups.exercises.studentParticipations.submissions\" here.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449466935", "createdAt": "2020-07-03T09:00:18Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java", "diffHunk": "@@ -46,6 +46,10 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exerciseGroups\", \"exerciseGroups.exercises\", \"registeredUsers\", \"studentExams\" })\n     Optional<Exam> findWithExercisesRegisteredUsersStudentExamsById(Long id);\n \n+    @EntityGraph(type = LOAD, attributePaths = { \"registeredUsers\", \"exerciseGroups\", \"exerciseGroups.exercises\", \"exerciseGroups.exercises.studentParticipations\",\n+            \"exerciseGroups.exercises.studentParticipations.results\", \"exerciseGroups.exercises.studentParticipations.submissions\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjYxNTMz", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442261533", "createdAt": "2020-07-03T09:01:03Z", "commit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowMTowM1rOGspTvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowMTowM1rOGspTvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzMyNQ==", "bodyText": "please add { }", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449467325", "createdAt": "2020-07-03T09:01:03Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,147 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjYyMDUy", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442262052", "createdAt": "2020-07-03T09:01:49Z", "commit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ebbac866821187dcff834d922b67f799d305262", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1ebbac866821187dcff834d922b67f799d305262", "committedDate": "2020-07-03T09:10:39Z", "message": "Removed unnecessary entity graph attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5011dbdf2b222a17c0674381032e8a6712c329a8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5011dbdf2b222a17c0674381032e8a6712c329a8", "committedDate": "2020-07-03T09:11:30Z", "message": "Added brackets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d617bd79f9689495de67a3a3f0c59ed3cf942eed", "committedDate": "2020-07-03T14:00:22Z", "message": "template for a test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2e8c210d8bb9228133e2bc1353f11327264b03", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/0c2e8c210d8bb9228133e2bc1353f11327264b03", "committedDate": "2020-07-04T18:12:18Z", "message": "Better doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955bd6daad21269e21d976f0c62db53557707c4f", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/955bd6daad21269e21d976f0c62db53557707c4f", "committedDate": "2020-07-04T21:18:42Z", "message": "Written the mother of all tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjMyMjQ1", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442632245", "createdAt": "2020-07-04T21:24:29Z", "commit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMToyNDoyOVrOGs-BOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTozOToxOVrOGs-EgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNjY0OA==", "bodyText": "Why do we return \"\" instead of null if no registrationNumber is present?", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449806648", "createdAt": "2020-07-04T21:24:29Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzA4MA==", "bodyText": "Why not initialize studentResult.overallPointsAchieved with 0. Then you don't need the conditional.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807080", "createdAt": "2020-07-04T21:31:41Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzM3Mg==", "bodyText": "scores.maxPoints is equalTo exam.maxPoints. The assumption here is, that the exam.maxPoints = sum(all exercise.maxPoints) but at the moment the scores of the exercises are set independently.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807372", "createdAt": "2020-07-04T21:37:03Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQzNw==", "bodyText": "Compares Long with double", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807437", "createdAt": "2020-07-04T21:38:11Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {\n+                exerciseGroup.averagePointsAchieved = round((sumOfPoints / noOfFoundResults), 2);\n+            }\n+        }\n+\n+        // Uptading exam information in DTO\n+        Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n+                .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n+\n+        Long numberOfStudentResultsWithOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null).count();\n+\n+        if (numberOfStudentResultsWithOverallPoints != 0.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ1Mg==", "bodyText": "Could use an int here", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807452", "createdAt": "2020-07-04T21:38:47Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ4OQ==", "bodyText": "See above", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807489", "createdAt": "2020-07-04T21:39:19Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76851cc9ef44dac8dea8ee819f7704329029f29", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/e76851cc9ef44dac8dea8ee819f7704329029f29", "committedDate": "2020-07-04T21:41:35Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjMyODc5", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442632879", "createdAt": "2020-07-04T21:44:18Z", "commit": {"oid": "e76851cc9ef44dac8dea8ee819f7704329029f29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo0NDoxOFrOGs-FlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo0NDoxOFrOGs-FlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzc2NA==", "bodyText": "Should we use @JsonInclude(JsonInclude.Include.NON_EMPTY) like with the other entities. I'm not sure what the client expects.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807764", "createdAt": "2020-07-04T21:44:18Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76851cc9ef44dac8dea8ee819f7704329029f29"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ebcec51780386d379a5b06862a5dec6243865d4", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/9ebcec51780386d379a5b06862a5dec6243865d4", "committedDate": "2020-07-04T22:13:04Z", "message": "Small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8b20a1b6751afa604df50b3e0b3ee541f6be4b", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/4e8b20a1b6751afa604df50b3e0b3ee541f6be4b", "committedDate": "2020-07-04T22:38:18Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d77660f92bf19ac90f7172c913f10ecdf890bfd", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/5d77660f92bf19ac90f7172c913f10ecdf890bfd", "committedDate": "2020-07-04T23:13:22Z", "message": "Fix NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "310ee01c94e1e4ab3647a416c88401c1c45f2834", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/310ee01c94e1e4ab3647a416c88401c1c45f2834", "committedDate": "2020-07-04T23:45:45Z", "message": "Merge develop resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cdec228e6651e45766600e63fa055bc075343dd", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/3cdec228e6651e45766600e63fa055bc075343dd", "committedDate": "2020-07-05T11:18:05Z", "message": "adjust rounding for achieved points"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "780e383399600ff640786276f440d5f1ceb38ac2", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/780e383399600ff640786276f440d5f1ceb38ac2", "committedDate": "2020-07-05T11:18:19Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3962dfbd2bf2cbc0f7d39f4e438a313ea90b13df", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/3962dfbd2bf2cbc0f7d39f4e438a313ea90b13df", "committedDate": "2020-07-05T12:46:56Z", "message": "runden client-side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/24106d7495a9eb3c01bffdb66a4a4c7560d23010", "committedDate": "2020-07-05T13:10:23Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/601c000da0e3b01d1399b656aaf3d90897221d0e", "committedDate": "2020-07-05T19:41:48Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzAwODcy", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442700872", "createdAt": "2020-07-05T19:29:20Z", "commit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOToyOToyMFrOGtEXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0Njo0MlrOGtEc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMDU3NQ==", "bodyText": "I really like how you have used DTOs here! I would suggest to stick to our implicit filename convention (e.g. (student-dto.model.ts)", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449910575", "createdAt": "2020-07-05T19:29:20Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/ExamScoreDTOs.ts", "diffHunk": "@@ -0,0 +1,35 @@\n+export class ExamScoreDTO {\n+    constructor(\n+        public id: number,\n+        public title: string,\n+        public maxPoints: number,\n+        public averagePointsAchieved: number,\n+        public exerciseGroups: ExerciseGroup[],\n+        public studentResults: StudentResult[],\n+    ) {}\n+}\n+\n+export class ExerciseGroup {\n+    constructor(public id: number, public title: string, public maxPoints: number, public averagePointsAchieved: number, public containedExercises: string[]) {}\n+}\n+\n+export class StudentResult {\n+    constructor(\n+        public id: number,\n+        public name: string,\n+        public login: string,\n+        public eMail: string,\n+        public registrationNumber: string,\n+        public overallPointsAchieved: number,\n+        public overallScoreAchieved: number,\n+        public exerciseGroupIdToExerciseResult: MapToExerciseResult,\n+    ) {}\n+}\n+\n+export interface MapToExerciseResult {\n+    [key: number]: ExerciseResult;\n+}\n+\n+export class ExerciseResult {\n+    constructor(public id: number, public title: string, public maxScore: number, public achievedScore: number, public achievedPoints: number) {}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTIyNg==", "bodyText": "I think this routes wouldn't be lazy loaded. Have a look at exam-management.route.ts, especially examManagementState routes (also see Angular's documentation).\nI would also suggest to stick to our naming convention --> exam-scores.route.ts", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911226", "createdAt": "2020-07-05T19:36:53Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores-routing.module.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+import { NgModule } from '@angular/core';\n+import { RouterModule, Routes } from '@angular/router';\n+import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n+import { ExamScoresComponent } from 'app/exam/exam-scores/exam-scores.component';\n+\n+const routes: Routes = [\n+    {\n+        path: ':examId/scores',\n+        component: ExamScoresComponent,\n+        data: {\n+            authorities: ['ROLE_ADMIN', 'ROLE_INSTRUCTOR'],\n+            pageTitle: 'artemisApp.examScores.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+];\n+\n+@NgModule({\n+    imports: [RouterModule.forChild(routes)],\n+    exports: [RouterModule],\n+})\n+export class ArtemisExamScoresRoutingModule {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTMxMg==", "bodyText": "I've overseen RouterModule.forChild(routes). So lazy loading should be fine but I would still suggest to change the filename.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911312", "createdAt": "2020-07-05T19:37:56Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores-routing.module.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+import { NgModule } from '@angular/core';\n+import { RouterModule, Routes } from '@angular/router';\n+import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n+import { ExamScoresComponent } from 'app/exam/exam-scores/exam-scores.component';\n+\n+const routes: Routes = [\n+    {\n+        path: ':examId/scores',\n+        component: ExamScoresComponent,\n+        data: {\n+            authorities: ['ROLE_ADMIN', 'ROLE_INSTRUCTOR'],\n+            pageTitle: 'artemisApp.examScores.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+];\n+\n+@NgModule({\n+    imports: [RouterModule.forChild(routes)],\n+    exports: [RouterModule],\n+})\n+export class ArtemisExamScoresRoutingModule {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTIyNg=="}, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTU5Mg==", "bodyText": "Type should be button", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911592", "createdAt": "2020-07-05T19:41:20Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.component.html", "diffHunk": "@@ -79,6 +79,18 @@ <h4 id=\"course-page-heading\" jhiTranslate=\"artemisApp.examManagement.title\">Exam\n                         </div>\n \n                         <div class=\"btn-group flex-btn-group-container\">\n+                            <div class=\"btn-group-vertical mr-1 mb-1\" *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_INSTRUCTOR']\">\n+                                <button\n+                                    type=\"submit\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTYzNA==", "bodyText": "Scores?", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911634", "createdAt": "2020-07-05T19:41:49Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "diffHunk": "@@ -58,6 +59,10 @@ export class ExamManagementService {\n             .pipe(map((res: EntityResponseType) => ExamManagementService.convertDateFromServer(res)));\n     }\n \n+    getExamScore(courseId: number, examId: number): Observable<HttpResponse<ExamScoreDTO>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTgwMg==", "bodyText": "The comment should be placed above the method :-)", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911802", "createdAt": "2020-07-05T19:43:55Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { SortService } from 'app/shared/service/sort.service';\n+import { ExportToCsv } from 'export-to-csv';\n+import { ExamScoreDTO, ExerciseGroup, StudentResult } from 'app/exam/exam-scores/ExamScoreDTOs';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { onError } from 'app/shared/util/global.utils';\n+import { AlertService } from 'app/core/alert/alert.service';\n+\n+@Component({\n+    selector: 'jhi-exam-scores',\n+    templateUrl: './exam-scores.component.html',\n+    styles: [],\n+})\n+export class ExamScoresComponent implements OnInit {\n+    public examScoreDTO: ExamScoreDTO;\n+    public exerciseGroups: ExerciseGroup[];\n+    public studentResults: StudentResult[];\n+\n+    public predicate = 'id';\n+    public reverse = false;\n+    public isLoading = true;\n+\n+    constructor(private route: ActivatedRoute, private examService: ExamManagementService, private sortService: SortService, private jhiAlertService: AlertService) {}\n+\n+    ngOnInit() {\n+        this.route.params.subscribe((params) => {\n+            this.examService.getExamScore(params['courseId'], params['examId']).subscribe(\n+                (examResponse) => {\n+                    this.examScoreDTO = examResponse.body!;\n+                    if (this.examScoreDTO) {\n+                        this.studentResults = this.examScoreDTO.studentResults;\n+                        this.exerciseGroups = this.examScoreDTO.exerciseGroups;\n+                    }\n+                    this.isLoading = false;\n+                },\n+                (res: HttpErrorResponse) => onError(this.jhiAlertService, res),\n+            );\n+        });\n+    }\n+\n+    round(value: any, exp: number) {\n+        // helper function to make actually rounding possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTg0NQ==", "bodyText": "erreichbare", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911845", "createdAt": "2020-07-05T19:44:26Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -33,6 +33,22 @@\n                 \"tooManyMandatoryExerciseGroups\": \"Die Anzahl verpflichtender Aufgabengruppen ist zu gro\u00df.\"\n             }\n         },\n+        \"examScores\": {\n+            \"pointsAchievable\": \"{{ maxPoints }} Punkte erreichbar\",\n+            \"title\": \"Klausur Ergebnisse\",\n+            \"titleColumn\": \"Titel\",\n+            \"containedExercisesColumn\": \"Aufgaben in Gruppe\",\n+            \"averagePointsColumn\": \"Durchschnittlich erreichte Punkte\",\n+            \"maximumPointsColumn\": \"Maximal Erreichbare Punkte\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMjA1MQ==", "bodyText": "Can be private", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449912051", "createdAt": "2020-07-05T19:46:42Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { SortService } from 'app/shared/service/sort.service';\n+import { ExportToCsv } from 'export-to-csv';\n+import { ExamScoreDTO, ExerciseGroup, StudentResult } from 'app/exam/exam-scores/ExamScoreDTOs';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { onError } from 'app/shared/util/global.utils';\n+import { AlertService } from 'app/core/alert/alert.service';\n+\n+@Component({\n+    selector: 'jhi-exam-scores',\n+    templateUrl: './exam-scores.component.html',\n+    styles: [],\n+})\n+export class ExamScoresComponent implements OnInit {\n+    public examScoreDTO: ExamScoreDTO;\n+    public exerciseGroups: ExerciseGroup[];\n+    public studentResults: StudentResult[];\n+\n+    public predicate = 'id';\n+    public reverse = false;\n+    public isLoading = true;\n+\n+    constructor(private route: ActivatedRoute, private examService: ExamManagementService, private sortService: SortService, private jhiAlertService: AlertService) {}\n+\n+    ngOnInit() {\n+        this.route.params.subscribe((params) => {\n+            this.examService.getExamScore(params['courseId'], params['examId']).subscribe(\n+                (examResponse) => {\n+                    this.examScoreDTO = examResponse.body!;\n+                    if (this.examScoreDTO) {\n+                        this.studentResults = this.examScoreDTO.studentResults;\n+                        this.exerciseGroups = this.examScoreDTO.exerciseGroups;\n+                    }\n+                    this.isLoading = false;\n+                },\n+                (res: HttpErrorResponse) => onError(this.jhiAlertService, res),\n+            );\n+        });\n+    }\n+\n+    round(value: any, exp: number) {\n+        // helper function to make actually rounding possible\n+        if (typeof exp === 'undefined' || +exp === 0) {\n+            return Math.round(value);\n+        }\n+\n+        value = +value;\n+        exp = +exp;\n+\n+        if (isNaN(value) || !(exp % 1 === 0)) {\n+            return NaN;\n+        }\n+\n+        // Shift\n+        value = value.toString().split('e');\n+        value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + exp : exp)));\n+\n+        // Shift back\n+        value = value.toString().split('e');\n+        return +(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp));\n+    }\n+\n+    sortRows() {\n+        this.sortService.sortByProperty(this.examScoreDTO.studentResults, this.predicate, this.reverse);\n+    }\n+\n+    exportToCsv() {\n+        const headers = ['Name', 'Login', 'E-Mail', 'Matriculation Number'];\n+        this.exerciseGroups.forEach((exerciseGroup) => {\n+            headers.push(exerciseGroup.title + ' Assigned Exercise');\n+            headers.push(exerciseGroup.title + ' Achieved Points');\n+            headers.push(exerciseGroup.title + ' Achieved Score (%)');\n+        });\n+        headers.push('Overall Points');\n+        headers.push('Overall Score (%)');\n+\n+        const data = this.studentResults.map((studentResult) => {\n+            return this.convertToCSVRow(studentResult);\n+        });\n+\n+        const options = {\n+            fieldSeparator: ',',\n+            quoteStrings: '\"',\n+            decimalSeparator: '.',\n+            showLabels: true,\n+            title: this.examScoreDTO.title,\n+            filename: this.examScoreDTO.title + 'Results',\n+            useTextFile: false,\n+            useBom: true,\n+            headers,\n+        };\n+\n+        const csvExporter = new ExportToCsv(options);\n+\n+        csvExporter.generateCsv(data);\n+    }\n+\n+    convertToCSVRow(studentResult: StudentResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/a872b3ccb22836d698fd9610f059699d6fa74814", "committedDate": "2020-07-05T20:07:07Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzAzMzkz", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442703393", "createdAt": "2020-07-05T20:12:37Z", "commit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoxMjozN1rOGtEltA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoxMjozN1rOGtEltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg==", "bodyText": "Why do we use a title here instead of an ID?", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449914292", "createdAt": "2020-07-05T20:12:37Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -187,10 +190,120 @@ public void delete(Long examId) {\n         return exams.stream().filter(exam -> Boolean.TRUE.equals(exam.isVisibleToStudents())).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c99e1d7bf8e54a9b340b1cec93be39c9451a65a3", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/c99e1d7bf8e54a9b340b1cec93be39c9451a65a3", "committedDate": "2020-07-05T20:27:33Z", "message": "Apply requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dccb3256e8586cf2cea8ca23aee22413a0480774", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/dccb3256e8586cf2cea8ca23aee22413a0480774", "committedDate": "2020-07-05T20:27:49Z", "message": "Merge branch 'develop' into exam-mode/variants/exam-scores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA0ODY3", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442704867", "createdAt": "2020-07-05T20:39:52Z", "commit": {"oid": "dccb3256e8586cf2cea8ca23aee22413a0480774"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA1MDU3", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442705057", "createdAt": "2020-07-05T20:43:19Z", "commit": {"oid": "dccb3256e8586cf2cea8ca23aee22413a0480774"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA1MzU4", "url": "https://github.com/ls1intum/Artemis/pull/1721#pullrequestreview-442705358", "createdAt": "2020-07-05T20:48:31Z", "commit": {"oid": "dccb3256e8586cf2cea8ca23aee22413a0480774"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2542, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}