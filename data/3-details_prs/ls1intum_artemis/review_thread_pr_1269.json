{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjA5OTY2", "number": 1269, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0ODoxNlrODnhU-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToxMjozNlrODnoPEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY3MDk4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/slide-toggle/slide-toggle.module.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0ODoxNlrOF1kWbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxNzowMFrOF2N4VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDQxNQ==", "bodyText": "Do we need a separate module for this one component?", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391714415", "createdAt": "2020-03-12T15:48:16Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/slide-toggle/slide-toggle.module.ts", "diffHunk": "@@ -0,0 +1,11 @@\n+import { NgModule } from '@angular/core';\n+\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { SlideToggleComponent } from 'app/exercises/shared/slide-toggle/slide-toggle.component';\n+\n+@NgModule({\n+    imports: [ArtemisSharedModule],\n+    declarations: [SlideToggleComponent],\n+    exports: [SlideToggleComponent],\n+})\n+export class ArtemisSlideToggleModule {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NDgzNg==", "bodyText": "Not really, I declared it in the shared module so different exercise types could use the slide toggle, thanks for pointing this out.", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r392394836", "createdAt": "2020-03-13T18:17:00Z", "author": {"login": "HanyaElhashemy"}, "path": "src/main/webapp/app/exercises/shared/slide-toggle/slide-toggle.module.ts", "diffHunk": "@@ -0,0 +1,11 @@\n+import { NgModule } from '@angular/core';\n+\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { SlideToggleComponent } from 'app/exercises/shared/slide-toggle/slide-toggle.component';\n+\n+@NgModule({\n+    imports: [ArtemisSharedModule],\n+    declarations: [SlideToggleComponent],\n+    exports: [SlideToggleComponent],\n+})\n+export class ArtemisSlideToggleModule {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDQxNQ=="}, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY3NTM5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/markdown-editor/markdown-editor.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0OToxMlrOF1kZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0OToxMlrOF1kZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNTA4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391715082", "createdAt": "2020-03-12T15:49:12Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/shared/markdown-editor/markdown-editor.component.ts", "diffHunk": "@@ -29,6 +29,7 @@ import { CodeCommand } from 'app/shared/markdown-editor/commands/code.command';\n import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n import { UnorderedListCommand } from 'app/shared/markdown-editor/commands/unorderedListCommand';\n import { HeadingThreeCommand } from 'app/shared/markdown-editor/commands/headingThree.command';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc1NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/structured-grading-criterion.module.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo1NTowOFrOF1u_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyMTo1NlrOF2OBxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4ODY5Mw==", "bodyText": "Do we need a separate module for this one component?", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391888693", "createdAt": "2020-03-12T20:55:08Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/structured-grading-criterion.module.ts", "diffHunk": "@@ -0,0 +1,12 @@\n+import { NgModule } from '@angular/core';\n+import { CommonModule } from '@angular/common';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ArtemisMarkdownEditorModule } from 'app/shared/markdown-editor/markdown-editor.module';\n+import { GradingInstructionsDetailsComponent } from 'app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts';\n+\n+@NgModule({\n+    declarations: [GradingInstructionsDetailsComponent],\n+    exports: [GradingInstructionsDetailsComponent],\n+    imports: [CommonModule, ArtemisSharedModule, ArtemisMarkdownEditorModule],\n+})\n+export class StructuredGradingCriterionModule {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NzI1Mw==", "bodyText": "Same like the slide toggle, I could declare the component in the shared module, but I would leave it like this for now if it is ok for you, because more components might be added in the future if we extended this feature further, for example, if we extended it with self- and peer review.", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r392397253", "createdAt": "2020-03-13T18:21:56Z", "author": {"login": "HanyaElhashemy"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/structured-grading-criterion.module.ts", "diffHunk": "@@ -0,0 +1,12 @@\n+import { NgModule } from '@angular/core';\n+import { CommonModule } from '@angular/common';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ArtemisMarkdownEditorModule } from 'app/shared/markdown-editor/markdown-editor.module';\n+import { GradingInstructionsDetailsComponent } from 'app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts';\n+\n+@NgModule({\n+    declarations: [GradingInstructionsDetailsComponent],\n+    exports: [GradingInstructionsDetailsComponent],\n+    imports: [CommonModule, ArtemisSharedModule, ArtemisMarkdownEditorModule],\n+})\n+export class StructuredGradingCriterionModule {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4ODY5Mw=="}, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc3MTcyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMToxOVrOF1vJ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMToxOVrOF1vJ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391891443", "createdAt": "2020-03-12T21:01:19Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc3MjIzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMToyOFrOF1vKPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMToyOFrOF1vKPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTUxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391891519", "createdAt": "2020-03-12T21:01:28Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n+            }\n+        }\n+        return markdownText;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc3MzAzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMTo0M1rOF1vKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMTo0M1rOF1vKuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391891640", "createdAt": "2020-03-12T21:01:43Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n+            }\n+        }\n+        return markdownText;\n+    }\n+    /**\n+     * @function generateMarkdown\n+     * @desc Generate the markdown text for this grading instruction\n+     */\n+    generateInstructionsMarkdown(criterion: GradingCriterion): string {\n+        let markdownText = '';\n+        if (criterion.structuredGradingInstructions === undefined || criterion.structuredGradingInstructions.length === 0) {\n+            this.instructions = [];\n+            const newInstruction = new GradingInstruction();\n+            this.instructions.push(newInstruction);\n+            criterion.structuredGradingInstructions = this.instructions;\n+        }\n+        for (const instruction of criterion.structuredGradingInstructions) {\n+            markdownText +=\n+                '[gradingInstruction]' +\n+                '\\n' +\n+                '\\t' +\n+                this.generateCreditsText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateGradingScaleText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionDescriptionText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionFeedback(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateUsageCount(instruction) +\n+                '\\n' +\n+                '\\n';\n+        }\n+        return markdownText;\n+    }\n+\n+    generateCreditsText(instruction: GradingInstruction): string {\n+        if (instruction.credits === undefined) {\n+            instruction.credits = parseFloat(CreditsCommand.text);\n+            return CreditsCommand.identifier + ' ' + CreditsCommand.text;\n+        }\n+        return CreditsCommand.identifier + ' ' + instruction.credits;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc3MzM1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMTo1MlrOF1vK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMTo1MlrOF1vK-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391891705", "createdAt": "2020-03-12T21:01:52Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n+            }\n+        }\n+        return markdownText;\n+    }\n+    /**\n+     * @function generateMarkdown\n+     * @desc Generate the markdown text for this grading instruction\n+     */\n+    generateInstructionsMarkdown(criterion: GradingCriterion): string {\n+        let markdownText = '';\n+        if (criterion.structuredGradingInstructions === undefined || criterion.structuredGradingInstructions.length === 0) {\n+            this.instructions = [];\n+            const newInstruction = new GradingInstruction();\n+            this.instructions.push(newInstruction);\n+            criterion.structuredGradingInstructions = this.instructions;\n+        }\n+        for (const instruction of criterion.structuredGradingInstructions) {\n+            markdownText +=\n+                '[gradingInstruction]' +\n+                '\\n' +\n+                '\\t' +\n+                this.generateCreditsText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateGradingScaleText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionDescriptionText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionFeedback(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateUsageCount(instruction) +\n+                '\\n' +\n+                '\\n';\n+        }\n+        return markdownText;\n+    }\n+\n+    generateCreditsText(instruction: GradingInstruction): string {\n+        if (instruction.credits === undefined) {\n+            instruction.credits = parseFloat(CreditsCommand.text);\n+            return CreditsCommand.identifier + ' ' + CreditsCommand.text;\n+        }\n+        return CreditsCommand.identifier + ' ' + instruction.credits;\n+    }\n+    generateGradingScaleText(instruction: GradingInstruction): string {\n+        if (instruction.gradingScale === undefined) {\n+            instruction.gradingScale = GradingScaleCommand.text;\n+            return GradingScaleCommand.identifier + ' ' + GradingScaleCommand.text;\n+        }\n+        return GradingScaleCommand.identifier + ' ' + instruction.gradingScale;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc3MzgxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMjowNFrOF1vLTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMjowNFrOF1vLTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTc5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391891791", "createdAt": "2020-03-12T21:02:04Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n+            }\n+        }\n+        return markdownText;\n+    }\n+    /**\n+     * @function generateMarkdown\n+     * @desc Generate the markdown text for this grading instruction\n+     */\n+    generateInstructionsMarkdown(criterion: GradingCriterion): string {\n+        let markdownText = '';\n+        if (criterion.structuredGradingInstructions === undefined || criterion.structuredGradingInstructions.length === 0) {\n+            this.instructions = [];\n+            const newInstruction = new GradingInstruction();\n+            this.instructions.push(newInstruction);\n+            criterion.structuredGradingInstructions = this.instructions;\n+        }\n+        for (const instruction of criterion.structuredGradingInstructions) {\n+            markdownText +=\n+                '[gradingInstruction]' +\n+                '\\n' +\n+                '\\t' +\n+                this.generateCreditsText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateGradingScaleText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionDescriptionText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionFeedback(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateUsageCount(instruction) +\n+                '\\n' +\n+                '\\n';\n+        }\n+        return markdownText;\n+    }\n+\n+    generateCreditsText(instruction: GradingInstruction): string {\n+        if (instruction.credits === undefined) {\n+            instruction.credits = parseFloat(CreditsCommand.text);\n+            return CreditsCommand.identifier + ' ' + CreditsCommand.text;\n+        }\n+        return CreditsCommand.identifier + ' ' + instruction.credits;\n+    }\n+    generateGradingScaleText(instruction: GradingInstruction): string {\n+        if (instruction.gradingScale === undefined) {\n+            instruction.gradingScale = GradingScaleCommand.text;\n+            return GradingScaleCommand.identifier + ' ' + GradingScaleCommand.text;\n+        }\n+        return GradingScaleCommand.identifier + ' ' + instruction.gradingScale;\n+    }\n+    generateInstructionDescriptionText(instruction: GradingInstruction): string {\n+        if (instruction.instructionDescription === undefined) {\n+            instruction.instructionDescription = InstructionDescriptionCommand.text;\n+            return InstructionDescriptionCommand.identifier + ' ' + InstructionDescriptionCommand.text;\n+        }\n+        return InstructionDescriptionCommand.identifier + ' ' + instruction.instructionDescription;\n+    }\n+\n+    generateInstructionFeedback(instruction: GradingInstruction): string {\n+        if (instruction.feedback === undefined) {\n+            instruction.feedback = FeedbackCommand.text;\n+            return FeedbackCommand.identifier + ' ' + FeedbackCommand.text;\n+        }\n+        return FeedbackCommand.identifier + ' ' + instruction.feedback;\n+    }\n+\n+    generateUsageCount(instruction: GradingInstruction): string {\n+        if (instruction.usageCount === undefined) {\n+            instruction.usageCount = parseInt(UsageCountCommand.text, 10);\n+            return UsageCountCommand.identifier + ' ' + UsageCountCommand.text;\n+        }\n+        return UsageCountCommand.identifier + ' ' + instruction.usageCount;\n+    }\n+\n+    prepareForSave(): void {\n+        this.markdownEditor.parse();\n+    }\n+\n+    hasCriterionCommand(domainCommands: [string, DomainCommand][]): boolean {\n+        for (const [text, command] of domainCommands) {\n+            if (command instanceof GradingCriterionCommand) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * @function createSubInstructionCommands\n+     * @desc 1. divides the input: domainCommands in two subarrays:\n+     *          instructionCommands, which consists of all stand-alone instructions\n+     *          criteriaCommands, which consists of instructions that belong to a criterion\n+     *       2. for each subarrray a method is called to create the criterion and instruction objects\n+     * @param domainCommands containing tuples of [text, domainCommandIdentifiers]\n+     */\n+    createSubInstructionCommands(domainCommands: [string, DomainCommand][]): void {\n+        let instructionCommands;\n+        let criteriaCommands;\n+        let endOfInstructionsCommand = 0;\n+        if (this.hasCriterionCommand(domainCommands) === false) {\n+            this.setParentForInstructionsWithNoCriterion(domainCommands);\n+        } else {\n+            for (const [text, command] of domainCommands) {\n+                endOfInstructionsCommand++;\n+                if (command instanceof GradingCriterionCommand) {\n+                    instructionCommands = domainCommands.slice(0, endOfInstructionsCommand - 1);\n+                    if (instructionCommands.length !== 0) {\n+                        this.setParentForInstructionsWithNoCriterion(instructionCommands);\n+                    }\n+                    criteriaCommands = domainCommands.slice(endOfInstructionsCommand - 1);\n+                    if (criteriaCommands.length !== 0) {\n+                        this.instructions = []; // resets the instructions array to be filled with the instructions of the criteria\n+                        this.groupInstructionsToCriteria(criteriaCommands); // creates criterion object for each criterion and their corresponding instruction objects\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc4Nzk4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNzoxMFrOF1vUVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNzoxMFrOF1vUVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NDEwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            '[gradingInstruction]' +\n          \n          \n            \n                            GradingCriterionCommand.identifier +", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391894100", "createdAt": "2020-03-12T21:07:10Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n+            }\n+        }\n+        return markdownText;\n+    }\n+    /**\n+     * @function generateMarkdown\n+     * @desc Generate the markdown text for this grading instruction\n+     */\n+    generateInstructionsMarkdown(criterion: GradingCriterion): string {\n+        let markdownText = '';\n+        if (criterion.structuredGradingInstructions === undefined || criterion.structuredGradingInstructions.length === 0) {\n+            this.instructions = [];\n+            const newInstruction = new GradingInstruction();\n+            this.instructions.push(newInstruction);\n+            criterion.structuredGradingInstructions = this.instructions;\n+        }\n+        for (const instruction of criterion.structuredGradingInstructions) {\n+            markdownText +=\n+                '[gradingInstruction]' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc4OTgxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNzo1MVrOF1vVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowNzo1MVrOF1vVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NDQxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n          \n          \n            \n                            markdownText += GradingCriterionCommand.identifier + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391894410", "createdAt": "2020-03-12T21:07:51Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODgwMjc1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToxMjozNlrOF1vdoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToxMjozNlrOF1vdoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NjQ4MA==", "bodyText": "Could this work?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (const [text, command] of domainCommands) {\n          \n          \n            \n                        if (command instanceof GradingCriterionCommand) {\n          \n          \n            \n                            return true;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return domainCommands.some(([text, command]) => command instanceof GradingCriterionCommand);", "url": "https://github.com/ls1intum/Artemis/pull/1269#discussion_r391896480", "createdAt": "2020-03-12T21:12:36Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/shared/structured-grading-criterion/grading-instructions-details/grading-instructions-details.component.ts", "diffHunk": "@@ -0,0 +1,279 @@\n+import { Component, OnInit, Input, ViewChild } from '@angular/core';\n+import { GradingCriterion } from 'app/exercises/shared/structured-grading-criterion/grading-criterion.model';\n+import { KatexCommand } from 'app/shared/markdown-editor/commands/katex.command';\n+import { UsageCountCommand } from 'app/shared/markdown-editor/domainCommands/usageCount.command';\n+import { CreditsCommand } from 'app/shared/markdown-editor/domainCommands/credits.command';\n+import { FeedbackCommand } from 'app/shared/markdown-editor/domainCommands/feedback.command';\n+import { DomainCommand } from 'app/shared/markdown-editor/domainCommands/domainCommand';\n+import { MarkdownEditorComponent } from 'app/shared/markdown-editor/markdown-editor.component';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+import { GradingScaleCommand } from 'app/shared/markdown-editor/domainCommands/gradingScaleCommand';\n+import { GradingInstructionCommand } from 'app/shared/markdown-editor/domainCommands/gradingInstruction.command';\n+import { InstructionDescriptionCommand } from 'app/shared/markdown-editor/domainCommands/instructionDescription.command';\n+import { GradingCriterionCommand } from 'app/shared/markdown-editor/domainCommands/gradingCriterionCommand';\n+import { Exercise } from 'app/entities/exercise.model';\n+@Component({\n+    selector: 'jhi-grading-instructions-details',\n+    templateUrl: './grading-instructions-details.component.html',\n+})\n+export class GradingInstructionsDetailsComponent implements OnInit {\n+    /** Ace Editor configuration constants **/\n+    questionEditorText = '';\n+    @ViewChild('markdownEditor', { static: false })\n+    private markdownEditor: MarkdownEditorComponent;\n+    @Input()\n+    exercise: Exercise;\n+    private instructions: GradingInstruction[];\n+    private criteria: GradingCriterion[];\n+\n+    gradingCriterionCommand = new GradingCriterionCommand();\n+    gradingInstructionCommand = new GradingInstructionCommand();\n+    creditsCommand = new CreditsCommand();\n+    gradingScaleCommand = new GradingScaleCommand();\n+    instructionDescriptionCommand = new InstructionDescriptionCommand();\n+    feedbackCommand = new FeedbackCommand();\n+    usageCountCommand = new UsageCountCommand();\n+\n+    domainCommands: DomainCommand[] = [\n+        this.creditsCommand,\n+        this.gradingScaleCommand,\n+        this.instructionDescriptionCommand,\n+        this.feedbackCommand,\n+        this.usageCountCommand,\n+        this.gradingCriterionCommand,\n+        this.gradingInstructionCommand,\n+    ];\n+\n+    constructor() {}\n+\n+    ngOnInit() {\n+        this.criteria = this.exercise.gradingCriteria;\n+        this.questionEditorText = this.generateMarkdown();\n+    }\n+    generateMarkdown(): string {\n+        let markdownText = '';\n+        if (this.criteria === undefined || this.criteria.length === 0) {\n+            this.criteria = [];\n+            const newCriteria = new GradingCriterion();\n+            this.criteria.push(newCriteria);\n+        }\n+        for (const criterion of this.criteria) {\n+            if (criterion.title === null || criterion.title === undefined) {\n+                // if it is a dummy criterion, leave out the command identifier\n+                markdownText += this.generateInstructionsMarkdown(criterion);\n+            } else {\n+                markdownText += '[gradingCriterion]' + criterion.title + '\\n' + '\\t' + this.generateInstructionsMarkdown(criterion);\n+            }\n+        }\n+        return markdownText;\n+    }\n+    /**\n+     * @function generateMarkdown\n+     * @desc Generate the markdown text for this grading instruction\n+     */\n+    generateInstructionsMarkdown(criterion: GradingCriterion): string {\n+        let markdownText = '';\n+        if (criterion.structuredGradingInstructions === undefined || criterion.structuredGradingInstructions.length === 0) {\n+            this.instructions = [];\n+            const newInstruction = new GradingInstruction();\n+            this.instructions.push(newInstruction);\n+            criterion.structuredGradingInstructions = this.instructions;\n+        }\n+        for (const instruction of criterion.structuredGradingInstructions) {\n+            markdownText +=\n+                '[gradingInstruction]' +\n+                '\\n' +\n+                '\\t' +\n+                this.generateCreditsText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateGradingScaleText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionDescriptionText(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateInstructionFeedback(instruction) +\n+                '\\n' +\n+                '\\t' +\n+                this.generateUsageCount(instruction) +\n+                '\\n' +\n+                '\\n';\n+        }\n+        return markdownText;\n+    }\n+\n+    generateCreditsText(instruction: GradingInstruction): string {\n+        if (instruction.credits === undefined) {\n+            instruction.credits = parseFloat(CreditsCommand.text);\n+            return CreditsCommand.identifier + ' ' + CreditsCommand.text;\n+        }\n+        return CreditsCommand.identifier + ' ' + instruction.credits;\n+    }\n+    generateGradingScaleText(instruction: GradingInstruction): string {\n+        if (instruction.gradingScale === undefined) {\n+            instruction.gradingScale = GradingScaleCommand.text;\n+            return GradingScaleCommand.identifier + ' ' + GradingScaleCommand.text;\n+        }\n+        return GradingScaleCommand.identifier + ' ' + instruction.gradingScale;\n+    }\n+    generateInstructionDescriptionText(instruction: GradingInstruction): string {\n+        if (instruction.instructionDescription === undefined) {\n+            instruction.instructionDescription = InstructionDescriptionCommand.text;\n+            return InstructionDescriptionCommand.identifier + ' ' + InstructionDescriptionCommand.text;\n+        }\n+        return InstructionDescriptionCommand.identifier + ' ' + instruction.instructionDescription;\n+    }\n+\n+    generateInstructionFeedback(instruction: GradingInstruction): string {\n+        if (instruction.feedback === undefined) {\n+            instruction.feedback = FeedbackCommand.text;\n+            return FeedbackCommand.identifier + ' ' + FeedbackCommand.text;\n+        }\n+        return FeedbackCommand.identifier + ' ' + instruction.feedback;\n+    }\n+\n+    generateUsageCount(instruction: GradingInstruction): string {\n+        if (instruction.usageCount === undefined) {\n+            instruction.usageCount = parseInt(UsageCountCommand.text, 10);\n+            return UsageCountCommand.identifier + ' ' + UsageCountCommand.text;\n+        }\n+        return UsageCountCommand.identifier + ' ' + instruction.usageCount;\n+    }\n+\n+    prepareForSave(): void {\n+        this.markdownEditor.parse();\n+    }\n+\n+    hasCriterionCommand(domainCommands: [string, DomainCommand][]): boolean {\n+        for (const [text, command] of domainCommands) {\n+            if (command instanceof GradingCriterionCommand) {\n+                return true;\n+            }\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae024e52cfab3b7f6b2179fbb20a2fccd8f97e"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 255, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}