{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MzcyMzc3", "number": 1977, "title": "Feature/automatic text/store feedback consistency", "bodyText": "\u26a0\ufe0f Depends on ls1intum/Athene#18 to be deployed as well!\n\n\n\nChecklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I added multiple integration tests (Jest) related to the features\n Client: I added authorities to all new routes and check the course groups for displaying navigation elements (links, buttons)\n Client: I documented the TypeScript code using JSDoc style.\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\n\n\nAs mentioned in the feature request #1877 , we want to store feedback conflicts that is found during the assessment of text exercises.\nThe conflicts are found with an Athene service. Corresponding PR in Athene ls1intum/Athene#18\nDescription\n\nWorkflow:\n\nWhen a text assessment is submitted, an asynchronous call is made to the remote service only if the automatic assessment is enabled and assessed text blocks are already assigned to a cluster.\nFeedback consistency is checked in Athene (\u22481-2 seconds)\nFound conflicts are returned and saved\n\nChanges:\n\nTextAssessmentConflictService is added to communicate with Athene service\nAdded TextAssessmentConflict entity and corresponding repository\nMinor Feedback entity extension\nAdded multiple test cases\n\nAdded TextAssessmentConflictServiceTest to test the communication and response of the Athene\nAdded AutomaticTextAssessmentConflictServiceTest to mock the response of the Athene and to test the database operations\n\n\n\nSteps for Testing\n\nTesting in the test server is not possible since ls1intum/Athene#18 is not deployed yet. So, please test it locally.\n\nStart Athene with this branch\nLog in to Artemis\nCreate a text exercise with automatic assessments are enabled\nSubmit a couple of text submissions (use similar texts so they can be clustered together)\nWait for the submission due date so Athene can cluster text blocks (you can check Artemis logs or docker dashboard for Clustering component in Athene to see if clustering is started/done.)\nAssess multiple submissions (with completely different feedback comments and scores \ud83d\ude42 )\nCheck the database if the inconsistencies are stored\n\nTest Coverage\n\nAutomaticTextAssessmentConflictService - 91%\nTextAssessmentConflictService - 37% ( connector class - test is skipped because Athene is not updated yet.)", "createdAt": "2020-07-27T20:00:57Z", "url": "https://github.com/ls1intum/Artemis/pull/1977", "merged": true, "mergeCommit": {"oid": "2807d87e25de7a125a344ddc67dc4850607493a8"}, "closed": true, "closedAt": "2020-09-29T07:36:16Z", "author": {"login": "bigultekin"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5G6GBgH2gAyNDU3MzcyMzc3OjcyNDU2NDc5MWQ1OGEwNGJhMzBlNjdkZTE3NjBhMjA4ODk4ZmVlMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNaTIqgFqTQ5NzkwMjEwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "724564791d58a04ba30e67de1760a208898fee08", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/724564791d58a04ba30e67de1760a208898fee08", "committedDate": "2020-07-27T19:22:39Z", "message": "liquibase change log for new table text_assessment_conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed35ec8864052b7266034681c3578871c46fba0", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/6ed35ec8864052b7266034681c3578871c46fba0", "committedDate": "2020-07-27T19:23:43Z", "message": "TextAssessmentConflict entity class and update in Feedback entity class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a46c1a8fa6e08d0218c85057ca2a143c1de0e26", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/7a46c1a8fa6e08d0218c85057ca2a143c1de0e26", "committedDate": "2020-07-27T19:24:56Z", "message": "DTO classes used in communication with athene service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bfe42066f13058007058dd01be712ad0fb141c9", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/0bfe42066f13058007058dd01be712ad0fb141c9", "committedDate": "2020-07-27T19:25:37Z", "message": "text assessment conflict enumeration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d080370278b2920b388c3df8b6e7a3c9410dd5f2", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/d080370278b2920b388c3df8b6e7a3c9410dd5f2", "committedDate": "2020-07-27T19:27:53Z", "message": "TextAssessmentConflictService.java service to communicate with Athene service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb03143ac51a81e9443594c50080eeed620eb79", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/dfb03143ac51a81e9443594c50080eeed620eb79", "committedDate": "2020-07-27T19:28:23Z", "message": "TextAssessmentConflictRepository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84a295b8132c33a31e1f29b724cfe3f17245b71b", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/84a295b8132c33a31e1f29b724cfe3f17245b71b", "committedDate": "2020-07-27T19:34:12Z", "message": "AutomaticTextAssessmentConflictService to make async calls to athene service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b8e0faa9f00b411936696c852616884f7be20b2", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/9b8e0faa9f00b411936696c852616884f7be20b2", "committedDate": "2020-07-27T19:36:39Z", "message": "call AutomaticTextAssessmentConflictService when a text assessment is submitted and automatic assessment is enabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d68f32df00b9e79446df8927c327dd3471fce9e4", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/d68f32df00b9e79446df8927c327dd3471fce9e4", "committedDate": "2020-08-08T20:14:14Z", "message": "fixed codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357d44a5a1ba8ea333d612cf6be6b34fea083a81", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/357d44a5a1ba8ea333d612cf6be6b34fea083a81", "committedDate": "2020-08-10T19:37:48Z", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/Feedback.java\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java\n#\tsrc/main/resources/config/liquibase/master.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c5c0145dd4006436330e4d9f87830be49d299f", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/33c5c0145dd4006436330e4d9f87830be49d299f", "committedDate": "2020-08-10T20:06:11Z", "message": "fixed more codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6802e236420174ddf83f25cf79232a58116880", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/af6802e236420174ddf83f25cf79232a58116880", "committedDate": "2020-08-10T20:06:45Z", "message": "feedback consistency url is added to application-artemis.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c915f0cfd93d8f2d876c71cfb3b7d577e8c38858", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/c915f0cfd93d8f2d876c71cfb3b7d577e8c38858", "committedDate": "2020-08-22T14:10:59Z", "message": "Minor fix (get text blocks from TextBlockRepository to get cluster information)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ff83b84387558c93e1fa26ffd9e7031bb775ee5", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/8ff83b84387558c93e1fa26ffd9e7031bb775ee5", "committedDate": "2020-08-29T23:08:34Z", "message": "added test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac59ff18fa9725a3d068614d2f7dafc462f556fb", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/ac59ff18fa9725a3d068614d2f7dafc462f556fb", "committedDate": "2020-08-30T10:27:57Z", "message": "fixed codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc2a3cb4f9ec0eb9d378c0d5d5982d4bf973f97", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/8cc2a3cb4f9ec0eb9d378c0d5d5982d4bf973f97", "committedDate": "2020-08-30T10:38:26Z", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0476d157b4ede38c44b20ac30635a8efb865a89", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/d0476d157b4ede38c44b20ac30635a8efb865a89", "committedDate": "2020-08-30T11:14:55Z", "message": "fixed more codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ef2184cbeb954eef4cd08b6097a899c11fb04b", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/d7ef2184cbeb954eef4cd08b6097a899c11fb04b", "committedDate": "2020-09-21T21:32:16Z", "message": "updates and new method for checking if conflicts are solved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d96604db5b0fe66e83aa670f6df6bc8076f29d8d", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/d96604db5b0fe66e83aa670f6df6bc8076f29d8d", "committedDate": "2020-09-21T21:37:37Z", "message": "added new tests for new methods in AutomaticTextAssessmentConflictService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed275a71fc17995f4f0e5d5bf25f4f22418b4512", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/ed275a71fc17995f4f0e5d5bf25f4f22418b4512", "committedDate": "2020-09-21T21:44:46Z", "message": "fixed codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9173710ce746c87b52d60b15c1be16d112f5251c", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/9173710ce746c87b52d60b15c1be16d112f5251c", "committedDate": "2020-09-21T21:47:57Z", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50927ec8d1033527e1d343968e2eeab939ec7675", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/50927ec8d1033527e1d343968e2eeab939ec7675", "committedDate": "2020-09-21T21:52:11Z", "message": "fixed codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c130e8aaa322f12a8ba24eb938302757ef25adc", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/6c130e8aaa322f12a8ba24eb938302757ef25adc", "committedDate": "2020-09-24T09:12:28Z", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "475a41183425dcc0468c21f168d8ccf9a02823c2", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/475a41183425dcc0468c21f168d8ccf9a02823c2", "committedDate": "2020-09-24T11:32:04Z", "message": "new test cases for deletion of entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84270bfd8decb2ce40d1fd5e16ae830137eb45cd", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/84270bfd8decb2ce40d1fd5e16ae830137eb45cd", "committedDate": "2020-09-24T13:45:05Z", "message": "update setup.rst"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjYwNDk2", "url": "https://github.com/ls1intum/Artemis/pull/1977#pullrequestreview-495660496", "createdAt": "2020-09-24T14:54:16Z", "commit": {"oid": "84270bfd8decb2ce40d1fd5e16ae830137eb45cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/52da7b644d26412e05f43379e1868f8d4dccc081", "committedDate": "2020-09-28T21:10:16Z", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTAyMDk0", "url": "https://github.com/ls1intum/Artemis/pull/1977#pullrequestreview-497902094", "createdAt": "2020-09-28T21:16:39Z", "commit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNjozOVrOHZP7rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNjozOVrOHZP7rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzQ4Nw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/1977#discussion_r496237487", "createdAt": "2020-09-28T21:16:39Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Feedback;\n+import de.tum.in.www1.artemis.domain.TextAssessmentConflict;\n+import de.tum.in.www1.artemis.domain.TextBlock;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.FeedbackRepository;\n+import de.tum.in.www1.artemis.repository.TextAssessmentConflictRepository;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.service.connectors.TextAssessmentConflictService;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictRequestDTO;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictResponseDTO;\n+\n+@Service\n+@Profile(\"automaticText\")\n+public class AutomaticTextAssessmentConflictService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AutomaticTextAssessmentConflictService.class);\n+\n+    private final TextAssessmentConflictRepository textAssessmentConflictRepository;\n+\n+    private final FeedbackRepository feedbackRepository;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextAssessmentConflictService textAssessmentConflictService;\n+\n+    public AutomaticTextAssessmentConflictService(TextAssessmentConflictRepository textAssessmentConflictRepository, FeedbackRepository feedbackRepository,\n+            TextBlockRepository textBlockRepository, TextAssessmentConflictService textAssessmentConflictService) {\n+        this.textAssessmentConflictRepository = textAssessmentConflictRepository;\n+        this.feedbackRepository = feedbackRepository;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textAssessmentConflictService = textAssessmentConflictService;\n+    }\n+\n+    /**\n+     *  This function asynchronously calls remote Athene service to check feedback consistency for the assessed submission.\n+     *  The call is made if the automatic assessments are enabled and the passed text blocks belong to any cluster.\n+     *\n+     * @param textBlocks - all text blocks in the text assessment\n+     * @param feedbackList - all feedback in the text assessment\n+     * @param exerciseId - exercise id of the assessed text exercise\n+     */\n+    @Async\n+    public void asyncCheckFeedbackConsistency(List<TextBlock> textBlocks, List<Feedback> feedbackList, long exerciseId) {\n+        // remove the feedback that does not belong to any text block\n+        feedbackList.removeIf(f -> !f.hasReference());\n+\n+        // If text block doesn't have a cluster id don't create an object\n+        List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS = feedbackList.stream().flatMap(feedback -> {\n+            Optional<TextBlock> textBlock = textBlockRepository\n+                    .findById(textBlocks.stream().filter(block -> block.getId().equals(feedback.getReference())).findFirst().get().getId());\n+            if (textBlock.isPresent() && textBlock.get().getCluster() != null) {\n+                return Stream.of(new TextAssessmentConflictRequestDTO(textBlock.get().getId(), textBlock.get().getText(), textBlock.get().getCluster().getId(), feedback.getId(),\n+                        feedback.getDetailText(), feedback.getCredits()));\n+            }\n+            else {\n+                return Stream.empty();\n+            }\n+        }).collect(toList());\n+\n+        if (textAssessmentConflictRequestDTOS.isEmpty()) {\n+            return;\n+        }\n+\n+        // remote service call to athene\n+        final List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS;\n+        try {\n+            textAssessmentConflictResponseDTOS = textAssessmentConflictService.checkFeedbackConsistencies(textAssessmentConflictRequestDTOS, exerciseId, 0);\n+        }\n+        catch (NetworkingError networkingError) {\n+            log.error(networkingError.getMessage(), networkingError);\n+            return;\n+        }\n+\n+        // create an array to store conflicts\n+        List<TextAssessmentConflict> textAssessmentConflicts = new ArrayList<>();\n+\n+        // look for new conflicts\n+        // Athene may find conflicts with feedback ids that are not in the feedback repository any more. So check for them. (May happen if the feedback is deleted in Artemis but\n+        // already stored in Athene)\n+        textAssessmentConflictResponseDTOS.forEach(conflict -> {\n+            Optional<Feedback> firstFeedback = feedbackRepository.findById(conflict.getFirstFeedbackId());\n+            Optional<Feedback> secondFeedback = feedbackRepository.findById(conflict.getSecondFeedbackId());\n+            List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findByFirstAndSecondFeedback(conflict.getFirstFeedbackId(),\n+                    conflict.getSecondFeedbackId());\n+            // if the found conflict is present but its type has changed, update it\n+            if (!storedConflicts.isEmpty() && !storedConflicts.get(0).getType().equals(conflict.getType())) {\n+                storedConflicts.get(0).setType(conflict.getType());\n+                textAssessmentConflicts.add(storedConflicts.get(0));\n+            }\n+\n+            // new conflict\n+            if (firstFeedback.isPresent() && secondFeedback.isPresent() && storedConflicts.isEmpty()) {\n+                TextAssessmentConflict textAssessmentConflict = new TextAssessmentConflict();\n+                textAssessmentConflict.setConflict(true);\n+                textAssessmentConflict.setFirstFeedback(firstFeedback.get());\n+                textAssessmentConflict.setSecondFeedback(secondFeedback.get());\n+                textAssessmentConflict.setType(conflict.getType());\n+                textAssessmentConflict.setCreatedAt(ZonedDateTime.now());\n+                textAssessmentConflicts.add(textAssessmentConflict);\n+            }\n+        });\n+\n+        // find solved conflicts and add them to list\n+        textAssessmentConflicts.addAll(this.findSolvedConflicts(textAssessmentConflictRequestDTOS, textAssessmentConflictResponseDTOS));\n+\n+        textAssessmentConflictRepository.saveAll(textAssessmentConflicts);\n+    }\n+\n+    /**\n+     * Searches if the feedback that are sent to Athene already have conflicts in the database(storedConflicts),\n+     * If the stored conflicts are not returned from Athene after the consistency check, it means that they are solved and set as solved.\n+     *\n+     * @param textAssessmentConflictRequestDTOS the list sent to Athene for check\n+     * @param textAssessmentConflictResponseDTOS returned list with found conflicts.\n+     * @return solved conflicts\n+     */\n+    private List<TextAssessmentConflict> findSolvedConflicts(List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS,\n+            List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS) {\n+        List<Long> feedbackIds = textAssessmentConflictRequestDTOS.stream().map(TextAssessmentConflictRequestDTO::getFeedbackId).collect(toList());\n+        List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findAllByFeedbackList(feedbackIds);\n+\n+        storedConflicts.forEach(conflict -> {\n+            boolean isPresent = textAssessmentConflictResponseDTOS.stream().anyMatch(newConflicts -> (newConflicts.getFirstFeedbackId() == conflict.getFirstFeedback().getId()\n+                    && newConflicts.getSecondFeedbackId() == conflict.getSecondFeedback().getId())\n+                    || (newConflicts.getFirstFeedbackId() == conflict.getSecondFeedback().getId() && newConflicts.getSecondFeedbackId() == conflict.getFirstFeedback().getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTAyMTAw", "url": "https://github.com/ls1intum/Artemis/pull/1977#pullrequestreview-497902100", "createdAt": "2020-09-28T21:16:40Z", "commit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNjo0MFrOHZP7tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNjo0MFrOHZP7tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzQ5Mw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/1977#discussion_r496237493", "createdAt": "2020-09-28T21:16:40Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Feedback;\n+import de.tum.in.www1.artemis.domain.TextAssessmentConflict;\n+import de.tum.in.www1.artemis.domain.TextBlock;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.FeedbackRepository;\n+import de.tum.in.www1.artemis.repository.TextAssessmentConflictRepository;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.service.connectors.TextAssessmentConflictService;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictRequestDTO;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictResponseDTO;\n+\n+@Service\n+@Profile(\"automaticText\")\n+public class AutomaticTextAssessmentConflictService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AutomaticTextAssessmentConflictService.class);\n+\n+    private final TextAssessmentConflictRepository textAssessmentConflictRepository;\n+\n+    private final FeedbackRepository feedbackRepository;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextAssessmentConflictService textAssessmentConflictService;\n+\n+    public AutomaticTextAssessmentConflictService(TextAssessmentConflictRepository textAssessmentConflictRepository, FeedbackRepository feedbackRepository,\n+            TextBlockRepository textBlockRepository, TextAssessmentConflictService textAssessmentConflictService) {\n+        this.textAssessmentConflictRepository = textAssessmentConflictRepository;\n+        this.feedbackRepository = feedbackRepository;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textAssessmentConflictService = textAssessmentConflictService;\n+    }\n+\n+    /**\n+     *  This function asynchronously calls remote Athene service to check feedback consistency for the assessed submission.\n+     *  The call is made if the automatic assessments are enabled and the passed text blocks belong to any cluster.\n+     *\n+     * @param textBlocks - all text blocks in the text assessment\n+     * @param feedbackList - all feedback in the text assessment\n+     * @param exerciseId - exercise id of the assessed text exercise\n+     */\n+    @Async\n+    public void asyncCheckFeedbackConsistency(List<TextBlock> textBlocks, List<Feedback> feedbackList, long exerciseId) {\n+        // remove the feedback that does not belong to any text block\n+        feedbackList.removeIf(f -> !f.hasReference());\n+\n+        // If text block doesn't have a cluster id don't create an object\n+        List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS = feedbackList.stream().flatMap(feedback -> {\n+            Optional<TextBlock> textBlock = textBlockRepository\n+                    .findById(textBlocks.stream().filter(block -> block.getId().equals(feedback.getReference())).findFirst().get().getId());\n+            if (textBlock.isPresent() && textBlock.get().getCluster() != null) {\n+                return Stream.of(new TextAssessmentConflictRequestDTO(textBlock.get().getId(), textBlock.get().getText(), textBlock.get().getCluster().getId(), feedback.getId(),\n+                        feedback.getDetailText(), feedback.getCredits()));\n+            }\n+            else {\n+                return Stream.empty();\n+            }\n+        }).collect(toList());\n+\n+        if (textAssessmentConflictRequestDTOS.isEmpty()) {\n+            return;\n+        }\n+\n+        // remote service call to athene\n+        final List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS;\n+        try {\n+            textAssessmentConflictResponseDTOS = textAssessmentConflictService.checkFeedbackConsistencies(textAssessmentConflictRequestDTOS, exerciseId, 0);\n+        }\n+        catch (NetworkingError networkingError) {\n+            log.error(networkingError.getMessage(), networkingError);\n+            return;\n+        }\n+\n+        // create an array to store conflicts\n+        List<TextAssessmentConflict> textAssessmentConflicts = new ArrayList<>();\n+\n+        // look for new conflicts\n+        // Athene may find conflicts with feedback ids that are not in the feedback repository any more. So check for them. (May happen if the feedback is deleted in Artemis but\n+        // already stored in Athene)\n+        textAssessmentConflictResponseDTOS.forEach(conflict -> {\n+            Optional<Feedback> firstFeedback = feedbackRepository.findById(conflict.getFirstFeedbackId());\n+            Optional<Feedback> secondFeedback = feedbackRepository.findById(conflict.getSecondFeedbackId());\n+            List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findByFirstAndSecondFeedback(conflict.getFirstFeedbackId(),\n+                    conflict.getSecondFeedbackId());\n+            // if the found conflict is present but its type has changed, update it\n+            if (!storedConflicts.isEmpty() && !storedConflicts.get(0).getType().equals(conflict.getType())) {\n+                storedConflicts.get(0).setType(conflict.getType());\n+                textAssessmentConflicts.add(storedConflicts.get(0));\n+            }\n+\n+            // new conflict\n+            if (firstFeedback.isPresent() && secondFeedback.isPresent() && storedConflicts.isEmpty()) {\n+                TextAssessmentConflict textAssessmentConflict = new TextAssessmentConflict();\n+                textAssessmentConflict.setConflict(true);\n+                textAssessmentConflict.setFirstFeedback(firstFeedback.get());\n+                textAssessmentConflict.setSecondFeedback(secondFeedback.get());\n+                textAssessmentConflict.setType(conflict.getType());\n+                textAssessmentConflict.setCreatedAt(ZonedDateTime.now());\n+                textAssessmentConflicts.add(textAssessmentConflict);\n+            }\n+        });\n+\n+        // find solved conflicts and add them to list\n+        textAssessmentConflicts.addAll(this.findSolvedConflicts(textAssessmentConflictRequestDTOS, textAssessmentConflictResponseDTOS));\n+\n+        textAssessmentConflictRepository.saveAll(textAssessmentConflicts);\n+    }\n+\n+    /**\n+     * Searches if the feedback that are sent to Athene already have conflicts in the database(storedConflicts),\n+     * If the stored conflicts are not returned from Athene after the consistency check, it means that they are solved and set as solved.\n+     *\n+     * @param textAssessmentConflictRequestDTOS the list sent to Athene for check\n+     * @param textAssessmentConflictResponseDTOS returned list with found conflicts.\n+     * @return solved conflicts\n+     */\n+    private List<TextAssessmentConflict> findSolvedConflicts(List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS,\n+            List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS) {\n+        List<Long> feedbackIds = textAssessmentConflictRequestDTOS.stream().map(TextAssessmentConflictRequestDTO::getFeedbackId).collect(toList());\n+        List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findAllByFeedbackList(feedbackIds);\n+\n+        storedConflicts.forEach(conflict -> {\n+            boolean isPresent = textAssessmentConflictResponseDTOS.stream().anyMatch(newConflicts -> (newConflicts.getFirstFeedbackId() == conflict.getFirstFeedback().getId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTAyMTA5", "url": "https://github.com/ls1intum/Artemis/pull/1977#pullrequestreview-497902109", "createdAt": "2020-09-28T21:16:41Z", "commit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNjo0MVrOHZP7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNjo0MVrOHZP7vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzUwMA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/1977#discussion_r496237500", "createdAt": "2020-09-28T21:16:41Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -483,6 +483,16 @@ private static Feedback generateStaticCodeAnalysisFeedback(int index) {\n         return feedbacks; // total score should be 3P\n     }\n \n+    public static TextAssessmentConflict generateTextAssessmentConflictWithFeedback(Feedback firstFeedback, Feedback secondFeedback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4429, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}