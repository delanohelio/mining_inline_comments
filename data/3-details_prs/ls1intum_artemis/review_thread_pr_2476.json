{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MDA0OTMx", "number": 2476, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo0MTowOVrOE_vAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNzozMlrOFCaTYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjY1OTg3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo0MTowOVrOH9mpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo0MTowOVrOH9mpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1ODM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * 6. Student's login appears more than once\n          \n          \n            \n                 * 7. Student's login appears more than once", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534358387", "createdAt": "2020-12-02T17:41:09Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -248,7 +248,8 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n      * 3. Source teams have not been loaded yet\n      * 4. No import strategy has been chosen yet\n      * 5. There are no (conflict-free depending on strategy) source teams to be imported\n-     * 6. Student's registration number appears just once\n+     * 6. Student's registration number appears more than once\n+     * 6. Student's login appears more than once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3259f96becaee6012ef32212b7c55da8eb26e034"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTk1OTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoxNjozNlrOH-HDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoxNjozNlrOH-HDFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg4OTIzOA==", "bodyText": "This is a huge method and in my opinion has to be split into multiple smaller functions.\nAs a first the the function converts via login or registration number so I'd break this down into:\npublic List<Team> convertTeamsStudentsWithOnlyLoginToAlreadyRegisteredUsers(Course course, List<Team> teams);\npublic List<Team> convertTeamsStudentsWithRegistrationNumberToAlreadyRegisteredUsers(Course course, List<Team> teams);\nBut the method name is still really long so maybe you can try to split it even more.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534889238", "createdAt": "2020-12-03T08:16:36Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,76 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     */\n+    public List<Team> convertTeamsStudentsWithOnlyLoginOrRegistrationNumberToAlreadyRegisteredUsers(Course course, List<Team> teams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjAyNTIzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/student-with-team.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMzoxM1rOH-Hwrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDozODozNlrOH-SuyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMDkxMQ==", "bodyText": "Not major but maybe renaming this to StudentInTeam since students belong to a team?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534900911", "createdAt": "2020-12-03T08:23:13Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA4MDY0OQ==", "bodyText": "But the team info is inside student for this class so I think this name is better.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535080649", "createdAt": "2020-12-03T10:38:36Z", "author": {"login": "iozbeyli"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMDkxMQ=="}, "originalCommit": {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjAyNzczOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/team.model.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMzozMFrOH-HyeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMzozMFrOH-HyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMTM2OQ==", "bodyText": "Remove this", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534901369", "createdAt": "2020-12-03T08:23:30Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/entities/team.model.ts", "diffHunk": "@@ -2,7 +2,8 @@ import { Moment } from 'moment';\n import { User } from 'app/core/user/user.model';\n import { BaseEntity } from 'app/shared/model/base-entity';\n import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n-\n+import { StudentWithTeam } from 'app/entities/student-with-team.model';\n+// import { TutorWithTeam } from 'app/entities/tutor-with-team.model';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjAzNzk4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/tutor-with-team.model.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNDoyOFrOH-H5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNDoyOFrOH-H5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMzE0NQ==", "bodyText": "TutorInTeam?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534903145", "createdAt": "2020-12-03T08:24:28Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/entities/tutor-with-team.model.ts", "diffHunk": "@@ -0,0 +1,6 @@\n+export class TutorWithTeam {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjA0ODE4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/team-students-list/team-students-list.component.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNToyNVrOH-IAQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyNToyNVrOH-IAQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwNDg5Nw==", "bodyText": "This is a huge expression. Would it be better to create a variable and save the state there?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534904897", "createdAt": "2020-12-03T08:25:25Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/exercises/shared/team/team-students-list/team-students-list.component.html", "diffHunk": "@@ -1,6 +1,13 @@\n <ul class=\"list-group list-group-horizontal student-group\">\n-    <li class=\"list-group-item student-group-item\" *ngFor=\"let student of students\" [class.has-error]=\"errorStudentLogins.includes(student.login)\">\n-        <a *ngIf=\"renderLinks\" [routerLink]=\"['/admin', 'user-management', student.login]\">{{ student.name }} ({{ student.login }})</a>\n-        <span *ngIf=\"!renderLinks\">{{ student.name }} ({{ student.login }})</span>\n+    <li\n+        class=\"list-group-item student-group-item\"\n+        *ngFor=\"let student of students\"\n+        [class.has-error]=\"errorStudentLogins.includes(student.login) || (withRegistrationNumber && errorStudentRegistrationNumbers.includes(student.visibleRegistrationNumber))\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTU2NDk0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/team.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxNTowOVrOH-qdcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowMjowOVrOH_XTvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ2OTQyNg==", "bodyText": "While we're here: {{ teamId } does not look correct, can we fix that if it is an issue?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535469426", "createdAt": "2020-12-03T18:15:09Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/i18n/de/team.json", "diffHunk": "@@ -61,7 +61,11 @@\n                 \"noResults\": \"Keine Studenten im Kurs gefunden f\u00fcr Suche:\"\n             },\n             \"errors\": {\n-                \"studentAlreadyAssignedToTeam\": \"Student mit Login {{ studentLogin }} ist bereits in Team mit Id {{ teamId }.\"\n+                \"studentAlreadyAssignedToTeam\": \"Student mit Login {{ studentLogin }} ist bereits in Team mit Id {{ teamId }.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDIyMQ==", "bodyText": "I couldn't find where it is used. There is studentsAlreadyAssignedToTeams that is coming from server but not studentAlreadyAssignedToTeam. It is not as trivial as adding an s so I will not touch this. We can open an issue for this, because this is not related to importing and this pull request is already pretty big.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536204221", "createdAt": "2020-12-04T16:02:09Z", "author": {"login": "iozbeyli"}, "path": "src/main/webapp/i18n/de/team.json", "diffHunk": "@@ -61,7 +61,11 @@\n                 \"noResults\": \"Keine Studenten im Kurs gefunden f\u00fcr Suche:\"\n             },\n             \"errors\": {\n-                \"studentAlreadyAssignedToTeam\": \"Student mit Login {{ studentLogin }} ist bereits in Team mit Id {{ teamId }.\"\n+                \"studentAlreadyAssignedToTeam\": \"Student mit Login {{ studentLogin }} ist bereits in Team mit Id {{ teamId }.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ2OTQyNg=="}, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTU2NjI5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/team.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxNToyNlrOH-qebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxNToyNlrOH-qebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ2OTY3OQ==", "bodyText": "Same here.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535469679", "createdAt": "2020-12-03T18:15:26Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/i18n/en/team.json", "diffHunk": "@@ -60,7 +60,11 @@\n                 \"noResults\": \"No students found in course for search:\"\n             },\n             \"errors\": {\n-                \"studentAlreadyAssignedToTeam\": \"Student with login {{ studentLogin }} is already assigned to team with id {{ teamId }.\"\n+                \"studentAlreadyAssignedToTeam\": \"Student with login {{ studentLogin }} is already assigned to team with id {{ teamId }.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTYzMjY3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/student-with-team.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyNzo1NVrOH-rGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODoyNlrOH-rHHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTgxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public name: string;\n          \n          \n            \n                public firstName?: string;", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535479811", "createdAt": "2020-12-03T18:27:55Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {\n+    public name: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDA5NQ==", "bodyText": "I think this can be optional as we identify students either by username or registration number", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535480095", "createdAt": "2020-12-03T18:28:26Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {\n+    public name: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTgxMQ=="}, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTYzMzMzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/student-with-team.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODowNlrOH-rGfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODoyOVrOH-rHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public surname: string;\n          \n          \n            \n                public lastName?: string;", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535479934", "createdAt": "2020-12-03T18:28:06Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {\n+    public name: string;\n+    public surname: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDEyOA==", "bodyText": "I think this can be optional as we identify students either by username or registration number", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535480128", "createdAt": "2020-12-03T18:28:29Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {\n+    public name: string;\n+    public surname: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTkzNA=="}, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTYzNjgwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/student-with-team.model.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyOTowN1rOH-rIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyOTowN1rOH-rIrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDQ5Mw==", "bodyText": "please add some documentation what this class is used for.\nAlso explain that developers can either use username or registrationNumber as unique identifier and that one of those values must be set", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535480493", "createdAt": "2020-12-03T18:29:07Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/student-with-team.model.ts", "diffHunk": "@@ -0,0 +1,7 @@\n+export class StudentWithTeam {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTYzOTEzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/team.model.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyOTozN1rOH-rKDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyOTozN1rOH-rKDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MDg0Ng==", "bodyText": "why do we need this class? can we not just use StudentWithTeam[] instead?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535480846", "createdAt": "2020-12-03T18:29:37Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/team.model.ts", "diffHunk": "@@ -37,3 +37,7 @@ export class Team implements BaseEntity {\n         this.students = []; // default value\n     }\n }\n+\n+export class TeamList {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY0MjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMDoyMVrOH-rMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMDoyMVrOH-rMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MTM1NQ==", "bodyText": "we have quite a lot of string array properties here.\nCan we handle this more elegant?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535481355", "createdAt": "2020-12-03T18:30:21Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -40,11 +40,17 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n     readonly defaultImportStrategy: ImportStrategy = ImportStrategy.CREATE_ONLY;\n \n     isImporting = false;\n+    showImportFromExercise = true;\n \n     // computed properties\n     teamShortNamesAlreadyExistingInExercise: string[] = [];\n     studentLoginsAlreadyExistingInExercise: string[] = [];\n     sourceTeamsFreeOfConflicts: Team[] = [];\n+    studentRegistrationNumbersAlreadyExistingInOtherTeams: string[] = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY0NTIxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMTowMlrOH-rNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMTowMlrOH-rNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MTc2NQ==", "bodyText": "map is not a good name, it is too generic.\nAlso I don't understand what you mean with loginHistogram", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535481765", "createdAt": "2020-12-03T18:31:02Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -239,11 +287,56 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n         if (this.isSubmitDisabled) {\n             return;\n         }\n-        this.isImporting = true;\n-        this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise, this.importStrategy!).subscribe(\n-            (res) => this.onSaveSuccess(res),\n-            () => this.onSaveError(),\n-        );\n+        if (this.showImportFromExercise) {\n+            this.isImporting = true;\n+            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        } else if (this.sourceTeams) {\n+            this.notFoundRegistrationNumbers = [];\n+            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Update source teams to given teams\n+     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\n+     */\n+    onTeamsChanged(fileTeams: Team[]) {\n+        this.initImportStrategy();\n+        this.sourceTeams = fileTeams;\n+        this.studentRegistrationNumbersAlreadyExistingInOtherTeams = [];\n+        this.notFoundRegistrationNumbers = [];\n+        const students: User[] = flatMap(fileTeams, (fileTeam) => fileTeam.students ?? []);\n+        const loginHistogram = students.reduce(function (map, student) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY0NjIyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMToxOVrOH-rORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMToyN1rOH-rOjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MTkyNQ==", "bodyText": "Typescript infers the type automatically for you", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535481925", "createdAt": "2020-12-03T18:31:19Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -239,11 +287,56 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n         if (this.isSubmitDisabled) {\n             return;\n         }\n-        this.isImporting = true;\n-        this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise, this.importStrategy!).subscribe(\n-            (res) => this.onSaveSuccess(res),\n-            () => this.onSaveError(),\n-        );\n+        if (this.showImportFromExercise) {\n+            this.isImporting = true;\n+            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        } else if (this.sourceTeams) {\n+            this.notFoundRegistrationNumbers = [];\n+            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Update source teams to given teams\n+     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\n+     */\n+    onTeamsChanged(fileTeams: Team[]) {\n+        this.initImportStrategy();\n+        this.sourceTeams = fileTeams;\n+        this.studentRegistrationNumbersAlreadyExistingInOtherTeams = [];\n+        this.notFoundRegistrationNumbers = [];\n+        const students: User[] = flatMap(fileTeams, (fileTeam) => fileTeam.students ?? []);\n+        const loginHistogram = students.reduce(function (map, student) {\n+            const login: string | undefined = student.login;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MTk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        const login: string | undefined = student.login;\n          \n          \n            \n                        const login = student.login;", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535481998", "createdAt": "2020-12-03T18:31:27Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -239,11 +287,56 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n         if (this.isSubmitDisabled) {\n             return;\n         }\n-        this.isImporting = true;\n-        this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise, this.importStrategy!).subscribe(\n-            (res) => this.onSaveSuccess(res),\n-            () => this.onSaveError(),\n-        );\n+        if (this.showImportFromExercise) {\n+            this.isImporting = true;\n+            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        } else if (this.sourceTeams) {\n+            this.notFoundRegistrationNumbers = [];\n+            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Update source teams to given teams\n+     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\n+     */\n+    onTeamsChanged(fileTeams: Team[]) {\n+        this.initImportStrategy();\n+        this.sourceTeams = fileTeams;\n+        this.studentRegistrationNumbersAlreadyExistingInOtherTeams = [];\n+        this.notFoundRegistrationNumbers = [];\n+        const students: User[] = flatMap(fileTeams, (fileTeam) => fileTeam.students ?? []);\n+        const loginHistogram = students.reduce(function (map, student) {\n+            const login: string | undefined = student.login;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MTkyNQ=="}, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY0ODIxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMTo0NlrOH-rPcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMTo0NlrOH-rPcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MjIyNg==", "bodyText": "map too generic", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535482226", "createdAt": "2020-12-03T18:31:46Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -239,11 +287,56 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n         if (this.isSubmitDisabled) {\n             return;\n         }\n-        this.isImporting = true;\n-        this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise, this.importStrategy!).subscribe(\n-            (res) => this.onSaveSuccess(res),\n-            () => this.onSaveError(),\n-        );\n+        if (this.showImportFromExercise) {\n+            this.isImporting = true;\n+            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        } else if (this.sourceTeams) {\n+            this.notFoundRegistrationNumbers = [];\n+            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Update source teams to given teams\n+     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\n+     */\n+    onTeamsChanged(fileTeams: Team[]) {\n+        this.initImportStrategy();\n+        this.sourceTeams = fileTeams;\n+        this.studentRegistrationNumbersAlreadyExistingInOtherTeams = [];\n+        this.notFoundRegistrationNumbers = [];\n+        const students: User[] = flatMap(fileTeams, (fileTeam) => fileTeam.students ?? []);\n+        const loginHistogram = students.reduce(function (map, student) {\n+            const login: string | undefined = student.login;\n+            if (login) {\n+                if (map[login]) {\n+                    map[login] += 1;\n+                } else {\n+                    map[login] = 1;\n+                }\n+            }\n+            return map;\n+        }, {});\n+        const registrationNumberHistogram = students.reduce(function (map, student) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY0OTY4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMjoxMlrOH-rQZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMjoxMlrOH-rQZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MjQ3MQ==", "bodyText": "this method is rather complex, please split it into multiple smaller methods and make sure to find good method names and add more documentation", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535482471", "createdAt": "2020-12-03T18:32:12Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -239,11 +287,56 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n         if (this.isSubmitDisabled) {\n             return;\n         }\n-        this.isImporting = true;\n-        this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise, this.importStrategy!).subscribe(\n-            (res) => this.onSaveSuccess(res),\n-            () => this.onSaveError(),\n-        );\n+        if (this.showImportFromExercise) {\n+            this.isImporting = true;\n+            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        } else if (this.sourceTeams) {\n+            this.notFoundRegistrationNumbers = [];\n+            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Update source teams to given teams\n+     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\n+     */\n+    onTeamsChanged(fileTeams: Team[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY1MTg3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMjo0NFrOH-rRxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMjo0NFrOH-rRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MjgyMg==", "bodyText": "we should use actual Maps in Typescript and not JavaScript objects with Object.keys", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535482822", "createdAt": "2020-12-03T18:32:44Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -239,11 +287,56 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n         if (this.isSubmitDisabled) {\n             return;\n         }\n-        this.isImporting = true;\n-        this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise, this.importStrategy!).subscribe(\n-            (res) => this.onSaveSuccess(res),\n-            () => this.onSaveError(),\n-        );\n+        if (this.showImportFromExercise) {\n+            this.isImporting = true;\n+            this.teamService.importTeamsFromSourceExercise(this.exercise, this.sourceExercise!, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        } else if (this.sourceTeams) {\n+            this.notFoundRegistrationNumbers = [];\n+            this.teamService.importTeams(this.exercise, this.sourceTeams, this.importStrategy!).subscribe(\n+                (res) => this.onSaveSuccess(res),\n+                (error) => this.onSaveError(error),\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Update source teams to given teams\n+     * @param {Team[]} fileTeams - Teams which its students only have visible registration number\n+     */\n+    onTeamsChanged(fileTeams: Team[]) {\n+        this.initImportStrategy();\n+        this.sourceTeams = fileTeams;\n+        this.studentRegistrationNumbersAlreadyExistingInOtherTeams = [];\n+        this.notFoundRegistrationNumbers = [];\n+        const students: User[] = flatMap(fileTeams, (fileTeam) => fileTeam.students ?? []);\n+        const loginHistogram = students.reduce(function (map, student) {\n+            const login: string | undefined = student.login;\n+            if (login) {\n+                if (map[login]) {\n+                    map[login] += 1;\n+                } else {\n+                    map[login] = 1;\n+                }\n+            }\n+            return map;\n+        }, {});\n+        const registrationNumberHistogram = students.reduce(function (map, student) {\n+            const registrationNumber: string | undefined = student.visibleRegistrationNumber;\n+            if (registrationNumber) {\n+                if (map[registrationNumber]) {\n+                    map[registrationNumber] += 1;\n+                } else {\n+                    map[registrationNumber] = 1;\n+                }\n+            }\n+            return map;\n+        }, {});\n+        this.studentLoginsAlreadyExistingInOtherTeams = Object.keys(loginHistogram).filter((key) => loginHistogram[key] > 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTY1MjY2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMjo1OVrOH-rSRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozMjo1OVrOH-rSRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4Mjk0OA==", "bodyText": "method too long, documentation unclear", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r535482948", "createdAt": "2020-12-03T18:32:59Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts", "diffHunk": "@@ -261,10 +354,62 @@ export class TeamsImportDialogComponent implements OnInit, OnDestroy {\n \n     /**\n      * Hook to indicate an error on save\n+     * @param {HttpErrorResponse} httpErrorResponse - The occurred error\n+     */\n+    onSaveError(httpErrorResponse: HttpErrorResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4MTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NDowNlrOIAGp3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NDowNlrOIAGp3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk3OTkzMg==", "bodyText": "I would appreciate some inline comments here", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536979932", "createdAt": "2020-12-06T07:44:06Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins\n+     *\n+     * @param logins Logins to find users with\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromLogins(List<String> logins, String groupName) {\n+        List<User> existingStudentsWithLogin = new ArrayList<>();\n+        List<String> notFoundLogins = new ArrayList<>();\n+        if (groupName != null && logins != null && !logins.isEmpty()) {\n+            existingStudentsWithLogin = userRepository.findAllByLoginsInGroup(groupName, new HashSet<>(logins));\n+            List<String> existingLogins = existingStudentsWithLogin.stream().map(User::getLogin).collect(Collectors.toList());\n+            notFoundLogins = logins.stream().filter(login -> !existingLogins.contains(login)).collect(Collectors.toList());\n+        }\n+        return Pair.of(existingStudentsWithLogin, notFoundLogins);\n+    }\n+\n+    /**\n+     * Returns students in database that has given registration numbers\n+     *\n+     * @param registrationNumbers Registration numbers to find users with\n+     * @param logins Logins to find if there is any users with given login found, throws error if there is any\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given registration numbers\n+     * @throws StudentsAppearMultipleTimesException if any user has one of the given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromRegistrationNumbers(List<String> registrationNumbers, List<String> logins, String groupName) {\n+        List<User> existingStudentsWithRegistrationNumber = new ArrayList<>();\n+        List<String> notFoundRegistrationNumbers = new ArrayList<>();\n+        if (groupName != null && logins != null && registrationNumbers != null && !registrationNumbers.isEmpty()) {\n+            existingStudentsWithRegistrationNumber = userRepository.findAllByRegistrationNumbersInGroup(groupName, new HashSet<>(registrationNumbers));\n+            List<User> usersWhoAppearsMoreThanOnce = existingStudentsWithRegistrationNumber.stream().filter(student -> logins.contains(student.getLogin()))\n+                    .collect(Collectors.toList());\n+            if (!usersWhoAppearsMoreThanOnce.isEmpty()) {\n+                throw new StudentsAppearMultipleTimesException(usersWhoAppearsMoreThanOnce);\n+            }\n+            List<String> existingRegistrationNumbers = existingStudentsWithRegistrationNumber.stream().map(User::getRegistrationNumber).collect(Collectors.toList());\n+            notFoundRegistrationNumbers = registrationNumbers.stream().filter(registrationNumber -> !existingRegistrationNumbers.contains(registrationNumber))\n+                    .collect(Collectors.toList());\n+        }\n+        return Pair.of(existingStudentsWithRegistrationNumber, notFoundRegistrationNumbers);\n+    }\n+\n+    /**\n+     * Converts teams' students with only login or registration number to students on given maps\n+     *\n+     * @param teams Course in which the users will be searched\n+     * @param studentsWithLogin A map that contains logins as keys and users as values\n+     * @param studentsWithRegistrationNumber A map that contains registration numbers as keys and users as values\n+     * @return list of teams that now contains students in given maps\n+     */\n+    private List<Team> convertTeamsStudentsToUsersInMaps(List<Team> teams, Map<String, User> studentsWithLogin, Map<String, User> studentsWithRegistrationNumber) {\n+        List<Team> convertedTeams = new ArrayList<>();\n+\n+        teams.forEach(team -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4MTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NDoxNVrOIAGp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NDoxNVrOIAGp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk3OTk2Nw==", "bodyText": "I would appreciate some inline comments here", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536979967", "createdAt": "2020-12-06T07:44:15Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins\n+     *\n+     * @param logins Logins to find users with\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromLogins(List<String> logins, String groupName) {\n+        List<User> existingStudentsWithLogin = new ArrayList<>();\n+        List<String> notFoundLogins = new ArrayList<>();\n+        if (groupName != null && logins != null && !logins.isEmpty()) {\n+            existingStudentsWithLogin = userRepository.findAllByLoginsInGroup(groupName, new HashSet<>(logins));\n+            List<String> existingLogins = existingStudentsWithLogin.stream().map(User::getLogin).collect(Collectors.toList());\n+            notFoundLogins = logins.stream().filter(login -> !existingLogins.contains(login)).collect(Collectors.toList());\n+        }\n+        return Pair.of(existingStudentsWithLogin, notFoundLogins);\n+    }\n+\n+    /**\n+     * Returns students in database that has given registration numbers\n+     *\n+     * @param registrationNumbers Registration numbers to find users with\n+     * @param logins Logins to find if there is any users with given login found, throws error if there is any\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given registration numbers\n+     * @throws StudentsAppearMultipleTimesException if any user has one of the given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromRegistrationNumbers(List<String> registrationNumbers, List<String> logins, String groupName) {\n+        List<User> existingStudentsWithRegistrationNumber = new ArrayList<>();\n+        List<String> notFoundRegistrationNumbers = new ArrayList<>();\n+        if (groupName != null && logins != null && registrationNumbers != null && !registrationNumbers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4Mjc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NDo1M1rOIAGqdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NDo1M1rOIAGqdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDA4Ng==", "bodyText": "this is a bit short, please elaborate more why this is needed", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980086", "createdAt": "2020-12-06T07:44:53Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4MzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NToyNVrOIAGquQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NToyNVrOIAGquQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDE1Mw==", "bodyText": "I would appreciate some inline comments here", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980153", "createdAt": "2020-12-06T07:45:25Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins\n+     *\n+     * @param logins Logins to find users with\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromLogins(List<String> logins, String groupName) {\n+        List<User> existingStudentsWithLogin = new ArrayList<>();\n+        List<String> notFoundLogins = new ArrayList<>();\n+        if (groupName != null && logins != null && !logins.isEmpty()) {\n+            existingStudentsWithLogin = userRepository.findAllByLoginsInGroup(groupName, new HashSet<>(logins));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4NDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NTo1NlrOIAGrBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NTo1NlrOIAGrBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDIzMQ==", "bodyText": "I would appreciate some inline comments here", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980231", "createdAt": "2020-12-06T07:45:56Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0NzoyNlrOIAGsBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODo1NjozNFrOIA1mQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDQ4NA==", "bodyText": "why is this a PUT mapping? If we add new objects into the database, should we not use POST instead?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980484", "createdAt": "2020-12-06T07:47:26Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -317,12 +320,54 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         return ResponseEntity.ok().body(teamService.searchByLoginOrNameInCourseForExerciseTeam(course, exercise, loginOrName));\n     }\n \n+    /**\n+     * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise\n+     *\n+     * @param exerciseId         the exercise id of the exercise for which to import teams\n+     * @param teams              teams whose students have login or registration number as identifiers\n+     * @param importStrategyType the import strategy to use when importing the teams\n+     * @return the ResponseEntity with status 200 (OK) and the list of created teams in body\n+     */\n+    @PutMapping(\"/exercises/{exerciseId}/teams/import-from-list\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0OTA1OQ==", "bodyText": "I believe PUT is a valid option here since there is a possibility that it deletes the existing teams. So it is more like updating exercise's teams. It was also a put request for importing from exercise.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537749059", "createdAt": "2020-12-07T18:56:34Z", "author": {"login": "iozbeyli"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -317,12 +320,54 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         return ResponseEntity.ok().body(teamService.searchByLoginOrNameInCourseForExerciseTeam(course, exercise, loginOrName));\n     }\n \n+    /**\n+     * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise\n+     *\n+     * @param exerciseId         the exercise id of the exercise for which to import teams\n+     * @param teams              teams whose students have login or registration number as identifiers\n+     * @param importStrategyType the import strategy to use when importing the teams\n+     * @return the ResponseEntity with status 200 (OK) and the list of created teams in body\n+     */\n+    @PutMapping(\"/exercises/{exerciseId}/teams/import-from-list\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDQ4NA=="}, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4NzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0ODowOVrOIAGsbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0ODowOVrOIAGsbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDU4OA==", "bodyText": "too short documentation", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980588", "createdAt": "2020-12-06T07:48:09Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDA4ODA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNzo0ODo1NFrOIAGsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo0MTowM1rOIA-GfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ==", "bodyText": "are we sure that we want to send one update per team?\nI would appreciate some inline comments here as well", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980675", "createdAt": "2020-12-06T07:48:54Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates\n+     *\n+     * @param exercise Exercise which students will receive team update\n+     * @param teams    Teams of exercise\n+     */\n+    private void sendTeamAssignmentUpdates(Exercise exercise, List<Team> teams) {\n+        // Send out team assignment update via websockets\n+        Map<String, List<StudentParticipation>> participationsMap = participationService.findByExerciseIdWithEagerSubmissionsResult(exercise.getId()).stream()\n+                .collect(Collectors.toMap(StudentParticipation::getParticipantIdentifier, List::of, (a, b) -> Stream.concat(a.stream(), b.stream()).collect(Collectors.toList())));\n+        teams.forEach(team -> teamWebsocketService.sendTeamAssignmentUpdate(exercise, null, team, participationsMap.getOrDefault(team.getParticipantIdentifier(), List.of())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDg3Ng==", "bodyText": "Maybe one update for all imported teams would be enough?", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980876", "createdAt": "2020-12-06T07:50:13Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates\n+     *\n+     * @param exercise Exercise which students will receive team update\n+     * @param teams    Teams of exercise\n+     */\n+    private void sendTeamAssignmentUpdates(Exercise exercise, List<Team> teams) {\n+        // Send out team assignment update via websockets\n+        Map<String, List<StudentParticipation>> participationsMap = participationService.findByExerciseIdWithEagerSubmissionsResult(exercise.getId()).stream()\n+                .collect(Collectors.toMap(StudentParticipation::getParticipantIdentifier, List::of, (a, b) -> Stream.concat(a.stream(), b.stream()).collect(Collectors.toList())));\n+        teams.forEach(team -> teamWebsocketService.sendTeamAssignmentUpdate(exercise, null, team, participationsMap.getOrDefault(team.getParticipantIdentifier(), List.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc1MDU2OA==", "bodyText": "I actually did not change this part. I have just used what was used in importing from another exercise.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537750568", "createdAt": "2020-12-07T18:57:47Z", "author": {"login": "iozbeyli"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates\n+     *\n+     * @param exercise Exercise which students will receive team update\n+     * @param teams    Teams of exercise\n+     */\n+    private void sendTeamAssignmentUpdates(Exercise exercise, List<Team> teams) {\n+        // Send out team assignment update via websockets\n+        Map<String, List<StudentParticipation>> participationsMap = participationService.findByExerciseIdWithEagerSubmissionsResult(exercise.getId()).stream()\n+                .collect(Collectors.toMap(StudentParticipation::getParticipantIdentifier, List::of, (a, b) -> Stream.concat(a.stream(), b.stream()).collect(Collectors.toList())));\n+        teams.forEach(team -> teamWebsocketService.sendTeamAssignmentUpdate(exercise, null, team, participationsMap.getOrDefault(team.getParticipantIdentifier(), List.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDkyMw==", "bodyText": "If I'm not completely wrong, this update targets the team, not the instructor, so it can not be replaced by a single message to the instructor.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537864923", "createdAt": "2020-12-07T22:00:15Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates\n+     *\n+     * @param exercise Exercise which students will receive team update\n+     * @param teams    Teams of exercise\n+     */\n+    private void sendTeamAssignmentUpdates(Exercise exercise, List<Team> teams) {\n+        // Send out team assignment update via websockets\n+        Map<String, List<StudentParticipation>> participationsMap = participationService.findByExerciseIdWithEagerSubmissionsResult(exercise.getId()).stream()\n+                .collect(Collectors.toMap(StudentParticipation::getParticipantIdentifier, List::of, (a, b) -> Stream.concat(a.stream(), b.stream()).collect(Collectors.toList())));\n+        teams.forEach(team -> teamWebsocketService.sendTeamAssignmentUpdate(exercise, null, team, participationsMap.getOrDefault(team.getParticipantIdentifier(), List.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4ODM4MA==", "bodyText": "Yes, it sends update to each student.", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537888380", "createdAt": "2020-12-07T22:41:03Z", "author": {"login": "iozbeyli"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates\n+     *\n+     * @param exercise Exercise which students will receive team update\n+     * @param teams    Teams of exercise\n+     */\n+    private void sendTeamAssignmentUpdates(Exercise exercise, List<Team> teams) {\n+        // Send out team assignment update via websockets\n+        Map<String, List<StudentParticipation>> participationsMap = participationService.findByExerciseIdWithEagerSubmissionsResult(exercise.getId()).stream()\n+                .collect(Collectors.toMap(StudentParticipation::getParticipantIdentifier, List::of, (a, b) -> Stream.concat(a.stream(), b.stream()).collect(Collectors.toList())));\n+        teams.forEach(team -> teamWebsocketService.sendTeamAssignmentUpdate(exercise, null, team, participationsMap.getOrDefault(team.getParticipantIdentifier(), List.of())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, "originalCommit": {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI1MjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1OToyOFrOIA6cgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1OToyOFrOIA6cgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODQ4Mg==", "bodyText": "Formatting seems weird", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537828482", "createdAt": "2020-12-07T20:59:28Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -67,9 +70,40 @@\n             + \"(user.login like :#{#loginOrName}% or concat_ws(' ', user.firstName, user.lastName) like %:#{#loginOrName}%)\")\n     List<User> searchByLoginOrNameInGroup(@Param(\"groupName\") String groupName, @Param(\"loginOrName\") String loginOrName);\n \n+    /**\n+     * Gets users in a group by their registration number.\n+     *\n+     * @param groupName           Name of group in which to search for users\n+     * @param registrationNumbers Registration numbers of users\n+     * @return found users that match the criteria\n+     */\n+    @EntityGraph(type = LOAD, attributePaths = { \"groups\" })\n+    @Query(\"\"\"\n+            select user\n+                from User user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e629d503679c625bddbe1f16425e79b47e7ffa2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDcyNDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNzozMlrOIBjSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNzozMlrOIBjSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NzY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise\n          \n          \n            \n                 * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise (potentially overriding existing teams)", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r538497653", "createdAt": "2020-12-08T15:27:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -317,12 +320,54 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         return ResponseEntity.ok().body(teamService.searchByLoginOrNameInCourseForExerciseTeam(course, exercise, loginOrName));\n     }\n \n+    /**\n+     * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324929d45a77cda6f008b51a1818acc9cd7d0be6"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4291, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}