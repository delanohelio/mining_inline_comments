{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODA3NTkx", "number": 2513, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNjo1M1rOFB_cZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNjo1M1rOFB_cZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjMyMzU2OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/overview/course-lectures/course-lectures.component.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNjo1M1rOIA7FNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNjo1M1rOIA7FNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzODkwMA==", "bodyText": "Cool way mock the service, I really like it. Maybe we can have a code guideline for this, so that we write all our service mocks like this :)", "url": "https://github.com/ls1intum/Artemis/pull/2513#discussion_r537838900", "createdAt": "2020-12-07T21:16:53Z", "author": {"login": "fde312"}, "path": "src/test/javascript/spec/component/overview/course-lectures/course-lectures.component.spec.ts", "diffHunk": "@@ -0,0 +1,140 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed } from '@angular/core/testing';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { of } from 'rxjs';\n+import { ActivatedRoute } from '@angular/router';\n+import { JhiTranslateDirective } from 'ng-jhipster';\n+import { Component, Input } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { SidePanelComponent } from 'app/shared/side-panel/side-panel.component';\n+import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { Lecture } from 'app/entities/lecture.model';\n+import { Course } from 'app/entities/course.model';\n+import { CourseLecturesComponent } from 'app/overview/course-lectures/course-lectures.component';\n+import { CourseManagementService } from 'app/course/manage/course-management.service';\n+import { CourseScoreCalculationService } from 'app/overview/course-score-calculation.service';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { MockTranslateService } from '../../../helpers/mocks/service/mock-translate.service';\n+import * as moment from 'moment';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-course-lecture-row', template: '' })\n+class CourseLectureRowStubComponent {\n+    @Input() lecture: Lecture;\n+    @Input() course: Course;\n+    @Input() extendedLink = false;\n+}\n+\n+class MockActivatedRoute {\n+    parent: any;\n+    params: any;\n+\n+    constructor(options: { parent?: any; params?: any }) {\n+        this.parent = options.parent;\n+        this.params = options.params;\n+    }\n+}\n+\n+const mockActivatedRoute = new MockActivatedRoute({\n+    parent: new MockActivatedRoute({\n+        params: of({ courseId: '1' }),\n+    }),\n+});\n+describe('CourseLectures', () => {\n+    let courseLecturesComponentFixture: ComponentFixture<CourseLecturesComponent>;\n+    let courseLecturesComponent: CourseLecturesComponent;\n+    let course: Course;\n+    let lecture1: Lecture;\n+    let lecture2: Lecture;\n+    let lecture3: Lecture;\n+\n+    beforeEach(() => {\n+        course = new Course();\n+        course.id = 1;\n+\n+        const wednesdayBase = moment('18-03-2020', 'DD-MM-YYYY');\n+        const wednesdayBefore = moment('11-03-2020', 'DD-MM-YYYY');\n+        const wednesdayAfter = moment('25-03-2020', 'DD-MM-YYYY');\n+\n+        lecture1 = new Lecture();\n+        lecture1.id = 1;\n+        lecture1.startDate = wednesdayBase;\n+        lecture2 = new Lecture();\n+        lecture2.id = 2;\n+        lecture2.startDate = wednesdayBefore;\n+        lecture3 = new Lecture();\n+        lecture3.id = 3;\n+        lecture3.startDate = wednesdayAfter;\n+        course.lectures = [lecture1, lecture2, lecture3];\n+\n+        TestBed.configureTestingModule({\n+            imports: [NgbDropdownModule],\n+            declarations: [\n+                CourseLecturesComponent,\n+                CourseLectureRowStubComponent,\n+                MockPipe(TranslatePipe),\n+                MockPipe(ArtemisDatePipe),\n+                MockComponent(SidePanelComponent),\n+                MockComponent(FaIconComponent),\n+                MockDirective(JhiTranslateDirective),\n+            ],\n+            providers: [\n+                MockProvider(CourseManagementService, {\n+                    getCourseUpdates: () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cbd52e19b7511ab3677b03efafc79e2ef5c259"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4311, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}