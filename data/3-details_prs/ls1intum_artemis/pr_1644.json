{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDEzMjA3", "number": 1644, "title": "Distributed Quiz Scheduling", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest2.ase.in.tum.de.\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style. And updated the existing documentation\n Server: K6 and all Java Tests work.\n\nMotivation and Context\nFix quiz scheduling and caching for distributed Artemis systems.\nDescription\nMoved from nested ConcurrentHashMaps to Halzelcast IMaps and from Javas ExecutorService to Hazelcast IScheduledExecutorService. This makes the cache distributed and the processing of new Submissions more fail-safe. The quiz submission caching/processing is overall slower though. This could be improved in a future PR.\nSteps for Testing\n\n\nIf possible, start two instances of Artemis (make sure they are connected within a Hazelcast cluster)\nTest everything concerning quiz exercises, like\n\ncreating,\nplanning with start time,\nstarting manually,\nsetting visible,\nresetting and deleting,\nchanging the checked answers frequently,\nsubmitting manually and when time is up,\ncheck you get the correct results,\ncheck that the statistics are correct\n\n\nIt would be best to test this with multiple people/accounts.\nTry to \"destroy\" or overload the quiz exercise service.\n(Review the Code)", "createdAt": "2020-06-13T14:29:17Z", "url": "https://github.com/ls1intum/Artemis/pull/1644", "merged": true, "mergeCommit": {"oid": "315065f441631c21dfaed3799466e16335b55571"}, "closed": true, "closedAt": "2020-06-25T14:43:46Z", "author": {"login": "MaisiKoleni"}, "timelineItems": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcq4SXrgH2gAyNDM0MDEzMjA3OjJiZDdlMWYzOTFkYzg2MTVhZDViYjUxMTE4YjAwMzhiMGRiNzkwMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuvvFfAFqTQzNzU2NjQxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2bd7e1f391dc8615ad5bb51118b0038b0db79022", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/2bd7e1f391dc8615ad5bb51118b0038b0db79022", "committedDate": "2020-06-13T14:25:39Z", "message": "Remove static modifiers from QuizScheduleService methods and fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a4f094d3eb4ec6f13359a8d04893cb37cf0830", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/22a4f094d3eb4ec6f13359a8d04893cb37cf0830", "committedDate": "2020-06-13T15:00:26Z", "message": "Add documentation for the new exercise parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32b595d0dab05844977d6ba988f9792f46ca58a0", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/32b595d0dab05844977d6ba988f9792f46ca58a0", "committedDate": "2020-06-16T01:03:18Z", "message": "Use SpringManagedContext for Hazelcast Config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb327bcdff9b877f744264a64f74d12e7a37bdf", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/cbb327bcdff9b877f744264a64f74d12e7a37bdf", "committedDate": "2020-06-16T01:20:38Z", "message": "Make FileService Java-transient as well because it is not serializable\n\nShould we want to use it after deserialization by Hazelcast, we need to\nmake the domain classes SpringAware."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c2c91b79a3053116b8a35c22f0f7859e75ed16", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/74c2c91b79a3053116b8a35c22f0f7859e75ed16", "committedDate": "2020-06-16T01:25:30Z", "message": "Move QuizScheduleService into its own sub-package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54412a0c773d69fafaf1ac6893a2fe6852756bc", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/e54412a0c773d69fafaf1ac6893a2fe6852756bc", "committedDate": "2020-06-16T01:30:52Z", "message": "Basic distributed QuizScheduleService\n\nThis implementation state works, but is still work in progress and might\nhave some problems and documentation inconsistencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a28a7ec6680d195b721c207f2c7f57fa250b8f4", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/5a28a7ec6680d195b721c207f2c7f57fa250b8f4", "committedDate": "2020-06-16T01:36:15Z", "message": "Schedule sending the quiz start to users only on one node\n\nThis might depend on the network configuration, should we make that\nconfigurable?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d53d11c27732f33a827557b78ac69e4c23cf8b", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/32d53d11c27732f33a827557b78ac69e4c23cf8b", "committedDate": "2020-06-16T03:08:23Z", "message": "Fix ScheduledFuture distribution for stopSchedule()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b3b524037d56cc829cd9885de1295b20c4d944c", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/1b3b524037d56cc829cd9885de1295b20c4d944c", "committedDate": "2020-06-16T03:09:48Z", "message": "Remove comment because it does make some difference\n\nNot in the K6 test but in the submission integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e8d0f6bacdaebda324cafcf9b20697655782084", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/9e8d0f6bacdaebda324cafcf9b20697655782084", "committedDate": "2020-06-16T03:10:43Z", "message": "Move executeQuizStartTask() to a better position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6e8a576c15bfd68a88e48cb89a2edaf8dd13eaa", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/c6e8a576c15bfd68a88e48cb89a2edaf8dd13eaa", "committedDate": "2020-06-16T03:12:54Z", "message": "Refactor quizExerciseId into local variable as it is used very often"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17ca5a4c35e43da031a003fd9cb4d48371fcf545", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/17ca5a4c35e43da031a003fd9cb4d48371fcf545", "committedDate": "2020-06-16T03:13:44Z", "message": "Fix potential problem with local caching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeaa4acb38b846a1fcaafbc73aa957cadb51304c", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/eeaa4acb38b846a1fcaafbc73aa957cadb51304c", "committedDate": "2020-06-16T03:15:02Z", "message": "Add clearAllQuizData() to the tear down tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6cc13b2c6554ac174b1f5f3dd6b63291796afb", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/ba6cc13b2c6554ac174b1f5f3dd6b63291796afb", "committedDate": "2020-06-16T06:40:38Z", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling\n\nConflicts:\n\tsrc/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n\tsrc/main/java/de/tum/in/www1/artemis/service/ParticipationService.java\n\tsrc/main/java/de/tum/in/www1/artemis/service/scheduled/QuizScheduleService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342d8d335e67437c42805096f131b23fbbe3ed19", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/342d8d335e67437c42805096f131b23fbbe3ed19", "committedDate": "2020-06-16T09:58:45Z", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b47ebe884082b024587d420234f34fc6cf642d7", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/8b47ebe884082b024587d420234f34fc6cf642d7", "committedDate": "2020-06-16T10:43:06Z", "message": "Remove commented-out logging statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba911ccb0cc40e6bef7d6c5dbb296c2c8e61df9c", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/ba911ccb0cc40e6bef7d6c5dbb296c2c8e61df9c", "committedDate": "2020-06-16T10:43:55Z", "message": "Remove commented-out pre-loader configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "616106fd5ec18bd44df305db91f3878b6d82a401", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/616106fd5ec18bd44df305db91f3878b6d82a401", "committedDate": "2020-06-16T14:32:09Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9648ea55c9361ee01475d2aca672f6fef33cebf7", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/9648ea55c9361ee01475d2aca672f6fef33cebf7", "committedDate": "2020-06-16T14:47:54Z", "message": "Fix logging in destroy()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bd6e404bc1eaff5ae8954224b265ba023384430", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/5bd6e404bc1eaff5ae8954224b265ba023384430", "committedDate": "2020-06-16T18:23:04Z", "message": "Fix object caching implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/c3e8a2bdc1c340f757db046f9cfc447cd5be042c", "committedDate": "2020-06-16T18:23:55Z", "message": "Change log message and location"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzAyODM4", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-432702838", "createdAt": "2020-06-17T19:18:35Z", "commit": {"oid": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToxODozNVrOGlT_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToxODozNVrOGlT_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3ODAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Long id;\n          \n          \n            \n                private Long exerciseId;", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r441778008", "createdAt": "2020-06-17T19:18:35Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseCache.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.util.*;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+abstract class QuizExerciseCache {\n+\n+    private Long id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzA3MzI4", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-432707328", "createdAt": "2020-06-17T19:25:17Z", "commit": {"oid": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNToxN1rOGlUMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNToxN1rOGlUMuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTQzMg==", "bodyText": "why is this coming so late now?", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r441781432", "createdAt": "2020-06-17T19:25:17Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java", "diffHunk": "@@ -341,87 +464,101 @@ public void processCachedQuizSubmissions() {\n         log.debug(\"Process cached quiz submissions\");\n         // global try-catch for error logging\n         try {\n-            long start = System.nanoTime();\n-\n-            // create Participations and Results if the submission was submitted or if the quiz has ended and save them to Database (DB Write)\n-            for (long quizExerciseId : submissionHashMap.keySet()) {\n-\n-                QuizExercise quizExercise = quizExerciseService.findOneWithQuestions(quizExerciseId);\n+            for (QuizExerciseCache cachedQuiz : cachedQuizExercises.values()) {\n+                Long quizExerciseId = cachedQuiz.getId();\n+                // Get fresh QuizExercise from DB\n+                QuizExercise quizExercise = quizExerciseService.findOne(quizExerciseId);\n                 // check if quiz has been deleted\n                 if (quizExercise == null) {\n-                    submissionHashMap.remove(quizExerciseId);\n+                    log.debug(\"Remove quiz \" + quizExerciseId + \" from resultHashMap\");\n+                    cachedQuizExercises.remove(quizExerciseId);\n+                    cachedQuiz.destroy();\n                     continue;\n                 }\n \n-                // if quiz has ended, all submissions will be processed => we can remove the inner HashMap for this quiz\n-                // if quiz hasn't ended, some submissions (those that are not submitted) will stay in HashMap => keep inner HashMap\n-                Map<String, QuizSubmission> submissions;\n-                if (quizExercise.isEnded()) {\n-                    submissions = submissionHashMap.remove(quizExerciseId);\n-                }\n-                else {\n-                    submissions = submissionHashMap.get(quizExerciseId);\n+                // (Boolean wrapper is safe to auto-unbox here)\n+                boolean hasEnded = quizExercise.isEnded();\n+                // Note that those might not be true later on due to concurrency and a distributed system,\n+                // do not rely on that for actions upon the whole set, such as clear()\n+                boolean hasNewSubmissions = !cachedQuiz.getSubmissions().isEmpty();\n+                boolean hasNewParticipations = !cachedQuiz.getParticipations().isEmpty();\n+                boolean hasNewResults = !cachedQuiz.getResults().isEmpty();\n+\n+                // Skip quizzes with no cached changes\n+                if (!hasNewSubmissions && !hasNewParticipations && !hasNewResults) {\n+                    // Remove quiz if it is not scheduled for start\n+                    if (hasEnded && cachedQuiz.getQuizStart().isEmpty()) {\n+                        removeCachedQuiz(cachedQuiz);\n+                    }\n+                    continue;\n                 }\n \n-                int numberOfSubmittedSubmissions = saveQuizSubmissionWithParticipationAndResultToDatabase(quizExercise, submissions);\n+                // Update cached exercise object (use the expensive operation upfront)\n+                quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n+                cachedQuiz.setExercise(quizExercise);\n+                updateQuizExercise(quizExercise);\n \n-                if (numberOfSubmittedSubmissions > 0) {\n-                    log.info(\"Saved {} submissions to database in {} in quiz {}\", numberOfSubmittedSubmissions, printDuration(start), quizExercise.getTitle());\n-                }\n-            }\n+                // Save cached Submissions (this will also generate results and participations and place them in the cache)\n+                long start = System.nanoTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3e8a2bdc1c340f757db046f9cfc447cd5be042c"}, "originalPosition": 531}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d80b77848245f44d17895774677e51ef80bf863", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/8d80b77848245f44d17895774677e51ef80bf863", "committedDate": "2020-06-17T19:54:24Z", "message": "Clean up code, refactor some parts and fix/add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d84d89c92bae23e4239b9ce8389a6f471f77c28", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/7d84d89c92bae23e4239b9ce8389a6f471f77c28", "committedDate": "2020-06-17T20:11:00Z", "message": "Rename some variables and methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "063945a3507f034be4b4f000af2c757bd14f9fd6", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/063945a3507f034be4b4f000af2c757bd14f9fd6", "committedDate": "2020-06-18T17:15:40Z", "message": "Increase time the tests waits for processing all submissions and results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd653f7982cd5350024e565a430f589e4aea7687", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/dd653f7982cd5350024e565a430f589e4aea7687", "committedDate": "2020-06-18T17:20:01Z", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf097885c70d44d311448970adb29e7dcb012d39", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/cf097885c70d44d311448970adb29e7dcb012d39", "committedDate": "2020-06-21T09:47:59Z", "message": "Change from values() to keySet()."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0305a8442c5f57f6600017854aab4d0060482c8f", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/0305a8442c5f57f6600017854aab4d0060482c8f", "committedDate": "2020-06-21T09:52:04Z", "message": "Fix cache hazelcast configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b6f78d3d7f97fbcf4d27ff7995ffe8e62f57746", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/9b6f78d3d7f97fbcf4d27ff7995ffe8e62f57746", "committedDate": "2020-06-21T11:38:54Z", "message": "Fix test so that I is not dependent on system performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b304f954bb5d0d862af920f4afe2e09c467093e3", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/b304f954bb5d0d862af920f4afe2e09c467093e3", "committedDate": "2020-06-21T12:25:51Z", "message": "Implement NamedTask for the custom quiz tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14fcdb9732f6d34499c6c7186bfb50d95cc1140", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/e14fcdb9732f6d34499c6c7186bfb50d95cc1140", "committedDate": "2020-06-21T13:39:03Z", "message": "Remove blank line between import groups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da81b76c9323db6044e30ecce5d9edf2ad6a1c19", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/da81b76c9323db6044e30ecce5d9edf2ad6a1c19", "committedDate": "2020-06-21T13:48:42Z", "message": "Switch to exerciseRepository save"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "736e7a247aa948fd9863ae477b605e0396a6d5b2", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/736e7a247aa948fd9863ae477b605e0396a6d5b2", "committedDate": "2020-06-21T15:21:08Z", "message": "Improve and document task cancellation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810fa5e6e93fa597fbd14f035066e47b99b8fbfe", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/810fa5e6e93fa597fbd14f035066e47b99b8fbfe", "committedDate": "2020-06-21T15:21:08Z", "message": "Use ClassLoader from Spring ApplicationContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63a1d9fdcae0b93471b583f33cd8dec23b07b470", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/63a1d9fdcae0b93471b583f33cd8dec23b07b470", "committedDate": "2020-06-21T15:27:53Z", "message": "Document why we use get here after object creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9036dd8946894b268faae490c3f9873698bd6163", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/9036dd8946894b268faae490c3f9873698bd6163", "committedDate": "2020-06-21T16:19:44Z", "message": "Small schedule task stopping improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23b7f3eb0c6a16183af63ea92b199c805baeb5a3", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/23b7f3eb0c6a16183af63ea92b199c805baeb5a3", "committedDate": "2020-06-21T16:37:09Z", "message": "Add cancel-call again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa617e27a1fe945dc2700a17b83ea0b93ac8a5cb", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/fa617e27a1fe945dc2700a17b83ea0b93ac8a5cb", "committedDate": "2020-06-21T17:17:44Z", "message": "Switch to non-interrupting cancel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ad1d60d16ac5718012c6e89efc332448ec9fe7", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/e9ad1d60d16ac5718012c6e89efc332448ec9fe7", "committedDate": "2020-06-21T17:56:49Z", "message": "Make cached QuizExercise not transient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f68c7ea7b95bc8bf4f61b3764f751e2b2436040c", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/f68c7ea7b95bc8bf4f61b3764f751e2b2436040c", "committedDate": "2020-06-21T17:57:26Z", "message": "Log if cancel was successful"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30368e610defa64a3d7a3281354601011e4b76a3", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/30368e610defa64a3d7a3281354601011e4b76a3", "committedDate": "2020-06-21T18:45:14Z", "message": "Use ScheduledTaskHandler as reference if the processing is running"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3366d4ba30fff293efa1b9815368b3020e042a70", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/3366d4ba30fff293efa1b9815368b3020e042a70", "committedDate": "2020-06-21T19:20:49Z", "message": "Fix missing QuizExercise serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d6b5b5390e0d3a1367195b0c9f48261e9561e5", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/32d6b5b5390e0d3a1367195b0c9f48261e9561e5", "committedDate": "2020-06-21T19:31:56Z", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDQyOTcx", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-435042971", "createdAt": "2020-06-22T15:35:03Z", "commit": {"oid": "32d6b5b5390e0d3a1367195b0c9f48261e9561e5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDU3MjU2", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-435057256", "createdAt": "2020-06-22T15:51:02Z", "commit": {"oid": "32d6b5b5390e0d3a1367195b0c9f48261e9561e5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTY2MDAx", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-435166001", "createdAt": "2020-06-22T18:16:40Z", "commit": {"oid": "32d6b5b5390e0d3a1367195b0c9f48261e9561e5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa8f0ee578439055012892e4acb80e453fe3cca", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/1fa8f0ee578439055012892e4acb80e453fe3cca", "committedDate": "2020-06-23T09:31:49Z", "message": "Revert \"Make cached QuizExercise not transient\"\n\nThis reverts commit e9ad1d60d16ac5718012c6e89efc332448ec9fe7."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2ca3c48e9483a7f0d04654df2ae28d69d6eb9bf", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/c2ca3c48e9483a7f0d04654df2ae28d69d6eb9bf", "committedDate": "2020-06-23T10:03:45Z", "message": "Improve quiz exercise caching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f5191795e0430c755b3c699ced7c80d54f33dfe", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/5f5191795e0430c755b3c699ced7c80d54f33dfe", "committedDate": "2020-06-23T10:05:45Z", "message": "Add safety check and documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd48b54252b653f7cbc124835db9942d5c63d932", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/dd48b54252b653f7cbc124835db9942d5c63d932", "committedDate": "2020-06-23T10:31:41Z", "message": "Merge branch 'develop' into enhancement/quiz/distributed-scheduling\n\nConflicts:\n\tsrc/main/java/de/tum/in/www1/artemis/service/scheduled/QuizScheduleService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b92a662f256f9936321f314e7fa6e4c7556a5295", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/b92a662f256f9936321f314e7fa6e4c7556a5295", "committedDate": "2020-06-23T10:45:15Z", "message": "Fix getQuizExercise and quiz exercise caching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cbd62290e644d020a0557d06ff3930a94c0245b", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/9cbd62290e644d020a0557d06ff3930a94c0245b", "committedDate": "2020-06-23T10:42:07Z", "message": "Fix getQuizExercise and quiz exercise caching"}, "afterCommit": {"oid": "b92a662f256f9936321f314e7fa6e4c7556a5295", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/b92a662f256f9936321f314e7fa6e4c7556a5295", "committedDate": "2020-06-23T10:45:15Z", "message": "Fix getQuizExercise and quiz exercise caching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a45180291c5328ac8130761fbc7f8d3ed0c3ca04", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/a45180291c5328ac8130761fbc7f8d3ed0c3ca04", "committedDate": "2020-06-23T11:27:20Z", "message": "Add Javadoc to getQuizExercise(Long)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54096037dedaade0c68622c4265a0e1b8289387b", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/54096037dedaade0c68622c4265a0e1b8289387b", "committedDate": "2020-06-23T15:06:34Z", "message": "Invalidate the cached exercise on all Hazelcast members"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2", "author": {"user": {"login": "MaisiKoleni", "name": "Christian Femers"}}, "url": "https://github.com/ls1intum/Artemis/commit/83e40eae6a5e9666d9e0ccbb518953521393abc2", "committedDate": "2020-06-23T17:56:23Z", "message": "Reduce cached quiz exercise updates\n\nThis is closer to the original behavior again."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDkzMjA3", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-436493207", "createdAt": "2020-06-24T09:48:29Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTI3Njk1", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-436927695", "createdAt": "2020-06-24T19:05:33Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTMxNzEy", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437531712", "createdAt": "2020-06-25T14:09:05Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDowOTowNVrOGo8dsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDowOTowNVrOGo8dsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4Njg2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n          \n          \n            \n                QuizExerciseDistributedCache(Long exerciseId, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445586865", "createdAt": "2020-06-25T14:09:05Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTM0NTM3", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437534537", "createdAt": "2020-06-25T14:11:59Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMTo1OVrOGo8lwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMTo1OVrOGo8lwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4ODkyOQ==", "bodyText": "is automatically created if it does not exist yet", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445588929", "createdAt": "2020-06-25T14:11:59Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n+        super(id);\n+        setQuizStart(quizStart);\n+        setExercise(exercise);\n+        log.debug(\"Creating new QuizExerciseDistributedCache, id {}\", getExerciseId());\n+    }\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart) {\n+        this(id, quizStart, null);\n+    }\n+\n+    QuizExerciseDistributedCache(Long id) {\n+        this(id, getEmptyQuizStartList());\n+    }\n+\n+    @Override\n+    QuizExercise getExercise() {\n+        return exercise;\n+    }\n+\n+    @Override\n+    Map<String, QuizSubmission> getSubmissions() {\n+        return submissions;\n+    }\n+\n+    @Override\n+    Map<String, StudentParticipation> getParticipations() {\n+        return participations;\n+    }\n+\n+    @Override\n+    List<ScheduledTaskHandler> getQuizStart() {\n+        return quizStart;\n+    }\n+\n+    @Override\n+    Map<Long, Result> getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    void setExercise(QuizExercise newExercise) {\n+        this.exercise = newExercise;\n+    }\n+\n+    @Override\n+    void setQuizStart(List<ScheduledTaskHandler> quizStart) {\n+        Objects.requireNonNull(quizStart);\n+        if (SUPPORTED_LIST_CLASSES.contains(quizStart.getClass())) {\n+            this.quizStart = quizStart;\n+        }\n+        else {\n+            this.quizStart = new ArrayList<>(quizStart);\n+        }\n+    }\n+\n+    @Override\n+    void clear() {\n+        int participationsSize = participations.size();\n+        int submissionsSize = submissions.size();\n+        int resultsSize = results.size();\n+        if (participationsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} participations cached\", getExerciseId(), participationsSize);\n+        if (submissionsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} submissions cached\", getExerciseId(), submissionsSize);\n+        if (resultsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} results cached\", getExerciseId(), resultsSize);\n+\n+        participations.destroy();\n+        submissions.destroy();\n+        results.destroy();\n+        exercise = null;\n+    }\n+\n+    @Override\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        participations = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_PARTICIPATIONS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTM0ODE1", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437534815", "createdAt": "2020-06-25T14:12:17Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMjoxN1rOGo8mfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMjoxN1rOGo8mfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4OTExOQ==", "bodyText": "rename", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445589119", "createdAt": "2020-06-25T14:12:17Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n+        super(id);\n+        setQuizStart(quizStart);\n+        setExercise(exercise);\n+        log.debug(\"Creating new QuizExerciseDistributedCache, id {}\", getExerciseId());\n+    }\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart) {\n+        this(id, quizStart, null);\n+    }\n+\n+    QuizExerciseDistributedCache(Long id) {\n+        this(id, getEmptyQuizStartList());\n+    }\n+\n+    @Override\n+    QuizExercise getExercise() {\n+        return exercise;\n+    }\n+\n+    @Override\n+    Map<String, QuizSubmission> getSubmissions() {\n+        return submissions;\n+    }\n+\n+    @Override\n+    Map<String, StudentParticipation> getParticipations() {\n+        return participations;\n+    }\n+\n+    @Override\n+    List<ScheduledTaskHandler> getQuizStart() {\n+        return quizStart;\n+    }\n+\n+    @Override\n+    Map<Long, Result> getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    void setExercise(QuizExercise newExercise) {\n+        this.exercise = newExercise;\n+    }\n+\n+    @Override\n+    void setQuizStart(List<ScheduledTaskHandler> quizStart) {\n+        Objects.requireNonNull(quizStart);\n+        if (SUPPORTED_LIST_CLASSES.contains(quizStart.getClass())) {\n+            this.quizStart = quizStart;\n+        }\n+        else {\n+            this.quizStart = new ArrayList<>(quizStart);\n+        }\n+    }\n+\n+    @Override\n+    void clear() {\n+        int participationsSize = participations.size();\n+        int submissionsSize = submissions.size();\n+        int resultsSize = results.size();\n+        if (participationsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} participations cached\", getExerciseId(), participationsSize);\n+        if (submissionsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} submissions cached\", getExerciseId(), submissionsSize);\n+        if (resultsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} results cached\", getExerciseId(), resultsSize);\n+\n+        participations.destroy();\n+        submissions.destroy();\n+        results.destroy();\n+        exercise = null;\n+    }\n+\n+    @Override\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        participations = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_PARTICIPATIONS);\n+        submissions = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_SUBMISSIONS);\n+        results = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_RESULTS);\n+    }\n+\n+    static class QuizExerciseCacheImplStreamSerializer implements StreamSerializer<QuizExerciseDistributedCache> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTM1MDc3", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437535077", "createdAt": "2020-06-25T14:12:33Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMjozM1rOGo8nTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMjozM1rOGo8nTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4OTMyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Long id = in.readLong();\n          \n          \n            \n                        Long exerciseId = in.readLong();", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445589324", "createdAt": "2020-06-25T14:12:33Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizExerciseDistributedCache.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.SerializerConfig;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.HazelcastInstanceAware;\n+import com.hazelcast.internal.serialization.impl.SerializationServiceV1;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.hazelcast.scheduledexecutor.ScheduledTaskHandler;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+\n+final class QuizExerciseDistributedCache extends QuizExerciseCache implements HazelcastInstanceAware {\n+\n+    private static final Logger log = LoggerFactory.getLogger(QuizExerciseDistributedCache.class);\n+\n+    private static final String HAZELCAST_CACHE_PARTICIPATIONS = \"-participations\";\n+\n+    private static final String HAZELCAST_CACHE_SUBMISSIONS = \"-submissions\";\n+\n+    private static final String HAZELCAST_CACHE_RESULTS = \"-results\";\n+\n+    private static final Set<Class<?>> SUPPORTED_LIST_CLASSES = Set.of(ArrayList.class, LinkedList.class, CopyOnWriteArrayList.class);\n+\n+    /**\n+     * Make sure this is a class of SUPPORTED_LIST_CLASSES to make easy serialization possible, see {@link SerializationServiceV1}\n+     */\n+    List<ScheduledTaskHandler> quizStart;\n+\n+    private transient QuizExercise exercise;\n+\n+    private transient IMap<String, StudentParticipation> participations;\n+\n+    private transient IMap<String, QuizSubmission> submissions;\n+\n+    /**\n+     * Must be a Map because Hazelcast uses serialized objects for set operations and not hashCode()/equals()\n+     */\n+    private transient IMap<Long, Result> results;\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart, QuizExercise exercise) {\n+        super(id);\n+        setQuizStart(quizStart);\n+        setExercise(exercise);\n+        log.debug(\"Creating new QuizExerciseDistributedCache, id {}\", getExerciseId());\n+    }\n+\n+    QuizExerciseDistributedCache(Long id, List<ScheduledTaskHandler> quizStart) {\n+        this(id, quizStart, null);\n+    }\n+\n+    QuizExerciseDistributedCache(Long id) {\n+        this(id, getEmptyQuizStartList());\n+    }\n+\n+    @Override\n+    QuizExercise getExercise() {\n+        return exercise;\n+    }\n+\n+    @Override\n+    Map<String, QuizSubmission> getSubmissions() {\n+        return submissions;\n+    }\n+\n+    @Override\n+    Map<String, StudentParticipation> getParticipations() {\n+        return participations;\n+    }\n+\n+    @Override\n+    List<ScheduledTaskHandler> getQuizStart() {\n+        return quizStart;\n+    }\n+\n+    @Override\n+    Map<Long, Result> getResults() {\n+        return results;\n+    }\n+\n+    @Override\n+    void setExercise(QuizExercise newExercise) {\n+        this.exercise = newExercise;\n+    }\n+\n+    @Override\n+    void setQuizStart(List<ScheduledTaskHandler> quizStart) {\n+        Objects.requireNonNull(quizStart);\n+        if (SUPPORTED_LIST_CLASSES.contains(quizStart.getClass())) {\n+            this.quizStart = quizStart;\n+        }\n+        else {\n+            this.quizStart = new ArrayList<>(quizStart);\n+        }\n+    }\n+\n+    @Override\n+    void clear() {\n+        int participationsSize = participations.size();\n+        int submissionsSize = submissions.size();\n+        int resultsSize = results.size();\n+        if (participationsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} participations cached\", getExerciseId(), participationsSize);\n+        if (submissionsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} submissions cached\", getExerciseId(), submissionsSize);\n+        if (resultsSize > 0)\n+            log.warn(\"Cache for Quiz {} destroyed with {} results cached\", getExerciseId(), resultsSize);\n+\n+        participations.destroy();\n+        submissions.destroy();\n+        results.destroy();\n+        exercise = null;\n+    }\n+\n+    @Override\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        participations = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_PARTICIPATIONS);\n+        submissions = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_SUBMISSIONS);\n+        results = hazelcastInstance.getMap(Constants.HAZELCAST_QUIZ_PREFIX + getExerciseId() + HAZELCAST_CACHE_RESULTS);\n+    }\n+\n+    static class QuizExerciseCacheImplStreamSerializer implements StreamSerializer<QuizExerciseDistributedCache> {\n+\n+        @Override\n+        public int getTypeId() {\n+            return Constants.HAZELCAST_QUIZ_EXERCISE_CACHE_SERIALIZER_ID;\n+        }\n+\n+        @Override\n+        public void write(ObjectDataOutput out, QuizExerciseDistributedCache exerciseCacheImpl) throws IOException {\n+            out.writeLong(exerciseCacheImpl.getExerciseId());\n+            out.writeObject(exerciseCacheImpl.quizStart);\n+            out.writeObject(exerciseCacheImpl.exercise);\n+        }\n+\n+        @Override\n+        public QuizExerciseDistributedCache read(ObjectDataInput in) throws IOException {\n+            Long id = in.readLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTQwOTc1", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437540975", "createdAt": "2020-06-25T14:18:29Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxODoyOVrOGo85JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxODoyOVrOGo85JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5Mzg5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (cachedQuiz != null)\n          \n          \n            \n                        return cachedQuiz;\n          \n          \n            \n                    if (cachedQuiz != null) {\n          \n          \n            \n                        return cachedQuiz;\n          \n          \n            \n                    }", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445593893", "createdAt": "2020-06-25T14:18:29Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java", "diffHunk": "@@ -0,0 +1,743 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.UnaryOperator;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+import org.springframework.stereotype.Service;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.cp.IAtomicReference;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.scheduledexecutor.*;\n+import com.hazelcast.topic.ITopic;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.SubmittedAnswer;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.QuizStatisticService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+@Service\n+public class QuizScheduleService {\n+\n+    static final Logger log = LoggerFactory.getLogger(QuizScheduleService.class);\n+\n+    private static final String HAZELCAST_PROCESS_CACHE_HANDLER = QuizProcessCacheTask.HAZELCAST_PROCESS_CACHE_TASK + \"-handler\";\n+\n+    private static final String HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC = Constants.HAZELCAST_QUIZ_PREFIX + \"cached-exercise-invalidation\";\n+\n+    private IMap<Long, QuizExerciseCache> cachedQuizExercises;\n+\n+    private ITopic<QuizExercise> cachedQuizExerciseUpdates;\n+\n+    private volatile IScheduledExecutorService threadPoolTaskScheduler;\n+\n+    private IAtomicReference<ScheduledTaskHandler> scheduledProcessQuizSubmissions;\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final UserService userService;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private QuizExerciseService quizExerciseService;\n+\n+    private QuizStatisticService quizStatisticService;\n+\n+    private SimpMessageSendingOperations messagingTemplate;\n+\n+    private HazelcastInstance hazelcastInstance;\n+\n+    public QuizScheduleService(SimpMessageSendingOperations messagingTemplate, StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository,\n+            UserService userService, QuizSubmissionRepository quizSubmissionRepository, HazelcastInstance hazelcastInstance) {\n+        this.messagingTemplate = messagingTemplate;\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.userService = userService;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.hazelcastInstance = hazelcastInstance;\n+        this.scheduledProcessQuizSubmissions = hazelcastInstance.getCPSubsystem().getAtomicReference(HAZELCAST_PROCESS_CACHE_HANDLER);\n+        this.cachedQuizExercises = hazelcastInstance.getMap(Constants.HAZELCAST_EXERCISE_CACHE);\n+        this.threadPoolTaskScheduler = hazelcastInstance.getScheduledExecutorService(Constants.HAZELCAST_QUIZ_SCHEDULER);\n+        this.cachedQuizExerciseUpdates = hazelcastInstance.getTopic(HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC);\n+        this.cachedQuizExerciseUpdates.addMessageListener(newQuizExerciseMessage -> updateQuizExerciseLocally(newQuizExerciseMessage.getMessageObject()));\n+    }\n+\n+    /**\n+     * Configures Hazelcast for the QuizScheduleService before the HazelcastInstance is created.\n+     *\n+     * @param config the {@link Config} the QuizScheduleService-specific configuration should be added to\n+     */\n+    public static void configureHazelcast(Config config) {\n+        QuizExerciseCache.registerSerializers(config);\n+        // Pool size default 16, increased capacity (as we could have many quizzes) and default durability for now\n+        config.getScheduledExecutorConfig(Constants.HAZELCAST_QUIZ_SCHEDULER).setPoolSize(16).setCapacity(1000).setDurability(1);\n+        // Important to avoid continuous serialization and de-serialization and the implications on transient fields of QuizExerciseCache\n+        EvictionConfig evictionConfig = new EvictionConfig() //\n+                .setEvictionPolicy(EvictionPolicy.NONE);\n+        NearCacheConfig nearCacheConfig = new NearCacheConfig() //\n+                .setName(Constants.HAZELCAST_EXERCISE_CACHE + \"-local\") //\n+                .setInMemoryFormat(InMemoryFormat.OBJECT) //\n+                .setSerializeKeys(true) //\n+                .setInvalidateOnChange(true) //\n+                .setTimeToLiveSeconds(0) //\n+                .setMaxIdleSeconds(0) //\n+                .setEvictionConfig(evictionConfig) //\n+                .setCacheLocalEntries(true);\n+        config.getMapConfig(Constants.HAZELCAST_EXERCISE_CACHE).setNearCacheConfig(nearCacheConfig);\n+    }\n+\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void applicationReady() {\n+        // activate Quiz Schedule Service\n+        startSchedule(5 * 1000);                          // every 5 seconds\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizExerciseService(QuizExerciseService quizExerciseService) {\n+        this.quizExerciseService = quizExerciseService;\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizStatisticService(QuizStatisticService quizStatisticService) {\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Only for reading from QuizExerciseCache\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getReadCacheFor(Long quizExerciseId) {\n+        return cachedQuizExercises.getOrDefault(quizExerciseId, QuizExerciseCache.empty());\n+    }\n+\n+    /**\n+     * Only for the modification of transient properties, e.g. the exercise and the maps.\n+     * <p>\n+     * Creates new QuizExerciseCache if required.\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getTransientWriteCacheFor(Long quizExerciseId) {\n+        var cachedQuiz = cachedQuizExercises.get(quizExerciseId);\n+        if (cachedQuiz != null)\n+            return cachedQuiz;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTQxNjQy", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437541642", "createdAt": "2020-06-25T14:19:07Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxOTowN1rOGo863A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxOTowN1rOGo863A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDMzMg==", "bodyText": "explain in java doc why we need to lock", "url": "https://github.com/ls1intum/Artemis/pull/1644#discussion_r445594332", "createdAt": "2020-06-25T14:19:07Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/quiz/QuizScheduleService.java", "diffHunk": "@@ -0,0 +1,743 @@\n+package de.tum.in.www1.artemis.service.scheduled.quiz;\n+\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.UnaryOperator;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+import org.springframework.stereotype.Service;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.cp.IAtomicReference;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.scheduledexecutor.*;\n+import com.hazelcast.topic.ITopic;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.SubmittedAnswer;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.QuizStatisticService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+@Service\n+public class QuizScheduleService {\n+\n+    static final Logger log = LoggerFactory.getLogger(QuizScheduleService.class);\n+\n+    private static final String HAZELCAST_PROCESS_CACHE_HANDLER = QuizProcessCacheTask.HAZELCAST_PROCESS_CACHE_TASK + \"-handler\";\n+\n+    private static final String HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC = Constants.HAZELCAST_QUIZ_PREFIX + \"cached-exercise-invalidation\";\n+\n+    private IMap<Long, QuizExerciseCache> cachedQuizExercises;\n+\n+    private ITopic<QuizExercise> cachedQuizExerciseUpdates;\n+\n+    private volatile IScheduledExecutorService threadPoolTaskScheduler;\n+\n+    private IAtomicReference<ScheduledTaskHandler> scheduledProcessQuizSubmissions;\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final UserService userService;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private QuizExerciseService quizExerciseService;\n+\n+    private QuizStatisticService quizStatisticService;\n+\n+    private SimpMessageSendingOperations messagingTemplate;\n+\n+    private HazelcastInstance hazelcastInstance;\n+\n+    public QuizScheduleService(SimpMessageSendingOperations messagingTemplate, StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository,\n+            UserService userService, QuizSubmissionRepository quizSubmissionRepository, HazelcastInstance hazelcastInstance) {\n+        this.messagingTemplate = messagingTemplate;\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.userService = userService;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.hazelcastInstance = hazelcastInstance;\n+        this.scheduledProcessQuizSubmissions = hazelcastInstance.getCPSubsystem().getAtomicReference(HAZELCAST_PROCESS_CACHE_HANDLER);\n+        this.cachedQuizExercises = hazelcastInstance.getMap(Constants.HAZELCAST_EXERCISE_CACHE);\n+        this.threadPoolTaskScheduler = hazelcastInstance.getScheduledExecutorService(Constants.HAZELCAST_QUIZ_SCHEDULER);\n+        this.cachedQuizExerciseUpdates = hazelcastInstance.getTopic(HAZELCAST_CACHED_EXERCISE_UPDATE_TOPIC);\n+        this.cachedQuizExerciseUpdates.addMessageListener(newQuizExerciseMessage -> updateQuizExerciseLocally(newQuizExerciseMessage.getMessageObject()));\n+    }\n+\n+    /**\n+     * Configures Hazelcast for the QuizScheduleService before the HazelcastInstance is created.\n+     *\n+     * @param config the {@link Config} the QuizScheduleService-specific configuration should be added to\n+     */\n+    public static void configureHazelcast(Config config) {\n+        QuizExerciseCache.registerSerializers(config);\n+        // Pool size default 16, increased capacity (as we could have many quizzes) and default durability for now\n+        config.getScheduledExecutorConfig(Constants.HAZELCAST_QUIZ_SCHEDULER).setPoolSize(16).setCapacity(1000).setDurability(1);\n+        // Important to avoid continuous serialization and de-serialization and the implications on transient fields of QuizExerciseCache\n+        EvictionConfig evictionConfig = new EvictionConfig() //\n+                .setEvictionPolicy(EvictionPolicy.NONE);\n+        NearCacheConfig nearCacheConfig = new NearCacheConfig() //\n+                .setName(Constants.HAZELCAST_EXERCISE_CACHE + \"-local\") //\n+                .setInMemoryFormat(InMemoryFormat.OBJECT) //\n+                .setSerializeKeys(true) //\n+                .setInvalidateOnChange(true) //\n+                .setTimeToLiveSeconds(0) //\n+                .setMaxIdleSeconds(0) //\n+                .setEvictionConfig(evictionConfig) //\n+                .setCacheLocalEntries(true);\n+        config.getMapConfig(Constants.HAZELCAST_EXERCISE_CACHE).setNearCacheConfig(nearCacheConfig);\n+    }\n+\n+    @EventListener(ApplicationReadyEvent.class)\n+    public void applicationReady() {\n+        // activate Quiz Schedule Service\n+        startSchedule(5 * 1000);                          // every 5 seconds\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizExerciseService(QuizExerciseService quizExerciseService) {\n+        this.quizExerciseService = quizExerciseService;\n+    }\n+\n+    @Autowired\n+    // break the dependency cycle\n+    public void setQuizStatisticService(QuizStatisticService quizStatisticService) {\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Only for reading from QuizExerciseCache\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getReadCacheFor(Long quizExerciseId) {\n+        return cachedQuizExercises.getOrDefault(quizExerciseId, QuizExerciseCache.empty());\n+    }\n+\n+    /**\n+     * Only for the modification of transient properties, e.g. the exercise and the maps.\n+     * <p>\n+     * Creates new QuizExerciseCache if required.\n+     *\n+     * @param quizExerciseId the id of the quiz exercise, must not be null\n+     */\n+    private QuizExerciseCache getTransientWriteCacheFor(Long quizExerciseId) {\n+        var cachedQuiz = cachedQuizExercises.get(quizExerciseId);\n+        if (cachedQuiz != null)\n+            return cachedQuiz;\n+        cachedQuizExercises.lock(quizExerciseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTY2MjA1", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437566205", "createdAt": "2020-06-25T14:43:20Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTY2NDEz", "url": "https://github.com/ls1intum/Artemis/pull/1644#pullrequestreview-437566413", "createdAt": "2020-06-25T14:43:34Z", "commit": {"oid": "83e40eae6a5e9666d9e0ccbb518953521393abc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2829, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}