{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTM3NjIw", "number": 2199, "title": "Improvements to BambooService", "bodyText": "Various improvements in BambooService\nChecklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features (with a high test coverage)\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n\nMotivation and Context\nWe would like to get rid of the used external library and implement the REST requests on our own.\nThis allows for more flexibility and means less dependencies on other libraries\nDescription\n\nRe-implement a couple of REST calls between Artemis and Bamboo\nMade token authentication in BambooService mandatory\nChange secret to token for Jenkins\nNo client changes\n\nSteps for Testing on TS1 and TS2\n\nCreate a programming exercise A\nParticipate in programming exercise A and check that everything works properly\nImport programming exercise A into programming exercise B\nParticipate in programming exercise B and check that everything works properly\nDelete the programming exercise A and B\n\nTest Coverage\nI improved the test coverage for BambooService (now > 80%) and for BitbucketService (now 51%)", "createdAt": "2020-10-13T22:44:06Z", "url": "https://github.com/ls1intum/Artemis/pull/2199", "merged": true, "mergeCommit": {"oid": "0949e556fc83e6b4d93d6ad1503bc9cd94a2c285"}, "closed": true, "closedAt": "2020-10-15T14:38:39Z", "author": {"login": "krusche"}, "timelineItems": {"totalCount": 84, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQH3iKgH2gAyNTAyOTM3NjIwOmE4OWI4ZGYzNDEwYzY2MjUyZmE0NmUwZGRhMWFhNzc4NGZiN2VkOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSypexAFqTUwOTQ0MTc1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a89b8df3410c66252fa46e0dda1aa7784fb7ed96", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a89b8df3410c66252fa46e0dda1aa7784fb7ed96", "committedDate": "2020-10-07T07:30:01Z", "message": "bump version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6e5264439e40b8f21ad12e65414d164f8b2d206", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d6e5264439e40b8f21ad12e65414d164f8b2d206", "committedDate": "2020-10-07T09:26:46Z", "message": "improve course registration\n\nimprove user login\nadd course registration message option\nimprove translations and add new explantions in course creation dialog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54d6ad54916a863c53ff0fc660a7558404e69dc8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/54d6ad54916a863c53ff0fc660a7558404e69dc8", "committedDate": "2020-10-07T10:04:27Z", "message": "fix some issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "545d34efe31e539f093c751e00c0a039c9c51b15", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/545d34efe31e539f093c751e00c0a039c9c51b15", "committedDate": "2020-10-07T12:02:15Z", "message": "also allow users to register for courses without startDate or endDate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17ec63471d0d6026fedaaf21e7588965dcdfa71f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/17ec63471d0d6026fedaaf21e7588965dcdfa71f", "committedDate": "2020-10-07T12:57:26Z", "message": "use rest template interceptors for Bamboo and Bitbucket and prefer token based authentication if avilable\n\nrename secret to token for Gitlab config to be more consistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b46c8097902d464230d04a4e865900f40e3aedea", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b46c8097902d464230d04a4e865900f40e3aedea", "committedDate": "2020-10-07T13:04:02Z", "message": "improve comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a77af091379b0b2cc9c5f78a9f514fa6360a5229", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a77af091379b0b2cc9c5f78a9f514fa6360a5229", "committedDate": "2020-10-07T13:45:01Z", "message": "fix wrong config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d848984cc65d096f11a3e0f6c95aa8ebd1a2af", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/42d848984cc65d096f11a3e0f6c95aa8ebd1a2af", "committedDate": "2020-10-07T13:50:30Z", "message": "fix config issues with new authorization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b10cbd899110c17786c72337bd9553666528e7d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/3b10cbd899110c17786c72337bd9553666528e7d", "committedDate": "2020-10-07T19:02:26Z", "message": "fix javadoc issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ffb13bb5b8a58072f7c6e256b3996ac6b79c1b8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4ffb13bb5b8a58072f7c6e256b3996ac6b79c1b8", "committedDate": "2020-10-07T19:12:53Z", "message": "update dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e6219ffa8ffc8ff8204e0be860cf4d87eff565", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d1e6219ffa8ffc8ff8204e0be860cf4d87eff565", "committedDate": "2020-10-07T20:27:02Z", "message": "consistent use of \u201c in build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2465cd32bb49a4deed0342d4f4d21925a941525e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2465cd32bb49a4deed0342d4f4d21925a941525e", "committedDate": "2020-10-08T09:26:29Z", "message": "update client dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb436b940cea788a49d986223fa041ae9538dd5a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/eb436b940cea788a49d986223fa041ae9538dd5a", "committedDate": "2020-10-08T09:26:41Z", "message": "use basic auth to create projects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "723f6084a54b7ed17bcad6ec03e617ea317e5a53", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/723f6084a54b7ed17bcad6ec03e617ea317e5a53", "committedDate": "2020-10-08T18:19:26Z", "message": "move methods from bob cli to Artemis\n\nWORK IN PROGRESS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d86ad989cddd9d264291a245c8fc06a722064a9f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d86ad989cddd9d264291a245c8fc06a722064a9f", "committedDate": "2020-10-08T19:01:26Z", "message": "Merge branch 'develop' into feature/bamboo-improvements\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ea5cd75ad479049b15e5d5750bb4c9e63aada7a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8ea5cd75ad479049b15e5d5750bb4c9e63aada7a", "committedDate": "2020-10-08T19:11:13Z", "message": "WORK IN PROGRESS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797b66bc0e41b01b3d29f9311ba28524a7faed95", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/797b66bc0e41b01b3d29f9311ba28524a7faed95", "committedDate": "2020-10-08T19:11:19Z", "message": "Merge branch 'feature/improve-registration' into feature/bamboo-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffdb4f3b126ea69de7a8b5605022f13268f0a973", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ffdb4f3b126ea69de7a8b5605022f13268f0a973", "committedDate": "2020-10-08T23:43:22Z", "message": "get rid of bambooClient and bitbucketClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "621a2abb52a15b75e77f9e68826890a3da625ad0", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/621a2abb52a15b75e77f9e68826890a3da625ad0", "committedDate": "2020-10-08T23:51:21Z", "message": "fix Bamboo issue when recreating a build plan that has already existed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7995f592f0496e1db95c62d945b057f4c22efcc7", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7995f592f0496e1db95c62d945b057f4c22efcc7", "committedDate": "2020-10-10T15:18:58Z", "message": "code cleanup, cache application links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e0cdccfaf1f5c6aeefae8b0f5873e92cf062d5b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1e0cdccfaf1f5c6aeefae8b0f5873e92cf062d5b", "committedDate": "2020-10-10T15:25:12Z", "message": "comment about unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5bbf4a48fb9c7ba4022321f6b866cf9e2ccc56", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6c5bbf4a48fb9c7ba4022321f6b866cf9e2ccc56", "committedDate": "2020-10-11T13:51:33Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b5161bcc03dd682611ea17c00cd9509063c7353", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9b5161bcc03dd682611ea17c00cd9509063c7353", "committedDate": "2020-10-11T18:38:42Z", "message": "reduced network calls to Bamboo + code quality improvements + documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceb3c421130fca19db069dff3c1989d757614ffc", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ceb3c421130fca19db069dff3c1989d757614ffc", "committedDate": "2020-10-11T19:26:25Z", "message": "code improvements and edge case handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "418a4703d0b46d7a8131edd65643846dc6c4f59a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/418a4703d0b46d7a8131edd65643846dc6c4f59a", "committedDate": "2020-10-11T19:42:15Z", "message": "start fixing test case mocking errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6510477829ae091c49311cf7c0da02a3ddcf177f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6510477829ae091c49311cf7c0da02a3ddcf177f", "committedDate": "2020-10-12T09:19:07Z", "message": "further improvements of BambooService, fix test compile errors\n\nstill WORK IN PROGRESS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dc14aa202e1fec3e04850cdccee75a26e772539", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0dc14aa202e1fec3e04850cdccee75a26e772539", "committedDate": "2020-10-12T10:21:25Z", "message": "further improvements for BitbucketService and BambooService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e10a3f24389337c6a91b5b869c03f22609e73486", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e10a3f24389337c6a91b5b869c03f22609e73486", "committedDate": "2020-10-12T10:51:38Z", "message": "use fake values during testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e51bc9e0dbe9819ab5b43de0670622b1ba5db43", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9e51bc9e0dbe9819ab5b43de0670622b1ba5db43", "committedDate": "2020-10-12T11:08:52Z", "message": "use a different REST call for cloning a build plan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57cd9b80a7a38a14c032ee09bfc5c19278d3c49", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c57cd9b80a7a38a14c032ee09bfc5c19278d3c49", "committedDate": "2020-10-12T12:37:05Z", "message": "improve clone build plan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1e71ecb62661a2e9144c1633a33a6f9f07a4128", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e1e71ecb62661a2e9144c1633a33a6f9f07a4128", "committedDate": "2020-10-12T16:12:22Z", "message": "move test method into different class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76d6178fb6be9ac30b130844889320ea4400fc8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c76d6178fb6be9ac30b130844889320ea4400fc8", "committedDate": "2020-10-12T16:22:37Z", "message": "use improved REST calls for deletion of build plans and projects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8ee40f2ff34157078ebff58ab139343445aa67", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5c8ee40f2ff34157078ebff58ab139343445aa67", "committedDate": "2020-10-12T18:20:03Z", "message": "fix issue with automatically parsing build logs from bamboo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7bf4670aa10b13d925ef8ffec649f0b7229cd78", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d7bf4670aa10b13d925ef8ffec649f0b7229cd78", "committedDate": "2020-10-12T18:58:06Z", "message": "improve various Bamboo calls and mock tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd977112754552719e80bc4cc0ec48b30f36a7c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/edd977112754552719e80bc4cc0ec48b30f36a7c", "committedDate": "2020-10-12T19:13:07Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e449f31e5a2c781130b648be95588a056feb15dc", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e449f31e5a2c781130b648be95588a056feb15dc", "committedDate": "2020-10-12T19:28:07Z", "message": "fix first test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b25bfd70b7decf5e9d68ee8fb47eeb0f54da1b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/85b25bfd70b7decf5e9d68ee8fb47eeb0f54da1b", "committedDate": "2020-10-12T22:05:17Z", "message": "fix programming exercise test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77595647011647a30097ad0899720fef0b4a037f", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/77595647011647a30097ad0899720fef0b4a037f", "committedDate": "2020-10-12T22:29:08Z", "message": "fix more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41ed27e001fec00dd2b6ccfcedcc69c4c29b72d1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/41ed27e001fec00dd2b6ccfcedcc69c4c29b72d1", "committedDate": "2020-10-13T17:14:29Z", "message": "remove lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9530d1bf8daf08309418fb7023534b859963096c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9530d1bf8daf08309418fb7023534b859963096c", "committedDate": "2020-10-13T18:54:00Z", "message": "fix tests and cleanup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab79f5b092d38d91abc2f66b505f103f8b172fd", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7ab79f5b092d38d91abc2f66b505f103f8b172fd", "committedDate": "2020-10-13T18:54:13Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "468ecee34a59272dba60d458b8d2940ee94c81c2", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/468ecee34a59272dba60d458b8d2940ee94c81c2", "committedDate": "2020-10-13T21:22:22Z", "message": "fix import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94c9db645a3e99c01e0228d978c9d25bf1c18454", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/94c9db645a3e99c01e0228d978c9d25bf1c18454", "committedDate": "2020-10-13T21:35:08Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfabcf5843c496456ad2c0838fe7d2f72e1c8fc4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/dfabcf5843c496456ad2c0838fe7d2f72e1c8fc4", "committedDate": "2020-10-13T21:37:32Z", "message": "fix checkstyle, remove unused attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e595d797b53d54c0eb8a229af5249d7e187d0641", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e595d797b53d54c0eb8a229af5249d7e187d0641", "committedDate": "2020-10-13T22:29:04Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e96f7cba432c1fbabd1235ecac882439ef3a8bd", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/7e96f7cba432c1fbabd1235ecac882439ef3a8bd", "committedDate": "2020-10-13T22:44:22Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjEzNDQ1", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-508213445", "createdAt": "2020-10-14T10:36:18Z", "commit": {"oid": "7e96f7cba432c1fbabd1235ecac882439ef3a8bd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69a51635a4982b8ac22b39a5931e38a5580863a3", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/69a51635a4982b8ac22b39a5931e38a5580863a3", "committedDate": "2020-10-14T18:18:03Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78b5cc815a025c1bd31330bc9a1b693b3229263", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d78b5cc815a025c1bd31330bc9a1b693b3229263", "committedDate": "2020-10-14T22:27:57Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e26b4f812a6c7700e9aab5ea6784f747f63cab56", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e26b4f812a6c7700e9aab5ea6784f747f63cab56", "committedDate": "2020-10-14T22:53:56Z", "message": "add additional tests and improve tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6858035377675aec9fce8e7bb73c18d657a95c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/cf6858035377675aec9fce8e7bb73c18d657a95c", "committedDate": "2020-10-14T23:02:58Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements\n\n# Conflicts:\n#\tbuild.gradle\n#\tpackage.json\n#\tsrc/main/webapp/app/course/manage/course-update.component.html\n#\tsrc/main/webapp/app/course/manage/course-update.component.ts\n#\tsrc/main/webapp/app/home/home.component.html\n#\tsrc/main/webapp/app/home/home.component.ts\n#\tsrc/main/webapp/app/overview/course-registration-selector/course-registration-selector.component.ts\n#\tsrc/main/webapp/app/shared/layouts/profiles/profile-info.model.ts\n#\tsrc/main/webapp/app/shared/layouts/profiles/profile.service.ts\n#\tyarn.lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f095ba9daf843d4267cd417d3969768fea097486", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f095ba9daf843d4267cd417d3969768fea097486", "committedDate": "2020-10-14T23:32:00Z", "message": "increase test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15449d86ebecf5a7076084a43680707f12c59176", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/15449d86ebecf5a7076084a43680707f12c59176", "committedDate": "2020-10-15T09:14:30Z", "message": "improve tests and fix codacy warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c94f623c0545f35e036c2aeeaa5d18d803c960ce", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c94f623c0545f35e036c2aeeaa5d18d803c960ce", "committedDate": "2020-10-15T10:19:10Z", "message": "fix test and improve error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae36d532d7a740c8baf0070e7e349379bfb7903", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0ae36d532d7a740c8baf0070e7e349379bfb7903", "committedDate": "2020-10-15T10:41:01Z", "message": "bamboo token is now mandatory and not optional any more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f687f6109981078405c413f97277ccb8ebe64465", "committedDate": "2020-10-15T11:10:41Z", "message": "Merge branch 'develop' into feature/continuous-integration-improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5Mzk5", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269399", "createdAt": "2020-10-15T11:15:26Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyNlrOHiC1Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyNlrOHiC1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk3MA==", "bodyText": "Codacy found an issue: The instance method name 'createProgrammingExercise_programmingLanguage_validExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459970", "createdAt": "2020-10-15T11:15:26Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -137,14 +135,33 @@ public void tearDown() throws IOException {\n         studentTeamRepo.resetLocalRepo();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n+        exercise.setSequentialTestRuns(true);\n+        mockConnectorRequestsForSetup(exercise);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+\n     @ParameterizedTest\n     @EnumSource(ExerciseMode.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void createProgrammingExercise_validExercise_created(ExerciseMode mode) throws Exception {\n+    public void createProgrammingExercise_mode_validExercise_created(ExerciseMode mode) throws Exception {\n         exercise.setMode(mode);\n         mockConnectorRequestsForSetup(exercise);\n-        final var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_programmingLanguage_validExercise_created(ProgrammingLanguage language) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDA5", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269409", "createdAt": "2020-10-15T11:15:27Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyN1rOHiC1Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyN1rOHiC1Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk3NA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459974", "createdAt": "2020-10-15T11:15:27Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDIx", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269421", "createdAt": "2020-10-15T11:15:28Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOFrOHiC1FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOFrOHiC1FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk4OA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459988", "createdAt": "2020-10-15T11:15:28Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -222,16 +201,61 @@ public void triggerBuild(ProgrammingExerciseParticipation participation) throws\n \n     @Override\n     public boolean isBuildPlanEnabled(final String projectKey, final String planId) {\n-        final var headers = HeaderUtil.createAuthorization(bambooUser, bambooPassword);\n-        headers.setAccept(List.of(MediaType.APPLICATION_JSON));\n-        final var entity = new HttpEntity<>(null, headers);\n-        final var planInfo = restTemplate.exchange(bambooServerUrl + \"/rest/api/latest/plan/\" + planId, HttpMethod.GET, entity, Map.class, new HashMap<>()).getBody();\n-        return planInfo != null && planInfo.containsKey(\"enabled\") && ((boolean) planInfo.get(\"enabled\"));\n+        final var buildPlan = getBuildPlan(planId, false, true);\n+        return buildPlan != null && buildPlan.isEnabled();\n     }\n \n     @Override\n     public void deleteBuildPlan(String projectKey, String buildPlanId) {\n-        deletePlan(buildPlanId);\n+\n+        var buildPlan = getBuildPlan(buildPlanId, false, false);\n+        if (buildPlan == null) {\n+            log.error(\"Cannot delete \" + buildPlanId + \", because it does not exist!\");\n+            return;\n+        }\n+\n+        // NOTE: we cannot use official the REST API, e.g. restTemplate.delete(bambooServerUrl + \"/rest/api/latest/plan/\" + buildPlanId) here,\n+        // because then the build plan is not deleted directly and subsequent calls to create build plans with the same id might fail\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"selectedBuilds\", buildPlanId);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+\n+        String requestUrl = bambooServerUrl + \"/admin/deleteBuilds.action\";\n+        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParams(parameters);\n+        // TODO: in order to do error handling, we have to read the return value of this REST call\n+        var response = restTemplate.exchange(builder.build().toUri(), HttpMethod.POST, null, String.class);\n+    }\n+\n+    /**\n+     * NOTE: the REST call in this method fails silently with a 404 in case all build plans have already been deleted before\n+     * @param projectKey the project which build plans should be retrieved\n+     * @return a list of build plans\n+     */\n+    private List<BambooBuildPlanDTO> getBuildPlans(String projectKey) {\n+\n+        String requestUrl = bambooServerUrl + \"/rest/api/latest/project/\" + projectKey;\n+        // we use 5000 just in case of exercises with really really many students ;-)\n+        try {\n+            UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParam(\"expand\", \"plans\").queryParam(\"max-results\", 5000);\n+            var response = restTemplate.exchange(builder.build().toUri(), HttpMethod.GET, null, BambooProjectDTO.class);\n+\n+            if (response.getBody() != null && response.getBody().getPlans() != null) {\n+                return response.getBody().getPlans().getPlan();\n+            }\n+        }\n+        catch (HttpClientErrorException ex) {\n+            if (HttpStatus.NOT_FOUND.equals(ex.getStatusCode())) {\n+                // return an empty list silently (without log), because this is the typical case when deleting projects\n+                return List.of();\n+            }\n+            log.warn(ex.getMessage());\n+        }\n+        catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDI5", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269429", "createdAt": "2020-10-15T11:15:29Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOVrOHiC1Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNToyOVrOHiC1Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTk5OA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505459998", "createdAt": "2020-10-15T11:15:29Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {\n+        mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        // we only support one very specific case here\n+        parameters.add(\"repositoryTrigger\", repository);\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"triggerId\", \"-1\");\n+        parameters.add(\"createTriggerKey\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stashTrigger\");\n+        parameters.add(\"userDescription\", null);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/createChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n+    }\n \n-        return mockUpdatePlanRepository(exercise, username, bambooRepoName, bitbucketRepoName, List.of());\n+    public void mockDeleteTrigger(String buildPlanKey, Long id) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 235}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDQ3", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269447", "createdAt": "2020-10-15T11:15:31Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMVrOHiC1Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMVrOHiC1Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAxMA==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'ignored'.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460010", "createdAt": "2020-10-15T11:15:31Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "diffHunk": "@@ -109,23 +112,97 @@\n     @Autowired\n     protected BitbucketRequestMockProvider bitbucketRequestMockProvider;\n \n+    @Autowired\n+    protected DatabaseUtilService database;\n+\n+    @Autowired\n+    protected RequestUtilService request;\n+\n+    /**\n+     * used to mimic the caching behavior of BambooService\n+     */\n+    private final List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n+\n     @AfterEach\n     public void resetSpyBeans() {\n         Mockito.reset(ltiService, continuousIntegrationService, versionControlService, bambooServer, gitService, groupNotificationService, websocketMessagingService,\n                 plantUmlService, messagingTemplate, programmingSubmissionService, examAccessService, instanceMessageSendService, programmingExerciseScheduleService,\n                 programmingExerciseParticipationServiceSpy);\n     }\n \n-    protected List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws Exception {\n+    protected List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n         final var verifications = new LinkedList<Verifiable>();\n         bitbucketRequestMockProvider.mockCopyRepositoryForParticipation(exercise, username);\n         bitbucketRequestMockProvider.mockConfigureRepository(exercise, username, users);\n-        verifications.addAll(bambooRequestMockProvider.mockCopyBuildPlanForParticipation(exercise, username));\n-        verifications.addAll(bambooRequestMockProvider.mockUpdatePlanRepositoryForParticipation(exercise, username));\n+        bambooRequestMockProvider.mockCopyBuildPlanForParticipation(exercise, username);\n+        mockUpdatePlanRepositoryForParticipation(exercise, username);\n+        bambooRequestMockProvider.mockEnablePlan(exercise.getProjectKey(), username);\n         bitbucketRequestMockProvider.mockAddWebHooks(exercise);\n         return verifications;\n     }\n \n+    protected void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        final var projectKey = exercise.getProjectKey();\n+        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+\n+        mockUpdatePlanRepository(exercise, username, ASSIGNMENT_REPO_NAME, bitbucketRepoName, List.of());\n+    }\n+\n+    private Optional<ApplicationLinksDTO.ApplicationLinkDTO> findCachedLinkForUrl(String url) {\n+        return cachedApplicationLinks.stream().filter(link -> url.equalsIgnoreCase(link.getRpcUrl())).findFirst();\n+    }\n+\n+    private void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        final var projectKey = exercise.getProjectKey();\n+        final var buildPlanKey = (projectKey + \"-\" + planName).toUpperCase();\n+\n+        final var bambooRepositoryAssignment = new BambooRepositoryDTO(296200357L, ASSIGNMENT_REPO_NAME);\n+        final var bambooRepositoryTests = new BambooRepositoryDTO(296200356L, TEST_REPO_NAME);\n+        final var bitbucketRepository = new BitbucketRepositoryDTO(\"id\", bitbucketRepoName, projectKey, \"ssh:cloneUrl\");\n+\n+        bambooRequestMockProvider.mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        bitbucketRequestMockProvider.mockGetBitbucketRepository(exercise, bitbucketRepoName, bitbucketRepository);\n+\n+        var applicationLinksToBeReturned = bambooRequestMockProvider.createApplicationLink();\n+        // support caching for multiple tests (reusing the same continuousIntegrationUpdateService)\n+        var url = applicationLinksToBeReturned.getApplicationLinks().get(0).getRpcUrl();\n+        var applicationLink = continuousIntegrationUpdateService.findCachedLinkForUrl(url);\n+        if (applicationLink.isEmpty()) {\n+            // and also support caching for multiple calls in the same test (then continuousIntegrationUpdateService is not yet caching during the mock initialization)\n+            applicationLink = findCachedLinkForUrl(url);\n+\n+            if (applicationLink.isEmpty()) {\n+                // no cached application link is available\n+                bambooRequestMockProvider.mockGetApplicationLinks(applicationLinksToBeReturned);\n+                applicationLink = Optional.of(applicationLinksToBeReturned.getApplicationLinks().get(0));\n+                cachedApplicationLinks.add(applicationLink.get());\n+            }\n+        }\n+\n+        if (ASSIGNMENT_REPO_NAME.equals(bambooRepoName)) {\n+            bambooRequestMockProvider.mockUpdateRepository(buildPlanKey, bambooRepositoryAssignment, bitbucketRepository, applicationLink.get());\n+        }\n+        else {\n+            bambooRequestMockProvider.mockUpdateRepository(buildPlanKey, bambooRepositoryTests, bitbucketRepository, applicationLink.get());\n+        }\n+\n+        if (!triggeredBy.isEmpty()) {\n+            // in case there are triggers\n+            List<BambooTriggerDTO> triggerList = bambooRequestMockProvider.mockGetTriggerList(buildPlanKey);\n+\n+            for (var trigger : triggerList) {\n+                bambooRequestMockProvider.mockDeleteTrigger(buildPlanKey, trigger.getId());\n+            }\n+\n+            for (var ignored : triggeredBy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDU3", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269457", "createdAt": "2020-10-15T11:15:32Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMlrOHiC1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozMlrOHiC1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAxNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460017", "createdAt": "2020-10-15T11:15:32Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/service/BitbucketServiceTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+\n+public class BitbucketServiceTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        bitbucketRequestMockProvider.enableMockingOfRequests();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+        bitbucketRequestMockProvider.reset();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\")\n+    public void testHealthRunning() throws URISyntaxException, JsonProcessingException {\n+        bitbucketRequestMockProvider.mockHealth(\"RUNNING\", HttpStatus.OK);\n+        var health = versionControlService.health();\n+        assertThat(health.getAdditionalInfo().get(\"url\")).isEqualTo(bitbucketServerUrl);\n+        assertThat(health.isUp()).isEqualTo(true);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\")\n+    public void testHealthNotRunning() throws URISyntaxException, JsonProcessingException {\n+        bitbucketRequestMockProvider.mockHealth(\"PAUSED\", HttpStatus.OK);\n+        var health = versionControlService.health();\n+        assertThat(health.getAdditionalInfo().get(\"url\")).isEqualTo(bitbucketServerUrl);\n+        assertThat(health.isUp()).isEqualTo(false);\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDcy", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269472", "createdAt": "2020-10-15T11:15:33Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozM1rOHiC1Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozM1rOHiC1Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAzMA==", "bodyText": "Codacy found an issue: Expected @param tag for 'buildLogs'.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460030", "createdAt": "2020-10-15T11:15:33Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -268,18 +288,16 @@ public void mockRetrieveEmptyArtifactPage() throws URISyntaxException, JsonProce\n      *\n      * @param planKey the build plan id\n      */\n-    public void mockFetchBuildLogs(String planKey) throws URISyntaxException, JsonProcessingException, MalformedURLException {\n-        var newDate = new Date().getTime();\n-        Map firstLogEntry = Map.of(\"log\", \"java.lang.AssertionError: BubbleSort does not sort correctly\", \"date\", newDate);\n-        Map response = Map.of(\"logEntries\", Map.of(\"logEntry\", List.of(firstLogEntry)));\n-        final var uri = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/result\").pathSegment(planKey.toUpperCase() + \"-JOB1\")\n+    public void mockGetBuildLogs(String planKey, List<BambooBuildResultDTO.BambooBuildLogEntryDTO> buildLogs) throws URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 372}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDgw", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269480", "createdAt": "2020-10-15T11:15:34Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNFrOHiC1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNFrOHiC1RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDAzNg==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460036", "createdAt": "2020-10-15T11:15:34Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooTriggerDTO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooTriggerDTO {\n+\n+    private Long id;\n+\n+    private String name;\n+\n+    private String description;\n+\n+    private boolean enabled = true;\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public BambooTriggerDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NDkz", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269493", "createdAt": "2020-10-15T11:15:35Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNVrOHiC1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNVrOHiC1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA0Nw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460047", "createdAt": "2020-10-15T11:15:35Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {\n+        mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        // we only support one very specific case here\n+        parameters.add(\"repositoryTrigger\", repository);\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"triggerId\", \"-1\");\n+        parameters.add(\"createTriggerKey\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stashTrigger\");\n+        parameters.add(\"userDescription\", null);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/createChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n+    }\n \n-        return mockUpdatePlanRepository(exercise, username, bambooRepoName, bitbucketRepoName, List.of());\n+    public void mockDeleteTrigger(String buildPlanKey, Long id) throws URISyntaxException {\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"triggerId\", Long.toString(id));\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"planKey\", buildPlanKey);\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/deleteChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n-        final var projectKey = exercise.getProjectKey();\n-        final var planKey = (projectKey + \"-\" + planName).toUpperCase();\n-        final var repositoryResponse = new RemoteRepository(null, 12345678L, \"testName\");\n-\n-        doReturn(repositoryResponse).when(repositoryHelper).getRemoteRepository(bambooRepoName, planKey, false);\n-        verifications.add(() -> verify(repositoryHelper, times(1)).getRemoteRepository(bambooRepoName, planKey, false));\n-\n-        doNothing().when(bambooBuildPlanUpdateProvider).updateRepository(any(), anyString(), anyString(), anyString());\n-\n-        if (!triggeredBy.isEmpty()) {\n-            // Bamboo specific format for the used CLI dependency. Nothing we can improve here\n-            final var oldTriggers = \"foo,123,artemis\\nbar,456,artemis\";\n-            doReturn(oldTriggers).when(triggerHelper).getTriggerList(anyString(), isNull(), isNull(), anyInt(), any());\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            verifications.add(() -> {\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            });\n-            for (final var repo : triggeredBy) {\n-                doReturn(\"foobar\").when(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n-                verifications.add(() -> verify(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false));\n-            }\n-        }\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 273}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTAx", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269501", "createdAt": "2020-10-15T11:15:36Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNlrOHiC1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozNlrOHiC1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA1Mw==", "bodyText": "Codacy found an issue: Avoid catching NullPointerException; consider removing the cause of the NPE.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460053", "createdAt": "2020-10-15T11:15:36Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -181,17 +171,8 @@ public void performEmptySetupCommit(ProgrammingExerciseParticipation participati\n                     }\n                 }\n             }\n-            catch (GitAPIException ex) {\n-                log.error(\"Git error while doing empty commit\", ex);\n-            }\n-            catch (IOException ex) {\n-                log.error(\"IOError while doing empty commit\", ex);\n-            }\n-            catch (InterruptedException ex) {\n-                log.error(\"InterruptedException while doing empty commit\", ex);\n-            }\n-            catch (NullPointerException ex) {\n-                log.error(\"NullPointerException while doing empty commit\", ex);\n+            catch (GitAPIException | IOException | InterruptedException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTEy", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269512", "createdAt": "2020-10-15T11:15:37Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozN1rOHiC1YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozN1rOHiC1YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA2NA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460064", "createdAt": "2020-10-15T11:15:37Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {\n+        final var uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/plan/\").pathSegment(buildPlanId).build().toUri();\n+        if (buildPlanToBeReturned != null) {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n+                    .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(buildPlanToBeReturned)));\n+        }\n+        else {\n+            mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        }\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var projectKey = exercise.getProjectKey();\n-        final var bambooRepoName = Constants.ASSIGNMENT_REPO_NAME;\n-        final var bitbucketRepoName = projectKey.toLowerCase() + \"-\" + username;\n+    public void mockAddTrigger(String buildPlanKey, String repository) throws URISyntaxException, IOException {\n+        mockGetBuildPlanRepositoryList(buildPlanKey);\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        // we only support one very specific case here\n+        parameters.add(\"repositoryTrigger\", repository);\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"triggerId\", \"-1\");\n+        parameters.add(\"createTriggerKey\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stashTrigger\");\n+        parameters.add(\"userDescription\", null);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/createChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n+    }\n \n-        return mockUpdatePlanRepository(exercise, username, bambooRepoName, bitbucketRepoName, List.of());\n+    public void mockDeleteTrigger(String buildPlanKey, Long id) throws URISyntaxException {\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"triggerId\", Long.toString(id));\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"decorator\", \"nothing\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"planKey\", buildPlanKey);\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/deleteChainTrigger.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n     }\n \n-    public List<Verifiable> mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n-            throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n-        final var projectKey = exercise.getProjectKey();\n-        final var planKey = (projectKey + \"-\" + planName).toUpperCase();\n-        final var repositoryResponse = new RemoteRepository(null, 12345678L, \"testName\");\n-\n-        doReturn(repositoryResponse).when(repositoryHelper).getRemoteRepository(bambooRepoName, planKey, false);\n-        verifications.add(() -> verify(repositoryHelper, times(1)).getRemoteRepository(bambooRepoName, planKey, false));\n-\n-        doNothing().when(bambooBuildPlanUpdateProvider).updateRepository(any(), anyString(), anyString(), anyString());\n-\n-        if (!triggeredBy.isEmpty()) {\n-            // Bamboo specific format for the used CLI dependency. Nothing we can improve here\n-            final var oldTriggers = \"foo,123,artemis\\nbar,456,artemis\";\n-            doReturn(oldTriggers).when(triggerHelper).getTriggerList(anyString(), isNull(), isNull(), anyInt(), any());\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-            doReturn(\"foobar\").when(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            verifications.add(() -> {\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 123L, null, false);\n-                verify(triggerHelper).removeTrigger(planKey, null, null, 456L, null, false);\n-            });\n-            for (final var repo : triggeredBy) {\n-                doReturn(\"foobar\").when(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n-                verifications.add(() -> verify(triggerHelper).addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false));\n-            }\n-        }\n+    @NotNull\n+    public List<BambooTriggerDTO> mockGetTriggerList(String buildPlanKey) throws IOException, URISyntaxException {\n+        var triggerList = List.of(new BambooTriggerDTO(1L, \"foo\", \"artemis\"));\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"buildKey\", buildPlanKey);\n+        final var triggerListHtmlResponse = loadFileFromResources(\"test-data/bamboo-response/build-plan-trigger-list-response.html\");\n+        URI uri = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/chain/admin/config/editChainTriggers.action\").queryParams(parameters).build().toUri();\n+        mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.OK).contentType(MediaType.TEXT_HTML).body(triggerListHtmlResponse));\n+        return triggerList;\n+    }\n \n-        return verifications;\n+    public void mockUpdateRepository(String buildPlanKey, BambooRepositoryDTO bambooRepository, BitbucketRepositoryDTO bitbucketRepository,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 286}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTIz", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269523", "createdAt": "2020-10-15T11:15:38Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOFrOHiC1aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOFrOHiC1aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA3NQ==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'response'.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460075", "createdAt": "2020-10-15T11:15:38Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -222,16 +201,61 @@ public void triggerBuild(ProgrammingExerciseParticipation participation) throws\n \n     @Override\n     public boolean isBuildPlanEnabled(final String projectKey, final String planId) {\n-        final var headers = HeaderUtil.createAuthorization(bambooUser, bambooPassword);\n-        headers.setAccept(List.of(MediaType.APPLICATION_JSON));\n-        final var entity = new HttpEntity<>(null, headers);\n-        final var planInfo = restTemplate.exchange(bambooServerUrl + \"/rest/api/latest/plan/\" + planId, HttpMethod.GET, entity, Map.class, new HashMap<>()).getBody();\n-        return planInfo != null && planInfo.containsKey(\"enabled\") && ((boolean) planInfo.get(\"enabled\"));\n+        final var buildPlan = getBuildPlan(planId, false, true);\n+        return buildPlan != null && buildPlan.isEnabled();\n     }\n \n     @Override\n     public void deleteBuildPlan(String projectKey, String buildPlanId) {\n-        deletePlan(buildPlanId);\n+\n+        var buildPlan = getBuildPlan(buildPlanId, false, false);\n+        if (buildPlan == null) {\n+            log.error(\"Cannot delete \" + buildPlanId + \", because it does not exist!\");\n+            return;\n+        }\n+\n+        // NOTE: we cannot use official the REST API, e.g. restTemplate.delete(bambooServerUrl + \"/rest/api/latest/plan/\" + buildPlanId) here,\n+        // because then the build plan is not deleted directly and subsequent calls to create build plans with the same id might fail\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"selectedBuilds\", buildPlanId);\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+\n+        String requestUrl = bambooServerUrl + \"/admin/deleteBuilds.action\";\n+        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParams(parameters);\n+        // TODO: in order to do error handling, we have to read the return value of this REST call\n+        var response = restTemplate.exchange(builder.build().toUri(), HttpMethod.POST, null, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 178}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTM0", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269534", "createdAt": "2020-10-15T11:15:39Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOVrOHiC1eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTozOVrOHiC1eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDA5MA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460090", "createdAt": "2020-10-15T11:15:39Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -1,106 +1,343 @@\n package de.tum.in.www1.artemis.service.connectors;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Profile;\n+import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-\n-import com.appfire.bamboo.cli.BambooClient;\n-import com.appfire.common.cli.CliClient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n import de.tum.in.www1.artemis.config.Constants;\n import de.tum.in.www1.artemis.exception.BambooException;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.ApplicationLinksDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooRepositoryDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooTriggerDTO;\n+import de.tum.in.www1.artemis.service.connectors.bitbucket.dto.BitbucketRepositoryDTO;\n \n @Service\n // Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n // this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL bambooServerUrl;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n     private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n \n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n-    private final BambooClient bambooClient;\n+    private final RestTemplate bambooRestTemplate;\n+\n+    private final RestTemplate bitbucketRestTemplate;\n \n-    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+    private List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n \n-    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n-        this.bambooClient = bambooClient;\n-        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    public BitbucketBambooUpdateService(@Qualifier(\"bambooRestTemplate\") RestTemplate bambooRestTemplate, @Qualifier(\"bitbucketRestTemplate\") RestTemplate bitbucketRestTemplate) {\n+        this.bambooRestTemplate = bambooRestTemplate;\n+        this.bitbucketRestTemplate = bitbucketRestTemplate;\n     }\n \n     @Override\n-    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n-            Optional<List<String>> triggeredBy) {\n+    public void updatePlanRepository(String bambooProject, String buildPlanKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> optionalTriggeredByRepositories) {\n         try {\n-            log.debug(\"Update plan repository for build plan \" + planKey);\n-            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n-            // Workaround for old exercises which used a different repositoryName\n-            if (bambooRemoteRepository == null) {\n-                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(OLD_ASSIGNMENT_REPO_NAME, planKey, false);\n-                if (bambooRemoteRepository == null) {\n-                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n-                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n-                }\n+            log.debug(\"Update plan repository for build plan \" + buildPlanKey);\n+            BambooRepositoryDTO bambooRepository = findBambooRepository(bambooRepositoryName, OLD_ASSIGNMENT_REPO_NAME, buildPlanKey);\n+            if (bambooRepository == null) {\n+                throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + buildPlanKey\n+                        + \" to the student repository : Could not find assignment nor Assignment repository\");\n             }\n \n-            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+            updateBambooPlanRepository(bambooRepository, bitbucketRepository, bitbucketProject, buildPlanKey);\n \n             // Overwrite triggers if needed, incl workaround for different repo names, triggered by is present means that the exercise (the BASE build plan) is imported from a\n             // previous exercise\n-            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n-                triggeredBy = Optional\n-                        .of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n+            if (optionalTriggeredByRepositories.isPresent() && bambooRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n+                optionalTriggeredByRepositories = Optional.of(optionalTriggeredByRepositories.get().stream()\n+                        .map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n             }\n-            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, repoTriggers));\n+            optionalTriggeredByRepositories.ifPresent(triggeredByRepositories -> overwriteTriggers(buildPlanKey, triggeredByRepositories));\n+\n+            log.info(\"Update plan repository for build plan \" + buildPlanKey + \" was successful\");\n+        }\n+        catch (Exception e) {\n+            throw new BambooException(\n+                    \"Something went wrong while updating the template repository of the build plan \" + buildPlanKey + \" to the student repository : \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Update the build plan repository using the cli plugin. This is e.g. invoked, when a student starts a programming exercise.\n+     * Then the build plan (which was cloned before) needs to be updated to work with the student repository\n+     *\n+     * @param bambooRepository the bamboo repository which was obtained before\n+     * @param bitbucketRepositoryName the name of the new bitbucket repository\n+     * @param bitbucketProjectKey the key of the corresponding bitbucket project\n+     * @param buildPlanKey the complete name of the plan\n+     */\n+    private void updateBambooPlanRepository(@Nonnull BambooRepositoryDTO bambooRepository, String bitbucketRepositoryName, String bitbucketProjectKey, String buildPlanKey) {\n+\n+        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();\n+        parameters.add(\"planKey\", buildPlanKey);\n+        parameters.add(\"selectedRepository\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stash-rep\");\n+        // IMPORTANT: Don't change the name of the repo! We depend on the naming (assignment, tests) in some other parts of the application\n+        parameters.add(\"repositoryName\", bambooRepository.getName());\n+        parameters.add(\"repositoryId\", Long.toString(bambooRepository.getId()));\n+        parameters.add(\"confirm\", \"true\");\n+        parameters.add(\"save\", \"Save repository\");\n+        parameters.add(\"bamboo.successReturnMode\", \"json\");\n+        parameters.add(\"repository.stash.branch\", \"master\");\n+\n+        BitbucketRepositoryDTO bitbucketRepository = getBitbucketRepository(bitbucketProjectKey, bitbucketRepositoryName);\n+        parameters.add(\"repository.stash.repositoryId\", bitbucketRepository.getId());\n+        parameters.add(\"repository.stash.repositorySlug\", bitbucketRepository.getSlug());\n+        parameters.add(\"repository.stash.projectKey\", bitbucketRepository.getProject().getKey());\n+        parameters.add(\"repository.stash.repositoryUrl\", bitbucketRepository.getCloneSshUrl());\n+\n+        Optional<ApplicationLinksDTO.ApplicationLinkDTO> applicationLink = getApplicationLink(bitbucketServerUrl.toString());\n+        applicationLink.ifPresent(link -> parameters.add(\"repository.stash.server\", link.getId()));\n+\n+        try {\n+            String requestUrl = bambooServerUrl + \"/chain/admin/config/updateRepository.action\";\n+            UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(requestUrl).queryParams(parameters);\n+            bambooRestTemplate.exchange(builder.build().toUri(), HttpMethod.POST, null, Void.class);\n+        }\n+        catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTQ3", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269547", "createdAt": "2020-10-15T11:15:40Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MFrOHiC1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MFrOHiC1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEwMg==", "bodyText": "Codacy found an issue: The instance method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460102", "createdAt": "2020-10-15T11:15:40Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -194,17 +211,22 @@ public void createProgrammingExerciseForExam_validExercise_created() throws Exce\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n-    @Test\n+    @ParameterizedTest\n+    @EnumSource(ProgrammingLanguage.class)\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void importExercise_created() throws Exception {\n+    public void importExercise_created(ProgrammingLanguage programmingLanguage) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTYz", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269563", "createdAt": "2020-10-15T11:15:41Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MVrOHiC1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MVrOHiC1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDExNQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460115", "createdAt": "2020-10-15T11:15:41Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bamboo/BambooRequestMockProvider.java", "diffHunk": "@@ -122,111 +91,164 @@ public void mockProjectKeyExists(ProgrammingExercise exercise) {\n      *\n      * @param exercise the programming exercise that might already exist\n      * @param exists   whether the programming exercise with the same title exists\n-     * @throws IOException\n-     * @throws URISyntaxException\n+     * @throws IOException an IO exception when reading test files\n+     * @throws URISyntaxException exceptions related to URI handling in test REST calls\n      */\n     public void mockCheckIfProjectExists(ProgrammingExercise exercise, final boolean exists) throws IOException, URISyntaxException {\n         final var projectKey = exercise.getProjectKey();\n         final var projectName = exercise.getProjectName();\n-        final var bambooSearchDTO = new BambooProjectSearchDTO();\n-        final var searchResult = new BambooProjectSearchDTO.SearchResultDTO();\n-        final var foundProject = new BambooProjectDTO();\n+        final var bambooSearchDTO = new BambooProjectsSearchDTO();\n+        final var searchResult = new BambooProjectsSearchDTO.SearchResultDTO();\n+        final var foundProject = new BambooProjectSearchDTO();\n         foundProject.setProjectName(exercise.getProjectName() + (exists ? \"\" : \"abc\"));\n         searchResult.setSearchEntity(foundProject);\n         bambooSearchDTO.setSize(1);\n         bambooSearchDTO.setSearchResults(List.of(searchResult));\n \n-        mockServer.expect(ExpectedCount.once(), requestTo(BAMBOO_SERVER_URL + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET))\n-                .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-        final var projectSearchPath = UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n-        mockServer.expect(ExpectedCount.once(), requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n+        mockServer.expect(requestTo(bambooServerUrl + \"/rest/api/latest/project/\" + projectKey)).andExpect(method(HttpMethod.GET)).andRespond(withStatus(HttpStatus.NOT_FOUND));\n+        final var projectSearchPath = UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/search/projects\").queryParam(\"searchTerm\", projectName);\n+        mockServer.expect(requestTo(projectSearchPath.build().toUri())).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(HttpStatus.OK).body(mapper.writeValueAsString(bambooSearchDTO)).contentType(MediaType.APPLICATION_JSON));\n     }\n \n     public void mockRemoveAllDefaultProjectPermissions(ProgrammingExercise exercise) {\n         final var projectKey = exercise.getProjectKey();\n         List.of(\"ANONYMOUS\", \"LOGGED_IN\").stream().map(role -> {\n             try {\n-                return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\")\n-                        .pathSegment(role).build().toUri();\n+                return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/roles/\").pathSegment(role)\n+                        .build().toUri();\n             }\n             catch (URISyntaxException e) {\n                 throw new AssertionError(\"Should be able to build URIs for Bamboo roles in mock setup\");\n             }\n-        }).forEach(rolePath -> mockServer.expect(ExpectedCount.once(), requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n+        }).forEach(rolePath -> mockServer.expect(requestTo(rolePath)).andExpect(method(HttpMethod.DELETE)).andRespond(withStatus(HttpStatus.NO_CONTENT)));\n     }\n \n     public void mockGiveProjectPermissions(ProgrammingExercise exercise) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n \n         final var instructorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getInstructorGroupName());\n-        mockServer.expect(ExpectedCount.once(), requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n+        mockServer.expect(requestTo(instructorURI)).andExpect(method(HttpMethod.PUT))\n                 .andExpect(content().json(mapper.writeValueAsString(List.of(\"CREATE\", \"READ\", \"ADMINISTRATION\")))).andRespond(withStatus(HttpStatus.NO_CONTENT));\n \n         if (exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName() != null) {\n             final var tutorURI = buildGivePermissionsURIFor(projectKey, exercise.getCourseViaExerciseGroupOrCourseMember().getTeachingAssistantGroupName());\n-            mockServer.expect(ExpectedCount.once(), requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n+            mockServer.expect(requestTo(tutorURI)).andExpect(method(HttpMethod.PUT)).andExpect(content().json(mapper.writeValueAsString(List.of(\"READ\"))))\n                     .andRespond(withStatus(HttpStatus.NO_CONTENT));\n         }\n     }\n \n     private URI buildGivePermissionsURIFor(String projectKey, String groupName) throws URISyntaxException {\n-        return UriComponentsBuilder.fromUri(BAMBOO_SERVER_URL.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n+        return UriComponentsBuilder.fromUri(bambooServerUrl.toURI()).path(\"/rest/api/latest/permissions/project/\").pathSegment(projectKey).path(\"/groups/\").pathSegment(groupName)\n                 .build().toUri();\n     }\n \n-    public List<Verifiable> mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws CliClient.RemoteRestException, CliClient.ClientException {\n-        final var verifications = new LinkedList<Verifiable>();\n+    public void mockCopyBuildPlanForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, JsonProcessingException {\n         final var projectKey = exercise.getProjectKey();\n         final var targetPlanName = username.toUpperCase();\n-        final var targetPlanKey = projectKey + \"-\" + targetPlanName;\n-        final var sourcePlanKey = projectKey + \"-\" + BuildPlanType.TEMPLATE.getName();\n-        final var buildProjectName = exercise.getCourseViaExerciseGroupOrCourseMember().getShortName().toUpperCase() + \" \" + exercise.getTitle();\n+        mockCopyBuildPlan(projectKey, BuildPlanType.TEMPLATE.getName(), projectKey, targetPlanName, true);\n+    }\n \n-        when(planHelper.clonePlan(anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean())).thenReturn(\"success\");\n-        verifications.add((() -> verify(planHelper, times(1)).clonePlan(sourcePlanKey, targetPlanKey, targetPlanName, \"\", buildProjectName, true)));\n+    public void mockBuildPlanExists(final String buildPlanId, final boolean exists) throws URISyntaxException, JsonProcessingException {\n+        if (exists) {\n+            mockGetBuildPlan(buildPlanId, new BambooBuildPlanDTO(buildPlanId));\n+        }\n+        else {\n+            mockGetBuildPlan(buildPlanId, null);\n+        }\n+    }\n \n-        return verifications;\n+    public void mockGetBuildPlan(String buildPlanId, BambooBuildPlanDTO buildPlanToBeReturned) throws URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTcz", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269573", "createdAt": "2020-10-15T11:15:42Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MlrOHiC1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0MlrOHiC1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEyMg==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460122", "createdAt": "2020-10-15T11:15:42Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooBuildResultDTO {\n+\n+    BambooBuildLogEntriesDTO logEntries;\n+\n+    public BambooBuildLogEntriesDTO getLogEntries() {\n+        return logEntries;\n+    }\n+\n+    public void setLogEntries(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    public BambooBuildResultDTO() {\n+    }\n+\n+    public BambooBuildResultDTO(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static final class BambooBuildLogEntriesDTO {\n+\n+        List<BambooBuildLogEntryDTO> logEntry = new ArrayList<>();\n+\n+        public BambooBuildLogEntriesDTO() {\n+        }\n+\n+        public BambooBuildLogEntriesDTO(List<BambooBuildLogEntryDTO> logEntry) {\n+            this.logEntry = logEntry;\n+        }\n+\n+        public List<BambooBuildLogEntryDTO> getLogEntry() {\n+            return logEntry;\n+        }\n+\n+        public void setLogEntry(List<BambooBuildLogEntryDTO> logEntry) {\n+            this.logEntry = logEntry;\n+        }\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static final class BambooBuildLogEntryDTO {\n+\n+        @JsonDeserialize(using = UnixTimestampDeserializer.class)\n+        @JsonSerialize(using = UnixTimestampSerializer.class)\n+        private ZonedDateTime date;\n+\n+        private String log;\n+\n+        private String unstyledLog;\n+\n+        /**\n+         * needed for Jackson\n+         */\n+        public BambooBuildLogEntryDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTg0", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269584", "createdAt": "2020-10-15T11:15:43Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0M1rOHiC1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0M1rOHiC1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEyOA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460128", "createdAt": "2020-10-15T11:15:43Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooBuildResultDTO {\n+\n+    BambooBuildLogEntriesDTO logEntries;\n+\n+    public BambooBuildLogEntriesDTO getLogEntries() {\n+        return logEntries;\n+    }\n+\n+    public void setLogEntries(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    public BambooBuildResultDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NTky", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269592", "createdAt": "2020-10-15T11:15:44Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NFrOHiC1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NFrOHiC1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDEzNA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460134", "createdAt": "2020-10-15T11:15:44Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/BambooBuildResultDTO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo.dto;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BambooBuildResultDTO {\n+\n+    BambooBuildLogEntriesDTO logEntries;\n+\n+    public BambooBuildLogEntriesDTO getLogEntries() {\n+        return logEntries;\n+    }\n+\n+    public void setLogEntries(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    public BambooBuildResultDTO() {\n+    }\n+\n+    public BambooBuildResultDTO(BambooBuildLogEntriesDTO logEntries) {\n+        this.logEntries = logEntries;\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    public static final class BambooBuildLogEntriesDTO {\n+\n+        List<BambooBuildLogEntryDTO> logEntry = new ArrayList<>();\n+\n+        public BambooBuildLogEntriesDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NjA4", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269608", "createdAt": "2020-10-15T11:15:45Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NVrOHiC1sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NVrOHiC1sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE0NA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460144", "createdAt": "2020-10-15T11:15:45Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -181,17 +171,8 @@ public void performEmptySetupCommit(ProgrammingExerciseParticipation participati\n                     }\n                 }\n             }\n-            catch (GitAPIException ex) {\n-                log.error(\"Git error while doing empty commit\", ex);\n-            }\n-            catch (IOException ex) {\n-                log.error(\"IOError while doing empty commit\", ex);\n-            }\n-            catch (InterruptedException ex) {\n-                log.error(\"InterruptedException while doing empty commit\", ex);\n-            }\n-            catch (NullPointerException ex) {\n-                log.error(\"NullPointerException while doing empty commit\", ex);\n+            catch (GitAPIException | IOException | InterruptedException | NullPointerException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NjE5", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269619", "createdAt": "2020-10-15T11:15:46Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NlrOHiC1uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0NlrOHiC1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE1Mw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_sequential_validExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460153", "createdAt": "2020-10-15T11:15:46Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -137,14 +135,33 @@ public void tearDown() throws IOException {\n         studentTeamRepo.resetLocalRepo();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NjM1", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269635", "createdAt": "2020-10-15T11:15:47Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0N1rOHiC1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0N1rOHiC1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE2Mg==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460162", "createdAt": "2020-10-15T11:15:47Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketRepositoryDTO.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package de.tum.in.www1.artemis.service.connectors.bitbucket.dto;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BitbucketRepositoryDTO {\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private String slug;\n+\n+    private BitbucketProjectDTO project;\n+\n+    private String scmId;\n+\n+    private String state;\n+\n+    private String statusMessage;\n+\n+    private boolean forkable;\n+\n+    private LinksDTO links;\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketRepositoryDTO() {\n+    }\n+\n+    public BitbucketRepositoryDTO(String id, String slug, String projectKey, String cloneSshUrl) {\n+        this.id = id;\n+        this.slug = slug;\n+        this.project = new BitbucketProjectDTO(projectKey);\n+        this.links = new LinksDTO();\n+        this.links.clone.add(new LinksDTO.CloneDTO(cloneSshUrl, \"ssh\"));\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getSlug() {\n+        return slug;\n+    }\n+\n+    public void setSlug(String slug) {\n+        this.slug = slug;\n+    }\n+\n+    public BitbucketProjectDTO getProject() {\n+        return project;\n+    }\n+\n+    public void setProject(BitbucketProjectDTO project) {\n+        this.project = project;\n+    }\n+\n+    public String getScmId() {\n+        return scmId;\n+    }\n+\n+    public void setScmId(String scmId) {\n+        this.scmId = scmId;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getStatusMessage() {\n+        return statusMessage;\n+    }\n+\n+    public void setStatusMessage(String statusMessage) {\n+        this.statusMessage = statusMessage;\n+    }\n+\n+    public boolean forkable() {\n+        return forkable;\n+    }\n+\n+    public void setForkable(boolean forkable) {\n+        this.forkable = forkable;\n+    }\n+\n+    public LinksDTO getLinks() {\n+        return links;\n+    }\n+\n+    public void setLinks(LinksDTO links) {\n+        this.links = links;\n+    }\n+\n+    /**\n+     * helper method\n+     * @return the clone url stored in the link based on http href\n+     */\n+    public String getCloneUrl() {\n+        if (this.links == null) {\n+            return null;\n+        }\n+\n+        for (var clone : this.links.clone) {\n+            if (\"http\".equals(clone.getName())) {\n+                return clone.getHref();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * helper method\n+     * @return the clone url stored in the link based on ssh href\n+     */\n+    public String getCloneSshUrl() {\n+        if (this.links == null) {\n+            return null;\n+        }\n+\n+        for (var clone : this.links.clone) {\n+            if (\"ssh\".equals(clone.getName())) {\n+                return clone.getHref();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static class LinksDTO {\n+\n+        private List<CloneDTO> clone = new ArrayList<>();\n+\n+        private List<CloneDTO> self = new ArrayList<>();\n+\n+        public List<CloneDTO> getClone() {\n+            return clone;\n+        }\n+\n+        public void setClone(List<CloneDTO> clone) {\n+            this.clone = clone;\n+        }\n+\n+        public List<CloneDTO> getSelf() {\n+            return self;\n+        }\n+\n+        public void setSelf(List<CloneDTO> self) {\n+            this.self = self;\n+        }\n+\n+        public static class CloneDTO {\n+\n+            private String href;\n+\n+            private String name;\n+\n+            /**\n+             * empty constructor needed for Jackson\n+             */\n+            public CloneDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NjQ5", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269649", "createdAt": "2020-10-15T11:15:48Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OFrOHiC1zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OFrOHiC1zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE3NQ==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460175", "createdAt": "2020-10-15T11:15:48Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketProjectDTO.java", "diffHunk": "@@ -5,13 +5,73 @@\n @JsonIgnoreProperties(ignoreUnknown = true)\n public class BitbucketProjectDTO {\n \n+    private String key;\n+\n     private String name;\n \n+    private String description;\n+\n+    private Long id;\n+\n+    private String url;\n+\n+    private String link;\n+\n+    public BitbucketProjectDTO(String key) {\n+        this.key = key;\n+    }\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketProjectDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5NjY0", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269664", "createdAt": "2020-10-15T11:15:49Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OVrOHiC12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo0OVrOHiC12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE4NA==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'optionalTriggeredByRepositories'", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460184", "createdAt": "2020-10-15T11:15:49Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -1,106 +1,343 @@\n package de.tum.in.www1.artemis.service.connectors;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Profile;\n+import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-\n-import com.appfire.bamboo.cli.BambooClient;\n-import com.appfire.common.cli.CliClient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n import de.tum.in.www1.artemis.config.Constants;\n import de.tum.in.www1.artemis.exception.BambooException;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.ApplicationLinksDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooRepositoryDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooTriggerDTO;\n+import de.tum.in.www1.artemis.service.connectors.bitbucket.dto.BitbucketRepositoryDTO;\n \n @Service\n // Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n // this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL bambooServerUrl;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n     private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n \n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n-    private final BambooClient bambooClient;\n+    private final RestTemplate bambooRestTemplate;\n+\n+    private final RestTemplate bitbucketRestTemplate;\n \n-    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+    private List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n \n-    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n-        this.bambooClient = bambooClient;\n-        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    public BitbucketBambooUpdateService(@Qualifier(\"bambooRestTemplate\") RestTemplate bambooRestTemplate, @Qualifier(\"bitbucketRestTemplate\") RestTemplate bitbucketRestTemplate) {\n+        this.bambooRestTemplate = bambooRestTemplate;\n+        this.bitbucketRestTemplate = bitbucketRestTemplate;\n     }\n \n     @Override\n-    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n-            Optional<List<String>> triggeredBy) {\n+    public void updatePlanRepository(String bambooProject, String buildPlanKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> optionalTriggeredByRepositories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5Njcz", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269673", "createdAt": "2020-10-15T11:15:50Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MFrOHiC13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MFrOHiC13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE5MQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460191", "createdAt": "2020-10-15T11:15:50Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -1,106 +1,343 @@\n package de.tum.in.www1.artemis.service.connectors;\n \n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Profile;\n+import org.springframework.http.*;\n import org.springframework.stereotype.Service;\n-\n-import com.appfire.bamboo.cli.BambooClient;\n-import com.appfire.common.cli.CliClient;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.util.UriComponentsBuilder;\n \n import de.tum.in.www1.artemis.config.Constants;\n import de.tum.in.www1.artemis.exception.BambooException;\n-import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.ApplicationLinksDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooRepositoryDTO;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooTriggerDTO;\n+import de.tum.in.www1.artemis.service.connectors.bitbucket.dto.BitbucketRepositoryDTO;\n \n @Service\n // Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n // this if any profile is active (OR). We want both (AND)\n @Profile(\"bamboo & bitbucket\")\n public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n \n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL bambooServerUrl;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL bitbucketServerUrl;\n+\n     private static final String OLD_ASSIGNMENT_REPO_NAME = \"Assignment\";\n \n     private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n \n-    private final BambooClient bambooClient;\n+    private final RestTemplate bambooRestTemplate;\n+\n+    private final RestTemplate bitbucketRestTemplate;\n \n-    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+    private List<ApplicationLinksDTO.ApplicationLinkDTO> cachedApplicationLinks = new ArrayList<>();\n \n-    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n-        this.bambooClient = bambooClient;\n-        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    public BitbucketBambooUpdateService(@Qualifier(\"bambooRestTemplate\") RestTemplate bambooRestTemplate, @Qualifier(\"bitbucketRestTemplate\") RestTemplate bitbucketRestTemplate) {\n+        this.bambooRestTemplate = bambooRestTemplate;\n+        this.bitbucketRestTemplate = bitbucketRestTemplate;\n     }\n \n     @Override\n-    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n-            Optional<List<String>> triggeredBy) {\n+    public void updatePlanRepository(String bambooProject, String buildPlanKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> optionalTriggeredByRepositories) {\n         try {\n-            log.debug(\"Update plan repository for build plan \" + planKey);\n-            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n-            // Workaround for old exercises which used a different repositoryName\n-            if (bambooRemoteRepository == null) {\n-                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(OLD_ASSIGNMENT_REPO_NAME, planKey, false);\n-                if (bambooRemoteRepository == null) {\n-                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n-                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n-                }\n+            log.debug(\"Update plan repository for build plan \" + buildPlanKey);\n+            BambooRepositoryDTO bambooRepository = findBambooRepository(bambooRepositoryName, OLD_ASSIGNMENT_REPO_NAME, buildPlanKey);\n+            if (bambooRepository == null) {\n+                throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + buildPlanKey\n+                        + \" to the student repository : Could not find assignment nor Assignment repository\");\n             }\n \n-            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+            updateBambooPlanRepository(bambooRepository, bitbucketRepository, bitbucketProject, buildPlanKey);\n \n             // Overwrite triggers if needed, incl workaround for different repo names, triggered by is present means that the exercise (the BASE build plan) is imported from a\n             // previous exercise\n-            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n-                triggeredBy = Optional\n-                        .of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n+            if (optionalTriggeredByRepositories.isPresent() && bambooRepository.getName().equals(OLD_ASSIGNMENT_REPO_NAME)) {\n+                optionalTriggeredByRepositories = Optional.of(optionalTriggeredByRepositories.get().stream()\n+                        .map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, OLD_ASSIGNMENT_REPO_NAME)).collect(Collectors.toList()));\n             }\n-            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, repoTriggers));\n+            optionalTriggeredByRepositories.ifPresent(triggeredByRepositories -> overwriteTriggers(buildPlanKey, triggeredByRepositories));\n+\n+            log.info(\"Update plan repository for build plan \" + buildPlanKey + \" was successful\");\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjY5Njgz", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509269683", "createdAt": "2020-10-15T11:15:51Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MVrOHiC15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNTo1MVrOHiC15A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDE5Ng==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2199#discussion_r505460196", "createdAt": "2020-10-15T11:15:51Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -83,7 +76,7 @@ public void configureRepository(ProgrammingExercise exercise, URL repositoryUrl,\n         for (User user : users) {\n             String username = user.getLogin();\n \n-            if ((USER_PREFIX_EDX.isPresent() && username.startsWith(USER_PREFIX_EDX.get())) || (USER_PREFIX_U4I.isPresent() && username.startsWith((USER_PREFIX_U4I.get())))) {\n+            if ((userPrefixEdx.isPresent() && username.startsWith(userPrefixEdx.get())) || (userPrefixU4I.isPresent() && username.startsWith((userPrefixU4I.get())))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzA1MjE5", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509305219", "createdAt": "2020-10-15T12:06:35Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDE2NDE1", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509416415", "createdAt": "2020-10-15T14:04:31Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDQxNzU2", "url": "https://github.com/ls1intum/Artemis/pull/2199#pullrequestreview-509441756", "createdAt": "2020-10-15T14:28:26Z", "commit": {"oid": "f687f6109981078405c413f97277ccb8ebe64465"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3818, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}