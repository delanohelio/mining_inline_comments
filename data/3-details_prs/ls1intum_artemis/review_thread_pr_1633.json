{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDI4NTQ3", "number": 1633, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo0MDozMlrOEFQe0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMTo0NlrOEFpKsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ4MzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo0MDozMlrOGjX2PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMjo0MzozM1rOGjc20w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDA2MQ==", "bodyText": "Isn't this a duplication of lines 122 - 137?", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439744061", "createdAt": "2020-06-13T14:40:32Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -149,17 +167,30 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n         if (textExercise.getId() == null) {\n             return createTextExercise(textExercise);\n         }\n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(textExercise.getCourse().getId());\n+\n+        // Course and exerciseGroup must not be set simultaneously\n+        if (textExercise.getCourse() != null && textExercise.getExerciseGroup() != null) {\n+            throw new BadRequestAlertException(\"An update for a textExercise cannot have a course and an exerciseGroup\", ENTITY_NAME, \"courseAndExerciseGroupSet\");\n+        }\n+\n+        // If an exerciseGroup is set, the textExercise is updated in exam-mode\n+        boolean isExamMode = textExercise.hasExerciseGroup();\n+\n+        // Fetch course from database over exerciseGroup or already set course to make sure client didn't change groups\n+        Course course = retrieveCourseThroughExerciseGroupOrGivenCourse(textExercise);\n+\n+        // Check that the user is authorized to update the exercise\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             return forbidden();\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNjEzMQ==", "bodyText": "Yes, I refactored this and created a new method, which can be used for all exercise types.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439826131", "createdAt": "2020-06-14T12:43:33Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -149,17 +167,30 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n         if (textExercise.getId() == null) {\n             return createTextExercise(textExercise);\n         }\n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(textExercise.getCourse().getId());\n+\n+        // Course and exerciseGroup must not be set simultaneously\n+        if (textExercise.getCourse() != null && textExercise.getExerciseGroup() != null) {\n+            throw new BadRequestAlertException(\"An update for a textExercise cannot have a course and an exerciseGroup\", ENTITY_NAME, \"courseAndExerciseGroupSet\");\n+        }\n+\n+        // If an exerciseGroup is set, the textExercise is updated in exam-mode\n+        boolean isExamMode = textExercise.hasExerciseGroup();\n+\n+        // Fetch course from database over exerciseGroup or already set course to make sure client didn't change groups\n+        Course course = retrieveCourseThroughExerciseGroupOrGivenCourse(textExercise);\n+\n+        // Check that the user is authorized to update the exercise\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             return forbidden();\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDA2MQ=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ4NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo0MTo0NFrOGjX2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMzoyOTo1NFrOGjdGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDE2OA==", "bodyText": "As far as I remember we discussed this in our kickoff meeting that this might be an usecase and we therefore don't want fo forbid it.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439744168", "createdAt": "2020-06-13T14:41:44Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -149,17 +167,30 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n         if (textExercise.getId() == null) {\n             return createTextExercise(textExercise);\n         }\n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(textExercise.getCourse().getId());\n+\n+        // Course and exerciseGroup must not be set simultaneously\n+        if (textExercise.getCourse() != null && textExercise.getExerciseGroup() != null) {\n+            throw new BadRequestAlertException(\"An update for a textExercise cannot have a course and an exerciseGroup\", ENTITY_NAME, \"courseAndExerciseGroupSet\");\n+        }\n+\n+        // If an exerciseGroup is set, the textExercise is updated in exam-mode\n+        boolean isExamMode = textExercise.hasExerciseGroup();\n+\n+        // Fetch course from database over exerciseGroup or already set course to make sure client didn't change groups\n+        Course course = retrieveCourseThroughExerciseGroupOrGivenCourse(textExercise);\n+\n+        // Check that the user is authorized to update the exercise\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             return forbidden();\n         }\n         TextExercise textExerciseBeforeUpdate = textExerciseService.findOne(textExercise.getId());\n         if (textExerciseBeforeUpdate.isAutomaticAssessmentEnabled() != textExercise.isAutomaticAssessmentEnabled() && !authCheckService.isAdmin()) {\n             return forbidden();\n         }\n \n+        // TODO: Should we forbid conversion between exam <-> normal text-exercise?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxNjM0NQ==", "bodyText": "First of all thanks for your feedback!\nI must have missed that point. If such a conversion is wanted we need to take other entities such as participation, submission, result and feedback also into account. They are indirectly attached to the exercise and must be reset on conversion.\nI think an import exercise for exam feature would make more sense. Here we would just need to copy the exercise entity, remove the course and add the exerciseGroup.\nSuch a feature is not part of this PR but we should have a discussion about this.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439816345", "createdAt": "2020-06-14T10:47:07Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -149,17 +167,30 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n         if (textExercise.getId() == null) {\n             return createTextExercise(textExercise);\n         }\n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(textExercise.getCourse().getId());\n+\n+        // Course and exerciseGroup must not be set simultaneously\n+        if (textExercise.getCourse() != null && textExercise.getExerciseGroup() != null) {\n+            throw new BadRequestAlertException(\"An update for a textExercise cannot have a course and an exerciseGroup\", ENTITY_NAME, \"courseAndExerciseGroupSet\");\n+        }\n+\n+        // If an exerciseGroup is set, the textExercise is updated in exam-mode\n+        boolean isExamMode = textExercise.hasExerciseGroup();\n+\n+        // Fetch course from database over exerciseGroup or already set course to make sure client didn't change groups\n+        Course course = retrieveCourseThroughExerciseGroupOrGivenCourse(textExercise);\n+\n+        // Check that the user is authorized to update the exercise\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             return forbidden();\n         }\n         TextExercise textExerciseBeforeUpdate = textExerciseService.findOne(textExercise.getId());\n         if (textExerciseBeforeUpdate.isAutomaticAssessmentEnabled() != textExercise.isAutomaticAssessmentEnabled() && !authCheckService.isAdmin()) {\n             return forbidden();\n         }\n \n+        // TODO: Should we forbid conversion between exam <-> normal text-exercise?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDE2OA=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMDIyMA==", "bodyText": "Yes, conversion or such thing would be Priority 2 or even Priority 3.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439830220", "createdAt": "2020-06-14T13:29:54Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -149,17 +167,30 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n         if (textExercise.getId() == null) {\n             return createTextExercise(textExercise);\n         }\n-        // fetch course from database to make sure client didn't change groups\n-        Course course = courseService.findOne(textExercise.getCourse().getId());\n+\n+        // Course and exerciseGroup must not be set simultaneously\n+        if (textExercise.getCourse() != null && textExercise.getExerciseGroup() != null) {\n+            throw new BadRequestAlertException(\"An update for a textExercise cannot have a course and an exerciseGroup\", ENTITY_NAME, \"courseAndExerciseGroupSet\");\n+        }\n+\n+        // If an exerciseGroup is set, the textExercise is updated in exam-mode\n+        boolean isExamMode = textExercise.hasExerciseGroup();\n+\n+        // Fetch course from database over exerciseGroup or already set course to make sure client didn't change groups\n+        Course course = retrieveCourseThroughExerciseGroupOrGivenCourse(textExercise);\n+\n+        // Check that the user is authorized to update the exercise\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isInstructorInCourse(course, user) && !authCheckService.isAdmin()) {\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             return forbidden();\n         }\n         TextExercise textExerciseBeforeUpdate = textExerciseService.findOne(textExercise.getId());\n         if (textExerciseBeforeUpdate.isAutomaticAssessmentEnabled() != textExercise.isAutomaticAssessmentEnabled() && !authCheckService.isAdmin()) {\n             return forbidden();\n         }\n \n+        // TODO: Should we forbid conversion between exam <-> normal text-exercise?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDE2OA=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ4NjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo0NToxOFrOGjX3qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0ODo0NlrOGj-deA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDQyNA==", "bodyText": "I think that's a fair discussion point. In the one hand if there is an issue during the exam we might want to fix it. On the other hand how do we deal with this in the offline mode? Or do we save on which version of the exercises the student submitted? Do we even have versions of exercises it they get changed?", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439744424", "createdAt": "2020-06-13T14:45:18Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -169,7 +200,9 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             result.getExampleSubmissions().forEach(exampleSubmission -> exampleSubmission.setTutorParticipations(null));\n         }\n \n-        if (notificationText != null) {\n+        // TODO: Should we leave this activated in case the exercise is changed during the exam?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxNjk2NA==", "bodyText": "Honestly I'm not sure if we could reuse this notification functionality for the exam. Do students even see notifications if they are in exam mode?\nI don't think Artemis supports versioning of exercises at the moment so this would also require additional work. We should discuss this with the team.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439816964", "createdAt": "2020-06-14T10:55:18Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -169,7 +200,9 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             result.getExampleSubmissions().forEach(exampleSubmission -> exampleSubmission.setTutorParticipations(null));\n         }\n \n-        if (notificationText != null) {\n+        // TODO: Should we leave this activated in case the exercise is changed during the exam?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDQyNA=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTMwMQ==", "bodyText": "I created a meeting page for the next meeting and added this as a discussion point.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439831301", "createdAt": "2020-06-14T13:42:16Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -169,7 +200,9 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             result.getExampleSubmissions().forEach(exampleSubmission -> exampleSubmission.setTutorParticipations(null));\n         }\n \n-        if (notificationText != null) {\n+        // TODO: Should we leave this activated in case the exercise is changed during the exam?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDQyNA=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NjY5Ng==", "bodyText": "we do not want to support this at the moment. Exercises should not be changed during the exam!", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440376696", "createdAt": "2020-06-15T18:48:46Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -169,7 +200,9 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             result.getExampleSubmissions().forEach(exampleSubmission -> exampleSubmission.setTutorParticipations(null));\n         }\n \n-        if (notificationText != null) {\n+        // TODO: Should we leave this activated in case the exercise is changed during the exam?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDQyNA=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ4ODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo0ODowMVrOGjX4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMjo0NTozOFrOGjc3hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDU4NQ==", "bodyText": "Could it be useful to put the check from line 122-125 within this method? To ensure that we only retrieve a Course when the Exercise is actually valid.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439744585", "createdAt": "2020-06-13T14:48:01Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -350,4 +383,22 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             return ResponseEntity.badRequest().build();\n         }\n     }\n+\n+    /**\n+     * Retrieve the Course for a given TextExercise.\n+     * If the exercise is part of an exam, retrieve the course through ExerciseGroup -> Exam -> Course.\n+     * Otherwise the Course is already set and the id can be used to retrieve the Course again from the database.\n+     *\n+     * @param textExercise the TextExercise for which the course is retrieved\n+     * @return the Course for the TextExercise\n+     */\n+    private Course retrieveCourseThroughExerciseGroupOrGivenCourse(TextExercise textExercise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyNjMwOA==", "bodyText": "Applied your suggestion, refactored and moved the method. This can be reused for all exerciseTypes now.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439826308", "createdAt": "2020-06-14T12:45:38Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -350,4 +383,22 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             return ResponseEntity.badRequest().build();\n         }\n     }\n+\n+    /**\n+     * Retrieve the Course for a given TextExercise.\n+     * If the exercise is part of an exam, retrieve the course through ExerciseGroup -> Exam -> Course.\n+     * Otherwise the Course is already set and the id can be used to retrieve the Course again from the database.\n+     *\n+     * @param textExercise the TextExercise for which the course is retrieved\n+     * @return the Course for the TextExercise\n+     */\n+    private Course retrieveCourseThroughExerciseGroupOrGivenCourse(TextExercise textExercise) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDU4NQ=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ5MTY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo1NDoxM1rOGjX6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMDozMzo0MFrOGjcMPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTA0Mw==", "bodyText": "What does this test do? By reading the test I think I know it but please improve the method name and/or document the behaviour.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439745043", "createdAt": "2020-06-13T14:54:13Z", "author": {"login": "julian-christl"}, "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "diffHunk": "@@ -100,6 +102,41 @@ public void createTextExercise() throws Exception {\n \n         assertThat(newTextExercise.getTitle()).as(\"text exercise title was correctly set\").isEqualTo(title);\n         assertThat(newTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly set\").isEqualTo(difficulty);\n+        assertThat(newTextExercise.getCourse()).as(\"course was set for normal exercise\").isNotNull();\n+        assertThat(newTextExercise.getExerciseGroup()).as(\"exerciseGroup was not set for normal exercise\").isNull();\n+        assertThat(newTextExercise.getCourse().getId()).as(\"exerciseGroupId was set correctly\").isEqualTo(course.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExerciseForExam() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(now.minusDays(1), now.minusHours(2), now.minusHours(1), exerciseGroup);\n+\n+        String title = \"New Exam Text Exercise\";\n+        DifficultyLevel difficulty = DifficultyLevel.HARD;\n+        textExercise.setTitle(title);\n+        textExercise.setDifficulty(difficulty);\n+\n+        TextExercise newTextExercise = request.postWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.CREATED);\n+\n+        assertThat(newTextExercise.getTitle()).as(\"text exercise title was correctly set\").isEqualTo(title);\n+        assertThat(newTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly set\").isEqualTo(difficulty);\n+        assertThat(newTextExercise.getCourse()).as(\"course was not set for exam exercise\").isNull();\n+        assertThat(newTextExercise.getExerciseGroup()).as(\"exerciseGroup was set for exam exercise\").isNotNull();\n+        assertThat(newTextExercise.getExerciseGroup().getId()).as(\"exerciseGroupId was set correctly\").isEqualTo(exerciseGroup.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_courseAndExerciseGroupSet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxNTIyOA==", "bodyText": "Changed method name to clarify behavior", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439815228", "createdAt": "2020-06-14T10:33:40Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "diffHunk": "@@ -100,6 +102,41 @@ public void createTextExercise() throws Exception {\n \n         assertThat(newTextExercise.getTitle()).as(\"text exercise title was correctly set\").isEqualTo(title);\n         assertThat(newTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly set\").isEqualTo(difficulty);\n+        assertThat(newTextExercise.getCourse()).as(\"course was set for normal exercise\").isNotNull();\n+        assertThat(newTextExercise.getExerciseGroup()).as(\"exerciseGroup was not set for normal exercise\").isNull();\n+        assertThat(newTextExercise.getCourse().getId()).as(\"exerciseGroupId was set correctly\").isEqualTo(course.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExerciseForExam() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(now.minusDays(1), now.minusHours(2), now.minusHours(1), exerciseGroup);\n+\n+        String title = \"New Exam Text Exercise\";\n+        DifficultyLevel difficulty = DifficultyLevel.HARD;\n+        textExercise.setTitle(title);\n+        textExercise.setDifficulty(difficulty);\n+\n+        TextExercise newTextExercise = request.postWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.CREATED);\n+\n+        assertThat(newTextExercise.getTitle()).as(\"text exercise title was correctly set\").isEqualTo(title);\n+        assertThat(newTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly set\").isEqualTo(difficulty);\n+        assertThat(newTextExercise.getCourse()).as(\"course was not set for exam exercise\").isNull();\n+        assertThat(newTextExercise.getExerciseGroup()).as(\"exerciseGroup was set for exam exercise\").isNotNull();\n+        assertThat(newTextExercise.getExerciseGroup().getId()).as(\"exerciseGroupId was set correctly\").isEqualTo(exerciseGroup.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_courseAndExerciseGroupSet() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTA0Mw=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ5MjQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo1NTo0NFrOGjX6bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMDozMzo0OFrOGjcMYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTEzMg==", "bodyText": "What does this test do? By reading the test I think I know it but please improve the method name and/or document the behaviour.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439745132", "createdAt": "2020-06-13T14:55:44Z", "author": {"login": "julian-christl"}, "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "diffHunk": "@@ -128,6 +165,43 @@ public void updateTextExercise() throws Exception {\n \n         assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(title);\n         assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(difficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was set for normal exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was not set for normal exercise\").isNull();\n+        assertThat(updatedTextExercise.getCourse().getId()).as(\"courseId was not updated\").isEqualTo(course.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExerciseForExam() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(now.minusDays(1), now.minusHours(2), now.minusHours(1), exerciseGroup);\n+        textExerciseRepository.save(textExercise);\n+\n+        // Update certain attributes of text exercise\n+        String updateTitle = \"After\";\n+        DifficultyLevel updateDifficulty = DifficultyLevel.HARD;\n+        textExercise.setTitle(updateTitle);\n+        textExercise.setDifficulty(updateDifficulty);\n+\n+        TextExercise updatedTextExercise = request.putWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.OK);\n+\n+        assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(updateTitle);\n+        assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(updateDifficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was not set for exam exercise\").isNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was set for exam exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup().getId()).as(\"exerciseGroupId was not updated\").isEqualTo(exerciseGroup.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_courseAndExerciseGroupSet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxNTI2Ng==", "bodyText": "Changed method name to clarify behavior", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439815266", "createdAt": "2020-06-14T10:33:48Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "diffHunk": "@@ -128,6 +165,43 @@ public void updateTextExercise() throws Exception {\n \n         assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(title);\n         assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(difficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was set for normal exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was not set for normal exercise\").isNull();\n+        assertThat(updatedTextExercise.getCourse().getId()).as(\"courseId was not updated\").isEqualTo(course.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExerciseForExam() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(now.minusDays(1), now.minusHours(2), now.minusHours(1), exerciseGroup);\n+        textExerciseRepository.save(textExercise);\n+\n+        // Update certain attributes of text exercise\n+        String updateTitle = \"After\";\n+        DifficultyLevel updateDifficulty = DifficultyLevel.HARD;\n+        textExercise.setTitle(updateTitle);\n+        textExercise.setDifficulty(updateDifficulty);\n+\n+        TextExercise updatedTextExercise = request.putWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.OK);\n+\n+        assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(updateTitle);\n+        assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(updateDifficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was not set for exam exercise\").isNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was set for exam exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup().getId()).as(\"exerciseGroupId was not updated\").isEqualTo(exerciseGroup.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_courseAndExerciseGroupSet() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTEzMg=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ5Mjk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo1Njo0OVrOGjX6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMDo1ODoyNlrOGjcT8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTIwMA==", "bodyText": "Would it then be interesting to add a two tests which test the behaviour when updating an exam exercises to a course exercise and vice versa?", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439745200", "createdAt": "2020-06-13T14:56:49Z", "author": {"login": "julian-christl"}, "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "diffHunk": "@@ -128,6 +165,43 @@ public void updateTextExercise() throws Exception {\n \n         assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(title);\n         assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(difficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was set for normal exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was not set for normal exercise\").isNull();\n+        assertThat(updatedTextExercise.getCourse().getId()).as(\"courseId was not updated\").isEqualTo(course.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExerciseForExam() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(now.minusDays(1), now.minusHours(2), now.minusHours(1), exerciseGroup);\n+        textExerciseRepository.save(textExercise);\n+\n+        // Update certain attributes of text exercise\n+        String updateTitle = \"After\";\n+        DifficultyLevel updateDifficulty = DifficultyLevel.HARD;\n+        textExercise.setTitle(updateTitle);\n+        textExercise.setDifficulty(updateDifficulty);\n+\n+        TextExercise updatedTextExercise = request.putWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.OK);\n+\n+        assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(updateTitle);\n+        assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(updateDifficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was not set for exam exercise\").isNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was set for exam exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup().getId()).as(\"exerciseGroupId was not updated\").isEqualTo(exerciseGroup.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_courseAndExerciseGroupSet() throws Exception {\n+        Course course = database.addCourseWithOneReleasedTextExercise();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = textExerciseRepository.findByCourseId(course.getId()).get(0);\n+        textExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.postWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxNzIwMw==", "bodyText": "See my comment about conversion vs. import. If this is actually wanted we need to have integration tests for this. I will add them when this becomes clear.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439817203", "createdAt": "2020-06-14T10:58:26Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/TextExerciseIntegrationTest.java", "diffHunk": "@@ -128,6 +165,43 @@ public void updateTextExercise() throws Exception {\n \n         assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(title);\n         assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(difficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was set for normal exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was not set for normal exercise\").isNull();\n+        assertThat(updatedTextExercise.getCourse().getId()).as(\"courseId was not updated\").isEqualTo(course.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExerciseForExam() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(now.minusDays(1), now.minusHours(2), now.minusHours(1), exerciseGroup);\n+        textExerciseRepository.save(textExercise);\n+\n+        // Update certain attributes of text exercise\n+        String updateTitle = \"After\";\n+        DifficultyLevel updateDifficulty = DifficultyLevel.HARD;\n+        textExercise.setTitle(updateTitle);\n+        textExercise.setDifficulty(updateDifficulty);\n+\n+        TextExercise updatedTextExercise = request.putWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.OK);\n+\n+        assertThat(updatedTextExercise.getTitle()).as(\"text exercise title was correctly updated\").isEqualTo(updateTitle);\n+        assertThat(updatedTextExercise.getDifficulty()).as(\"text exercise difficulty was correctly updated\").isEqualTo(updateDifficulty);\n+        assertThat(updatedTextExercise.getCourse()).as(\"course was not set for exam exercise\").isNull();\n+        assertThat(updatedTextExercise.getExerciseGroup()).as(\"exerciseGroup was set for exam exercise\").isNotNull();\n+        assertThat(updatedTextExercise.getExerciseGroup().getId()).as(\"exerciseGroupId was not updated\").isEqualTo(exerciseGroup.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_courseAndExerciseGroupSet() throws Exception {\n+        Course course = database.addCourseWithOneReleasedTextExercise();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        TextExercise textExercise = textExerciseRepository.findByCourseId(course.getId()).get(0);\n+        textExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.postWithResponseBody(\"/api/text-exercises/\", textExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTIwMA=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ5Mzk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo1OTo0MlrOGjX7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMzo0NDo0NlrOGjdLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTMzNw==", "bodyText": "If you pass exercise here shouldn't you make sure that the course of the exercise is null?\nYou could pass a course exercise to this method, can't you?", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439745337", "createdAt": "2020-06-13T14:59:42Z", "author": {"login": "julian-christl"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -104,6 +111,22 @@ public static Exercise populateExercise(Exercise exercise, ZonedDateTime release\n         return exercise;\n     }\n \n+    public static Exercise populateExerciseForExam(Exercise exercise, ZonedDateTime releaseDate, ZonedDateTime dueDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgyMTEzMA==", "bodyText": "ModelFactory is used create entities for testing.\nI think it's the responsibility of the test case writer, that he ensures a correct test case setup.\nAlso I don't want to add complexity by having case distinctions within the entity setups.\nBut you also have a valid point. I explicitly set course to null now in the method to ensure that a valid exam exercise is created.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439821130", "createdAt": "2020-06-14T11:45:57Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -104,6 +111,22 @@ public static Exercise populateExercise(Exercise exercise, ZonedDateTime release\n         return exercise;\n     }\n \n+    public static Exercise populateExerciseForExam(Exercise exercise, ZonedDateTime releaseDate, ZonedDateTime dueDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTMzNw=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTQ4MQ==", "bodyText": "Yes, that was my intention. I should've said this in the first place, sorry.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r439831481", "createdAt": "2020-06-14T13:44:46Z", "author": {"login": "julian-christl"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -104,6 +111,22 @@ public static Exercise populateExercise(Exercise exercise, ZonedDateTime release\n         return exercise;\n     }\n \n+    public static Exercise populateExerciseForExam(Exercise exercise, ZonedDateTime releaseDate, ZonedDateTime dueDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTMzNw=="}, "originalCommit": {"oid": "74f387c649c89b58e700dddbbb9abe652bbfe6d8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE4ODM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMToxOVrOGj52VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMToxOVrOGj52VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTE0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!textExercise.hasExerciseGroup()) {\n          \n          \n            \n                    if (textExercise.hasCourse()) {\n          \n      \n    \n    \n  \n\nI think this check is easier and would allow the comment above to be much shorter", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440301141", "createdAt": "2020-06-15T16:31:19Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -127,7 +134,11 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n \n         TextExercise result = textExerciseRepository.save(textExercise);\n         textClusteringScheduleService.ifPresent(service -> service.scheduleExerciseForClusteringIfRequired(result));\n-        groupNotificationService.notifyTutorGroupAboutExerciseCreated(textExercise);\n+\n+        // If an exerciseGroup is set, we assume that the exercise is created for an exam. Then don't notify tutors when the exercise is created\n+        if (!textExercise.hasExerciseGroup()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23cc16daec47610d0e0016e03d6c17e18af7774"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE5MzEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMjo0NVrOGj55aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMjo0NVrOGj55aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTkyOQ==", "bodyText": "See comment above", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440301929", "createdAt": "2020-06-15T16:32:45Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextExerciseResource.java", "diffHunk": "@@ -169,7 +189,9 @@ public TextExerciseResource(TextExerciseRepository textExerciseRepository, TextE\n             result.getExampleSubmissions().forEach(exampleSubmission -> exampleSubmission.setTutorParticipations(null));\n         }\n \n-        if (notificationText != null) {\n+        // TODO: Should we leave this activated in case the exercise is changed during the exam?\n+        // Don't notify students about changes if the exercise was updated in exam-mode\n+        if (notificationText != null && !textExercise.hasExerciseGroup()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23cc16daec47610d0e0016e03d6c17e18af7774"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzUxNjM0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNzo0N1rOGj9H8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNTo1MlrOGj-C7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDgwMg==", "bodyText": "I've changed exerciseGroups to exercise-groups in my PR to be consistent with other routes in the application. You may want to change it now or when our PRs are merged.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440354802", "createdAt": "2020-06-15T18:07:47Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -209,6 +211,30 @@ export const examManagementRoute: Routes = [\n         },\n         canActivate: [UserRouteAccessService],\n     },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/new',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2OTkwMg==", "bodyText": "changed this", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440369902", "createdAt": "2020-06-15T18:35:52Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -209,6 +211,30 @@ export const examManagementRoute: Routes = [\n         },\n         canActivate: [UserRouteAccessService],\n     },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/new',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDgwMg=="}, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzUxNjg4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNzo1NlrOGj9IVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MDowM1rOGj-Lbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDkwMA==", "bodyText": "I've changed exerciseGroups to exercise-groups in my PR to be consistent with other routes in the application. You may want to change it now or when our PRs are merged.", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440354900", "createdAt": "2020-06-15T18:07:56Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -209,6 +211,30 @@ export const examManagementRoute: Routes = [\n         },\n         canActivate: [UserRouteAccessService],\n     },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/new',\n+        component: TextExerciseUpdateComponent,\n+        resolve: {\n+            textExercise: TextExerciseResolver,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.textExercise.home.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/:exerciseId/edit',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2OTk3OQ==", "bodyText": "changed this", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440369979", "createdAt": "2020-06-15T18:36:00Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -209,6 +211,30 @@ export const examManagementRoute: Routes = [\n         },\n         canActivate: [UserRouteAccessService],\n     },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/new',\n+        component: TextExerciseUpdateComponent,\n+        resolve: {\n+            textExercise: TextExerciseResolver,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.textExercise.home.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/:exerciseId/edit',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDkwMA=="}, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjA3OA==", "bodyText": "Thanks", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440372078", "createdAt": "2020-06-15T18:40:03Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -209,6 +211,30 @@ export const examManagementRoute: Routes = [\n         },\n         canActivate: [UserRouteAccessService],\n     },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/new',\n+        component: TextExerciseUpdateComponent,\n+        resolve: {\n+            textExercise: TextExerciseResolver,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.textExercise.home.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups/:groupId/text-exercises/:exerciseId/edit',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDkwMA=="}, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzUyMTI4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise.route.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowOTozM1rOGj9LTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozMzoyN1rOGj99sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NTY2Mw==", "bodyText": "Why is exerciseGroupService public here?", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440355663", "createdAt": "2020-06-15T18:09:33Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise.route.ts", "diffHunk": "@@ -12,10 +12,12 @@ import { Observable } from 'rxjs';\n import { HttpResponse } from '@angular/common/http';\n import { filter, map } from 'rxjs/operators';\n import { Course } from 'app/entities/course.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n \n @Injectable({ providedIn: 'root' })\n export class TextExerciseResolver implements Resolve<TextExercise> {\n-    constructor(private textExerciseService: TextExerciseService, private courseService: CourseManagementService) {}\n+    constructor(private textExerciseService: TextExerciseService, private courseService: CourseManagementService, public exerciseGroupService: ExerciseGroupService) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2ODU2MA==", "bodyText": "Fixed", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440368560", "createdAt": "2020-06-15T18:33:27Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/text/manage/text-exercise/text-exercise.route.ts", "diffHunk": "@@ -12,10 +12,12 @@ import { Observable } from 'rxjs';\n import { HttpResponse } from '@angular/common/http';\n import { filter, map } from 'rxjs/operators';\n import { Course } from 'app/entities/course.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n \n @Injectable({ providedIn: 'root' })\n export class TextExerciseResolver implements Resolve<TextExercise> {\n-    constructor(private textExerciseService: TextExerciseService, private courseService: CourseManagementService) {}\n+    constructor(private textExerciseService: TextExerciseService, private courseService: CourseManagementService, public exerciseGroupService: ExerciseGroupService) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NTY2Mw=="}, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzUyODE2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMTo0NlrOGj9Pxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MTo0NlrOGj-PMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NjgwNw==", "bodyText": "Just a question because I did it differently in my PR: You never really use mandatory right? It is always set to true in your test cases?", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440356807", "createdAt": "2020-06-15T18:11:46Z", "author": {"login": "sascha11110"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -516,8 +516,8 @@ public Exam addExam(Course course) {\n         return exam;\n     }\n \n-    public ExerciseGroup addExerciseGroup(Exam exam) {\n-        ExerciseGroup exerciseGroup = ModelFactory.generateExerciseGroup(exam);\n+    public ExerciseGroup addExerciseGroup(Exam exam, boolean mandatory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NTQ2OA==", "bodyText": "Yes but this might be useful when mandatory/optional feature is implemented", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440365468", "createdAt": "2020-06-15T18:27:51Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -516,8 +516,8 @@ public Exam addExam(Course course) {\n         return exam;\n     }\n \n-    public ExerciseGroup addExerciseGroup(Exam exam) {\n-        ExerciseGroup exerciseGroup = ModelFactory.generateExerciseGroup(exam);\n+    public ExerciseGroup addExerciseGroup(Exam exam, boolean mandatory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NjgwNw=="}, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MzA0MQ==", "bodyText": "Ok then the merge order of your and my PR will decide whether this will survive :-D", "url": "https://github.com/ls1intum/Artemis/pull/1633#discussion_r440373041", "createdAt": "2020-06-15T18:41:46Z", "author": {"login": "sascha11110"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -516,8 +516,8 @@ public Exam addExam(Course course) {\n         return exam;\n     }\n \n-    public ExerciseGroup addExerciseGroup(Exam exam) {\n-        ExerciseGroup exerciseGroup = ModelFactory.generateExerciseGroup(exam);\n+    public ExerciseGroup addExerciseGroup(Exam exam, boolean mandatory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NjgwNw=="}, "originalCommit": {"oid": "e9743c3d63c6c02f65877d6daa7130ec9e52c8ba"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 47, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}