{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Njk0ODIy", "number": 2134, "title": "Refactor text assessment conflict tables", "bodyText": "We improved the naming consistency of database tables and Java classes", "createdAt": "2020-09-29T09:33:47Z", "url": "https://github.com/ls1intum/Artemis/pull/2134", "merged": true, "mergeCommit": {"oid": "ceb0e978a21dda95817d40bde2348a8b9c96c99c"}, "closed": true, "closedAt": "2020-09-29T13:36:52Z", "author": {"login": "krusche"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNkNRoAH2gAyNDk0Njk0ODIyOmQ0MDBjMDY4NWNkYmY4YzE2ZGM5OGU2OTNkZGI3YjNiZDQwYzA2NGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNnyENAFqTQ5ODQ0MDEyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d400c0685cdbf8c16dc98e693ddb7b3bd40c064d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d400c0685cdbf8c16dc98e693ddb7b3bd40c064d", "committedDate": "2020-09-29T08:49:20Z", "message": "rename table and Java files to be more generic\n\nthis way we can also handle modeling conflicts in the future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "893138b66baed663a92cc5f7eeed11887e689a2c", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/893138b66baed663a92cc5f7eeed11887e689a2c", "committedDate": "2020-09-29T09:17:00Z", "message": "check if the feedback text is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886ca03ff05e4017ed4b50d833bc17a7542877fa", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/886ca03ff05e4017ed4b50d833bc17a7542877fa", "committedDate": "2020-09-29T09:21:18Z", "message": "another rename :-)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd8ee8eec51d4a79071a4a42d7122f233497593", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5cd8ee8eec51d4a79071a4a42d7122f233497593", "committedDate": "2020-09-29T09:22:35Z", "message": "Merge branch 'bugfix/refactor-text-assessment-conflict' of https://github.com/ls1intum/Artemis into bugfix/refactor-text-assessment-conflict\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0331afe5392e22aa43fed769e10bd1a756c29467", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0331afe5392e22aa43fed769e10bd1a756c29467", "committedDate": "2020-09-29T09:23:11Z", "message": "add TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/267cef6a5077a32da798f027cc06be22bf14ced2", "committedDate": "2020-09-29T09:42:00Z", "message": "One last rename"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjkzMTM1", "url": "https://github.com/ls1intum/Artemis/pull/2134#pullrequestreview-498293135", "createdAt": "2020-09-29T09:42:44Z", "commit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzI2MzIy", "url": "https://github.com/ls1intum/Artemis/pull/2134#pullrequestreview-498326322", "createdAt": "2020-09-29T10:25:51Z", "commit": {"oid": "0331afe5392e22aa43fed769e10bd1a756c29467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyNTo1MVrOHZmlwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyNTo1MVrOHZmlwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwODcwNg==", "bodyText": "Actually, those references ensure the deletion of referenced conflicts when the feedback is deleted.", "url": "https://github.com/ls1intum/Artemis/pull/2134#discussion_r496608706", "createdAt": "2020-09-29T10:25:51Z", "author": {"login": "bigultekin"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "diffHunk": "@@ -70,6 +70,7 @@\n     @ManyToOne\n     private GradingInstruction gradingInstruction;\n \n+    // TODO: JP remove these two references as they are not really needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0331afe5392e22aa43fed769e10bd1a756c29467"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzYwMDAx", "url": "https://github.com/ls1intum/Artemis/pull/2134#pullrequestreview-498360001", "createdAt": "2020-09-29T11:13:26Z", "commit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToxMzoyNlrOHZoKMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToxMzoyNlrOHZoKMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzNDQxOQ==", "bodyText": "Maybe it would be a good idea to start using the text blocks @MaisiKoleni was referencing today in the meeting as this is a rather long query", "url": "https://github.com/ls1intum/Artemis/pull/2134#discussion_r496634419", "createdAt": "2020-09-29T11:13:26Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/FeedbackConflictRepository.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.List;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.FeedbackConflict;\n+\n+/**\n+ * Spring Data JPA repository for the FeedbackConflict entity.\n+ */\n+@Repository\n+public interface FeedbackConflictRepository extends JpaRepository<FeedbackConflict, Long> {\n+\n+    @Query(\"select distinct conflict from FeedbackConflict conflict where conflict.conflict = true and (conflict.firstFeedback.id in (:feedbackIds) or conflict.secondFeedback.id in (:feedbackIds))\")\n+    List<FeedbackConflict> findAllByFeedbackList(@Param(\"feedbackIds\") List<Long> feedbackIds);\n+\n+    @Query(\"select distinct conflict from FeedbackConflict conflict where conflict.conflict = true and \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzYyMzc3", "url": "https://github.com/ls1intum/Artemis/pull/2134#pullrequestreview-498362377", "createdAt": "2020-09-29T11:17:00Z", "commit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDA2NDIw", "url": "https://github.com/ls1intum/Artemis/pull/2134#pullrequestreview-498406420", "createdAt": "2020-09-29T12:19:27Z", "commit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxOToyN1rOHZqU6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxOToyN1rOHZqU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2OTkzMA==", "bodyText": "Why is the name here not something like feedback_conflictPK?", "url": "https://github.com/ls1intum/Artemis/pull/2134#discussion_r496669930", "createdAt": "2020-09-29T12:19:27Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/resources/config/liquibase/changelog/20200726015816_changelog.xml", "diffHunk": "@@ -1,9 +1,9 @@\n <?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n <databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n-    <changeSet author=\"birtan (generated)\" id=\"1595721518853-31\">\n-        <createTable tableName=\"text_assessment_conflict\">\n+    <changeSet author=\"birtan\" id=\"20200726015816\">\n+        <createTable tableName=\"feedback_conflict\">\n             <column autoIncrement=\"true\" name=\"id\" type=\"BIGINT\">\n-                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"text_assessment_conflictPK\"/>\n+                <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"assessment_conflictPK\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267cef6a5077a32da798f027cc06be22bf14ced2"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3e4e1f80c7f77bc59062d2d47cd6c2e9db96c1", "author": {"user": {"login": "bigultekin", "name": "Birtan G\u00fcltekin"}}, "url": "https://github.com/ls1intum/Artemis/commit/fc3e4e1f80c7f77bc59062d2d47cd6c2e9db96c1", "committedDate": "2020-09-29T12:33:34Z", "message": "rename primary key name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab53881b98639afb01b15b71a10b79020da8e44", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/7ab53881b98639afb01b15b71a10b79020da8e44", "committedDate": "2020-09-29T12:38:56Z", "message": "Merge branch 'develop' into bugfix/refactor-text-assessment-conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "441ba2b77de1130f77504b89fd79298171849323", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/441ba2b77de1130f77504b89fd79298171849323", "committedDate": "2020-09-29T12:52:14Z", "message": "Update 20200726015816_changelog.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDQwMTIw", "url": "https://github.com/ls1intum/Artemis/pull/2134#pullrequestreview-498440120", "createdAt": "2020-09-29T12:59:14Z", "commit": {"oid": "441ba2b77de1130f77504b89fd79298171849323"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1OToxNFrOHZr43w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1OToxNFrOHZr43w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5NTUxOQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2134#discussion_r496695519", "createdAt": "2020-09-29T12:59:14Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "diffHunk": "@@ -61,82 +61,81 @@ public void asyncCheckFeedbackConsistency(List<TextBlock> textBlocks, List<Feedb\n         feedbackList.removeIf(f -> !f.hasReference());\n \n         // If text block doesn't have a cluster id don't create an object\n-        List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS = feedbackList.stream().flatMap(feedback -> {\n+        List<TextFeedbackConflictRequestDTO> textFeedbackConflictRequestDTOS = feedbackList.stream().flatMap(feedback -> {\n             Optional<TextBlock> textBlock = textBlockRepository\n                     .findById(textBlocks.stream().filter(block -> block.getId().equals(feedback.getReference())).findFirst().get().getId());\n-            if (textBlock.isPresent() && textBlock.get().getCluster() != null) {\n-                return Stream.of(new TextAssessmentConflictRequestDTO(textBlock.get().getId(), textBlock.get().getText(), textBlock.get().getCluster().getId(), feedback.getId(),\n+            if (textBlock.isPresent() && textBlock.get().getCluster() != null && feedback.getDetailText() != null) {\n+                return Stream.of(new TextFeedbackConflictRequestDTO(textBlock.get().getId(), textBlock.get().getText(), textBlock.get().getCluster().getId(), feedback.getId(),\n                         feedback.getDetailText(), feedback.getCredits()));\n             }\n             else {\n                 return Stream.empty();\n             }\n         }).collect(toList());\n \n-        if (textAssessmentConflictRequestDTOS.isEmpty()) {\n+        if (textFeedbackConflictRequestDTOS.isEmpty()) {\n             return;\n         }\n \n         // remote service call to athene\n-        final List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS;\n+        final List<FeedbackConflictResponseDTO> feedbackConflictResponseDTOS;\n         try {\n-            textAssessmentConflictResponseDTOS = textAssessmentConflictService.checkFeedbackConsistencies(textAssessmentConflictRequestDTOS, exerciseId, 0);\n+            feedbackConflictResponseDTOS = textAssessmentConflictService.checkFeedbackConsistencies(textFeedbackConflictRequestDTOS, exerciseId, 0);\n         }\n         catch (NetworkingError networkingError) {\n             log.error(networkingError.getMessage(), networkingError);\n             return;\n         }\n \n         // create an array to store conflicts\n-        List<TextAssessmentConflict> textAssessmentConflicts = new ArrayList<>();\n+        List<FeedbackConflict> feedbackConflicts = new ArrayList<>();\n \n         // look for new conflicts\n         // Athene may find conflicts with feedback ids that are not in the feedback repository any more. So check for them. (May happen if the feedback is deleted in Artemis but\n         // already stored in Athene)\n-        textAssessmentConflictResponseDTOS.forEach(conflict -> {\n+        feedbackConflictResponseDTOS.forEach(conflict -> {\n             Optional<Feedback> firstFeedback = feedbackRepository.findById(conflict.getFirstFeedbackId());\n             Optional<Feedback> secondFeedback = feedbackRepository.findById(conflict.getSecondFeedbackId());\n-            List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findByFirstAndSecondFeedback(conflict.getFirstFeedbackId(),\n-                    conflict.getSecondFeedbackId());\n+            List<FeedbackConflict> storedConflicts = this.feedbackConflictRepository.findByFirstAndSecondFeedback(conflict.getFirstFeedbackId(), conflict.getSecondFeedbackId());\n             // if the found conflict is present but its type has changed, update it\n             if (!storedConflicts.isEmpty() && !storedConflicts.get(0).getType().equals(conflict.getType())) {\n                 storedConflicts.get(0).setType(conflict.getType());\n-                textAssessmentConflicts.add(storedConflicts.get(0));\n+                feedbackConflicts.add(storedConflicts.get(0));\n             }\n \n             // new conflict\n             if (firstFeedback.isPresent() && secondFeedback.isPresent() && storedConflicts.isEmpty()) {\n-                TextAssessmentConflict textAssessmentConflict = new TextAssessmentConflict();\n-                textAssessmentConflict.setConflict(true);\n-                textAssessmentConflict.setFirstFeedback(firstFeedback.get());\n-                textAssessmentConflict.setSecondFeedback(secondFeedback.get());\n-                textAssessmentConflict.setType(conflict.getType());\n-                textAssessmentConflict.setCreatedAt(ZonedDateTime.now());\n-                textAssessmentConflicts.add(textAssessmentConflict);\n+                FeedbackConflict feedbackConflict = new FeedbackConflict();\n+                feedbackConflict.setConflict(true);\n+                feedbackConflict.setFirstFeedback(firstFeedback.get());\n+                feedbackConflict.setSecondFeedback(secondFeedback.get());\n+                feedbackConflict.setType(conflict.getType());\n+                feedbackConflict.setCreatedAt(ZonedDateTime.now());\n+                feedbackConflicts.add(feedbackConflict);\n             }\n         });\n \n         // find solved conflicts and add them to list\n-        textAssessmentConflicts.addAll(this.findSolvedConflicts(textAssessmentConflictRequestDTOS, textAssessmentConflictResponseDTOS));\n+        feedbackConflicts.addAll(this.findSolvedConflicts(textFeedbackConflictRequestDTOS, feedbackConflictResponseDTOS));\n \n-        textAssessmentConflictRepository.saveAll(textAssessmentConflicts);\n+        feedbackConflictRepository.saveAll(feedbackConflicts);\n     }\n \n     /**\n      * Searches if the feedback that are sent to Athene already have conflicts in the database(storedConflicts),\n      * If the stored conflicts are not returned from Athene after the consistency check, it means that they are solved and set as solved.\n      *\n-     * @param textAssessmentConflictRequestDTOS the list sent to Athene for check\n-     * @param textAssessmentConflictResponseDTOS returned list with found conflicts.\n+     * @param textFeedbackConflictRequestDTOS the list sent to Athene for check\n+     * @param feedbackConflictResponseDTOS returned list with found conflicts.\n      * @return solved conflicts\n      */\n-    private List<TextAssessmentConflict> findSolvedConflicts(List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS,\n-            List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS) {\n-        List<Long> feedbackIds = textAssessmentConflictRequestDTOS.stream().map(TextAssessmentConflictRequestDTO::getFeedbackId).collect(toList());\n-        List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findAllByFeedbackList(feedbackIds);\n+    private List<FeedbackConflict> findSolvedConflicts(List<TextFeedbackConflictRequestDTO> textFeedbackConflictRequestDTOS,\n+            List<FeedbackConflictResponseDTO> feedbackConflictResponseDTOS) {\n+        List<Long> feedbackIds = textFeedbackConflictRequestDTOS.stream().map(TextFeedbackConflictRequestDTO::getFeedbackId).collect(toList());\n+        List<FeedbackConflict> storedConflicts = this.feedbackConflictRepository.findAllByFeedbackList(feedbackIds);\n \n         storedConflicts.forEach(conflict -> {\n-            boolean isPresent = textAssessmentConflictResponseDTOS.stream().anyMatch(newConflicts -> (newConflicts.getFirstFeedbackId() == conflict.getFirstFeedback().getId()\n+            boolean isPresent = feedbackConflictResponseDTOS.stream().anyMatch(newConflicts -> (newConflicts.getFirstFeedbackId() == conflict.getFirstFeedback().getId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441ba2b77de1130f77504b89fd79298171849323"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4240, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}