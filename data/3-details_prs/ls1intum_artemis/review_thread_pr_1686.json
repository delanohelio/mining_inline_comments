{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTgyOTM4", "number": 1686, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjowODozMFrOEHTe_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoyMTowNFrOEHpKGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDk0NzE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjowODozMFrOGmnN4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDozODowN1rOGmrJmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw==", "bodyText": "I don't understand why this test fails: Response status expected:<201> but was:<403>\nDoes anyone have an idea?", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443141603", "createdAt": "2020-06-20T16:08:30Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -335,6 +602,26 @@ public void testGetQuizExercise_asStudent() throws Exception {\n         checkQuizExerciseForStudent(quizExerciseForStudent_Finished);\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamQuizExercise() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        QuizExercise quizExerciseGet = request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.OK, QuizExercise.class);\n+        checkQuizExercises(quizExercise, quizExerciseGet);\n+\n+        assertThat(quizExerciseGet).isEqualTo(quizExercise);\n+        assertThat(quizExerciseGet).as(\"Quiz exercise was retrieved\").isNotNull();\n+        assertThat(quizExerciseGet.getId()).as(\"Quiz exercise with the right id was retrieved\").isEqualTo(quizExerciseGet.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testGetExamQuizExercise_asTutor_forbidden() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+        request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.FORBIDDEN, QuizExercise.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e"}, "originalPosition": 341}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwMTM3Mg==", "bodyText": "Hi Jonas! I looked at your code. The problem is createQuizOnServerForExam. This creates the quiz using a POST, but a tutor has not the necessary rights to do this. In order to test this functionality, you should create the quiz exercise without a REST call in the database before trying to get it.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443201372", "createdAt": "2020-06-21T09:38:33Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -335,6 +602,26 @@ public void testGetQuizExercise_asStudent() throws Exception {\n         checkQuizExerciseForStudent(quizExerciseForStudent_Finished);\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamQuizExercise() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        QuizExercise quizExerciseGet = request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.OK, QuizExercise.class);\n+        checkQuizExercises(quizExercise, quizExerciseGet);\n+\n+        assertThat(quizExerciseGet).isEqualTo(quizExercise);\n+        assertThat(quizExerciseGet).as(\"Quiz exercise was retrieved\").isNotNull();\n+        assertThat(quizExerciseGet.getId()).as(\"Quiz exercise with the right id was retrieved\").isEqualTo(quizExerciseGet.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testGetExamQuizExercise_asTutor_forbidden() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+        request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.FORBIDDEN, QuizExercise.class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw=="}, "originalCommit": {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e"}, "originalPosition": 341}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNjA0Mw==", "bodyText": "Thanks for spotting this!", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443206043", "createdAt": "2020-06-21T10:38:07Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -335,6 +602,26 @@ public void testGetQuizExercise_asStudent() throws Exception {\n         checkQuizExerciseForStudent(quizExerciseForStudent_Finished);\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamQuizExercise() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        QuizExercise quizExerciseGet = request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.OK, QuizExercise.class);\n+        checkQuizExercises(quizExercise, quizExerciseGet);\n+\n+        assertThat(quizExerciseGet).isEqualTo(quizExercise);\n+        assertThat(quizExerciseGet).as(\"Quiz exercise was retrieved\").isNotNull();\n+        assertThat(quizExerciseGet.getId()).as(\"Quiz exercise with the right id was retrieved\").isEqualTo(quizExerciseGet.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testGetExamQuizExercise_asTutor_forbidden() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+        request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.FORBIDDEN, QuizExercise.class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw=="}, "originalCommit": {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e"}, "originalPosition": 341}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzgzMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MDoxN1rOGnBfEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1NDozN1rOGnNDoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTk4NA==", "bodyText": "We changed loading of Exercise -> ExerciseGroup -> Exam -> Course to Eager loading in a recent PR.\nquizExercise.getExerciseGroup().getExam().getCourse() should be sufficient here.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443571984", "createdAt": "2020-06-22T13:50:17Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTU2OA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443761568", "createdAt": "2020-06-22T18:54:37Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTk4NA=="}, "originalCommit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzg0NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MzoyMVrOGnBnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1NTowMVrOGnNElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NDA4Nw==", "bodyText": "We don't need this anymore because of the point mentioned above.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443574087", "createdAt": "2020-06-22T13:53:21Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());\n+            Course course = exerciseGroup.getExam().getCourse();\n+\n+            if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {\n+                return forbidden();\n+            }\n+            // Set the exerciseGroup, exam and course so that the client can work with those ids", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTgxMg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443761812", "createdAt": "2020-06-22T18:55:01Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());\n+            Course course = exerciseGroup.getExam().getCourse();\n+\n+            if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {\n+                return forbidden();\n+            }\n+            // Set the exerciseGroup, exam and course so that the client can work with those ids", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NDA4Nw=="}, "originalCommit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzg4NzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMjo1OVrOGnCBsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1OTo0OFrOGnNOHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDg1MA==", "bodyText": "We introduced a new utility getter Exercise.getCourseViaExerciseGroupOrCourseMember, which executes this case distinction. You could use this instead of the whole if, else block.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443580850", "createdAt": "2020-06-22T14:02:59Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -337,20 +374,30 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<Void> deleteQuizExercise(@PathVariable Long quizExerciseId) {\n         log.info(\"REST request to delete QuizExercise : {}\", quizExerciseId);\n-        Optional<QuizExercise> quizExercise = quizExerciseService.findById(quizExerciseId);\n-        if (quizExercise.isEmpty()) {\n+        Optional<QuizExercise> quizExerciseOptional = quizExerciseService.findById(quizExerciseId);\n+        if (quizExerciseOptional.isEmpty()) {\n             return notFound();\n         }\n-        Course course = quizExercise.get().getCourse();\n+\n+        // If the exercise belongs to an exam, the course must be retrieved over the exerciseGroup\n+        QuizExercise quizExercise = quizExerciseOptional.get();\n+        Course course;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NDI1NQ==", "bodyText": "Resolved in merge", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443764255", "createdAt": "2020-06-22T18:59:48Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -337,20 +374,30 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<Void> deleteQuizExercise(@PathVariable Long quizExerciseId) {\n         log.info(\"REST request to delete QuizExercise : {}\", quizExerciseId);\n-        Optional<QuizExercise> quizExercise = quizExerciseService.findById(quizExerciseId);\n-        if (quizExercise.isEmpty()) {\n+        Optional<QuizExercise> quizExerciseOptional = quizExerciseService.findById(quizExerciseId);\n+        if (quizExerciseOptional.isEmpty()) {\n             return notFound();\n         }\n-        Course course = quizExercise.get().getCourse();\n+\n+        // If the exercise belongs to an exam, the course must be retrieved over the exerciseGroup\n+        QuizExercise quizExercise = quizExerciseOptional.get();\n+        Course course;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDg1MA=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM3MDA3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0OTozMFrOGnGuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1ODo1MVrOGnNMRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1Nzg5OA==", "bodyText": "Do we need this block? It seems like we call init() if it is an exam or a course exercise.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443657898", "createdAt": "2020-06-22T15:49:30Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.ts", "diffHunk": "@@ -134,14 +144,27 @@ export class QuizExerciseDetailComponent implements OnInit, OnChanges, Component\n         this.shortAnswerFilterEnabled = true;\n         this.notificationText = null;\n \n-        const courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\n         const quizId = Number(this.route.snapshot.paramMap.get('exerciseId'));\n+        const groupId = Number(this.route.snapshot.paramMap.get('groupId'));\n         /** Query the courseService for the participationId given by the params */\n-        if (courseId) {\n-            this.courseService.find(courseId).subscribe((response: HttpResponse<Course>) => {\n+        if (this.courseId) {\n+            this.courseService.find(this.courseId).subscribe((response: HttpResponse<Course>) => {\n                 this.course = response.body!;\n+                // Load exerciseGroup and set exam mode\n+                if (this.examId && groupId) {\n+                    this.isExamMode = true;\n+                    this.exerciseGroupService.find(this.courseId!, this.examId, groupId).subscribe((groupResponse: HttpResponse<ExerciseGroup>) => {\n+                        // Make sure to call init if we didn't receive an id => new quiz-exercise\n+                        this.exerciseGroup = groupResponse.body!;\n+                        if (!quizId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4NDYzMA==", "bodyText": "Yes we need it because we need to wait for the callback", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443684630", "createdAt": "2020-06-22T16:31:10Z", "author": {"login": "JonasPetry"}, "path": "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.ts", "diffHunk": "@@ -134,14 +144,27 @@ export class QuizExerciseDetailComponent implements OnInit, OnChanges, Component\n         this.shortAnswerFilterEnabled = true;\n         this.notificationText = null;\n \n-        const courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\n         const quizId = Number(this.route.snapshot.paramMap.get('exerciseId'));\n+        const groupId = Number(this.route.snapshot.paramMap.get('groupId'));\n         /** Query the courseService for the participationId given by the params */\n-        if (courseId) {\n-            this.courseService.find(courseId).subscribe((response: HttpResponse<Course>) => {\n+        if (this.courseId) {\n+            this.courseService.find(this.courseId).subscribe((response: HttpResponse<Course>) => {\n                 this.course = response.body!;\n+                // Load exerciseGroup and set exam mode\n+                if (this.examId && groupId) {\n+                    this.isExamMode = true;\n+                    this.exerciseGroupService.find(this.courseId!, this.examId, groupId).subscribe((groupResponse: HttpResponse<ExerciseGroup>) => {\n+                        // Make sure to call init if we didn't receive an id => new quiz-exercise\n+                        this.exerciseGroup = groupResponse.body!;\n+                        if (!quizId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1Nzg5OA=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2Mzc4MA==", "bodyText": "If it works, then it is ok for now :)", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443763780", "createdAt": "2020-06-22T18:58:51Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.ts", "diffHunk": "@@ -134,14 +144,27 @@ export class QuizExerciseDetailComponent implements OnInit, OnChanges, Component\n         this.shortAnswerFilterEnabled = true;\n         this.notificationText = null;\n \n-        const courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\n         const quizId = Number(this.route.snapshot.paramMap.get('exerciseId'));\n+        const groupId = Number(this.route.snapshot.paramMap.get('groupId'));\n         /** Query the courseService for the participationId given by the params */\n-        if (courseId) {\n-            this.courseService.find(courseId).subscribe((response: HttpResponse<Course>) => {\n+        if (this.courseId) {\n+            this.courseService.find(this.courseId).subscribe((response: HttpResponse<Course>) => {\n                 this.course = response.body!;\n+                // Load exerciseGroup and set exam mode\n+                if (this.examId && groupId) {\n+                    this.isExamMode = true;\n+                    this.exerciseGroupService.find(this.courseId!, this.examId, groupId).subscribe((groupResponse: HttpResponse<ExerciseGroup>) => {\n+                        // Make sure to call init if we didn't receive an id => new quiz-exercise\n+                        this.exerciseGroup = groupResponse.body!;\n+                        if (!quizId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1Nzg5OA=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQwMzY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NzoxN1rOGnHDZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo0ODo1NVrOGnJAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzIwNQ==", "bodyText": "empty space", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443663205", "createdAt": "2020-06-22T15:57:17Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTEyNw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443695127", "createdAt": "2020-06-22T16:48:55Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzIwNQ=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ0MjcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowNjozOVrOGnHbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODozNDo1OFrOGnMd6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTQ1MA==", "bodyText": "exerciseGroup is not used", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443669450", "createdAt": "2020-06-22T16:06:39Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MTkxNQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443751915", "createdAt": "2020-06-22T18:34:58Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTQ1MA=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1MDI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowODozNFrOGnHggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo0OToxM1rOGnJAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY1Ng==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670656", "createdAt": "2020-06-22T16:08:34Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTMxMQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443695311", "createdAt": "2020-06-22T16:49:13Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY1Ng=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1MDUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowODozOVrOGnHgqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo0OToxOVrOGnJBDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY5OQ==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670699", "createdAt": "2020-06-22T16:08:39Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTM3NA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443695374", "createdAt": "2020-06-22T16:49:19Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY5OQ=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1MTQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowODo1M1rOGnHhPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowODo1M1rOGnHhPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg0NA==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670844", "createdAt": "2020-06-22T16:08:53Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1MjAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowOTowMFrOGnHhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowOTowMFrOGnHhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDkzOQ==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670939", "createdAt": "2020-06-22T16:09:00Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1NzE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMDoyMFrOGnHk0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMDoyMFrOGnHk0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTc2MA==", "bodyText": "Move creation of the entity to ModelFactory", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443671760", "createdAt": "2020-06-22T16:10:20Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -242,6 +478,37 @@ private QuizExercise createQuizOnServer(ZonedDateTime releaseDate, ZonedDateTime\n         return quizExerciseServer;\n     }\n \n+    private QuizExercise createQuizOnServerForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ2NTk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMjo0NVrOGnHqbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo0NDoyM1rOGnI1-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzE5Ng==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443673196", "createdAt": "2020-06-22T16:12:45Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = ModelFactory.generateQuizExerciseForExam(now.minusDays(1), now.minusHours(2), exerciseGroup);\n+        quizExercise.setCourse(exerciseGroup.getExam().getCourse());\n+\n+        request.postWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjUzNw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443692537", "createdAt": "2020-06-22T16:44:23Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = ModelFactory.generateQuizExerciseForExam(now.minusDays(1), now.minusHours(2), exerciseGroup);\n+        quizExercise.setCourse(exerciseGroup.getExam().getCourse());\n+\n+        request.postWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzE5Ng=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ2NjMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMjo0OVrOGnHqnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo0NDowOFrOGnI1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzI0NQ==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443673245", "createdAt": "2020-06-22T16:12:49Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjQwNg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443692406", "createdAt": "2020-06-22T16:44:08Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzI0NQ=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ4NzI3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxODoyM1rOGnH3uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxODoyM1rOGnH3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NjYwMA==", "bodyText": "Could use a shared method to populate the exam and the course quiz exercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443676600", "createdAt": "2020-06-22T16:18:23Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -60,6 +60,21 @@ public static QuizExercise generateQuizExercise(ZonedDateTime releaseDate, Zoned\n         return quizExercise;\n     }\n \n+    public static QuizExercise generateQuizExerciseForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate, ExerciseGroup exerciseGroup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ5ODE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoyMTowNFrOGnH-oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1Nzo0NVrOGnNKQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA==", "bodyText": "Do we need this for exam quizzes? Probably not because the exercise won't be distributed by web sockets?", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443678368", "createdAt": "2020-06-22T16:21:04Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "diffHunk": "@@ -347,7 +347,7 @@ public void sendQuizExerciseToSubscribedClients(QuizExercise quizExercise, Strin\n             Class view = viewForStudentsInQuizExercise(quizExercise);\n             byte[] payload = objectMapper.writerWithView(view).writeValueAsBytes(quizExercise);\n             // For each change we send the same message. The client needs to decide how to handle the date based on the quiz status\n-            if (quizExercise.isVisibleToStudents()) {\n+            if (quizExercise.isVisibleToStudents() && quizExercise.hasCourse()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4NjcwNQ==", "bodyText": "I've added this to make sure that it is not called with an exam exercise. We don't really need it, but I thought it might be a good idea to prevent any errors that could happen due to setting the course to null", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443686705", "createdAt": "2020-06-22T16:34:28Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "diffHunk": "@@ -347,7 +347,7 @@ public void sendQuizExerciseToSubscribedClients(QuizExercise quizExercise, Strin\n             Class view = viewForStudentsInQuizExercise(quizExercise);\n             byte[] payload = objectMapper.writerWithView(view).writeValueAsBytes(quizExercise);\n             // For each change we send the same message. The client needs to decide how to handle the date based on the quiz status\n-            if (quizExercise.isVisibleToStudents()) {\n+            if (quizExercise.isVisibleToStudents() && quizExercise.hasCourse()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MzI2NQ==", "bodyText": "I think this is ok", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443763265", "createdAt": "2020-06-22T18:57:45Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "diffHunk": "@@ -347,7 +347,7 @@ public void sendQuizExerciseToSubscribedClients(QuizExercise quizExercise, Strin\n             Class view = viewForStudentsInQuizExercise(quizExercise);\n             byte[] payload = objectMapper.writerWithView(view).writeValueAsBytes(quizExercise);\n             // For each change we send the same message. The client needs to decide how to handle the date based on the quiz status\n-            if (quizExercise.isVisibleToStudents()) {\n+            if (quizExercise.isVisibleToStudents() && quizExercise.hasCourse()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA=="}, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4904, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}