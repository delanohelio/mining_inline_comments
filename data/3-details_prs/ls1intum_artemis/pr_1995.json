{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjI3OTY1", "number": 1995, "title": "Plagiarism checks for programming exercises", "bodyText": "Use JPlag and return the html output as zip file.\nFixes #1781\nChecklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n\nMotivation and Context\nWe would like to simplify plagiarism checks for programming exercises\nDescription\nThis can be done using JPlag with one click now.\nNote: I left some TODOs for future improvements. We would also like to show the results directly on Artemis in the future, but this will be much more additional effort.\nSteps for Testing\n\nCreate and participate in programming exercises (Java, C, Python) with multiple users\nNavigate into the View screen for the programming exercise\nScroll down and click on Check plagiarism\nThis will take a few seconds (or minutes for many participants)\nUnzip the downloaded zip file and check the index.html for valid entries.\n\nPlease also double check that exporting submissions for text, modeling, file upload and programming exercises still works. I refactored some code and it should not break the functionality!\nScreenshots", "createdAt": "2020-08-05T08:22:29Z", "url": "https://github.com/ls1intum/Artemis/pull/1995", "merged": true, "mergeCommit": {"oid": "2d225177d566cfb4e6b46cadf2782995e414afd8"}, "closed": true, "closedAt": "2020-08-06T14:59:20Z", "author": {"login": "krusche"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc70xz2gH2gAyNDYzMjI3OTY1OjNjZmM3ODExYjhhMzVlZjMwNGY4NDVhYWRhYTA0YjgxMDRjY2VmN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8RHDtAFqTQ2MjYwMTY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3cfc7811b8a35ef304f845aadaa04b8104ccef7a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/3cfc7811b8a35ef304f845aadaa04b8104ccef7a", "committedDate": "2020-08-05T05:57:05Z", "message": "add plagiarism check for programming exercises using JPlag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f024eb5f3ba0cc34128be4e30c68f3c0da9d36e4", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/f024eb5f3ba0cc34128be4e30c68f3c0da9d36e4", "committedDate": "2020-08-05T07:09:13Z", "message": "refactor zip util service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ef5a03a3660c995d4fc9f39f6292cd3c98554d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e8ef5a03a3660c995d4fc9f39f6292cd3c98554d", "committedDate": "2020-08-05T07:53:17Z", "message": "fix warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNDkxNTc3", "url": "https://github.com/ls1intum/Artemis/pull/1995#pullrequestreview-461491577", "createdAt": "2020-08-05T09:25:19Z", "commit": {"oid": "e8ef5a03a3660c995d4fc9f39f6292cd3c98554d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2202db9899161f18be9e38be9c3788fc62bd7a68", "committedDate": "2020-08-05T11:08:17Z", "message": "fix refactoring mistake"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTk4Mzk2", "url": "https://github.com/ls1intum/Artemis/pull/1995#pullrequestreview-461598396", "createdAt": "2020-08-05T12:03:27Z", "commit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzcxMTky", "url": "https://github.com/ls1intum/Artemis/pull/1995#pullrequestreview-461771192", "createdAt": "2020-08-05T15:21:49Z", "commit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMTo0OVrOG8OotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjowOFrOG8PEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzU0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n          \n          \n            \n                    if (programmingExercise.isPresent()) {\n          \n          \n            \n                        return programmingExercise.get();\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        throw new EntityNotFoundException(\"programming exercise not found\");\n          \n          \n            \n                    }\n          \n          \n            \n                    return programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId)\n          \n          \n            \n                        .orElseThrow(() -> new EntityNotFoundException(\"programming exercise not found\"));", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465807540", "createdAt": "2020-08-05T15:21:49Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java", "diffHunk": "@@ -480,6 +485,23 @@ public ProgrammingExercise findByIdWithEagerStudentParticipations(long programmi\n         }\n     }\n \n+    /**\n+     * Find a programming exercise by its id, with eagerly loaded studentParticipations, template and solution participation\n+     *\n+     * @param programmingExerciseId of the programming exercise.\n+     * @return The programming exercise related to the given id\n+     * @throws EntityNotFoundException the programming exercise could not be found.\n+     */\n+    public ProgrammingExercise findByIdWithAllParticipations(long programmingExerciseId) throws EntityNotFoundException {\n+        Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n+        if (programmingExercise.isPresent()) {\n+            return programmingExercise.get();\n+        }\n+        else {\n+            throw new EntityNotFoundException(\"programming exercise not found\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMDg1MQ==", "bodyText": "If I run this while an exercise is still open: Would this discard changes in the online code editor?", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465810851", "createdAt": "2020-08-05T15:26:34Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMzgxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n          \n          \n            \n                            : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n          \n          \n            \n                    var outputFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey + \"-\" + output;", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465813819", "createdAt": "2020-08-05T15:30:52Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state\n+\n+                // TODO: offer the following options in the client\n+                // 1) filter empty submissions, i.e. repositories with no student commits\n+                // 2) filter submissions with a result score of 0%\n+\n+                repo.close();\n+            }\n+            catch (GitException | GitAPIException | InterruptedException ex) {\n+                log.error(\"clone student repository \" + programmingExerciseParticipation.getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                        + \"' did not work as expected: \" + ex.getMessage());\n+            }\n+        });\n+\n+        var output = \"output\";\n+        var templateRepoName = \"\";\n+        // clone the template repo\n+        try {\n+            Repository templateRepo = gitService.getOrCheckoutRepository(programmingExercise.getTemplateParticipation(), REPO_DOWNLOAD_CLONE_PATH);\n+            templateRepoName = versionControlService.get().getRepositorySlugFromUrl(programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl());\n+            gitService.resetToOriginMaster(templateRepo); // start with clean state\n+            templateRepo.close();\n+        }\n+        catch (GitException | GitAPIException | InterruptedException ex) {\n+            log.error(\"clone template repository \" + programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                    + \"' did not work as expected: \" + ex.getMessage());\n+        }\n+\n+        var projectKey = programmingExercise.getProjectKey();\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n+                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNDY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var repoFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey;\n          \n          \n            \n                    var repoFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey;", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465814669", "createdAt": "2020-08-05T15:32:08Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state\n+\n+                // TODO: offer the following options in the client\n+                // 1) filter empty submissions, i.e. repositories with no student commits\n+                // 2) filter submissions with a result score of 0%\n+\n+                repo.close();\n+            }\n+            catch (GitException | GitAPIException | InterruptedException ex) {\n+                log.error(\"clone student repository \" + programmingExerciseParticipation.getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                        + \"' did not work as expected: \" + ex.getMessage());\n+            }\n+        });\n+\n+        var output = \"output\";\n+        var templateRepoName = \"\";\n+        // clone the template repo\n+        try {\n+            Repository templateRepo = gitService.getOrCheckoutRepository(programmingExercise.getTemplateParticipation(), REPO_DOWNLOAD_CLONE_PATH);\n+            templateRepoName = versionControlService.get().getRepositorySlugFromUrl(programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl());\n+            gitService.resetToOriginMaster(templateRepo); // start with clean state\n+            templateRepo.close();\n+        }\n+        catch (GitException | GitAPIException | InterruptedException ex) {\n+            log.error(\"clone template repository \" + programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                    + \"' did not work as expected: \" + ex.getMessage());\n+        }\n+\n+        var projectKey = programmingExercise.getProjectKey();\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n+                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n+\n+        File outputFolderFile = new File(outputFolder);\n+        outputFolderFile.mkdirs();\n+\n+        var programmingLanguage = \"\";\n+        switch (programmingExercise.getProgrammingLanguage()) {\n+            case JAVA:\n+                programmingLanguage = \"java19\";\n+                break;\n+            case C:\n+                programmingLanguage = \"c\";\n+                break;\n+            case PYTHON:\n+                programmingLanguage = \"python3\";\n+                break;\n+        }\n+\n+        var repoFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d8529f4a3a6964d4e98bdbd3da46cacb049192", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/49d8529f4a3a6964d4e98bdbd3da46cacb049192", "committedDate": "2020-08-06T07:17:41Z", "message": "implement suggestions in PR reviews. Thank you\n\nAlso removed unnecessary $window variable in download.util"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bfa76e27d6cf2bd82d91152261b29e0b06a2d7a", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1bfa76e27d6cf2bd82d91152261b29e0b06a2d7a", "committedDate": "2020-08-06T07:56:11Z", "message": "remove WindowRef"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d798b28eac2133801a0abfac08f52f9286ffc25", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6d798b28eac2133801a0abfac08f52f9286ffc25", "committedDate": "2020-08-06T08:27:49Z", "message": "fix warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b032ce7e5fb315721f170deb6b0ee857e2e0a2b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8b032ce7e5fb315721f170deb6b0ee857e2e0a2b", "committedDate": "2020-08-06T08:55:17Z", "message": "fix jplag for c programming exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975c6dc05c42056e198d944c7e37f12b412edd40", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/975c6dc05c42056e198d944c7e37f12b412edd40", "committedDate": "2020-08-06T09:03:30Z", "message": "fix codacy issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ffb45bb255f4582aa21ad38f11767efcf30c727", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1ffb45bb255f4582aa21ad38f11767efcf30c727", "committedDate": "2020-08-06T09:35:35Z", "message": "refactor long method into multiple ones"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca2efa39cb8fc83db183fd9c22d81bec959923da", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/ca2efa39cb8fc83db183fd9c22d81bec959923da", "committedDate": "2020-08-06T09:43:09Z", "message": "Merge branch 'develop' into feature/jplag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ccbad910b925d567416f71f0ff646c5e5311df", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d6ccbad910b925d567416f71f0ff646c5e5311df", "committedDate": "2020-08-06T09:54:35Z", "message": "further code improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867d7d8ee131335773460c919e311192252a82e3", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/867d7d8ee131335773460c919e311192252a82e3", "committedDate": "2020-08-06T09:54:42Z", "message": "Merge branch 'feature/jplag' of https://github.com/ls1intum/Artemis into feature/jplag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052c9e160f67b12588b691e427c84dd5c084e2e5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/052c9e160f67b12588b691e427c84dd5c084e2e5", "committedDate": "2020-08-06T10:44:42Z", "message": "fix doc issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9a150990123ece58edeb4e4581db170f168f533", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b9a150990123ece58edeb4e4581db170f168f533", "committedDate": "2020-08-06T10:45:01Z", "message": "Merge branch 'develop' into feature/jplag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "844a5f20090634c3834a6a439e65c8df693d08ca", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/844a5f20090634c3834a6a439e65c8df693d08ca", "committedDate": "2020-08-06T11:26:46Z", "message": "Merge branch 'develop' into feature/jplag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35fe2c3bedd4bf7ac1b382acdd9c5c65ca344f21", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/35fe2c3bedd4bf7ac1b382acdd9c5c65ca344f21", "committedDate": "2020-08-06T11:54:28Z", "message": "improve code quality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDg3MzM4", "url": "https://github.com/ls1intum/Artemis/pull/1995#pullrequestreview-462487338", "createdAt": "2020-08-06T12:51:59Z", "commit": {"oid": "35fe2c3bedd4bf7ac1b382acdd9c5c65ca344f21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "139286cb954ce87301683f57739e705f55db0bc3", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/139286cb954ce87301683f57739e705f55db0bc3", "committedDate": "2020-08-06T13:15:58Z", "message": "Merge branch 'develop' into feature/jplag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjAxNjY0", "url": "https://github.com/ls1intum/Artemis/pull/1995#pullrequestreview-462601664", "createdAt": "2020-08-06T14:57:38Z", "commit": {"oid": "139286cb954ce87301683f57739e705f55db0bc3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4452, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}