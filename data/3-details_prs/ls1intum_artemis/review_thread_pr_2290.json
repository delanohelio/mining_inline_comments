{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNzM1ODk2", "number": 2290, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1NzowN1rOEzEj4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjoxOTowMFrOEzE8ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg3NTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1NzowN1rOHqEWZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo0MzoxNlrOHqaAXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MzUxMQ==", "bodyText": "I don't think you need JsonIgnore for a method named \"create...\". Jackson should ignore this by default.", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r513873511", "createdAt": "2020-10-29T01:57:07Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "diffHunk": "@@ -137,6 +137,24 @@ public void setResultString(Double totalScore, @Nullable Double maxScore) {\n         }\n     }\n \n+    /**\n+     * Builds a part of the result string of manual results for programming exercises\n+     *\n+     * @param totalScore total amount of scored points\n+     * @param maxScore   maximum score reachable at corresponding exercise\n+     * @return String with result string for manual result of a progrmaming exercise\n+     */\n+    @JsonIgnore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyODMxOA==", "bodyText": "Fixed in 5a4957277", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r514228318", "createdAt": "2020-10-29T12:43:16Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "diffHunk": "@@ -137,6 +137,24 @@ public void setResultString(Double totalScore, @Nullable Double maxScore) {\n         }\n     }\n \n+    /**\n+     * Builds a part of the result string of manual results for programming exercises\n+     *\n+     * @param totalScore total amount of scored points\n+     * @param maxScore   maximum score reachable at corresponding exercise\n+     * @return String with result string for manual result of a progrmaming exercise\n+     */\n+    @JsonIgnore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MzUxMQ=="}, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg3OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODo0MlrOHqEZJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo0MzoyMlrOHqaAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDIxNA==", "bodyText": "This seems like a duplication of lines 130-138. You could call the create method within the set method.", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r513874214", "createdAt": "2020-10-29T01:58:42Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "diffHunk": "@@ -137,6 +137,24 @@ public void setResultString(Double totalScore, @Nullable Double maxScore) {\n         }\n     }\n \n+    /**\n+     * Builds a part of the result string of manual results for programming exercises\n+     *\n+     * @param totalScore total amount of scored points\n+     * @param maxScore   maximum score reachable at corresponding exercise\n+     * @return String with result string for manual result of a progrmaming exercise\n+     */\n+    @JsonIgnore\n+    public String createResultStringForManualResult(Double totalScore, @Nullable Double maxScore) {\n+        DecimalFormat formatter = new DecimalFormat(\"#.##\");\n+        if (maxScore == null) {\n+            return formatter.format(totalScore) + \" points\";\n+        }\n+        else {\n+            return formatter.format(totalScore) + \" of \" + formatter.format(maxScore) + \" points\";\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyODM4Mg==", "bodyText": "Good catch! Thanks! Fixed in 5a4957277", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r514228382", "createdAt": "2020-10-29T12:43:22Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "diffHunk": "@@ -137,6 +137,24 @@ public void setResultString(Double totalScore, @Nullable Double maxScore) {\n         }\n     }\n \n+    /**\n+     * Builds a part of the result string of manual results for programming exercises\n+     *\n+     * @param totalScore total amount of scored points\n+     * @param maxScore   maximum score reachable at corresponding exercise\n+     * @return String with result string for manual result of a progrmaming exercise\n+     */\n+    @JsonIgnore\n+    public String createResultStringForManualResult(Double totalScore, @Nullable Double maxScore) {\n+        DecimalFormat formatter = new DecimalFormat(\"#.##\");\n+        if (maxScore == null) {\n+            return formatter.format(totalScore) + \" points\";\n+        }\n+        else {\n+            return formatter.format(totalScore) + \" of \" + formatter.format(maxScore) + \" points\";\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3NDIxNA=="}, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTkxMzIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjoxMDoyM1rOHqEtSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo1MTo1NFrOHqaU_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3OTM2OQ==", "bodyText": "Do we need the exercise type case distinction here? If ProgrammingAssessmentService inherits from AssessmentService, you should override updateAssessmentAfterComplaint and call it on the child class.", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r513879369", "createdAt": "2020-10-29T02:10:23Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -109,8 +109,22 @@ public Result updateAssessmentAfterComplaint(Result originalResult, Exercise exe\n \n         // Update the result that was complained about with the new feedback\n         originalResult.updateAllFeedbackItems(assessmentUpdate.getFeedbacks());\n-        Double calculatedScore = calculateTotalScore(originalResult.getFeedbacks());\n-        return submitResult(originalResult, exercise, calculatedScore);\n+        if (exercise instanceof ProgrammingExercise) {\n+            double points = ((ProgrammingAssessmentService) this).calculateTotalScore(originalResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMDg3MQ==", "bodyText": "I cannot override the method as there is no calculateTotalScore(Result result) in AssessmentService and we need it that way only for programming exercises we have a special way on calculating the points the student has :)", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r514230871", "createdAt": "2020-10-29T12:47:27Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -109,8 +109,22 @@ public Result updateAssessmentAfterComplaint(Result originalResult, Exercise exe\n \n         // Update the result that was complained about with the new feedback\n         originalResult.updateAllFeedbackItems(assessmentUpdate.getFeedbacks());\n-        Double calculatedScore = calculateTotalScore(originalResult.getFeedbacks());\n-        return submitResult(originalResult, exercise, calculatedScore);\n+        if (exercise instanceof ProgrammingExercise) {\n+            double points = ((ProgrammingAssessmentService) this).calculateTotalScore(originalResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3OTM2OQ=="}, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMzU5Nw==", "bodyText": "I understand your point, but it is basically then code duplication except of the last part isn't it? Therefore, I thought to avoid it :)", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r514233597", "createdAt": "2020-10-29T12:51:54Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -109,8 +109,22 @@ public Result updateAssessmentAfterComplaint(Result originalResult, Exercise exe\n \n         // Update the result that was complained about with the new feedback\n         originalResult.updateAllFeedbackItems(assessmentUpdate.getFeedbacks());\n-        Double calculatedScore = calculateTotalScore(originalResult.getFeedbacks());\n-        return submitResult(originalResult, exercise, calculatedScore);\n+        if (exercise instanceof ProgrammingExercise) {\n+            double points = ((ProgrammingAssessmentService) this).calculateTotalScore(originalResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3OTM2OQ=="}, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTkzODI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingAssessmentResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjoxOTowMFrOHqE8wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjozMjowNVrOHqZmog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg4MzMyOA==", "bodyText": "I'd suggest moving the validation of newResult as far up as possible in the method. Validation should be done before services are used.", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r513883328", "createdAt": "2020-10-29T02:19:00Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingAssessmentResource.java", "diffHunk": "@@ -144,7 +144,19 @@ public ProgrammingAssessmentResource(AuthorizationCheckService authCheckService,\n             return forbidden();\n         }\n \n-        if (newResult.getScore() != null && newResult.getScore() < 100 && newResult.isSuccessful()) {\n+        if (Boolean.FALSE.equals(newResult.isRated())) {\n+            throw new BadRequestAlertException(\"Result is not rated\", ENTITY_NAME, \"resultNotRated\");\n+        }\n+        if (newResult.getResultString() == null) {\n+            throw new BadRequestAlertException(\"Result string is required.\", ENTITY_NAME, \"resultStringNull\");\n+        }\n+        else if (newResult.getResultString().length() > 255) {\n+            throw new BadRequestAlertException(\"Result string is too long.\", ENTITY_NAME, \"resultStringNull\");\n+        }\n+        else if (newResult.getScore() == null) {\n+            throw new BadRequestAlertException(\"Score is required.\", ENTITY_NAME, \"scoreNull\");\n+        }\n+        else if (newResult.getScore() < 100 && newResult.isSuccessful()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyMTczMA==", "bodyText": "The calls which are done before are also checks, e.g. if the user has enough roles etc. I would leave it like it is, as I think it is equally important to check if he has the rights to submit/save a result or that the result has the correct format. :)", "url": "https://github.com/ls1intum/Artemis/pull/2290#discussion_r514221730", "createdAt": "2020-10-29T12:32:05Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingAssessmentResource.java", "diffHunk": "@@ -144,7 +144,19 @@ public ProgrammingAssessmentResource(AuthorizationCheckService authCheckService,\n             return forbidden();\n         }\n \n-        if (newResult.getScore() != null && newResult.getScore() < 100 && newResult.isSuccessful()) {\n+        if (Boolean.FALSE.equals(newResult.isRated())) {\n+            throw new BadRequestAlertException(\"Result is not rated\", ENTITY_NAME, \"resultNotRated\");\n+        }\n+        if (newResult.getResultString() == null) {\n+            throw new BadRequestAlertException(\"Result string is required.\", ENTITY_NAME, \"resultStringNull\");\n+        }\n+        else if (newResult.getResultString().length() > 255) {\n+            throw new BadRequestAlertException(\"Result string is too long.\", ENTITY_NAME, \"resultStringNull\");\n+        }\n+        else if (newResult.getScore() == null) {\n+            throw new BadRequestAlertException(\"Score is required.\", ENTITY_NAME, \"scoreNull\");\n+        }\n+        else if (newResult.getScore() < 100 && newResult.isSuccessful()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg4MzMyOA=="}, "originalCommit": {"oid": "3868fd5c7c90764385e092d06429c0803600de8b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4368, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}