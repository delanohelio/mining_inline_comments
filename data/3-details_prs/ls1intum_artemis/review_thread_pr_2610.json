{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NDE4OTQ0", "number": 2610, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowMzo0M1rOFK2dIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODowMjoyMFrOFL2Bxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTIyMjc1OnYy", "diffSide": "LEFT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowMzo0M1rOINtqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxNjowN1rOIOdlHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MDYzOA==", "bodyText": "How to you ensure that only assessments which do not have a manual result are selected if you remove this?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551250638", "createdAt": "2021-01-04T11:03:43Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -117,26 +117,41 @@\n     Optional<StudentParticipation> findByExerciseIdAndTeamIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n     /**\n+     * todo SE, NR: maybe re-add\n+     * 'and not exists (select prs from participation.results prs where prs.assessmentType IN ('MANUAL', 'SEMI_AUTOMATIC'))'\n+     *\n      * Find all participations of submissions that are submitted and do not already have a manual result and do not belong to test runs.\n      * No manual result means that no user has started an assessment for the corresponding submission yet.\n      *\n      * If a student can have multiple submissions per exercise type, the latest submission (by id) will be returned.\n      *\n+     * @param correctionRound the correction round the fetched results should belong to\n      * @param exerciseId the exercise id the participations should belong to\n      * @return a list of participations including their submitted submissions that do not have a manual result\n      */\n     @Query(\"\"\"\n             select distinct participation from StudentParticipation participation\n             left join fetch participation.submissions submission\n-            left join fetch submission.results result\n-            left join fetch result.feedbacks feedbacks\n+            left join fetch submission.results results\n+            left join fetch results.feedbacks feedbacks\n             where participation.exercise.id = :#{#exerciseId}\n+            and 0L = (SELECT COUNT(r2)\n+                             FROM Result r2 where r2.assessor IS NOT NULL\n+                                 AND (r2.rated IS NULL OR r2.rated = FALSE)\n+                                 AND r2.submission = submission)\n+            and\n+              :#{#correctionRound} = (SELECT COUNT(r)\n+                             FROM Result r where r.assessor IS NOT NULL\n+                                 AND r.rated = TRUE\n+                                 AND r.submission = submission\n+                                 AND r.completionDate IS NOT NULL AND\n+                                 (participation.exercise.dueDate IS NULL OR r.submission.submissionDate <= participation.exercise.dueDate))\n             and not exists (select prs from participation.results prs where prs.assessor.id = participation.student.id)\n-            and not exists (select prs from participation.results prs where prs.assessmentType IN ('MANUAL', 'SEMI_AUTOMATIC'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10c145bc3389b7086e2719393b9df875fd5cc12"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNTYxMg==", "bodyText": "We added it inside the subquery now", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552035612", "createdAt": "2021-01-05T16:16:07Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -117,26 +117,41 @@\n     Optional<StudentParticipation> findByExerciseIdAndTeamIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n     /**\n+     * todo SE, NR: maybe re-add\n+     * 'and not exists (select prs from participation.results prs where prs.assessmentType IN ('MANUAL', 'SEMI_AUTOMATIC'))'\n+     *\n      * Find all participations of submissions that are submitted and do not already have a manual result and do not belong to test runs.\n      * No manual result means that no user has started an assessment for the corresponding submission yet.\n      *\n      * If a student can have multiple submissions per exercise type, the latest submission (by id) will be returned.\n      *\n+     * @param correctionRound the correction round the fetched results should belong to\n      * @param exerciseId the exercise id the participations should belong to\n      * @return a list of participations including their submitted submissions that do not have a manual result\n      */\n     @Query(\"\"\"\n             select distinct participation from StudentParticipation participation\n             left join fetch participation.submissions submission\n-            left join fetch submission.results result\n-            left join fetch result.feedbacks feedbacks\n+            left join fetch submission.results results\n+            left join fetch results.feedbacks feedbacks\n             where participation.exercise.id = :#{#exerciseId}\n+            and 0L = (SELECT COUNT(r2)\n+                             FROM Result r2 where r2.assessor IS NOT NULL\n+                                 AND (r2.rated IS NULL OR r2.rated = FALSE)\n+                                 AND r2.submission = submission)\n+            and\n+              :#{#correctionRound} = (SELECT COUNT(r)\n+                             FROM Result r where r.assessor IS NOT NULL\n+                                 AND r.rated = TRUE\n+                                 AND r.submission = submission\n+                                 AND r.completionDate IS NOT NULL AND\n+                                 (participation.exercise.dueDate IS NULL OR r.submission.submissionDate <= participation.exercise.dueDate))\n             and not exists (select prs from participation.results prs where prs.assessor.id = participation.student.id)\n-            and not exists (select prs from participation.results prs where prs.assessmentType IN ('MANUAL', 'SEMI_AUTOMATIC'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MDYzOA=="}, "originalCommit": {"oid": "f10c145bc3389b7086e2719393b9df875fd5cc12"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTIyNjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowNDo1M1rOINts3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowNDo1M1rOINts3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MTE2Ng==", "bodyText": "This can be removed since it is not used", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551251166", "createdAt": "2021-01-04T11:04:53Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -37,6 +37,8 @@\n \n     private final FeedbackRepository feedbackRepository;\n \n+    private final ProgrammingExerciseRepository programmingExerciseRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10c145bc3389b7086e2719393b9df875fd5cc12"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTgyMDc2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoxNDoyM1rOINzIEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoyOTowMVrOIOF9JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MDA1MQ==", "bodyText": "Do we want to have a log here or was it for debugging purposes?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551340051", "createdAt": "2021-01-04T14:14:23Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,11 +68,13 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;\n+        let url = `api/exercises/${exerciseId}/round/${correctionRound}/modeling-submission-without-assessment`;\n         if (lock) {\n             url += '?lock=true';\n         }\n+        console.log('url', url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0ODU0OA==", "bodyText": "It was for debugging", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551648548", "createdAt": "2021-01-05T00:29:01Z", "author": {"login": "SimonEntholzer"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,11 +68,13 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;\n+        let url = `api/exercises/${exerciseId}/round/${correctionRound}/modeling-submission-without-assessment`;\n         if (lock) {\n             url += '?lock=true';\n         }\n+        console.log('url', url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MDA1MQ=="}, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTg0OTAxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyMToyN1rOINzYoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxMTo1NFrOIOdZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NDI4OQ==", "bodyText": "I am curious. I thinks this could be also shortened to correctionRound = correctionRound ?? 0;, or do i miss something?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551344289", "createdAt": "2021-01-04T14:21:27Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,11 +68,13 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1OTg2Ng==", "bodyText": "Thanks for the tip :D I didn't know this was possible", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551559866", "createdAt": "2021-01-04T20:47:31Z", "author": {"login": "SimonEntholzer"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,11 +68,13 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NDI4OQ=="}, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMjcwMw==", "bodyText": "It got mentioned in the meeting once, never had the chance to use it on my own, though. :D", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552032703", "createdAt": "2021-01-05T16:11:54Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,11 +68,13 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NDI4OQ=="}, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTg1MDIwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyMTo0MVrOINzZUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyMTo0MVrOINzZUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NDQ2Ng==", "bodyText": "Here as well, correctionRound = correctionRound ?? 0;", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551344466", "createdAt": "2021-01-04T14:21:41Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -535,22 +535,28 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n      * @param exerciseId the id of the exercise\n      * @param req request parameters\n      */\n-    getProgrammingSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+    getProgrammingSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+        correctionRound = correctionRound ? correctionRound : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTg1NzUzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyMzozOFrOINzduw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDoyMzozOFrOINzduw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NTU5NQ==", "bodyText": "Here as well, correctionRound = correctionRound ?? 0;. However it's just a subjective preference since it just looks odd having 3 x correctionRound. If this is juts me just remove the comment", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551345595", "createdAt": "2021-01-04T14:23:38Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -535,22 +535,28 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n      * @param exerciseId the id of the exercise\n      * @param req request parameters\n      */\n-    getProgrammingSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+    getProgrammingSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+        correctionRound = correctionRound ? correctionRound : 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<ProgrammingSubmission[]>(`api/exercises/${exerciseId}/programming-submissions`, {\n+            .get<ProgrammingSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/programming-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n-            .map((res: HttpResponse<ProgrammingSubmission[]>) => this.convertArrayResponse(res));\n+            .map((res: HttpResponse<ProgrammingSubmission[]>) => ProgrammingSubmissionService.convertArrayResponse(res));\n     }\n \n     /**\n      * Returns next programming submission without assessment from the server\n      * @param exerciseId the id of the exercise\n      */\n-    getProgrammingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock = false): Observable<ProgrammingSubmission> {\n-        let url = `api/exercises/${exerciseId}/programming-submission-without-assessment`;\n+    getProgrammingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock = false, correctionRound?: number): Observable<ProgrammingSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTg4NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDozMDo1MFrOINzuYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDozMDo1MFrOINzuYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0OTg1OA==", "bodyText": "Do we want a log here?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551349858", "createdAt": "2021-01-04T14:30:50Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "diffHunk": "@@ -40,22 +40,35 @@ export class TextSubmissionService {\n             .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\n     }\n \n-    getTextSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<TextSubmission[]>> {\n+    getTextSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<TextSubmission[]>> {\n+        correctionRound = correctionRound ? correctionRound : 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<TextSubmission[]>(`api/exercises/${exerciseId}/text-submissions`, {\n+            .get<TextSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/text-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n             .pipe(map((res: HttpResponse<TextSubmission[]>) => TextSubmissionService.convertArrayResponse(res)));\n     }\n \n-    // option = 'head': Do not optimize assessment order. Only used to check if assessments available.\n-    getTextSubmissionForExerciseWithoutAssessment(exerciseId: number, option?: 'lock' | 'head'): Observable<TextSubmission> {\n-        let url = `api/exercises/${exerciseId}/text-submission-without-assessment`;\n+    /**\n+     *\n+     * @param exerciseId id of the exerciser\n+     * @param option 'head': Do not optimize assessment order. Only used to check if assessments available.\n+     * @param correctionRound: The correction round for which we want to get a new assessment\n+     */\n+    getTextSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound?: number): Observable<TextSubmission> {\n+        correctionRound = correctionRound ? correctionRound : 0;\n+        console.log('get text submissionwithou assessemnt');\n+        let url = `api/exercises/${exerciseId}/round/${correctionRound}/text-submission-without-assessment`;\n         if (option) {\n             url += `?${option}=true`;\n         }\n+        console.log('url: ', url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba2942c795602bf2b31bcc075ace612f3e166d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYwOTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1Mjo1MVrOIOWHEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1Mjo1MVrOIOWHEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxMzIzMg==", "bodyText": "if this is a TODO for a follow-up, please write it as TODO: so it is consistent with other TODOs.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * todo SE, NR: maybe re-add\n          \n          \n            \n                 * TODO: SE, NR: maybe re-add", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551913232", "createdAt": "2021-01-05T12:52:51Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -117,11 +117,15 @@\n     Optional<StudentParticipation> findByExerciseIdAndTeamIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n     /**\n+     * todo SE, NR: maybe re-add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYxNTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1NDozOFrOIOWKng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1NDozOFrOIOWKng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDE0Mg==", "bodyText": "it would be nice to always have uppercase SQL commands:\nSELECT distinct participation.....\nLEFT JOIN FETCH participation ...", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551914142", "createdAt": "2021-01-05T12:54:38Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -131,12 +135,27 @@\n             left join fetch submission.results result\n             left join fetch result.feedbacks feedbacks\n             where participation.exercise.id = :#{#exerciseId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYyMTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1NjoyMFrOIOWOEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowNjo0NVrOIOfjEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNTAyNw==", "bodyText": "here it is mixed uppercase and lowercase commands. -> LEFT JOIN FETCH", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551915027", "createdAt": "2021-01-05T12:56:20Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -182,7 +208,20 @@ and not exists (select prs from participation.results prs where prs.assessmentTy\n     @EntityGraph(type = LOAD, attributePaths = { \"submissions\", \"submissions.results\", \"submissions.results.assessor\" })\n     List<StudentParticipation> findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(long exerciseId);\n \n-    @Query(\"SELECT DISTINCT p FROM StudentParticipation p left join fetch p.submissions s left join fetch s.results r left join fetch r.assessor a WHERE p.exercise.id = :#{#exerciseId} AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n+    // TODO SE: use correctionRound\n+    @Query(\"\"\"\n+            SELECT DISTINCT p FROM StudentParticipation p left join fetch p.submissions s left join fetch s.results r left join fetch r.assessor a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2Nzg1OA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552067858", "createdAt": "2021-01-05T17:06:45Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -182,7 +208,20 @@ and not exists (select prs from participation.results prs where prs.assessmentTy\n     @EntityGraph(type = LOAD, attributePaths = { \"submissions\", \"submissions.results\", \"submissions.results.assessor\" })\n     List<StudentParticipation> findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(long exerciseId);\n \n-    @Query(\"SELECT DISTINCT p FROM StudentParticipation p left join fetch p.submissions s left join fetch s.results r left join fetch r.assessor a WHERE p.exercise.id = :#{#exerciseId} AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n+    // TODO SE: use correctionRound\n+    @Query(\"\"\"\n+            SELECT DISTINCT p FROM StudentParticipation p left join fetch p.submissions s left join fetch s.results r left join fetch r.assessor a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNTAyNw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYyNTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1NzoyOVrOIOWQiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxNjo0M1rOIOdmwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNTY1Nw==", "bodyText": "is this split intended?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551915657", "createdAt": "2021-01-05T12:57:29Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "diffHunk": "@@ -355,7 +355,7 @@ public void cleanup(Long exerciseId, boolean deleteRepositories) {\n \n         }\n         else {\n-            log.warn(\"Exercise with exerciseId {} is not an instance of ProgrammingExercise. Ignoring the request to cleanup repositories and build plan\", exerciseId);\n+            log.warn(\"Exercise with exerciseId {} is not an instance of ProgrammingExercise. \" + \"Ignoring the request to cleanup repositories and build plan\", exerciseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNjAzMw==", "bodyText": "nope, we will remove it.", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552036033", "createdAt": "2021-01-05T16:16:43Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "diffHunk": "@@ -355,7 +355,7 @@ public void cleanup(Long exerciseId, boolean deleteRepositories) {\n \n         }\n         else {\n-            log.warn(\"Exercise with exerciseId {} is not an instance of ProgrammingExercise. Ignoring the request to cleanup repositories and build plan\", exerciseId);\n+            log.warn(\"Exercise with exerciseId {} is not an instance of ProgrammingExercise. \" + \"Ignoring the request to cleanup repositories and build plan\", exerciseId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNTY1Nw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYyODUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1ODoyMFrOIOWSNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxNzoxMlrOIOdoEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjA4Nw==", "bodyText": "use TODO: here", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551916087", "createdAt": "2021-01-05T12:58:20Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionService.java", "diffHunk": "@@ -668,10 +675,12 @@ public ProgrammingSubmission lockAndGetProgrammingSubmission(Long submissionId)\n      * Get a programming submission of the given exercise that still needs to be assessed and lock the submission to prevent other tutors from receiving and assessing it.\n      *\n      * @param exercise the exercise the submission should belong to\n+     * @param correctionRound - the correction round we want our submission to have results for\n      * @return a locked programming submission that needs an assessment\n+     * //todo NR: used to start assessemt via dashboard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNjM3MA==", "bodyText": "thanks!", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552036370", "createdAt": "2021-01-05T16:17:12Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingSubmissionService.java", "diffHunk": "@@ -668,10 +675,12 @@ public ProgrammingSubmission lockAndGetProgrammingSubmission(Long submissionId)\n      * Get a programming submission of the given exercise that still needs to be assessed and lock the submission to prevent other tutors from receiving and assessing it.\n      *\n      * @param exercise the exercise the submission should belong to\n+     * @param correctionRound - the correction round we want our submission to have results for\n      * @return a locked programming submission that needs an assessment\n+     * //todo NR: used to start assessemt via dashboard", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjA4Nw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg0MDU3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/dashboards/assessment-dashboard/assessment-dashboard.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMDoyM1rOIOYRfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyMjozM1rOIOd1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0ODY3MQ==", "bodyText": "a nice comment explaining the mapping would be nice :)", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551948671", "createdAt": "2021-01-05T14:00:23Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/course/dashboards/assessment-dashboard/assessment-dashboard.component.ts", "diffHunk": "@@ -164,6 +164,9 @@ export class AssessmentDashboardComponent implements OnInit, AfterViewInit {\n             const [finishedExercises, unfinishedExercises] = partition(\n                 exercises,\n                 (exercise) =>\n+                    exercise.numberOfAssessmentsOfCorrectionRounds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTgwNQ==", "bodyText": "We'll add that!", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552039805", "createdAt": "2021-01-05T16:22:33Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/course/dashboards/assessment-dashboard/assessment-dashboard.component.ts", "diffHunk": "@@ -164,6 +164,9 @@ export class AssessmentDashboardComponent implements OnInit, AfterViewInit {\n             const [finishedExercises, unfinishedExercises] = partition(\n                 exercises,\n                 (exercise) =>\n+                    exercise.numberOfAssessmentsOfCorrectionRounds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0ODY3MQ=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg0OTA5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/file-upload/participate/file-upload-submission.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMjo0MFrOIOYWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMjo0MFrOIOYWjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0OTk2Nw==", "bodyText": "You can simplify this approach by providing a default value.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                getFileUploadSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<FileUploadSubmission> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                getFileUploadSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound = 0): Observable<FileUploadSubmission> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551949967", "createdAt": "2021-01-05T14:02:40Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/file-upload/participate/file-upload-submission.service.ts", "diffHunk": "@@ -64,12 +70,13 @@ export class FileUploadSubmissionService {\n      * Returns next File Upload submission without assessment from the server\n      * @param exerciseId the id of the exercise\n      */\n-    getFileUploadSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<FileUploadSubmission> {\n-        let url = `api/exercises/${exerciseId}/file-upload-submission-without-assessment`;\n+    getFileUploadSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<FileUploadSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg1NDU0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowNDoxMFrOIOYZ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODo0NFrOIOeFcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MDgyNw==", "bodyText": "You can simplify it by using a default value of 0.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                getModelingSubmissionsForExerciseByCorrectionRound(exerciseId: number, req?: any, correctionRound?: number): Observable<HttpResponse<ModelingSubmission[]>> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                getModelingSubmissionsForExerciseByCorrectionRound(exerciseId: number, req?: any, correctionRound = 0): Observable<HttpResponse<ModelingSubmission[]>> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551950827", "createdAt": "2021-01-05T14:04:10Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -52,10 +52,11 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {any?} req - Request option\n      */\n-    getModelingSubmissionsForExercise(exerciseId: number, req?: any): Observable<HttpResponse<ModelingSubmission[]>> {\n+    getModelingSubmissionsForExerciseByCorrectionRound(exerciseId: number, req?: any, correctionRound?: number): Observable<HttpResponse<ModelingSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0Mzg4OA==", "bodyText": "thanks!", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552043888", "createdAt": "2021-01-05T16:28:44Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -52,10 +52,11 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {any?} req - Request option\n      */\n-    getModelingSubmissionsForExercise(exerciseId: number, req?: any): Observable<HttpResponse<ModelingSubmission[]>> {\n+    getModelingSubmissionsForExerciseByCorrectionRound(exerciseId: number, req?: any, correctionRound?: number): Observable<HttpResponse<ModelingSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MDgyNw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg1NjI1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowNDo0MFrOIOYa9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODozM1rOIOeFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MTA5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound = 0): Observable<ModelingSubmission> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551951094", "createdAt": "2021-01-05T14:04:40Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,8 +68,9 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0Mzc4MQ==", "bodyText": "we will do that!", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552043781", "createdAt": "2021-01-05T16:28:33Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/modeling/participate/modeling-submission.service.ts", "diffHunk": "@@ -67,8 +68,9 @@ export class ModelingSubmissionService {\n      * @param {number} exerciseId - Id of the exercise\n      * @param {boolean?} lock - True if assessment is locked\n      */\n-    getModelingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock?: boolean): Observable<ModelingSubmission> {\n-        let url = `api/exercises/${exerciseId}/modeling-submission-without-assessment`;\n+    getModelingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock?: boolean, correctionRound?: number): Observable<ModelingSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MTA5NA=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg2MDI0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowNTo1MVrOIOYdcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozMDoyNFrOIOeJ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MTcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    correctionRound?: number,\n          \n          \n            \n                ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                    correctionRound = 0,\n          \n          \n            \n                ): Observable<HttpResponse<ProgrammingSubmission[]>> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551951729", "createdAt": "2021-01-05T14:05:51Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -535,22 +535,28 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n      * @param exerciseId the id of the exercise\n      * @param req request parameters\n      */\n-    getProgrammingSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+    getProgrammingSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NTA0NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552045044", "createdAt": "2021-01-05T16:30:24Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -535,22 +535,28 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n      * @param exerciseId the id of the exercise\n      * @param req request parameters\n      */\n-    getProgrammingSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+    getProgrammingSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MTcyOQ=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg2MTM2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowNjowOFrOIOYeGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozMDoyMVrOIOeJ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MTg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                getProgrammingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock = false, correctionRound?: number): Observable<ProgrammingSubmission> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                getProgrammingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock = false, correctionRound = 0): Observable<ProgrammingSubmission> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551951898", "createdAt": "2021-01-05T14:06:08Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -535,22 +535,28 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n      * @param exerciseId the id of the exercise\n      * @param req request parameters\n      */\n-    getProgrammingSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+    getProgrammingSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<ProgrammingSubmission[]>(`api/exercises/${exerciseId}/programming-submissions`, {\n+            .get<ProgrammingSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/programming-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n-            .map((res: HttpResponse<ProgrammingSubmission[]>) => this.convertArrayResponse(res));\n+            .map((res: HttpResponse<ProgrammingSubmission[]>) => ProgrammingSubmissionService.convertArrayResponse(res));\n     }\n \n     /**\n      * Returns next programming submission without assessment from the server\n      * @param exerciseId the id of the exercise\n      */\n-    getProgrammingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock = false): Observable<ProgrammingSubmission> {\n-        let url = `api/exercises/${exerciseId}/programming-submission-without-assessment`;\n+    getProgrammingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock = false, correctionRound?: number): Observable<ProgrammingSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NTAyMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552045020", "createdAt": "2021-01-05T16:30:21Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -535,22 +535,28 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n      * @param exerciseId the id of the exercise\n      * @param req request parameters\n      */\n-    getProgrammingSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+    getProgrammingSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<ProgrammingSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<ProgrammingSubmission[]>(`api/exercises/${exerciseId}/programming-submissions`, {\n+            .get<ProgrammingSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/programming-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n-            .map((res: HttpResponse<ProgrammingSubmission[]>) => this.convertArrayResponse(res));\n+            .map((res: HttpResponse<ProgrammingSubmission[]>) => ProgrammingSubmissionService.convertArrayResponse(res));\n     }\n \n     /**\n      * Returns next programming submission without assessment from the server\n      * @param exerciseId the id of the exercise\n      */\n-    getProgrammingSubmissionForExerciseWithoutAssessment(exerciseId: number, lock = false): Observable<ProgrammingSubmission> {\n-        let url = `api/exercises/${exerciseId}/programming-submission-without-assessment`;\n+    getProgrammingSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, lock = false, correctionRound?: number): Observable<ProgrammingSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MTg5OA=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg2ODY1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowODowNFrOIOYioQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozMTozNFrOIOeM-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MzA1Nw==", "bodyText": "this could be shortened with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                *ngIf=\"submission && submission.latestResult && correctionRound === 0\"\n          \n          \n            \n                                                                *ngIf=\"submission?.latestResult && correctionRound === 0\"", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551953057", "createdAt": "2021-01-05T14:08:04Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html", "diffHunk": "@@ -286,13 +286,12 @@ <h4 *ngIf=\"isTestRun\">\n                                             </button>\n                                             <ng-template #continueButton>\n                                                 <button\n-                                                    *ngIf=\"submission !== null && submission.latestResult !== null && submission.latestResult !== undefined\"\n+                                                    *ngIf=\"submission && submission.latestResult && correctionRound === 0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NTgxOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552045819", "createdAt": "2021-01-05T16:31:34Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.html", "diffHunk": "@@ -286,13 +286,12 @@ <h4 *ngIf=\"isTestRun\">\n                                             </button>\n                                             <ng-template #continueButton>\n                                                 <button\n-                                                    *ngIf=\"submission !== null && submission.latestResult !== null && submission.latestResult !== undefined\"\n+                                                    *ngIf=\"submission && submission.latestResult && correctionRound === 0\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1MzA1Nw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg3Nzc4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoxMDoyNFrOIOYoFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1NzoyMlrOIOc0bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NDQ1NA==", "bodyText": "do you mean it defaults to 0?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551954454", "createdAt": "2021-01-05T14:10:24Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "diffHunk": "@@ -281,27 +282,55 @@ export class ExerciseAssessmentDashboardComponent implements OnInit, AfterViewIn\n     }\n \n     /**\n-     * Get all the submissions from the server for which the current user is the assessor, which is the case for started or completed assessments. All these submissions get listed\n+     * get all submissions for all correction rounds which the tutor has assessed.\n+     * If not in examMode, correctionrounds defaults to 1, as more than 1 is currently not supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMzE1MA==", "bodyText": "yes, we will adjust it.", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552023150", "createdAt": "2021-01-05T15:57:22Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "diffHunk": "@@ -281,27 +282,55 @@ export class ExerciseAssessmentDashboardComponent implements OnInit, AfterViewIn\n     }\n \n     /**\n-     * Get all the submissions from the server for which the current user is the assessor, which is the case for started or completed assessments. All these submissions get listed\n+     * get all submissions for all correction rounds which the tutor has assessed.\n+     * If not in examMode, correctionrounds defaults to 1, as more than 1 is currently not supported.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NDQ1NA=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg4MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoxMTo0M1rOIOYq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1NzoyMVrOIOc0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTE5OA==", "bodyText": "defaults to 0, as you use 0 as the parameter?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551955198", "createdAt": "2021-01-05T14:11:43Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "diffHunk": "@@ -340,39 +370,70 @@ export class ExerciseAssessmentDashboardComponent implements OnInit, AfterViewIn\n     };\n \n     /**\n-     * Get a submission from the server that does not have an assessment yet (if there is one). The submission gets added to the end of the list of submissions in the exercise\n-     * dashboard and the user can start the assessment. Note, that the number of started but unfinished assessments is limited per user and course. If the user reached this limit,\n+     * Get all submissions that dont have an assessment for all correctionrounds\n+     * If not in examMode correctionrounds defaults to 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMzEzOA==", "bodyText": "you are right.", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552023138", "createdAt": "2021-01-05T15:57:21Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/shared/dashboards/tutor/exercise-assessment-dashboard.component.ts", "diffHunk": "@@ -340,39 +370,70 @@ export class ExerciseAssessmentDashboardComponent implements OnInit, AfterViewIn\n     };\n \n     /**\n-     * Get a submission from the server that does not have an assessment yet (if there is one). The submission gets added to the end of the list of submissions in the exercise\n-     * dashboard and the user can start the assessment. Note, that the number of started but unfinished assessments is limited per user and course. If the user reached this limit,\n+     * Get all submissions that dont have an assessment for all correctionrounds\n+     * If not in examMode correctionrounds defaults to 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTE5OA=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg4NDg5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoxMjozMFrOIOYspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Njo0NVrOIOcyqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    correctionRound?: number,\n          \n          \n            \n                ): Observable<HttpResponse<TextSubmission[]>> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                    correctionRound = 0,\n          \n          \n            \n                ): Observable<HttpResponse<TextSubmission[]>> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551955621", "createdAt": "2021-01-05T14:12:30Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "diffHunk": "@@ -40,19 +40,30 @@ export class TextSubmissionService {\n             .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\n     }\n \n-    getTextSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<TextSubmission[]>> {\n+    getTextSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<TextSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMjY5OA==", "bodyText": "answered below.", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552022698", "createdAt": "2021-01-05T15:56:45Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "diffHunk": "@@ -40,19 +40,30 @@ export class TextSubmissionService {\n             .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\n     }\n \n-    getTextSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<TextSubmission[]>> {\n+    getTextSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<TextSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTYyMQ=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg4NjE1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoxMjo1MFrOIOYtXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyMTo0MVrOIOdzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                getTextSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound?: number): Observable<TextSubmission> {\n          \n          \n            \n                    correctionRound = correctionRound ?? 0;\n          \n          \n            \n                getTextSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound = 0): Observable<TextSubmission> {", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r551955807", "createdAt": "2021-01-05T14:12:50Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "diffHunk": "@@ -40,19 +40,30 @@ export class TextSubmissionService {\n             .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\n     }\n \n-    getTextSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<TextSubmission[]>> {\n+    getTextSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<TextSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<TextSubmission[]>(`api/exercises/${exerciseId}/text-submissions`, {\n+            .get<TextSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/text-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n             .pipe(map((res: HttpResponse<TextSubmission[]>) => TextSubmissionService.convertArrayResponse(res)));\n     }\n \n-    // option = 'head': Do not optimize assessment order. Only used to check if assessments available.\n-    getTextSubmissionForExerciseWithoutAssessment(exerciseId: number, option?: 'lock' | 'head'): Observable<TextSubmission> {\n-        let url = `api/exercises/${exerciseId}/text-submission-without-assessment`;\n+    /**\n+     *\n+     * @param exerciseId id of the exerciser\n+     * @param option 'head': Do not optimize assessment order. Only used to check if assessments available.\n+     * @param correctionRound: The correction round for which we want to get a new assessment\n+     */\n+    getTextSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound?: number): Observable<TextSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMjY1Mg==", "bodyText": "We will look into that!", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552022652", "createdAt": "2021-01-05T15:56:40Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "diffHunk": "@@ -40,19 +40,30 @@ export class TextSubmissionService {\n             .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\n     }\n \n-    getTextSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<TextSubmission[]>> {\n+    getTextSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<TextSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<TextSubmission[]>(`api/exercises/${exerciseId}/text-submissions`, {\n+            .get<TextSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/text-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n             .pipe(map((res: HttpResponse<TextSubmission[]>) => TextSubmissionService.convertArrayResponse(res)));\n     }\n \n-    // option = 'head': Do not optimize assessment order. Only used to check if assessments available.\n-    getTextSubmissionForExerciseWithoutAssessment(exerciseId: number, option?: 'lock' | 'head'): Observable<TextSubmission> {\n-        let url = `api/exercises/${exerciseId}/text-submission-without-assessment`;\n+    /**\n+     *\n+     * @param exerciseId id of the exerciser\n+     * @param option 'head': Do not optimize assessment order. Only used to check if assessments available.\n+     * @param correctionRound: The correction round for which we want to get a new assessment\n+     */\n+    getTextSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound?: number): Observable<TextSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTgwNw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTI1Mw==", "bodyText": "Even shorter than my suggestion ^^", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552039253", "createdAt": "2021-01-05T16:21:41Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/text/participate/text-submission.service.ts", "diffHunk": "@@ -40,19 +40,30 @@ export class TextSubmissionService {\n             .pipe(map((res: HttpResponse<TextSubmission>) => res.body!));\n     }\n \n-    getTextSubmissionsForExercise(exerciseId: number, req: { submittedOnly?: boolean; assessedByTutor?: boolean }): Observable<HttpResponse<TextSubmission[]>> {\n+    getTextSubmissionsForExerciseByCorrectionRound(\n+        exerciseId: number,\n+        req: { submittedOnly?: boolean; assessedByTutor?: boolean },\n+        correctionRound?: number,\n+    ): Observable<HttpResponse<TextSubmission[]>> {\n+        correctionRound = correctionRound ?? 0;\n         const options = createRequestOption(req);\n         return this.http\n-            .get<TextSubmission[]>(`api/exercises/${exerciseId}/text-submissions`, {\n+            .get<TextSubmission[]>(`api/exercises/${exerciseId}/round/${correctionRound}/text-submissions`, {\n                 params: options,\n                 observe: 'response',\n             })\n             .pipe(map((res: HttpResponse<TextSubmission[]>) => TextSubmissionService.convertArrayResponse(res)));\n     }\n \n-    // option = 'head': Do not optimize assessment order. Only used to check if assessments available.\n-    getTextSubmissionForExerciseWithoutAssessment(exerciseId: number, option?: 'lock' | 'head'): Observable<TextSubmission> {\n-        let url = `api/exercises/${exerciseId}/text-submission-without-assessment`;\n+    /**\n+     *\n+     * @param exerciseId id of the exerciser\n+     * @param option 'head': Do not optimize assessment order. Only used to check if assessments available.\n+     * @param correctionRound: The correction round for which we want to get a new assessment\n+     */\n+    getTextSubmissionForExerciseForCorrectionRoundWithoutAssessment(exerciseId: number, option?: 'lock' | 'head', correctionRound?: number): Observable<TextSubmission> {\n+        correctionRound = correctionRound ?? 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NTgwNw=="}, "originalCommit": {"oid": "39209912fa9a2a27dc5700b5d5929116078ea6d1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTYzNDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODowMTo0MVrOIPQRWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDowNzoxN1rOIPUntQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg2NjEzOA==", "bodyText": "This can be removed now right?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552866138", "createdAt": "2021-01-06T18:01:41Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -117,26 +117,45 @@\n     Optional<StudentParticipation> findByExerciseIdAndTeamIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n     /**\n+     * TODO SE, NR: maybe re-add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4fa86766b5e9db1700aa5dc160a34413daa548"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzNzM5Nw==", "bodyText": "For the moment we will keep it, will be removed in a follow up shortly. Probably next week.", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552937397", "createdAt": "2021-01-06T20:07:17Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -117,26 +117,45 @@\n     Optional<StudentParticipation> findByExerciseIdAndTeamIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n     /**\n+     * TODO SE, NR: maybe re-add", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg2NjEzOA=="}, "originalCommit": {"oid": "0b4fa86766b5e9db1700aa5dc160a34413daa548"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTYzODQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODowMjoyMFrOIPQT8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDowODozMFrOIPUplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg2NjgwMg==", "bodyText": "This also as you are already using the correctionRound?", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552866802", "createdAt": "2021-01-06T18:02:20Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -182,7 +208,20 @@ and not exists (select prs from participation.results prs where prs.assessmentTy\n     @EntityGraph(type = LOAD, attributePaths = { \"submissions\", \"submissions.results\", \"submissions.results.assessor\" })\n     List<StudentParticipation> findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(long exerciseId);\n \n-    @Query(\"SELECT DISTINCT p FROM StudentParticipation p left join fetch p.submissions s left join fetch s.results r left join fetch r.assessor a WHERE p.exercise.id = :#{#exerciseId} AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n+    // TODO SE: use correctionRound", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4fa86766b5e9db1700aa5dc160a34413daa548"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzNzg3OA==", "bodyText": "CorrectionRound is set to default of 0, we will change that in a followup.", "url": "https://github.com/ls1intum/Artemis/pull/2610#discussion_r552937878", "createdAt": "2021-01-06T20:08:30Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -182,7 +208,20 @@ and not exists (select prs from participation.results prs where prs.assessmentTy\n     @EntityGraph(type = LOAD, attributePaths = { \"submissions\", \"submissions.results\", \"submissions.results.assessor\" })\n     List<StudentParticipation> findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(long exerciseId);\n \n-    @Query(\"SELECT DISTINCT p FROM StudentParticipation p left join fetch p.submissions s left join fetch s.results r left join fetch r.assessor a WHERE p.exercise.id = :#{#exerciseId} AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n+    // TODO SE: use correctionRound", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg2NjgwMg=="}, "originalCommit": {"oid": "0b4fa86766b5e9db1700aa5dc160a34413daa548"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4255, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}