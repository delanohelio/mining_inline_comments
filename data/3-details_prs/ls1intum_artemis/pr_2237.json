{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzU4MzY3", "number": 2237, "title": "Improve server side git url handling and server test improvements", "bodyText": "We had duplicated for handling git urls in different classes. I refactored those into the new UrlService.\nI also created the ProgrammingExerciseTestService to avoid duplicated functionality for programming exercise tests. At the same time, ProgrammingExerciseResultTestService provides testing logic for new incoming programming exercise results.\nThis service should be independent of the config or profile and include the logic that is needed to test programming exercises on Artemis. All logic related to external communication will be added in separate mock providers based on delegation and provided by super classes\nChecklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features (with a high test coverage)\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n\nMotivation and Context\nCode quality improvements and reduction of code duplication\nSteps for Testing\n\nLog in to Artemis (TS1 and TS2)\nCheck that everything related to programming exercises still works\n\nTest Coverage\nstays the same, but Jenkins and Gitlab tests will be easier to write, because we only need to specify the mocks, no additional test logic is needed.", "createdAt": "2020-10-20T00:09:32Z", "url": "https://github.com/ls1intum/Artemis/pull/2237", "merged": true, "mergeCommit": {"oid": "914effb8556ae7f3287b2710f35fc6f9cd87f0cc"}, "closed": true, "closedAt": "2020-10-20T15:25:05Z", "author": {"login": "krusche"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUMxgFgH2gAyNTA2MzU4MzY3OmZlZTM3ODUxYmE4NmNlMDEwNTJlMzk2YTllM2IyZWUzOTFiNTFmOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUaLE2gFqTUxMjgyMjcyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fee37851ba86ce01052e396a9e3b2ee391b51f90", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/fee37851ba86ce01052e396a9e3b2ee391b51f90", "committedDate": "2020-10-19T23:28:39Z", "message": "extract new UrlService to remove duplicated code\n\nalso add ProgrammingExerciseTestService based on delegation to align Bitbucket+Bamboo with Gitlab+Jenkins tests and to avoid duplicated code in those"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbd19540ae573d73e9674f572547fc956d4627b5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/cbd19540ae573d73e9674f572547fc956d4627b5", "committedDate": "2020-10-19T23:30:58Z", "message": "Merge branch 'develop' into chore/url-service-test-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18fc3563d804f873486f12cdb52f5aaabf30275e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/18fc3563d804f873486f12cdb52f5aaabf30275e", "committedDate": "2020-10-20T00:14:37Z", "message": "Merge branch 'develop' into chore/url-service-test-improvements\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59f944e1fdbba7a5c22929a46a23bbb661c73cf", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/d59f944e1fdbba7a5c22929a46a23bbb661c73cf", "committedDate": "2020-10-20T00:19:06Z", "message": "Merge branch 'develop' into chore/url-service-test-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e50ef9e61e981efa8557b20e941423a296608ec", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2e50ef9e61e981efa8557b20e941423a296608ec", "committedDate": "2020-10-20T00:23:44Z", "message": "update kotlin version in pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c25a466d04728ee3f92f95c05ec048a66ff0303", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/6c25a466d04728ee3f92f95c05ec048a66ff0303", "committedDate": "2020-10-20T00:38:59Z", "message": "fix testing issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b202c2fc9b2028f1545ba01e36da3e97b1df19", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c3b202c2fc9b2028f1545ba01e36da3e97b1df19", "committedDate": "2020-10-20T00:47:37Z", "message": "fix another test issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/2551e13a2f95576995b120d70b67de4bcdb74391", "committedDate": "2020-10-20T01:04:52Z", "message": "remove duplicated code for kotlin + java test by using parameterized tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjU4", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262258", "createdAt": "2020-10-20T01:10:28Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyOFrOHkm_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyOFrOHkm_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU0OA==", "bodyText": "Codacy found an issue: Perhaps 'continuousIntegrationService' could be replaced by a local variable.", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149548", "createdAt": "2020-10-20T01:10:28Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjYz", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262263", "createdAt": "2020-10-20T01:10:29Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyOVrOHkm_Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyOVrOHkm_Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU1MQ==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149551", "createdAt": "2020-10-20T01:10:29Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjY1", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262265", "createdAt": "2020-10-20T01:10:30Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMFrOHkm_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMFrOHkm_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU1Mw==", "bodyText": "Codacy found an issue: The public constant name 'studentLogin' doesn't match '[A-Z][A-Z_0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149553", "createdAt": "2020-10-20T01:10:30Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjcw", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262270", "createdAt": "2020-10-20T01:10:31Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMVrOHkm_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMVrOHkm_NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU1Nw==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149557", "createdAt": "2020-10-20T01:10:31Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjc1", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262275", "createdAt": "2020-10-20T01:10:32Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMlrOHkm_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMlrOHkm_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU2Nw==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149567", "createdAt": "2020-10-20T01:10:32Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjgy", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262282", "createdAt": "2020-10-20T01:10:32Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMlrOHkm_Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozMlrOHkm_Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU3NA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149574", "createdAt": "2020-10-20T01:10:32Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+\n+        course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+\n+        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n+        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n+        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n+\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n+        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+    }\n+\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        exerciseRepo.resetLocalRepo();\n+        testRepo.resetLocalRepo();\n+        solutionRepo.resetLocalRepo();\n+        studentRepo.resetLocalRepo();\n+        studentTeamRepo.resetLocalRepo();\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise) throws Exception {\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise, LocalRepository exerciseRepository, LocalRepository solutionRepository, LocalRepository testRepository)\n+            throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        var exerciseRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(exerciseRepository.originRepoFile);\n+        var testRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(testRepository.originRepoFile);\n+        var solutionRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(solutionRepository.originRepoFile);\n+\n+        doReturn(exerciseRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, exerciseRepoName);\n+        doReturn(testRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, testRepoName);\n+        doReturn(solutionRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, solutionRepoName);\n+\n+        doReturn(gitService.getRepositoryByLocalPath(exerciseRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(exerciseRepoTestUrl.getURL(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjg2", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262286", "createdAt": "2020-10-20T01:10:33Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozM1rOHkm_TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozM1rOHkm_TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU4MA==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149580", "createdAt": "2020-10-20T01:10:33Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjkw", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262290", "createdAt": "2020-10-20T01:10:34Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozNFrOHkm_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozNFrOHkm_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU4NA==", "bodyText": "Codacy found an issue: Avoid unused private fields such as 'log'.", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149584", "createdAt": "2020-10-20T01:10:34Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/UrlService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.exception.VersionControlException;\n+\n+@Service\n+public class UrlService {\n+\n+    private final Logger log = LoggerFactory.getLogger(UrlService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMjk3", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262297", "createdAt": "2020-10-20T01:10:35Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozNVrOHkm_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozNVrOHkm_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU4OQ==", "bodyText": "Codacy found an issue: Expected @param tag for 'exercise'.", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149589", "createdAt": "2020-10-20T01:10:35Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+\n+        course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+\n+        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");\n+        solutionRepo.configureRepos(\"solutionLocalRepo\", \"solutionOriginRepo\");\n+        studentRepo.configureRepos(\"studentRepo\", \"studentOriginRepo\");\n+        studentTeamRepo.configureRepos(\"studentTeamRepo\", \"studentTeamOriginRepo\");\n+\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+        setupRepositoryMocksParticipant(exercise, studentLogin, studentRepo);\n+        setupRepositoryMocksParticipant(exercise, teamShortName, studentTeamRepo);\n+    }\n+\n+    public void tearDown() throws IOException {\n+        database.resetDatabase();\n+        exerciseRepo.resetLocalRepo();\n+        testRepo.resetLocalRepo();\n+        solutionRepo.resetLocalRepo();\n+        studentRepo.resetLocalRepo();\n+        studentTeamRepo.resetLocalRepo();\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise) throws Exception {\n+        setupRepositoryMocks(exercise, exerciseRepo, solutionRepo, testRepo);\n+    }\n+\n+    public void setupRepositoryMocks(ProgrammingExercise exercise, LocalRepository exerciseRepository, LocalRepository solutionRepository, LocalRepository testRepository)\n+            throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+\n+        var exerciseRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(exerciseRepository.originRepoFile);\n+        var testRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(testRepository.originRepoFile);\n+        var solutionRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(solutionRepository.originRepoFile);\n+\n+        doReturn(exerciseRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, exerciseRepoName);\n+        doReturn(testRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, testRepoName);\n+        doReturn(solutionRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, solutionRepoName);\n+\n+        doReturn(gitService.getRepositoryByLocalPath(exerciseRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(exerciseRepoTestUrl.getURL(), true);\n+        doReturn(gitService.getRepositoryByLocalPath(testRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(testRepoTestUrl.getURL(), true);\n+        doReturn(gitService.getRepositoryByLocalPath(solutionRepository.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(solutionRepoTestUrl.getURL(), true);\n+\n+        mockDelegate.mockGetRepositorySlugFromUrl(exerciseRepoName, exerciseRepoTestUrl.getURL());\n+        mockDelegate.mockGetRepositorySlugFromUrl(testRepoName, testRepoTestUrl.getURL());\n+        mockDelegate.mockGetRepositorySlugFromUrl(solutionRepoName, solutionRepoTestUrl.getURL());\n+\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, exerciseRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, testRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, solutionRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromAnyUrl(projectKey);\n+    }\n+\n+    /**\n+     * can be invoked for teams and students\n+     */\n+    public void setupRepositoryMocksParticipant(ProgrammingExercise exercise, String participantName, LocalRepository studentRepo) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String participantRepoName = projectKey.toLowerCase() + \"-\" + participantName;\n+        var participantRepoTestUrl = new GitUtilService.MockFileRepositoryUrl(studentRepo.originRepoFile);\n+        doReturn(participantRepoTestUrl).when(versionControlService).getCloneRepositoryUrl(projectKey, participantRepoName);\n+        doReturn(gitService.getRepositoryByLocalPath(studentRepo.localRepoFile.toPath())).when(gitService).getOrCheckoutRepository(participantRepoTestUrl.getURL(), true);\n+        mockDelegate.mockGetRepositorySlugFromUrl(participantRepoName, participantRepoTestUrl.getURL());\n+        mockDelegate.mockGetProjectKeyFromUrl(projectKey, participantRepoTestUrl.getURL());\n+    }\n+\n+    // TEST\n+    public void createProgrammingExercise_sequential_validExercise_created() throws Exception {\n+        exercise.setSequentialTestRuns(true);\n+        mockDelegate.mockConnectorRequestsForSetup(exercise);\n+        validateProgrammingExercise(request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzAy", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262302", "createdAt": "2020-10-20T01:10:36Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozNlrOHkm_WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozNlrOHkm_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU5Mw==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149593", "createdAt": "2020-10-20T01:10:36Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRepositoryWritePermissions(Team team, User newStudent, ProgrammingExercise exercise) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRetrieveArtifacts(ProgrammingExerciseStudentParticipation participation) throws MalformedURLException, URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzA3", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262307", "createdAt": "2020-10-20T01:10:37Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozN1rOHkm_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozN1rOHkm_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU5OA==", "bodyText": "Codacy found an issue: Avoid unused private fields such as 'continuousIntegrationService'.", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149598", "createdAt": "2020-10-20T01:10:37Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzEx", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262311", "createdAt": "2020-10-20T01:10:37Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozOFrOHkm_YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozOFrOHkm_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYwMA==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149600", "createdAt": "2020-10-20T01:10:38Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRepositoryWritePermissions(Team team, User newStudent, ProgrammingExercise exercise) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzIx", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262321", "createdAt": "2020-10-20T01:10:38Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozOFrOHkm_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozOFrOHkm_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYxMQ==", "bodyText": "Codacy found an issue: The public constant name 'teamShortName' doesn't match '[A-Z][A-Z_0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149611", "createdAt": "2020-10-20T01:10:38Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzI3", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262327", "createdAt": "2020-10-20T01:10:39Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozOVrOHkm_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDozOVrOHkm_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYxOA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149618", "createdAt": "2020-10-20T01:10:39Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+\n+    public final static int numberOfStudents = 2;\n+\n+    public final static String studentLogin = \"student1\";\n+\n+    public final static String teamShortName = \"team1\";\n+\n+    public final static String REPOBASEURL = \"/api/repository/\";\n+\n+    public final static String PARTICIPATIONBASEURL = \"/api/participations/\";\n+\n+    public LocalRepository exerciseRepo = new LocalRepository();\n+\n+    public LocalRepository testRepo = new LocalRepository();\n+\n+    public LocalRepository solutionRepo = new LocalRepository();\n+\n+    public LocalRepository studentRepo = new LocalRepository();\n+\n+    public LocalRepository studentTeamRepo = new LocalRepository();\n+\n+    private VersionControlService versionControlService;\n+\n+    // not needed right now but maybe in the future\n+    private ContinuousIntegrationService continuousIntegrationService;\n+\n+    private MockDelegate mockDelegate;\n+\n+    public List<User> setupTestUsers(int numberOfStudents, int numberOfTutors, int numberOfInstructors) {\n+        return database.addUsers(this.numberOfStudents + numberOfStudents, numberOfTutors + 1, numberOfInstructors + 1);\n+    }\n+\n+    public void setup(MockDelegate mockDelegate, VersionControlService versionControlService, ContinuousIntegrationService continuousIntegrationService) throws Exception {\n+        this.mockDelegate = mockDelegate;\n+        this.versionControlService = versionControlService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+\n+        course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        examExercise = ModelFactory.generateProgrammingExerciseForExam(exerciseGroup);\n+        exercise = ModelFactory.generateProgrammingExercise(ZonedDateTime.now().minusDays(1), ZonedDateTime.now().plusDays(7), course);\n+\n+        exerciseRepo.configureRepos(\"exerciseLocalRepo\", \"exerciseOriginRepo\");\n+        testRepo.configureRepos(\"testLocalRepo\", \"testOriginRepo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzMw", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262330", "createdAt": "2020-10-20T01:10:40Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0MFrOHkm_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0MFrOHkm_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYyMw==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149623", "createdAt": "2020-10-20T01:10:40Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzM5", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262339", "createdAt": "2020-10-20T01:10:41Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0MVrOHkm_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0MVrOHkm_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYyOQ==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149629", "createdAt": "2020-10-20T01:10:41Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -48,33 +52,82 @@\n     @SpyBean\n     protected JenkinsServer jenkinsServer;\n \n-    @SpyBean\n-    protected GitService gitService;\n+    @Autowired\n+    protected JenkinsRequestMockProvider jenkinsRequestMockProvider;\n \n-    @SpyBean\n-    protected GroupNotificationService groupNotificationService;\n+    @Autowired\n+    protected GitlabRequestMockProvider gitlabRequestMockProvider;\n \n-    @SpyBean\n-    protected WebsocketMessagingService websocketMessagingService;\n+    @AfterEach\n+    public void resetSpyBeans() {\n+        Mockito.reset(continuousIntegrationService, versionControlService, jenkinsServer);\n+        super.resetSpyBeans();\n+    }\n \n-    @SpyBean\n-    protected PlantUmlService plantUmlService;\n+    @Override\n+    public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws Exception {\n+        final var projectKey = exercise.getProjectKey();\n+        String exerciseRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n+        String testRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        String solutionRepoName = projectKey.toLowerCase() + \"-\" + RepositoryType.SOLUTION.getName();\n+        gitlabRequestMockProvider.mockCheckIfProjectExists(exercise, false);\n+        gitlabRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, exerciseRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, testRepoName);\n+        gitlabRequestMockProvider.mockCreateRepository(exercise, solutionRepoName);\n+        gitlabRequestMockProvider.mockAddAuthenticatedWebHook();\n+        jenkinsRequestMockProvider.mockCreateProjectForExercise(exercise);\n+        jenkinsRequestMockProvider.mockCreateBuildPlan(projectKey);\n+        jenkinsRequestMockProvider.mockTriggerBuild();\n+    }\n \n-    @SpyBean\n-    protected SimpMessageSendingOperations messagingTemplate;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForImport(ProgrammingExercise sourceExercise, ProgrammingExercise exerciseToBeImported) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @SpyBean\n-    protected ProgrammingSubmissionService programmingSubmissionService;\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+        // TODO: implement\n+        return null;\n+    }\n \n-    @Autowired\n-    protected DatabaseUtilService database;\n+    @Override\n+    public void mockUpdatePlanRepositoryForParticipation(ProgrammingExercise exercise, String username) throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @Autowired\n-    protected RequestUtilService request;\n+    @Override\n+    public void mockUpdatePlanRepository(ProgrammingExercise exercise, String planName, String bambooRepoName, String bitbucketRepoName, List<String> triggeredBy)\n+            throws IOException, URISyntaxException {\n+        // TODO: implement\n+    }\n \n-    @AfterEach\n-    public void resetSpyBeans() {\n-        Mockito.reset(ltiService, continuousIntegrationService, versionControlService, jenkinsServer, gitService, groupNotificationService, websocketMessagingService,\n-                plantUmlService, messagingTemplate, programmingSubmissionService);\n+    @Override\n+    public void mockRemoveRepositoryAccess(ProgrammingExercise exercise, Team team, User firstStudent) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRepositoryWritePermissions(Team team, User newStudent, ProgrammingExercise exercise) throws URISyntaxException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockRetrieveArtifacts(ProgrammingExerciseStudentParticipation participation) throws MalformedURLException, URISyntaxException, JsonProcessingException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public void mockGetBuildLogs(ProgrammingExerciseStudentParticipation participation, List<BambooBuildResultDTO.BambooBuildLogEntryDTO> logs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzQ1", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262345", "createdAt": "2020-10-20T01:10:42Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0MlrOHkm_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0MlrOHkm_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYzMg==", "bodyText": "Codacy found an issue: The public constant name 'numberOfStudents' doesn't match '[A-Z][A-Z_0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149632", "createdAt": "2020-10-20T01:10:42Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.diff.DiffEntry;\n+import org.eclipse.jgit.lib.ObjectReader;\n+import org.eclipse.jgit.lib.Repository;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.eclipse.jgit.treewalk.CanonicalTreeParser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.ExerciseMode;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.RepositoryType;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.participation.ProgrammingExerciseStudentParticipation;\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.AuthoritiesConstants;\n+import de.tum.in.www1.artemis.security.SecurityUtils;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.TeamService;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.VersionControlService;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.dto.BambooBuildResultDTO;\n+import de.tum.in.www1.artemis.web.rest.ParticipationResource;\n+\n+/**\n+ * Note: this class should be independent of the actual VCS and CIS and contains common test logic for both scenarios:\n+ * 1) Bamboo + Bitbucket\n+ * 2) Jenkins + Gitlab\n+ */\n+@Service\n+public class ProgrammingExerciseTestService {\n+\n+    @Autowired\n+    private DatabaseUtilService database;\n+\n+    @Autowired\n+    private RequestUtilService request;\n+\n+    @Autowired\n+    private GitService gitService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private TeamService teamService;\n+\n+    @Autowired\n+    private UserRepository userRepo;\n+\n+    @Autowired\n+    private CourseRepository courseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    @Autowired\n+    private ParticipationService participationService;\n+\n+    @Autowired\n+    @Qualifier(\"staticCodeAnalysisConfiguration\")\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> staticCodeAnalysisDefaultConfigurations;\n+\n+    public Course course;\n+\n+    public ProgrammingExercise exercise;\n+\n+    public ProgrammingExercise examExercise;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzUx", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262351", "createdAt": "2020-10-20T01:10:43Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0M1rOHkm_hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0M1rOHkm_hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTYzNg==", "bodyText": "Codacy found an issue: The instance method name 'runTemplateTests_exercise' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149636", "createdAt": "2020-10-20T01:10:43Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseTemplateIntegrationTest.java", "diffHunk": "@@ -115,64 +115,36 @@ public void tearDown() throws IOException {\n         solutionRepo.resetLocalRepo();\n     }\n \n-    @Test\n+    @ParameterizedTest\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void runTemplateTests_java_exercise() throws Exception {\n-        mockConnectorRequestsForSetup(exercise);\n-        request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        moveAssignmentSourcesOf(exerciseRepo);\n-        int exitCode = invokeMaven();\n-        assertThat(exitCode).isNotEqualTo(0);\n-\n-        var testResults = readTestReports();\n-        assertThat(testResults).containsExactlyInAnyOrderEntriesOf(Map.of(TestResult.FAILED, 13));\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"KOTLIN\", \"JAVA\" }, mode = EnumSource.Mode.INCLUDE)\n+    public void runTemplateTests_exercise(ProgrammingLanguage language) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzU3", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262357", "createdAt": "2020-10-20T01:10:44Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0NFrOHkm_iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0NFrOHkm_iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTY0MQ==", "bodyText": "Codacy found an issue: The instance method name 'runTemplateTests_solution' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149641", "createdAt": "2020-10-20T01:10:44Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseTemplateIntegrationTest.java", "diffHunk": "@@ -115,64 +115,36 @@ public void tearDown() throws IOException {\n         solutionRepo.resetLocalRepo();\n     }\n \n-    @Test\n+    @ParameterizedTest\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void runTemplateTests_java_exercise() throws Exception {\n-        mockConnectorRequestsForSetup(exercise);\n-        request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        moveAssignmentSourcesOf(exerciseRepo);\n-        int exitCode = invokeMaven();\n-        assertThat(exitCode).isNotEqualTo(0);\n-\n-        var testResults = readTestReports();\n-        assertThat(testResults).containsExactlyInAnyOrderEntriesOf(Map.of(TestResult.FAILED, 13));\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"KOTLIN\", \"JAVA\" }, mode = EnumSource.Mode.INCLUDE)\n+    public void runTemplateTests_exercise(ProgrammingLanguage language) throws Exception {\n+        runTests(language, exerciseRepo, TestResult.FAILED);\n     }\n \n-    @Test\n+    @ParameterizedTest\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void runTemplateTests_java_solution() throws Exception {\n-        mockConnectorRequestsForSetup(exercise);\n-        request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class, HttpStatus.CREATED);\n-\n-        moveAssignmentSourcesOf(solutionRepo);\n-        int exitCode = invokeMaven();\n-        assertThat(exitCode).isEqualTo(0);\n-\n-        var testResults = readTestReports();\n-        assertThat(testResults).containsExactlyInAnyOrderEntriesOf(Map.of(TestResult.SUCCESSFUL, 13));\n+    @EnumSource(value = ProgrammingLanguage.class, names = { \"KOTLIN\", \"JAVA\" }, mode = EnumSource.Mode.INCLUDE)\n+    public void runTemplateTests_solution(ProgrammingLanguage language) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjYyMzYz", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512262363", "createdAt": "2020-10-20T01:10:45Z", "commit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0NVrOHkm_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDo0NVrOHkm_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTY0OQ==", "bodyText": "Codacy found an issue: The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2237#discussion_r508149649", "createdAt": "2020-10-20T01:10:45Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/AbstractArtemisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package de.tum.in.www1.artemis.util;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.net.URL;\n+\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.mock.mockito.SpyBean;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+\n+import de.tum.in.www1.artemis.programmingexercise.MockDelegate;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.connectors.GitService;\n+import de.tum.in.www1.artemis.service.connectors.LtiService;\n+import de.tum.in.www1.artemis.service.messaging.InstanceMessageSendService;\n+import de.tum.in.www1.artemis.service.scheduled.ProgrammingExerciseScheduleService;\n+\n+/**\n+ * this test should be completely independent of any profiles or configurations (e.g. VCS, CIS)\n+ */\n+public abstract class AbstractArtemisIntegrationTest implements MockDelegate {\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2551e13a2f95576995b120d70b67de4bcdb74391"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e612216dbe1fb6275562c58326403ad839c1102", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/5e612216dbe1fb6275562c58326403ad839c1102", "committedDate": "2020-10-20T10:51:52Z", "message": "Merge remote-tracking branch 'origin/develop' into chore/url-service-test-improvements\n\n# Conflicts:\n#\tsrc/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGitlabJenkinsIntegrationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5274bdd28507ed0c467d10216e9a29ef6d13e4da", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/5274bdd28507ed0c467d10216e9a29ef6d13e4da", "committedDate": "2020-10-20T12:40:08Z", "message": "Create Service for testing of incoming programming exercise results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4830dc0a18405a5d1273b6d4f58393acb06d7cf5", "committedDate": "2020-10-20T14:06:50Z", "message": "fix warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4f06aaa5ee932c17233b0031357a8c4facc69e", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/4e4f06aaa5ee932c17233b0031357a8c4facc69e", "committedDate": "2020-10-20T14:08:41Z", "message": "Merge branch 'develop' into chore/url-service-test-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e70817b227ea3abf8dce4c499192b992258412a1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/e70817b227ea3abf8dce4c499192b992258412a1", "committedDate": "2020-10-20T14:09:13Z", "message": "set min coverage for server tests to 80%"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODAxNjY2", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512801666", "createdAt": "2020-10-20T14:46:42Z", "commit": {"oid": "e70817b227ea3abf8dce4c499192b992258412a1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ec52f826dd38a9ff5017aaabe977f7b4ff4310", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/45ec52f826dd38a9ff5017aaabe977f7b4ff4310", "committedDate": "2020-10-20T14:48:05Z", "message": "Fix translation in programming ex detail view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f946951c234f79f5edde5f294c2cae159b737190", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/f946951c234f79f5edde5f294c2cae159b737190", "committedDate": "2020-10-20T14:48:21Z", "message": "Merge branch 'chore/url-service-test-improvements' of https://github.com/ls1intum/Artemis into chore/url-service-test-improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODIwNjQw", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512820640", "createdAt": "2020-10-20T15:03:26Z", "commit": {"oid": "f946951c234f79f5edde5f294c2cae159b737190"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODIyNzIz", "url": "https://github.com/ls1intum/Artemis/pull/2237#pullrequestreview-512822723", "createdAt": "2020-10-20T15:05:21Z", "commit": {"oid": "f946951c234f79f5edde5f294c2cae159b737190"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3885, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}