{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTgyOTM4", "number": 1686, "title": "[EXAM] Quiz exercise management", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I added authorities to all new routes and check the course groups for displaying navigation elements (links, buttons)\n Client: I documented the TypeScript code using JSDoc style.\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\nQuiz exercise CRUD operations must be adapted for exam mode.\nDescription\nClient:\n\n Created new client routes for quiz-exercise update and creation\nFor creation: ':examId/exercise-groups/:groupId/quiz-exercises/new'\nFor update: ':examId/exercise-groups/:groupId/quiz-exercises/:exerciseId/edit'\n Load quiz exercise module\n Deactivate categories in exam mode for now, as this relies on a Course\n Added \"Add quiz\" button to exercise group component\n\nServer:\n\n Check that course and exerciseGroup is never set simultaneously for creation/update\n Extend exercise creation/update authorization check for exam mode\n Deactivate Tutor/Student notification on exercise creation/update\n Add additional authorization check to GET quiz exercise route. Only instructors and admins should be allowed to access an exam quiz exercise\n Adapted authorization check for deletion\n\nSteps for Testing\nEnsure that the existing CRUD operations for regular quiz exercises still work\n\nLog in as admin or instructor\nCreate a regular quiz exercise. Please create questions of all types. Try to import questions over JSON or over other courses\n--> Exercise was created\nUpdate the exercise\n--> Exercise was updated\nClick on the preview button\n--> Preview of the quiz is shown\nClick on the solution button\n--> Solution of the quiz is shown\nDelete the exercise\n--> Exercise was deleted\n\nEnsure that CRUD operations for exam quiz exercises work\n\nLog in as admin or instructor\nCreate an exam\nCreate an exercise group\nCreate a quiz exercise. Please create questions of all types. Try to import questions over JSON or over other courses\n--> Exercise was created\nEdit the quiz exercise\n--> Update was saved\nClick on the preview button\n--> Preview of the quiz is shown\nClick on the solution button\n--> Solution of the quiz is shown\nNavigate to /course-management/:courseId/quiz-exercises/:exerciseId using the id of an exam quiz exercise\n--> Should be able to see the exercise in edit mode\nDelete the exercise\n--> Exercise was deleted\n\nEnsure correct authorization for quiz exercises\n\nLog in as a tutor or student\nNavigate to course-management/:courseId/exams/:examId/exercise-groups/:groupId/quiz-exercises/new\n--> You should not be able to access the route\nUse the id of an exam exercise for the following steps\nNavigate to course-management/:courseId/exams/:examId/exercise-groups/:groupId/quiz-exercises/:exerciseId/edit\n--> You should not be able to access the route\nNavigate to /course-management/:courseId/quiz-exercises/:exerciseId\n--> You should not be able to see the exercise\n\nScreenshots", "createdAt": "2020-06-19T16:06:20Z", "url": "https://github.com/ls1intum/Artemis/pull/1686", "merged": true, "mergeCommit": {"oid": "19a6789589a17a9a22efee615b6dc073da5431aa"}, "closed": true, "closedAt": "2020-06-23T07:31:04Z", "author": {"login": "JonasPetry"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs1TnwgH2gAyNDM3MTgyOTM4OjJmOTE1ZDk0NTlkZjk2ZDBhMmQ5MjQ3ZDdlMjRmNDFkNDdiYTNiNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuAV8ZAFqTQzNTUxMzEzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2f915d9459df96d0a2d9247d7e24f41d47ba3b5a", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/2f915d9459df96d0a2d9247d7e24f41d47ba3b5a", "committedDate": "2020-06-19T16:05:09Z", "message": "Add exam quiz route"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4262f34e865e28e130b370b1fd178d822ec199eb", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/4262f34e865e28e130b370b1fd178d822ec199eb", "committedDate": "2020-06-19T16:19:53Z", "message": "Adjust resolver in exam quiz route"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a816ff3ed644afa7118e06eca0355ce74b52b8", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/a1a816ff3ed644afa7118e06eca0355ce74b52b8", "committedDate": "2020-06-19T16:24:19Z", "message": "Add Exercise Group to constructor in quiz-exercise.model.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ac451b0201603257c0ebb5906468e0fdeef07cf", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/9ac451b0201603257c0ebb5906468e0fdeef07cf", "committedDate": "2020-06-20T07:48:08Z", "message": "Add create-quiz button to exercise-groups.component.html"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd5b79ace04da21620ab76241599f3e245c9bf5e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/dd5b79ace04da21620ab76241599f3e245c9bf5e", "committedDate": "2020-06-20T09:56:24Z", "message": "Adjust creation of quiz exercise to handle the exam quiz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d544d01cef4ac8d92152d36479dc2e2d226c3f9", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/8d544d01cef4ac8d92152d36479dc2e2d226c3f9", "committedDate": "2020-06-20T10:51:44Z", "message": "Adjust order of parameters in quiz-exercise-detail.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10f75f674eec862dc73921cabdf4fc1f77af620e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/10f75f674eec862dc73921cabdf4fc1f77af620e", "committedDate": "2020-06-20T11:14:01Z", "message": "Adjust post route to work with exam exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25862f802f8e7081daaac60421521f19359ee67", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d25862f802f8e7081daaac60421521f19359ee67", "committedDate": "2020-06-20T12:11:23Z", "message": "Fix call inside of callback in onInit of quiz-exercise-detail.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa7c309fe6e73b4ba5e5973a8cc279afe46d00d1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/aa7c309fe6e73b4ba5e5973a8cc279afe46d00d1", "committedDate": "2020-06-20T12:20:35Z", "message": "Adjust put route for quiz exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ba382101fcba681566cad4a122752779f130b7", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f1ba382101fcba681566cad4a122752779f130b7", "committedDate": "2020-06-20T12:27:24Z", "message": "Adjust get route for quiz exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a141b92ad75e0da2dba53b75833e7edf629b314", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/1a141b92ad75e0da2dba53b75833e7edf629b314", "committedDate": "2020-06-20T12:33:30Z", "message": "Adjust delete route for quiz exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4698e1352bfb7ea6b42b8e6f878e7f58c02eaa", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/bf4698e1352bfb7ea6b42b8e6f878e7f58c02eaa", "committedDate": "2020-06-20T14:01:45Z", "message": "Wire delete button for quiz exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be539a0ec75a1c03551304e4c20297d48e6ad7d9", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/be539a0ec75a1c03551304e4c20297d48e6ad7d9", "committedDate": "2020-06-20T14:12:19Z", "message": "Add generateQuizExerciseForExam to ModelFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636912239b36eb9ad31f7c28f6d76d8b58e1fcb2", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/636912239b36eb9ad31f7c28f6d76d8b58e1fcb2", "committedDate": "2020-06-20T15:15:55Z", "message": "Add exam constraint for notifying students on change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70b9250b6e9a5a5532b1ce8584f803146825b6a7", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/70b9250b6e9a5a5532b1ce8584f803146825b6a7", "committedDate": "2020-06-20T15:16:33Z", "message": "Add conversion check to quiz put route"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de1af643c507b72e97a398e23b150e9ecbe7d73", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/2de1af643c507b72e97a398e23b150e9ecbe7d73", "committedDate": "2020-06-20T15:18:24Z", "message": "Add exam tests for Post and Put route of quiz exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/02e17f08d1747e64fcb62f27e29d788e93aae92e", "committedDate": "2020-06-20T15:41:44Z", "message": "Add exam tests for Get route of quiz exercises"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDM3OTU3", "url": "https://github.com/ls1intum/Artemis/pull/1686#pullrequestreview-434437957", "createdAt": "2020-06-20T16:08:30Z", "commit": {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjowODozMFrOGmnN4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNjowODozMFrOGmnN4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw==", "bodyText": "I don't understand why this test fails: Response status expected:<201> but was:<403>\nDoes anyone have an idea?", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443141603", "createdAt": "2020-06-20T16:08:30Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -335,6 +602,26 @@ public void testGetQuizExercise_asStudent() throws Exception {\n         checkQuizExerciseForStudent(quizExerciseForStudent_Finished);\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamQuizExercise() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        QuizExercise quizExerciseGet = request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.OK, QuizExercise.class);\n+        checkQuizExercises(quizExercise, quizExerciseGet);\n+\n+        assertThat(quizExerciseGet).isEqualTo(quizExercise);\n+        assertThat(quizExerciseGet).as(\"Quiz exercise was retrieved\").isNotNull();\n+        assertThat(quizExerciseGet.getId()).as(\"Quiz exercise with the right id was retrieved\").isEqualTo(quizExerciseGet.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testGetExamQuizExercise_asTutor_forbidden() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+        request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.FORBIDDEN, QuizExercise.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e"}, "originalPosition": 341}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f7e6f813ea90550d5c2602ec7a72561d43ab0bd2", "committedDate": "2020-06-21T10:37:46Z", "message": "Fix failing server integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae0b4d09ddd636018dcc3a30e1d9648cffc679b", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7ae0b4d09ddd636018dcc3a30e1d9648cffc679b", "committedDate": "2020-06-22T13:32:54Z", "message": "Merge branch 'develop' into exam/management/quiz-exercises\n\n# Conflicts:\n#\tsrc/main/webapp/app/exam/manage/exam-management.route.ts\n#\tsrc/main/webapp/app/exercises/shared/exercise-row-buttons/exercise-row-buttons.component.ts\n#\tsrc/main/webapp/i18n/de/exam.json\n#\tsrc/main/webapp/i18n/en/exam.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "committedDate": "2020-06-22T13:46:20Z", "message": "fix merge error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTgxNzQ2", "url": "https://github.com/ls1intum/Artemis/pull/1686#pullrequestreview-434981746", "createdAt": "2020-06-22T14:31:39Z", "commit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTQxNzQ2", "url": "https://github.com/ls1intum/Artemis/pull/1686#pullrequestreview-434941746", "createdAt": "2020-06-22T13:50:17Z", "commit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1MDoxN1rOGnBfEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoyMTowNFrOGnH-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTk4NA==", "bodyText": "We changed loading of Exercise -> ExerciseGroup -> Exam -> Course to Eager loading in a recent PR.\nquizExercise.getExerciseGroup().getExam().getCourse() should be sufficient here.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443571984", "createdAt": "2020-06-22T13:50:17Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NDA4Nw==", "bodyText": "We don't need this anymore because of the point mentioned above.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443574087", "createdAt": "2020-06-22T13:53:21Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());\n+            Course course = exerciseGroup.getExam().getCourse();\n+\n+            if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {\n+                return forbidden();\n+            }\n+            // Set the exerciseGroup, exam and course so that the client can work with those ids", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDg1MA==", "bodyText": "We introduced a new utility getter Exercise.getCourseViaExerciseGroupOrCourseMember, which executes this case distinction. You could use this instead of the whole if, else block.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443580850", "createdAt": "2020-06-22T14:02:59Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -337,20 +374,30 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<Void> deleteQuizExercise(@PathVariable Long quizExerciseId) {\n         log.info(\"REST request to delete QuizExercise : {}\", quizExerciseId);\n-        Optional<QuizExercise> quizExercise = quizExerciseService.findById(quizExerciseId);\n-        if (quizExercise.isEmpty()) {\n+        Optional<QuizExercise> quizExerciseOptional = quizExerciseService.findById(quizExerciseId);\n+        if (quizExerciseOptional.isEmpty()) {\n             return notFound();\n         }\n-        Course course = quizExercise.get().getCourse();\n+\n+        // If the exercise belongs to an exam, the course must be retrieved over the exerciseGroup\n+        QuizExercise quizExercise = quizExerciseOptional.get();\n+        Course course;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1Nzg5OA==", "bodyText": "Do we need this block? It seems like we call init() if it is an exam or a course exercise.", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443657898", "createdAt": "2020-06-22T15:49:30Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/quiz/manage/quiz-exercise-detail.component.ts", "diffHunk": "@@ -134,14 +144,27 @@ export class QuizExerciseDetailComponent implements OnInit, OnChanges, Component\n         this.shortAnswerFilterEnabled = true;\n         this.notificationText = null;\n \n-        const courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.courseId = Number(this.route.snapshot.paramMap.get('courseId'));\n+        this.examId = Number(this.route.snapshot.paramMap.get('examId'));\n         const quizId = Number(this.route.snapshot.paramMap.get('exerciseId'));\n+        const groupId = Number(this.route.snapshot.paramMap.get('groupId'));\n         /** Query the courseService for the participationId given by the params */\n-        if (courseId) {\n-            this.courseService.find(courseId).subscribe((response: HttpResponse<Course>) => {\n+        if (this.courseId) {\n+            this.courseService.find(this.courseId).subscribe((response: HttpResponse<Course>) => {\n                 this.course = response.body!;\n+                // Load exerciseGroup and set exam mode\n+                if (this.examId && groupId) {\n+                    this.isExamMode = true;\n+                    this.exerciseGroupService.find(this.courseId!, this.examId, groupId).subscribe((groupResponse: HttpResponse<ExerciseGroup>) => {\n+                        // Make sure to call init if we didn't receive an id => new quiz-exercise\n+                        this.exerciseGroup = groupResponse.body!;\n+                        if (!quizId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzIwNQ==", "bodyText": "empty space", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443663205", "createdAt": "2020-06-22T15:57:17Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTQ1MA==", "bodyText": "exerciseGroup is not used", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443669450", "createdAt": "2020-06-22T16:06:39Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY1Ng==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670656", "createdAt": "2020-06-22T16:08:34Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY5OQ==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670699", "createdAt": "2020-06-22T16:08:39Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg0NA==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670844", "createdAt": "2020-06-22T16:08:53Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDkzOQ==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670939", "createdAt": "2020-06-22T16:09:00Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTc2MA==", "bodyText": "Move creation of the entity to ModelFactory", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443671760", "createdAt": "2020-06-22T16:10:20Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -242,6 +478,37 @@ private QuizExercise createQuizOnServer(ZonedDateTime releaseDate, ZonedDateTime\n         return quizExerciseServer;\n     }\n \n+    private QuizExercise createQuizOnServerForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzE5Ng==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443673196", "createdAt": "2020-06-22T16:12:45Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = ModelFactory.generateQuizExerciseForExam(now.minusDays(1), now.minusHours(2), exerciseGroup);\n+        quizExercise.setCourse(exerciseGroup.getExam().getCourse());\n+\n+        request.postWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzI0NQ==", "bodyText": "TextExercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443673245", "createdAt": "2020-06-22T16:12:49Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NjYwMA==", "bodyText": "Could use a shared method to populate the exam and the course quiz exercise", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443676600", "createdAt": "2020-06-22T16:18:23Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -60,6 +60,21 @@ public static QuizExercise generateQuizExercise(ZonedDateTime releaseDate, Zoned\n         return quizExercise;\n     }\n \n+    public static QuizExercise generateQuizExerciseForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate, ExerciseGroup exerciseGroup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA==", "bodyText": "Do we need this for exam quizzes? Probably not because the exercise won't be distributed by web sockets?", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443678368", "createdAt": "2020-06-22T16:21:04Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "diffHunk": "@@ -347,7 +347,7 @@ public void sendQuizExerciseToSubscribedClients(QuizExercise quizExercise, Strin\n             Class view = viewForStudentsInQuizExercise(quizExercise);\n             byte[] payload = objectMapper.writerWithView(view).writeValueAsBytes(quizExercise);\n             // For each change we send the same message. The client needs to decide how to handle the date based on the quiz status\n-            if (quizExercise.isVisibleToStudents()) {\n+            if (quizExercise.isVisibleToStudents() && quizExercise.hasCourse()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d045e947a100a36adaa0e4241ce04d756acd6ce3", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/d045e947a100a36adaa0e4241ce04d756acd6ce3", "committedDate": "2020-06-22T16:49:12Z", "message": "Merge develop and resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f48d14beabd53706f817115e0556b81f399f3266", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f48d14beabd53706f817115e0556b81f399f3266", "committedDate": "2020-06-22T16:50:59Z", "message": "Rename test methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "703e494c52c2ded25ba7f7e6c09a0ec3429ac28f", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/703e494c52c2ded25ba7f7e6c09a0ec3429ac28f", "committedDate": "2020-06-22T16:50:59Z", "message": "Replace TextExercise with QuizExercise in QuizExerciseIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df12236913990ddb7348a208d5dd04b033ffadc", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/9df12236913990ddb7348a208d5dd04b033ffadc", "committedDate": "2020-06-22T16:50:59Z", "message": "Remove unnecessary empty space in QuizExerciseIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e353545541475820a61fbb8ddd85c2879d9549ce", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/e353545541475820a61fbb8ddd85c2879d9549ce", "committedDate": "2020-06-22T17:10:16Z", "message": "Merge branch 'develop' into exam/management/quiz-exercises\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f289b0761fde043f0012c0475a02601a18efd8c7", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/f289b0761fde043f0012c0475a02601a18efd8c7", "committedDate": "2020-06-22T17:10:58Z", "message": "Merge branch 'exam/management/quiz-exercises' of https://github.com/ls1intum/Artemis into exam/management/quiz-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3199a10fcb3f3320517f58fc1cd710f75dcf163d", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/3199a10fcb3f3320517f58fc1cd710f75dcf163d", "committedDate": "2020-06-22T18:54:22Z", "message": "Remove unused parameter in QuizExerciseIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19b3e43c252c32b7de7c9763ff8fc59c4302e2e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f19b3e43c252c32b7de7c9763ff8fc59c4302e2e", "committedDate": "2020-06-22T18:54:22Z", "message": "Get course through Exercise -> ExerciseGroup -> Exam -> Course"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796dc75d1181f0d3cf69004a49daa8ea024e7a41", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/796dc75d1181f0d3cf69004a49daa8ea024e7a41", "committedDate": "2020-06-22T20:51:45Z", "message": "Add quiz management module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d99aae73daf10f426aa6cd0366548b014a6fdb9", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/7d99aae73daf10f426aa6cd0366548b014a6fdb9", "committedDate": "2020-06-22T21:29:47Z", "message": "Fix quiz participation title"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c2ad4ad09f3d7d0eeb10e4fd3c044abbb77b94", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/e2c2ad4ad09f3d7d0eeb10e4fd3c044abbb77b94", "committedDate": "2020-06-22T22:59:41Z", "message": "Add quiz preview and solution button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23870f829a3a267a6d37f0fa7895314f79881c48", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/23870f829a3a267a6d37f0fa7895314f79881c48", "committedDate": "2020-06-22T23:00:06Z", "message": "Merge branch 'exam/management/quiz-exercises' of https://github.com/ls1intum/Artemis into exam/management/quiz-exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba0ad6de1e07daf3d4c13749909ffa28a221d63b", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/ba0ad6de1e07daf3d4c13749909ffa28a221d63b", "committedDate": "2020-06-23T06:09:32Z", "message": "Merge branch 'develop' into exam/management/quiz-exercises"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTAyMzk4", "url": "https://github.com/ls1intum/Artemis/pull/1686#pullrequestreview-435502398", "createdAt": "2020-06-23T07:14:42Z", "commit": {"oid": "ba0ad6de1e07daf3d4c13749909ffa28a221d63b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17a2b936f21bbc7f248eca37e4d27aa9e00f02b2", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/17a2b936f21bbc7f248eca37e4d27aa9e00f02b2", "committedDate": "2020-06-23T07:16:52Z", "message": "only schedule quiz exercises in courses, not in exams"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTEzMTM1", "url": "https://github.com/ls1intum/Artemis/pull/1686#pullrequestreview-435513135", "createdAt": "2020-06-23T07:30:34Z", "commit": {"oid": "17a2b936f21bbc7f248eca37e4d27aa9e00f02b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2494, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}