{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTY0ODAz", "number": 2281, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNzoxMFrOEyb6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxODo1NlrOEyb-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzIxNjU5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/kotlin/test/testutils/ClassNameScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNzoxMFrOHpE3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNzoxMFrOHpE3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMzM3Nw==", "bodyText": "re-add kt", "url": "https://github.com/ls1intum/Artemis/pull/2281#discussion_r512833377", "createdAt": "2020-10-27T16:17:10Z", "author": {"login": "krusche"}, "path": "src/main/resources/templates/kotlin/test/testutils/ClassNameScanner.java", "diffHunk": "@@ -219,25 +224,25 @@ private ScanResult computeScanResult() {\n      * each type it finds e.g. filenames ending in .java to the passed JSON object.\n      * @param assignmentFolderName: The root folder where the method starts walking the project structure.\n      * @param node: The current node the method is visiting.\n-     * @param foundTypes: The JSON object where the type names and packages get appended.\n+     * @param types: The JSON object where the type names and packages get appended.\n      */\n     private void walkProjectFileStructure(String assignmentFolderName, File node, Map<String, List<String>> foundTypes) {\n         String fileName = node.getName();\n \n-        if(fileName.contains(\".java\") || fileName.contains(\".kt\")) {\n+        if(fileName.contains(\".java\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62b4287dbf9b908bfa6f7d0d56d075c4107b0e7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzIxNzI3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/kotlin/test/testutils/ClassNameScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNzoxN1rOHpE3zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxNzoxN1rOHpE3zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMzQ4NQ==", "bodyText": "re-add kt", "url": "https://github.com/ls1intum/Artemis/pull/2281#discussion_r512833485", "createdAt": "2020-10-27T16:17:17Z", "author": {"login": "krusche"}, "path": "src/main/resources/templates/kotlin/test/testutils/ClassNameScanner.java", "diffHunk": "@@ -219,25 +224,25 @@ private ScanResult computeScanResult() {\n      * each type it finds e.g. filenames ending in .java to the passed JSON object.\n      * @param assignmentFolderName: The root folder where the method starts walking the project structure.\n      * @param node: The current node the method is visiting.\n-     * @param foundTypes: The JSON object where the type names and packages get appended.\n+     * @param types: The JSON object where the type names and packages get appended.\n      */\n     private void walkProjectFileStructure(String assignmentFolderName, File node, Map<String, List<String>> foundTypes) {\n         String fileName = node.getName();\n \n-        if(fileName.contains(\".java\") || fileName.contains(\".kt\")) {\n+        if(fileName.contains(\".java\")) {\n             String[] fileNameComponents = fileName.split(\"\\\\.\");\n \n             String className = fileNameComponents[fileNameComponents.length - 2];\n-            int until = node.getPath().indexOf(\".java\");\n-            if (until == -1) {\n-                until = node.getPath().indexOf(\".kt\");\n-            }\n-            String packageName = node.getPath().substring(0, until);\n+            String packageName = node.getPath().substring(0, node.getPath().indexOf(\".java\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62b4287dbf9b908bfa6f7d0d56d075c4107b0e7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzIyNTA3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/kotlin/test/testFiles/structural/ConstructorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxODo1NlrOHpE81A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoxODo1NlrOHpE81A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzNDc3Mg==", "bodyText": "can we add some timeout?", "url": "https://github.com/ls1intum/Artemis/pull/2281#discussion_r512834772", "createdAt": "2020-10-27T16:18:56Z", "author": {"login": "krusche"}, "path": "src/main/resources/templates/kotlin/test/testFiles/structural/ConstructorTest.java", "diffHunk": "@@ -1,42 +1,40 @@\n package ${packageName};\n \n-import org.json.JSONArray;\n-import org.json.JSONObject;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.DynamicContainer.dynamicContainer;\n+import static org.junit.jupiter.api.DynamicTest.dynamicTest;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.List;\n \n-import static org.junit.Assert.fail;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.DynamicContainer;\n+import org.junit.jupiter.api.DynamicNode;\n+import org.junit.jupiter.api.TestFactory;\n \n /**\n  * @author Stephan Krusche (krusche@in.tum.de)\n- * @version 3.0 (25.09.2019)\n+ * @version 4.0 (27.10.2020)\n  * <br><br>\n  * This test evaluates if the specified constructors in the structure oracle are correctly implemented with the expected parameter types and annotations,\n  * based on its definition in the structure oracle (test.json).\n  */\n-@RunWith(Parameterized.class)\n public class ConstructorTest extends StructuralTest {\n \n-    public ConstructorTest(String expectedClassName, String expectedPackageName, JSONObject expectedClassJSON) {\n-        super(expectedClassName, expectedPackageName, expectedClassJSON);\n-    }\n-\n     /**\n      * This method collects the classes in the structure oracle file for which constructors are specified.\n-     * These classes are packed into a list, which represents the test data.\n-     * @return A list of arrays containing each class' name, package and the respective JSON object defined in the structure oracle.\n+     * These classes are then transformed into JUnit 5 dynamic tests.\n+     * @return A dynamic test container containing the test for each class which is then executed by JUnit.\n      */\n-    @Parameterized.Parameters(name = \"{0}\")\n-    public static Collection<Object[]> findClasses() {\n-        List<Object[]> testData = new ArrayList<Object[]>();\n+    @TestFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62b4287dbf9b908bfa6f7d0d56d075c4107b0e7"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}