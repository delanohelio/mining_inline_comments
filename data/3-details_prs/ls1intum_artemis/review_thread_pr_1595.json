{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNDYyNDk5", "number": 1595, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzozNlrOED8IAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0OTozNVrOEHuZcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTY2Mjc1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/feedback.model.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzozNlrOGhQKBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozNzo1N1rOGhQncQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDkwMg==", "bodyText": "I guess this can be null, right?", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r437520902", "createdAt": "2020-06-09T15:27:36Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/feedback.model.ts", "diffHunk": "@@ -19,6 +20,7 @@ export enum FeedbackType {\n \n export class Feedback implements BaseEntity {\n     public id: number;\n+    public gradingInstruction: GradingInstruction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4577f62fcd7c13a9617273a1d08e55e37cc0cbe8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyODQzMw==", "bodyText": "yes", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r437528433", "createdAt": "2020-06-09T15:37:57Z", "author": {"login": "HanyaElhashemy"}, "path": "src/main/webapp/app/entities/feedback.model.ts", "diffHunk": "@@ -19,6 +20,7 @@ export enum FeedbackType {\n \n export class Feedback implements BaseEntity {\n     public id: number;\n+    public gradingInstruction: GradingInstruction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDkwMg=="}, "originalCommit": {"oid": "4577f62fcd7c13a9617273a1d08e55e37cc0cbe8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc0NzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozNDo0OVrOGl_RXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozNDo0OVrOGl_RXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NzEzMg==", "bodyText": "This should not be a static method.", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r442487132", "createdAt": "2020-06-18T20:34:49Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -176,7 +177,39 @@ private double calculateTotalScore(Double calculatedScore, Double maxScore) {\n      * @param assessments the List of Feedback\n      * @return the total score\n      */\n-    protected Double calculateTotalScore(List<Feedback> assessments) {\n-        return assessments.stream().mapToDouble(Feedback::getCredits).sum();\n+    public static Double calculateTotalScore(List<Feedback> assessments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a19ea0f9c04d6f1b3ecf2827725660c9f165dd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTMyNTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDozOTozN1rOGnQL5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDozOTozN1rOGnQL5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxMjgzOA==", "bodyText": "please remove this out commented change", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r443812838", "createdAt": "2020-06-22T20:39:37Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "diffHunk": "@@ -39,6 +34,8 @@\n @JsonInclude(JsonInclude.Include.NON_EMPTY)\n public class Result implements Serializable {\n \n+    // private static AssessmentService assessmentService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659ab80987b5e2ae94540b3c01eda81485c705cb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTM1MTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0Nzo1NFrOGnQcfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0Nzo1NFrOGnQcfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNzA4NA==", "bodyText": "you changed the method completely :-) please also adapt the JavaDoc comment above.\nSome additional inline comments would also help", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r443817084", "createdAt": "2020-06-22T20:47:54Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -176,7 +178,39 @@ private double calculateTotalScore(Double calculatedScore, Double maxScore) {\n      * @param assessments the List of Feedback\n      * @return the total score\n      */\n-    protected Double calculateTotalScore(List<Feedback> assessments) {\n-        return assessments.stream().mapToDouble(Feedback::getCredits).sum();\n+    public Double calculateTotalScore(List<Feedback> assessments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659ab80987b5e2ae94540b3c01eda81485c705cb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTM1MzA5OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/service/structured-grading-criterion.service.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0ODoyMVrOGnQdRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0ODoyMVrOGnQdRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNzI4Ng==", "bodyText": "please fix the warning 'expectedResult' is assigned a value but never used", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r443817286", "createdAt": "2020-06-22T20:48:21Z", "author": {"login": "krusche"}, "path": "src/test/javascript/spec/service/structured-grading-criterion.service.spec.ts", "diffHunk": "@@ -0,0 +1,81 @@\n+import { getTestBed, TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { HttpResponse } from '@angular/common/http';\n+import * as chai from 'chai';\n+import { ExerciseHint } from 'app/entities/exercise-hint.model';\n+import { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\n+import { Feedback } from 'app/entities/feedback.model';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+\n+const expect = chai.expect;\n+\n+describe('Structured Grading Criteria Service', () => {\n+    let injector: TestBed;\n+    let service: StructuredGradingCriterionService;\n+    let httpMock: HttpTestingController;\n+    let expectedResult: any;\n+    let feedbacks: Feedback[];\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule],\n+        });\n+        expectedResult = {} as HttpResponse<ExerciseHint>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659ab80987b5e2ae94540b3c01eda81485c705cb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTM1NjY0OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/service/structured-grading-criterion.service.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0OTozNVrOGnQfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjowNjo0MVrOGnSmog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNzg5OQ==", "bodyText": "can you add a second example of a test with some other values?\nThe idea is that each case in the new method in structured-grading-criterion.service.ts is executed at least once!", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r443817899", "createdAt": "2020-06-22T20:49:35Z", "author": {"login": "krusche"}, "path": "src/test/javascript/spec/service/structured-grading-criterion.service.spec.ts", "diffHunk": "@@ -0,0 +1,81 @@\n+import { getTestBed, TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { HttpResponse } from '@angular/common/http';\n+import * as chai from 'chai';\n+import { ExerciseHint } from 'app/entities/exercise-hint.model';\n+import { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\n+import { Feedback } from 'app/entities/feedback.model';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+\n+const expect = chai.expect;\n+\n+describe('Structured Grading Criteria Service', () => {\n+    let injector: TestBed;\n+    let service: StructuredGradingCriterionService;\n+    let httpMock: HttpTestingController;\n+    let expectedResult: any;\n+    let feedbacks: Feedback[];\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule],\n+        });\n+        expectedResult = {} as HttpResponse<ExerciseHint>;\n+        injector = getTestBed();\n+        service = injector.get(StructuredGradingCriterionService);\n+        httpMock = injector.get(HttpTestingController);\n+\n+        // define Grading Criteria and Feedback here\n+        const limitedSGI = new GradingInstruction();\n+        limitedSGI.id = 1;\n+        limitedSGI.credits = 1.0;\n+        limitedSGI.usageCount = 1;\n+        const unlimitedSGI = new GradingInstruction();\n+        limitedSGI.id = 2;\n+        unlimitedSGI.credits = 1.0;\n+        unlimitedSGI.usageCount = 0;\n+        const bigLimitSGI = new GradingInstruction();\n+        limitedSGI.id = 3;\n+        bigLimitSGI.credits = 1.0;\n+        bigLimitSGI.usageCount = 3;\n+\n+        const feedback1 = new Feedback();\n+        feedback1.gradingInstruction = limitedSGI; // +1P\n+        feedback1.credits = limitedSGI.credits;\n+        const feedback2 = new Feedback();\n+        feedback2.gradingInstruction = limitedSGI; // +1P will not be counted because limit exceeded\n+        feedback2.credits = limitedSGI.credits;\n+        const feedback3 = new Feedback();\n+        feedback3.gradingInstruction = bigLimitSGI; // +1P\n+        feedback3.credits = bigLimitSGI.credits;\n+        const feedback4 = new Feedback();\n+        feedback4.gradingInstruction = bigLimitSGI; // +1P will be counted -> limit not exceeded yet\n+        feedback4.credits = bigLimitSGI.credits;\n+        const feedback5 = new Feedback();\n+        feedback5.gradingInstruction = unlimitedSGI; // +1P\n+        feedback5.credits = unlimitedSGI.credits;\n+        const feedback6 = new Feedback();\n+        feedback6.gradingInstruction = unlimitedSGI; // +1P can be applied as often as possible -> unlimited\n+        feedback6.credits = unlimitedSGI.credits;\n+\n+        feedbacks = [];\n+        feedbacks.push(feedback1);\n+        feedbacks.push(feedback2);\n+        feedbacks.push(feedback3);\n+        feedbacks.push(feedback4);\n+        feedbacks.push(feedback5);\n+        feedbacks.push(feedback6);\n+    });\n+\n+    describe('Service methods', () => {\n+        it('should calculate the total score', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659ab80987b5e2ae94540b3c01eda81485c705cb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1MjQ1MA==", "bodyText": "I added a 2nd example with negative and decimal numbers.\nAll different types of feedbacks are covered as well!", "url": "https://github.com/ls1intum/Artemis/pull/1595#discussion_r443852450", "createdAt": "2020-06-22T22:06:41Z", "author": {"login": "HanyaElhashemy"}, "path": "src/test/javascript/spec/service/structured-grading-criterion.service.spec.ts", "diffHunk": "@@ -0,0 +1,81 @@\n+import { getTestBed, TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { HttpResponse } from '@angular/common/http';\n+import * as chai from 'chai';\n+import { ExerciseHint } from 'app/entities/exercise-hint.model';\n+import { StructuredGradingCriterionService } from 'app/exercises/shared/structured-grading-criterion/structured-grading-criterion.service';\n+import { Feedback } from 'app/entities/feedback.model';\n+import { GradingInstruction } from 'app/exercises/shared/structured-grading-criterion/grading-instruction.model';\n+\n+const expect = chai.expect;\n+\n+describe('Structured Grading Criteria Service', () => {\n+    let injector: TestBed;\n+    let service: StructuredGradingCriterionService;\n+    let httpMock: HttpTestingController;\n+    let expectedResult: any;\n+    let feedbacks: Feedback[];\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule],\n+        });\n+        expectedResult = {} as HttpResponse<ExerciseHint>;\n+        injector = getTestBed();\n+        service = injector.get(StructuredGradingCriterionService);\n+        httpMock = injector.get(HttpTestingController);\n+\n+        // define Grading Criteria and Feedback here\n+        const limitedSGI = new GradingInstruction();\n+        limitedSGI.id = 1;\n+        limitedSGI.credits = 1.0;\n+        limitedSGI.usageCount = 1;\n+        const unlimitedSGI = new GradingInstruction();\n+        limitedSGI.id = 2;\n+        unlimitedSGI.credits = 1.0;\n+        unlimitedSGI.usageCount = 0;\n+        const bigLimitSGI = new GradingInstruction();\n+        limitedSGI.id = 3;\n+        bigLimitSGI.credits = 1.0;\n+        bigLimitSGI.usageCount = 3;\n+\n+        const feedback1 = new Feedback();\n+        feedback1.gradingInstruction = limitedSGI; // +1P\n+        feedback1.credits = limitedSGI.credits;\n+        const feedback2 = new Feedback();\n+        feedback2.gradingInstruction = limitedSGI; // +1P will not be counted because limit exceeded\n+        feedback2.credits = limitedSGI.credits;\n+        const feedback3 = new Feedback();\n+        feedback3.gradingInstruction = bigLimitSGI; // +1P\n+        feedback3.credits = bigLimitSGI.credits;\n+        const feedback4 = new Feedback();\n+        feedback4.gradingInstruction = bigLimitSGI; // +1P will be counted -> limit not exceeded yet\n+        feedback4.credits = bigLimitSGI.credits;\n+        const feedback5 = new Feedback();\n+        feedback5.gradingInstruction = unlimitedSGI; // +1P\n+        feedback5.credits = unlimitedSGI.credits;\n+        const feedback6 = new Feedback();\n+        feedback6.gradingInstruction = unlimitedSGI; // +1P can be applied as often as possible -> unlimited\n+        feedback6.credits = unlimitedSGI.credits;\n+\n+        feedbacks = [];\n+        feedbacks.push(feedback1);\n+        feedbacks.push(feedback2);\n+        feedbacks.push(feedback3);\n+        feedbacks.push(feedback4);\n+        feedbacks.push(feedback5);\n+        feedbacks.push(feedback6);\n+    });\n+\n+    describe('Service methods', () => {\n+        it('should calculate the total score', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNzg5OQ=="}, "originalCommit": {"oid": "659ab80987b5e2ae94540b3c01eda81485c705cb"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 34, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}