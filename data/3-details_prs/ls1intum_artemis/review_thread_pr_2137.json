{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTgyMjEz", "number": 2137, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowNlrOEq1tHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxOTo0NlrOEq6CMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NTUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowNlrOHdRoeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowNlrOHdRoeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY0MQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459641", "createdAt": "2020-10-06T17:07:06Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowN1rOHdRoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowN1rOHdRoiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY1Nw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459657", "createdAt": "2020-10-06T17:07:07Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -482,6 +486,44 @@ public void filterSensitiveInformation() {\n         super.filterSensitiveInformation();\n     }\n \n+    @Override\n+    public Set<Result> findResultsFilteredForStudents(Participation participation) {\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream()\n+                .filter(result -> (result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NTcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowOVrOHdRomA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowOVrOHdRomA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY3Mg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExerciseDetails_assessmentDueDate_notPassed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459672", "createdAt": "2020-10-06T17:07:09Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMFrOHdRopg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMFrOHdRopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY4Ng==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'filterForCourseDashboard_assessmentDueDate_passed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459686", "createdAt": "2020-10-06T17:07:10Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(true);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add an manual result, to check whether this is correctly displayed after the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should now how two results and the latest one is the manual result.\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(2);\n+                    assertThat(participation.getResults().stream().sorted(Comparator.comparing(Result::getId).reversed()).iterator().next().getAssessmentType())\n+                            .isEqualTo(AssessmentType.MANUAL);\n+                }\n+                else {\n+                    // All other exercises have only one visible result now\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_notPassed() {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                exercise.getStudentParticipations().iterator().next().setResults(Set\n+                        .of(database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next())));\n+            }\n+            exerciseService.filterForCourseDashboard(exercise, List.copyOf(exercise.getStudentParticipations()), \"student1\", true);\n+            // Programming exercises should only have one automatic result\n+            if (exercise instanceof ProgrammingExercise) {\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(1);\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+            }\n+            else if (exercise instanceof QuizExercise) {\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(1);\n+            }\n+            else {\n+                // All other exercises have only one visible result now\n+                assertThat(exercise.getStudentParticipations().iterator().next().getResults().size()).isEqualTo(0);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_passed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMVrOHdRosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMVrOHdRosg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY5OA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459698", "createdAt": "2020-10-06T17:07:11Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -482,6 +486,44 @@ public void filterSensitiveInformation() {\n         super.filterSensitiveInformation();\n     }\n \n+    @Override\n+    public Set<Result> findResultsFilteredForStudents(Participation participation) {\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream()\n+                .filter(result -> (result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Submission findLatestSubmissionWithRatedResultWithCompletionDate(Participation participation, Boolean ignoreAssessmentDueDate) {\n+        // for most types of exercises => return latest result (all results are relevant)\n+        Submission latestSubmission = null;\n+        // we get the results over the submissions\n+        if (participation.getSubmissions() == null || participation.getSubmissions().isEmpty()) {\n+            return null;\n+        }\n+        for (var submission : participation.getSubmissions()) {\n+            var result = submission.getResult();\n+            if (result == null) {\n+                continue;\n+            }\n+            // NOTE: for the dashboard we only use rated results with completion date or automatic result\n+            boolean isAssessmentOver = ignoreAssessmentDueDate || getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+            if ((result.getAssessmentType().equals(AssessmentType.MANUAL) && isAssessmentOver) || result.getAssessmentType().equals(AssessmentType.AUTOMATIC)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NTkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMlrOHdRovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMlrOHdRovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcxMQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459711", "createdAt": "2020-10-06T17:07:12Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        // Add an automatic result first\n+        var firstResult = addStudentParticipationWithResult(AssessmentType.AUTOMATIC, null);\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        // Add a parameterized second result\n+        var secondResult = database.addResultToParticipation(assessmentType, completionDate, programmingExerciseParticipation);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+\n+        // Expect the request to always be ok because it should at least return the first automatic result\n+        var requestedParticipation = request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+                ProgrammingExerciseStudentParticipation.class);\n+\n+        assertThat(requestedParticipation.getResults()).hasSize(1);\n+        var requestedResult = requestedParticipation.getResults().iterator().next();\n+        // Depending on the parameters we expect to get the first or the second created result from the server\n+        if (expectLastCreatedResult) {\n+            assertThat(requestedResult).isEqualTo(secondResult);\n+        }\n+        else {\n+            assertThat(requestedResult).isEqualTo(firstResult);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void getParticipationWithLatestResultAsAnInstructor() throws Exception {\n-        addStudentParticipationWithResult();\n+    public void getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxM1rOHdRoyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxM1rOHdRoyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcyMw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459723", "createdAt": "2020-10-06T17:07:13Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/ProgrammingExercise.java", "diffHunk": "@@ -286,7 +288,9 @@ public void generateAndSetProjectKey() {\n     public Submission findAppropriateSubmissionByResults(Set<Submission> submissions) {\n         return submissions.stream().filter(submission -> {\n             if (submission.getResult() != null) {\n-                return submission.getResult().isRated();\n+                return (submission.getResult().isRated() && !submission.getResult().getAssessmentType().equals(AssessmentType.MANUAL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNFrOHdRo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNFrOHdRo1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTczMw==", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setArgumentsForGetParticipationWithLatestResult()'.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459733", "createdAt": "2020-10-06T17:07:14Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc0MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'filterForCourseDashboard_assessmentDueDate_notPassed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459740", "createdAt": "2020-10-06T17:07:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(true);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add an manual result, to check whether this is correctly displayed after the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should now how two results and the latest one is the manual result.\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(2);\n+                    assertThat(participation.getResults().stream().sorted(Comparator.comparing(Result::getId).reversed()).iterator().next().getAssessmentType())\n+                            .isEqualTo(AssessmentType.MANUAL);\n+                }\n+                else {\n+                    // All other exercises have only one visible result now\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void filterForCourseDashboard_assessmentDueDate_notPassed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNVrOHdRo3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc0Mg==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The setter 'setArgumentsForGetParticipationWithLatestResult' should not return any type except void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459742", "createdAt": "2020-10-06T17:07:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNlrOHdRo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxNlrOHdRo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc1NQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459755", "createdAt": "2020-10-06T17:07:16Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -316,6 +316,15 @@ public static ModelingSubmission generateModelingSubmission(String model, boolea\n         return submission;\n     }\n \n+    public static QuizSubmission generateQuizSubmission(boolean submitted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxN1rOHdRo9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxN1rOHdRo9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc2Ng==", "bodyText": "Codacy found an issue: The instance method name 'getParticipationWithLatestResult_multipleResultsAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459766", "createdAt": "2020-10-06T17:07:17Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxOVrOHdRpAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxOVrOHdRpAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc3Ng==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResultAsAStudent' should not return void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459776", "createdAt": "2020-10-06T17:07:19Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc4Mw==", "bodyText": "Codacy found an issue: Avoid really long methods.", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459783", "createdAt": "2020-10-06T17:07:20Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -563,6 +563,164 @@ public Course createCourseWithExamAndExerciseGroupAndExercises(User user) {\n         return studentQuestions;\n     }\n \n+    public Course createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(boolean hasAssessmentDueDatePassed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMFrOHdRpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc4OA==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResult_multipleResultsAvailable' should not return void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459788", "createdAt": "2020-10-06T17:07:20Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMVrOHdRpFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMVrOHdRpFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTc5OQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExerciseDetails_assessmentDueDate_passed' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459799", "createdAt": "2020-10-06T17:07:21Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/ExerciseIntegrationTest.java", "diffHunk": "@@ -260,6 +266,106 @@ public void testGetExerciseDetails() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_notPassed() throws Exception {\n+        Course course = database.createCourseWithAllExerciseTypesAndParticipationsAndSubmissionsAndResults(false);\n+        for (Exercise exercise : course.getExercises()) {\n+            // For programming exercises we add a manual result, to check whether the manual result will be displayed before the assessment due date\n+            if (exercise instanceof ProgrammingExercise) {\n+                database.addResultToParticipation(AssessmentType.MANUAL, ZonedDateTime.now().minusHours(1L), exercise.getStudentParticipations().iterator().next());\n+            }\n+            Exercise exerciseWithDetails = request.get(\"/api/exercises/\" + exercise.getId() + \"/details\", HttpStatus.OK, Exercise.class);\n+            for (StudentParticipation participation : exerciseWithDetails.getStudentParticipations()) {\n+                // Programming exercises should only have one automatic result\n+                if (exercise instanceof ProgrammingExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                    assertThat(participation.getResults().iterator().next().getAssessmentType()).isEqualTo(AssessmentType.AUTOMATIC);\n+                }\n+                // Quiz exercises should only have one automatic result\n+                else if (exercise instanceof QuizExercise) {\n+                    assertThat(participation.getResults().size()).isEqualTo(1);\n+                }\n+                else {\n+                    // All other exercises should not display a result at all\n+                    assertThat(participation.getResults().size()).isEqualTo(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetExerciseDetails_assessmentDueDate_passed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1NjUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMlrOHdRpHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoyMlrOHdRpHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTgwNg==", "bodyText": "Codacy found an issue: Linguistics Antipattern - The getter 'getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound' should not return void linguistically", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500459806", "createdAt": "2020-10-06T17:07:22Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void getParticipationWithLatestResult_multipleResultsAvailable(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        // Add an automatic result first\n+        var firstResult = addStudentParticipationWithResult(AssessmentType.AUTOMATIC, null);\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        // Add a parameterized second result\n+        var secondResult = database.addResultToParticipation(assessmentType, completionDate, programmingExerciseParticipation);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+\n+        // Expect the request to always be ok because it should at least return the first automatic result\n+        var requestedParticipation = request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+                ProgrammingExerciseStudentParticipation.class);\n+\n+        assertThat(requestedParticipation.getResults()).hasSize(1);\n+        var requestedResult = requestedParticipation.getResults().iterator().next();\n+        // Depending on the parameters we expect to get the first or the second created result from the server\n+        if (expectLastCreatedResult) {\n+            assertThat(requestedResult).isEqualTo(secondResult);\n+        }\n+        else {\n+            assertThat(requestedResult).isEqualTo(firstResult);\n+        }\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void getParticipationWithLatestResultAsAnInstructor() throws Exception {\n-        addStudentParticipationWithResult();\n+    public void getParticipationWithLatestResultAsAnInstructor_noCompletionDate_notFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDI1NTIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxNjo1MFrOHdYXRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxNjo1MFrOHdYXRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2OTkyNQ==", "bodyText": "See reason given by Codacy.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n          \n          \n            \n                private static Stream<Arguments> argumentsForGetParticipationWithLatestResult() {", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500569925", "createdAt": "2020-10-06T20:16:50Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDI1NTkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxNzowMVrOHdYXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxNzowMVrOHdYXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDAyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n          \n          \n            \n                @MethodSource(\"argumentsForGetParticipationWithLatestResult\")", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500570028", "createdAt": "2020-10-06T20:17:01Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e02996fd53c7a1a360240aa03fb334b780529ae"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDI2MTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxODo1MlrOHdYbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxODo1MlrOHdYbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());\n          \n          \n            \n                    if (!isAssessmentOver) {\n          \n          \n            \n                        return Set.of();\n          \n          \n            \n                    }\n          \n          \n            \n                    return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500570959", "createdAt": "2020-10-06T20:18:52Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -591,7 +591,8 @@ else if (resultDate1.isAfter(resultDate2)) {\n      * @return all results of given participation, or null, if none exist\n      */\n     public Set<Result> findResultsFilteredForStudents(Participation participation) {\n-        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null).collect(Collectors.toSet());\n+        boolean isAssessmentOver = getAssessmentDueDate() == null || getAssessmentDueDate().isBefore(ZonedDateTime.now());\n+        return participation.getResults().stream().filter(result -> result.getCompletionDate() != null && isAssessmentOver).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDI2NDgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxOTo0NlrOHdYdMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDoxOTo0NlrOHdYdMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MTQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n          \n          \n            \n                @MethodSource(\"argumentsForGetParticipationWithLatestResult\")", "url": "https://github.com/ls1intum/Artemis/pull/2137#discussion_r500571440", "createdAt": "2020-10-06T20:19:46Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseParticipationIntegrationTest.java", "diffHunk": "@@ -69,28 +74,81 @@ public void tearDown() {\n         database.resetDatabase();\n     }\n \n-    @Test\n+    private static Stream<Arguments> setArgumentsForGetParticipationWithLatestResult() {\n+        ZonedDateTime someDate = ZonedDateTime.now();\n+        ZonedDateTime futureDate = ZonedDateTime.now().plusDays(3);\n+        ZonedDateTime pastDate = ZonedDateTime.now().minusDays(1);\n+        return Stream.of(\n+                // No assessmentType and no completionDate -> notFound\n+                Arguments.of(null, null, null, false),\n+                // Automatic result is always returned\n+                Arguments.of(AssessmentType.AUTOMATIC, null, null, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, null, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, someDate, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, someDate, pastDate, true),\n+                Arguments.of(AssessmentType.AUTOMATIC, null, futureDate, true), Arguments.of(AssessmentType.AUTOMATIC, null, pastDate, true),\n+                // Manual result without completion date (assessment was only saved but no submitted) is not returned\n+                Arguments.of(AssessmentType.MANUAL, null, null, false), Arguments.of(AssessmentType.MANUAL, null, futureDate, false),\n+                Arguments.of(AssessmentType.MANUAL, null, pastDate, false),\n+                // Manual result is not returned if completed and assessment due date has not passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, futureDate, false),\n+                // Manual result is returned if completed and assessmentDue date has passed\n+                Arguments.of(AssessmentType.MANUAL, someDate, pastDate, true));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")\n     @WithMockUser(username = \"student1\", roles = \"USER\")\n-    public void getParticipationWithLatestResultAsAStudent() throws Exception {\n-        addStudentParticipationWithResult();\n-        StudentParticipation participation = (StudentParticipation) studentParticipationRepository.findAll().get(0);\n-        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", HttpStatus.OK,\n+    public void getParticipationWithLatestResultAsAStudent(AssessmentType assessmentType, ZonedDateTime completionDate, ZonedDateTime assessmentDueDate,\n+            boolean expectLastCreatedResult) throws Exception {\n+        programmingExercise.setAssessmentDueDate(assessmentDueDate);\n+        programmingExerciseRepository.save(programmingExercise);\n+        addStudentParticipationWithResult(assessmentType, completionDate);\n+        StudentParticipation participation = studentParticipationRepository.findAll().get(0);\n+        var expectedStatus = expectLastCreatedResult ? HttpStatus.OK : HttpStatus.NOT_FOUND;\n+        request.get(participationsBaseUrl + participation.getId() + \"/student-participation-with-latest-result-and-feedbacks\", expectedStatus,\n                 ProgrammingExerciseStudentParticipation.class);\n     }\n \n+    @ParameterizedTest\n+    @MethodSource(\"setArgumentsForGetParticipationWithLatestResult\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f587050d3f1091246a2c5ebe0dc232283a2c5626"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4730, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}