{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTc1NzY5", "number": 1552, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1OToxOFrOEUuOKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozNjo0MVrOEUx6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTY0MjY3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-score-calculation.service.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1OToxOFrOG7FK0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozNzoyMVrOG7GP_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMzg1OQ==", "bodyText": "How do you handle programming exercises? I cant find a specific condition that match programming exercises?\nIt seems to work, I just could not figure out why, maybe you could add a comment for that?", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464603859", "createdAt": "2020-08-03T18:59:18Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/app/overview/course-score-calculation.service.ts", "diffHunk": "@@ -36,8 +39,15 @@ export class CourseScoreCalculationService {\n                             score = 0;\n                         }\n                         absoluteScore = absoluteScore + score * this.SCORE_NORMALIZATION_VALUE * exercise.maxScore;\n+                        reachableScore += exercise.maxScore;\n                     }\n                     presentationScore += participation.presentationScore !== undefined ? participation.presentationScore : 0;\n+\n+                    if (participation.initializationState === InitializationState.INITIALIZED && exercise.type !== ExerciseType.PROGRAMMING) {\n+                        reachableScore += exercise.maxScore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a4f63ec5ea89d0d4961b038c58e985030420e0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMTU2NA==", "bodyText": "I believe programming exercises keep their initialized state even after they are done. Therefore the reachable score was added twice.", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464621564", "createdAt": "2020-08-03T19:37:21Z", "author": {"login": "sjagla27"}, "path": "src/main/webapp/app/overview/course-score-calculation.service.ts", "diffHunk": "@@ -36,8 +39,15 @@ export class CourseScoreCalculationService {\n                             score = 0;\n                         }\n                         absoluteScore = absoluteScore + score * this.SCORE_NORMALIZATION_VALUE * exercise.maxScore;\n+                        reachableScore += exercise.maxScore;\n                     }\n                     presentationScore += participation.presentationScore !== undefined ? participation.presentationScore : 0;\n+\n+                    if (participation.initializationState === InitializationState.INITIALIZED && exercise.type !== ExerciseType.PROGRAMMING) {\n+                        reachableScore += exercise.maxScore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMzg1OQ=="}, "originalCommit": {"oid": "d8a4f63ec5ea89d0d4961b038c58e985030420e0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTY1MjIyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTowMjozM1rOG7FQxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozNjowMlrOG7GNsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNTM4MQ==", "bodyText": "Could you please document what split.length == 2/4 corresponds to (which exercisetype)?", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464605381", "createdAt": "2020-08-03T19:02:33Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "diffHunk": "@@ -343,28 +344,82 @@ export class CourseStatisticsComponent implements OnInit, OnDestroy {\n         return chartElement;\n     }\n \n-    // TODO: document the implementation of this method --> it is not really obvious\n-    // TODO: save the return value of this method in the result object (as temp variable) to avoid that this method is invoked all the time\n-    absoluteResult(result: Result): number | null {\n+    generateTooltip(result: Result, groupedExercise: any): void {\n         if (!result.resultString) {\n-            return 0;\n-        }\n-        if (result.resultString && result.resultString.indexOf('failed') !== -1) {\n-            return null;\n+            groupedExercise.scores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                    points: 0,\n+                    percentage: 0,\n+                }),\n+            );\n+            groupedExercise.missedScores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                    points: '',\n+                    percentage: 100,\n+                }),\n+            );\n         }\n-        if (result.resultString && result.resultString.indexOf('passed') !== -1) {\n-            return null;\n+\n+        const replaced = result.resultString.replace(',', '.');\n+        const split = replaced.split(' ');\n+\n+        if (!replaced.includes('passed') && !replaced.includes('points')) {\n+            if (result.score >= 50) {\n+                groupedExercise.scores.tooltips.push(`${result.resultString} (${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`(${100 - result.score}%)`);\n+            } else {\n+                groupedExercise.scores.tooltips.push(`(${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`${result.resultString} (${100 - result.score}%)`);\n+            }\n+\n+            return;\n         }\n-        if (result.submission && result.submission.submissionExerciseType === SubmissionExerciseType.PROGRAMMING && (result.submission as ProgrammingSubmission).buildFailed) {\n-            return null;\n+\n+        if (replaced.includes('points')) {\n+            if (split.length === 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a4f63ec5ea89d0d4961b038c58e985030420e0"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMDk3OA==", "bodyText": "Done.", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464620978", "createdAt": "2020-08-03T19:36:02Z", "author": {"login": "sjagla27"}, "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "diffHunk": "@@ -343,28 +344,82 @@ export class CourseStatisticsComponent implements OnInit, OnDestroy {\n         return chartElement;\n     }\n \n-    // TODO: document the implementation of this method --> it is not really obvious\n-    // TODO: save the return value of this method in the result object (as temp variable) to avoid that this method is invoked all the time\n-    absoluteResult(result: Result): number | null {\n+    generateTooltip(result: Result, groupedExercise: any): void {\n         if (!result.resultString) {\n-            return 0;\n-        }\n-        if (result.resultString && result.resultString.indexOf('failed') !== -1) {\n-            return null;\n+            groupedExercise.scores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                    points: 0,\n+                    percentage: 0,\n+                }),\n+            );\n+            groupedExercise.missedScores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                    points: '',\n+                    percentage: 100,\n+                }),\n+            );\n         }\n-        if (result.resultString && result.resultString.indexOf('passed') !== -1) {\n-            return null;\n+\n+        const replaced = result.resultString.replace(',', '.');\n+        const split = replaced.split(' ');\n+\n+        if (!replaced.includes('passed') && !replaced.includes('points')) {\n+            if (result.score >= 50) {\n+                groupedExercise.scores.tooltips.push(`${result.resultString} (${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`(${100 - result.score}%)`);\n+            } else {\n+                groupedExercise.scores.tooltips.push(`(${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`${result.resultString} (${100 - result.score}%)`);\n+            }\n+\n+            return;\n         }\n-        if (result.submission && result.submission.submissionExerciseType === SubmissionExerciseType.PROGRAMMING && (result.submission as ProgrammingSubmission).buildFailed) {\n-            return null;\n+\n+        if (replaced.includes('points')) {\n+            if (split.length === 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNTM4MQ=="}, "originalCommit": {"oid": "d8a4f63ec5ea89d0d4961b038c58e985030420e0"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTY1MzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTowMzowMlrOG7FRqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozNjoxMFrOG7GN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNTYxMA==", "bodyText": "Same as above.", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464605610", "createdAt": "2020-08-03T19:03:02Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "diffHunk": "@@ -343,28 +344,82 @@ export class CourseStatisticsComponent implements OnInit, OnDestroy {\n         return chartElement;\n     }\n \n-    // TODO: document the implementation of this method --> it is not really obvious\n-    // TODO: save the return value of this method in the result object (as temp variable) to avoid that this method is invoked all the time\n-    absoluteResult(result: Result): number | null {\n+    generateTooltip(result: Result, groupedExercise: any): void {\n         if (!result.resultString) {\n-            return 0;\n-        }\n-        if (result.resultString && result.resultString.indexOf('failed') !== -1) {\n-            return null;\n+            groupedExercise.scores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                    points: 0,\n+                    percentage: 0,\n+                }),\n+            );\n+            groupedExercise.missedScores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                    points: '',\n+                    percentage: 100,\n+                }),\n+            );\n         }\n-        if (result.resultString && result.resultString.indexOf('passed') !== -1) {\n-            return null;\n+\n+        const replaced = result.resultString.replace(',', '.');\n+        const split = replaced.split(' ');\n+\n+        if (!replaced.includes('passed') && !replaced.includes('points')) {\n+            if (result.score >= 50) {\n+                groupedExercise.scores.tooltips.push(`${result.resultString} (${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`(${100 - result.score}%)`);\n+            } else {\n+                groupedExercise.scores.tooltips.push(`(${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`${result.resultString} (${100 - result.score}%)`);\n+            }\n+\n+            return;\n         }\n-        if (result.submission && result.submission.submissionExerciseType === SubmissionExerciseType.PROGRAMMING && (result.submission as ProgrammingSubmission).buildFailed) {\n-            return null;\n+\n+        if (replaced.includes('points')) {\n+            if (split.length === 2) {\n+                groupedExercise.scores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                        points: parseFloat(split[0]),\n+                        percentage: result.score,\n+                    }),\n+                );\n+                groupedExercise.missedScores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                        points: '',\n+                        percentage: 100 - result.score,\n+                    }),\n+                );\n+                return;\n+            }\n+            if (split.length === 4) {\n+                groupedExercise.scores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                        points: parseFloat(split[0]),\n+                        percentage: result.score,\n+                    }),\n+                );\n+                groupedExercise.missedScores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                        points: parseFloat(split[2]) - parseFloat(split[0]),\n+                        percentage: 100 - result.score,\n+                    }),\n+                );\n+                return;\n+            }\n         }\n-        if (result.resultString.indexOf('of') === -1) {\n-            if (result.resultString.indexOf('points') === -1) {\n-                return 0;\n+\n+        if (replaced.includes('passed')) {\n+            if (split.length === 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a4f63ec5ea89d0d4961b038c58e985030420e0"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMTA0MA==", "bodyText": "Done.", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464621040", "createdAt": "2020-08-03T19:36:10Z", "author": {"login": "sjagla27"}, "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "diffHunk": "@@ -343,28 +344,82 @@ export class CourseStatisticsComponent implements OnInit, OnDestroy {\n         return chartElement;\n     }\n \n-    // TODO: document the implementation of this method --> it is not really obvious\n-    // TODO: save the return value of this method in the result object (as temp variable) to avoid that this method is invoked all the time\n-    absoluteResult(result: Result): number | null {\n+    generateTooltip(result: Result, groupedExercise: any): void {\n         if (!result.resultString) {\n-            return 0;\n-        }\n-        if (result.resultString && result.resultString.indexOf('failed') !== -1) {\n-            return null;\n+            groupedExercise.scores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                    points: 0,\n+                    percentage: 0,\n+                }),\n+            );\n+            groupedExercise.missedScores.tooltips.push(\n+                this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                    points: '',\n+                    percentage: 100,\n+                }),\n+            );\n         }\n-        if (result.resultString && result.resultString.indexOf('passed') !== -1) {\n-            return null;\n+\n+        const replaced = result.resultString.replace(',', '.');\n+        const split = replaced.split(' ');\n+\n+        if (!replaced.includes('passed') && !replaced.includes('points')) {\n+            if (result.score >= 50) {\n+                groupedExercise.scores.tooltips.push(`${result.resultString} (${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`(${100 - result.score}%)`);\n+            } else {\n+                groupedExercise.scores.tooltips.push(`(${result.score}%)`);\n+                groupedExercise.missedScores.tooltips.push(`${result.resultString} (${100 - result.score}%)`);\n+            }\n+\n+            return;\n         }\n-        if (result.submission && result.submission.submissionExerciseType === SubmissionExerciseType.PROGRAMMING && (result.submission as ProgrammingSubmission).buildFailed) {\n-            return null;\n+\n+        if (replaced.includes('points')) {\n+            if (split.length === 2) {\n+                groupedExercise.scores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                        points: parseFloat(split[0]),\n+                        percentage: result.score,\n+                    }),\n+                );\n+                groupedExercise.missedScores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                        points: '',\n+                        percentage: 100 - result.score,\n+                    }),\n+                );\n+                return;\n+            }\n+            if (split.length === 4) {\n+                groupedExercise.scores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseAchievedScore', {\n+                        points: parseFloat(split[0]),\n+                        percentage: result.score,\n+                    }),\n+                );\n+                groupedExercise.missedScores.tooltips.push(\n+                    this.translateService.instant('artemisApp.courseOverview.statistics.exerciseMissedScore', {\n+                        points: parseFloat(split[2]) - parseFloat(split[0]),\n+                        percentage: 100 - result.score,\n+                    }),\n+                );\n+                return;\n+            }\n         }\n-        if (result.resultString.indexOf('of') === -1) {\n-            if (result.resultString.indexOf('points') === -1) {\n-                return 0;\n+\n+        if (replaced.includes('passed')) {\n+            if (split.length === 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNTYxMA=="}, "originalCommit": {"oid": "d8a4f63ec5ea89d0d4961b038c58e985030420e0"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjIzNDEwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozMDo0OFrOG7KyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozMDo0OFrOG7KyBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NTgxNA==", "bodyText": "Why do you need all those constants? As far as I can see you you just assign them below to reachable scores?", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464695814", "createdAt": "2020-08-03T22:30:48Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "diffHunk": "@@ -424,6 +482,38 @@ export class CourseStatisticsComponent implements OnInit, OnDestroy {\n         this.totalRelativeScore = this.calculateTotalScoreForTheCourse(RELATIVE_SCORE);\n     }\n \n+    calculateReachableScores() {\n+        const quizzesTotalCurrentMaxScore = this.calculateScoreTypeForExerciseType(ExerciseType.QUIZ, REACHABLE_SCORE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250e1621dbaef22930ef32bdda9c1efd126e8d55"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjIzNjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozMTo1MVrOG7KzcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozMTo1MVrOG7KzcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NjE3Nw==", "bodyText": "Why do you need all those constants? As far as I can see you you just assign them below?", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464696177", "createdAt": "2020-08-03T22:31:51Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/overview/course-statistics/course-statistics.component.ts", "diffHunk": "@@ -424,6 +482,38 @@ export class CourseStatisticsComponent implements OnInit, OnDestroy {\n         this.totalRelativeScore = this.calculateTotalScoreForTheCourse(RELATIVE_SCORE);\n     }\n \n+    calculateReachableScores() {\n+        const quizzesTotalCurrentMaxScore = this.calculateScoreTypeForExerciseType(ExerciseType.QUIZ, REACHABLE_SCORE);\n+        const programmingExerciseTotalCurrentMaxScore = this.calculateScoreTypeForExerciseType(ExerciseType.PROGRAMMING, REACHABLE_SCORE);\n+        const modelingExerciseTotalCurrentMaxScore = this.calculateScoreTypeForExerciseType(ExerciseType.MODELING, REACHABLE_SCORE);\n+        const textExerciseTotalCurrentMaxScore = this.calculateScoreTypeForExerciseType(ExerciseType.TEXT, REACHABLE_SCORE);\n+        const fileUploadExerciseTotalCurrentMaxScore = this.calculateScoreTypeForExerciseType(ExerciseType.FILE_UPLOAD, REACHABLE_SCORE);\n+        const reachableScores = {};\n+        reachableScores[ExerciseType.QUIZ] = quizzesTotalCurrentMaxScore;\n+        reachableScores[ExerciseType.PROGRAMMING] = programmingExerciseTotalCurrentMaxScore;\n+        reachableScores[ExerciseType.MODELING] = modelingExerciseTotalCurrentMaxScore;\n+        reachableScores[ExerciseType.TEXT] = textExerciseTotalCurrentMaxScore;\n+        reachableScores[ExerciseType.FILE_UPLOAD] = fileUploadExerciseTotalCurrentMaxScore;\n+        this.reachableScores = reachableScores;\n+        this.reachableScore = this.calculateTotalScoreForTheCourse(REACHABLE_SCORE);\n+    }\n+\n+    calculateCurrentRelativeScores(): void {\n+        const quizzesCurrentRelativeScore = this.calculateScoreTypeForExerciseType(ExerciseType.QUIZ, CURRENT_RELATIVE_SCORE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250e1621dbaef22930ef32bdda9c1efd126e8d55"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjI0NjgyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-score-calculation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozNjo0MVrOG7K5gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjozNjo0MVrOG7K5gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY5NzczMQ==", "bodyText": "I guess this is not in the scope of this ticket but I am unsure why we use a Map<string,number> here and export the keys in this complicated fashion.  Would something like\ninterface CourseScores { absoluteScore: number; relativeScore: number; } \nnot be much cleaner and more in the spirit of typescript?", "url": "https://github.com/ls1intum/Artemis/pull/1552#discussion_r464697731", "createdAt": "2020-08-03T22:36:41Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/overview/course-score-calculation.service.ts", "diffHunk": "@@ -1,16 +1,18 @@\n import { Injectable } from '@angular/core';\n import { Result } from 'app/entities/result.model';\n import { Course } from 'app/entities/course.model';\n-import { Exercise } from 'app/entities/exercise.model';\n+import { Exercise, ExerciseType } from 'app/entities/exercise.model';\n import * as moment from 'moment';\n import { Moment } from 'moment';\n import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n-import { Participation } from 'app/entities/participation/participation.model';\n+import { InitializationState, Participation } from 'app/entities/participation/participation.model';\n \n export const ABSOLUTE_SCORE = 'absoluteScore';\n export const RELATIVE_SCORE = 'relativeScore';\n export const MAX_SCORE = 'maxScore';\n export const PRESENTATION_SCORE = 'presentationScore';\n+export const REACHABLE_SCORE = 'reachableScore';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250e1621dbaef22930ef32bdda9c1efd126e8d55"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 12, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}