{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1OTU5NDgx", "number": 2341, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjo1Nzo1NFrOE2_KmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTozMTowOFrOE5sWmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDkzNDY0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/lectureUnit.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjo1Nzo1NFrOHwE8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoxMTo0N1rOHweWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NDc2MQ==", "bodyText": "Missing space before Du.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520174761", "createdAt": "2020-11-09T22:57:54Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/i18n/de/lectureUnit.json", "diffHunk": "@@ -13,6 +14,31 @@\n             },\n             \"releaseDate\": \"Ver\u00f6ffentlichungsdatum\"\n         },\n+        \"textUnit\": {\n+            \"created\": \"Eine neue Texteinheit erstellt\",\n+            \"updated\": \"Texteinheit geupdated\",\n+            \"tooltip\": \"Das ist eine Texteinheit.\",\n+            \"popup\": \"In Popup \u00f6ffnen\",\n+            \"notReleasedTooltip\": \"Text nur sichtbar f\u00fcr Tutoren und Dozenten. Ver\u00f6ffentlichkeitsdatum:\",\n+            \"markdownHelp\": \"Hier kann Markdown eingegeben werden. Mehr informationen: \",\n+            \"cachedMarkdown\": \"Artemis fand ungespeichertes Markdown im local storage. M\u00f6chtest du es laden? Speicherdatum:\",\n+            \"createTextUnit\": {\n+                \"title\": \"Erstelle Texteinheit\",\n+                \"name\": \"Name\",\n+                \"content\": \"Inhalt\",\n+                \"namePlaceHolder\": \"Gib der Texteinheit einen Namen\",\n+                \"nameRequiredValidationError\": \"Der Name ist ein Pflichtfeld.\",\n+                \"nameMaxLengthValidationError\": \"Der Name kann maximal 255 Zeichen lang sein.\"\n+            },\n+            \"editTextUnit\": {\n+                \"title\": \"Bearbeite Texteinheit\"\n+            },\n+            \"delete\": {\n+                \"question\": \"Willst du wirklich die Texteinheit <strong>{{ title }}</strong> l\u00f6schen?Du kannst diese Aktion nicht r\u00fcckg\u00e4ngig machen!\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9efabdb8751e420a62040ef13a8a0d3ce43320"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5MDk0NQ==", "bodyText": "Done in e881a30", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520590945", "createdAt": "2020-11-10T14:11:47Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/i18n/de/lectureUnit.json", "diffHunk": "@@ -13,6 +14,31 @@\n             },\n             \"releaseDate\": \"Ver\u00f6ffentlichungsdatum\"\n         },\n+        \"textUnit\": {\n+            \"created\": \"Eine neue Texteinheit erstellt\",\n+            \"updated\": \"Texteinheit geupdated\",\n+            \"tooltip\": \"Das ist eine Texteinheit.\",\n+            \"popup\": \"In Popup \u00f6ffnen\",\n+            \"notReleasedTooltip\": \"Text nur sichtbar f\u00fcr Tutoren und Dozenten. Ver\u00f6ffentlichkeitsdatum:\",\n+            \"markdownHelp\": \"Hier kann Markdown eingegeben werden. Mehr informationen: \",\n+            \"cachedMarkdown\": \"Artemis fand ungespeichertes Markdown im local storage. M\u00f6chtest du es laden? Speicherdatum:\",\n+            \"createTextUnit\": {\n+                \"title\": \"Erstelle Texteinheit\",\n+                \"name\": \"Name\",\n+                \"content\": \"Inhalt\",\n+                \"namePlaceHolder\": \"Gib der Texteinheit einen Namen\",\n+                \"nameRequiredValidationError\": \"Der Name ist ein Pflichtfeld.\",\n+                \"nameMaxLengthValidationError\": \"Der Name kann maximal 255 Zeichen lang sein.\"\n+            },\n+            \"editTextUnit\": {\n+                \"title\": \"Bearbeite Texteinheit\"\n+            },\n+            \"delete\": {\n+                \"question\": \"Willst du wirklich die Texteinheit <strong>{{ title }}</strong> l\u00f6schen?Du kannst diese Aktion nicht r\u00fcckg\u00e4ngig machen!\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NDc2MQ=="}, "originalCommit": {"oid": "ee9efabdb8751e420a62040ef13a8a0d3ce43320"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDkzNjMyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/lectureUnit.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjo1ODozNlrOHwE9sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoxMTo1NVrOHweW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTAyNg==", "bodyText": "This : has a trailing space while the other two don't. Is there a policy here? (I.e. should we make that consistent by removing the space here?)", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520175026", "createdAt": "2020-11-09T22:58:36Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/i18n/de/lectureUnit.json", "diffHunk": "@@ -13,6 +14,31 @@\n             },\n             \"releaseDate\": \"Ver\u00f6ffentlichungsdatum\"\n         },\n+        \"textUnit\": {\n+            \"created\": \"Eine neue Texteinheit erstellt\",\n+            \"updated\": \"Texteinheit geupdated\",\n+            \"tooltip\": \"Das ist eine Texteinheit.\",\n+            \"popup\": \"In Popup \u00f6ffnen\",\n+            \"notReleasedTooltip\": \"Text nur sichtbar f\u00fcr Tutoren und Dozenten. Ver\u00f6ffentlichkeitsdatum:\",\n+            \"markdownHelp\": \"Hier kann Markdown eingegeben werden. Mehr informationen: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9efabdb8751e420a62040ef13a8a0d3ce43320"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5MTA3MQ==", "bodyText": "Done in e881a30", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520591071", "createdAt": "2020-11-10T14:11:55Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/i18n/de/lectureUnit.json", "diffHunk": "@@ -13,6 +14,31 @@\n             },\n             \"releaseDate\": \"Ver\u00f6ffentlichungsdatum\"\n         },\n+        \"textUnit\": {\n+            \"created\": \"Eine neue Texteinheit erstellt\",\n+            \"updated\": \"Texteinheit geupdated\",\n+            \"tooltip\": \"Das ist eine Texteinheit.\",\n+            \"popup\": \"In Popup \u00f6ffnen\",\n+            \"notReleasedTooltip\": \"Text nur sichtbar f\u00fcr Tutoren und Dozenten. Ver\u00f6ffentlichkeitsdatum:\",\n+            \"markdownHelp\": \"Hier kann Markdown eingegeben werden. Mehr informationen: \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTAyNg=="}, "originalCommit": {"oid": "ee9efabdb8751e420a62040ef13a8a0d3ce43320"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDk0MDQyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/textUnit.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzowMDowMlrOHwFAEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoxMjowMlrOHweXKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTYzMg==", "bodyText": "GitHub Actions complains: 'EntityArrayResponseType' is defined but never used", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520175632", "createdAt": "2020-11-09T23:00:02Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/textUnit.service.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { HttpClient, HttpResponse } from '@angular/common/http';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\n+\n+type EntityResponseType = HttpResponse<TextUnit>;\n+type EntityArrayResponseType = HttpResponse<TextUnit[]>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9efabdb8751e420a62040ef13a8a0d3ce43320"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5MTE0Nw==", "bodyText": "Done in e881a30", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520591147", "createdAt": "2020-11-10T14:12:02Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/textUnit.service.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+import { Injectable } from '@angular/core';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { HttpClient, HttpResponse } from '@angular/common/http';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import { LectureUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/lectureUnit.service';\n+\n+type EntityResponseType = HttpResponse<TextUnit>;\n+type EntityArrayResponseType = HttpResponse<TextUnit[]>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTYzMg=="}, "originalCommit": {"oid": "ee9efabdb8751e420a62040ef13a8a0d3ce43320"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjkzOTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/lecture/LectureUnitResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxMzoyNVrOHwXu8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxMzoyNVrOHwXu8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MjU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<LectureUnit> deleteLectureUnit(@PathVariable Long lectureUnitId, @PathVariable Long lectureId) {\n          \n          \n            \n                public ResponseEntity<Void> deleteLectureUnit(@PathVariable Long lectureUnitId, @PathVariable Long lectureId) {\n          \n      \n    \n    \n  \n\nI do not think you are actually changing the return type here.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520482544", "createdAt": "2020-11-10T11:13:25Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/lecture/LectureUnitResource.java", "diffHunk": "@@ -100,13 +100,14 @@ public LectureUnitResource(AuthorizationCheckService authorizationCheckService,\n      */\n     @DeleteMapping(\"/lectures/{lectureId}/lecture-units/{lectureUnitId}\")\n     @PreAuthorize(\"hasAnyRole('ADMIN','INSTRUCTOR')\")\n-    public ResponseEntity<Void> deleteLectureUnit(@PathVariable Long lectureUnitId, @PathVariable Long lectureId) {\n+    public ResponseEntity<LectureUnit> deleteLectureUnit(@PathVariable Long lectureUnitId, @PathVariable Long lectureId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjk0NzI0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component.html", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxNTowOVrOHwXzUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjowODo1OVrOHyQQPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MzY2Ng==", "bodyText": "This could be refactored for all units. Take a look at <ng-content>.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520483666", "createdAt": "2020-11-10T11:15:09Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [isEditMode]=\"false\" (formSubmitted)=\"createTextUnit($event)\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4Nzc5NQ==", "bodyText": "Can you be more specific? What exactly should be refactored?", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520587795", "createdAt": "2020-11-10T14:07:27Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [isEditMode]=\"false\" (formSubmitted)=\"createTextUnit($event)\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MzY2Ng=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkxMjAxMA==", "bodyText": "I'd suggest creating a <lecture-unit-layout/> component with something like this as its template:\n<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n     <div class=\"spinner-border\" role=\"status\">\n         <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n     </div>\n </div>\n\n <div *ngIf=\"!isLoading\" class=\"container\">\n     <ng-content></ng-content>\n</div>\nTo be used here like so:\n<lecture-unit-layout>\n    <jhi-text-unit-form [isEditMode]=\"false\" (formSubmitted)=\"createTextUnit($event)\"></jhi-text-unit-form>\n</lecture-unit-layout>\nThat way the spinner and the layout would be reused for all unit types.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520912010", "createdAt": "2020-11-10T22:22:45Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [isEditMode]=\"false\" (formSubmitted)=\"createTextUnit($event)\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MzY2Ng=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1NzE0OA==", "bodyText": "Thanks for the tip. Done in 74163fb", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r522457148", "createdAt": "2020-11-12T22:08:59Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [isEditMode]=\"false\" (formSubmitted)=\"createTextUnit($event)\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MzY2Ng=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjk1NDA4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component.html", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxNjo1NVrOHwX3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjowOToyOVrOHyQRNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NDc3Nw==", "bodyText": "This could also use the refactored lecture unit layout (see above)", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520484777", "createdAt": "2020-11-10T11:16:55Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [formData]=\"formData\" (formSubmitted)=\"updateTextUnit($event)\" [isEditMode]=\"true\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwNjUzOA==", "bodyText": "Can you be more specific? What exactly should be refactored?", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520606538", "createdAt": "2020-11-10T14:31:58Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [formData]=\"formData\" (formSubmitted)=\"updateTextUnit($event)\" [isEditMode]=\"true\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NDc3Nw=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1NzM5OQ==", "bodyText": "Done in 74163fb", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r522457399", "createdAt": "2020-11-12T22:09:29Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component.html", "diffHunk": "@@ -0,0 +1,9 @@\n+<div *ngIf=\"isLoading\" class=\"d-flex justify-content-center\">\n+    <div class=\"spinner-border\" role=\"status\">\n+        <span class=\"sr-only\">{{ 'loading' | translate }}</span>\n+    </div>\n+</div>\n+\n+<div *ngIf=\"!isLoading\" class=\"container\">\n+    <jhi-text-unit-form [formData]=\"formData\" (formSubmitted)=\"updateTextUnit($event)\" [isEditMode]=\"true\"></jhi-text-unit-form>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NDc3Nw=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjk1Nzk5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxODowNVrOHwX6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxODowNVrOHwX6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NTM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            finalize(() => {\n          \n          \n            \n                                this.isLoading = false;\n          \n          \n            \n                            }),\n          \n          \n            \n                            finalize(() => this.isLoading = false),", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520485391", "createdAt": "2020-11-10T11:18:05Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component.ts", "diffHunk": "@@ -0,0 +1,73 @@\n+import { Component, OnInit } from '@angular/core';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { TextUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/textUnit.service';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { VideoUnit } from 'app/entities/lecture-unit/videoUnit.model';\n+import { onError } from 'app/shared/util/global.utils';\n+import { finalize, switchMap, take } from 'rxjs/operators';\n+import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n+\n+@Component({\n+    selector: 'jhi-edit-text-unit',\n+    templateUrl: './edit-text-unit.component.html',\n+    styles: [],\n+})\n+export class EditTextUnitComponent implements OnInit {\n+    isLoading = false;\n+    textUnit: TextUnit;\n+    formData: TextUnitFormData;\n+    lectureId: number;\n+\n+    constructor(private activatedRoute: ActivatedRoute, private router: Router, private textUnitService: TextUnitService, private alertService: JhiAlertService) {}\n+\n+    ngOnInit(): void {\n+        this.isLoading = true;\n+        this.activatedRoute.paramMap\n+            .pipe(\n+                take(1),\n+                switchMap((params) => {\n+                    const textUnitId = Number(params.get('textUnitId'));\n+                    this.lectureId = Number(params.get('lectureId'));\n+                    return this.textUnitService.findById(textUnitId, this.lectureId);\n+                }),\n+                finalize(() => {\n+                    this.isLoading = false;\n+                }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzE0NjYwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/overview/course-lectures/text-unit/text-unit.component.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxMjowMFrOHwZuuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTo0MjoxM1rOHyPc9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxNTI1Ng==", "bodyText": "Please don't embed external CS like that.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520515256", "createdAt": "2020-11-10T12:12:00Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/overview/course-lectures/text-unit/text-unit.component.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+import { SafeHtml } from '@angular/platform-browser';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+\n+@Component({\n+    selector: 'jhi-text-unit',\n+    templateUrl: './text-unit.component.html',\n+    styleUrls: ['./text-unit.component.scss'],\n+})\n+export class TextUnitComponent implements OnInit {\n+    @Input()\n+    textUnit: TextUnit;\n+    isCollapsed = true;\n+\n+    formattedContent?: SafeHtml;\n+\n+    constructor(private artemisMarkdown: ArtemisMarkdownService) {}\n+\n+    ngOnInit(): void {\n+        if (this.textUnit?.content) {\n+            this.formattedContent = this.artemisMarkdown.safeHtmlForMarkdown(this.textUnit.content);\n+        }\n+    }\n+\n+    handleCollapse($event: any) {\n+        $event.stopPropagation();\n+        this.isCollapsed = !this.isCollapsed;\n+    }\n+\n+    openPopup($event: any) {\n+        $event.stopPropagation();\n+\n+        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n+        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n+        const win = window.open('', ' ', 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,' + `width=${width},height=${height}`);\n+        win!.document.write(`<html><head><title>${this.textUnit.name}</title>`);\n+        win!.document.write(\n+            '<link rel=\"stylesheet\" ' +\n+                'href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css\" ' +\n+                'integrity=\"sha512-Oy18vBnbSJkXTndr2n6lDMO5NN31UljR8e/ICzVPrGpSud4Gkckb8yUpqhKuUNoE+o9gAb4O/rAxxw1ojyUVzg==\" crossorigin=\"anonymous\" />',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5Mjk0OA==", "bodyText": "What is the preferred way to do it? I need to load some css to style the popup.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520592948", "createdAt": "2020-11-10T14:14:32Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/overview/course-lectures/text-unit/text-unit.component.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+import { SafeHtml } from '@angular/platform-browser';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+\n+@Component({\n+    selector: 'jhi-text-unit',\n+    templateUrl: './text-unit.component.html',\n+    styleUrls: ['./text-unit.component.scss'],\n+})\n+export class TextUnitComponent implements OnInit {\n+    @Input()\n+    textUnit: TextUnit;\n+    isCollapsed = true;\n+\n+    formattedContent?: SafeHtml;\n+\n+    constructor(private artemisMarkdown: ArtemisMarkdownService) {}\n+\n+    ngOnInit(): void {\n+        if (this.textUnit?.content) {\n+            this.formattedContent = this.artemisMarkdown.safeHtmlForMarkdown(this.textUnit.content);\n+        }\n+    }\n+\n+    handleCollapse($event: any) {\n+        $event.stopPropagation();\n+        this.isCollapsed = !this.isCollapsed;\n+    }\n+\n+    openPopup($event: any) {\n+        $event.stopPropagation();\n+\n+        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n+        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n+        const win = window.open('', ' ', 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,' + `width=${width},height=${height}`);\n+        win!.document.write(`<html><head><title>${this.textUnit.name}</title>`);\n+        win!.document.write(\n+            '<link rel=\"stylesheet\" ' +\n+                'href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css\" ' +\n+                'integrity=\"sha512-Oy18vBnbSJkXTndr2n6lDMO5NN31UljR8e/ICzVPrGpSud4Gkckb8yUpqhKuUNoE+o9gAb4O/rAxxw1ojyUVzg==\" crossorigin=\"anonymous\" />',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxNTI1Ng=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkxMDE1Mw==", "bodyText": "Best way would be to serve it from /public I guess?", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r520910153", "createdAt": "2020-11-10T22:18:52Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/overview/course-lectures/text-unit/text-unit.component.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+import { SafeHtml } from '@angular/platform-browser';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+\n+@Component({\n+    selector: 'jhi-text-unit',\n+    templateUrl: './text-unit.component.html',\n+    styleUrls: ['./text-unit.component.scss'],\n+})\n+export class TextUnitComponent implements OnInit {\n+    @Input()\n+    textUnit: TextUnit;\n+    isCollapsed = true;\n+\n+    formattedContent?: SafeHtml;\n+\n+    constructor(private artemisMarkdown: ArtemisMarkdownService) {}\n+\n+    ngOnInit(): void {\n+        if (this.textUnit?.content) {\n+            this.formattedContent = this.artemisMarkdown.safeHtmlForMarkdown(this.textUnit.content);\n+        }\n+    }\n+\n+    handleCollapse($event: any) {\n+        $event.stopPropagation();\n+        this.isCollapsed = !this.isCollapsed;\n+    }\n+\n+    openPopup($event: any) {\n+        $event.stopPropagation();\n+\n+        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n+        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n+        const win = window.open('', ' ', 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,' + `width=${width},height=${height}`);\n+        win!.document.write(`<html><head><title>${this.textUnit.name}</title>`);\n+        win!.document.write(\n+            '<link rel=\"stylesheet\" ' +\n+                'href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css\" ' +\n+                'integrity=\"sha512-Oy18vBnbSJkXTndr2n6lDMO5NN31UljR8e/ICzVPrGpSud4Gkckb8yUpqhKuUNoE+o9gAb4O/rAxxw1ojyUVzg==\" crossorigin=\"anonymous\" />',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxNTI1Ng=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0NDAyMQ==", "bodyText": "Thanks for the tip @jpbernius :)\nDone in: e2d2b58", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r522444021", "createdAt": "2020-11-12T21:42:13Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/overview/course-lectures/text-unit/text-unit.component.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+import { SafeHtml } from '@angular/platform-browser';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+\n+@Component({\n+    selector: 'jhi-text-unit',\n+    templateUrl: './text-unit.component.html',\n+    styleUrls: ['./text-unit.component.scss'],\n+})\n+export class TextUnitComponent implements OnInit {\n+    @Input()\n+    textUnit: TextUnit;\n+    isCollapsed = true;\n+\n+    formattedContent?: SafeHtml;\n+\n+    constructor(private artemisMarkdown: ArtemisMarkdownService) {}\n+\n+    ngOnInit(): void {\n+        if (this.textUnit?.content) {\n+            this.formattedContent = this.artemisMarkdown.safeHtmlForMarkdown(this.textUnit.content);\n+        }\n+    }\n+\n+    handleCollapse($event: any) {\n+        $event.stopPropagation();\n+        this.isCollapsed = !this.isCollapsed;\n+    }\n+\n+    openPopup($event: any) {\n+        $event.stopPropagation();\n+\n+        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n+        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n+        const win = window.open('', ' ', 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,' + `width=${width},height=${height}`);\n+        win!.document.write(`<html><head><title>${this.textUnit.name}</title>`);\n+        win!.document.write(\n+            '<link rel=\"stylesheet\" ' +\n+                'href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css\" ' +\n+                'integrity=\"sha512-Oy18vBnbSJkXTndr2n6lDMO5NN31UljR8e/ICzVPrGpSud4Gkckb8yUpqhKuUNoE+o9gAb4O/rAxxw1ojyUVzg==\" crossorigin=\"anonymous\" />',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxNTI1Ng=="}, "originalCommit": {"oid": "52e0028b1c6a6187884d537fc3a861daad1b71cd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzg1OTY0OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyNjo0MVrOHzgInQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1NDoxMVrOHzgW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTkxNw==", "bodyText": "GitHub Actions: 'getItemStub' is assigned a value but never used", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523765917", "createdAt": "2020-11-15T14:26:41Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { SinonStub } from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormComponent, TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockPipe, MockProvider } from 'ng-mocks';\n+import { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\n+import * as moment from 'moment';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Router } from '@angular/router';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-markdown-editor', template: '' })\n+class MarkdownEditorStubComponent {\n+    @Input() markdown: string;\n+    @Input() enableResize = false;\n+    @Output() markdownChange = new EventEmitter<string>();\n+}\n+\n+describe('TextUnitFormComponent', () => {\n+    let store = {};\n+    const sandbox = sinon.createSandbox();\n+    let textUnitFormComponentFixture: ComponentFixture<TextUnitFormComponent>;\n+    let textUnitFormComponent: TextUnitFormComponent;\n+    let getItemStub: SinonStub;\n+    let removeItemStub: SinonStub;\n+    let setItemStub: SinonStub;\n+    beforeEach(() => {\n+        // mocking router\n+        // mocking the local storage for cache testing\n+        store = {};\n+        getItemStub = sandbox.stub(localStorage, 'getItem').callsFake((key: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTU2Nw==", "bodyText": "d67c60c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523769567", "createdAt": "2020-11-15T14:54:11Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { SinonStub } from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormComponent, TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockPipe, MockProvider } from 'ng-mocks';\n+import { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\n+import * as moment from 'moment';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Router } from '@angular/router';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-markdown-editor', template: '' })\n+class MarkdownEditorStubComponent {\n+    @Input() markdown: string;\n+    @Input() enableResize = false;\n+    @Output() markdownChange = new EventEmitter<string>();\n+}\n+\n+describe('TextUnitFormComponent', () => {\n+    let store = {};\n+    const sandbox = sinon.createSandbox();\n+    let textUnitFormComponentFixture: ComponentFixture<TextUnitFormComponent>;\n+    let textUnitFormComponent: TextUnitFormComponent;\n+    let getItemStub: SinonStub;\n+    let removeItemStub: SinonStub;\n+    let setItemStub: SinonStub;\n+    beforeEach(() => {\n+        // mocking router\n+        // mocking the local storage for cache testing\n+        store = {};\n+        getItemStub = sandbox.stub(localStorage, 'getItem').callsFake((key: string) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTkxNw=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzg1OTcxOnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyNjo1MFrOHzgIqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1NDowNFrOHzgW2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTkzMQ==", "bodyText": "GitHub Actions: 'removeItemStub' is assigned a value but never used", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523765931", "createdAt": "2020-11-15T14:26:50Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { SinonStub } from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormComponent, TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockPipe, MockProvider } from 'ng-mocks';\n+import { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\n+import * as moment from 'moment';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Router } from '@angular/router';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-markdown-editor', template: '' })\n+class MarkdownEditorStubComponent {\n+    @Input() markdown: string;\n+    @Input() enableResize = false;\n+    @Output() markdownChange = new EventEmitter<string>();\n+}\n+\n+describe('TextUnitFormComponent', () => {\n+    let store = {};\n+    const sandbox = sinon.createSandbox();\n+    let textUnitFormComponentFixture: ComponentFixture<TextUnitFormComponent>;\n+    let textUnitFormComponent: TextUnitFormComponent;\n+    let getItemStub: SinonStub;\n+    let removeItemStub: SinonStub;\n+    let setItemStub: SinonStub;\n+    beforeEach(() => {\n+        // mocking router\n+        // mocking the local storage for cache testing\n+        store = {};\n+        getItemStub = sandbox.stub(localStorage, 'getItem').callsFake((key: string) => {\n+            return store[key] || null;\n+        });\n+        removeItemStub = sandbox.stub(localStorage, 'removeItem').callsFake((key: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTU2MQ==", "bodyText": "d67c60c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523769561", "createdAt": "2020-11-15T14:54:04Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { SinonStub } from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormComponent, TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockPipe, MockProvider } from 'ng-mocks';\n+import { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\n+import * as moment from 'moment';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Router } from '@angular/router';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-markdown-editor', template: '' })\n+class MarkdownEditorStubComponent {\n+    @Input() markdown: string;\n+    @Input() enableResize = false;\n+    @Output() markdownChange = new EventEmitter<string>();\n+}\n+\n+describe('TextUnitFormComponent', () => {\n+    let store = {};\n+    const sandbox = sinon.createSandbox();\n+    let textUnitFormComponentFixture: ComponentFixture<TextUnitFormComponent>;\n+    let textUnitFormComponent: TextUnitFormComponent;\n+    let getItemStub: SinonStub;\n+    let removeItemStub: SinonStub;\n+    let setItemStub: SinonStub;\n+    beforeEach(() => {\n+        // mocking router\n+        // mocking the local storage for cache testing\n+        store = {};\n+        getItemStub = sandbox.stub(localStorage, 'getItem').callsFake((key: string) => {\n+            return store[key] || null;\n+        });\n+        removeItemStub = sandbox.stub(localStorage, 'removeItem').callsFake((key: string) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTkzMQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzg2MDI1OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyNzowN1rOHzgI6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1Mzo1NlrOHzgWxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTk5Mg==", "bodyText": "GitHub Actions: 'setItemStub' is assigned a value but never used", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523765992", "createdAt": "2020-11-15T14:27:07Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { SinonStub } from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormComponent, TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockPipe, MockProvider } from 'ng-mocks';\n+import { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\n+import * as moment from 'moment';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Router } from '@angular/router';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-markdown-editor', template: '' })\n+class MarkdownEditorStubComponent {\n+    @Input() markdown: string;\n+    @Input() enableResize = false;\n+    @Output() markdownChange = new EventEmitter<string>();\n+}\n+\n+describe('TextUnitFormComponent', () => {\n+    let store = {};\n+    const sandbox = sinon.createSandbox();\n+    let textUnitFormComponentFixture: ComponentFixture<TextUnitFormComponent>;\n+    let textUnitFormComponent: TextUnitFormComponent;\n+    let getItemStub: SinonStub;\n+    let removeItemStub: SinonStub;\n+    let setItemStub: SinonStub;\n+    beforeEach(() => {\n+        // mocking router\n+        // mocking the local storage for cache testing\n+        store = {};\n+        getItemStub = sandbox.stub(localStorage, 'getItem').callsFake((key: string) => {\n+            return store[key] || null;\n+        });\n+        removeItemStub = sandbox.stub(localStorage, 'removeItem').callsFake((key: string) => {\n+            delete store[key];\n+        });\n+        setItemStub = sandbox.stub(localStorage, 'setItem').callsFake((key: string, value: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTU0MA==", "bodyText": "done in d67c60c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523769540", "createdAt": "2020-11-15T14:53:56Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit-form.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { SinonStub } from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormComponent, TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { MockComponent, MockPipe, MockProvider } from 'ng-mocks';\n+import { FormDateTimePickerComponent } from 'app/shared/date-time-picker/date-time-picker.component';\n+import * as moment from 'moment';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { By } from '@angular/platform-browser';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Router } from '@angular/router';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-markdown-editor', template: '' })\n+class MarkdownEditorStubComponent {\n+    @Input() markdown: string;\n+    @Input() enableResize = false;\n+    @Output() markdownChange = new EventEmitter<string>();\n+}\n+\n+describe('TextUnitFormComponent', () => {\n+    let store = {};\n+    const sandbox = sinon.createSandbox();\n+    let textUnitFormComponentFixture: ComponentFixture<TextUnitFormComponent>;\n+    let textUnitFormComponent: TextUnitFormComponent;\n+    let getItemStub: SinonStub;\n+    let removeItemStub: SinonStub;\n+    let setItemStub: SinonStub;\n+    beforeEach(() => {\n+        // mocking router\n+        // mocking the local storage for cache testing\n+        store = {};\n+        getItemStub = sandbox.stub(localStorage, 'getItem').callsFake((key: string) => {\n+            return store[key] || null;\n+        });\n+        removeItemStub = sandbox.stub(localStorage, 'removeItem').callsFake((key: string) => {\n+            delete store[key];\n+        });\n+        setItemStub = sandbox.stub(localStorage, 'setItem').callsFake((key: string, value: string) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTk5Mg=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzg2MDM2OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyNzoyMlrOHzgI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoyMDowM1rOHzzQsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ==", "bodyText": "GitHub Actions: 'markdown' is defined but never used", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523766015", "createdAt": "2020-11-15T14:27:22Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTQxMQ==", "bodyText": "i mean i need to have the parameter to mock the method? Any idea how to do this? @FrankeLukas", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523769411", "createdAt": "2020-11-15T14:52:41Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NTgyNw==", "bodyText": "I think it wants something like safeHtmlForMarkdown: () => exampleHTML, here.", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523775827", "createdAt": "2020-11-15T15:47:40Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc4MjIyOQ==", "bodyText": "Yes but I can not do it as the mocked method has to match the signature of the original method", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523782229", "createdAt": "2020-11-15T16:39:29Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5NzU5MA==", "bodyText": "Then I don't know. One could probably define a dummy method, but adding some sort of ignore annotation would be better if that is possible? (Unfortunately I don't know if that exists or if the errors here even matter after the PR is merged.)", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523797590", "createdAt": "2020-11-15T18:54:46Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3OTAzNQ==", "bodyText": "74049e8", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524079035", "createdAt": "2020-11-16T10:19:51Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3OTI4MQ==", "bodyText": "74049e8", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524079281", "createdAt": "2020-11-16T10:20:03Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAxNQ=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzg2MDQxOnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyNzoyN1rOHzgJBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1MjozM1rOHzgWNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAyMA==", "bodyText": "GitHub Actions: 'markdown' is defined but never used", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523766020", "createdAt": "2020-11-15T14:27:27Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,\n+                    htmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTM5Nw==", "bodyText": "i mean i need to have the parameter to mock the method? Any idea how to do this? @FrankeLukas", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r523769397", "createdAt": "2020-11-15T14:52:33Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,117 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { TextUnitComponent } from 'app/overview/course-lectures/text-unit/text-unit.component';\n+import { MockComponent, MockDirective, MockPipe, MockProvider } from 'ng-mocks';\n+import { TranslatePipe } from '@ngx-translate/core';\n+import { ArtemisMarkdownService } from 'app/shared/markdown.service';\n+import { FaIconComponent } from '@fortawesome/angular-fontawesome';\n+import { NgbCollapse, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+describe('TextUnitFormComponent', () => {\n+    const sandbox = sinon.createSandbox();\n+    const exampleName = 'Test';\n+    const exampleMarkdown = '# Sample Markdown';\n+    const exampleHTML = '<h1>Sample Markdown</h1>';\n+    let textUnitComponentFixture: ComponentFixture<TextUnitComponent>;\n+    let textUnitComponent: TextUnitComponent;\n+    let textUnit: TextUnit;\n+\n+    beforeEach(() => {\n+        textUnit = new TextUnit();\n+        textUnit.name = exampleName;\n+        textUnit.content = exampleMarkdown;\n+\n+        TestBed.configureTestingModule({\n+            imports: [],\n+            declarations: [\n+                TextUnitComponent,\n+                MockComponent(FaIconComponent),\n+                MockPipe(TranslatePipe),\n+                MockDirective(NgbCollapse),\n+                MockDirective(NgbTooltip),\n+                MockPipe(ArtemisDatePipe),\n+            ],\n+            providers: [\n+                MockProvider(ArtemisMarkdownService, {\n+                    safeHtmlForMarkdown: (markdown: string) => exampleHTML,\n+                    htmlForMarkdown: (markdown: string) => exampleHTML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjAyMA=="}, "originalCommit": {"oid": "512c37465a4747cf888a5d4f1e25816f7cf5bb31"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzkxMDIwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/public/content/github-markdown.css", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjowODoxMVrOH0F3Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxNzo1OVrOH0JK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NDA2Mg==", "bodyText": "is this now an autogenerated file? Because a lot of line were deleted", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524384062", "createdAt": "2020-11-16T16:08:11Z", "author": {"login": "derLalla"}, "path": "src/main/resources/public/content/github-markdown.css", "diffHunk": "@@ -1,985 +1,735 @@\n .markdown-body .octicon {\n-  display: inline-block;\n-  fill: currentColor;\n-  vertical-align: text-bottom;\n+    display: inline-block;\n+    fill: currentColor;\n+    vertical-align: text-bottom\n }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "970d6626b307e71e4bdcdde9dc3190cc0f6009ac"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzODI2MA==", "bodyText": "I ran it through a css cleaner", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524438260", "createdAt": "2020-11-16T17:17:59Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/resources/public/content/github-markdown.css", "diffHunk": "@@ -1,985 +1,735 @@\n .markdown-body .octicon {\n-  display: inline-block;\n-  fill: currentColor;\n-  vertical-align: text-bottom;\n+    display: inline-block;\n+    fill: currentColor;\n+    vertical-align: text-bottom\n }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NDA2Mg=="}, "originalCommit": {"oid": "970d6626b307e71e4bdcdde9dc3190cc0f6009ac"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODE1MjE2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/public/content/github-markdown.css", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1ODowNlrOH0ILew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0Nzo0NVrOH0Us5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjAxMQ==", "bodyText": "This is missing a semicolon. GitHub Actions has several similar complaints in this file that should be fixed too, I think?", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524422011", "createdAt": "2020-11-16T16:58:06Z", "author": {"login": "FrankeLukas"}, "path": "src/main/resources/public/content/github-markdown.css", "diffHunk": "@@ -0,0 +1,735 @@\n+.markdown-body .octicon {\n+    display: inline-block;\n+    fill: currentColor;\n+    vertical-align: text-bottom", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50cd46f6131818cdb84280c143a8874dc77f1a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNzE3Mw==", "bodyText": "done :)", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524627173", "createdAt": "2020-11-16T21:47:45Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/resources/public/content/github-markdown.css", "diffHunk": "@@ -0,0 +1,735 @@\n+.markdown-body .octicon {\n+    display: inline-block;\n+    fill: currentColor;\n+    vertical-align: text-bottom", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjAxMQ=="}, "originalCommit": {"oid": "a50cd46f6131818cdb84280c143a8874dc77f1a0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTI4ODkxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMToyODowMlrOH0TSMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NjoxMFrOH0Uj3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMzk1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export class LectureUnitLayoutComponent implements OnInit {\n          \n          \n            \n            export class LectureUnitLayoutComponent {", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524603952", "createdAt": "2020-11-16T21:28:02Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+\n+@Component({\n+    selector: 'jhi-lecture-unit-layout',\n+    templateUrl: './lecture-unit-layout.component.html',\n+    styles: [],\n+})\n+export class LectureUnitLayoutComponent implements OnInit {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNDc1OA==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524624758", "createdAt": "2020-11-16T21:46:06Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+\n+@Component({\n+    selector: 'jhi-lecture-unit-layout',\n+    templateUrl: './lecture-unit-layout.component.html',\n+    styles: [],\n+})\n+export class LectureUnitLayoutComponent implements OnInit {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMzk1Mg=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNDg2MQ==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524624861", "createdAt": "2020-11-16T21:46:10Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+\n+@Component({\n+    selector: 'jhi-lecture-unit-layout',\n+    templateUrl: './lecture-unit-layout.component.html',\n+    styles: [],\n+})\n+export class LectureUnitLayoutComponent implements OnInit {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwMzk1Mg=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTI4OTgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMToyODoxMFrOH0TSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NjoxNlrOH0UkeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import { Component, Input, OnInit } from '@angular/core';\n          \n          \n            \n            import { Component, Input } from '@angular/core';", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524604099", "createdAt": "2020-11-16T21:28:10Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNTAxNw==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524625017", "createdAt": "2020-11-16T21:46:16Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDA5OQ=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTI5MTM3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMToyODoyN1rOH0TT9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NjoyOFrOH0Ulsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDQwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                constructor() {}\n          \n          \n            \n            \n          \n          \n            \n                ngOnInit(): void {}", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524604406", "createdAt": "2020-11-16T21:28:27Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+\n+@Component({\n+    selector: 'jhi-lecture-unit-layout',\n+    templateUrl: './lecture-unit-layout.component.html',\n+    styles: [],\n+})\n+export class LectureUnitLayoutComponent implements OnInit {\n+    @Input()\n+    isLoading = false;\n+\n+    constructor() {}\n+\n+    ngOnInit(): void {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNTE2Mw==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524625163", "createdAt": "2020-11-16T21:46:22Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+\n+@Component({\n+    selector: 'jhi-lecture-unit-layout',\n+    templateUrl: './lecture-unit-layout.component.html',\n+    styles: [],\n+})\n+export class LectureUnitLayoutComponent implements OnInit {\n+    @Input()\n+    isLoading = false;\n+\n+    constructor() {}\n+\n+    ngOnInit(): void {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDQwNg=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNTMzMA==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524625330", "createdAt": "2020-11-16T21:46:28Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/lecture/lecture-unit/lecture-unit-management/lecture-unit-layout/lecture-unit-layout.component.ts", "diffHunk": "@@ -0,0 +1,15 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+\n+@Component({\n+    selector: 'jhi-lecture-unit-layout',\n+    templateUrl: './lecture-unit-layout.component.html',\n+    styles: [],\n+})\n+export class LectureUnitLayoutComponent implements OnInit {\n+    @Input()\n+    isLoading = false;\n+\n+    constructor() {}\n+\n+    ngOnInit(): void {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNDQwNg=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTMwNTM5OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/create-text-unit.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTozMDozMFrOH0TdnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NzoyOFrOH0UrQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNjg3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Input()\n          \n          \n            \n                isLoading = false;\n          \n          \n            \n                @Input() isLoading = false;", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524606877", "createdAt": "2020-11-16T21:30:30Z", "author": {"login": "jpbernius"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/create-text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,115 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { CreateTextUnitComponent } from 'app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component';\n+import { TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { TextUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/textUnit.service';\n+import { MockProvider } from 'ng-mocks';\n+import { JhiAlertService } from 'ng-jhipster';\n+import * as moment from 'moment';\n+import { By } from '@angular/platform-browser';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { HttpResponse } from '@angular/common/http';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-text-unit-form', template: '' })\n+class TextUnitFormStubComponent {\n+    @Input() isEditMode = false;\n+    @Output() formSubmitted: EventEmitter<TextUnitFormData> = new EventEmitter<TextUnitFormData>();\n+}\n+\n+@Component({ selector: 'jhi-lecture-unit-layout', template: '<ng-content></ng-content>' })\n+class LectureUnitLayoutStubComponent {\n+    @Input()\n+    isLoading = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNjc1Mw==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524626753", "createdAt": "2020-11-16T21:47:28Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/create-text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,115 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { CreateTextUnitComponent } from 'app/lecture/lecture-unit/lecture-unit-management/create-text-unit/create-text-unit.component';\n+import { TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { TextUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/textUnit.service';\n+import { MockProvider } from 'ng-mocks';\n+import { JhiAlertService } from 'ng-jhipster';\n+import * as moment from 'moment';\n+import { By } from '@angular/platform-browser';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { HttpResponse } from '@angular/common/http';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-text-unit-form', template: '' })\n+class TextUnitFormStubComponent {\n+    @Input() isEditMode = false;\n+    @Output() formSubmitted: EventEmitter<TextUnitFormData> = new EventEmitter<TextUnitFormData>();\n+}\n+\n+@Component({ selector: 'jhi-lecture-unit-layout', template: '<ng-content></ng-content>' })\n+class LectureUnitLayoutStubComponent {\n+    @Input()\n+    isLoading = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNjg3Nw=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTMwOTY5OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/lecture-unit/text-unit/edit-text-unit.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTozMTowOFrOH0TgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo0NjozNFrOH0UmSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNzY0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Input()\n          \n          \n            \n                isLoading = false;\n          \n          \n            \n                @Input() isLoading = false;", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524607649", "createdAt": "2020-11-16T21:31:08Z", "author": {"login": "jpbernius"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/edit-text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,157 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import * as moment from 'moment';\n+\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { TextUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/textUnit.service';\n+import { MockProvider } from 'ng-mocks';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { EditTextUnitComponent } from 'app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { HttpResponse } from '@angular/common/http';\n+import { By } from '@angular/platform-browser';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-text-unit-form', template: '' })\n+class TextUnitFormStubComponent {\n+    @Input() isEditMode = false;\n+    @Input() formData: TextUnitFormData;\n+    @Output() formSubmitted: EventEmitter<TextUnitFormData> = new EventEmitter<TextUnitFormData>();\n+}\n+\n+@Component({ selector: 'jhi-lecture-unit-layout', template: '<ng-content></ng-content>' })\n+class LectureUnitLayoutStubComponent {\n+    @Input()\n+    isLoading = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYyNTQ4Mw==", "bodyText": "f8b3a8c", "url": "https://github.com/ls1intum/Artemis/pull/2341#discussion_r524625483", "createdAt": "2020-11-16T21:46:34Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/lecture-unit/text-unit/edit-text-unit.component.spec.ts", "diffHunk": "@@ -0,0 +1,157 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import * as moment from 'moment';\n+\n+import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n+import { TextUnitFormData } from 'app/lecture/lecture-unit/lecture-unit-management/text-unit-form/text-unit-form.component';\n+import { MockRouter } from '../../../helpers/mocks/mock-router';\n+import { Component, EventEmitter, Input, Output } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { TextUnitService } from 'app/lecture/lecture-unit/lecture-unit-management/textUnit.service';\n+import { MockProvider } from 'ng-mocks';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { EditTextUnitComponent } from 'app/lecture/lecture-unit/lecture-unit-management/edit-text-unit/edit-text-unit.component';\n+import { TextUnit } from 'app/entities/lecture-unit/textUnit.model';\n+import { HttpResponse } from '@angular/common/http';\n+import { By } from '@angular/platform-browser';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+@Component({ selector: 'jhi-text-unit-form', template: '' })\n+class TextUnitFormStubComponent {\n+    @Input() isEditMode = false;\n+    @Input() formData: TextUnitFormData;\n+    @Output() formSubmitted: EventEmitter<TextUnitFormData> = new EventEmitter<TextUnitFormData>();\n+}\n+\n+@Component({ selector: 'jhi-lecture-unit-layout', template: '<ng-content></ng-content>' })\n+class LectureUnitLayoutStubComponent {\n+    @Input()\n+    isLoading = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYwNzY0OQ=="}, "originalCommit": {"oid": "8772e13d16c93f667cd3579c6dcf86a1ee6a1e27"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4426, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}