{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjczODg4", "number": 2609, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QyMzozMjoxNFrOFKudsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMToxMDoxOFrOFLDO3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NzkxMzQ1OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/apollon-diagrams/apollon-diagram-detail.component.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QyMzozMjoxNFrOINilFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QyMzozMjoxNFrOINilFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2ODk1MQ==", "bodyText": "please remove the line, see Github warning", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551068951", "createdAt": "2021-01-03T23:32:14Z", "author": {"login": "krusche"}, "path": "src/test/javascript/spec/component/apollon-diagrams/apollon-diagram-detail.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, fakeAsync, flush, TestBed, tick } from '@angular/core/testing';\n+import { ApollonDiagramService } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { HttpResponse } from '@angular/common/http';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { ApollonDiagramDetailComponent } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-detail.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { UMLModel, Selection } from '@ls1intum/apollon';\n+import { ElementRef } from '@angular/core';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { convertRenderedSVGToPNG } from 'app/exercises/quiz/manage/apollon-diagrams/exercise-generation/svg-renderer';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403100acda170860da4310106d89b45370a464b4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NzkxMzg2OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QyMzozMjo0OFrOINilRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo0MjoxMFrOIOAYqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2ODk5Ng==", "bodyText": "which deserialization issue do you mean? can you reference it here?\nIs it easy to fix or more complex?", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551068996", "createdAt": "2021-01-03T23:32:48Z", "author": {"login": "krusche"}, "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();\n+        // TODO: uncomment after deserialization bugfix in Apollon libary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403100acda170860da4310106d89b45370a464b4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NzI5MA==", "bodyText": "ls1intum/Apollon#146\nNot sure about the complexity, I invested a bit of time and located the issue, but did not yet fully understand why it happens. Can post these information in the Apollon ticket", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551557290", "createdAt": "2021-01-04T20:42:10Z", "author": {"login": "TobiasPr"}, "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();\n+        // TODO: uncomment after deserialization bugfix in Apollon libary", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2ODk5Ng=="}, "originalCommit": {"oid": "403100acda170860da4310106d89b45370a464b4"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODc1MTQyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/util/fullscreen.util.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwODo0ODozNFrOINpfQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo0NTo0N1rOIOAfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4MjE0Nw==", "bodyText": "an alternative return statement of false would be good here, I suppose.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                return false;", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551182147", "createdAt": "2021-01-04T08:48:34Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/app/shared/util/fullscreen.util.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * checks if this component is the current fullscreen component\n+ */\n+export function isFullScreen() {\n+    const docElement = document as any;\n+    // check if this component is the current fullscreen component for different browser types\n+    if (docElement.fullscreenElement !== undefined) {\n+        return docElement.fullscreenElement;\n+    } else if (docElement.webkitFullscreenElement !== undefined) {\n+        return docElement.webkitFullscreenElement;\n+    } else if (docElement.mozFullScreenElement !== undefined) {\n+        return docElement.mozFullScreenElement;\n+    } else if (docElement.msFullscreenElement !== undefined) {\n+        return docElement.msFullscreenElement;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc03b0a81153ad485f54e1e6014834df048f513c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1OTAwNg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551559006", "createdAt": "2021-01-04T20:45:47Z", "author": {"login": "TobiasPr"}, "path": "src/main/webapp/app/shared/util/fullscreen.util.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * checks if this component is the current fullscreen component\n+ */\n+export function isFullScreen() {\n+    const docElement = document as any;\n+    // check if this component is the current fullscreen component for different browser types\n+    if (docElement.fullscreenElement !== undefined) {\n+        return docElement.fullscreenElement;\n+    } else if (docElement.webkitFullscreenElement !== undefined) {\n+        return docElement.webkitFullscreenElement;\n+    } else if (docElement.mozFullScreenElement !== undefined) {\n+        return docElement.mozFullScreenElement;\n+    } else if (docElement.msFullscreenElement !== undefined) {\n+        return docElement.msFullscreenElement;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4MjE0Nw=="}, "originalCommit": {"oid": "bc03b0a81153ad485f54e1e6014834df048f513c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTMxNTE0OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMTowOTo1NFrOIOBLjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMTowOTo1NFrOIOBLjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MDMxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO: uncomment after deserialization bugfix in Apollon libary\n          \n          \n            \n                    // TODO: uncomment after deserialization bugfix in Apollon library, see https://github.com/ls1intum/Apollon/issues/146", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551570317", "createdAt": "2021-01-04T21:09:54Z", "author": {"login": "krusche"}, "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();\n+        // TODO: uncomment after deserialization bugfix in Apollon libary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907f26c972d41b1b3683a19f87c4fdafabb7a2d0"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTMxNjE0OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMToxMDoxOFrOIOBMLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMToxMDoxOFrOIOBMLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MDQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    const model = fixture.componentInstance.getCurrentModel();\n          \n          \n            \n                    // const model = fixture.componentInstance.getCurrentModel();", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551570478", "createdAt": "2021-01-04T21:10:18Z", "author": {"login": "krusche"}, "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907f26c972d41b1b3683a19f87c4fdafabb7a2d0"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4252, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}