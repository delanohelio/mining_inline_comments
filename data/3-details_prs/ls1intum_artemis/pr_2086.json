{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NjEyNzQ2", "number": 2086, "title": "[Feature] Store static code analysis configuration", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features (with a high test coverage)\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n\nMotivation and Context\n\n\n\nInstructors should be able to tailor static code analysis settings to their specific needs. Within Artemis, instructors will be able to configure static code analysis categories. Checks performed by static code analysis tools are already grouped into categories by the respective tool. As the number of categories is too high and multiple categories of different tools have a semantic overlap, we define a hard-coded mapping to Artemis specific categories. These default categories are generated for each created programming exercise with static code analysis enabled.\nFor the grading of static code analysis feedback a score penalty system will be implemented. Instructors are able to choose whether a specific category is inactive, the corresponding feedback is only shown to the students or also graded. Instructors are able to define the score penalty for each issue found within a category. At the same time the maximum penalty can be limited for each category or for the whole exercise.\nDescription\n\nUser interface for updating the categories is implemented in #2037.\n\n Database changes for the configuration and grading concept\n On application start-up, read the static code analysis default configurations for each programming language and make them available as a bean\n Create default static code analysis categories when a programming exercise with static code analysis enabled is created\n Also import static code analysis categories when a programming exercise is imported\n Fix import of test cases (bonus multiplier and bonus points were not set)\n Create Resource, Service, Repository for the creation, reading and updating of static code analysis categories. Stand-alone deletion is currently not supported. The categories will be deleted when the programming exercise is removed.\n Improve validation of programming exercises in ProgrammingExerciseResource\n Improve test coverage significantly\n\nThe actual grading strategy will be implemented in another PR.\nSteps for Testing\n\nFunctionality can only be tested after #2037 has been merged. Just ensure that the database changes don't break anything\n\nCreate a programming exercise with and without static code analysis enabled\nImport a programming exercise with and without static code analysis enabled\nParticipate in those exercises and make sure everything works as usual\nDelete the exercises\n\nTest Coverage\n\n\n\n\nScreenshots", "createdAt": "2020-09-03T12:56:25Z", "url": "https://github.com/ls1intum/Artemis/pull/2086", "merged": true, "mergeCommit": {"oid": "65ee88d2d945ee5fc40d937635c01e67b27176e8"}, "closed": true, "closedAt": "2020-10-02T08:18:10Z", "author": {"login": "kloessst"}, "timelineItems": {"totalCount": 114, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOaiNEAFqTUwMDc5MzY4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOhjlzgFqTUwMDk0MTg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjg0", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793684", "createdAt": "2020-10-02T00:07:04Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNFrOHbeNcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNFrOHbeNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MQ==", "bodyText": "Codacy found an issue: The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568561", "createdAt": "2020-10-02T00:07:04Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "diffHunk": "@@ -47,6 +52,9 @@\n @ActiveProfiles({ \"artemis\", \"bamboo\", \"bitbucket\", \"jira\", \"automaticText\", \"ldap\", \"scheduling\", \"athene\" })\n public abstract class AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjkz", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793693", "createdAt": "2020-10-02T00:07:05Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNVrOHbeNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNVrOHbeNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2Nw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568567", "createdAt": "2020-10-02T00:07:05Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzAw", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793700", "createdAt": "2020-10-02T00:07:06Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNlrOHbeNfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNlrOHbeNfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU3NA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_bonusPointsIsNull' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568574", "createdAt": "2020-10-02T00:07:06Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzA1", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793705", "createdAt": "2020-10-02T00:07:07Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowN1rOHbeNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowN1rOHbeNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568580", "createdAt": "2020-10-02T00:07:07Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzA5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793709", "createdAt": "2020-10-02T00:07:08Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOFrOHbeNig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOFrOHbeNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4Ng==", "bodyText": "Codacy found an issue: Avoid unnecessary constructors - the compiler will generate these for you", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568586", "createdAt": "2020-10-02T00:07:08Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzE3", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793717", "createdAt": "2020-10-02T00:07:09Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOVrOHbeNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOVrOHbeNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4OQ==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568589", "createdAt": "2020-10-02T00:07:09Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzE5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793719", "createdAt": "2020-10-02T00:07:10Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMFrOHbeNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMFrOHbeNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Mg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testCreateDefaultCategories_noConfigurationAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568592", "createdAt": "2020-10-02T00:07:10Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzI2", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793726", "createdAt": "2020-10-02T00:07:11Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMVrOHbeNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMVrOHbeNlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Ng==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_baseReferencesGotCloned' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568596", "createdAt": "2020-10-02T00:07:11Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -64,25 +50,27 @@\n     public void setUp() {\n         bambooRequestMockProvider.enableMockingOfRequests();\n         bitbucketRequestMockProvider.enableMockingOfRequests();\n-        databse.addUsers(1, 1, 1);\n-        databse.addInstructor(\"other-instructors\", \"instructorother\");\n-        databse.addCourseWithOneProgrammingExerciseAndTestCases();\n-        additionalEmptyCourse = databse.addEmptyCourse();\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n-        databse.addHintsToExercise(programmingExercise);\n-        databse.addHintsToProblemStatement(programmingExercise);\n+        database.addUsers(1, 1, 1);\n+        database.addInstructor(\"other-instructors\", \"instructorother\");\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        additionalEmptyCourse = database.addEmptyCourse();\n+        programmingExercise = programmingExerciseRepository.findAll().get(0);\n+        database.addHintsToExercise(programmingExercise);\n+        database.addHintsToProblemStatement(programmingExercise);\n+        database.addStaticCodeAnalysisCategoriesToProgrammingExercise(programmingExercise);\n \n         // Load again to fetch changes to statement and hints while keeping eager refs\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n+        programmingExercise = database.loadProgrammingExerciseWithEagerReferences(programmingExercise);\n     }\n \n     @AfterEach\n     public void tearDown() {\n-        databse.resetDatabase();\n+        database.resetDatabase();\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_baseReferencesGotCloned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzM1", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793735", "createdAt": "2020-10-02T00:07:12Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMlrOHbeNmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMlrOHbeNmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYwMA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568600", "createdAt": "2020-10-02T00:07:12Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzQz", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793743", "createdAt": "2020-10-02T00:07:13Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxM1rOHbeNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxM1rOHbeNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxMQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568611", "createdAt": "2020-10-02T00:07:13Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzUy", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793752", "createdAt": "2020-10-02T00:07:14Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNFrOHbeNqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNFrOHbeNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxOQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568619", "createdAt": "2020-10-02T00:07:14Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzU5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793759", "createdAt": "2020-10-02T00:07:15Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNVrOHbeNrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNVrOHbeNrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyMg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568622", "createdAt": "2020-10-02T00:07:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNzYz", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793763", "createdAt": "2020-10-02T00:07:16Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNlrOHbeNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNlrOHbeNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568627", "createdAt": "2020-10-02T00:07:16Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "diffHunk": "@@ -239,6 +239,16 @@ public File postWithResponseBodyFile(String path, Object body, HttpStatus expect\n         return mapper.readValue(stringResponse, responseType);\n     }\n \n+    public void patch(String path, Object body, HttpStatus expectedStatus) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTQxODc2", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500941876", "createdAt": "2020-10-02T08:17:55Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f8786a9198f3cd766dbe84d7ce7ac76d8af7b7", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/88f8786a9198f3cd766dbe84d7ce7ac76d8af7b7", "committedDate": "2020-07-16T19:37:39Z", "message": "Create codeql-analysis.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "265444e72d1b81ed00f27d93722c915ae47b41d1", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/265444e72d1b81ed00f27d93722c915ae47b41d1", "committedDate": "2020-07-23T16:58:27Z", "message": "Update .github/workflows/codeql-analysis.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdba0f4b68a509b81217034c5f0b649378fb4ed8", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/cdba0f4b68a509b81217034c5f0b649378fb4ed8", "committedDate": "2020-07-28T08:13:33Z", "message": "Compile Manually"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77578628d680e5bf7c48020725921884be81b7a7", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/77578628d680e5bf7c48020725921884be81b7a7", "committedDate": "2020-07-28T08:27:42Z", "message": "Install Java 14"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b50c0cac57889df5f0fcb0d5792bbe21b5ab2956", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/b50c0cac57889df5f0fcb0d5792bbe21b5ab2956", "committedDate": "2020-07-28T08:38:01Z", "message": "Also update to used Node Version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "355ed91606d41a40288c440218d33a1d23739460", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/355ed91606d41a40288c440218d33a1d23739460", "committedDate": "2020-07-28T08:41:36Z", "message": "Merge branch 'develop' into codeql-analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38a2051ac536ab1df3566f8337b45ef14da60ea", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/b38a2051ac536ab1df3566f8337b45ef14da60ea", "committedDate": "2020-09-01T16:48:38Z", "message": "Add entities for static code analysis configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb10a04f30845357e32688895d4e37afb6a2cfba", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/cb10a04f30845357e32688895d4e37afb6a2cfba", "committedDate": "2020-09-03T12:53:08Z", "message": "Database changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5d90fbf5b71f667213ceecde08779ee29d7c61", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/7f5d90fbf5b71f667213ceecde08779ee29d7c61", "committedDate": "2020-09-03T12:57:05Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2daedd73ea279072beb78dbdcf3517f5f68cdc36", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/2daedd73ea279072beb78dbdcf3517f5f68cdc36", "committedDate": "2020-09-03T13:36:59Z", "message": "Remove dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb01a28704224ebbf21928d96fe4451963de61dc", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/cb01a28704224ebbf21928d96fe4451963de61dc", "committedDate": "2020-09-03T18:06:14Z", "message": "Add repo, service, repository and first integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15107d5101c5982f3d21f836c8c8c1347eb893e8", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/15107d5101c5982f3d21f836c8c8c1347eb893e8", "committedDate": "2020-09-03T18:06:38Z", "message": "Merge branch 'feature/static-code-analysis-configuration-data-model' of https://github.com/ls1intum/Artemis into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1eaaa38185e04f3d642d56c53c4b0919d79966b", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/d1eaaa38185e04f3d642d56c53c4b0919d79966b", "committedDate": "2020-09-07T11:17:30Z", "message": "Fix format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "171c5102c02ab0a1d2692ec097861fc19ce62931", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/171c5102c02ab0a1d2692ec097861fc19ce62931", "committedDate": "2020-09-07T11:17:56Z", "message": "Remove unused var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8cc6073beb0ba05be672748be080f69388c6c5", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/0e8cc6073beb0ba05be672748be080f69388c6c5", "committedDate": "2020-09-07T11:19:00Z", "message": "Fix codacy issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de5e2b5fa9ab02fece9031e6c536957c9d19e27", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/4de5e2b5fa9ab02fece9031e6c536957c9d19e27", "committedDate": "2020-09-07T13:58:32Z", "message": "Implement update of static code analysis categories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1464eb5a87498ffb78d0a380ec99b89e668f54c2", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/1464eb5a87498ffb78d0a380ec99b89e668f54c2", "committedDate": "2020-09-07T17:49:48Z", "message": "Refactor and extend static code analysis setting validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6c26bbc02ee29152907665843701cdcd6dbaf32", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/b6c26bbc02ee29152907665843701cdcd6dbaf32", "committedDate": "2020-09-07T17:50:40Z", "message": "Fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c9b5afe478faf544d93a64cda68452d316ceea", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/85c9b5afe478faf544d93a64cda68452d316ceea", "committedDate": "2020-09-08T15:37:09Z", "message": "Adjust tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85496c80ed1f17f2690fd03b488dc13ebd0f8ca7", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/85496c80ed1f17f2690fd03b488dc13ebd0f8ca7", "committedDate": "2020-09-08T16:26:47Z", "message": "Add bonus pint integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3985ab2cd1e4a869d495bd98560243d7439bf453", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/3985ab2cd1e4a869d495bd98560243d7439bf453", "committedDate": "2020-09-09T09:57:09Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1197ad2dc588667e18fd0c9ca24d4bf73d8fa5f", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/e1197ad2dc588667e18fd0c9ca24d4bf73d8fa5f", "committedDate": "2020-09-09T11:10:50Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8dd0c079740d5fcb82130cb6d1fe1a0e25f599", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/ec8dd0c079740d5fcb82130cb6d1fe1a0e25f599", "committedDate": "2020-09-09T12:20:19Z", "message": "Validate static code analysis settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7efca0f4ae6db28414c89bcf3093e95ed2bc3d", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/fa7efca0f4ae6db28414c89bcf3093e95ed2bc3d", "committedDate": "2020-09-09T18:29:19Z", "message": "Add category mapping as JSON"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06d38962159248434f21bca5bf65e0c3053b2a2", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/e06d38962159248434f21bca5bf65e0c3053b2a2", "committedDate": "2020-09-14T12:29:00Z", "message": "Read in the default configuration for static code analysis on application startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf32ff29d2236f6168f79e2cb1850ede7ddbfa1", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/1bf32ff29d2236f6168f79e2cb1850ede7ddbfa1", "committedDate": "2020-09-14T13:09:46Z", "message": "Fix json file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5306d3f6e20d8ed8a44070ed71d72abbd3a6b8e", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/c5306d3f6e20d8ed8a44070ed71d72abbd3a6b8e", "committedDate": "2020-09-14T15:47:03Z", "message": "D"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ed57602e16bc282457f7f16856edc9725e333d", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/67ed57602e16bc282457f7f16856edc9725e333d", "committedDate": "2020-09-15T10:43:01Z", "message": "Add integration realistic integration test with static code analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "237b39f84d6f10f1dec8a43772c0ceb0e0cdc4ac", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/237b39f84d6f10f1dec8a43772c0ceb0e0cdc4ac", "committedDate": "2020-09-15T12:10:31Z", "message": "More integration tests for update functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b1122ab70fc0c0f365b45296d900ca2784c33d", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/09b1122ab70fc0c0f365b45296d900ca2784c33d", "committedDate": "2020-09-15T19:43:31Z", "message": "Add more integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a937254601fba6c24815d3ce01ce951315bded40", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/a937254601fba6c24815d3ce01ce951315bded40", "committedDate": "2020-09-16T10:45:00Z", "message": "Copy categories on import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2547f06d8c5a939553d14c36683029fd9c2f0c65", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/2547f06d8c5a939553d14c36683029fd9c2f0c65", "committedDate": "2020-09-16T18:38:12Z", "message": "Improve toString for TestCases, StaticCodeAnalysisCategory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4c62a81cf93d70ab6ef254ffc51b0e80cbacc2a", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/a4c62a81cf93d70ab6ef254ffc51b0e80cbacc2a", "committedDate": "2020-09-16T18:49:43Z", "message": "Fix import for test cases and categories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92a569d42a6ca1c4f6551f9c5d053b5c74564e10", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/92a569d42a6ca1c4f6551f9c5d053b5c74564e10", "committedDate": "2020-09-16T18:54:01Z", "message": "Refactor and improve integration tests for import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d89124c619747c14f7cf9d74e267b27baecd55", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/39d89124c619747c14f7cf9d74e267b27baecd55", "committedDate": "2020-09-16T20:34:22Z", "message": "Rename default category properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb47b459e16cfbac782daeba4c046609720b671d", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/cb47b459e16cfbac782daeba4c046609720b671d", "committedDate": "2020-09-16T20:34:58Z", "message": "Fix integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f59337fc4ee839b6ba03d7dc6fa81c88c4dae83", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/8f59337fc4ee839b6ba03d7dc6fa81c88c4dae83", "committedDate": "2020-09-16T22:16:26Z", "message": "Improve coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0386a8a13b53ce55845653251c4f4785f77ed23f", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/0386a8a13b53ce55845653251c4f4785f77ed23f", "committedDate": "2020-09-16T22:28:46Z", "message": "Improve code quality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3c6542f01dab46c96e265fdaf9a1a2da3c850c", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/ee3c6542f01dab46c96e265fdaf9a1a2da3c850c", "committedDate": "2020-09-16T22:29:17Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "727e84a56c791843b0446a0d67c60600aa2ab018", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/727e84a56c791843b0446a0d67c60600aa2ab018", "committedDate": "2020-09-16T22:36:19Z", "message": "Remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2fc4412e71084e6a0b76054cfebe4b6cf7c99c8", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/b2fc4412e71084e6a0b76054cfebe4b6cf7c99c8", "committedDate": "2020-09-16T22:37:27Z", "message": "Merge branch 'feature/static-code-analysis-configuration-data-model' of https://github.com/ls1intum/Artemis into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd9ee4a3c1bcfc7f07b80a0c74457433b4a21c9", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/0bd9ee4a3c1bcfc7f07b80a0c74457433b4a21c9", "committedDate": "2020-09-17T12:50:43Z", "message": "Use floating point numbers for penalties to allow fine grained control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314cf861bcf4102d6de7a47d5e3ef16c232d2b70", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/314cf861bcf4102d6de7a47d5e3ef16c232d2b70", "committedDate": "2020-09-17T13:17:06Z", "message": "Max penalty for exercises should be integers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bbe6350d84552e8bc51620c8d167a0d65e9fcc2", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/6bbe6350d84552e8bc51620c8d167a0d65e9fcc2", "committedDate": "2020-09-17T22:34:22Z", "message": "Create input for max static code analysis penalty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "851f439904e1f9b7e85aa6182d937468f882ce95", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/851f439904e1f9b7e85aa6182d937468f882ce95", "committedDate": "2020-09-17T23:04:06Z", "message": "Show the max penalty in exercise details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55fcd6035afa696c3b8bc54a0e5f93c0f449e518", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/55fcd6035afa696c3b8bc54a0e5f93c0f449e518", "committedDate": "2020-09-17T23:23:58Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b2fdda8cd908260807dc4b9c892aa0b478712a", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/26b2fdda8cd908260807dc4b9c892aa0b478712a", "committedDate": "2020-09-18T17:22:38Z", "message": "Complete default java static code configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05586727d739480b42a57765629f0580b602d48c", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/05586727d739480b42a57765629f0580b602d48c", "committedDate": "2020-09-19T19:30:58Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb2667b822f08b14dc3bef2dcf65384a7f4ed0c", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/dfb2667b822f08b14dc3bef2dcf65384a7f4ed0c", "committedDate": "2020-09-20T10:48:41Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1dc95d4d39471aaff7e203f3e770444e17b6a4a", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/b1dc95d4d39471aaff7e203f3e770444e17b6a4a", "committedDate": "2020-09-22T08:00:38Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "859f54511de107317c0374ddbcabc2358c3018bf", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/859f54511de107317c0374ddbcabc2358c3018bf", "committedDate": "2020-09-22T22:06:28Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTI5NTQ1", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-494529545", "createdAt": "2020-09-23T10:45:30Z", "commit": {"oid": "859f54511de107317c0374ddbcabc2358c3018bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0NTozMFrOHWlIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0NTozMFrOHWlIjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzOTExNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n          \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n          \n      \n    \n    \n  \n\nUse the correct exercise here.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r493439116", "createdAt": "2020-09-23T10:45:30Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -313,6 +348,10 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n         try {\n             // Setup all repositories etc\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n+            // Create default static code analysis categories\n+            if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+                staticCodeAnalysisService.createDefaultCategories(programmingExercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f54511de107317c0374ddbcabc2358c3018bf"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/cdb0d25855f7f7bcff7819e86457be6f29f45ee9", "committedDate": "2020-09-23T10:48:21Z", "message": "use correct exercise on category creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f690e2e22f1faced1c14a41f7d69feebed9e0b", "author": {"user": {"login": "schultek", "name": "Kilian Schulte"}}, "url": "https://github.com/ls1intum/Artemis/commit/b0f690e2e22f1faced1c14a41f7d69feebed9e0b", "committedDate": "2020-09-23T10:48:38Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf30344582f4ad6da90a7fc4964d774ffccd296", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/8cf30344582f4ad6da90a7fc4964d774ffccd296", "committedDate": "2020-09-23T11:48:41Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b", "committedDate": "2020-09-23T16:31:14Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTYwMjAw", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-494960200", "createdAt": "2020-09-23T18:57:40Z", "commit": {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1Nzo0MFrOHW8q3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1Nzo0MFrOHW8q3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNDczMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\n          \n          \n            \n                        \"name\": \"Naming & Formatting\",\n          \n          \n            \n                        \"state\": \"INACTIVE\",\n          \n          \n            \n                        \"penalty\": 0,\n          \n          \n            \n                        \"maxPenalty\": 0,\n          \n          \n            \n                        \"categoryMappings\": [\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"imports\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"indentation\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"naming\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"whitespaces\"\n          \n          \n            \n                            }\n          \n          \n            \n                        ]\n          \n          \n            \n                    },\n          \n          \n            \n                    \n          \n      \n    \n    \n  \n\nThis is a duplicate", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r493824733", "createdAt": "2020-09-23T18:57:40Z", "author": {"login": "schultek"}, "path": "src/main/resources/templates/staticCodeAnalysis/defaultConfigurationJava.json", "diffHunk": "@@ -0,0 +1,225 @@\n+{\n+    \"defaultCategories\":\n+    [\n+        {\n+            \"name\": \"Bad Practice\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"BAD_PRACTICE\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Best-Practices\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Code Style\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.2,\n+            \"maxPenalty\": 2,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"STYLE\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"blocks\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"coding\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"modifier\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Code-Style\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Potential Bugs\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"CORRECTNESS\"\n+                },\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"MT_CORRECTNESS\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Error Prone\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Multithreading\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Security\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 2.5,\n+            \"maxPenalty\": 10,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"MALICIOUS_CODE\"\n+                },\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"SECURITY\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Security\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Performance\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 1,\n+            \"maxPenalty\": 2,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"PERFORMANCE\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Performance\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Design\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"design\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Design\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Code Metrics\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"metrics\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"sizes\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Documentation\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"I18N\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"javadoc\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"annotation\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Documentation\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Naming & Formatting\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"imports\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"indentation\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"naming\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"whitespaces\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Naming & Formatting\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"imports\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"indentation\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"naming\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"whitespaces\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aea10933bc8ca738f34d658f9031fc66a2c728d", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/3aea10933bc8ca738f34d658f9031fc66a2c728d", "committedDate": "2020-09-24T11:57:06Z", "message": "Fix duplicate in configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7b232880858f432ee905cd69abec42d71248e7", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/5c7b232880858f432ee905cd69abec42d71248e7", "committedDate": "2020-09-24T12:09:20Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml\n#\tsrc/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/ebed138ae3bf043be047bd51f131ed3cbe085bed", "committedDate": "2020-09-24T12:14:58Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTM2MjMw", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-495536230", "createdAt": "2020-09-24T12:51:42Z", "commit": {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo1MTo0MlrOHXZIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo1MTo0MlrOHXZIMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5MDk5Mg==", "bodyText": "You could add that the penalty is in percent (as in the german translation).", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494290992", "createdAt": "2020-09-24T12:51:42Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/i18n/en/exercise.json", "diffHunk": "@@ -140,6 +140,9 @@\n                 },\n                 \"maxScore\": {\n                     \"pattern\": \"The maximum score must be between 1 and 9999!\"\n+                },\n+                \"maxPenalty\": {\n+                    \"pattern\": \"The maximum penalty must be between 0 and 100!\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdd7a9935ee46faa4622b411a79cf8ea47e64654", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/bdd7a9935ee46faa4622b411a79cf8ea47e64654", "committedDate": "2020-09-24T15:40:49Z", "message": "Fix merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/5c6477ed578473a2c849b827164a85d0f97ea628", "committedDate": "2020-09-24T15:45:40Z", "message": "Improve translation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzMzNzE0", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-495733714", "createdAt": "2020-09-24T16:10:40Z", "commit": {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMDo0MVrOHXiUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMDo0MVrOHXiUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw==", "bodyText": "Maybe you can refactor this logic into a different method, it makes this method quite large and I guess it might be useful elsewhere.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494441653", "createdAt": "2020-09-24T16:10:41Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // Validate the category updates\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6572d1ac62b64b51e7bbd572280f54a358a39a", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/af6572d1ac62b64b51e7bbd572280f54a358a39a", "committedDate": "2020-09-24T16:35:03Z", "message": "Create validation method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/c83e59f4145dea33ff66d559f72e08c11b9cf828", "committedDate": "2020-09-24T16:38:14Z", "message": "Merge branch 'develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzY2NjIw", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-496366620", "createdAt": "2020-09-25T12:18:10Z", "commit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODoxMFrOHYBOVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODoxMFrOHYBOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA==", "bodyText": "Should TAs be allowed to update the categories or is this a task that only instructors should perform?", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494947924", "createdAt": "2020-09-25T12:18:10Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzczNDU5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-496373459", "createdAt": "2020-09-25T12:28:29Z", "commit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoyODoyOVrOHYBjWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoyODoyOVrOHYBjWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg==", "bodyText": "Just to make sure: The @Transactional annotation ensures that the imported SCA categories get saved into the DB although programmingExerciseRepository.save(newExercise); is only called before setting the categories, right?", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494953306", "createdAt": "2020-09-25T12:28:29Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java", "diffHunk": "@@ -89,10 +94,13 @@ public ProgrammingExercise importProgrammingExerciseBasis(final ProgrammingExerc\n         setupTestRepository(newExercise, projectKey);\n         programmingExerciseService.initParticipations(newExercise);\n \n-        // Hints and test cases\n+        // Hints, test cases and static code analysis categories\n         exerciseHintService.copyExerciseHints(templateExercise, newExercise);\n         programmingExerciseRepository.save(newExercise);\n         importTestCases(templateExercise, newExercise);\n+        if (Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+            importStaticCodeAnalysisCategories(templateExercise, newExercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf95d44dc783378ac3e5854dce89525dc7054f4f", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/cf95d44dc783378ac3e5854dce89525dc7054f4f", "committedDate": "2020-09-28T23:19:52Z", "message": "Merge develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5e2eaf5a44662241ea1834af78129137e8ae86", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/fb5e2eaf5a44662241ea1834af78129137e8ae86", "committedDate": "2020-09-28T23:25:46Z", "message": "Revert \"Merge develop\"\n\nThis reverts commit cf95d44d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/0655281d8f94c348d618c7aeefc8fa833c2bf929", "committedDate": "2020-09-28T23:50:15Z", "message": "Revert \"Revert \"Merge develop\"\"\n\nThis reverts commit fb5e2eaf5a44662241ea1834af78129137e8ae86, reversing\nchanges made to cf95d44dc783378ac3e5854dce89525dc7054f4f."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzU0Mzk0", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-498354394", "createdAt": "2020-09-29T11:05:31Z", "commit": {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTowNTozMlrOHZn5dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTowNTozMlrOHZn5dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMDEzNQ==", "bodyText": "move everything into the try block and catch the generic Exception so that this code can never break the application start", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r496630135", "createdAt": "2020-09-29T11:05:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.ResourcePatternUtils;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisConfiguration;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+\n+/**\n+ * Reads static code analysis configurations from json files at application start-up and provides a Bean with\n+ * programming language specific default categories.\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private final ResourceLoader resourceLoader;\n+\n+    private final Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> languageToConfiguration = new HashMap<>();\n+\n+    public StaticCodeAnalysisConfigurer(ResourceLoader resourceLoader) {\n+        this.resourceLoader = resourceLoader;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String configurationsPath = \"classpath:templates/staticCodeAnalysis/*.*\";\n+        Resource[] jsonConfigurations;\n+\n+        try {\n+            jsonConfigurations = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(configurationsPath);\n+        }\n+        catch (IOException e) {\n+            log.debug(\"Could not load static code analysis configuration resources: \" + e.getMessage());\n+            return;\n+        }\n+\n+        for (var jsonConfiguration : jsonConfigurations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzY0MTE1", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-498364115", "createdAt": "2020-09-29T11:19:29Z", "commit": {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2d7af1de31a3212501215fee08f78b040adffd", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/fe2d7af1de31a3212501215fee08f78b040adffd", "committedDate": "2020-09-29T16:26:45Z", "message": "Merge remote-tracking branch 'origin/codeql-analysis' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\t.github/workflows/codeql-analysis.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f1afd9c3f9ccc92aeda67daa8b2a7ddd4c90bd", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/c3f1afd9c3f9ccc92aeda67daa8b2a7ddd4c90bd", "committedDate": "2020-09-29T16:31:45Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/enumeration/StaticCodeAnalysisTool.java\n#\tsrc/test/java/de/tum/in/www1/artemis/util/ModelFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd3009cb8b8b5d963cf119d030777641a61d4077", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/bd3009cb8b8b5d963cf119d030777641a61d4077", "committedDate": "2020-09-29T16:34:40Z", "message": "Add missing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8365245ea485bf44e73ab3b1c5b1c93143b057e", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/b8365245ea485bf44e73ab3b1c5b1c93143b057e", "committedDate": "2020-09-29T23:07:53Z", "message": "Hard code categories in Java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27de7a4506ad4ee043674fd029781d61b2ea43b3", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/27de7a4506ad4ee043674fd029781d61b2ea43b3", "committedDate": "2020-09-29T23:12:46Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9434946f4463cac11511f234a186cac84bc85526", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/9434946f4463cac11511f234a186cac84bc85526", "committedDate": "2020-09-29T23:18:26Z", "message": "Fix bean type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29803bffcc0333882e3ed292edb6363edacc1ba", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/b29803bffcc0333882e3ed292edb6363edacc1ba", "committedDate": "2020-09-29T23:21:41Z", "message": "Fix bean type for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d403d0f10b3b2335835c596f39a953109215f832", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/d403d0f10b3b2335835c596f39a953109215f832", "committedDate": "2020-09-30T00:20:20Z", "message": "Remove json file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7343689f90d0cd90e36c4a668038aeb9527f4612", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/7343689f90d0cd90e36c4a668038aeb9527f4612", "committedDate": "2020-09-30T00:28:26Z", "message": "Revert code-ql change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjA3MzM5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500207339", "createdAt": "2020-10-01T10:22:04Z", "commit": {"oid": "7343689f90d0cd90e36c4a668038aeb9527f4612"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f484f63211f802420b40308455ef935db2de2156", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/f484f63211f802420b40308455ef935db2de2156", "committedDate": "2020-10-01T12:14:08Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/static-code-analysis-configuration-data-model\n\n# Conflicts:\n#\tsrc/main/webapp/app/entities/programming-exercise.model.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18d83c443d250e9bbf8469a65bc559be1ac1670e", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/18d83c443d250e9bbf8469a65bc559be1ac1670e", "committedDate": "2020-10-01T12:17:06Z", "message": "Move away from null types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjkyMzk5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500292399", "createdAt": "2020-10-01T12:27:04Z", "commit": {"oid": "18d83c443d250e9bbf8469a65bc559be1ac1670e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzE4Mjk2", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500318296", "createdAt": "2020-10-01T12:58:17Z", "commit": {"oid": "18d83c443d250e9bbf8469a65bc559be1ac1670e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "author": {"user": {"login": "kloessst", "name": "Stefan Kl\u00f6ss-Schuster"}}, "url": "https://github.com/ls1intum/Artemis/commit/d5ccab8c3977ae4e6af817ed9dceb23158299c8a", "committedDate": "2020-10-02T00:02:32Z", "message": "Improve max penalty field explanation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjIw", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793620", "createdAt": "2020-10-02T00:06:50Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MFrOHbeNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MFrOHbeNNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwMw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568503", "createdAt": "2020-10-02T00:06:50Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -146,6 +184,51 @@ public void createProgrammingExerciseForExam_validExercise_created() throws Exce\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importExercise_created() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjI0", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793624", "createdAt": "2020-10-02T00:06:52Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MlrOHbeNPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MlrOHbeNPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwOQ==", "bodyText": "Codacy found an issue: The utility class name 'Endpoints' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568509", "createdAt": "2020-10-02T00:06:52Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        var optionalError = validateCategories(categories, exerciseId);\n+        if (optionalError.isPresent()) {\n+            return optionalError.get();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Validates static code analysis categories\n+     *\n+     * @param categories to be validated\n+     * @param exerciseId path variable\n+     * @return empty optional if no error was found otherwise optional with an error response\n+     */\n+    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static final class Endpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjI5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793629", "createdAt": "2020-10-02T00:06:53Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1M1rOHbeNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1M1rOHbeNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568514", "createdAt": "2020-10-02T00:06:53Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -126,7 +118,8 @@ public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjMy", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793632", "createdAt": "2020-10-02T00:06:54Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NFrOHbeNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NFrOHbeNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNQ==", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'init()'.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568515", "createdAt": "2020-10-02T00:06:54Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {\n+    }\n+\n+    @PostConstruct\n+    private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjQw", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793640", "createdAt": "2020-10-02T00:06:55Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NVrOHbeNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NVrOHbeNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyMg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568522", "createdAt": "2020-10-02T00:06:55Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var category = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next();\n+        category.setMaxPenalty(3D);\n+        category.setPenalty(5D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_stateIsNull_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setState(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 200}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjQ2", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793646", "createdAt": "2020-10-02T00:06:56Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NlrOHbeNTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NlrOHbeNTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568527", "createdAt": "2020-10-02T00:06:56Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -683,6 +684,16 @@ private static StaticCodeAnalysisReportDTO generateStaticCodeAnalysisReport(Stat\n         return issue;\n     }\n \n+    public static StaticCodeAnalysisCategory generateStaticCodeAnalysisCategory(ProgrammingExercise programmingExercise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjQ5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793649", "createdAt": "2020-10-02T00:06:57Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1N1rOHbeNUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1N1rOHbeNUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyOQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_hintsGotReplacedInStatement' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568529", "createdAt": "2020-10-02T00:06:57Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -111,10 +99,14 @@ public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws Malf\n         final var newHintIDs = newlyImported.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n         assertThat(newlyImported.getExerciseHints().size()).isEqualTo(programmingExercise.getExerciseHints().size());\n         assertThat(programmingExercise.getExerciseHints()).noneMatch(hint -> newHintIDs.contains(hint.getId()));\n+        final var newStaticCodeAnalysisCategoriesIDs = newlyImported.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toSet());\n+        assertThat(newlyImported.getStaticCodeAnalysisCategories().size()).isEqualTo(programmingExercise.getStaticCodeAnalysisCategories().size());\n+        assertThat(programmingExercise.getStaticCodeAnalysisCategories()).noneMatch(category -> newStaticCodeAnalysisCategoriesIDs.contains(category.getId()));\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjU4", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793658", "createdAt": "2020-10-02T00:06:58Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1OFrOHbeNVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1OFrOHbeNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUzNA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_withStaticCodeAnalysis' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568534", "createdAt": "2020-10-02T00:06:58Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n+        exercise.setBonusPoints(null);\n+        mockConnectorRequestsForSetup(exercise);\n+        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n+        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n+        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n+        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjYx", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793661", "createdAt": "2020-10-02T00:06:59Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMFrOHbeNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMFrOHbeNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0MQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568541", "createdAt": "2020-10-02T00:07:00Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjY4", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793668", "createdAt": "2020-10-02T00:07:01Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMVrOHbeNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMVrOHbeNZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0OQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568549", "createdAt": "2020-10-02T00:07:01Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjc5", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793679", "createdAt": "2020-10-02T00:07:02Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMlrOHbeNbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMlrOHbeNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU1Nw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568557", "createdAt": "2020-10-02T00:07:02Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "diffHunk": "@@ -409,13 +419,26 @@ public void updateProgrammingExercise_eitherCourseOrExerciseGroupSet_badRequest(\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExerciseInExam, HttpStatus.BAD_REQUEST);\n     }\n \n+    private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getTemplateBuildPlanId(), true);\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getSolutionBuildPlanId(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getTemplateRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getSolutionRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_badRequest() throws Exception {\n-        // false -> true\n+    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzkzNjgz", "url": "https://github.com/ls1intum/Artemis/pull/2086#pullrequestreview-500793683", "createdAt": "2020-10-02T00:07:03Z", "commit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowM1rOHbeNcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowM1rOHbeNcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568560", "createdAt": "2020-10-02T00:07:03Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4118, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}