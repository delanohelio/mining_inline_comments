{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTM1OTQ3", "number": 2172, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoxOFrOErHc5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMzowNTowMlrOExi5WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjQ2MzEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoxOFrOHdtBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoxOFrOHdtBLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwODMzNA==", "bodyText": "Codacy found an issue: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r500908334", "createdAt": "2020-10-07T10:34:18Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -0,0 +1,509 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.eclipse.jgit.lib.ObjectId;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.messaging.simp.SimpMessageSendingOperations;\n+import org.springframework.stereotype.Service;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.FeedbackType;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.*;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.service.connectors.ContinuousIntegrationService;\n+import de.tum.in.www1.artemis.service.dto.StaticCodeAnalysisReportDTO;\n+import de.tum.in.www1.artemis.web.rest.dto.ProgrammingExerciseGradingStatisticsDTO;\n+import de.tum.in.www1.artemis.web.rest.errors.EntityNotFoundException;\n+\n+@Service\n+public class ProgrammingExerciseGradingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProgrammingExerciseGradingService.class);\n+\n+    private final Optional<ContinuousIntegrationService> continuousIntegrationService;\n+\n+    private final ProgrammingExerciseTestCaseService testCaseService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final ProgrammingSubmissionService programmingSubmissionService;\n+\n+    private final SimpMessageSendingOperations messagingTemplate;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    private final ResultService resultService;\n+\n+    public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService testCaseService, ProgrammingExerciseService programmingExerciseService,\n+            ProgrammingSubmissionService programmingSubmissionService, ParticipationService participationService, ResultRepository resultRepository,\n+            Optional<ContinuousIntegrationService> continuousIntegrationService, SimpMessageSendingOperations messagingTemplate,\n+            StaticCodeAnalysisService staticCodeAnalysisService, ResultService resultService) {\n+        this.testCaseService = testCaseService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.programmingSubmissionService = programmingSubmissionService;\n+        this.participationService = participationService;\n+        this.continuousIntegrationService = continuousIntegrationService;\n+        this.resultRepository = resultRepository;\n+        this.messagingTemplate = messagingTemplate;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+        this.resultService = resultService;\n+    }\n+\n+    /**\n+     * Use the given requestBody to extract the relevant information from it. Fetch and attach the result's feedback items to it. For programming exercises the test cases are\n+     * extracted from the feedbacks & the result is updated with the information from the test cases.\n+     *\n+     * @param participation the participation for which the build was finished\n+     * @param requestBody   RequestBody containing the build result and its feedback items\n+     * @return result after compilation\n+     */\n+    public Optional<Result> processNewProgrammingExerciseResult(@NotNull Participation participation, @NotNull Object requestBody) {\n+        log.debug(\"Received new build result (NEW) for participation \" + participation.getId());\n+\n+        if (!(participation instanceof ProgrammingExerciseParticipation)) {\n+            throw new EntityNotFoundException(\"Participation with id \" + participation.getId() + \" is not a programming exercise participation!\");\n+        }\n+\n+        Result result;\n+        try {\n+            result = continuousIntegrationService.get().onBuildCompleted((ProgrammingExerciseParticipation) participation, requestBody);\n+        }\n+        catch (Exception ex) {\n+            log.error(\"Result for participation \" + participation.getId() + \" could not be created due to the following exception: \" + ex);\n+            return Optional.empty();\n+        }\n+\n+        if (result != null) {\n+            ProgrammingExercise programmingExercise = (ProgrammingExercise) participation.getExercise();\n+            boolean isSolutionParticipation = participation instanceof SolutionProgrammingExerciseParticipation;\n+            boolean isTemplateParticipation = participation instanceof TemplateProgrammingExerciseParticipation;\n+            // Find out which test cases were executed and calculate the score according to their status and weight.\n+            // This needs to be done as some test cases might not have been executed.\n+            // When the result is from a solution participation , extract the feedback items (= test cases) and store them in our database.\n+            if (isSolutionParticipation) {\n+                extractTestCasesFromResult(programmingExercise, result);\n+            }\n+            result = updateResult(result, programmingExercise, !isSolutionParticipation && !isTemplateParticipation);\n+            result = resultRepository.save(result);\n+            // workaround to prevent that result.submission suddenly turns into a proxy and cannot be used any more later after returning this method\n+\n+            // If the solution participation was updated, also trigger the template participation build.\n+            if (isSolutionParticipation) {\n+                // This method will return without triggering the build if the submission is not of type TEST.\n+                triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n+            }\n+        }\n+        return Optional.ofNullable(result);\n+    }\n+\n+    /**\n+     * Trigger the build of the template repository, if the submission of the provided result is of type TEST.\n+     * Will use the commitHash of the submission for triggering the template build.\n+     *\n+     * If the submission of the provided result is not of type TEST, the method will return without triggering the build.\n+     *\n+     * @param programmingExerciseId ProgrammingExercise id that belongs to the result.\n+     * @param resultId              Result id.\n+     */\n+    private void triggerTemplateBuildIfTestCasesChanged(long programmingExerciseId, long resultId) {\n+        ProgrammingSubmission submission;\n+        try {\n+            submission = programmingSubmissionService.findByResultId(resultId);\n+        }\n+        catch (EntityNotFoundException ex) {\n+            // This is an unlikely error that would mean that no submission could be created for the result. In this case we can only log and abort.\n+            log.error(\"Could not trigger the build of the template repository for the programming exercise id \" + programmingExerciseId\n+                    + \" because no submission could be found for the provided result id \" + resultId);\n+            return;\n+        }\n+        // We only trigger the template build when the test repository was changed.\n+        if (!submission.getType().equals(SubmissionType.TEST)) {\n+            return;\n+        }\n+        // We use the last commitHash of the test repository.\n+        ObjectId testCommitHash = ObjectId.fromString(submission.getCommitHash());\n+        try {\n+            programmingSubmissionService.triggerTemplateBuildAndNotifyUser(programmingExerciseId, testCommitHash, SubmissionType.TEST);\n+        }\n+        catch (EntityNotFoundException ex) {\n+            // If for some reason the programming exercise does not have a template participation, we can only log and abort.\n+            log.error(\"Could not trigger the build of the template repository for the programming exercise id \" + programmingExerciseId\n+                    + \" because no template participation could be found for the given exercise\");\n+        }\n+    }\n+\n+    /**\n+     * Generates test cases from the given result's feedbacks & notifies the subscribing users about the test cases if they have changed. Has the side effect of sending a message\n+     * through the websocket!\n+     *\n+     * @param exercise the programming exercise for which the test cases should be extracted from the new result\n+     * @param result   from which to extract the test cases.\n+     */\n+    private void extractTestCasesFromResult(ProgrammingExercise exercise, Result result) {\n+        boolean haveTestCasesChanged = testCaseService.generateTestCasesFromFeedbacks(result.getFeedbacks(), exercise);\n+        if (haveTestCasesChanged) {\n+            // Notify the client about the updated testCases\n+            Set<ProgrammingExerciseTestCase> testCases = testCaseService.findByExerciseId(exercise.getId());\n+            messagingTemplate.convertAndSend(\"/topic/programming-exercise/\" + exercise.getId() + \"/test-cases\", testCases);\n+        }\n+    }\n+\n+    /**\n+     * Updates an incoming result with the information of the exercises test cases. This update includes:\n+     * - Checking which test cases were not executed as this is not part of the bamboo build (not all test cases are executed in an exercise with sequential test runs)\n+     * - Checking the due date and the afterDueDate flag\n+     * - Recalculating the score based based on the successful test cases weight vs the total weight of all test cases.\n+     *\n+     * If there are no test cases stored in the database for the given exercise (i.e. we have a legacy exercise) or the weight has not been changed, then the result will not change\n+     *\n+     * @param result   to modify with new score, result string & added feedbacks (not executed tests)\n+     * @param exercise the result belongs to.\n+     * @param isStudentParticipation boolean flag indicating weather the participation of the result is not a solution/template participation.\n+     * @return Result with updated feedbacks, score and result string.\n+     */\n+    public Result updateResult(Result result, ProgrammingExercise exercise, boolean isStudentParticipation) {\n+        Set<ProgrammingExerciseTestCase> testCases = testCaseService.findActiveByExerciseId(exercise.getId());\n+        Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = testCases;\n+        // We don't filter the test cases for the solution/template participation's results as they are used as indicators for the instructor!\n+        if (isStudentParticipation) {\n+            testCasesForCurrentDate = filterTestCasesForCurrentDate(exercise, testCases);\n+        }\n+        return updateResult(testCases, testCasesForCurrentDate, result, exercise);\n+    }\n+\n+    /**\n+     * Updates <b>all</b> latest automatic results of the given exercise with the information of the exercises test cases. This update includes:\n+     * - Checking which test cases were not executed as this is not part of the bamboo build (not all test cases are executed in an exercise with sequential test runs)\n+     * - Checking the due date and the afterDueDate flag\n+     * - Recalculating the score based based on the successful test cases weight vs the total weight of all test cases.\n+     *\n+     * If there are no test cases stored in the database for the given exercise (i.e. we have a legacy exercise) or the weight has not been changed, then the result will not change\n+     *\n+     * @param exercise the exercise whose results should be updated\n+     * @return the results of the exercise that have been updated\n+     */\n+    public List<Result> updateAllResults(ProgrammingExercise exercise) {\n+        Set<ProgrammingExerciseTestCase> testCases = testCaseService.findActiveByExerciseId(exercise.getId());\n+\n+        ArrayList<Result> updatedResults = new ArrayList<>();\n+\n+        Result templateResult = exercise.getTemplateParticipation().findLatestResult();\n+        Result solutionResult = exercise.getSolutionParticipation().findLatestResult();\n+        // template and solution are always updated using ALL test cases\n+        if (templateResult != null) {\n+            updateResult(testCases, testCases, templateResult, exercise);\n+            updatedResults.add(templateResult);\n+        }\n+        if (solutionResult != null) {\n+            updateResult(testCases, testCases, solutionResult, exercise);\n+            updatedResults.add(solutionResult);\n+        }\n+        // filter the test cases for the student results if necessary\n+        Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = filterTestCasesForCurrentDate(exercise, testCases);\n+        // We only update the latest automatic results here, later manual assessments are not affected\n+        List<StudentParticipation> participations = participationService.findByExerciseIdWithLatestAutomaticResultAndFeedbacks(exercise.getId());\n+\n+        for (StudentParticipation studentParticipation : participations) {\n+            Result result = studentParticipation.findLatestResult();\n+            if (result != null) {\n+                updateResult(testCases, testCasesForCurrentDate, result, exercise);\n+                updatedResults.add(result);\n+            }\n+        }\n+        return updatedResults;\n+    }\n+\n+    private Set<ProgrammingExerciseTestCase> filterTestCasesForCurrentDate(ProgrammingExercise exercise, Set<ProgrammingExerciseTestCase> testCases) {\n+        boolean shouldTestsWithAfterDueDateFlagBeRemoved = exercise.getBuildAndTestStudentSubmissionsAfterDueDate() != null\n+                && ZonedDateTime.now().isBefore(exercise.getBuildAndTestStudentSubmissionsAfterDueDate());\n+        // Filter all test cases from the score calculation that are only executed after due date if the due date has not yet passed.\n+        return testCases.stream().filter(testCase -> !shouldTestsWithAfterDueDateFlagBeRemoved || !testCase.isAfterDueDate()).collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Calculates the grading for a result and updates the feedbacks\n+     * @param testCases All test cases for the exercise\n+     * @param testCasesForCurrentDate Test cases for the exercise for the current date\n+     * @param result The result to be updated\n+     * @param exercise The current exercise\n+     * @return The updated result\n+     */\n+    private Result updateResult(Set<ProgrammingExerciseTestCase> testCases, Set<ProgrammingExerciseTestCase> testCasesForCurrentDate, @NotNull Result result,\n+            ProgrammingExercise exercise) {\n+\n+        // Distinguish between static code analysis feedback and test case feedback\n+        List<Feedback> testCaseFeedback = new ArrayList<>();\n+        List<Feedback> staticCodeAnalysisFeedback = new ArrayList<>();\n+        for (var feedback : result.getFeedbacks()) {\n+            if (feedback.isStaticCodeAnalysisFeedback()) {\n+                staticCodeAnalysisFeedback.add(feedback);\n+            }\n+            else {\n+                testCaseFeedback.add(feedback);\n+            }\n+        }\n+\n+        // Case 1: There are tests and test case feedback, find out which tests were not executed or should only count to the score after the due date.\n+        if (testCasesForCurrentDate.size() > 0 && testCaseFeedback.size() > 0 && result.getFeedbacks().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4473da898bb4b251434b536a584f7a3762ac1d60"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjQ2MzE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoxOVrOHdtBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoxOVrOHdtBOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwODM0NQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r500908345", "createdAt": "2020-10-07T10:34:19Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "diffHunk": "@@ -239,6 +239,16 @@ public File postWithResponseBodyFile(String path, Object body, HttpStatus expect\n         return mapper.readValue(stringResponse, responseType);\n     }\n \n+    public void patch(String path, Object body, HttpStatus expectedStatus) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4473da898bb4b251434b536a584f7a3762ac1d60"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjQ2MzIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoyMFrOHdtBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoyMFrOHdtBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwODM1Mg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r500908352", "createdAt": "2020-10-07T10:34:20Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4473da898bb4b251434b536a584f7a3762ac1d60"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjQ2MzMyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoyMVrOHdtBTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDozNDoyMVrOHdtBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwODM2NA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_noStaticCodeAnalysisButMaxPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r500908364", "createdAt": "2020-10-07T10:34:21Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "diffHunk": "@@ -608,18 +648,63 @@ public void createProgrammingExercise_maxScoreIsNull_badRequest() throws Excepti\n         request.post(ROOT + SETUP, programmingExercise, HttpStatus.BAD_REQUEST);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_noParticipationModeSelected_badRequest() throws Exception {\n+        programmingExercise.setId(null);\n+        programmingExercise.setAllowOfflineIde(false);\n+        programmingExercise.setAllowOnlineEditor(false);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.BAD_REQUEST);\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void createProgrammingExercise_staticCodeAnalysisMustBeSet_badRequest() throws Exception {\n         programmingExercise.setId(null);\n+        programmingExercise.setTitle(\"New title\");\n+        programmingExercise.setShortName(\"NewShortname\");\n         programmingExercise.setStaticCodeAnalysisEnabled(null);\n         request.post(ROOT + SETUP, programmingExercise, HttpStatus.BAD_REQUEST);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_unsupportedProgrammingLanguageForStaticCodeAnalysis_badRequest() throws Exception {\n+        programmingExercise.setId(null);\n+        programmingExercise.setTitle(\"New title\");\n+        programmingExercise.setShortName(\"NewShortname\");\n+        programmingExercise.setStaticCodeAnalysisEnabled(true);\n+        programmingExercise.programmingLanguage(ProgrammingLanguage.C);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_noStaticCodeAnalysisButMaxPenalty_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4473da898bb4b251434b536a584f7a3762ac1d60"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzg2ODAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseGradingResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMzowMjowM1rOHnv9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMzozODo1OVrOHnw39w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ0MjMzOQ==", "bodyText": "I guess this should be \"at lest instructor\" based on the @PreAuthorize", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r511442339", "createdAt": "2020-10-24T13:02:03Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseGradingResource.java", "diffHunk": "@@ -94,4 +97,28 @@ public ProgrammingExerciseGradingResource(ProgrammingExerciseGradingService prog\n         resultRepository.saveAll(updatedResults);\n         return ResponseEntity.ok(updatedResults.size());\n     }\n+\n+    /**\n+     * Get the exercise's test case statistics for the the given exercise id.\n+     *\n+     * @param exerciseId of the the exercise.\n+     * @return the test case statistics for the exercise.\n+     */\n+    @GetMapping(STATISTICS)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingExerciseGradingStatisticsDTO> getGradingStatistics(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get test case statistics for programming exercise {}\", exerciseId);\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n+\n+        Course course = programmingExercise.getCourseViaExerciseGroupOrCourseMember();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantInCourse(course, user)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a9bff69c8ed218b6800a6f07a7bd6dcfc5f0af2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ1NzI3MQ==", "bodyText": "This is fixed 4a1c028", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r511457271", "createdAt": "2020-10-24T13:38:59Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseGradingResource.java", "diffHunk": "@@ -94,4 +97,28 @@ public ProgrammingExerciseGradingResource(ProgrammingExerciseGradingService prog\n         resultRepository.saveAll(updatedResults);\n         return ResponseEntity.ok(updatedResults.size());\n     }\n+\n+    /**\n+     * Get the exercise's test case statistics for the the given exercise id.\n+     *\n+     * @param exerciseId of the the exercise.\n+     * @return the test case statistics for the exercise.\n+     */\n+    @GetMapping(STATISTICS)\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<ProgrammingExerciseGradingStatisticsDTO> getGradingStatistics(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get test case statistics for programming exercise {}\", exerciseId);\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n+\n+        Course course = programmingExercise.getCourseViaExerciseGroupOrCourseMember();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantInCourse(course, user)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ0MjMzOQ=="}, "originalCommit": {"oid": "7a9bff69c8ed218b6800a6f07a7bd6dcfc5f0af2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzg3NDE2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/manage/grading/charts/test-case-distribution-chart.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMzowNTowMlrOHnwBpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMzowNTowMlrOHnwBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ0MzM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                chartPreset = new HorizontalStackedBarChartPreset(['Weight', 'Weight & Bonus', 'Points'], ['all weights', 'all weights and bonuses', 'all achievable points']);\n          \n          \n            \n                chartPreset = new HorizontalStackedBarChartPreset(['Weight', 'Weight & Bonus', 'Points'], ['all weights', 'all weights and bonuses', 'all achieved points']);", "url": "https://github.com/ls1intum/Artemis/pull/2172#discussion_r511443364", "createdAt": "2020-10-24T13:05:02Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/webapp/app/exercises/programming/manage/grading/charts/test-case-distribution-chart.component.ts", "diffHunk": "@@ -0,0 +1,75 @@\n+import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n+import { ProgrammingExerciseTestCase } from 'app/entities/programming-exercise-test-case.model';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { TestCaseStatsMap } from 'app/entities/programming-exercise-test-case-statistics.model';\n+import { HorizontalStackedBarChartPreset } from 'app/shared/chart/presets/horizontalStackedBarChartPreset';\n+import { ChartDataSets } from 'chart.js';\n+\n+@Component({\n+    selector: 'jhi-test-case-distribution-chart',\n+    template: `\n+        <div>\n+            <div>\n+                <h4>Test Case Distribution</h4>\n+                <p>The distribution of test cases across the metrices 'Weight', 'Weight + Bonus' and 'Points'. Hover over a colored block to see the test-case details.</p>\n+            </div>\n+            <div class=\"bg-light\">\n+                <jhi-chart [preset]=\"chartPreset\" [datasets]=\"chartDatasets\"></jhi-chart>\n+            </div>\n+        </div>\n+    `,\n+})\n+export class TestCaseDistributionChartComponent implements OnChanges {\n+    @Input() testCases: ProgrammingExerciseTestCase[];\n+    @Input() testCaseStatsMap?: TestCaseStatsMap;\n+    @Input() totalParticipations?: number;\n+    @Input() exercise: ProgrammingExercise;\n+\n+    @Output() testCaseColorsChange = new EventEmitter<{}>();\n+\n+    chartPreset = new HorizontalStackedBarChartPreset(['Weight', 'Weight & Bonus', 'Points'], ['all weights', 'all weights and bonuses', 'all achievable points']);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a9bff69c8ed218b6800a6f07a7bd6dcfc5f0af2"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4499, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}