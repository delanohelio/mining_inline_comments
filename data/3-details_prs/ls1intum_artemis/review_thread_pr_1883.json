{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MDIyMzAx", "number": 1883, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowNjozNlrOEPEANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNTozMVrOEPStVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjI5Njg0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowNjozNlrOGykLVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowNjozNlrOGykLVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3NDcwOA==", "bodyText": "You've added @async here but the method itself is not async", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455674708", "createdAt": "2020-07-16T10:06:36Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +49,42 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }\n+     * @async", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef774f28abfc248a4d45d466cc345c91269f4bb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjMwMTMyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowNzo1M1rOGykN9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDozMDoxOFrOGyk9bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3NTM4MA==", "bodyText": "Will the error be passed to the alert service?", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455675380", "createdAt": "2020-07-16T10:07:53Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +49,42 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }\n+     * @async\n+     * @param {Blob | File} file\n+     * @param {string} fileName\n+     * @param options\n+     */\n+    uploadMarkdownFile(file: Blob | File, fileName?: string, options?: any): Promise<FileUploadResponse> {\n+        /** Check file extension **/\n+        const fileExtension = fileName ? fileName.split('.').pop()!.toLocaleLowerCase() : file['name'].split('.').pop().toLocaleLowerCase();\n+        if (this.acceptedFileExtensions.split(',').indexOf(fileExtension) === -1) {\n+            return Promise.reject(\n+                new Error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef774f28abfc248a4d45d466cc345c91269f4bb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NzUzNQ==", "bodyText": "Yes", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455687535", "createdAt": "2020-07-16T10:30:18Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +49,42 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }\n+     * @async\n+     * @param {Blob | File} file\n+     * @param {string} fileName\n+     * @param options\n+     */\n+    uploadMarkdownFile(file: Blob | File, fileName?: string, options?: any): Promise<FileUploadResponse> {\n+        /** Check file extension **/\n+        const fileExtension = fileName ? fileName.split('.').pop()!.toLocaleLowerCase() : file['name'].split('.').pop().toLocaleLowerCase();\n+        if (this.acceptedFileExtensions.split(',').indexOf(fileExtension) === -1) {\n+            return Promise.reject(\n+                new Error(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3NTM4MA=="}, "originalCommit": {"oid": "9ef774f28abfc248a4d45d466cc345c91269f4bb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjMyMzEwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxNDowNFrOGyka_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxNDowNFrOGyka_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODcxOA==", "bodyText": "See comment above", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455678718", "createdAt": "2020-07-16T10:14:04Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +49,42 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }\n+     * @async\n+     * @param {Blob | File} file\n+     * @param {string} fileName\n+     * @param options\n+     */\n+    uploadMarkdownFile(file: Blob | File, fileName?: string, options?: any): Promise<FileUploadResponse> {\n+        /** Check file extension **/\n+        const fileExtension = fileName ? fileName.split('.').pop()!.toLocaleLowerCase() : file['name'].split('.').pop().toLocaleLowerCase();\n+        if (this.acceptedFileExtensions.split(',').indexOf(fileExtension) === -1) {\n+            return Promise.reject(\n+                new Error(\n+                    'Unsupported file type! Only files of type ' +\n+                        this.acceptedFileExtensions\n+                            .split(',')\n+                            .map((extension) => `\".${extension}\"`)\n+                            .join(', ') +\n+                        ' allowed.',\n+                ),\n+            );\n+        }\n+\n+        /** Check file size **/\n+        if (file.size > MAX_FILE_SIZE) {\n+            return Promise.reject(new Error('File is too big! Maximum allowed file size: ' + MAX_FILE_SIZE / (1024 * 1024) + ' MB.'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef774f28abfc248a4d45d466cc345c91269f4bb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjYwMjc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTozOTozNlrOGynG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowODowMVrOGyn_Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyMjcwNA==", "bodyText": "We should think about the permission concept here. For now I suggest that we only allow this to ADMIN, INSTRUCTOR and TA roles.", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455722704", "createdAt": "2020-07-16T11:39:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyMjk3MA==", "bodyText": "This also means the image upload should be deactivate for the questions and answer component for now", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455722970", "createdAt": "2020-07-16T11:40:04Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyMjcwNA=="}, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzE2Nw==", "bodyText": "I deactivated it for questions and answers and removed the user role", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455737167", "createdAt": "2020-07-16T12:08:01Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyMjcwNA=="}, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjYwMzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTozOTo0M1rOGynHJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTozOTo0M1rOGynHJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyMjc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")\n          \n          \n            \n                @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA')\")", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455722789", "createdAt": "2020-07-16T11:39:43Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjYxMTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0MjoxOVrOGynMHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjoxMDoxM1rOGyoD2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNDA2Mw==", "bodyText": "Does this mean that really every user can download those files? I don't think this would be a good solution.\nCould we apply the same principle as for lecture downloads, so that only students within the same course (or students who have access to the exercise) can download markdown files?\nOr would this be too complicated for now?", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455724063", "createdAt": "2020-07-16T11:42:19Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")\n+    public ResponseEntity<String> saveMarkdownFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName) throws URISyntaxException {\n+        log.debug(\"REST request to upload file for markdown: {}\", file.getOriginalFilename());\n+        return handleSaveFile(file, keepFileName, true);\n+    }\n+\n+    /**\n+     * GET /files/markdown/:filename : Get the markdown file with the given filename\n+     *\n+     * @param filename The filename of the file to get\n+     * @return The requested file, or 404 if the file doesn't exist\n+     */\n+    @GetMapping(\"/files/markdown/{filename:.+}\")\n+    @PreAuthorize(\"permitAll()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczODMzMA==", "bodyText": "Every user who knows the url of the file can access it. Adding authentication here would be quite hard to do since there is no good way (as far as I know) of adding the authentication to the code generated by markdown accessing the file.", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455738330", "createdAt": "2020-07-16T12:10:13Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA', 'USER')\")\n+    public ResponseEntity<String> saveMarkdownFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName) throws URISyntaxException {\n+        log.debug(\"REST request to upload file for markdown: {}\", file.getOriginalFilename());\n+        return handleSaveFile(file, keepFileName, true);\n+    }\n+\n+    /**\n+     * GET /files/markdown/:filename : Get the markdown file with the given filename\n+     *\n+     * @param filename The filename of the file to get\n+     * @return The requested file, or 404 if the file doesn't exist\n+     */\n+    @GetMapping(\"/files/markdown/{filename:.+}\")\n+    @PreAuthorize(\"permitAll()\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNDA2Mw=="}, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjYxODc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMTo0NDozNFrOGynQVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozMzo1NVrOGyrKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNTE0MQ==", "bodyText": "How do you handle if two people upload a file with the same name? Does the file name include some random string to prevent that the 2nd file is overridden by the 1st one?", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455725141", "createdAt": "2020-07-16T11:44:34Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)\n+            throws URISyntaxException {\n+        // NOTE: Maximum file size is set in resources/config/application.yml\n+        // Currently set to 10 MB\n+\n+        // check for file type\n+        String fileExtension = FilenameUtils.getExtension(file.getOriginalFilename());\n+        if (fileExtension == null || this.allowedFileExtensions.stream().noneMatch(fileExtension::equalsIgnoreCase)) {\n+            return ResponseEntity.badRequest().body(\"Unsupported file type! Allowed file types: \" + String.join(\", \", this.allowedFileExtensions));\n+        }\n+\n+        final String filePath;\n+        final String fileNameAddition;\n+        final StringBuilder responsePath = new StringBuilder();\n+\n+        // set the appropriate values depending on the use case\n+        if (markdown) {\n+            filePath = FilePathService.getMarkdownFilepath();\n+            fileNameAddition = \"Markdown_\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczODkwMA==", "bodyText": "The request is for now always sent so that it does not necessarily keep the file name. In this case a timestamp and a random string is included.", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455738900", "createdAt": "2020-07-16T12:11:14Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)\n+            throws URISyntaxException {\n+        // NOTE: Maximum file size is set in resources/config/application.yml\n+        // Currently set to 10 MB\n+\n+        // check for file type\n+        String fileExtension = FilenameUtils.getExtension(file.getOriginalFilename());\n+        if (fileExtension == null || this.allowedFileExtensions.stream().noneMatch(fileExtension::equalsIgnoreCase)) {\n+            return ResponseEntity.badRequest().body(\"Unsupported file type! Allowed file types: \" + String.join(\", \", this.allowedFileExtensions));\n+        }\n+\n+        final String filePath;\n+        final String fileNameAddition;\n+        final StringBuilder responsePath = new StringBuilder();\n+\n+        // set the appropriate values depending on the use case\n+        if (markdown) {\n+            filePath = FilePathService.getMarkdownFilepath();\n+            fileNameAddition = \"Markdown_\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNTE0MQ=="}, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0OTI0NA==", "bodyText": "what do you mean with \"the request is for now always sent\"?", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455749244", "createdAt": "2020-07-16T12:30:17Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)\n+            throws URISyntaxException {\n+        // NOTE: Maximum file size is set in resources/config/application.yml\n+        // Currently set to 10 MB\n+\n+        // check for file type\n+        String fileExtension = FilenameUtils.getExtension(file.getOriginalFilename());\n+        if (fileExtension == null || this.allowedFileExtensions.stream().noneMatch(fileExtension::equalsIgnoreCase)) {\n+            return ResponseEntity.badRequest().body(\"Unsupported file type! Allowed file types: \" + String.join(\", \", this.allowedFileExtensions));\n+        }\n+\n+        final String filePath;\n+        final String fileNameAddition;\n+        final StringBuilder responsePath = new StringBuilder();\n+\n+        // set the appropriate values depending on the use case\n+        if (markdown) {\n+            filePath = FilePathService.getMarkdownFilepath();\n+            fileNameAddition = \"Markdown_\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNTE0MQ=="}, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4OTIwNA==", "bodyText": "There is the option to keep the file name. In this case the file with the same name would be overwritten. This is not used at the moment, but it might be used at some point in the future. Right now the name of a markdown file will always include a random string", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455789204", "createdAt": "2020-07-16T13:33:55Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)\n+            throws URISyntaxException {\n+        // NOTE: Maximum file size is set in resources/config/application.yml\n+        // Currently set to 10 MB\n+\n+        // check for file type\n+        String fileExtension = FilenameUtils.getExtension(file.getOriginalFilename());\n+        if (fileExtension == null || this.allowedFileExtensions.stream().noneMatch(fileExtension::equalsIgnoreCase)) {\n+            return ResponseEntity.badRequest().body(\"Unsupported file type! Allowed file types: \" + String.join(\", \", this.allowedFileExtensions));\n+        }\n+\n+        final String filePath;\n+        final String fileNameAddition;\n+        final StringBuilder responsePath = new StringBuilder();\n+\n+        // set the appropriate values depending on the use case\n+        if (markdown) {\n+            filePath = FilePathService.getMarkdownFilepath();\n+            fileNameAddition = \"Markdown_\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNTE0MQ=="}, "originalCommit": {"oid": "18c6b46674bf1ed500345ad019020470280bc57c"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzc1NzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoxMjo0M1rOGyyQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoxMzoxMlrOGy0jJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwNTQ4NA==", "bodyText": "just a small thing but maybe something like markdown-file-upload  instead of camelCase", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455905484", "createdAt": "2020-07-16T16:12:43Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0Mjk0OQ==", "bodyText": "changed that now \ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455942949", "createdAt": "2020-07-16T17:13:12Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdownFileUpload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdownFileUpload\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwNTQ4NA=="}, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzgwNTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyNDoxMlrOGyyutQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo1NjoyNFrOGyz7kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzE0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)\n          \n          \n            \n                private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") boolean keepFileName, boolean markdown)", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455913141", "createdAt": "2020-07-16T16:24:12Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzMjgxOQ==", "bodyText": "I've seen Boolean used quite often when it is passed as a request param. But since I am not an expert in this field, I can also change it to boolean. @stefanwaldhauser could you please explain why this change is necessary?", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455932819", "createdAt": "2020-07-16T16:56:24Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzE0MQ=="}, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzgyODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/markdownEditor.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozMDowNlrOGyy9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozMDowNlrOGyy9PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjg2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"fileUpload\": \"F\u00fcge Datein durch Drag & Drop oder ausw\u00e4hlen hinzu.\",\n          \n          \n            \n                        \"fileUpload\": \"F\u00fcge Dateien durch Drag & Drop oder durch Ausw\u00e4hlen hinzu.\",", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455916861", "createdAt": "2020-07-16T16:30:06Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/i18n/de/markdownEditor.json", "diffHunk": "@@ -4,7 +4,9 @@\n             \"commands\": {\n                 \"katex\": \"Formel\",\n                 \"fullscreen\": \"Vollbild\"\n-            }\n+            },\n+            \"fileUpload\": \"F\u00fcge Datein durch Drag & Drop oder ausw\u00e4hlen hinzu.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzgzNzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozMjozNFrOGyzC5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzowODowMFrOGy0WpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxODMxMQ==", "bodyText": "Maybe you could define a type for the options instead of having any here?", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455918311", "createdAt": "2020-07-16T16:32:34Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +48,41 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzYyNQ==", "bodyText": "Otherwise another programmer would not know easily what options are available", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455937625", "createdAt": "2020-07-16T17:04:26Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +48,41 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxODMxMQ=="}, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzOTc0OA==", "bodyText": "Good point, I added that now.", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r455939748", "createdAt": "2020-07-16T17:08:00Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/webapp/app/shared/http/file-uploader.service.ts", "diffHunk": "@@ -49,6 +48,41 @@ export class FileUploaderService {\n         return this.http.post<FileUploadResponse>(url, formData).toPromise();\n     }\n \n+    /**\n+     * Function which uploads a file. It checks for supported file extensions and file size.\n+     * Options must be passed as a dictionary. E.g: { keepFileName: true }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxODMxMQ=="}, "originalCommit": {"oid": "b7aa379ed75321fad6efbec2cab6c792e03a4ad4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDY5ODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyMzoxNFrOGy7aCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyMzoxNFrOGy7aCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NTMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)\n          \n          \n            \n                private ResponseEntity<String> handleSaveFile(MultipartFile file, boolean keepFileName, boolean markdown)", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r456055306", "createdAt": "2020-07-16T20:23:14Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -311,6 +288,89 @@ private boolean validateTemporaryAccessToken(String temporaryAccessToken, String\n         return true;\n     }\n \n+    /**\n+     * Helper method which handles the file creation for both normal file uploads and for markdown\n+     * @param file The file to be uplaoded\n+     * @param keepFileName specifies if original file name should be kept\n+     * @param markdown boolean which is set to true, when we are uploading a file within the markdown editor\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @NotNull\n+    private ResponseEntity<String> handleSaveFile(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName, boolean markdown)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f2b48b81471e9967db0a3a4158ac90a58af5da"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDcwNDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNTowOVrOGy7d7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNTowOVrOGy7d7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NjMwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<String> saveMarkdownFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName) throws URISyntaxException {\n          \n          \n            \n                public ResponseEntity<String> saveMarkdownFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(defaultValue = \"false\") boolean keepFileName) throws URISyntaxException {", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r456056301", "createdAt": "2020-07-16T20:25:09Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -161,6 +110,34 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n         return responseEntityForFilePath(FilePathService.getTempFilepath() + filename);\n     }\n \n+    /**\n+     * POST /markdown-file-upload : Upload a new file for markdown.\n+     *\n+     * @param file The file to save\n+     * @param keepFileName specifies if original file name should be kept\n+     * @return The path of the file\n+     * @throws URISyntaxException if response path can't be converted into URI\n+     */\n+    @PostMapping(\"/markdown-file-upload\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA')\")\n+    public ResponseEntity<String> saveMarkdownFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f2b48b81471e9967db0a3a4158ac90a58af5da"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDcwNjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNTozMVrOGy7etQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNTozMVrOGy7etQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NjUwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ResponseEntity<String> saveFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName) throws URISyntaxException {\n          \n          \n            \n                public ResponseEntity<String> saveFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(defaultValue = \"false\") boolean keepFileName) throws URISyntaxException {", "url": "https://github.com/ls1intum/Artemis/pull/1883#discussion_r456056501", "createdAt": "2020-07-16T20:25:31Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileResource.java", "diffHunk": "@@ -92,60 +93,8 @@ public FileResource(FileService fileService, ResourceLoader resourceLoader, Lect\n     @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR', 'TA')\")\n     public ResponseEntity<String> saveFile(@RequestParam(value = \"file\") MultipartFile file, @RequestParam(\"keepFileName\") Boolean keepFileName) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f2b48b81471e9967db0a3a4158ac90a58af5da"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4777, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}