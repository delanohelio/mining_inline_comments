{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NjIyODkw", "number": 1170, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNjo0Mzo1MFrODZASrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDozMDoxM1rODgpFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQ1Nzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/TeamParticipation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNjo0Mzo1MFrOFfLWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTozMzowNlrOFfiCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzNjA2OA==", "bodyText": "This and methods below are completely duplicated from StudentParticipation class. Can we avoid this?", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368236068", "createdAt": "2020-01-18T16:43:50Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/TeamParticipation.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.Hibernate;\n+\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n+import de.tum.in.www1.artemis.domain.team.Team;\n+import de.tum.in.www1.artemis.domain.view.QuizView;\n+\n+@Entity\n+@DiscriminatorValue(value = \"TP\")\n+public class TeamParticipation extends Participation {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"presentation_score\")\n+    private Integer presentationScore;\n+\n+    @ManyToOne\n+    @JsonView(QuizView.Before.class)\n+    private Team team;\n+\n+    public Integer getPresentationScore() {\n+        return presentationScore;\n+    }\n+\n+    public TeamParticipation presentationScore(Integer presentationScore) {\n+        this.presentationScore = presentationScore;\n+        return this;\n+    }\n+\n+    public void setPresentationScore(Integer presentationScore) {\n+        this.presentationScore = presentationScore;\n+    }\n+\n+    public Team getTeam() {\n+        return team;\n+    }\n+\n+    public Participation team(Team team) {\n+        this.team = team;\n+        return this;\n+    }\n+\n+    public void setTeam(Team team) {\n+        this.team = team;\n+    }\n+\n+    public Exercise getExercise() {\n+        return exercise;\n+    }\n+\n+    public TeamParticipation exercise(Exercise exercise) {\n+        this.exercise = exercise;\n+        return this;\n+    }\n+\n+    public void setExercise(Exercise exercise) {\n+        this.exercise = exercise;\n+    }\n+\n+    /**\n+     * Removes the team from the participation, can be invoked to make sure that sensitive information is not sent to the client. E.g. tutors should not see information about\n+     * the team.\n+     */\n+    public void filterSensitiveInformation() {\n+        setTeam(null);\n+    }\n+\n+    private <T extends Submission> Optional<T> findLatestSubmissionOfType(Class<T> submissionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNzg1OA==", "bodyText": "I was able to avoid the duplication by introducing a new abstract class ParticipantParticipation.\nThe name seems a bit forced but I couldn't think of anything better that would capture the essence of both StudentParticipation and TeamParticipation but does not include e.g. TutorParticipation. Alternatives that I dismissed were UserParticipation (would include TutorParticipation, StudentsParticipation (too similar to StudentParticipation, could cause confusion), BaseStudentParticipation, AbstractStudentParticipation (the last two would be feasible in my opinion but this kind of naming scheme isn't really used in the codebase so far). Let me know if you have a better idea regarding the naming.\nParticipantParticipation includes all the shared code while the subclasses implement the differences.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368607858", "createdAt": "2020-01-20T15:33:06Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/TeamParticipation.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.Hibernate;\n+\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n+import de.tum.in.www1.artemis.domain.team.Team;\n+import de.tum.in.www1.artemis.domain.view.QuizView;\n+\n+@Entity\n+@DiscriminatorValue(value = \"TP\")\n+public class TeamParticipation extends Participation {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"presentation_score\")\n+    private Integer presentationScore;\n+\n+    @ManyToOne\n+    @JsonView(QuizView.Before.class)\n+    private Team team;\n+\n+    public Integer getPresentationScore() {\n+        return presentationScore;\n+    }\n+\n+    public TeamParticipation presentationScore(Integer presentationScore) {\n+        this.presentationScore = presentationScore;\n+        return this;\n+    }\n+\n+    public void setPresentationScore(Integer presentationScore) {\n+        this.presentationScore = presentationScore;\n+    }\n+\n+    public Team getTeam() {\n+        return team;\n+    }\n+\n+    public Participation team(Team team) {\n+        this.team = team;\n+        return this;\n+    }\n+\n+    public void setTeam(Team team) {\n+        this.team = team;\n+    }\n+\n+    public Exercise getExercise() {\n+        return exercise;\n+    }\n+\n+    public TeamParticipation exercise(Exercise exercise) {\n+        this.exercise = exercise;\n+        return this;\n+    }\n+\n+    public void setExercise(Exercise exercise) {\n+        this.exercise = exercise;\n+    }\n+\n+    /**\n+     * Removes the team from the participation, can be invoked to make sure that sensitive information is not sent to the client. E.g. tutors should not see information about\n+     * the team.\n+     */\n+    public void filterSensitiveInformation() {\n+        setTeam(null);\n+    }\n+\n+    private <T extends Submission> Optional<T> findLatestSubmissionOfType(Class<T> submissionType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzNjA2OA=="}, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQ3NTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNzozMjo0M1rOFfLfSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxOTowMDoxNlrOFfLwhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODQxMQ==", "bodyText": "I guess here you can set the default value, so you will not have to set in the test helper classes. Also as far as I understand it can't be set to null.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368238411", "createdAt": "2020-01-18T17:32:43Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -96,6 +94,14 @@\n     @Column(name = \"difficulty\")\n     private DifficultyLevel difficulty;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"mode\")\n+    private ExerciseMode mode;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"team_scope\")\n+    private TeamScope teamScope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MjgyMw==", "bodyText": "This is no longer relevant since the field has been removed (Stephan and I discussed that teams will always exist on an exercise scope for now. This might be extended back again at a later point).", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368242823", "createdAt": "2020-01-18T19:00:16Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -96,6 +94,14 @@\n     @Column(name = \"difficulty\")\n     private DifficultyLevel difficulty;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"mode\")\n+    private ExerciseMode mode;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"team_scope\")\n+    private TeamScope teamScope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODQxMQ=="}, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQ3ODI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ProgrammingExerciseTeamParticipation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNzo0MDoxMVrOFfLglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDoxMjoyN1rOFf7WIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODc0Mg==", "bodyText": "All the methods below copy the ones from ProgrammingExerciseStudentParticipation. Can you move them out to a separate class and use them in both classes?", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368238742", "createdAt": "2020-01-18T17:40:11Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ProgrammingExerciseTeamParticipation.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.view.QuizView;\n+\n+@Entity\n+@DiscriminatorValue(value = \"PETP\")\n+public class ProgrammingExerciseTeamParticipation extends TeamParticipation implements ProgrammingExerciseParticipation {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"repository_url\")\n+    @JsonView(QuizView.Before.class)\n+    private String repositoryUrl;\n+\n+    @Column(name = \"build_plan_id\")\n+    @JsonView(QuizView.Before.class)\n+    private String buildPlanId;\n+\n+    public String getRepositoryUrl() {\n+        return repositoryUrl;\n+    }\n+\n+    public Participation repositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+        return this;\n+    }\n+\n+    public void setRepositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+    }\n+\n+    public String getBuildPlanId() {\n+        return buildPlanId;\n+    }\n+\n+    public Participation buildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+        return this;\n+    }\n+\n+    public void setBuildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+    }\n+\n+    /**\n+     * @return the repository URL as an URL Object\n+     */\n+    @JsonIgnore\n+    public URL getRepositoryUrlAsUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzE3NQ==", "bodyText": "I think in this case we'll have to bite the bullet and live with the code duplication since multiple inheritance is not really supported in Java. If we were to extract out the shared code into a new abstract class ProgrammingExerciseParticipantParticipation, the class ProgrammingExerciseStudentParticipation would need to inherit from both the new class and from StudentParticipation (the case for ProgrammingExerciseTeamParticipation is analogous).\nWe actually already have this exact case in the current codebase: It is \"solved\" by having the interface ProgrammingExerciseParticipation that gets implemented by ProgrammingExerciseStudentParticipation, SolutionProgrammingExerciseParticipation and TemplateProgrammingExerciseParticipation. These three classes all pretty much duplicate the same code. Consistency is enforced via the interface but the code duplication can't really be avoided unfortunately :/", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368613175", "createdAt": "2020-01-20T15:43:48Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ProgrammingExerciseTeamParticipation.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.view.QuizView;\n+\n+@Entity\n+@DiscriminatorValue(value = \"PETP\")\n+public class ProgrammingExerciseTeamParticipation extends TeamParticipation implements ProgrammingExerciseParticipation {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"repository_url\")\n+    @JsonView(QuizView.Before.class)\n+    private String repositoryUrl;\n+\n+    @Column(name = \"build_plan_id\")\n+    @JsonView(QuizView.Before.class)\n+    private String buildPlanId;\n+\n+    public String getRepositoryUrl() {\n+        return repositoryUrl;\n+    }\n+\n+    public Participation repositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+        return this;\n+    }\n+\n+    public void setRepositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+    }\n+\n+    public String getBuildPlanId() {\n+        return buildPlanId;\n+    }\n+\n+    public Participation buildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+        return this;\n+    }\n+\n+    public void setBuildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+    }\n+\n+    /**\n+     * @return the repository URL as an URL Object\n+     */\n+    @JsonIgnore\n+    public URL getRepositoryUrlAsUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODc0Mg=="}, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2NTA2Mg==", "bodyText": "Yes, but we could still solve this problem. Java has default interface methods, which were originally introduced in order to provide backwards compatibility when adding new methods to interfaces. Normally, one should use an abstract class in most cases for default implementations. However, since we already have this interesting \"ProgrammingExerciseParticipation interface solution\" here, you could move all of this code into default methods in the interface.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368765062", "createdAt": "2020-01-21T00:18:58Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ProgrammingExerciseTeamParticipation.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.view.QuizView;\n+\n+@Entity\n+@DiscriminatorValue(value = \"PETP\")\n+public class ProgrammingExerciseTeamParticipation extends TeamParticipation implements ProgrammingExerciseParticipation {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"repository_url\")\n+    @JsonView(QuizView.Before.class)\n+    private String repositoryUrl;\n+\n+    @Column(name = \"build_plan_id\")\n+    @JsonView(QuizView.Before.class)\n+    private String buildPlanId;\n+\n+    public String getRepositoryUrl() {\n+        return repositoryUrl;\n+    }\n+\n+    public Participation repositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+        return this;\n+    }\n+\n+    public void setRepositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+    }\n+\n+    public String getBuildPlanId() {\n+        return buildPlanId;\n+    }\n+\n+    public Participation buildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+        return this;\n+    }\n+\n+    public void setBuildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+    }\n+\n+    /**\n+     * @return the repository URL as an URL Object\n+     */\n+    @JsonIgnore\n+    public URL getRepositoryUrlAsUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODc0Mg=="}, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMjQ5Nw==", "bodyText": "By all of this code do you mean getRepositoryUrlAsUrl? I think most of the other code can't be moved since default methods in interfaces can't access instance variables.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r369022497", "createdAt": "2020-01-21T14:12:27Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ProgrammingExerciseTeamParticipation.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonView;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.view.QuizView;\n+\n+@Entity\n+@DiscriminatorValue(value = \"PETP\")\n+public class ProgrammingExerciseTeamParticipation extends TeamParticipation implements ProgrammingExerciseParticipation {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"repository_url\")\n+    @JsonView(QuizView.Before.class)\n+    private String repositoryUrl;\n+\n+    @Column(name = \"build_plan_id\")\n+    @JsonView(QuizView.Before.class)\n+    private String buildPlanId;\n+\n+    public String getRepositoryUrl() {\n+        return repositoryUrl;\n+    }\n+\n+    public Participation repositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+        return this;\n+    }\n+\n+    public void setRepositoryUrl(String repositoryUrl) {\n+        this.repositoryUrl = repositoryUrl;\n+    }\n+\n+    public String getBuildPlanId() {\n+        return buildPlanId;\n+    }\n+\n+    public Participation buildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+        return this;\n+    }\n+\n+    public void setBuildPlanId(String buildPlanId) {\n+        this.buildPlanId = buildPlanId;\n+    }\n+\n+    /**\n+     * @return the repository URL as an URL Object\n+     */\n+    @JsonIgnore\n+    public URL getRepositoryUrlAsUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODc0Mg=="}, "originalCommit": {"oid": "6df0ec43b5f05e27a4dec2bcac6be02f17e94b33"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODEyNzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjowODo1MVrOFfjJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzowNDoyNVrOFf5Nlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjA4Mw==", "bodyText": "Can there be any other exercise modes besides team or individual in the future. Otherwise, we might only need a boolean here.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368626083", "createdAt": "2020-01-20T16:08:51Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -96,6 +94,10 @@\n     @Column(name = \"difficulty\")\n     private DifficultyLevel difficulty;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"mode\")\n+    private ExerciseMode mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017d843fd116d8a26a0fec6b1dc8426964262083"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NzU0Mg==", "bodyText": "I could imagine a couple of other exercises modes that might come up in the future, so I picked an enum to be on the safe side, also since the downside is pretty low in my opinion.\nPossible (but probably far out) scenarios for other exercise modes:\n\nsupervised (each student or team gets a tutor assigned as a mentor)\npublic (students work individually but submissions can be seen by everyone)", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368987542", "createdAt": "2020-01-21T13:04:25Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -96,6 +94,10 @@\n     @Column(name = \"difficulty\")\n     private DifficultyLevel difficulty;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"mode\")\n+    private ExerciseMode mode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjA4Mw=="}, "originalCommit": {"oid": "017d843fd116d8a26a0fec6b1dc8426964262083"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTAyODY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Team.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMDowMDo0M1rOFfrd0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjo0NDoxMVrOFf4qZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2MjMyMg==", "bodyText": "I think you should make this a bidirectional relation, so that you can easily fetch all teams for a user. So, in User.java:\n@ManyToMany(mappedBy = \"students\")\n@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\nprivate Set<Team> teams;", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368762322", "createdAt": "2020-01-21T00:00:43Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Team.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+/**\n+ * A Team of students.\n+ */\n+@Entity\n+@Table(name = \"team\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"discriminator\", discriminatorType = DiscriminatorType.STRING)\n+@DiscriminatorValue(value = \"T\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Team implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"image\")\n+    private String image;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JoinTable(name = \"team_student\", joinColumns = @JoinColumn(name = \"team_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"student_id\", referencedColumnName = \"id\"))\n+    private Set<User> students = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017d843fd116d8a26a0fec6b1dc8426964262083"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk3ODUzMw==", "bodyText": "I thought about this but I couldn't think of a use case for now where we would want to access all teams for a user, especially across exercises and courses. I think it's enough if I add that direction once the need arises.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368978533", "createdAt": "2020-01-21T12:44:11Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Team.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+/**\n+ * A Team of students.\n+ */\n+@Entity\n+@Table(name = \"team\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"discriminator\", discriminatorType = DiscriminatorType.STRING)\n+@DiscriminatorValue(value = \"T\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Team implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    @Column(name = \"image\")\n+    private String image;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JoinTable(name = \"team_student\", joinColumns = @JoinColumn(name = \"team_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"student_id\", referencedColumnName = \"id\"))\n+    private Set<User> students = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2MjMyMg=="}, "originalCommit": {"oid": "017d843fd116d8a26a0fec6b1dc8426964262083"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDU1Mzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ParticipantParticipation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyODoyNVrOFf55vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDoxMDozOVrOFf7SIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5ODg0NA==", "bodyText": "get rid of it", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r368998844", "createdAt": "2020-01-21T13:28:25Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ParticipantParticipation.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import org.hibernate.Hibernate;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n+\n+@Entity\n+@DiscriminatorValue(value = \"PP\")\n+public abstract class ParticipantParticipation extends Participation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017d843fd116d8a26a0fec6b1dc8426964262083"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMTQ3Mw==", "bodyText": "I got rid of ParticipantParticipation and moved the findLatest methods up from StudentParticipation into Participation.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r369021473", "createdAt": "2020-01-21T14:10:39Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/ParticipantParticipation.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package de.tum.in.www1.artemis.domain.participation;\n+\n+import java.util.Optional;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+import org.hibernate.Hibernate;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n+\n+@Entity\n+@DiscriminatorValue(value = \"PP\")\n+public abstract class ParticipantParticipation extends Participation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5ODg0NA=="}, "originalCommit": {"oid": "017d843fd116d8a26a0fec6b1dc8426964262083"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTQxNzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTo1NTo1N1rOFq78VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0NDo1OFrOFrHi2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjYxMw==", "bodyText": "You can use primitive bool here", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380566613", "createdAt": "2020-02-18T09:55:57Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -441,6 +504,10 @@ public Boolean isEnded() {\n         return ZonedDateTime.now().isAfter(getDueDate());\n     }\n \n+    public Boolean isTeamMode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae24f4e98840992601adf2d90b74b6ebf44c385"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NjY5Nw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380756697", "createdAt": "2020-02-18T15:44:58Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -441,6 +504,10 @@ public Boolean isEnded() {\n         return ZonedDateTime.now().isAfter(getDueDate());\n     }\n \n+    public Boolean isTeamMode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjYxMw=="}, "originalCommit": {"oid": "bae24f4e98840992601adf2d90b74b6ebf44c385"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTQ2Mjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/TeamRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDowODoyM1rOFq8YWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0NToxMFrOFrHjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3Mzc4NQ==", "bodyText": "I believe this should not be necessary.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380573785", "createdAt": "2020-02-18T10:08:23Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/TeamRepository.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Team;\n+\n+/**\n+ * Spring Data repository for the Team entity.\n+ */\n+@SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99f579b8236644449937f37f8050cceb2852fee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1Njg0Mw==", "bodyText": "Removed", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380756843", "createdAt": "2020-02-18T15:45:10Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/TeamRepository.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Team;\n+\n+/**\n+ * Spring Data repository for the Team entity.\n+ */\n+@SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3Mzc4NQ=="}, "originalCommit": {"oid": "b99f579b8236644449937f37f8050cceb2852fee"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTQ5OTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDoxODo0NVrOFq8uug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0NToxOFrOFrHj0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3OTUxNA==", "bodyText": "PUT mapping should have an id that you refer to https://restfulapi.net/resource-naming/", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380579514", "createdAt": "2020-02-18T10:18:45Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Team;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.TeamRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Teams.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class TeamResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(TeamResource.class);\n+\n+    public static final String ENTITY_NAME = \"team\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final TeamRepository teamRepository;\n+\n+    private final TeamService teamService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final UserService userService;\n+\n+    public TeamResource(TeamRepository teamRepository, TeamService teamService, ExerciseService exerciseService, UserService userService,\n+            AuthorizationCheckService authCheckService) {\n+        this.teamRepository = teamRepository;\n+        this.teamService = teamService;\n+        this.exerciseService = exerciseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * POST /exercises/{exerciseId}/teams : Create a new team for an exercise.\n+     *\n+     * @param team the team to create\n+     * @param exerciseId the exercise id for which to create a team\n+     * @return the ResponseEntity with status 201 (Created) and with body the new team, or with status 400 (Bad Request) if the team already has an ID\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/exercises/{exerciseId}/teams\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Team> createTeam(@RequestBody Team team, @PathVariable Long exerciseId) throws URISyntaxException {\n+        log.debug(\"REST request to save Team : {}\", team);\n+        if (team.getId() != null) {\n+            throw new BadRequestAlertException(\"A new team cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+        Team result = teamService.save(exercise, team);\n+        return ResponseEntity.created(new URI(\"/api/teams/\" + result.getId()))\n+                .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString())).body(result);\n+    }\n+\n+    /**\n+     * PUT /teams : Updates an existing team.\n+     *\n+     * @param team the team to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated team, or with status 400 (Bad Request) if the team is not valid, or with status 500 (Internal\n+     * Server Error) if the team couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/teams\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99f579b8236644449937f37f8050cceb2852fee"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1Njk0NQ==", "bodyText": "Changed", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380756945", "createdAt": "2020-02-18T15:45:18Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Team;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.TeamRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Teams.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class TeamResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(TeamResource.class);\n+\n+    public static final String ENTITY_NAME = \"team\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final TeamRepository teamRepository;\n+\n+    private final TeamService teamService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final UserService userService;\n+\n+    public TeamResource(TeamRepository teamRepository, TeamService teamService, ExerciseService exerciseService, UserService userService,\n+            AuthorizationCheckService authCheckService) {\n+        this.teamRepository = teamRepository;\n+        this.teamService = teamService;\n+        this.exerciseService = exerciseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * POST /exercises/{exerciseId}/teams : Create a new team for an exercise.\n+     *\n+     * @param team the team to create\n+     * @param exerciseId the exercise id for which to create a team\n+     * @return the ResponseEntity with status 201 (Created) and with body the new team, or with status 400 (Bad Request) if the team already has an ID\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/exercises/{exerciseId}/teams\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Team> createTeam(@RequestBody Team team, @PathVariable Long exerciseId) throws URISyntaxException {\n+        log.debug(\"REST request to save Team : {}\", team);\n+        if (team.getId() != null) {\n+            throw new BadRequestAlertException(\"A new team cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Exercise exercise = exerciseService.findOne(exerciseId);\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(exercise, user)) {\n+            return forbidden();\n+        }\n+        Team result = teamService.save(exercise, team);\n+        return ResponseEntity.created(new URI(\"/api/teams/\" + result.getId()))\n+                .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString())).body(result);\n+    }\n+\n+    /**\n+     * PUT /teams : Updates an existing team.\n+     *\n+     * @param team the team to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated team, or with status 400 (Bad Request) if the team is not valid, or with status 500 (Internal\n+     * Server Error) if the team couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/teams\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3OTUxNA=="}, "originalCommit": {"oid": "b99f579b8236644449937f37f8050cceb2852fee"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTU0MDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDozMDoxM1rOFq9H8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0NToyOFrOFrHkPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTk3MA==", "bodyText": "You can change all path variables to primitive types, as they can't be null anyways.", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380585970", "createdAt": "2020-02-18T10:30:13Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Team;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.TeamRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Teams.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class TeamResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(TeamResource.class);\n+\n+    public static final String ENTITY_NAME = \"team\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final TeamRepository teamRepository;\n+\n+    private final TeamService teamService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final UserService userService;\n+\n+    public TeamResource(TeamRepository teamRepository, TeamService teamService, ExerciseService exerciseService, UserService userService,\n+            AuthorizationCheckService authCheckService) {\n+        this.teamRepository = teamRepository;\n+        this.teamService = teamService;\n+        this.exerciseService = exerciseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * POST /exercises/{exerciseId}/teams : Create a new team for an exercise.\n+     *\n+     * @param team the team to create\n+     * @param exerciseId the exercise id for which to create a team\n+     * @return the ResponseEntity with status 201 (Created) and with body the new team, or with status 400 (Bad Request) if the team already has an ID\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/exercises/{exerciseId}/teams\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Team> createTeam(@RequestBody Team team, @PathVariable Long exerciseId) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99f579b8236644449937f37f8050cceb2852fee"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NzA1NA==", "bodyText": "Changed", "url": "https://github.com/ls1intum/Artemis/pull/1170#discussion_r380757054", "createdAt": "2020-02-18T15:45:28Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Team;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.TeamRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Teams.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class TeamResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(TeamResource.class);\n+\n+    public static final String ENTITY_NAME = \"team\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final TeamRepository teamRepository;\n+\n+    private final TeamService teamService;\n+\n+    private final ExerciseService exerciseService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final UserService userService;\n+\n+    public TeamResource(TeamRepository teamRepository, TeamService teamService, ExerciseService exerciseService, UserService userService,\n+            AuthorizationCheckService authCheckService) {\n+        this.teamRepository = teamRepository;\n+        this.teamService = teamService;\n+        this.exerciseService = exerciseService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+    }\n+\n+    /**\n+     * POST /exercises/{exerciseId}/teams : Create a new team for an exercise.\n+     *\n+     * @param team the team to create\n+     * @param exerciseId the exercise id for which to create a team\n+     * @return the ResponseEntity with status 201 (Created) and with body the new team, or with status 400 (Bad Request) if the team already has an ID\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/exercises/{exerciseId}/teams\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Team> createTeam(@RequestBody Team team, @PathVariable Long exerciseId) throws URISyntaxException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTk3MA=="}, "originalCommit": {"oid": "b99f579b8236644449937f37f8050cceb2852fee"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 168, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}