{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjI3OTY1", "number": 1995, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMTo0OVrOEVdhhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjowOFrOEVdyiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM5MjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMTo0OVrOG8OotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMTo0OVrOG8OotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n          \n          \n            \n                    if (programmingExercise.isPresent()) {\n          \n          \n            \n                        return programmingExercise.get();\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        throw new EntityNotFoundException(\"programming exercise not found\");\n          \n          \n            \n                    }\n          \n          \n            \n                    return programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId)\n          \n          \n            \n                        .orElseThrow(() -> new EntityNotFoundException(\"programming exercise not found\"));", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465807540", "createdAt": "2020-08-05T15:21:49Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseService.java", "diffHunk": "@@ -480,6 +485,23 @@ public ProgrammingExercise findByIdWithEagerStudentParticipations(long programmi\n         }\n     }\n \n+    /**\n+     * Find a programming exercise by its id, with eagerly loaded studentParticipations, template and solution participation\n+     *\n+     * @param programmingExerciseId of the programming exercise.\n+     * @return The programming exercise related to the given id\n+     * @throws EntityNotFoundException the programming exercise could not be found.\n+     */\n+    public ProgrammingExercise findByIdWithAllParticipations(long programmingExerciseId) throws EntityNotFoundException {\n+        Optional<ProgrammingExercise> programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId);\n+        if (programmingExercise.isPresent()) {\n+            return programmingExercise.get();\n+        }\n+        else {\n+            throw new EntityNotFoundException(\"programming exercise not found\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTQxMjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyNjozNFrOG8O1ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo1NzoxMVrOG8Wimg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMDg1MQ==", "bodyText": "If I run this while an exercise is still open: Would this discard changes in the online code editor?", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465810851", "createdAt": "2020-08-05T15:26:34Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNzA1MA==", "bodyText": "no, this is done in a separate path REPO_DOWNLOAD_CLONE_PATH", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465937050", "createdAt": "2020-08-05T18:57:11Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMDg1MQ=="}, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTQzMTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMDo1MlrOG8PBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMDo1MlrOG8PBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMzgxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n          \n          \n            \n                            : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n          \n          \n            \n                    var outputFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey + \"-\" + output;", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465813819", "createdAt": "2020-08-05T15:30:52Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state\n+\n+                // TODO: offer the following options in the client\n+                // 1) filter empty submissions, i.e. repositories with no student commits\n+                // 2) filter submissions with a result score of 0%\n+\n+                repo.close();\n+            }\n+            catch (GitException | GitAPIException | InterruptedException ex) {\n+                log.error(\"clone student repository \" + programmingExerciseParticipation.getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                        + \"' did not work as expected: \" + ex.getMessage());\n+            }\n+        });\n+\n+        var output = \"output\";\n+        var templateRepoName = \"\";\n+        // clone the template repo\n+        try {\n+            Repository templateRepo = gitService.getOrCheckoutRepository(programmingExercise.getTemplateParticipation(), REPO_DOWNLOAD_CLONE_PATH);\n+            templateRepoName = versionControlService.get().getRepositorySlugFromUrl(programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl());\n+            gitService.resetToOriginMaster(templateRepo); // start with clean state\n+            templateRepo.close();\n+        }\n+        catch (GitException | GitAPIException | InterruptedException ex) {\n+            log.error(\"clone template repository \" + programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                    + \"' did not work as expected: \" + ex.getMessage());\n+        }\n+\n+        var projectKey = programmingExercise.getProjectKey();\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n+                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTQzNjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjowOFrOG8PEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjowOFrOG8PEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNDY2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var repoFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey;\n          \n          \n            \n                    var repoFolder = REPO_DOWNLOAD_CLONE_PATH + (REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? \"\" : File.separator) + projectKey;", "url": "https://github.com/ls1intum/Artemis/pull/1995#discussion_r465814669", "createdAt": "2020-08-05T15:32:08Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseExportService.java", "diffHunk": "@@ -149,6 +157,116 @@ private void deleteTempZipRepoFiles(List<Path> pathsToZipeedRepos) {\n         }\n     }\n \n+    /**\n+     * downloads all repos of the exercise and runs JPlag\n+     *\n+     * @param programmingExerciseId the id of the programming exercises which should be checked\n+     * @return a zip file that can be returned to the client\n+     * @throws ExitException is thrown if JPlag exits unexpectedly\n+     * @throws IOException is thrown for file handling errors\n+     */\n+    public File checkPlagiarism(long programmingExerciseId) throws ExitException, IOException {\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findWithAllParticipationsById(programmingExerciseId).get();\n+\n+        programmingExercise.getStudentParticipations().parallelStream().forEach(participation -> {\n+            var programmingExerciseParticipation = (ProgrammingExerciseParticipation) participation;\n+            try {\n+                if (programmingExerciseParticipation.getRepositoryUrlAsUrl() == null) {\n+                    log.warn(\"Ignore participation \" + participation.getId() + \" for export, because its repository URL is null\");\n+                    return;\n+                }\n+                Repository repo = gitService.getOrCheckoutRepository(programmingExerciseParticipation, REPO_DOWNLOAD_CLONE_PATH);\n+                gitService.resetToOriginMaster(repo); // start with clean state\n+\n+                // TODO: offer the following options in the client\n+                // 1) filter empty submissions, i.e. repositories with no student commits\n+                // 2) filter submissions with a result score of 0%\n+\n+                repo.close();\n+            }\n+            catch (GitException | GitAPIException | InterruptedException ex) {\n+                log.error(\"clone student repository \" + programmingExerciseParticipation.getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                        + \"' did not work as expected: \" + ex.getMessage());\n+            }\n+        });\n+\n+        var output = \"output\";\n+        var templateRepoName = \"\";\n+        // clone the template repo\n+        try {\n+            Repository templateRepo = gitService.getOrCheckoutRepository(programmingExercise.getTemplateParticipation(), REPO_DOWNLOAD_CLONE_PATH);\n+            templateRepoName = versionControlService.get().getRepositorySlugFromUrl(programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl());\n+            gitService.resetToOriginMaster(templateRepo); // start with clean state\n+            templateRepo.close();\n+        }\n+        catch (GitException | GitAPIException | InterruptedException ex) {\n+            log.error(\"clone template repository \" + programmingExercise.getTemplateParticipation().getRepositoryUrlAsUrl() + \" in exercise '\" + programmingExercise.getTitle()\n+                    + \"' did not work as expected: \" + ex.getMessage());\n+        }\n+\n+        var projectKey = programmingExercise.getProjectKey();\n+        var outputFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey + \"-\" + output\n+                : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey + \"-\" + output;\n+\n+        File outputFolderFile = new File(outputFolder);\n+        outputFolderFile.mkdirs();\n+\n+        var programmingLanguage = \"\";\n+        switch (programmingExercise.getProgrammingLanguage()) {\n+            case JAVA:\n+                programmingLanguage = \"java19\";\n+                break;\n+            case C:\n+                programmingLanguage = \"c\";\n+                break;\n+            case PYTHON:\n+                programmingLanguage = \"python3\";\n+                break;\n+        }\n+\n+        var repoFolder = REPO_DOWNLOAD_CLONE_PATH.endsWith(File.separator) ? REPO_DOWNLOAD_CLONE_PATH + projectKey : REPO_DOWNLOAD_CLONE_PATH + File.separator + projectKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202db9899161f18be9e38be9c3788fc62bd7a68"}, "originalPosition": 188}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4832, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}