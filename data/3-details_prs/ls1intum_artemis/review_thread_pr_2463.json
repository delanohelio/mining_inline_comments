{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NzA5Mzkx", "number": 2463, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoxMjo1N1rOE-iZCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyMToxN1rOE-ij5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDEwNjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoxMjo1N1rOH7vwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDo0ODoxNVrOH8NP5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMDQ2Mg==", "bodyText": "Wrong class!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Logger log = LoggerFactory.getLogger(TextSubmissionService.class);\n          \n          \n            \n                private final Logger log = LoggerFactory.getLogger(RepositoryService.class);", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532410462", "createdAt": "2020-11-30T08:12:57Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "diffHunk": "@@ -36,6 +39,8 @@\n \n     private ProgrammingExerciseParticipationService programmingExerciseParticipationService;\n \n+    private final Logger log = LoggerFactory.getLogger(TextSubmissionService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyOTc2MA==", "bodyText": "Good catch!", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532729760", "createdAt": "2020-11-30T16:31:11Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "diffHunk": "@@ -36,6 +39,8 @@\n \n     private ProgrammingExerciseParticipationService programmingExerciseParticipationService;\n \n+    private final Logger log = LoggerFactory.getLogger(TextSubmissionService.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMDQ2Mg=="}, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5MzY2OA==", "bodyText": "Done in 28d558", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532893668", "createdAt": "2020-11-30T20:48:15Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "diffHunk": "@@ -36,6 +39,8 @@\n \n     private ProgrammingExerciseParticipationService programmingExerciseParticipationService;\n \n+    private final Logger log = LoggerFactory.getLogger(TextSubmissionService.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMDQ2Mg=="}, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDEyODM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoxOTozOVrOH7v9fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDo0OTowNVrOH8NRlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMzgyMA==", "bodyText": "Why do we need this loop? We already verified that the file is in that list, so I would argue that it can be deleted.\nConsider replacing templateRepoFiles and templateRepoFilesNames with a Map<String, File> instead?", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532413820", "createdAt": "2020-11-30T08:19:39Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "diffHunk": "@@ -82,6 +87,53 @@ public RepositoryService(GitService gitService, AuthorizationCheckService authCh\n         return fileInBytes;\n     }\n \n+    /**\n+     * Gets the files of the repository and checks whether they were changed during a student participation.\n+     * Compares the files from the students repository with the files of the template repository.\n+     *\n+     * @param repository the students repository with possibly new files and changed files\n+     * @param templateRepository the template repository with default files on which the student started working on\n+     * @return a map of files with the information if they were changed/are new.\n+     */\n+    public Map<String, Boolean> getFilesWithInformationAboutChange(Repository repository, Repository templateRepository) {\n+        Map<String, Boolean> filesWithInformationAboutChange = new HashMap<>();\n+\n+        var repoFiles = gitService.listFilesAndFolders(repository).entrySet().stream().filter(entry -> entry.getValue() == FileType.FILE).map(Map.Entry::getKey)\n+                .collect(Collectors.toList());\n+        var templateRepoFiles = gitService.listFilesAndFolders(templateRepository).entrySet().stream().filter(entry -> entry.getValue() == FileType.FILE).map(Map.Entry::getKey)\n+                .collect(Collectors.toList());\n+        // Used to avoid going through the loop when the file which the student added was not in the template repository\n+        var templateRepoFilesNames = templateRepoFiles.stream().map(File::toString).collect(Collectors.toList());\n+\n+        repoFiles.forEach(file -> {\n+            var fileName = file.toString();\n+            // When template repository does not contain this file it is new/changed, no need to iterate through the loop\n+            if (!templateRepoFilesNames.contains(fileName)) {\n+                filesWithInformationAboutChange.put(fileName, true);\n+            }\n+            else {\n+                templateRepoFiles.forEach(templateFile -> {\n+                    try {\n+                        // Check to assure we are comparing the correct files\n+                        if (file.toString().equalsIgnoreCase(templateFile.toString())) {\n+                            // When having the same content, it was not changed\n+                            if (FileUtils.contentEquals(file, templateFile)) {\n+                                filesWithInformationAboutChange.put(fileName, false);\n+                            }\n+                            else {\n+                                filesWithInformationAboutChange.put(fileName, true);\n+                            }\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5NDEwMw==", "bodyText": "Thank you, using a Map<String, File> was indeed better! Done in 28d558", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532894103", "createdAt": "2020-11-30T20:49:05Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RepositoryService.java", "diffHunk": "@@ -82,6 +87,53 @@ public RepositoryService(GitService gitService, AuthorizationCheckService authCh\n         return fileInBytes;\n     }\n \n+    /**\n+     * Gets the files of the repository and checks whether they were changed during a student participation.\n+     * Compares the files from the students repository with the files of the template repository.\n+     *\n+     * @param repository the students repository with possibly new files and changed files\n+     * @param templateRepository the template repository with default files on which the student started working on\n+     * @return a map of files with the information if they were changed/are new.\n+     */\n+    public Map<String, Boolean> getFilesWithInformationAboutChange(Repository repository, Repository templateRepository) {\n+        Map<String, Boolean> filesWithInformationAboutChange = new HashMap<>();\n+\n+        var repoFiles = gitService.listFilesAndFolders(repository).entrySet().stream().filter(entry -> entry.getValue() == FileType.FILE).map(Map.Entry::getKey)\n+                .collect(Collectors.toList());\n+        var templateRepoFiles = gitService.listFilesAndFolders(templateRepository).entrySet().stream().filter(entry -> entry.getValue() == FileType.FILE).map(Map.Entry::getKey)\n+                .collect(Collectors.toList());\n+        // Used to avoid going through the loop when the file which the student added was not in the template repository\n+        var templateRepoFilesNames = templateRepoFiles.stream().map(File::toString).collect(Collectors.toList());\n+\n+        repoFiles.forEach(file -> {\n+            var fileName = file.toString();\n+            // When template repository does not contain this file it is new/changed, no need to iterate through the loop\n+            if (!templateRepoFilesNames.contains(fileName)) {\n+                filesWithInformationAboutChange.put(fileName, true);\n+            }\n+            else {\n+                templateRepoFiles.forEach(templateFile -> {\n+                    try {\n+                        // Check to assure we are comparing the correct files\n+                        if (file.toString().equalsIgnoreCase(templateFile.toString())) {\n+                            // When having the same content, it was not changed\n+                            if (FileUtils.contentEquals(file, templateFile)) {\n+                                filesWithInformationAboutChange.put(fileName, false);\n+                            }\n+                            else {\n+                                filesWithInformationAboutChange.put(fileName, true);\n+                            }\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxMzgyMA=="}, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDEzNDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyMToxN1rOH7wA2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDo1Mzo0MFrOH8Na3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxNDY4Mg==", "bodyText": "How is a permission check performed here?", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532414682", "createdAt": "2020-11-30T08:21:17Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "diffHunk": "@@ -103,6 +103,28 @@ boolean canAccessRepository(Long participationId) throws IllegalArgumentExceptio\n         return super.getFiles(participationId);\n     }\n \n+    /**\n+     * GET /repository/{participationId}/files-change\n+     *\n+     * Gets the files of the repository and checks whether they were changed during a student participation with respect to the initial template\n+     *\n+     * @param participationId participation of the student\n+     * @return the ResponseEntity with status 200 (OK) and a map of files with the information if they were changed/are new.\n+     */\n+    @GetMapping(value = \"/repository/{participationId}/files-change\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Map<String, Boolean>> getFilesWithInformationAboutChange(@PathVariable Long participationId) {\n+        return super.executeAndCheckForExceptions(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5NjQ3Ng==", "bodyText": "@jpbernius in the getRepository() a few checks are done e.g. canAccessParticipation() in ProgrammingExerciseParticipationService.java:187 which checks if the user has the correct rights to view the participation.\nOr which specific checks do you mean?", "url": "https://github.com/ls1intum/Artemis/pull/2463#discussion_r532896476", "createdAt": "2020-11-30T20:53:40Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "diffHunk": "@@ -103,6 +103,28 @@ boolean canAccessRepository(Long participationId) throws IllegalArgumentExceptio\n         return super.getFiles(participationId);\n     }\n \n+    /**\n+     * GET /repository/{participationId}/files-change\n+     *\n+     * Gets the files of the repository and checks whether they were changed during a student participation with respect to the initial template\n+     *\n+     * @param participationId participation of the student\n+     * @return the ResponseEntity with status 200 (OK) and a map of files with the information if they were changed/are new.\n+     */\n+    @GetMapping(value = \"/repository/{participationId}/files-change\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Map<String, Boolean>> getFilesWithInformationAboutChange(@PathVariable Long participationId) {\n+        return super.executeAndCheckForExceptions(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxNDY4Mg=="}, "originalCommit": {"oid": "8823cd588bfa75231d78f80affd95ef443b61e86"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4278, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}