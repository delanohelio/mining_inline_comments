{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNjE0ODgy", "number": 2511, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0ODo0MVrOFFd_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDowMDowM1rOFGNNOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjc4NjgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/statistics.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0ODo0MVrOIF_gKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1NDoxM1rOIGHL5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NDIxOA==", "bodyText": "Why are those ALL CAPS? Maybe group those strings.", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r543154218", "createdAt": "2020-12-15T08:48:41Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/i18n/en/statistics.json", "diffHunk": "@@ -10,20 +10,21 @@\n         \"title\": \"User statistics\",\n         \"days\": \" days\",\n         \"loggedInUsers\": \"Amount of logins of distinct users in the last \",\n-        \"activeUsers\": \"Amount of logins of active users in the last \",\n         \"totalSubmissions\": \"Total amount of submissions in the last \",\n-        \"exercises\": {\n-            \"released\": \"Total amount of released exercises in the last \",\n-            \"due\": \"Total amount of exercise deadlines in the last \"\n-        },\n         \"conductedExams\": \"Total amount of conducted exams in the last \",\n         \"examParticipation\": \" -> amount of student who participated: \",\n         \"examRegistrations\": \" -> with the amount of students being registered in these exam: \",\n         \"activeTutors\": \"Total amount of tutors which have created an assessment in the last \",\n         \"results\": \"Total amount of results created in the last \",\n         \"resultFeedbacks\": \"-> feedback count: \",\n         \"userLogins\": \"User Logins\",\n-        \"submissions\": \"Submissions\"\n+        \"SUBMISSIONS\": \"Submissions\",\n+        \"ACTIVE_USERS\": \"Active users\",\n+        \"RELEASED_EXERCISES\": \"Released exercises\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871aba5cd219b2f30b93c6a278df2439e44ec95"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4MDEwMw==", "bodyText": "This was due to the fact that i reference these values via enums. I adjusted it, they are lowercase now (here)", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r543280103", "createdAt": "2020-12-15T11:54:13Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/i18n/en/statistics.json", "diffHunk": "@@ -10,20 +10,21 @@\n         \"title\": \"User statistics\",\n         \"days\": \" days\",\n         \"loggedInUsers\": \"Amount of logins of distinct users in the last \",\n-        \"activeUsers\": \"Amount of logins of active users in the last \",\n         \"totalSubmissions\": \"Total amount of submissions in the last \",\n-        \"exercises\": {\n-            \"released\": \"Total amount of released exercises in the last \",\n-            \"due\": \"Total amount of exercise deadlines in the last \"\n-        },\n         \"conductedExams\": \"Total amount of conducted exams in the last \",\n         \"examParticipation\": \" -> amount of student who participated: \",\n         \"examRegistrations\": \" -> with the amount of students being registered in these exam: \",\n         \"activeTutors\": \"Total amount of tutors which have created an assessment in the last \",\n         \"results\": \"Total amount of results created in the last \",\n         \"resultFeedbacks\": \"-> feedback count: \",\n         \"userLogins\": \"User Logins\",\n-        \"submissions\": \"Submissions\"\n+        \"SUBMISSIONS\": \"Submissions\",\n+        \"ACTIVE_USERS\": \"Active users\",\n+        \"RELEASED_EXERCISES\": \"Released exercises\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NDIxOA=="}, "originalCommit": {"oid": "b871aba5cd219b2f30b93c6a278df2439e44ec95"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjgyMTY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1NjoyOVrOIF_0zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1Mjo0MFrOIGHIgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTUwMg==", "bodyText": "As this is an admin-only feature, I'd restrict this endpoint to Admins only.", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r543159502", "createdAt": "2020-12-15T08:56:29Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "diffHunk": "@@ -27,146 +27,18 @@ public StatisticsResource(StatisticsService service) {\n     }\n \n     /**\n-     * GET management/statistics/users : get the amount of logged in user in the last \"span\" days.\n+     * GET management/statistics/data : get the graph data in the last \"span\" days in the given period.\n      *\n-     * @param span the period of which the amount should be calculated\n-     * @return the ResponseEntity with status 200 (OK) and the amount of users in body, or status 404 (Not Found)\n+     * @param span the spantime of which the amount should be calculated\n+     * @param periodIndex an index indicating which time period, 0 is current week, -1 is one week in the past, -2 is two weeks in the past ...\n+     * @param graphType the type of graph the data should be fetched\n+     * @return the ResponseEntity with status 200 (OK) and the data in body, or status 404 (Not Found)\n      */\n-    @GetMapping(\"management/statistics/users\")\n+    @GetMapping(\"management/statistics/data\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b871aba5cd219b2f30b93c6a278df2439e44ec95"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3OTIzMw==", "bodyText": "You are right, adjusted that in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r543279233", "createdAt": "2020-12-15T11:52:40Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StatisticsResource.java", "diffHunk": "@@ -27,146 +27,18 @@ public StatisticsResource(StatisticsService service) {\n     }\n \n     /**\n-     * GET management/statistics/users : get the amount of logged in user in the last \"span\" days.\n+     * GET management/statistics/data : get the graph data in the last \"span\" days in the given period.\n      *\n-     * @param span the period of which the amount should be calculated\n-     * @return the ResponseEntity with status 200 (OK) and the amount of users in body, or status 404 (Not Found)\n+     * @param span the spantime of which the amount should be calculated\n+     * @param periodIndex an index indicating which time period, 0 is current week, -1 is one week in the past, -2 is two weeks in the past ...\n+     * @param graphType the type of graph the data should be fetched\n+     * @return the ResponseEntity with status 200 (OK) and the data in body, or status 404 (Not Found)\n      */\n-    @GetMapping(\"management/statistics/users\")\n+    @GetMapping(\"management/statistics/data\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTUwMg=="}, "originalCommit": {"oid": "b871aba5cd219b2f30b93c6a278df2439e44ec95"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTM4NzA5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics-graph.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0MTozNFrOIG8Z4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMTo0MVrOIHAeBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MjAzNA==", "bodyText": "You can remove that comment, that's why there's @Input() \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544152034", "createdAt": "2020-12-16T09:41:34Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/admin/statistics/statistics-graph.component.ts", "diffHunk": "@@ -0,0 +1,215 @@\n+import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { Graphs, SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics-graph',\n+    templateUrl: './statistics-graph.component.html',\n+})\n+export class StatisticsGraphComponent implements OnInit, OnChanges {\n+    // Inputs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9d434a248d1a05c95d8ed774b028a720e5ff5b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxODYyOA==", "bodyText": "Done in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544218628", "createdAt": "2020-12-16T11:21:41Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics-graph.component.ts", "diffHunk": "@@ -0,0 +1,215 @@\n+import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { Graphs, SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics-graph',\n+    templateUrl: './statistics-graph.component.html',\n+})\n+export class StatisticsGraphComponent implements OnInit, OnChanges {\n+    // Inputs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MjAzNA=="}, "originalCommit": {"oid": "dc9d434a248d1a05c95d8ed774b028a720e5ff5b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTM5MzcyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/admin/statistics/statistics-graph.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0Mjo1M1rOIG8dvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMToxNFrOIHAc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MzAyMw==", "bodyText": "Is it intentional that lines 28-38 contain the public accessor (shouldn't they be private since it's implementation details)?", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544153023", "createdAt": "2020-12-16T09:42:53Z", "author": {"login": "ivanchimeno"}, "path": "src/main/webapp/app/admin/statistics/statistics-graph.component.ts", "diffHunk": "@@ -0,0 +1,215 @@\n+import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { Graphs, SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics-graph',\n+    templateUrl: './statistics-graph.component.html',\n+})\n+export class StatisticsGraphComponent implements OnInit, OnChanges {\n+    // Inputs\n+    @Input()\n+    graphType: Graphs;\n+    @Input()\n+    currentSpan: SpanType;\n+\n+    // html properties\n+    LEFT = false;\n+    RIGHT = true;\n+    SpanType = SpanType;\n+    Graphs = Graphs;\n+\n+    // Histogram related properties\n+    public barChartOptions: ChartOptions = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9d434a248d1a05c95d8ed774b028a720e5ff5b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxODM0Mw==", "bodyText": "I could argue with consistency, all our chart related variables are declared public. The compiler complains when stating the variable as private since it is used in the html template.I declare them package private now in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544218343", "createdAt": "2020-12-16T11:21:14Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/admin/statistics/statistics-graph.component.ts", "diffHunk": "@@ -0,0 +1,215 @@\n+import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\n+import { StatisticsService } from 'app/admin/statistics/statistics.service';\n+import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n+import { BaseChartDirective, Label } from 'ng2-charts';\n+import { DataSet } from 'app/exercises/quiz/manage/statistics/quiz-statistic/quiz-statistic.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import * as moment from 'moment';\n+import { Graphs, SpanType } from 'app/entities/statistics.model';\n+\n+@Component({\n+    selector: 'jhi-statistics-graph',\n+    templateUrl: './statistics-graph.component.html',\n+})\n+export class StatisticsGraphComponent implements OnInit, OnChanges {\n+    // Inputs\n+    @Input()\n+    graphType: Graphs;\n+    @Input()\n+    currentSpan: SpanType;\n+\n+    // html properties\n+    LEFT = false;\n+    RIGHT = true;\n+    SpanType = SpanType;\n+    Graphs = Graphs;\n+\n+    // Histogram related properties\n+    public barChartOptions: ChartOptions = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MzAyMw=="}, "originalCommit": {"oid": "dc9d434a248d1a05c95d8ed774b028a720e5ff5b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQ0MDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0Mjo1N1rOIHF5Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1MDoxMVrOIHJE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNzUxNQ==", "bodyText": "We already have a username variable, so why not use !usersInSameSlot.contains(username)) here?", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544307515", "createdAt": "2020-12-16T13:42:57Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1OTYzNg==", "bodyText": "true, adjusted that in this commit", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544359636", "createdAt": "2020-12-16T14:50:11Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNzUxNQ=="}, "originalCommit": {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQ1MDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0NDo1OVrOIHF-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0NDo1OVrOIHF-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwODk3Nw==", "bodyText": "Same here.", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544308977", "createdAt": "2020-12-16T13:44:59Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }\n+                }\n+                users.forEach((k, v) -> {\n+                    Map<String, Object> listElement = new HashMap<>();\n+                    listElement.put(\"day\", startDate.withHour(k));\n+                    listElement.put(\"amount\", (long) v.size());\n+                    returnList.add(listElement);\n+                });\n+            }\n+            case WEEK, MONTH -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n+                    // if this day is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getDayOfMonth(), usersInSameSlot);\n+                    }   // if the value of the map for this day does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQ1MDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0NTowOFrOIHF_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0NTowOFrOIHF_ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwOTA5Mw==", "bodyText": "And here.", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544309093", "createdAt": "2020-12-16T13:45:08Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n+        List<Map<String, Object>> returnList = new ArrayList<>();\n+        switch (span) {\n+            case DAY -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getHour());\n+                    // if this hour is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }   // if the value of the map for this hour does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getHour(), usersInSameSlot);\n+                    }\n+                }\n+                users.forEach((k, v) -> {\n+                    Map<String, Object> listElement = new HashMap<>();\n+                    listElement.put(\"day\", startDate.withHour(k));\n+                    listElement.put(\"amount\", (long) v.size());\n+                    returnList.add(listElement);\n+                });\n+            }\n+            case WEEK, MONTH -> {\n+                Map<Integer, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getDayOfMonth());\n+                    // if this day is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getDayOfMonth(), usersInSameSlot);\n+                    }   // if the value of the map for this day does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getDayOfMonth(), usersInSameSlot);\n+                    }\n+                }\n+                users.forEach((k, v) -> {\n+                    Map<String, Object> listElement = new HashMap<>();\n+                    listElement.put(\"day\", startDate.withDayOfMonth(k));\n+                    listElement.put(\"amount\", (long) v.size());\n+                    returnList.add(listElement);\n+                });\n+            }\n+            case YEAR -> {\n+                Map<Month, List<String>> users = new HashMap<>();\n+                for (Map<String, Object> listElement : result) {\n+                    ZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n+                    String username = listElement.get(\"username\").toString();\n+                    List<String> usersInSameSlot = users.get(date.getMonth());\n+                    // if this month is not yet existing in users\n+                    if (usersInSameSlot == null) {\n+                        usersInSameSlot = new ArrayList<>();\n+                        usersInSameSlot.add(username);\n+                        users.put(date.getMonth(), usersInSameSlot);\n+                    }   // if the value of the map for this month does not contain this username\n+                    else if (!usersInSameSlot.contains(\"\" + listElement.get(\"username\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208"}, "originalPosition": 351}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDUyMTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDowMDowM1rOIHGpTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1MjoyNlrOIHJMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxOTgyMg==", "bodyText": "This method really looks like it has some duplication. Can we do something like the following?\nprivate List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {\n\tList<Map<String, Object>> returnList = new ArrayList<>();\n\tMap<Integer, List<String>> users = new HashMap<>();\n\t\n\tfor (Map<String, Object> listElement : result) {\n\t\tObject index;\n\t\tZonedDateTime date = (ZonedDateTime) listElement.get(\"day\");\n\t\tif (span == DAY) {\n\t\t\tindex = date.getHour();\n\t\t} else if (span == WEEK || span == MONTH) {\n\t\t\tindex = date.getDayOfMonth();\n\t\t} else {\n\t\t\tindex = date.getMonth();\n\t\t}\n\n\t\tString username = listElement.get(\"username\").toString();\n\t\tList<String> usersInSameSlot = users.get(index);\n\t\tif (usersInSameSlot == null) {\n\t\t\tusersInSameSlot = new ArrayList<>();\n\t\t\tusersInSameSlot.add(username);\n\t\t\tusers.put(index, usersInSameSlot);\n\t\t} else if (!usersInSameSlot.contains(username))) {\n\t\t\tusersInSameSlot.add(username);\n\t\t\t// btw: I don't think we need to put this again here, since we're modifying the arraylist by reference?\n\t\t\t// users.put(index, usersInSameSlot);\n\t\t}\n\t}\n\tusers.forEach((k, v) -> {\n\t\tObject start;\n\t\tif (span == DAY) {\n\t\t\tstart = startDate.withHour(k);\n\t\t} else if (span == WEEK || span == MONTH) {\n\t\t\tstart = startDate.withDayOfMonth(k);\n\t\t} else {\n\t\t\tstart = startDate.withMonth(getMonthIndex(k));\n\t\t}\n\t\n\t\tMap<String, Object> listElement = new HashMap<>();\n\t\tlistElement.put(\"day\", start);\n\t\tlistElement.put(\"amount\", (long) v.size());\n\t\treturnList.add(listElement);\n\t});\n\t\n\treturn returnList;\n}", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544319822", "createdAt": "2020-12-16T14:00:03Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2MTU4Mw==", "bodyText": "Very nice idea with the index as Object, did not think of that. I adapted your suggestion a bit and implemented it here", "url": "https://github.com/ls1intum/Artemis/pull/2511#discussion_r544361583", "createdAt": "2020-12-16T14:52:26Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StatisticsService.java", "diffHunk": "@@ -139,56 +169,133 @@ public Integer getActiveUsers(Long span) {\n     }\n \n     /**\n-     * Gets a List of Maps, each Map describing an entry in the database. The Map has the two keys \"day\" and \"amount\",\n-     * which map to the date and the amount of submissions. This Method handles the spanType YEAR\n+     * Gets a list of maps, each map describing an entry in the database. The map has the two keys \"day\" and \"amount\",\n+     * which map to the date and the amount of the findings. This method handles the spanType YEAR\n      *\n      * @param outcome A List<Map<String, Object>>, containing the content which should be refactored into an array\n      * @param result the array in which the converted outcome should be inserted\n-     * @param currentDate the current time\n-     * @return a array, containing the values for each bar in the graph\n+     * @param endDate the endDate\n+     * @return an array, containing the values for each bar in the graph\n      */\n-    private Integer[] createSubmissionCountArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime currentDate) {\n+    private Integer[] createResultArrayForYear(List<Map<String, Object>> outcome, Integer[] result, ZonedDateTime endDate) {\n         for (Map<String, Object> map : outcome) {\n             ZonedDateTime date = (ZonedDateTime) map.get(\"day\");\n             Integer amount = map.get(\"amount\") != null ? ((Long) map.get(\"amount\")).intValue() : null;\n             for (int i = 0; i < 12; i++) {\n-                if (date.getMonth() == currentDate.minusMonths(i).getMonth() && date.getYear() == currentDate.minusMonths(i).getYear()) {\n+                if (date.getMonth() == endDate.minusMonths(i).getMonth()) {\n                     result[11 - i] += amount;\n                 }\n             }\n         }\n         return result;\n     }\n \n-    public Integer getReleasedExercises(Long span) {\n-        return this.statisticsRepository.getReleasedExercises(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExerciseDeadlines(Long span) {\n-        return this.statisticsRepository.getExerciseDeadlines(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getConductedExams(Long span) {\n-        return this.statisticsRepository.getConductedExams(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getExamParticipations(Long span) {\n-        return this.statisticsRepository.getExamParticipations(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getExamRegistrations(Long span) {\n-        return this.statisticsRepository.getExamRegistrations(ZonedDateTime.now().minusDays(span), ZonedDateTime.now());\n-    }\n-\n-    public Integer getActiveTutors(Long span) {\n-        return this.statisticsRepository.getActiveTutors(ZonedDateTime.now().minusDays(span));\n-    }\n-\n-    public Integer getCreatedResults(Long span) {\n-        return this.statisticsRepository.getCreatedResults(ZonedDateTime.now().minusDays(span));\n+    /**\n+    * This method handles the duplicity of usernames in the active user call. It gets a List<Map<String, Object>> analogue to previous methods, but instead of numbers in an amount key,\n+    * it contains a username key with the actual username as value. It then handles all the usernames and returns a List<Map<String, Object>>, but now with the the key \"amount\"\n+    * and value the number of users in this interval\n+    *\n+    * @param span DAY,WEEK,MONTH or YEAR\n+    * @param result the result given by the Repository call\n+    * @param startDate the startDate of the period\n+    * @return A List<Map<String, Object>> analogue to other database calls\n+    */\n+    private List<Map<String, Object>> convertMapList(SpanType span, List<Map<String, Object>> result, ZonedDateTime startDate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxOTgyMg=="}, "originalCommit": {"oid": "ac368e98fd1c308512f046a95b52609dbdfda208"}, "originalPosition": 288}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4308, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}