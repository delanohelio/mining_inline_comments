{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDk2NDkx", "number": 1699, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowOTowMFrOEIzb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowOTowMFrOEIzb2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY2Nzc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowOTowMFrOGo_MkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowOTowMFrOGo_MkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzMTYzMg==", "bodyText": "This should be deleted :D", "url": "https://github.com/ls1intum/Artemis/pull/1699#discussion_r445631632", "createdAt": "2020-06-25T15:09:00Z", "author": {"login": "anditurdiu"}, "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -190,33 +189,46 @@ public void testStartExercisesWithTextExercise() throws Exception {\n         exam2.setVisibleDate(ZonedDateTime.now().plusHours(1));\n \n         // creating exercise\n-        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(exam2.getStartDate(), exam2.getEndDate(), exam2.getEndDate().plusWeeks(2),\n-                exam2.getExerciseGroups().get(0));\n-        exam2.getExerciseGroups().get(0).addExercise(textExercise);\n-        exerciseGroupRepository.save(exam2.getExerciseGroups().get(0));\n+        ExerciseGroup exerciseGroup = exam2.getExerciseGroups().get(0);\n+\n+        TextExercise textExercise = ModelFactory.generateTextExerciseForExam(exam2.getStartDate(), exam2.getEndDate(), exam2.getEndDate().plusWeeks(2), exerciseGroup);\n+        exerciseGroup.addExercise(textExercise);\n+        exerciseGroupRepository.save(exerciseGroup);\n         textExercise = exerciseRepo.save(textExercise);\n \n+        List<StudentExam> createdStudentExams = new ArrayList<>();\n+\n         // creating student exams\n         for (User user : registeredUsers) {\n             StudentExam studentExam = new StudentExam();\n             studentExam.addExercise(textExercise);\n             studentExam.setUser(user);\n             exam2.addStudentExam(studentExam);\n-            studentExamRepository.save(studentExam);\n+            createdStudentExams.add(studentExamRepository.save(studentExam));\n         }\n \n         exam2 = examRepository.save(exam2);\n \n         // invoke start exercises\n-        List<Participation> participations = request.postListWithResponseBody(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam2.getId() + \"/student-exams/start-exercises\",\n-                Optional.empty(), Participation.class, HttpStatus.OK);\n-        assertThat(participations).hasSize(exam2.getStudentExams().size());\n-        for (Participation participation : participations) {\n+        Integer noGeneratedParticipations = request.postWithResponseBody(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam2.getId() + \"/student-exams/start-exercises\",\n+                Optional.empty(), Integer.class, HttpStatus.OK);\n+        assertThat(noGeneratedParticipations).isEqualTo(exam2.getStudentExams().size());\n+        List<Participation> studentParticipations = participationRepository.findAll();\n+\n+        for (Participation participation : studentParticipations) {\n             assertThat(participation.getExercise().equals(textExercise));\n             assertThat(participation.getExercise().getCourseViaExerciseGroupOrCourseMember() == null);\n             assertThat(participation.getExercise().getExerciseGroup() == exam2.getExerciseGroups().get(0));\n             // TODO: check that submissions have been created to the participations of text exercises\n         }\n+        System.out.println(\"Test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3991c3e7386413e5b37b6f7006fd1ca090f67e"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4908, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}