{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NzkyNDcx", "number": 2017, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMzo0MVrOEa1R-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1Njo1MlrOEbovbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTcxMzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/TestRepositoryResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzozMzo0MVrOHEfiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyNzoxM1rOHEiUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3Mjk5OA==", "bodyText": "Test", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r474472998", "createdAt": "2020-08-21T07:33:41Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/TestRepositoryResource.java", "diffHunk": "@@ -127,4 +134,52 @@ boolean canAccessRepository(Long exerciseId) {\n     public ResponseEntity<RepositoryStatusDTO> getStatus(@PathVariable Long exerciseId) throws GitAPIException, InterruptedException {\n         return super.getStatus(exerciseId);\n     }\n+\n+    /**\n+     * Update a list of files in a test repository based on the submission's content.\n+     *\n+     * @param exerciseId  of exercise to which the files belong\n+     * @param submissions information about the file updates\n+     * @param commit      whether to commit after updating the files\n+     * @param principal   used to check if the user can update the files\n+     * @return {Map<String, String>} file submissions or the appropriate http error\n+     */\n+    @PutMapping(\"/test-repository/{exerciseId}/files\")\n+    public ResponseEntity<Map<String, String>> updateTestFiles(@PathVariable(\"exerciseId\") Long exerciseId, @RequestBody List<FileSubmission> submissions,\n+            @RequestParam String commit, Principal principal) {\n+        ProgrammingExercise exercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n+        String testRepoName = exercise.getProjectKey().toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        if (versionControlService.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, \"VCSNotPresent\");\n+        }\n+        VcsRepositoryUrl testsRepoUrl = versionControlService.get().getCloneRepositoryUrl(exercise.getProjectKey(), testRepoName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573e37e8b6f6b2860d7eb0ed7468a721396b5a1a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxODY4NA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r474518684", "createdAt": "2020-08-21T08:27:13Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/TestRepositoryResource.java", "diffHunk": "@@ -127,4 +134,52 @@ boolean canAccessRepository(Long exerciseId) {\n     public ResponseEntity<RepositoryStatusDTO> getStatus(@PathVariable Long exerciseId) throws GitAPIException, InterruptedException {\n         return super.getStatus(exerciseId);\n     }\n+\n+    /**\n+     * Update a list of files in a test repository based on the submission's content.\n+     *\n+     * @param exerciseId  of exercise to which the files belong\n+     * @param submissions information about the file updates\n+     * @param commit      whether to commit after updating the files\n+     * @param principal   used to check if the user can update the files\n+     * @return {Map<String, String>} file submissions or the appropriate http error\n+     */\n+    @PutMapping(\"/test-repository/{exerciseId}/files\")\n+    public ResponseEntity<Map<String, String>> updateTestFiles(@PathVariable(\"exerciseId\") Long exerciseId, @RequestBody List<FileSubmission> submissions,\n+            @RequestParam String commit, Principal principal) {\n+        ProgrammingExercise exercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n+        String testRepoName = exercise.getProjectKey().toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n+        if (versionControlService.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, \"VCSNotPresent\");\n+        }\n+        VcsRepositoryUrl testsRepoUrl = versionControlService.get().getCloneRepositoryUrl(exercise.getProjectKey(), testRepoName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3Mjk5OA=="}, "originalCommit": {"oid": "573e37e8b6f6b2860d7eb0ed7468a721396b5a1a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTYwNTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwOTo1Nzo0OFrOHFEOsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo1NzoxNVrOHFo8TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDIyNQ==", "bodyText": "Why do you pass this as a String? I think we should use Boolean instead. Alternatively you could leave it as a string and map it into a Boolean value afterwards", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475074225", "createdAt": "2020-08-22T09:57:48Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "diffHunk": "@@ -158,12 +145,13 @@ boolean canAccessRepository(Long participationId) throws IllegalArgumentExceptio\n      *\n      * @param participationId id of participation to which the files belong\n      * @param submissions     information about the file updates\n+     * @param commit          whether to commit after updating the files\n      * @param principal       used to check if the user can update the files\n      * @return {Map<String, String>} file submissions or the appropriate http error\n      */\n     @PutMapping(value = \"/repository/{participationId}/files\")\n     public ResponseEntity<Map<String, String>> updateParticipationFiles(@PathVariable(\"participationId\") Long participationId, @RequestBody List<FileSubmission> submissions,\n-            Principal principal) {\n+            @RequestParam String commit, Principal principal) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe2aae1968355bfb53958da34c1817958592923"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3NTcyNA==", "bodyText": "Changed it to Boolean", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475675724", "createdAt": "2020-08-24T14:57:15Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "diffHunk": "@@ -158,12 +145,13 @@ boolean canAccessRepository(Long participationId) throws IllegalArgumentExceptio\n      *\n      * @param participationId id of participation to which the files belong\n      * @param submissions     information about the file updates\n+     * @param commit          whether to commit after updating the files\n      * @param principal       used to check if the user can update the files\n      * @return {Map<String, String>} file submissions or the appropriate http error\n      */\n     @PutMapping(value = \"/repository/{participationId}/files\")\n     public ResponseEntity<Map<String, String>> updateParticipationFiles(@PathVariable(\"participationId\") Long participationId, @RequestBody List<FileSubmission> submissions,\n-            Principal principal) {\n+            @RequestParam String commit, Principal principal) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDIyNQ=="}, "originalCommit": {"oid": "4fe2aae1968355bfb53958da34c1817958592923"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTYwNTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwOTo1ODoyNVrOHFEOzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo1NzoyNlrOHFo9Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDI1Mw==", "bodyText": "I would suggest to compare a Boolean here", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475074253", "createdAt": "2020-08-22T09:58:25Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "diffHunk": "@@ -208,87 +200,15 @@ boolean canAccessRepository(Long participationId) throws IllegalArgumentExceptio\n             throw new ResponseStatusException(HttpStatus.FORBIDDEN, error.getMessage(), error);\n         }\n         Map<String, String> fileSaveResult = saveFileSubmissions(submissions, repository);\n-        return ResponseEntity.ok(fileSaveResult);\n-    }\n \n-    /**\n-     * Update a list of files in a test repository based on the submission's content.\n-     *\n-     * @param exerciseId  of exercise to which the files belong\n-     * @param submissions information about the file updates\n-     * @param principal   used to check if the user can update the files\n-     * @return {Map<String, String>} file submissions or the appropriate http error\n-     */\n-    @PutMapping(value = \"/test-repository/\" + \"{exerciseId}\" + \"/files\")\n-    public ResponseEntity<Map<String, String>> updateTestFiles(@PathVariable(\"exerciseId\") Long exerciseId, @RequestBody List<FileSubmission> submissions, Principal principal) {\n-        ProgrammingExercise exercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n-        String testRepoName = exercise.getProjectKey().toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n-        if (versionControlService.isEmpty()) {\n-            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, \"VCSNotPresent\");\n-        }\n-        VcsRepositoryUrl testsRepoUrl = versionControlService.get().getCloneRepositoryUrl(exercise.getProjectKey(), testRepoName);\n-\n-        Repository repository;\n-        try {\n-            repository = repositoryService.checkoutRepositoryByName(principal, exercise, testsRepoUrl.getURL());\n-        }\n-        catch (IllegalAccessException e) {\n-            FileSubmissionError error = new FileSubmissionError(exerciseId, \"noPermissions\");\n-            throw new ResponseStatusException(HttpStatus.FORBIDDEN, error.getMessage(), error);\n-        }\n-        catch (CheckoutConflictException | WrongRepositoryStateException ex) {\n-            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutConflict\");\n-            throw new ResponseStatusException(HttpStatus.CONFLICT, error.getMessage(), error);\n-        }\n-        catch (GitAPIException | InterruptedException ex) {\n-            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutFailed\");\n-            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, error.getMessage(), error);\n-        }\n-        Map<String, String> fileSaveResult = saveFileSubmissions(submissions, repository);\n-        return ResponseEntity.ok(fileSaveResult);\n-    }\n-\n-    /**\n-     * Iterate through the file submissions and try to save each one. Will continue iterating when an error is encountered on updating a file and store it's error in the resulting\n-     * Map.\n-     *\n-     * @param submissions the file submissions (changes) that should be saved in the repository\n-     * @param repository the git repository in which the file changes should be saved\n-     * @return a map of <filename, error | null>\n-     */\n-    private Map<String, String> saveFileSubmissions(List<FileSubmission> submissions, Repository repository) {\n-        // If updating the file fails due to an IOException, we send an error message for the specific file and try to update the rest\n-        Map<String, String> fileSaveResult = new HashMap<>();\n-        submissions.forEach((submission) -> {\n-            try {\n-                fetchAndUpdateFile(submission, repository);\n-                fileSaveResult.put(submission.getFileName(), null);\n-            }\n-            catch (IOException ex) {\n-                fileSaveResult.put(submission.getFileName(), ex.getMessage());\n+        if (\"true\".equals(commit)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe2aae1968355bfb53958da34c1817958592923"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3NTk3NA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475675974", "createdAt": "2020-08-24T14:57:26Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryProgrammingExerciseParticipationResource.java", "diffHunk": "@@ -208,87 +200,15 @@ boolean canAccessRepository(Long participationId) throws IllegalArgumentExceptio\n             throw new ResponseStatusException(HttpStatus.FORBIDDEN, error.getMessage(), error);\n         }\n         Map<String, String> fileSaveResult = saveFileSubmissions(submissions, repository);\n-        return ResponseEntity.ok(fileSaveResult);\n-    }\n \n-    /**\n-     * Update a list of files in a test repository based on the submission's content.\n-     *\n-     * @param exerciseId  of exercise to which the files belong\n-     * @param submissions information about the file updates\n-     * @param principal   used to check if the user can update the files\n-     * @return {Map<String, String>} file submissions or the appropriate http error\n-     */\n-    @PutMapping(value = \"/test-repository/\" + \"{exerciseId}\" + \"/files\")\n-    public ResponseEntity<Map<String, String>> updateTestFiles(@PathVariable(\"exerciseId\") Long exerciseId, @RequestBody List<FileSubmission> submissions, Principal principal) {\n-        ProgrammingExercise exercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n-        String testRepoName = exercise.getProjectKey().toLowerCase() + \"-\" + RepositoryType.TESTS.getName();\n-        if (versionControlService.isEmpty()) {\n-            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, \"VCSNotPresent\");\n-        }\n-        VcsRepositoryUrl testsRepoUrl = versionControlService.get().getCloneRepositoryUrl(exercise.getProjectKey(), testRepoName);\n-\n-        Repository repository;\n-        try {\n-            repository = repositoryService.checkoutRepositoryByName(principal, exercise, testsRepoUrl.getURL());\n-        }\n-        catch (IllegalAccessException e) {\n-            FileSubmissionError error = new FileSubmissionError(exerciseId, \"noPermissions\");\n-            throw new ResponseStatusException(HttpStatus.FORBIDDEN, error.getMessage(), error);\n-        }\n-        catch (CheckoutConflictException | WrongRepositoryStateException ex) {\n-            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutConflict\");\n-            throw new ResponseStatusException(HttpStatus.CONFLICT, error.getMessage(), error);\n-        }\n-        catch (GitAPIException | InterruptedException ex) {\n-            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutFailed\");\n-            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, error.getMessage(), error);\n-        }\n-        Map<String, String> fileSaveResult = saveFileSubmissions(submissions, repository);\n-        return ResponseEntity.ok(fileSaveResult);\n-    }\n-\n-    /**\n-     * Iterate through the file submissions and try to save each one. Will continue iterating when an error is encountered on updating a file and store it's error in the resulting\n-     * Map.\n-     *\n-     * @param submissions the file submissions (changes) that should be saved in the repository\n-     * @param repository the git repository in which the file changes should be saved\n-     * @return a map of <filename, error | null>\n-     */\n-    private Map<String, String> saveFileSubmissions(List<FileSubmission> submissions, Repository repository) {\n-        // If updating the file fails due to an IOException, we send an error message for the specific file and try to update the rest\n-        Map<String, String> fileSaveResult = new HashMap<>();\n-        submissions.forEach((submission) -> {\n-            try {\n-                fetchAndUpdateFile(submission, repository);\n-                fileSaveResult.put(submission.getFileName(), null);\n-            }\n-            catch (IOException ex) {\n-                fileSaveResult.put(submission.getFileName(), ex.getMessage());\n+        if (\"true\".equals(commit)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDI1Mw=="}, "originalCommit": {"oid": "4fe2aae1968355bfb53958da34c1817958592923"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTYwNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/TestRepositoryResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxMDowMDoxNFrOHFEPWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo1NzozMFrOHFo9jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDM5NA==", "bodyText": "See above", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475074394", "createdAt": "2020-08-22T10:00:14Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/TestRepositoryResource.java", "diffHunk": "@@ -127,4 +132,51 @@ boolean canAccessRepository(Long exerciseId) {\n     public ResponseEntity<RepositoryStatusDTO> getStatus(@PathVariable Long exerciseId) throws GitAPIException, InterruptedException {\n         return super.getStatus(exerciseId);\n     }\n+\n+    /**\n+     * Update a list of files in a test repository based on the submission's content.\n+     *\n+     * @param exerciseId  of exercise to which the files belong\n+     * @param submissions information about the file updates\n+     * @param commit      whether to commit after updating the files\n+     * @param principal   used to check if the user can update the files\n+     * @return {Map<String, String>} file submissions or the appropriate http error\n+     */\n+    @PutMapping(\"/test-repository/{exerciseId}/files\")\n+    public ResponseEntity<Map<String, String>> updateTestFiles(@PathVariable(\"exerciseId\") Long exerciseId, @RequestBody List<FileSubmission> submissions,\n+            @RequestParam String commit, Principal principal) {\n+        ProgrammingExercise exercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n+\n+        if (versionControlService.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, \"VCSNotPresent\");\n+        }\n+\n+        Repository repository;\n+        try {\n+            repository = repositoryService.checkoutRepositoryByName(principal, exercise, exercise.getTestRepositoryUrlAsUrl());\n+        }\n+        catch (IllegalAccessException e) {\n+            FileSubmissionError error = new FileSubmissionError(exerciseId, \"noPermissions\");\n+            throw new ResponseStatusException(HttpStatus.FORBIDDEN, error.getMessage(), error);\n+        }\n+        catch (CheckoutConflictException | WrongRepositoryStateException ex) {\n+            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutConflict\");\n+            throw new ResponseStatusException(HttpStatus.CONFLICT, error.getMessage(), error);\n+        }\n+        catch (GitAPIException | InterruptedException ex) {\n+            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutFailed\");\n+            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, error.getMessage(), error);\n+        }\n+        Map<String, String> fileSaveResult = saveFileSubmissions(submissions, repository);\n+\n+        if (\"true\".equals(commit)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe2aae1968355bfb53958da34c1817958592923"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3NjA0Nw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475676047", "createdAt": "2020-08-24T14:57:30Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/TestRepositoryResource.java", "diffHunk": "@@ -127,4 +132,51 @@ boolean canAccessRepository(Long exerciseId) {\n     public ResponseEntity<RepositoryStatusDTO> getStatus(@PathVariable Long exerciseId) throws GitAPIException, InterruptedException {\n         return super.getStatus(exerciseId);\n     }\n+\n+    /**\n+     * Update a list of files in a test repository based on the submission's content.\n+     *\n+     * @param exerciseId  of exercise to which the files belong\n+     * @param submissions information about the file updates\n+     * @param commit      whether to commit after updating the files\n+     * @param principal   used to check if the user can update the files\n+     * @return {Map<String, String>} file submissions or the appropriate http error\n+     */\n+    @PutMapping(\"/test-repository/{exerciseId}/files\")\n+    public ResponseEntity<Map<String, String>> updateTestFiles(@PathVariable(\"exerciseId\") Long exerciseId, @RequestBody List<FileSubmission> submissions,\n+            @RequestParam String commit, Principal principal) {\n+        ProgrammingExercise exercise = programmingExerciseService.findWithTemplateParticipationAndSolutionParticipationById(exerciseId);\n+\n+        if (versionControlService.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, \"VCSNotPresent\");\n+        }\n+\n+        Repository repository;\n+        try {\n+            repository = repositoryService.checkoutRepositoryByName(principal, exercise, exercise.getTestRepositoryUrlAsUrl());\n+        }\n+        catch (IllegalAccessException e) {\n+            FileSubmissionError error = new FileSubmissionError(exerciseId, \"noPermissions\");\n+            throw new ResponseStatusException(HttpStatus.FORBIDDEN, error.getMessage(), error);\n+        }\n+        catch (CheckoutConflictException | WrongRepositoryStateException ex) {\n+            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutConflict\");\n+            throw new ResponseStatusException(HttpStatus.CONFLICT, error.getMessage(), error);\n+        }\n+        catch (GitAPIException | InterruptedException ex) {\n+            FileSubmissionError error = new FileSubmissionError(exerciseId, \"checkoutFailed\");\n+            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, error.getMessage(), error);\n+        }\n+        Map<String, String> fileSaveResult = saveFileSubmissions(submissions, repository);\n+\n+        if (\"true\".equals(commit)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDM5NA=="}, "originalCommit": {"oid": "4fe2aae1968355bfb53958da34c1817958592923"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDE0NTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1Njo1MlrOHFrmvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyOToxMFrOHFs2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxOTM1OQ==", "bodyText": "I would suggest to use\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InputStream inputStream = new ByteArrayInputStream(submission.getFileContent().getBytes(StandardCharsets.UTF_8));\n          \n          \n            \n                    Files.copy(inputStream, file.get().toPath(), StandardCopyOption.REPLACE_EXISTING);\n          \n          \n            \n                    inputStream.close();\n          \n          \n            \n                    Files.writeString(file.get().toPath(), submission.getFileContent());\n          \n      \n    \n    \n  \n\nunless we have a good reason to use copy here (we should add a comment then).", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475719359", "createdAt": "2020-08-24T15:56:52Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryResource.java", "diffHunk": "@@ -302,4 +315,47 @@ abstract Repository getRepository(Long domainId, RepositoryActionType repository\n         }\n         return responseEntitySuccess;\n     }\n+\n+    /**\n+     * Iterate through the file submissions and try to save each one. Will continue iterating when an error is encountered on updating a file and store it's error in the resulting\n+     * Map.\n+     *\n+     * @param submissions the file submissions (changes) that should be saved in the repository\n+     * @param repository the git repository in which the file changes should be saved\n+     * @return a map of <filename, error | null>\n+     */\n+    protected Map<String, String> saveFileSubmissions(List<FileSubmission> submissions, Repository repository) {\n+        // If updating the file fails due to an IOException, we send an error message for the specific file and try to update the rest\n+        Map<String, String> fileSaveResult = new HashMap<>();\n+        submissions.forEach((submission) -> {\n+            try {\n+                fetchAndUpdateFile(submission, repository);\n+                fileSaveResult.put(submission.getFileName(), null);\n+            }\n+            catch (IOException ex) {\n+                fileSaveResult.put(submission.getFileName(), ex.getMessage());\n+            }\n+        });\n+        return fileSaveResult;\n+    }\n+\n+    /**\n+     * Retrieve the file from repository and update its content with the submission's content. Throws exceptions if the user doesn't have permissions, the file can't be retrieved\n+     * or it can't be updated.\n+     *\n+     * @param submission information about file update\n+     * @param repository repository in which to fetch and update the file\n+     * @throws IOException exception when the file in the file submission parameter is empty\n+     */\n+    private void fetchAndUpdateFile(FileSubmission submission, Repository repository) throws IOException {\n+        Optional<File> file = gitService.getFileByName(repository, submission.getFileName());\n+\n+        if (file.isEmpty()) {\n+            throw new IOException(\"File could not be found.\");\n+        }\n+\n+        InputStream inputStream = new ByteArrayInputStream(submission.getFileContent().getBytes(StandardCharsets.UTF_8));\n+        Files.copy(inputStream, file.get().toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        inputStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4ffb17e023d2257586c4efd90a27054fce8d0a5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTc1NQ==", "bodyText": "I haven't changed or written this code. Since this is unrelated to this pr, I'm gonna close this.", "url": "https://github.com/ls1intum/Artemis/pull/2017#discussion_r475739755", "createdAt": "2020-08-24T16:29:10Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/repository/RepositoryResource.java", "diffHunk": "@@ -302,4 +315,47 @@ abstract Repository getRepository(Long domainId, RepositoryActionType repository\n         }\n         return responseEntitySuccess;\n     }\n+\n+    /**\n+     * Iterate through the file submissions and try to save each one. Will continue iterating when an error is encountered on updating a file and store it's error in the resulting\n+     * Map.\n+     *\n+     * @param submissions the file submissions (changes) that should be saved in the repository\n+     * @param repository the git repository in which the file changes should be saved\n+     * @return a map of <filename, error | null>\n+     */\n+    protected Map<String, String> saveFileSubmissions(List<FileSubmission> submissions, Repository repository) {\n+        // If updating the file fails due to an IOException, we send an error message for the specific file and try to update the rest\n+        Map<String, String> fileSaveResult = new HashMap<>();\n+        submissions.forEach((submission) -> {\n+            try {\n+                fetchAndUpdateFile(submission, repository);\n+                fileSaveResult.put(submission.getFileName(), null);\n+            }\n+            catch (IOException ex) {\n+                fileSaveResult.put(submission.getFileName(), ex.getMessage());\n+            }\n+        });\n+        return fileSaveResult;\n+    }\n+\n+    /**\n+     * Retrieve the file from repository and update its content with the submission's content. Throws exceptions if the user doesn't have permissions, the file can't be retrieved\n+     * or it can't be updated.\n+     *\n+     * @param submission information about file update\n+     * @param repository repository in which to fetch and update the file\n+     * @throws IOException exception when the file in the file submission parameter is empty\n+     */\n+    private void fetchAndUpdateFile(FileSubmission submission, Repository repository) throws IOException {\n+        Optional<File> file = gitService.getFileByName(repository, submission.getFileName());\n+\n+        if (file.isEmpty()) {\n+            throw new IOException(\"File could not be found.\");\n+        }\n+\n+        InputStream inputStream = new ByteArrayInputStream(submission.getFileContent().getBytes(StandardCharsets.UTF_8));\n+        Files.copy(inputStream, file.get().toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        inputStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxOTM1OQ=="}, "originalCommit": {"oid": "a4ffb17e023d2257586c4efd90a27054fce8d0a5"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4627, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}