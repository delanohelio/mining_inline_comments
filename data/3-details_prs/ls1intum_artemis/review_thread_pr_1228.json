{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODI2NzIw", "number": 1228, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODowMjozN1rODejVkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowNzowMVrODe0McQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzYyODMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODowMjozN1rOFnwBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODoxN1rOFnyraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNTU0NA==", "bodyText": "Can you use primitive types here for returned result and parameter? https://crunchify.com/java-tip-wherever-possible-try-to-use-primitive-types-instead-of-wrapper-classes/", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377225544", "createdAt": "2020-02-10T18:02:37Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -110,4 +110,13 @@\n     @EntityGraph(attributePaths = { \"submissions\", \"submissions.result\", \"submissions.result.assessor\" })\n     @Query(\"select distinct p from StudentParticipation p left join fetch p.submissions s where p.exercise.id = :#{#exerciseId} and (s.result.assessor.id = :#{#assessorId} and s.id = (select max(id) from p.submissions) or s.id = null)\")\n     List<StudentParticipation> findWithLatestSubmissionByExerciseAndAssessor(@Param(\"exerciseId\") Long exerciseId, @Param(\"assessorId\") Long assessorId);\n+\n+    /**\n+     * Count the number of submissions for each participation in a given exercise.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation\n+     */\n+    @Query(\"select participation.id, count(submissions) from StudentParticipation participation left join participation.submissions submissions where participation.exercise.id = :#{#exerciseId} group by participation.id\")\n+    List<Long[]> countSubmissionsPerParticipationByExerciseId(@Param(\"exerciseId\") Long exerciseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0be2459aa31cd995fae509f6836be80af901d2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTA5Nw==", "bodyText": "I switched to primitive types.", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377269097", "createdAt": "2020-02-10T19:28:17Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -110,4 +110,13 @@\n     @EntityGraph(attributePaths = { \"submissions\", \"submissions.result\", \"submissions.result.assessor\" })\n     @Query(\"select distinct p from StudentParticipation p left join fetch p.submissions s where p.exercise.id = :#{#exerciseId} and (s.result.assessor.id = :#{#assessorId} and s.id = (select max(id) from p.submissions) or s.id = null)\")\n     List<StudentParticipation> findWithLatestSubmissionByExerciseAndAssessor(@Param(\"exerciseId\") Long exerciseId, @Param(\"assessorId\") Long assessorId);\n+\n+    /**\n+     * Count the number of submissions for each participation in a given exercise.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation\n+     */\n+    @Query(\"select participation.id, count(submissions) from StudentParticipation participation left join participation.submissions submissions where participation.exercise.id = :#{#exerciseId} group by participation.id\")\n+    List<Long[]> countSubmissionsPerParticipationByExerciseId(@Param(\"exerciseId\") Long exerciseId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNTU0NA=="}, "originalCommit": {"oid": "eb0be2459aa31cd995fae509f6836be80af901d2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzYzOTM3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/participation/participation.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODowNjoyM1rOFnwILw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODoyNlrOFnyrww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNzMxMQ==", "bodyText": "You probably can remove the div here and do ngIf right on the <a> tag to make the structure leaner", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377227311", "createdAt": "2020-02-10T18:06:23Z", "author": {"login": "maxr96"}, "path": "src/main/webapp/app/entities/participation/participation.component.html", "diffHunk": "@@ -130,7 +139,28 @@ <h2>\n                     </ng-template>\n                 </ngx-datatable-column>\n \n-                <ngx-datatable-column prop=\"student\" [minWidth]=\"120\">\n+                <ngx-datatable-column [minWidth]=\"100\" [width]=\"110\">\n+                    <ng-template ngx-datatable-header-template>\n+                        <span class=\"datatable-header-cell-wrapper d-inline-block w-100 text-center\" (click)=\"controls.onSort('submissionCount')\">\n+                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.submissionCount\">\n+                                Submissions\n+                            </span>\n+                            <fa-icon [icon]=\"controls.iconForSortPropField('submissionCount')\"></fa-icon>\n+                        </span>\n+                    </ng-template>\n+                    <ng-template ngx-datatable-cell-template let-value=\"row\">\n+                        <div class=\"text-center\">\n+                            <div *ngIf=\"exercise.isAtLeastInstructor; else displayTextOnly\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0be2459aa31cd995fae509f6836be80af901d2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTE4Nw==", "bodyText": "Good point, done.", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377269187", "createdAt": "2020-02-10T19:28:26Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/entities/participation/participation.component.html", "diffHunk": "@@ -130,7 +139,28 @@ <h2>\n                     </ng-template>\n                 </ngx-datatable-column>\n \n-                <ngx-datatable-column prop=\"student\" [minWidth]=\"120\">\n+                <ngx-datatable-column [minWidth]=\"100\" [width]=\"110\">\n+                    <ng-template ngx-datatable-header-template>\n+                        <span class=\"datatable-header-cell-wrapper d-inline-block w-100 text-center\" (click)=\"controls.onSort('submissionCount')\">\n+                            <span class=\"datatable-header-cell-label bold sortable\" jhiTranslate=\"artemisApp.exercise.submissionCount\">\n+                                Submissions\n+                            </span>\n+                            <fa-icon [icon]=\"controls.iconForSortPropField('submissionCount')\"></fa-icon>\n+                        </span>\n+                    </ng-template>\n+                    <ng-template ngx-datatable-cell-template let-value=\"row\">\n+                        <div class=\"text-center\">\n+                            <div *ngIf=\"exercise.isAtLeastInstructor; else displayTextOnly\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNzMxMQ=="}, "originalCommit": {"oid": "eb0be2459aa31cd995fae509f6836be80af901d2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzY0Mzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODowNzo0OVrOFnwKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODo0M1rOFnysVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNzk1NQ==", "bodyText": "This can also be a primitive type. The count should not be a null value, right?", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377227955", "createdAt": "2020-02-10T18:07:49Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "diffHunk": "@@ -85,6 +85,22 @@\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n     private Set<Submission> submissions = new HashSet<>();\n \n+    /**\n+     * This property stores the total number of submissions in this participation. Not stored in the database, computed dynamically and used in showing statistics to the user in\n+     * the exercise view.\n+     */\n+    @Transient\n+    @JsonProperty\n+    private Integer submissionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0be2459aa31cd995fae509f6836be80af901d2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTMzNQ==", "bodyText": "It will always be an actual int value. I switched it.", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377269335", "createdAt": "2020-02-10T19:28:43Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "diffHunk": "@@ -85,6 +85,22 @@\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n     private Set<Submission> submissions = new HashSet<>();\n \n+    /**\n+     * This property stores the total number of submissions in this participation. Not stored in the database, computed dynamically and used in showing statistics to the user in\n+     * the exercise view.\n+     */\n+    @Transient\n+    @JsonProperty\n+    private Integer submissionCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNzk1NQ=="}, "originalCommit": {"oid": "eb0be2459aa31cd995fae509f6836be80af901d2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDE5ODQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowODozNlrOFn1nhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTo1OTowNFrOFoC59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNzI1NA==", "bodyText": "I think this can be easier using .stream(toMap({})).", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377317254", "createdAt": "2020-02-10T21:08:36Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1013,4 +1013,21 @@ private boolean userHasPermissions(StudentParticipation participation) {\n     public List<StudentParticipation> findWithSubmissionsWithResultByStudentIdAndExercise(Long studentId, Set<Exercise> exercises) {\n         return studentParticipationRepository.findByStudentIdAndExerciseWithEagerSubmissionsResult(studentId, exercises);\n     }\n+\n+    /**\n+     * Get a mapping of participation ids to the number of submission for each participation.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation in the given exercise\n+     */\n+    public Map<Long, Integer> countSubmissionsPerParticipationByExerciseId(Long exerciseId) {\n+        List<long[]> submissionCountResults = studentParticipationRepository.countSubmissionsPerParticipationByExerciseId(exerciseId);\n+        Map<Long, Integer> map = new HashMap<Long, Integer>();\n+        submissionCountResults.forEach(submissionCountResult -> {\n+            Long participationId = submissionCountResult[0];\n+            Integer submissionCount = Math.toIntExact(submissionCountResult[1]);\n+            map.put(participationId, submissionCount);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNDk2Nw==", "bodyText": "Thanks, that does make it much shorter!", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377534967", "createdAt": "2020-02-11T09:59:04Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1013,4 +1013,21 @@ private boolean userHasPermissions(StudentParticipation participation) {\n     public List<StudentParticipation> findWithSubmissionsWithResultByStudentIdAndExercise(Long studentId, Set<Exercise> exercises) {\n         return studentParticipationRepository.findByStudentIdAndExerciseWithEagerSubmissionsResult(studentId, exercises);\n     }\n+\n+    /**\n+     * Get a mapping of participation ids to the number of submission for each participation.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation in the given exercise\n+     */\n+    public Map<Long, Integer> countSubmissionsPerParticipationByExerciseId(Long exerciseId) {\n+        List<long[]> submissionCountResults = studentParticipationRepository.countSubmissionsPerParticipationByExerciseId(exerciseId);\n+        Map<Long, Integer> map = new HashMap<Long, Integer>();\n+        submissionCountResults.forEach(submissionCountResult -> {\n+            Long participationId = submissionCountResult[0];\n+            Integer submissionCount = Math.toIntExact(submissionCountResult[1]);\n+            map.put(participationId, submissionCount);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNzI1NA=="}, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIwMjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxMDoxNFrOFn1qaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxMDoxNFrOFn1qaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNzk5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the number of submissions per participation\n          \n          \n            \n                 * @return Tuples of participation ids and number of submissions per participation", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377317992", "createdAt": "2020-02-10T21:10:14Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -110,4 +110,13 @@\n     @EntityGraph(attributePaths = { \"submissions\", \"submissions.result\", \"submissions.result.assessor\" })\n     @Query(\"select distinct p from StudentParticipation p left join fetch p.submissions s where p.exercise.id = :#{#exerciseId} and (s.result.assessor.id = :#{#assessorId} and s.id = (select max(id) from p.submissions) or s.id = null)\")\n     List<StudentParticipation> findWithLatestSubmissionByExerciseAndAssessor(@Param(\"exerciseId\") Long exerciseId, @Param(\"assessorId\") Long assessorId);\n+\n+    /**\n+     * Count the number of submissions for each participation in a given exercise.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIwNTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxMDo1OVrOFn1r5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo1NDo0M1rOFoMC4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODM3Mg==", "bodyText": "This got refactored from Result. Should we also update toString?", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377318372", "createdAt": "2020-02-10T21:10:59Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "diffHunk": "@@ -85,6 +85,22 @@\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n     private Set<Submission> submissions = new HashSet<>();\n \n+    /**\n+     * This property stores the total number of submissions in this participation. Not stored in the database, computed dynamically and used in showing statistics to the user in\n+     * the exercise view.\n+     */\n+    @Transient\n+    @JsonProperty\n+    private int submissionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyNjUxOQ==", "bodyText": "I added it to the toString method.", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377526519", "createdAt": "2020-02-11T09:43:01Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "diffHunk": "@@ -85,6 +85,22 @@\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n     private Set<Submission> submissions = new HashSet<>();\n \n+    /**\n+     * This property stores the total number of submissions in this participation. Not stored in the database, computed dynamically and used in showing statistics to the user in\n+     * the exercise view.\n+     */\n+    @Transient\n+    @JsonProperty\n+    private int submissionCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODM3Mg=="}, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjEyNw==", "bodyText": "Please use Integer, because this value might not be initialized", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377652127", "createdAt": "2020-02-11T14:02:59Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "diffHunk": "@@ -85,6 +85,22 @@\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n     private Set<Submission> submissions = new HashSet<>();\n \n+    /**\n+     * This property stores the total number of submissions in this participation. Not stored in the database, computed dynamically and used in showing statistics to the user in\n+     * the exercise view.\n+     */\n+    @Transient\n+    @JsonProperty\n+    private int submissionCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODM3Mg=="}, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NDcwNA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377684704", "createdAt": "2020-02-11T14:54:43Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/participation/Participation.java", "diffHunk": "@@ -85,6 +85,22 @@\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n     private Set<Submission> submissions = new HashSet<>();\n \n+    /**\n+     * This property stores the total number of submissions in this participation. Not stored in the database, computed dynamically and used in showing statistics to the user in\n+     * the exercise view.\n+     */\n+    @Transient\n+    @JsonProperty\n+    private int submissionCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODM3Mg=="}, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDM5OTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxNTozM1rOFn3kVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTozOTozMVrOFoCR9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0OTIwNQ==", "bodyText": "Can you also change this Long exerciseId one to primitive type please?", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377349205", "createdAt": "2020-02-10T22:15:33Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1013,4 +1013,21 @@ private boolean userHasPermissions(StudentParticipation participation) {\n     public List<StudentParticipation> findWithSubmissionsWithResultByStudentIdAndExercise(Long studentId, Set<Exercise> exercises) {\n         return studentParticipationRepository.findByStudentIdAndExerciseWithEagerSubmissionsResult(studentId, exercises);\n     }\n+\n+    /**\n+     * Get a mapping of participation ids to the number of submission for each participation.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation in the given exercise\n+     */\n+    public Map<Long, Integer> countSubmissionsPerParticipationByExerciseId(Long exerciseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyNDcyNg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377524726", "createdAt": "2020-02-11T09:39:31Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1013,4 +1013,21 @@ private boolean userHasPermissions(StudentParticipation participation) {\n     public List<StudentParticipation> findWithSubmissionsWithResultByStudentIdAndExercise(Long studentId, Set<Exercise> exercises) {\n         return studentParticipationRepository.findByStudentIdAndExerciseWithEagerSubmissionsResult(studentId, exercises);\n     }\n+\n+    /**\n+     * Get a mapping of participation ids to the number of submission for each participation.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation in the given exercise\n+     */\n+    public Map<Long, Integer> countSubmissionsPerParticipationByExerciseId(Long exerciseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0OTIwNQ=="}, "originalCommit": {"oid": "751685a00dd3d49640e74ad789d39d39ecdff5a4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjM5MDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowNzowMVrOFoKMnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo1NjowM1rOFoMG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1NDQyOQ==", "bodyText": "please use a better variable name than t and add one natural language comment before such asa\nconvert the list of arrays (with 2 values: participatoinId, submissionCount) into a Map <participationIid -> submissionCount>", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377654429", "createdAt": "2020-02-11T14:07:01Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1011,4 +1011,15 @@ private boolean userHasPermissions(StudentParticipation participation) {\n     public List<StudentParticipation> findWithSubmissionsWithResultByStudentIdAndExercise(Long studentId, Set<Exercise> exercises) {\n         return studentParticipationRepository.findByStudentIdAndExerciseWithEagerSubmissionsResult(studentId, exercises);\n     }\n+\n+    /**\n+     * Get a mapping of participation ids to the number of submission for each participation.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation in the given exercise\n+     */\n+    public Map<Long, Integer> countSubmissionsPerParticipationByExerciseId(long exerciseId) {\n+        List<long[]> submissionCountTuples = studentParticipationRepository.countSubmissionsPerParticipationByExerciseId(exerciseId);\n+        return submissionCountTuples.stream().collect(Collectors.toMap(t -> t[0], t -> Math.toIntExact(t[1])));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2703390b04706e565b29f8363ff19c2f647f0b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NTcyOA==", "bodyText": "I decided to name it participationIdAndSubmissionCountPair instead of t and added the following comment:\n// convert List<[participationId, submissionCount]> into Map<participationId -> submissionCount>", "url": "https://github.com/ls1intum/Artemis/pull/1228#discussion_r377685728", "createdAt": "2020-02-11T14:56:03Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1011,4 +1011,15 @@ private boolean userHasPermissions(StudentParticipation participation) {\n     public List<StudentParticipation> findWithSubmissionsWithResultByStudentIdAndExercise(Long studentId, Set<Exercise> exercises) {\n         return studentParticipationRepository.findByStudentIdAndExerciseWithEagerSubmissionsResult(studentId, exercises);\n     }\n+\n+    /**\n+     * Get a mapping of participation ids to the number of submission for each participation.\n+     *\n+     * @param exerciseId the id of the exercise for which to consider participations\n+     * @return the number of submissions per participation in the given exercise\n+     */\n+    public Map<Long, Integer> countSubmissionsPerParticipationByExerciseId(long exerciseId) {\n+        List<long[]> submissionCountTuples = studentParticipationRepository.countSubmissionsPerParticipationByExerciseId(exerciseId);\n+        return submissionCountTuples.stream().collect(Collectors.toMap(t -> t[0], t -> Math.toIntExact(t[1])));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1NDQyOQ=="}, "originalCommit": {"oid": "ba2703390b04706e565b29f8363ff19c2f647f0b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 210, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}