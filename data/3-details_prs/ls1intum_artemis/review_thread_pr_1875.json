{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MzU1NTIy", "number": 1875, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozNzozNFrOEN9lCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzoxNjowM1rOEOCTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDc1ODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/exam-participation.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozNzozNFrOGw3ALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0MzoxNlrOGw69Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTk5OA==", "bodyText": "why are you doing this? Can you add some comments?", "url": "https://github.com/ls1intum/Artemis/pull/1875#discussion_r453885998", "createdAt": "2020-07-13T19:37:34Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/exam-participation.component.ts", "diffHunk": "@@ -191,6 +192,8 @@ export class ExamParticipationComponent implements OnInit, OnDestroy, ComponentC\n                         participation.submissions.forEach((submission) => {\n                             submission.isSynced = true;\n                         });\n+                    } else if (exercise.type === ExerciseType.PROGRAMMING) {\n+                        participation.submissions.push(new ProgrammingSubmission());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa32b7f9f00310d9f3376db5f9fa9119227b8aa"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgxOQ==", "bodyText": "We use the isSynced flag of the Submission  to show to appropriate status in the navigation bar header of the student exam conduction. Without this, the navigation bar header is not uploaded. For ProgrammingExercise's however, when the student first loads the student exam, programming exercises do not have a submission in their participation, even though their status is correctly set to 'initialised'.\nThis led to the navigation bar header status not being updated or set as there is no submission.\nAn easy way around this is to set an initial programming submission. This would be overridden as soon as the student commits something. After the user commits for the first time for a given exercise, the real submission is loaded.\nThe client never sends the submission to the server, the submission is created on the server using the results received from the CI server, therefore this approach should not cause any inconsistencies.", "url": "https://github.com/ls1intum/Artemis/pull/1875#discussion_r453950819", "createdAt": "2020-07-13T21:43:16Z", "author": {"login": "anditurdiu"}, "path": "src/main/webapp/app/exam/participate/exam-participation.component.ts", "diffHunk": "@@ -191,6 +192,8 @@ export class ExamParticipationComponent implements OnInit, OnDestroy, ComponentC\n                         participation.submissions.forEach((submission) => {\n                             submission.isSynced = true;\n                         });\n+                    } else if (exercise.type === ExerciseType.PROGRAMMING) {\n+                        participation.submissions.push(new ProgrammingSubmission());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTk5OA=="}, "originalCommit": {"oid": "4fa32b7f9f00310d9f3376db5f9fa9119227b8aa"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTUzMzI3OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/integration/code-editor/code-editor-student.integration.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzoxNjowM1rOGw99QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzoxNjowM1rOGw99QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5OTkzNg==", "bodyText": "Reason to edit test: This test expected the status to be uncommited_changes as we did not wait for a response from saveFiles called by commit. With the changes introduced, we wait for saveFiles to return before we commit. The commitState  is set to committing, after saving the changes, before sending the (commit) request to the server.", "url": "https://github.com/ls1intum/Artemis/pull/1875#discussion_r453999936", "createdAt": "2020-07-13T23:16:03Z", "author": {"login": "anditurdiu"}, "path": "src/test/javascript/spec/integration/code-editor/code-editor-student.integration.spec.ts", "diffHunk": "@@ -496,13 +496,11 @@ describe('CodeEditorStudentIntegration', () => {\n         expect(saveFilesStub).to.have.been.calledOnceWithExactly([{ fileName: unsavedFile, fileContent: 'lorem ipsum' }]);\n         expect(container.editorState).to.equal(EditorState.SAVING);\n         expect(container.fileBrowser.status.editorState).to.equal(EditorState.SAVING);\n-        expect(container.commitState).to.equal(CommitState.UNCOMMITTED_CHANGES);\n-        expect(container.fileBrowser.status.commitState).to.equal(CommitState.UNCOMMITTED_CHANGES);\n-        saveFilesSubject.next({ [unsavedFile]: null });\n-\n         // committing\n         expect(commitStub).to.have.been.calledOnce;\n         expect(container.commitState).to.equal(CommitState.COMMITTING);\n+        expect(container.fileBrowser.status.commitState).to.equal(CommitState.COMMITTING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfac560f56d4b82da63ec6bcb09b57da093b699"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4764, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}