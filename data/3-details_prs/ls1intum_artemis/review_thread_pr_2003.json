{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTcwNDc4", "number": 2003, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0MzowM1rOEV8t1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0NDozN1rOEV8vuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDUwMzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0MzowM1rOG8_1YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo1MDo1NlrOG9AF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMzYwMA==", "bodyText": "do we really need the part or result is null?\nWe cannot update a non existing result so we don't even need to fetch it from the database right?", "url": "https://github.com/ls1intum/Artemis/pull/2003#discussion_r466613600", "createdAt": "2020-08-06T18:43:03Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -68,6 +69,16 @@\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results result where participation.exercise.id = :#{#exerciseId} and (result.id = (select max(id) from participation.results) or result is null)\")\n     List<StudentParticipation> findByExerciseIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId);\n \n+    /**\n+     * Get all participations for an exercise with each latest {@link AssessmentType#AUTOMATIC} result (determined by id).\n+     * If there is no latest result (= no result at all), the participation will still be included in the returned ResultSet, but will have an empty Result array.\n+     *\n+     * @param exerciseId Exercise id.\n+     * @return participations for exercise.\n+     */\n+    @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results result where participation.exercise.id = :#{#exerciseId} and (result.id = (select max(prs.id) from participation.results prs where prs.assessmentType = 'AUTOMATIC') or result is null)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804e5427b0c5cb544e805f3ec7e3583003f95f55"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNDY4MA==", "bodyText": "I adapted that from the query above, but I guess we can also leave it out.", "url": "https://github.com/ls1intum/Artemis/pull/2003#discussion_r466614680", "createdAt": "2020-08-06T18:45:08Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -68,6 +69,16 @@\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results result where participation.exercise.id = :#{#exerciseId} and (result.id = (select max(id) from participation.results) or result is null)\")\n     List<StudentParticipation> findByExerciseIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId);\n \n+    /**\n+     * Get all participations for an exercise with each latest {@link AssessmentType#AUTOMATIC} result (determined by id).\n+     * If there is no latest result (= no result at all), the participation will still be included in the returned ResultSet, but will have an empty Result array.\n+     *\n+     * @param exerciseId Exercise id.\n+     * @return participations for exercise.\n+     */\n+    @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results result where participation.exercise.id = :#{#exerciseId} and (result.id = (select max(prs.id) from participation.results prs where prs.assessmentType = 'AUTOMATIC') or result is null)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMzYwMA=="}, "originalCommit": {"oid": "804e5427b0c5cb544e805f3ec7e3583003f95f55"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNzgyNw==", "bodyText": "I would leave it out for performance reasons. Or is typically not performant and we would filter those participations out later anyway", "url": "https://github.com/ls1intum/Artemis/pull/2003#discussion_r466617827", "createdAt": "2020-08-06T18:50:56Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -68,6 +69,16 @@\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results result where participation.exercise.id = :#{#exerciseId} and (result.id = (select max(id) from participation.results) or result is null)\")\n     List<StudentParticipation> findByExerciseIdWithLatestResult(@Param(\"exerciseId\") Long exerciseId);\n \n+    /**\n+     * Get all participations for an exercise with each latest {@link AssessmentType#AUTOMATIC} result (determined by id).\n+     * If there is no latest result (= no result at all), the participation will still be included in the returned ResultSet, but will have an empty Result array.\n+     *\n+     * @param exerciseId Exercise id.\n+     * @return participations for exercise.\n+     */\n+    @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results result where participation.exercise.id = :#{#exerciseId} and (result.id = (select max(prs.id) from participation.results prs where prs.assessmentType = 'AUTOMATIC') or result is null)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMzYwMA=="}, "originalCommit": {"oid": "804e5427b0c5cb544e805f3ec7e3583003f95f55"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDUwODExOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0NDozN1rOG8_4aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTozOTo0OFrOG9Bp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNDM3Ng==", "bodyText": "should we update the templateParticipation and the solutionParticipation as well?\nWhile they should have 0% and 100% anyway, this is not always the case, so I guess this would make sense.\nEspecially when there is a bonus, the solution result might change (e.g. from 100% to 125%)", "url": "https://github.com/ls1intum/Artemis/pull/2003#discussion_r466614376", "createdAt": "2020-08-06T18:44:37Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -150,13 +151,56 @@ public boolean generateTestCasesFromFeedbacks(List<Feedback> feedbacks, Programm\n      * @return Result with updated feedbacks, score and result string.\n      */\n     public Result updateResultFromTestCases(Result result, ProgrammingExercise exercise, boolean isStudentParticipation) {\n-        boolean shouldTestsWithAfterDueDateFlagBeRemoved = isStudentParticipation && exercise.getBuildAndTestStudentSubmissionsAfterDueDate() != null\n-                && ZonedDateTime.now().isBefore(exercise.getBuildAndTestStudentSubmissionsAfterDueDate());\n         Set<ProgrammingExerciseTestCase> testCases = findActiveByExerciseId(exercise.getId());\n+        Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = testCases;\n+        // We don't filter the test cases for the solution/template participation's results as they are used as indicators for the instructor!\n+        if (isStudentParticipation) {\n+            testCasesForCurrentDate = filterTestCasesForCurrentDate(exercise, testCases);\n+        }\n+        return updateResultFromTestCases(testCases, testCasesForCurrentDate, result);\n+    }\n+\n+    /**\n+     * Updates <b>all</b> latest automatic results of the given exercise with the information of the exercises test cases. This update includes:\n+     * - Checking which test cases were not executed as this is not part of the bamboo build (not all test cases are executed in an exercise with sequential test runs)\n+     * - Checking the due date and the afterDueDate flag\n+     * - Recalculating the score based based on the successful test cases weight vs the total weight of all test cases.\n+     *\n+     * If there are no test cases stored in the database for the given exercise (i.e. we have a legacy exercise) or the weight has not been changed, then the result will not change\n+     *\n+     * @param exercise the exercise whose results should be updated\n+     * @return the results of the exercise that have been updated\n+     */\n+    public List<Result> updateAllResultsFromTestCases(ProgrammingExercise exercise) {\n+        Set<ProgrammingExerciseTestCase> testCases = findActiveByExerciseId(exercise.getId());\n+        Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = filterTestCasesForCurrentDate(exercise, testCases);\n+        // We only update the latest automatic results here, later manual assessments are not affected\n+        List<StudentParticipation> participations = participationService.findByExerciseIdWithLatestAutomaticResult(exercise.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804e5427b0c5cb544e805f3ec7e3583003f95f55"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MzQyNg==", "bodyText": "Template and solution are now updated as well.", "url": "https://github.com/ls1intum/Artemis/pull/2003#discussion_r466643426", "createdAt": "2020-08-06T19:39:48Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -150,13 +151,56 @@ public boolean generateTestCasesFromFeedbacks(List<Feedback> feedbacks, Programm\n      * @return Result with updated feedbacks, score and result string.\n      */\n     public Result updateResultFromTestCases(Result result, ProgrammingExercise exercise, boolean isStudentParticipation) {\n-        boolean shouldTestsWithAfterDueDateFlagBeRemoved = isStudentParticipation && exercise.getBuildAndTestStudentSubmissionsAfterDueDate() != null\n-                && ZonedDateTime.now().isBefore(exercise.getBuildAndTestStudentSubmissionsAfterDueDate());\n         Set<ProgrammingExerciseTestCase> testCases = findActiveByExerciseId(exercise.getId());\n+        Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = testCases;\n+        // We don't filter the test cases for the solution/template participation's results as they are used as indicators for the instructor!\n+        if (isStudentParticipation) {\n+            testCasesForCurrentDate = filterTestCasesForCurrentDate(exercise, testCases);\n+        }\n+        return updateResultFromTestCases(testCases, testCasesForCurrentDate, result);\n+    }\n+\n+    /**\n+     * Updates <b>all</b> latest automatic results of the given exercise with the information of the exercises test cases. This update includes:\n+     * - Checking which test cases were not executed as this is not part of the bamboo build (not all test cases are executed in an exercise with sequential test runs)\n+     * - Checking the due date and the afterDueDate flag\n+     * - Recalculating the score based based on the successful test cases weight vs the total weight of all test cases.\n+     *\n+     * If there are no test cases stored in the database for the given exercise (i.e. we have a legacy exercise) or the weight has not been changed, then the result will not change\n+     *\n+     * @param exercise the exercise whose results should be updated\n+     * @return the results of the exercise that have been updated\n+     */\n+    public List<Result> updateAllResultsFromTestCases(ProgrammingExercise exercise) {\n+        Set<ProgrammingExerciseTestCase> testCases = findActiveByExerciseId(exercise.getId());\n+        Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = filterTestCasesForCurrentDate(exercise, testCases);\n+        // We only update the latest automatic results here, later manual assessments are not affected\n+        List<StudentParticipation> participations = participationService.findByExerciseIdWithLatestAutomaticResult(exercise.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNDM3Ng=="}, "originalCommit": {"oid": "804e5427b0c5cb544e805f3ec7e3583003f95f55"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4602, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}