{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMDE2Njg2", "number": 1937, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NjoyN1rOEQu0Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDowMToxOFrOERMtTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc5NjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NjoyN1rOG1DG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MDozM1rOG1JRCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODY0Mw==", "bodyText": "The method name states the we filter by manual assessment, but we filter by <> 'AUTOMATIC'. Is there a reason why don't filter by  = 'MANUAL'?", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458278643", "createdAt": "2020-07-21T17:46:27Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -91,6 +91,15 @@\n     @Query(\"select pe from ProgrammingExercise pe where pe.buildAndTestStudentSubmissionsAfterDueDate > :#{#dateTime}\")\n     List<ProgrammingExercise> findAllByBuildAndTestStudentSubmissionsAfterDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);\n \n+    /**\n+     * Returns the programming exercises that have manual assessment enabled and a due date higher than the provided date.\n+     *\n+     * @param dateTime ZonedDateTime object.\n+     * @return List<ProgrammingExercise> (can be empty)\n+     */\n+    @Query(\"select pe from ProgrammingExercise pe where pe.assessmentType <> 'AUTOMATIC' and pe.dueDate > :#{#dateTime}\")\n+    List<ProgrammingExercise> findAllByManualAssessmentAndDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d995a9cc210e410cea7280735234562689f3bb0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwNTI5NA==", "bodyText": "Because we use SEMI_AUTOMATIC for that currently. I wanted to be safe here and return all exercises that involve some sort of manual assessment. As far as I can see, MANUAL is unused currently for the programming exercises.", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458305294", "createdAt": "2020-07-21T18:31:20Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -91,6 +91,15 @@\n     @Query(\"select pe from ProgrammingExercise pe where pe.buildAndTestStudentSubmissionsAfterDueDate > :#{#dateTime}\")\n     List<ProgrammingExercise> findAllByBuildAndTestStudentSubmissionsAfterDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);\n \n+    /**\n+     * Returns the programming exercises that have manual assessment enabled and a due date higher than the provided date.\n+     *\n+     * @param dateTime ZonedDateTime object.\n+     * @return List<ProgrammingExercise> (can be empty)\n+     */\n+    @Query(\"select pe from ProgrammingExercise pe where pe.assessmentType <> 'AUTOMATIC' and pe.dueDate > :#{#dateTime}\")\n+    List<ProgrammingExercise> findAllByManualAssessmentAndDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODY0Mw=="}, "originalCommit": {"oid": "5d995a9cc210e410cea7280735234562689f3bb0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3OTUzMA==", "bodyText": "Thanks, seems reasonable.", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458379530", "createdAt": "2020-07-21T20:50:33Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -91,6 +91,15 @@\n     @Query(\"select pe from ProgrammingExercise pe where pe.buildAndTestStudentSubmissionsAfterDueDate > :#{#dateTime}\")\n     List<ProgrammingExercise> findAllByBuildAndTestStudentSubmissionsAfterDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);\n \n+    /**\n+     * Returns the programming exercises that have manual assessment enabled and a due date higher than the provided date.\n+     *\n+     * @param dateTime ZonedDateTime object.\n+     * @return List<ProgrammingExercise> (can be empty)\n+     */\n+    @Query(\"select pe from ProgrammingExercise pe where pe.assessmentType <> 'AUTOMATIC' and pe.dueDate > :#{#dateTime}\")\n+    List<ProgrammingExercise> findAllByManualAssessmentAndDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODY0Mw=="}, "originalCommit": {"oid": "5d995a9cc210e410cea7280735234562689f3bb0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQxNzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0OTo0NFrOG1JPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTo1NTozMVrOG1LOUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3OTA3Nw==", "bodyText": "Could you please add brackets to this and the following if statement?", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458379077", "createdAt": "2020-07-21T20:49:44Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -89,25 +95,38 @@ public void scheduleRunningExercisesOnStartup() {\n     }\n \n     /**\n-     * Will cancel a scheduled task if the buildAndTestAfterDueDate is null or has passed already.\n+     * Will cancel or reschedule tasks for updated programming exercises\n      *\n-     * // TODO: the method name and logic is really hard to understand, we should improve this\n      * @param exercise ProgrammingExercise\n      */\n     @Override\n-    public void scheduleExerciseIfRequired(ProgrammingExercise exercise) {\n-        // TODO: also take exercises with manual assessments into account here and deal better with exams\n-        if (!isExamExercise(exercise)\n-                && (exercise.getBuildAndTestStudentSubmissionsAfterDueDate() == null || exercise.getBuildAndTestStudentSubmissionsAfterDueDate().isBefore(ZonedDateTime.now()))) {\n-            // this only cancels a schedule, but does not schedule one\n-            scheduleService.cancelScheduledTaskForLifecycle(exercise, ExerciseLifecycle.DUE);\n-            scheduleService.cancelScheduledTaskForLifecycle(exercise, ExerciseLifecycle.BUILD_AND_TEST_AFTER_DUE_DATE);\n+    public void updateScheduling(ProgrammingExercise exercise) {\n+        if (!needsToBeScheduled(exercise)) {\n+            // If a programming exercise got changed so that any scheduling becomes unnecessary, we need to cancel all scheduled tasks\n+            cancelAllScheduledTasks(exercise);\n             return;\n         }\n-        // exam exercises are always scheduled, course exercises are only scheduled if buildAndTestStudentSubmissionsAfterDueDate is set and in the future\n         scheduleExercise(exercise);\n     }\n \n+    private static boolean needsToBeScheduled(ProgrammingExercise exercise) {\n+        // Exam exercises need to be scheduled\n+        if (isExamExercise(exercise))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d995a9cc210e410cea7280735234562689f3bb0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMTYwMQ==", "bodyText": "Yes. Strange that the style tests passed then.", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458411601", "createdAt": "2020-07-21T21:55:31Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -89,25 +95,38 @@ public void scheduleRunningExercisesOnStartup() {\n     }\n \n     /**\n-     * Will cancel a scheduled task if the buildAndTestAfterDueDate is null or has passed already.\n+     * Will cancel or reschedule tasks for updated programming exercises\n      *\n-     * // TODO: the method name and logic is really hard to understand, we should improve this\n      * @param exercise ProgrammingExercise\n      */\n     @Override\n-    public void scheduleExerciseIfRequired(ProgrammingExercise exercise) {\n-        // TODO: also take exercises with manual assessments into account here and deal better with exams\n-        if (!isExamExercise(exercise)\n-                && (exercise.getBuildAndTestStudentSubmissionsAfterDueDate() == null || exercise.getBuildAndTestStudentSubmissionsAfterDueDate().isBefore(ZonedDateTime.now()))) {\n-            // this only cancels a schedule, but does not schedule one\n-            scheduleService.cancelScheduledTaskForLifecycle(exercise, ExerciseLifecycle.DUE);\n-            scheduleService.cancelScheduledTaskForLifecycle(exercise, ExerciseLifecycle.BUILD_AND_TEST_AFTER_DUE_DATE);\n+    public void updateScheduling(ProgrammingExercise exercise) {\n+        if (!needsToBeScheduled(exercise)) {\n+            // If a programming exercise got changed so that any scheduling becomes unnecessary, we need to cancel all scheduled tasks\n+            cancelAllScheduledTasks(exercise);\n             return;\n         }\n-        // exam exercises are always scheduled, course exercises are only scheduled if buildAndTestStudentSubmissionsAfterDueDate is set and in the future\n         scheduleExercise(exercise);\n     }\n \n+    private static boolean needsToBeScheduled(ProgrammingExercise exercise) {\n+        // Exam exercises need to be scheduled\n+        if (isExamExercise(exercise))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3OTA3Nw=="}, "originalCommit": {"oid": "5d995a9cc210e410cea7280735234562689f3bb0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzkxOTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyOToyNVrOG1qhWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyMjo1OFrOG1slfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyNDM3OA==", "bodyText": "I'm a bit confused, this if clause will lock all programming exercises with a due date in the future but the comment says \"For exercises with buildAndTestAfterDueDate or manual assessment\"", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458924378", "createdAt": "2020-07-22T16:29:25Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -123,11 +144,24 @@ private void scheduleExercise(ProgrammingExercise exercise) {\n     }\n \n     private void scheduleCourseExercise(ProgrammingExercise exercise) {\n-        // TODO: there is small logic error here. When build and run test date is after the due date, the lock operation might be executed even if it is not necessary.\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.DUE, lockAllStudentRepositories(exercise));\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.BUILD_AND_TEST_AFTER_DUE_DATE, buildAndTestRunnableForExercise(exercise));\n-        log.debug(\"Scheduled build and test for student submissions after due date for Programming Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \") for \"\n-                + exercise.getBuildAndTestStudentSubmissionsAfterDueDate() + \".\");\n+        // For exercises with buildAndTestAfterDueDate or manual assessment\n+        if (exercise.getDueDate() != null && ZonedDateTime.now().isBefore(exercise.getDueDate())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d8f5a3816ce58a589cd20cc33fa59b7ac9efcb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1ODIwNA==", "bodyText": "This is because needsToBeScheduled will only schedule those course exercises. I can improve the comment, though.", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458958204", "createdAt": "2020-07-22T17:22:58Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -123,11 +144,24 @@ private void scheduleExercise(ProgrammingExercise exercise) {\n     }\n \n     private void scheduleCourseExercise(ProgrammingExercise exercise) {\n-        // TODO: there is small logic error here. When build and run test date is after the due date, the lock operation might be executed even if it is not necessary.\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.DUE, lockAllStudentRepositories(exercise));\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.BUILD_AND_TEST_AFTER_DUE_DATE, buildAndTestRunnableForExercise(exercise));\n-        log.debug(\"Scheduled build and test for student submissions after due date for Programming Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \") for \"\n-                + exercise.getBuildAndTestStudentSubmissionsAfterDueDate() + \".\");\n+        // For exercises with buildAndTestAfterDueDate or manual assessment\n+        if (exercise.getDueDate() != null && ZonedDateTime.now().isBefore(exercise.getDueDate())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyNDM3OA=="}, "originalCommit": {"oid": "36d8f5a3816ce58a589cd20cc33fa59b7ac9efcb"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDEzODAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyNDo1OFrOG1sqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODoyOToyMlrOG1vADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1OTQxMQ==", "bodyText": "@kloessst would that be better?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // For exercises with buildAndTestAfterDueDate or manual assessment\n          \n          \n            \n                    // For any course exercise that needsToBeScheduled (buildAndTestAfterDueDate and/or manual assessment)", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458959411", "createdAt": "2020-07-22T17:24:58Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -123,11 +144,24 @@ private void scheduleExercise(ProgrammingExercise exercise) {\n     }\n \n     private void scheduleCourseExercise(ProgrammingExercise exercise) {\n-        // TODO: there is small logic error here. When build and run test date is after the due date, the lock operation might be executed even if it is not necessary.\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.DUE, lockAllStudentRepositories(exercise));\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.BUILD_AND_TEST_AFTER_DUE_DATE, buildAndTestRunnableForExercise(exercise));\n-        log.debug(\"Scheduled build and test for student submissions after due date for Programming Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \") for \"\n-                + exercise.getBuildAndTestStudentSubmissionsAfterDueDate() + \".\");\n+        // For exercises with buildAndTestAfterDueDate or manual assessment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d8f5a3816ce58a589cd20cc33fa59b7ac9efcb"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5Nzc3Mg==", "bodyText": "That's good. Just wasn't clear for me.", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r458997772", "createdAt": "2020-07-22T18:29:22Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/scheduled/ProgrammingExerciseScheduleService.java", "diffHunk": "@@ -123,11 +144,24 @@ private void scheduleExercise(ProgrammingExercise exercise) {\n     }\n \n     private void scheduleCourseExercise(ProgrammingExercise exercise) {\n-        // TODO: there is small logic error here. When build and run test date is after the due date, the lock operation might be executed even if it is not necessary.\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.DUE, lockAllStudentRepositories(exercise));\n-        scheduleService.scheduleTask(exercise, ExerciseLifecycle.BUILD_AND_TEST_AFTER_DUE_DATE, buildAndTestRunnableForExercise(exercise));\n-        log.debug(\"Scheduled build and test for student submissions after due date for Programming Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \") for \"\n-                + exercise.getBuildAndTestStudentSubmissionsAfterDueDate() + \".\");\n+        // For exercises with buildAndTestAfterDueDate or manual assessment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1OTQxMQ=="}, "originalCommit": {"oid": "36d8f5a3816ce58a589cd20cc33fa59b7ac9efcb"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDY5NDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDowMToxOFrOG1yIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDowNDowOFrOG1yOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0OTEzNw==", "bodyText": "This Query will return nothing if pe.dueDate is null. Just to confirm @MaisiKoleni , that this is the intended behaviour?", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r459049137", "createdAt": "2020-07-22T20:01:18Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -91,6 +91,15 @@\n     @Query(\"select pe from ProgrammingExercise pe where pe.buildAndTestStudentSubmissionsAfterDueDate > :#{#dateTime}\")\n     List<ProgrammingExercise> findAllByBuildAndTestStudentSubmissionsAfterDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);\n \n+    /**\n+     * Returns the programming exercises that have manual assessment enabled and a due date higher than the provided date.\n+     *\n+     * @param dateTime ZonedDateTime object.\n+     * @return List<ProgrammingExercise> (can be empty)\n+     */\n+    @Query(\"select pe from ProgrammingExercise pe where pe.assessmentType <> 'AUTOMATIC' and pe.dueDate > :#{#dateTime}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd3203c2000114cc4e5313856db95ebd1039e76"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1MDY5Ng==", "bodyText": "Yes, programming exercises without due date don't have a due date higher that the passed due date and don't need to be scheduled.", "url": "https://github.com/ls1intum/Artemis/pull/1937#discussion_r459050696", "createdAt": "2020-07-22T20:04:08Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -91,6 +91,15 @@\n     @Query(\"select pe from ProgrammingExercise pe where pe.buildAndTestStudentSubmissionsAfterDueDate > :#{#dateTime}\")\n     List<ProgrammingExercise> findAllByBuildAndTestStudentSubmissionsAfterDueDateAfterDate(@Param(\"dateTime\") ZonedDateTime dateTime);\n \n+    /**\n+     * Returns the programming exercises that have manual assessment enabled and a due date higher than the provided date.\n+     *\n+     * @param dateTime ZonedDateTime object.\n+     * @return List<ProgrammingExercise> (can be empty)\n+     */\n+    @Query(\"select pe from ProgrammingExercise pe where pe.assessmentType <> 'AUTOMATIC' and pe.dueDate > :#{#dateTime}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0OTEzNw=="}, "originalCommit": {"oid": "5cd3203c2000114cc4e5313856db95ebd1039e76"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4804, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}