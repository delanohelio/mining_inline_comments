{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNjE2MDI4", "number": 1639, "title": "[Exam] Student exam overview", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Client: I added authorities to all new routes and check the course groups for displaying navigation elements (links, buttons)\n Client: I documented the TypeScript code using JSDoc style.\n Client: I translated all the newly inserted strings into German and English\n\nDescription\nOverview for student exams page. \"Generate student exams\" and \"Assessment\" don't do anything for now. Tabel content might be empty and/or showing wtong information.\nSteps for Testing\n\nAdd exam to db: INSERT INTO artemis.exam (course_id, title) VALUES (':courseID', 'Test Exam')\nAdd student exam to db: INSERT INTO artemis.student_exam (exam_id, user_id) VALUES (':examId', ':userId')\nNavigate to /course-management/:courseId/exams/:examId/studentExams\n\nScreenshots", "createdAt": "2020-06-12T11:04:49Z", "url": "https://github.com/ls1intum/Artemis/pull/1639", "merged": true, "mergeCommit": {"oid": "907fb12c7953e8f478600f74fbfc1bc6c2de81de"}, "closed": true, "closedAt": "2020-06-15T20:40:32Z", "author": {"login": "sjagla27"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqC1jEAH2gAyNDMzNjE2MDI4OjIyMzUwNWVhYzJjNTYzOTJkZDgyNTM5MGE2MzhjNjYyYWVkYTg4ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrm2F1AFqTQzMDk3Njg4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "223505eac2c56392dd825390a638c662aeda88fd", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/223505eac2c56392dd825390a638c662aeda88fd", "committedDate": "2020-06-11T00:09:12Z", "message": "Add additional routes to ExamResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f16dcad73cfcf3ae40f13016e0387eb3edff0cd2", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/f16dcad73cfcf3ae40f13016e0387eb3edff0cd2", "committedDate": "2020-06-11T09:10:10Z", "message": "Add access check prototype methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691ac04cbfb3cf25b1985ba00b9b5984679d0fde", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/691ac04cbfb3cf25b1985ba00b9b5984679d0fde", "committedDate": "2020-06-12T10:32:20Z", "message": "Merge branch 'develop' into exam/management/server-routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e37bf44b36a1a32415c53a5b3698fe5280da8413", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/e37bf44b36a1a32415c53a5b3698fe5280da8413", "committedDate": "2020-06-12T10:34:23Z", "message": "Let isAtLeastInstructorInCourse() method retrieve the user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05fcb54f56b3f734f49fb465b6fd31395ec5d2d2", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/05fcb54f56b3f734f49fb465b6fd31395ec5d2d2", "committedDate": "2020-06-12T10:39:10Z", "message": "Write to AuditLog on delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe349a2d7b16c0090ddf31c384852148e824e1a", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/cfe349a2d7b16c0090ddf31c384852148e824e1a", "committedDate": "2020-06-12T10:54:36Z", "message": "Retrieve exam from database after security checks are finished"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f271ff29b1288c5a9dba1bb2620f58c5941ec7e2", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/f271ff29b1288c5a9dba1bb2620f58c5941ec7e2", "committedDate": "2020-06-12T11:02:54Z", "message": "first draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c6362bbc93a750230208a50707f6be5f131105", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/b0c6362bbc93a750230208a50707f6be5f131105", "committedDate": "2020-06-12T11:14:45Z", "message": "Move check methods to ExamService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5550487f94495a140d447ee1463550947a4e7d3e", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/5550487f94495a140d447ee1463550947a4e7d3e", "committedDate": "2020-06-12T13:01:54Z", "message": "Improve ExamResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "053a9a37f12eb0ac8fcd16186b20f268fd9fc797", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/053a9a37f12eb0ac8fcd16186b20f268fd9fc797", "committedDate": "2020-06-12T14:09:02Z", "message": "Create ExerciseGroupResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a4104e7d35667d21416db7529bffa89a6f2069", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/29a4104e7d35667d21416db7529bffa89a6f2069", "committedDate": "2020-06-12T14:32:15Z", "message": "generate exams button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbaa68c1e60556961bc79c1b1d508cb7b326175d", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/dbaa68c1e60556961bc79c1b1d508cb7b326175d", "committedDate": "2020-06-12T14:46:11Z", "message": "Create StudentExamResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d81fd4db7905d9ab169afa114d192c10da88425", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/9d81fd4db7905d9ab169afa114d192c10da88425", "committedDate": "2020-06-12T15:05:55Z", "message": "Merge remote-tracking branch 'origin/exam/management/server-routes' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4b6445a6094a252abf73d3788dbb8e95a9cb50f", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/a4b6445a6094a252abf73d3788dbb8e95a9cb50f", "committedDate": "2020-06-12T15:35:00Z", "message": "Fix cyclic dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/8a41b694b5dbdfbcf382b1230c5737158d1fa1ab", "committedDate": "2020-06-12T15:39:28Z", "message": "Merge remote-tracking branch 'origin/exam/management/server-routes' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTQ3NzE4", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430147718", "createdAt": "2020-06-13T15:47:17Z", "commit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo0NzoxN1rOGjYHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNTo1MTowNVrOGjYIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODQxMg==", "bodyText": "I don't think forbidden() is a good choice here. The user is allowed however the exam doesn't belong to the course.\nYou could either agrue with a \"notFound()\" here since you can't finde an exercise belonging to the course, maybe a HTTP 409 would be a good choice here?", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748412", "createdAt": "2020-06-13T15:47:17Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamAccessService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.notFound;\n+\n+import java.util.Optional;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+import de.tum.in.www1.artemis.repository.ExamRepository;\n+\n+/**\n+ * Service Implementation to check Exam access.\n+ */\n+@Service\n+public class ExamAccessService {\n+\n+    private final ExamRepository examRepository;\n+\n+    private final CourseService courseService;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    public ExamAccessService(ExamRepository examRepository, CourseService courseService, AuthorizationCheckService authorizationCheckService) {\n+        this.examRepository = examRepository;\n+        this.courseService = courseService;\n+        this.authorizationCheckService = authorizationCheckService;\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course\n+     *\n+     * @param courseId  The id of the course\n+     * @param <T>       The type of the return type of the requesting route so that the response can be returned there\n+     * @return an optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <T> Optional<ResponseEntity<T>> checkCourseAccess(Long courseId) {\n+        Course course = courseService.findOne(courseId);\n+        if (!authorizationCheckService.isAtLeastInstructorInCourse(course, null)) {\n+            return Optional.of(forbidden());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course, that the exam exists and that the exam\n+     * belongs to the given course.\n+     *\n+     * @param courseId  The id of the course\n+     * @param examId    The id of the exam\n+     * @param <X>       The type of the return type of the requesting route so that the response can be returned there\n+     * @return an optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <X> Optional<ResponseEntity<X>> checkCourseAndExamAccess(Long courseId, Long examId) {\n+        Optional<ResponseEntity<X>> courseAccessFailure = checkCourseAccess(courseId);\n+        if (courseAccessFailure.isPresent()) {\n+            return courseAccessFailure;\n+        }\n+        Optional<Exam> exam = examRepository.findById(examId);\n+        if (exam.isEmpty()) {\n+            return Optional.of(notFound());\n+        }\n+        if (!exam.get().getCourse().getId().equals(courseId)) {\n+            return Optional.of(forbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODUyNg==", "bodyText": "I don't think forbidden() is a good choice here. The user is allowed however the exam doesn't belong to the exercise group.\nYou could either agrue with a \"notFound()\" here since you can't finde an exercise belonging to the course, maybe a HTTP 409 would be a good choice here?", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748526", "createdAt": "2020-06-13T15:48:49Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseGroupService.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.notFound;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.repository.ExerciseGroupRepository;\n+import de.tum.in.www1.artemis.web.rest.errors.EntityNotFoundException;\n+\n+/**\n+ * Service Implementation for managing ExerciseGroup.\n+ */\n+@Service\n+public class ExerciseGroupService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ExerciseGroupService.class);\n+\n+    private final ExerciseGroupRepository exerciseGroupRepository;\n+\n+    private final ExamAccessService examAccessService;\n+\n+    public ExerciseGroupService(ExerciseGroupRepository exerciseGroupRepository, ExamAccessService examAccessService) {\n+        this.exerciseGroupRepository = exerciseGroupRepository;\n+        this.examAccessService = examAccessService;\n+    }\n+\n+    /**\n+     * Save an exerciseGroup\n+     *\n+     * @param exerciseGroup the entity to save\n+     * @return the persisted entity\n+     */\n+    public ExerciseGroup save(ExerciseGroup exerciseGroup) {\n+        log.debug(\"Request to save exerciseGroup : {}\", exerciseGroup);\n+        return exerciseGroupRepository.save(exerciseGroup);\n+    }\n+\n+    /**\n+     * Get one exercise group by id.\n+     *\n+     * @param exerciseGroupId the id of the exercise group\n+     * @return the entity\n+     */\n+    @NotNull\n+    public ExerciseGroup findOne(Long exerciseGroupId) {\n+        log.debug(\"Request to get exercise group : {}\", exerciseGroupId);\n+        return exerciseGroupRepository.findById(exerciseGroupId)\n+                .orElseThrow(() -> new EntityNotFoundException(\"Exercise group with id \\\"\" + exerciseGroupId + \"\\\" does not exist\"));\n+    }\n+\n+    /**\n+     * Get all exercise groups for the given exam.\n+     *\n+     * @param examId the id of the exam\n+     * @return the list of all exercise groups\n+     */\n+    public List<ExerciseGroup> findAllByExamId(Long examId) {\n+        log.debug(\"REST request to get all exercise groups for Exam : {}\", examId);\n+        return exerciseGroupRepository.findByExamId(examId);\n+    }\n+\n+    /**\n+     * Delete the exercise group by id.\n+     *\n+     * @param exerciseGroupId the id of the entity\n+     */\n+    public void delete(Long exerciseGroupId) {\n+        log.debug(\"Request to delete exercise group : {}\", exerciseGroupId);\n+        exerciseGroupRepository.deleteById(exerciseGroupId);\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course, that the exam exists,\n+     * that the exam belongs to the given course and the exercise group belongs to the given exam.\n+     *\n+     * @param courseId          The id of the course\n+     * @param examId            The id of the exam\n+     * @param exerciseGroupId   The id of the exercise group\n+     * @param <X>               The type of the return type of the requesting route so that the\n+     *                          response can be returned there\n+     * @return an Optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <X> Optional<ResponseEntity<X>> checkCourseAndExamAndExerciseGroupAccess(Long courseId, Long examId, Long exerciseGroupId) {\n+        Optional<ResponseEntity<X>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure;\n+        }\n+        Optional<ExerciseGroup> exerciseGroup = exerciseGroupRepository.findById(exerciseGroupId);\n+        if (exerciseGroup.isEmpty()) {\n+            return Optional.of(notFound());\n+        }\n+        if (!exerciseGroup.get().getExam().getId().equals(examId)) {\n+            return Optional.of(forbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODU3OQ==", "bodyText": "I don't think forbidden() is a good choice here. The user is allowed however the student exam doesn't belong to the exam.\nYou could either agrue with a \"notFound()\" here since you can't finde an exercise belonging to the course, maybe a HTTP 409 would be a good choice here?", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748579", "createdAt": "2020-06-13T15:49:25Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.notFound;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.exam.StudentExam;\n+import de.tum.in.www1.artemis.repository.StudentExamRepository;\n+import de.tum.in.www1.artemis.web.rest.errors.EntityNotFoundException;\n+\n+/**\n+ * Service Implementation for managing StudentExam.\n+ */\n+@Service\n+public class StudentExamService {\n+\n+    private final Logger log = LoggerFactory.getLogger(StudentExamService.class);\n+\n+    private final StudentExamRepository studentExamRepository;\n+\n+    private final ExamAccessService examAccessService;\n+\n+    public StudentExamService(StudentExamRepository studentExamRepository, ExamAccessService examAccessService) {\n+        this.studentExamRepository = studentExamRepository;\n+        this.examAccessService = examAccessService;\n+    }\n+\n+    /**\n+     * Get one student exam by id.\n+     *\n+     * @param studentExamId the id of the student exam\n+     * @return the entity\n+     */\n+    @NotNull\n+    public StudentExam findOne(Long studentExamId) {\n+        log.debug(\"Request to get student exam : {}\", studentExamId);\n+        return studentExamRepository.findById(studentExamId).orElseThrow(() -> new EntityNotFoundException(\"Student exam with id \\\"\" + studentExamId + \"\\\" does not exist\"));\n+    }\n+\n+    /**\n+     * Get all student exams for the given exam.\n+     *\n+     * @param examId the id of the exam\n+     * @return the list of all student exams\n+     */\n+    public List<StudentExam> findAllByExamId(Long examId) {\n+        log.debug(\"REST request to get all student exams for Exam : {}\", examId);\n+        return studentExamRepository.findByExamId(examId);\n+    }\n+\n+    /**\n+     * Checks if the current user is allowed to manage exams of the given course, that the exam exists,\n+     * that the exam belongs to the given course and the student exam belongs to the given exam.\n+     *\n+     * @param courseId      The id of the course\n+     * @param examId        The id of the exam\n+     * @param studentExamId The if of the student exam\n+     * @param <X>           The type of the return type of the requesting route so that the\n+     *      *               response can be returned there\n+     * @return an Optional with a typed ResponseEntity. If it is empty all checks passed\n+     */\n+    public <X> Optional<ResponseEntity<X>> checkCourseAndExamAndStudentExamAccess(Long courseId, Long examId, Long studentExamId) {\n+        Optional<ResponseEntity<X>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure;\n+        }\n+        Optional<StudentExam> studentExam = studentExamRepository.findById(studentExamId);\n+        if (studentExam.isEmpty()) {\n+            return Optional.of(notFound());\n+        }\n+        if (!studentExam.get().getExam().getId().equals(examId)) {\n+            return Optional.of(forbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODYzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Exam exam = examService.findOne(examId);\n          \n          \n            \n                    return courseAndExamAccessFailure.orElseGet(() -> ResponseEntity.ok(exam));\n          \n          \n            \n                    return courseAndExamAccessFailure.orElseGet(() -> ResponseEntity.ok(examService.findOne(examId)));", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748637", "createdAt": "2020-06-13T15:50:09Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -104,18 +94,71 @@ public ExamResource(UserService userService, CourseService courseService, ExamSe\n             return createExam(courseId, updatedExam);\n         }\n \n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Course course = courseService.findOne(courseId);\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            return forbidden();\n-        }\n-\n-        Optional<Exam> existingExam = examRepository.findById(updatedExam.getId());\n-        if (existingExam.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n+        Optional<ResponseEntity<Exam>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, updatedExam.getId());\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure.get();\n         }\n \n         Exam result = examService.save(updatedExam);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, result.getTitle())).body(result);\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/exams/{examId} : Find an exam by id.\n+     *\n+     * @param courseId  the course to which the exam belongs\n+     * @param examId    the exam to find\n+     * @return the ResponseEntity with status 200 (OK) and with the found exam as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<Exam> getExam(@PathVariable Long courseId, @PathVariable Long examId) {\n+        log.debug(\"REST request to get exam : {}\", examId);\n+        Optional<ResponseEntity<Exam>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        Exam exam = examService.findOne(examId);\n+        return courseAndExamAccessFailure.orElseGet(() -> ResponseEntity.ok(exam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ExerciseGroup exerciseGroup = exerciseGroupService.findOne(exerciseGroupId);\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(exerciseGroup));\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(exerciseGroupService.findOne(exerciseGroupId)));", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748673", "createdAt": "2020-06-13T15:50:38Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.actuate.audit.AuditEvent;\n+import org.springframework.boot.actuate.audit.AuditEventRepository;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n+import de.tum.in.www1.artemis.service.ExamAccessService;\n+import de.tum.in.www1.artemis.service.ExerciseGroupService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing ExerciseGroup.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class ExerciseGroupResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ExerciseGroupResource.class);\n+\n+    private static final String ENTITY_NAME = \"exerciseGroup\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final ExerciseGroupService exerciseGroupService;\n+\n+    private final ExamAccessService examAccessService;\n+\n+    private final UserService userService;\n+\n+    private final AuditEventRepository auditEventRepository;\n+\n+    public ExerciseGroupResource(ExerciseGroupService exerciseGroupService, ExamAccessService examAccessService, UserService userService,\n+            AuditEventRepository auditEventRepository) {\n+        this.exerciseGroupService = exerciseGroupService;\n+        this.examAccessService = examAccessService;\n+        this.userService = userService;\n+        this.auditEventRepository = auditEventRepository;\n+    }\n+\n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/exerciseGroups : Create a new exercise group.\n+     *\n+     * @param courseId      the course to which the exercise group belongs to\n+     * @param examId        the exam to which the exercise group belongs to\n+     * @param exerciseGroup the exercise group to create\n+     * @return the ResponseEntity with status 201 (Created) and with the new exerciseGroup as body,\n+     *         or with status 400 (Bad Request) if the exerciseGroup has already an ID\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/exerciseGroups\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<ExerciseGroup> createExerciseGroup(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody ExerciseGroup exerciseGroup)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to create an exercise group : {}\", exerciseGroup);\n+        if (exerciseGroup.getId() != null) {\n+            throw new BadRequestAlertException(\"A new exerciseGroup cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+\n+        Optional<ResponseEntity<ExerciseGroup>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return courseAndExamAccessFailure.get();\n+        }\n+\n+        ExerciseGroup savedExerciseGroup = exerciseGroupService.save(exerciseGroup);\n+        return ResponseEntity.created(new URI(\"/api/courses/\" + courseId + \"/exams/\" + examId + \"/exerciseGroups/\" + savedExerciseGroup.getId()))\n+                .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, savedExerciseGroup.getTitle())).body(savedExerciseGroup);\n+    }\n+\n+    /**\n+     * PUT /courses/{courseId}/exams/{examId}/exerciseGroups : Update an existing exercise group.\n+     *\n+     * @param courseId              the course to which the exercise group belongs to\n+     * @param examId                the exam to which the exercise group belongs to\n+     * @param updatedExerciseGroup  the exercise group to update\n+     * @return the ResponseEntity with status 200 (OK) and with the body of the updated exercise group\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/courses/{courseId}/exams/{examId}/exerciseGroups\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<ExerciseGroup> updateExerciseGroup(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody ExerciseGroup updatedExerciseGroup)\n+            throws URISyntaxException {\n+        log.debug(\"REST request to update an exercise group : {}\", updatedExerciseGroup);\n+        if (updatedExerciseGroup.getId() == null) {\n+            return createExerciseGroup(courseId, examId, updatedExerciseGroup);\n+        }\n+\n+        Optional<ResponseEntity<ExerciseGroup>> accessFailure = exerciseGroupService.checkCourseAndExamAndExerciseGroupAccess(courseId, examId, updatedExerciseGroup.getId());\n+        if (accessFailure.isPresent()) {\n+            return accessFailure.get();\n+        }\n+\n+        ExerciseGroup result = exerciseGroupService.save(updatedExerciseGroup);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, result.getTitle())).body(result);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/exams/{examId}/exerciseGroups/{exerciseGroupId} : Find an exercise group by id.\n+     *\n+     * @param courseId          the course to which the exercise group belongs to\n+     * @param examId            the exam to which the exercise group belongs to\n+     * @param exerciseGroupId   the id of the exercise group to find\n+     * @return the ResponseEntity with status 200 (OK) and with the found exercise group as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/exerciseGroups/{exerciseGroupId}\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<ExerciseGroup> getExerciseGroup(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long exerciseGroupId) {\n+        log.debug(\"REST request to get exercise group : {}\", exerciseGroupId);\n+        Optional<ResponseEntity<ExerciseGroup>> accessFailure = exerciseGroupService.checkCourseAndExamAndExerciseGroupAccess(courseId, examId, exerciseGroupId);\n+        ExerciseGroup exerciseGroup = exerciseGroupService.findOne(exerciseGroupId);\n+        return accessFailure.orElseGet(() -> ResponseEntity.ok(exerciseGroup));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StudentExam studentExam = studentExamService.findOne(studentExamId);\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExam));\n          \n          \n            \n                    return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOne(studentExamId)));", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r439748713", "createdAt": "2020-06-13T15:51:05Z", "author": {"login": "julian-christl"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.exam.StudentExam;\n+import de.tum.in.www1.artemis.service.ExamAccessService;\n+import de.tum.in.www1.artemis.service.StudentExamService;\n+\n+/**\n+ * REST controller for managing ExerciseGroup.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StudentExamResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(StudentExamResource.class);\n+\n+    private final ExamAccessService examAccessService;\n+\n+    private final StudentExamService studentExamService;\n+\n+    public StudentExamResource(ExamAccessService examAccessService, StudentExamService studentExamService) {\n+        this.examAccessService = examAccessService;\n+        this.studentExamService = studentExamService;\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/exams/{examId}/studentExams/{studentExamId} : Find a student exam by id.\n+     *\n+     * @param courseId      the course to which the student exam belongs to\n+     * @param examId        the exam to which the student exam belongs to\n+     * @param studentExamId the id of the student exam to find\n+     * @return the ResponseEntity with status 200 (OK) and with the found student exam as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/studentExams/{studentExamId}\")\n+    @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n+    public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n+        log.debug(\"REST request to get student exam : {}\", studentExamId);\n+        Optional<ResponseEntity<StudentExam>> accessFailure = studentExamService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n+        StudentExam studentExam = studentExamService.findOne(studentExamId);\n+        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a41b694b5dbdfbcf382b1230c5737158d1fa1ab"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbf5879122b00a59e073d621f8cb33d7ef99c8cf", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/bbf5879122b00a59e073d621f8cb33d7ef99c8cf", "committedDate": "2020-06-13T22:43:06Z", "message": "Make sure that exam is not null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76c588e74b3b56369c0b06da116c2e96332f5b69", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/76c588e74b3b56369c0b06da116c2e96332f5b69", "committedDate": "2020-06-13T22:53:15Z", "message": "Address change requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a36eb86117da147752a63ea9df9b48a509966ea", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/8a36eb86117da147752a63ea9df9b48a509966ea", "committedDate": "2020-06-13T23:55:06Z", "message": "Test ExamAccessService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a406dc3b367fb7a1737b9e86c458559e9091866", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/1a406dc3b367fb7a1737b9e86c458559e9091866", "committedDate": "2020-06-14T00:02:39Z", "message": "Move all access check methods to ExamAccessService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60b9917975f39742c2cea5e75b690f86468c39e9", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/60b9917975f39742c2cea5e75b690f86468c39e9", "committedDate": "2020-06-14T00:33:08Z", "message": "Test checkCourseAndExamAndExerciseGroupAccess and checkCourseAndExamAndStudentExamAccess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72be6f9ac88e8d123e27f2f3ee82bc3fda409648", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/72be6f9ac88e8d123e27f2f3ee82bc3fda409648", "committedDate": "2020-06-14T11:53:41Z", "message": "Merge remote-tracking branch 'origin/exam/management/server-routes' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "946365c435940e4e97d67f04d7c52c8c62e78b6c", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/946365c435940e4e97d67f04d7c52c8c62e78b6c", "committedDate": "2020-06-14T12:35:48Z", "message": "links + buttons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344ad08362e2a09b80653eb9a65459fe7e087bef", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/344ad08362e2a09b80653eb9a65459fe7e087bef", "committedDate": "2020-06-14T12:59:29Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1aa57d8490140ca76ee4dd5a8c97dc0bc27d38f", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/b1aa57d8490140ca76ee4dd5a8c97dc0bc27d38f", "committedDate": "2020-06-14T13:05:13Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210025b1d3cea96646058b72066ecb30f4ee3788", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/210025b1d3cea96646058b72066ecb30f4ee3788", "committedDate": "2020-06-14T13:24:36Z", "message": "add module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0672b9267353384c2a025074a58a17c7eb503dfd", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/0672b9267353384c2a025074a58a17c7eb503dfd", "committedDate": "2020-06-14T15:55:57Z", "message": "translation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943c96b0ad7a5c60b0cb0bb7081cafe2642b99ed", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/943c96b0ad7a5c60b0cb0bb7081cafe2642b99ed", "committedDate": "2020-06-14T16:10:35Z", "message": "at least instructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2248d217d8c6f37c33cee9734f3cfdd4a823227e", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/2248d217d8c6f37c33cee9734f3cfdd4a823227e", "committedDate": "2020-06-14T16:11:09Z", "message": "atLeastTutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b5c0034ce91b0faad61e525de1e6247d2543fa", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/e6b5c0034ce91b0faad61e525de1e6247d2543fa", "committedDate": "2020-06-14T17:45:07Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25afb5bbb20d8dd04f78f29ec418dd137c80148", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/d25afb5bbb20d8dd04f78f29ec418dd137c80148", "committedDate": "2020-06-14T18:13:13Z", "message": "table contents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fba41ed598f9c5199f3c295505f47d4dae3a3112", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/fba41ed598f9c5199f3c295505f47d4dae3a3112", "committedDate": "2020-06-14T18:25:05Z", "message": "table sort"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c7ffcaa7726895aa61830468dfa46cf6f2ed4b7", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/1c7ffcaa7726895aa61830468dfa46cf6f2ed4b7", "committedDate": "2020-06-14T20:53:58Z", "message": "Merge branch 'develop' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea053691d7a53da8d5c8202f6d2e57a108900ddd", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/ea053691d7a53da8d5c8202f6d2e57a108900ddd", "committedDate": "2020-06-14T21:13:26Z", "message": "Merge branch 'develop' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f17595801d994fac5717a794682a20bb0d827589", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/f17595801d994fac5717a794682a20bb0d827589", "committedDate": "2020-06-14T21:21:55Z", "message": "merge stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b5fedee20107c57776cf706774ee2540000fad1", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/6b5fedee20107c57776cf706774ee2540000fad1", "committedDate": "2020-06-14T21:28:30Z", "message": "prettier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzM1MjQx", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430735241", "createdAt": "2020-06-15T15:06:50Z", "commit": {"oid": "6b5fedee20107c57776cf706774ee2540000fad1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce72d7b616c66f0afb0c316600ecc983ae177200", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/ce72d7b616c66f0afb0c316600ecc983ae177200", "committedDate": "2020-06-15T15:34:20Z", "message": "Merge branch 'develop' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0293942f4889fc141c86c7bdeb4566d4fd96e22", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/e0293942f4889fc141c86c7bdeb4566d4fd96e22", "committedDate": "2020-06-15T15:49:53Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/910b6e262d3f374a08fa0171ec0944a6fad75748", "committedDate": "2020-06-15T16:43:48Z", "message": "search fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODI2NzI2", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430826726", "createdAt": "2020-06-15T16:56:35Z", "commit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NjozNVrOGj6vtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NjozNVrOGj6vtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTgzMA==", "bodyText": "Small typo here", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440315830", "createdAt": "2020-06-15T16:56:35Z", "author": {"login": "anditurdiu"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Bewertungstafel\",\n             \"studentExams\": \"Klausuren der Studenten\",\n             \"students\": \"Studenten\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Klausuren\",\n+            \"generateStudentExams\": \"Klausuren erstellen\",\n+            \"searchForStudents\": \"Suche nach Studenten Logins oder Namen (Komma getrennt)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Ergebnis\",\n+            \"created\": \"Erstellt\",\n+            \"View\": \"Ansich\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d91c7a4aaf307f53977de8468b962f5b72e0aac", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/8d91c7a4aaf307f53977de8468b962f5b72e0aac", "committedDate": "2020-06-15T16:56:59Z", "message": "translation fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODI0MzE4", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430824318", "createdAt": "2020-06-15T16:53:26Z", "commit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1MzoyNlrOGj6oiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1Njo1NlrOGj6weQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzk5NQ==", "bodyText": "You can remove this line with @Query(...) completely", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440313995", "createdAt": "2020-06-15T16:53:26Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "diffHunk": "@@ -16,7 +16,8 @@\n @Repository\n public interface ExerciseGroupRepository extends JpaRepository<ExerciseGroup, Long> {\n \n-    List<ExerciseGroup> findByExamId(Long examId);\n+    @Query(\"SELECT e FROM ExerciseGroup e WHERE e.exam.id = :#{#examId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDI2OA==", "bodyText": "You could then also remove @Param(\"examId\") here", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440314268", "createdAt": "2020-06-15T16:53:57Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExerciseGroupRepository.java", "diffHunk": "@@ -16,7 +16,8 @@\n @Repository\n public interface ExerciseGroupRepository extends JpaRepository<ExerciseGroup, Long> {\n \n-    List<ExerciseGroup> findByExamId(Long examId);\n+    @Query(\"SELECT e FROM ExerciseGroup e WHERE e.exam.id = :#{#examId}\")\n+    List<ExerciseGroup> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDU3MQ==", "bodyText": "Can also be removed", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440314571", "createdAt": "2020-06-15T16:54:35Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -13,5 +15,6 @@\n @Repository\n public interface StudentExamRepository extends JpaRepository<StudentExam, Long> {\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"SELECT s FROM StudentExam s WHERE s.exam.id = :#{#examId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDY0Mw==", "bodyText": "You could then also remove @Param(\"examId\") here", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440314643", "createdAt": "2020-06-15T16:54:43Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -13,5 +15,6 @@\n @Repository\n public interface StudentExamRepository extends JpaRepository<StudentExam, Long> {\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"SELECT s FROM StudentExam s WHERE s.exam.id = :#{#examId}\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTA2Mw==", "bodyText": "Remove :-)", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440315063", "createdAt": "2020-06-15T16:55:23Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExerciseGroupResource.java", "diffHunk": "@@ -146,6 +146,7 @@ public ExerciseGroupResource(ExerciseGroupService exerciseGroupService, ExamAcce\n     @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n     public ResponseEntity<List<ExerciseGroup>> getExerciseGroupsForExam(@PathVariable Long courseId, @PathVariable Long examId) {\n         log.debug(\"REST request to get all exercise groups for exam : {}\", examId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTc4MA==", "bodyText": "Should be lowercase", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440315780", "createdAt": "2020-06-15T16:56:30Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/i18n/en/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Assessment Dashboard\",\n             \"studentExams\": \"Student Exams\",\n             \"students\": \"Students\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Student exams\",\n+            \"generateStudentExams\": \"Generate student exams\",\n+            \"searchForStudents\": \"Search for students by login or name (comma separated)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Result\",\n+            \"created\": \"Created\",\n+            \"View\": \"View\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjAyNQ==", "bodyText": "Should be lowercase and Ansicht", "url": "https://github.com/ls1intum/Artemis/pull/1639#discussion_r440316025", "createdAt": "2020-06-15T16:56:56Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -35,6 +35,16 @@\n             \"assessmentDashboard\": \"Bewertungstafel\",\n             \"studentExams\": \"Klausuren der Studenten\",\n             \"students\": \"Studenten\"\n+        },\n+        \"studentExams\": {\n+            \"studentExams\": \"Klausuren\",\n+            \"generateStudentExams\": \"Klausuren erstellen\",\n+            \"searchForStudents\": \"Suche nach Studenten Logins oder Namen (Komma getrennt)\",\n+            \"student\": \"Student\",\n+            \"result\": \"Ergebnis\",\n+            \"created\": \"Erstellt\",\n+            \"View\": \"Ansich\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "910b6e262d3f374a08fa0171ec0944a6fad75748"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab8ab0315743018ce8aea48e26bf8192047a03a", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/eab8ab0315743018ce8aea48e26bf8192047a03a", "committedDate": "2020-06-15T17:09:01Z", "message": "Change route for student exams from `studentExams` to `student-exams`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f628ff88368aa682259e41157e514f356513263f", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/f628ff88368aa682259e41157e514f356513263f", "committedDate": "2020-06-15T17:13:08Z", "message": "clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODQyMTY0", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430842164", "createdAt": "2020-06-15T17:17:54Z", "commit": {"oid": "8d91c7a4aaf307f53977de8468b962f5b72e0aac"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b99145b65ac090748be90864cedab7eeb99a1ca", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/0b99145b65ac090748be90864cedab7eeb99a1ca", "committedDate": "2020-06-15T17:21:43Z", "message": "unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODkwOTk4", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430890998", "createdAt": "2020-06-15T18:28:09Z", "commit": {"oid": "0b99145b65ac090748be90864cedab7eeb99a1ca"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTAxMjU0", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430901254", "createdAt": "2020-06-15T18:43:09Z", "commit": {"oid": "0b99145b65ac090748be90864cedab7eeb99a1ca"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b8f44ba326a46c4161a9f82055d826f7bfab4b4", "author": {"user": {"login": "sjagla27", "name": "Sebastian Jagla"}}, "url": "https://github.com/ls1intum/Artemis/commit/1b8f44ba326a46c4161a9f82055d826f7bfab4b4", "committedDate": "2020-06-15T19:50:11Z", "message": "Merge branch 'develop' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTY3Mjcx", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430967271", "createdAt": "2020-06-15T20:25:32Z", "commit": {"oid": "1b8f44ba326a46c4161a9f82055d826f7bfab4b4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTY3Mzcx", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430967371", "createdAt": "2020-06-15T20:25:41Z", "commit": {"oid": "1b8f44ba326a46c4161a9f82055d826f7bfab4b4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTY3Njcy", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430967672", "createdAt": "2020-06-15T20:26:08Z", "commit": {"oid": "1b8f44ba326a46c4161a9f82055d826f7bfab4b4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1504afa683b80a467d6b157785ad4bb2f64bcb78", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/1504afa683b80a467d6b157785ad4bb2f64bcb78", "committedDate": "2020-06-15T20:32:53Z", "message": "Merge branch 'develop' into exam/management/student-exam-overview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTczOTM4", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430973938", "createdAt": "2020-06-15T20:35:41Z", "commit": {"oid": "1b8f44ba326a46c4161a9f82055d826f7bfab4b4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTc2ODg0", "url": "https://github.com/ls1intum/Artemis/pull/1639#pullrequestreview-430976884", "createdAt": "2020-06-15T20:40:18Z", "commit": {"oid": "1504afa683b80a467d6b157785ad4bb2f64bcb78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2805, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}