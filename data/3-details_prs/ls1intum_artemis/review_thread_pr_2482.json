{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NzAwMjEw", "number": 2482, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1MzoxNlrOE-8IOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozMzowMlrOFIOGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMyMzE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseStudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1MzoxNlrOH8XLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDo0ODowOFrOH-TV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NjM0NQ==", "bodyText": "There is only one manual result for programming exercises. therefore a sorting for id is not needed.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r533056345", "createdAt": "2020-12-01T03:53:16Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseStudentParticipationRepository.java", "diffHunk": "@@ -27,7 +27,8 @@\n     Optional<ProgrammingExerciseStudentParticipation> findByIdWithLatestResultAndFeedbacksAndRelatedSubmissions(@Param(\"participationId\") Long participationId,\n             @Param(\"dateTime\") ZonedDateTime dateTime);\n \n-    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor where p.id = :participationId and (pr.assessmentType = 'MANUAL' or pr.assessmentType = 'SEMI_AUTOMATIC')\")\n+    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor\"\n+            + \" where p.id = :participationId and pr.id = (select max(prr.id) from p.results prr where prr.assessmentType = 'MANUAL' or prr.assessmentType = 'SEMI_AUTOMATIC')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f081f0365d1a7178a9bd8192bb61145dd0452b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5MDY3OA==", "bodyText": "Well with this PR there can be multiple :)", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r535090678", "createdAt": "2020-12-03T10:48:08Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseStudentParticipationRepository.java", "diffHunk": "@@ -27,7 +27,8 @@\n     Optional<ProgrammingExerciseStudentParticipation> findByIdWithLatestResultAndFeedbacksAndRelatedSubmissions(@Param(\"participationId\") Long participationId,\n             @Param(\"dateTime\") ZonedDateTime dateTime);\n \n-    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor where p.id = :participationId and (pr.assessmentType = 'MANUAL' or pr.assessmentType = 'SEMI_AUTOMATIC')\")\n+    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor\"\n+            + \" where p.id = :participationId and pr.id = (select max(prr.id) from p.results prr where prr.assessmentType = 'MANUAL' or prr.assessmentType = 'SEMI_AUTOMATIC')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NjM0NQ=="}, "originalCommit": {"oid": "a3f081f0365d1a7178a9bd8192bb61145dd0452b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMyNDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1Mzo1M1rOH8XL_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDoxNjoxNFrOIEfq1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NjUxMA==", "bodyText": "we should not set the completionDate if the result should still be in draft mode", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r533056510", "createdAt": "2020-12-01T03:53:53Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -106,6 +110,60 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    ProgrammingSubmission newSubmission = programmingSubmissionService.createSubmissionWithLastCommitHashForParticipation(participation, SubmissionType.MANUAL);\n+                    Result newResult = programmingSubmissionService.setNewResult(newSubmission);\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    newResult.setCompletionDate(manualResult.getCompletionDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f081f0365d1a7178a9bd8192bb61145dd0452b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4NDA4Ng==", "bodyText": "We decided to keep the completion state as is, so that tutors does not need to go through all submissions again.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r541584086", "createdAt": "2020-12-12T14:16:14Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -106,6 +110,60 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    ProgrammingSubmission newSubmission = programmingSubmissionService.createSubmissionWithLastCommitHashForParticipation(participation, SubmissionType.MANUAL);\n+                    Result newResult = programmingSubmissionService.setNewResult(newSubmission);\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    newResult.setCompletionDate(manualResult.getCompletionDate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NjUxMA=="}, "originalCommit": {"oid": "a3f081f0365d1a7178a9bd8192bb61145dd0452b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMzOTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDowMTo1MFrOH8XUbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDo1Mzo1NVrOH-TsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1ODY2OQ==", "bodyText": "Maybe we can do it like we did it on ProgrammingExerciseGradingService:462", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r533058669", "createdAt": "2020-12-01T04:01:50Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -106,6 +110,60 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    ProgrammingSubmission newSubmission = programmingSubmissionService.createSubmissionWithLastCommitHashForParticipation(participation, SubmissionType.MANUAL);\n+                    Result newResult = programmingSubmissionService.setNewResult(newSubmission);\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    newResult.setCompletionDate(manualResult.getCompletionDate());\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    for (Feedback feedback : result.getFeedbacks()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f081f0365d1a7178a9bd8192bb61145dd0452b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NjMzOA==", "bodyText": "Yes. \ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r535096338", "createdAt": "2020-12-03T10:53:55Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -106,6 +110,60 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    ProgrammingSubmission newSubmission = programmingSubmissionService.createSubmissionWithLastCommitHashForParticipation(participation, SubmissionType.MANUAL);\n+                    Result newResult = programmingSubmissionService.setNewResult(newSubmission);\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    newResult.setCompletionDate(manualResult.getCompletionDate());\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    for (Feedback feedback : result.getFeedbacks()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1ODY2OQ=="}, "originalCommit": {"oid": "a3f081f0365d1a7178a9bd8192bb61145dd0452b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTYzNDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDoxNTozMlrOIEfqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDoyMTowM1rOIEft4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4NDAwOA==", "bodyText": "rename the copyProgrammingAutomaticFeedbackForManualResult() -> copyFeedback()", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r541584008", "createdAt": "2020-12-12T14:15:32Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,47 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    Result newResult = programmingSubmissionService.setNewResult(result.getSubmission());\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    newResult.setCompletionDate(manualResult.getCompletionDate());\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    for (Feedback feedback : result.getFeedbacks()) {\n+                        Feedback newFeedback = feedback.copyProgrammingAutomaticFeedbackForManualResult();\n+                        newResult.addFeedback(newFeedback);\n+                    }\n+\n+                    for (Feedback feedback : manualResult.getFeedbacks()) {\n+                        if (feedback != null && feedback.getType() != FeedbackType.AUTOMATIC) {\n+                            Feedback newFeedback = feedback.copyProgrammingAutomaticFeedbackForManualResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f35234739aac601f8f2b3f66e64bfd4e932e489"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4NDg2Nw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r541584867", "createdAt": "2020-12-12T14:21:03Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,47 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    Result newResult = programmingSubmissionService.setNewResult(result.getSubmission());\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    newResult.setCompletionDate(manualResult.getCompletionDate());\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    for (Feedback feedback : result.getFeedbacks()) {\n+                        Feedback newFeedback = feedback.copyProgrammingAutomaticFeedbackForManualResult();\n+                        newResult.addFeedback(newFeedback);\n+                    }\n+\n+                    for (Feedback feedback : manualResult.getFeedbacks()) {\n+                        if (feedback != null && feedback.getType() != FeedbackType.AUTOMATIC) {\n+                            Feedback newFeedback = feedback.copyProgrammingAutomaticFeedbackForManualResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4NDAwOA=="}, "originalCommit": {"oid": "5f35234739aac601f8f2b3f66e64bfd4e932e489"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM2NTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNzoyN1rOIJ-sIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjo0NzoyOFrOIKjwfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTIwMA==", "bodyText": "Can it actually happen, that feedback == null here?", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547335200", "createdAt": "2020-12-22T15:17:27Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    // create a new manual result for the same submission as the automatic result\n+                    Result newResult = programmingSubmissionService.saveNewEmptyResult(result.getSubmission());\n+\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    // this makes it the most recent result, but optionally keeps the draft state of an unfinished manual result\n+                    newResult.setCompletionDate(manualResult.getCompletionDate() != null ? result.getCompletionDate().plusSeconds(1) : null);\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    // copy all feedback from the automatic result\n+                    for (Feedback feedback : result.getFeedbacks()) {\n+                        Feedback newFeedback = feedback.copyFeedback();\n+                        newResult.addFeedback(newFeedback);\n+                    }\n+\n+                    // copy only the non-automatic feedback from the manual result\n+                    for (Feedback feedback : manualResult.getFeedbacks()) {\n+                        if (feedback != null && feedback.getType() != FeedbackType.AUTOMATIC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ddaf7fe442faf894c5956e84a1514a25763a54"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0MjUyNg==", "bodyText": "I had that once when testing locally", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547942526", "createdAt": "2020-12-23T12:47:28Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    // create a new manual result for the same submission as the automatic result\n+                    Result newResult = programmingSubmissionService.saveNewEmptyResult(result.getSubmission());\n+\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    // this makes it the most recent result, but optionally keeps the draft state of an unfinished manual result\n+                    newResult.setCompletionDate(manualResult.getCompletionDate() != null ? result.getCompletionDate().plusSeconds(1) : null);\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    // copy all feedback from the automatic result\n+                    for (Feedback feedback : result.getFeedbacks()) {\n+                        Feedback newFeedback = feedback.copyFeedback();\n+                        newResult.addFeedback(newFeedback);\n+                    }\n+\n+                    // copy only the non-automatic feedback from the manual result\n+                    for (Feedback feedback : manualResult.getFeedbacks()) {\n+                        if (feedback != null && feedback.getType() != FeedbackType.AUTOMATIC) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTIwMA=="}, "originalCommit": {"oid": "d6ddaf7fe442faf894c5956e84a1514a25763a54"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQzNDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozNTo0OFrOIJ_Ujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjo0NzoyMVrOIKjwVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NTU1MA==", "bodyText": "We have similar statements in updateResultString(). We could factor this out into a new method to avoid code duplication.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547345550", "createdAt": "2020-12-22T15:35:48Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    // create a new manual result for the same submission as the automatic result\n+                    Result newResult = programmingSubmissionService.saveNewEmptyResult(result.getSubmission());\n+\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    // this makes it the most recent result, but optionally keeps the draft state of an unfinished manual result\n+                    newResult.setCompletionDate(manualResult.getCompletionDate() != null ? result.getCompletionDate().plusSeconds(1) : null);\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    // copy all feedback from the automatic result\n+                    for (Feedback feedback : result.getFeedbacks()) {\n+                        Feedback newFeedback = feedback.copyFeedback();\n+                        newResult.addFeedback(newFeedback);\n+                    }\n+\n+                    // copy only the non-automatic feedback from the manual result\n+                    for (Feedback feedback : manualResult.getFeedbacks()) {\n+                        if (feedback != null && feedback.getType() != FeedbackType.AUTOMATIC) {\n+                            Feedback newFeedback = feedback.copyFeedback();\n+                            newResult.addFeedback(newFeedback);\n+                        }\n+                    }\n+\n+                    // recalculate the score and set the result string\n+                    double maxScore = getMaxScoreRespectingZeroPointExercises(programmingExercise);\n+                    double points = programmingAssessmentService.calculateTotalScore(newResult);\n+                    newResult.setScore(points, maxScore);\n+\n+                    String resultString = result.getResultString() + \", \" + newResult.createResultString(points, maxScore);\n+                    newResult.setResultString(resultString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ddaf7fe442faf894c5956e84a1514a25763a54"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0MjQ4Ng==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547942486", "createdAt": "2020-12-23T12:47:21Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    // create a new manual result for the same submission as the automatic result\n+                    Result newResult = programmingSubmissionService.saveNewEmptyResult(result.getSubmission());\n+\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    // this makes it the most recent result, but optionally keeps the draft state of an unfinished manual result\n+                    newResult.setCompletionDate(manualResult.getCompletionDate() != null ? result.getCompletionDate().plusSeconds(1) : null);\n+                    newResult.setHasFeedback(manualResult.getHasFeedback());\n+                    newResult.setRated(manualResult.isRated());\n+\n+                    // copy all feedback from the automatic result\n+                    for (Feedback feedback : result.getFeedbacks()) {\n+                        Feedback newFeedback = feedback.copyFeedback();\n+                        newResult.addFeedback(newFeedback);\n+                    }\n+\n+                    // copy only the non-automatic feedback from the manual result\n+                    for (Feedback feedback : manualResult.getFeedbacks()) {\n+                        if (feedback != null && feedback.getType() != FeedbackType.AUTOMATIC) {\n+                            Feedback newFeedback = feedback.copyFeedback();\n+                            newResult.addFeedback(newFeedback);\n+                        }\n+                    }\n+\n+                    // recalculate the score and set the result string\n+                    double maxScore = getMaxScoreRespectingZeroPointExercises(programmingExercise);\n+                    double points = programmingAssessmentService.calculateTotalScore(newResult);\n+                    newResult.setScore(points, maxScore);\n+\n+                    String resultString = result.getResultString() + \", \" + newResult.createResultString(points, maxScore);\n+                    newResult.setResultString(resultString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NTU1MA=="}, "originalCommit": {"oid": "d6ddaf7fe442faf894c5956e84a1514a25763a54"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQ0MTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozNzoyOVrOIJ_Ybg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozNjoxMFrOIKjfXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NjU0Mg==", "bodyText": "We could factor this block out into an own method to keep the top level grading method short and simpler.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547346542", "createdAt": "2020-12-22T15:37:29Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ddaf7fe442faf894c5956e84a1514a25763a54"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzODE0Mw==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547938143", "createdAt": "2020-12-23T12:36:10Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NjU0Mg=="}, "originalCommit": {"oid": "d6ddaf7fe442faf894c5956e84a1514a25763a54"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTU5MTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoxODoxMlrOIKAwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozMTo1M1rOIKjYzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2OTE1Nw==", "bodyText": "I think we should use the latest result, not the first when iterating through a set. It is not impossible that a participation has two manual results (be it later because of the second correction). Could we use findLatestResult() here?", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547369157", "createdAt": "2020-12-22T16:18:12Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3OTQ1Mg==", "bodyText": "The repository method here is\nfindStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor\n\nbut the one in the changes above is\nfindByIdWithLatestManualResultAndFeedbacksAndRelatedSubmissionsAndAssessor\n\nIn particular, the first one mentions \"Results\" and the latter only \"Result\". Is this something we need to worry about?", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547379452", "createdAt": "2020-12-22T16:37:39Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2OTE1Nw=="}, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNDEzNg==", "bodyText": "There is only ever one result returned from the repository method.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547934136", "createdAt": "2020-12-23T12:25:52Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2OTE1Nw=="}, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNjQ2Mw==", "bodyText": "I will rename this to singular.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547936463", "createdAt": "2020-12-23T12:31:53Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2OTE1Nw=="}, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTYwNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoyMzowNlrOIKA6wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozMzowOVrOIKjatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MTcxNA==", "bodyText": "Just a thought: I hope it is safe/tested here that the tutors will not see two unfinished results (and only the latest one is used and submitted).", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547371714", "createdAt": "2020-12-22T16:23:06Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    // create a new manual result for the same submission as the automatic result\n+                    Result newResult = programmingSubmissionService.saveNewEmptyResult(result.getSubmission());\n+\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    // this makes it the most recent result, but optionally keeps the draft state of an unfinished manual result\n+                    newResult.setCompletionDate(manualResult.getCompletionDate() != null ? result.getCompletionDate().plusSeconds(1) : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNjk0OQ==", "bodyText": "Yes only the latest one is then used for further manual assessments.", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547936949", "createdAt": "2020-12-23T12:33:09Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -115,6 +119,58 @@ public ProgrammingExerciseGradingService(ProgrammingExerciseTestCaseService test\n                 // This method will return without triggering the build if the submission is not of type TEST.\n                 triggerTemplateBuildIfTestCasesChanged(programmingExercise.getId(), result.getId());\n             }\n+\n+            if (!isSolutionParticipation && !isTemplateParticipation) {\n+\n+                // check if a manual result exists, if so we want to clone and update this with the new updated test-case and sca feedback\n+                Optional<ProgrammingExerciseStudentParticipation> studentParticipation = programmingExerciseParticipationService\n+                        .findStudentParticipationWithLatestManualResultsAndFeedbacksAndRelatedSubmissionsAndAssessor(participation.getId());\n+\n+                if (studentParticipation.isPresent() && studentParticipation.get().getResults().stream().findFirst().isPresent()) {\n+\n+                    Result manualResult = studentParticipation.get().getResults().stream().findFirst().get();\n+\n+                    // create a new manual result for the same submission as the automatic result\n+                    Result newResult = programmingSubmissionService.saveNewEmptyResult(result.getSubmission());\n+\n+                    newResult.setAssessor(manualResult.getAssessor());\n+                    newResult.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    // this makes it the most recent result, but optionally keeps the draft state of an unfinished manual result\n+                    newResult.setCompletionDate(manualResult.getCompletionDate() != null ? result.getCompletionDate().plusSeconds(1) : null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MTcxNA=="}, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTY0MDM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseStudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozMzowMlrOIKBPSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozNTo1OVrOIKjfHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3Njk3MQ==", "bodyText": "Could we use better names instead of pr and prr? At least the last one does express what it is in my eyes, or is this to indicate that we have multiple results at this point? Would prs be better or worse?", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547376971", "createdAt": "2020-12-22T16:33:02Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseStudentParticipationRepository.java", "diffHunk": "@@ -27,7 +27,8 @@\n     Optional<ProgrammingExerciseStudentParticipation> findByIdWithLatestResultAndFeedbacksAndRelatedSubmissions(@Param(\"participationId\") Long participationId,\n             @Param(\"dateTime\") ZonedDateTime dateTime);\n \n-    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor where p.id = :participationId and (pr.assessmentType = 'MANUAL' or pr.assessmentType = 'SEMI_AUTOMATIC')\")\n+    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor\"\n+            + \" where p.id = :participationId and pr.id = (select max(prr.id) from p.results prr where prr.assessmentType = 'MANUAL' or prr.assessmentType = 'SEMI_AUTOMATIC')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzODA3Ng==", "bodyText": "This is also used at other places", "url": "https://github.com/ls1intum/Artemis/pull/2482#discussion_r547938076", "createdAt": "2020-12-23T12:35:59Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseStudentParticipationRepository.java", "diffHunk": "@@ -27,7 +27,8 @@\n     Optional<ProgrammingExerciseStudentParticipation> findByIdWithLatestResultAndFeedbacksAndRelatedSubmissions(@Param(\"participationId\") Long participationId,\n             @Param(\"dateTime\") ZonedDateTime dateTime);\n \n-    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor where p.id = :participationId and (pr.assessmentType = 'MANUAL' or pr.assessmentType = 'SEMI_AUTOMATIC')\")\n+    @Query(\"select p from ProgrammingExerciseStudentParticipation p left join fetch p.results pr left join fetch pr.feedbacks left join fetch pr.submission left join fetch pr.assessor\"\n+            + \" where p.id = :participationId and pr.id = (select max(prr.id) from p.results prr where prr.assessmentType = 'MANUAL' or prr.assessmentType = 'SEMI_AUTOMATIC')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3Njk3MQ=="}, "originalCommit": {"oid": "d437b18a4e0778952d35778cdc0ca98f67733212"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4298, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}