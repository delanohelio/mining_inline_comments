{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODE3Mjgx", "number": 2068, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo0MzowOFrOEebFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozODoxN1rOEm__Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzM2NTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo0MzowOFrOHKER-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo0Njo0OFrOHK3D8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxNzk0NA==", "bodyText": "I am not sure if this is a good approach. In the future, we will have only one programming submission per commit (that was pushed to the remote). Then it could happen that multiple builds add multiple build logs.\nUsers might see the same build errors multiple times then.\nI would suggest that we simply replace all build logs here. In case they are identical, this makes more sense.\nIn case they have changed, the old ones might not be valid any more.", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r480317944", "createdAt": "2020-08-31T18:43:08Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +452,20 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntries(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+                // Store logs into database. Append logs of multiple jobs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0282c455135fa306b55236d9579f8b966557d0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMTExNw==", "bodyText": "I see your point, however this comment is regarding multiple jobs within one build (-> one submission).\nWe currently only use one job but as the bamboo plugin offers a set of jobs, we should take log entries of every job into account.\nSo I suggest to clear the log entries before the for-loop and then adding the log entries of all jobs (although we most likely only have one) to the cleared list.", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r480321117", "createdAt": "2020-08-31T18:49:05Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +452,20 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntries(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+                // Store logs into database. Append logs of multiple jobs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxNzk0NA=="}, "originalCommit": {"oid": "fd0282c455135fa306b55236d9579f8b966557d0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2MzMwNw==", "bodyText": "sounds good, just make sure that the same logs are not added twice ;-)", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r481063307", "createdAt": "2020-09-01T11:19:57Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +452,20 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntries(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+                // Store logs into database. Append logs of multiple jobs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxNzk0NA=="}, "originalCommit": {"oid": "fd0282c455135fa306b55236d9579f8b966557d0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0OTkzOA==", "bodyText": "I've checked that now :)", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r481149938", "createdAt": "2020-09-01T13:46:48Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +452,20 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntries(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+                // Store logs into database. Append logs of multiple jobs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxNzk0NA=="}, "originalCommit": {"oid": "fd0282c455135fa306b55236d9579f8b966557d0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk0ODI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1NzoyNFrOHXS5EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozMDowM1rOHXUCpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4ODgxNg==", "bodyText": "Maybe it's me but this comment is hard to read", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494188816", "createdAt": "2020-09-24T09:57:24Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +463,30 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+\n+                List<BuildLogEntry> buildLogEntries = new ArrayList<>();\n+\n+                // Store logs into database. Append logs of multiple jobs.\n+                for (var job : buildResult.getBuild().getJobs()) {\n+                    for (var bambooLog : job.getLogs()) {\n+                        // We have to unescape the HTML as otherwise symbols like '<' are not displayed correctly\n+                        buildLogEntries.add(new BuildLogEntry(bambooLog.getDate(), StringEscapeUtils.unescapeHtml(bambooLog.getLog()), programmingSubmission));\n+                    }\n+                }\n+\n+                // Set logs that as we received new logs and don't want logs to be stored twice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjczMg==", "bodyText": "I agree :D Maybe: Set the received logs in order to avoid duplicate entries", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494206732", "createdAt": "2020-09-24T10:28:22Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +463,30 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+\n+                List<BuildLogEntry> buildLogEntries = new ArrayList<>();\n+\n+                // Store logs into database. Append logs of multiple jobs.\n+                for (var job : buildResult.getBuild().getJobs()) {\n+                    for (var bambooLog : job.getLogs()) {\n+                        // We have to unescape the HTML as otherwise symbols like '<' are not displayed correctly\n+                        buildLogEntries.add(new BuildLogEntry(bambooLog.getDate(), StringEscapeUtils.unescapeHtml(bambooLog.getLog()), programmingSubmission));\n+                    }\n+                }\n+\n+                // Set logs that as we received new logs and don't want logs to be stored twice", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4ODgxNg=="}, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNzY1NA==", "bodyText": "Was probably quite late when I wrote that comment :D Will change it.", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494207654", "createdAt": "2020-09-24T10:30:03Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +463,30 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());\n+            if (optionalProgrammingSubmission.isPresent()) {\n+                programmingSubmission = optionalProgrammingSubmission.get();\n+\n+                List<BuildLogEntry> buildLogEntries = new ArrayList<>();\n+\n+                // Store logs into database. Append logs of multiple jobs.\n+                for (var job : buildResult.getBuild().getJobs()) {\n+                    for (var bambooLog : job.getLogs()) {\n+                        // We have to unescape the HTML as otherwise symbols like '<' are not displayed correctly\n+                        buildLogEntries.add(new BuildLogEntry(bambooLog.getDate(), StringEscapeUtils.unescapeHtml(bambooLog.getLog()), programmingSubmission));\n+                    }\n+                }\n+\n+                // Set logs that as we received new logs and don't want logs to be stored twice", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4ODgxNg=="}, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk1NTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1OTozMlrOHXS9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozNToyOVrOHXUOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MDAxOQ==", "bodyText": "I'm not really into our Bamboo / Jenkins setup. But why is there a method retrieveLatestBuildLogsFromJenkins in BambooService.java?", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494190019", "createdAt": "2020-09-24T09:59:32Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -831,14 +865,23 @@ private Long calculateScoreForResult(Result result, int skippedTests) {\n         return null;\n     }\n \n+    private List<BuildLogEntry> retrieveLatestBuildLogsFromDatabase(ProgrammingSubmission programmingSubmission) {\n+        Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());\n+        if (optionalProgrammingSubmission.isPresent()) {\n+            return optionalProgrammingSubmission.get().getBuildLogEntries();\n+        }\n+\n+        return List.of();\n+    }\n+\n     /**\n-     * Performs a request to the Bamboo REST API to retrieve the build log of the latest build.\n+     * Load the build log from the database.\n+     * Performs a request to the Bamboo REST API to retrieve the build log of the latest build, if the log is not available in the database.\n      *\n      * @param planKey to identify the build logs with.\n      * @return the list of retrieved build logs.\n      */\n-    //TODO: save this on the Artemis server, e.g. in the result class so that Artemis does not need to retrieve it every time\n-    public List<BuildLogEntry> retrieveLatestBuildLogs(String planKey) {\n+    private List<BuildLogEntry> retrieveLatestBuildLogsFromJenkins(String planKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxMDYyMQ==", "bodyText": "Probably some wrong copy pasting :D Changed it.", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494210621", "createdAt": "2020-09-24T10:35:29Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -831,14 +865,23 @@ private Long calculateScoreForResult(Result result, int skippedTests) {\n         return null;\n     }\n \n+    private List<BuildLogEntry> retrieveLatestBuildLogsFromDatabase(ProgrammingSubmission programmingSubmission) {\n+        Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());\n+        if (optionalProgrammingSubmission.isPresent()) {\n+            return optionalProgrammingSubmission.get().getBuildLogEntries();\n+        }\n+\n+        return List.of();\n+    }\n+\n     /**\n-     * Performs a request to the Bamboo REST API to retrieve the build log of the latest build.\n+     * Load the build log from the database.\n+     * Performs a request to the Bamboo REST API to retrieve the build log of the latest build, if the log is not available in the database.\n      *\n      * @param planKey to identify the build logs with.\n      * @return the list of retrieved build logs.\n      */\n-    //TODO: save this on the Artemis server, e.g. in the result class so that Artemis does not need to retrieve it every time\n-    public List<BuildLogEntry> retrieveLatestBuildLogs(String planKey) {\n+    private List<BuildLogEntry> retrieveLatestBuildLogsFromJenkins(String planKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MDAxOQ=="}, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk2NDY1OnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20200827182434_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowMTozMFrOHXTC9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozNToxOVrOHXUN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MTM1MQ==", "bodyText": "Normally we use the timestamp of the file (20200827182434) as \u00ecd` of the chageSet :-)", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494191351", "createdAt": "2020-09-24T10:01:30Z", "author": {"login": "sascha11110"}, "path": "src/main/resources/config/liquibase/changelog/20200827182434_changelog.xml", "diffHunk": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"sleiss\" id=\"1598545508786-1\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxMDUxOQ==", "bodyText": "I auto-generated them using liquibase but changed the id now ;-) Good catch!", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494210519", "createdAt": "2020-09-24T10:35:19Z", "author": {"login": "sleiss"}, "path": "src/main/resources/config/liquibase/changelog/20200827182434_changelog.xml", "diffHunk": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <changeSet author=\"sleiss\" id=\"1598545508786-1\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MTM1MQ=="}, "originalCommit": {"oid": "5a2faa1a40298a8c6d0dc44be59a5d50f55987c2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzE2NzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/BuildLogEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDo1OTozNFrOHXU-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxMDoyMlrOHXXaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyMzA3OQ==", "bodyText": "Now that this class becomes an entity, you should also take the id into account for equals and for hashCode", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494223079", "createdAt": "2020-09-24T10:59:34Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/BuildLogEntry.java", "diffHunk": "@@ -33,6 +74,14 @@ public void setLog(String log) {\n         this.log = log;\n     }\n \n+    public ProgrammingSubmission getProgrammingSubmission() {\n+        return programmingSubmission;\n+    }\n+\n+    public void setProgrammingSubmission(ProgrammingSubmission programmingSubmission) {\n+        this.programmingSubmission = programmingSubmission;\n+    }\n+\n     @Override\n     public boolean equals(Object object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87338cc930a681007b34c6e392c7f4a19580ed9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2Mjc5OA==", "bodyText": "Thanks, I changed it.", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494262798", "createdAt": "2020-09-24T12:10:22Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/BuildLogEntry.java", "diffHunk": "@@ -33,6 +74,14 @@ public void setLog(String log) {\n         this.log = log;\n     }\n \n+    public ProgrammingSubmission getProgrammingSubmission() {\n+        return programmingSubmission;\n+    }\n+\n+    public void setProgrammingSubmission(ProgrammingSubmission programmingSubmission) {\n+        this.programmingSubmission = programmingSubmission;\n+    }\n+\n     @Override\n     public boolean equals(Object object) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyMzA3OQ=="}, "originalCommit": {"oid": "e87338cc930a681007b34c6e392c7f4a19580ed9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzI5NjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozODoxN1rOHXWOTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxODozMlrOHXXs0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MzQwNQ==", "bodyText": "Why do you fetch the programming submission with build logs here? Could you just use the programmingSubmission from a line above?", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494243405", "createdAt": "2020-09-24T11:38:17Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +470,30 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ce5b9adc4d884e47321a0a5fba8fb866bbd14a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NzYwMA==", "bodyText": "Good catch! I first thought that, in order to set the build logs, they have to be present (i.e. not be a proxy), but as we are only setting them (and not getting), it is not required. I've changed it.", "url": "https://github.com/ls1intum/Artemis/pull/2068#discussion_r494267600", "createdAt": "2020-09-24T12:18:32Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -452,7 +470,30 @@ public Result onBuildCompletedNew(ProgrammingExerciseParticipation participation\n             final var hasArtifact = buildResult.getBuild().isArtifact();\n             programmingSubmission.setBuildArtifact(hasArtifact);\n             programmingSubmission.setBuildFailed(result.getResultString().equals(\"No tests found\"));\n-            programmingSubmissionRepository.save(programmingSubmission);\n+\n+            programmingSubmission = programmingSubmissionRepository.save(programmingSubmission);\n+\n+            Optional<ProgrammingSubmission> optionalProgrammingSubmission = programmingSubmissionRepository.findWithEagerBuildLogEntriesById(programmingSubmission.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MzQwNQ=="}, "originalCommit": {"oid": "c0ce5b9adc4d884e47321a0a5fba8fb866bbd14a"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4657, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}