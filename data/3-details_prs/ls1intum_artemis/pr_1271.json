{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Nzk1MzY2", "number": 1271, "title": "Chore/test coverage/file", "bodyText": "Checklist\n\n Server: I added multiple integration tests (Spring) related to the features\n\nMotivation and Context\n\n\nThis PR is part of the initiative to increase the test coverage for the REST controllers.\nDescription\n\n\ncreated new class FileIntegrationTest.java\nadded several testcases to cover all REST calls and at least 80% line coverage", "createdAt": "2020-03-17T12:04:21Z", "url": "https://github.com/ls1intum/Artemis/pull/1271", "merged": true, "mergeCommit": {"oid": "9062c40a0a354e737165f9bf406596404eecc2ec"}, "closed": true, "closedAt": "2020-03-20T10:47:10Z", "author": {"login": "clemenszuck"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMB19agH2gAyMzg5Nzk1MzY2OjEzMmI1ZDU3OGYzZDE3MmU5OTVjOGZjODcxMGEyNjZjYWZhMjhlNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPdS7WAH2gAyMzg5Nzk1MzY2OjQ3MDcyYTcyODU1M2E1YzI0OWUxNjg2NDE5MmUzODlmNDM0MDdjNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "132b5d578f3d172e995c8fc8710a266cafa28e57", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/132b5d578f3d172e995c8fc8710a266cafa28e57", "committedDate": "2020-03-09T18:02:01Z", "message": "created FileIntegrationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca3e32fd859c3605ad8c37afd1ed10c338615ba", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/1ca3e32fd859c3605ad8c37afd1ed10c338615ba", "committedDate": "2020-03-09T18:06:08Z", "message": "created FileIntegrationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b18eaa45714cd80be2232941566155b28a7dc6f", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/6b18eaa45714cd80be2232941566155b28a7dc6f", "committedDate": "2020-03-10T16:25:38Z", "message": "Added several testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea688bca0a870200946392003f424def09aabf91", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/ea688bca0a870200946392003f424def09aabf91", "committedDate": "2020-03-17T08:28:44Z", "message": "Added test for lecture attachments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/08be21c336684808443efecfe5d242e8b15a28e2", "committedDate": "2020-03-17T12:19:35Z", "message": "fix java code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTg1MTEw", "url": "https://github.com/ls1intum/Artemis/pull/1271#pullrequestreview-375985110", "createdAt": "2020-03-17T12:25:39Z", "commit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNTo0MFrOF3Z7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNTo0MFrOF3Z7Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg==", "bodyText": "This method throws an error while setting up the bitbucket project (line 132/133): org.springframework.web.client.HttpClientErrorException$Unauthorized: 401\nWhat might I do wrong here? Is there an easier way to upload/create a template file, to test the GET request?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393640742", "createdAt": "2020-03-17T12:25:40Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTg2NDU5", "url": "https://github.com/ls1intum/Artemis/pull/1271#pullrequestreview-375986459", "createdAt": "2020-03-17T12:27:33Z", "commit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNzozM1rOF3Z_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNzozM1rOF3Z_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MTg1NQ==", "bodyText": "This GET request failes, because the attachment file cannot be found. I created and uploaded the file and moved it to the correct folder. What might I be missing here?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393641855", "createdAt": "2020-03-17T12:27:33Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetCourseIcon() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"icon.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String iconPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.COURSE_ICON_FILEPATH, course.getId());\n+\n+        course.setCourseIcon(iconPath);\n+        courseRepo.save(course);\n+\n+        String receivedIcon = request.get(iconPath, HttpStatus.OK, String.class);\n+        assertThat(receivedIcon).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragAndDropBackgroundFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String backgroundPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_AND_DROP_BACKGROUND_FILEPATH, dragAndDropQuestion.getId());\n+\n+        dragAndDropQuestion.setBackgroundFilePath(backgroundPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(backgroundPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragItemFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        DragItem dragItem = dragAndDropQuestion.getDragItems().get(0);\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String dragItemPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_ITEM_FILEPATH, dragItem.getId());\n+\n+        dragItem.setPictureFilePath(dragItemPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(dragItemPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetFileUploadSubmission() throws Exception {\n+        database.addCourseWithTwoFileUploadExercise();\n+        FileUploadExercise fileUploadExercise = (FileUploadExercise) exerciseRepo.findAll().get(0);\n+        FileUploadSubmission fileUploadSubmission = ModelFactory.generateFileUploadSubmission(true);\n+        fileUploadSubmission = database.addFileUploadSubmission(fileUploadExercise, fileUploadSubmission, \"student1\");\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String filePath = fileService.manageFilesForUpdatedFilePath(null, responsePath,\n+                fileUploadSubmission.buildFilePath(fileUploadExercise.getId(), fileUploadSubmission.getId()), fileUploadSubmission.getId(), true);\n+\n+        fileUploadSubmission.setFilePath(filePath);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/file.png\", HttpStatus.OK, String.class);\n+\n+        String receivedFile = request.get(fileUploadSubmission.getFilePath() + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);\n+        assertThat(receivedFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetLectureAttachment() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture(true);\n+\n+        Attachment attachment = ModelFactory.generateAttachment(ZonedDateTime.now(), lecture);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"attachment.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String attachmentPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.LECTURE_ATTACHMENT_FILEPATH, lecture.getId(), true);\n+\n+        attachment.setLink(attachmentPath);\n+        lecture.addAttachments(attachment);\n+        lectureRepo.save(lecture);\n+        attachmentRepo.save(attachment);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/attachment.png\", HttpStatus.OK, String.class);\n+\n+        String receivedAttachment = request.get(attachmentPath + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca6af72f5c9214455b72fbe5dadeaf48e5b6607", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/1ca6af72f5c9214455b72fbe5dadeaf48e5b6607", "committedDate": "2020-03-17T17:46:14Z", "message": "Added comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8deb2d11af0165c037bc187d18d8f64fbaac2203", "author": {"user": {"login": "maxr96", "name": null}}, "url": "https://github.com/ls1intum/Artemis/commit/8deb2d11af0165c037bc187d18d8f64fbaac2203", "committedDate": "2020-03-17T20:39:55Z", "message": "Build correct attachment path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe0fc3341f531647b51cd07874cf65b1c75bc2b", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/9fe0fc3341f531647b51cd07874cf65b1c75bc2b", "committedDate": "2020-03-19T14:43:45Z", "message": "Disabled test to get template file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ea81c7500470cedb9936a1909aa5ecbb13df65", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/39ea81c7500470cedb9936a1909aa5ecbb13df65", "committedDate": "2020-03-19T14:46:23Z", "message": "Merge branch 'develop' into chore/test-coverage/file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "817ac3e83aed95a10000578f3db45f0d29865678", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/817ac3e83aed95a10000578f3db45f0d29865678", "committedDate": "2020-03-19T14:49:16Z", "message": "Merge branch 'develop' into chore/test-coverage/file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba08b3d04b16b8f16b2a8df953e1b4ac13d72a57", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ba08b3d04b16b8f16b2a8df953e1b4ac13d72a57", "committedDate": "2020-03-20T07:02:42Z", "message": "Merge branch 'develop' into chore/test-coverage/file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1538f117471c93604d928110e1eed07e26dfd0ca", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/1538f117471c93604d928110e1eed07e26dfd0ca", "committedDate": "2020-03-20T07:16:35Z", "message": "properly implement testGetTemplateFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4b98a7cd1ea0c61ba0b78b00ffdf6a5e1cf4b89", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/c4b98a7cd1ea0c61ba0b78b00ffdf6a5e1cf4b89", "committedDate": "2020-03-20T09:32:17Z", "message": "improve tests and fix wrong error message during lecture attachment file upload with wrong file type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MzM5MTk3", "url": "https://github.com/ls1intum/Artemis/pull/1271#pullrequestreview-378339197", "createdAt": "2020-03-20T09:40:21Z", "commit": {"oid": "c4b98a7cd1ea0c61ba0b78b00ffdf6a5e1cf4b89"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfd5bf099ed6b4da2513c7c2030a7ad61a352285", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/bfd5bf099ed6b4da2513c7c2030a7ad61a352285", "committedDate": "2020-03-20T09:41:40Z", "message": "fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MzQwNjE5", "url": "https://github.com/ls1intum/Artemis/pull/1271#pullrequestreview-378340619", "createdAt": "2020-03-20T09:42:41Z", "commit": {"oid": "c4b98a7cd1ea0c61ba0b78b00ffdf6a5e1cf4b89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47072a728553a5c249e16864192e389f43407c45", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/47072a728553a5c249e16864192e389f43407c45", "committedDate": "2020-03-20T09:42:52Z", "message": "Merge branch 'develop' into chore/test-coverage/file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3237, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}