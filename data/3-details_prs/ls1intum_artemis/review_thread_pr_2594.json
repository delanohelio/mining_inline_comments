{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MjA3Mzg0", "number": 2594, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MDoxN1rOFIOd6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1ODo0N1rOFJ0hZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTY5OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/config/liquibase/changelog/20201214203018_changelog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MDoxN1rOIKBy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MDozMlrOIKBzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NjA2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <column name=\"number_of_correction_rounds_in_exam\" type=\"INT\" defaultValueNumeric=\"1\"/>\n          \n          \n            \n                        <column name=\"number_of_correction_rounds\" type=\"INT\" defaultValueNumeric=\"1\"/>", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547386064", "createdAt": "2020-12-22T16:50:17Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20201214203018_changelog.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.1.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd\">\n+    <changeSet author=\"ruscher\" id=\"20201214203018\">\n+        <addColumn tableName=\"exam\">\n+            <column name=\"number_of_correction_rounds_in_exam\" type=\"INT\" defaultValueNumeric=\"1\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NjE4MA==", "bodyText": "maybe even only correction_rounds", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547386180", "createdAt": "2020-12-22T16:50:32Z", "author": {"login": "krusche"}, "path": "src/main/resources/config/liquibase/changelog/20201214203018_changelog.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\" xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\" xmlns:pro=\"http://www.liquibase.org/xml/ns/pro\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.1.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd\">\n+    <changeSet author=\"ruscher\" id=\"20201214203018\">\n+        <addColumn tableName=\"exam\">\n+            <column name=\"number_of_correction_rounds_in_exam\" type=\"INT\" defaultValueNumeric=\"1\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NjA2NA=="}, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTcwOTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MzoyOFrOIKB45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozMjoxNFrOIKDD8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NzYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AND r.submission.submitted = TRUE\n          \n          \n            \n                        AND s.submitted = TRUE", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547387620", "createdAt": "2020-12-22T16:53:28Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MDg1Mg==", "bodyText": "not sure if this would work, but I don't see a reason to navigate from submission to result and then back to submission", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547390852", "createdAt": "2020-12-22T16:59:39Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NzYyMA=="}, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNjgzMw==", "bodyText": "yeah, that's right, it should work. We'll try it. The r.submission.submitted comes from the query we used as a basis for ours. There wasn't a join to submission, so it was necessary before.", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547406833", "createdAt": "2020-12-22T17:32:14Z", "author": {"login": "SimonEntholzer"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NzYyMA=="}, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTcwOTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1Mzo0MlrOIKB5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozMzowMVrOIKDFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4Nzc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n          \n          \n            \n                        AND (p.exercise.dueDate IS NULL OR s.submissionDate <= p.exercise.dueDate)", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547387740", "createdAt": "2020-12-22T16:53:42Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE\n+            AND r.completionDate IS NOT NULL\n+            AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNzE2Nw==", "bodyText": "same as before, this should work", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547407167", "createdAt": "2020-12-22T17:33:01Z", "author": {"login": "SimonEntholzer"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE\n+            AND r.completionDate IS NOT NULL\n+            AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4Nzc0MA=="}, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTcyNTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1ODoxNVrOIKCCig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0MTo1MVrOIKDV3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MDA5MA==", "bodyText": "I don't understand this statement. can you add a comment to explain it", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547390090", "createdAt": "2020-12-22T16:58:15Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE\n+            AND r.completionDate IS NOT NULL\n+            AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n+            AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\n+            AND :correctionRound = 1L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMTQyMw==", "bodyText": "At the moment the 1L is only the placeholder for the subquery that gets the number of results for all submissions. We didn't include it here so we can test all other implemented features, without the query throwing an exception.\nWe tried different things like e.g. AND :correctionRound = (select count(s.results) from s) but get an org.hibernate.exception.SQLGrammarException: could not extract ResultSet exception. We are still trying to figure out why it does not work", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547411423", "createdAt": "2020-12-22T17:41:51Z", "author": {"login": "SimonEntholzer"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -175,6 +175,21 @@ AND NOT EXISTS (SELECT prs FROM p.results prs\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r\n+            WHERE p.exercise.id = :exerciseId\n+            AND s.id = (select max(id) from p.submissions)\n+            AND r.assessor IS NOT NULL\n+            AND r.rated = TRUE\n+            AND r.submission.submitted = TRUE\n+            AND r.completionDate IS NOT NULL\n+            AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n+            AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\n+            AND :correctionRound = 1L", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MDA5MA=="}, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTcyOTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1OToxMVrOIKCEqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1OToxMVrOIKCEqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MDYzNQ==", "bodyText": "same suggestions as above.", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r547390635", "createdAt": "2020-12-22T16:59:11Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "diffHunk": "@@ -92,8 +92,24 @@\n     @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = TRUE AND r.submission.submitted = TRUE AND r.completionDate IS NOT NULL AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate) AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n     long countNumberOfFinishedAssessmentsForExerciseIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND r.completionDate IS NOT NULL AND p.exercise.dueDate IS NOT NULL AND r.submission.submissionDate > p.exercise.dueDate\")\n-    long countNumberOfFinishedLateAssessmentsForExercise(@Param(\"exerciseId\") Long exerciseId);\n+    @Query(\"\"\"\n+\n+            SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.submissions s  left join s.results r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb25f39553a3b772015b3ec2b2cfd44f920826d5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTMzMjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzoyMjoxNFrOIL5bjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDo1NDo0MlrOIMu3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NjE5MA==", "bodyText": "I this not relevant for the future? Then it could be removed", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549346190", "createdAt": "2020-12-28T13:22:14Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "diffHunk": "@@ -92,8 +92,30 @@\n     @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = TRUE AND r.submission.submitted = TRUE AND r.completionDate IS NOT NULL AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate) AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n     long countNumberOfFinishedAssessmentsForExerciseIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND r.completionDate IS NOT NULL AND p.exercise.dueDate IS NOT NULL AND r.submission.submissionDate > p.exercise.dueDate\")\n-    long countNumberOfFinishedLateAssessmentsForExercise(@Param(\"exerciseId\") Long exerciseId);\n+    /**\n+     * @param exerciseId\n+     * @param correctionRound\n+     * @return the number of completed assessments for the specified correction round of an exam exercise\n+     */\n+    @Query(\"\"\"\n+               SELECT COUNT(DISTINCT p)\n+               FROM StudentParticipation p WHERE p.exercise.id = :exerciseId AND\n+                            (SELECT COUNT(r)\n+                            FROM Result r\n+                            WHERE r.assessor IS NOT NULL\n+                                AND r.rated = TRUE\n+                                AND r.submission = (select max(id) from p.submissions)\n+                                AND r.submission.submitted = TRUE\n+                                AND r.completionDate IS NOT NULL\n+                                AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n+                                AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\n+                            ) = :correctionRound\n+            \"\"\")\n+    long countNumberOfFinishedAssessmentsByCorrectionRoundsAndExerciseIdIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId, @Param(\"correctionRound\") Long correctionRound);\n+\n+    // @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fce0ccd74a2c424404a87dc73d4af69ac60b74"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyMTY4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r550221689", "createdAt": "2020-12-30T14:54:42Z", "author": {"login": "nicolasruscher"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "diffHunk": "@@ -92,8 +92,30 @@\n     @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = TRUE AND r.submission.submitted = TRUE AND r.completionDate IS NOT NULL AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate) AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n     long countNumberOfFinishedAssessmentsForExerciseIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND r.completionDate IS NOT NULL AND p.exercise.dueDate IS NOT NULL AND r.submission.submissionDate > p.exercise.dueDate\")\n-    long countNumberOfFinishedLateAssessmentsForExercise(@Param(\"exerciseId\") Long exerciseId);\n+    /**\n+     * @param exerciseId\n+     * @param correctionRound\n+     * @return the number of completed assessments for the specified correction round of an exam exercise\n+     */\n+    @Query(\"\"\"\n+               SELECT COUNT(DISTINCT p)\n+               FROM StudentParticipation p WHERE p.exercise.id = :exerciseId AND\n+                            (SELECT COUNT(r)\n+                            FROM Result r\n+                            WHERE r.assessor IS NOT NULL\n+                                AND r.rated = TRUE\n+                                AND r.submission = (select max(id) from p.submissions)\n+                                AND r.submission.submitted = TRUE\n+                                AND r.completionDate IS NOT NULL\n+                                AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n+                                AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\n+                            ) = :correctionRound\n+            \"\"\")\n+    long countNumberOfFinishedAssessmentsByCorrectionRoundsAndExerciseIdIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId, @Param(\"correctionRound\") Long correctionRound);\n+\n+    // @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NjE5MA=="}, "originalCommit": {"oid": "70fce0ccd74a2c424404a87dc73d4af69ac60b74"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTQzNzI4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxMDoxNFrOIL6Vbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToxMToxOFrOIMKoIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MTAwNg==", "bodyText": "Just a suggestion but maybe we rename this method so we know it handles specifically latestSubmissions like convertLatestSubmissionFromServer? We have similar methods with this name and usually they just convert the given object, here more is done and this should show in the method name i guess", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549361006", "createdAt": "2020-12-28T14:10:14Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -569,13 +571,18 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n         const submissions = res.body!;\n         const convertedSubmissions: ProgrammingSubmission[] = [];\n         for (const submission of submissions) {\n-            const latestResult = getLatestSubmissionResult(submission);\n-            setLatestSubmissionResult(submission, latestResult);\n+            this.convertItemFromServer(submission);\n             convertedSubmissions.push({ ...submission });\n         }\n         return res.clone({ body: convertedSubmissions });\n     }\n \n+    private convertItemFromServer(programmingSubmission: ProgrammingSubmission): ProgrammingSubmission {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fce0ccd74a2c424404a87dc73d4af69ac60b74"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNzkzOQ==", "bodyText": "yeah sounds good, I will change this.", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549627939", "createdAt": "2020-12-29T09:11:18Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -569,13 +571,18 @@ export class ProgrammingSubmissionService implements IProgrammingSubmissionServi\n         const submissions = res.body!;\n         const convertedSubmissions: ProgrammingSubmission[] = [];\n         for (const submission of submissions) {\n-            const latestResult = getLatestSubmissionResult(submission);\n-            setLatestSubmissionResult(submission, latestResult);\n+            this.convertItemFromServer(submission);\n             convertedSubmissions.push({ ...submission });\n         }\n         return res.clone({ body: convertedSubmissions });\n     }\n \n+    private convertItemFromServer(programmingSubmission: ProgrammingSubmission): ProgrammingSubmission {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MTAwNg=="}, "originalCommit": {"oid": "70fce0ccd74a2c424404a87dc73d4af69ac60b74"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTQ0OTg3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxNTo0NlrOIL6cQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToxMTo1MFrOIMKoug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2Mjc1Mg==", "bodyText": "Some small GitHub Actions suggestions, not used imports. Please remove them", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549362752", "createdAt": "2020-12-28T14:15:46Z", "author": {"login": "FuchsDominik"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -13,6 +13,8 @@ import { getLatestSubmissionResult, setLatestSubmissionResult, SubmissionType }\n import { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\n import { findLatestResult } from 'app/shared/util/utils';\n import { Participation } from 'app/entities/participation/participation.model';\n+import { FileUploadSubmission } from 'app/entities/file-upload-submission.model';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fce0ccd74a2c424404a87dc73d4af69ac60b74"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyODA5MA==", "bodyText": "Thanks for noticing that!", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549628090", "createdAt": "2020-12-29T09:11:50Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/programming/participate/programming-submission.service.ts", "diffHunk": "@@ -13,6 +13,8 @@ import { getLatestSubmissionResult, setLatestSubmissionResult, SubmissionType }\n import { ProgrammingExerciseStudentParticipation } from 'app/entities/participation/programming-exercise-student-participation.model';\n import { findLatestResult } from 'app/shared/util/utils';\n import { Participation } from 'app/entities/participation/participation.model';\n+import { FileUploadSubmission } from 'app/entities/file-upload-submission.model';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2Mjc1Mg=="}, "originalCommit": {"oid": "70fce0ccd74a2c424404a87dc73d4af69ac60b74"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQzNzI4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/file-upload/participate/file-upload-submission.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTozNToyNlrOIMLGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOTo1MTozMVrOIMLaDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTY3OQ==", "bodyText": "you have a type here, this should be FileUploadSubmission", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549635679", "createdAt": "2020-12-29T09:35:26Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/file-upload/participate/file-upload-submission.service.ts", "diffHunk": "@@ -69,7 +70,7 @@ export class FileUploadSubmissionService {\n         if (lock) {\n             url += '?lock=true';\n         }\n-        return this.http.get<FileUploadSubmission>(url);\n+        return this.http.get<FileUploadSubmission>(url).pipe(map((res: ModelingSubmission) => this.convertItemFromServer(res)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0839573c2087149538e1b5571dd534bce7f3ce60"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY0MDcxOQ==", "bodyText": "Done \u2705", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549640719", "createdAt": "2020-12-29T09:51:31Z", "author": {"login": "nicolasruscher"}, "path": "src/main/webapp/app/exercises/file-upload/participate/file-upload-submission.service.ts", "diffHunk": "@@ -69,7 +70,7 @@ export class FileUploadSubmissionService {\n         if (lock) {\n             url += '?lock=true';\n         }\n-        return this.http.get<FileUploadSubmission>(url);\n+        return this.http.get<FileUploadSubmission>(url).pipe(map((res: ModelingSubmission) => this.convertItemFromServer(res)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzNTY3OQ=="}, "originalCommit": {"oid": "0839573c2087149538e1b5571dd534bce7f3ce60"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODM4MDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo0MDo1MlrOIMTZBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo0MDo1MlrOIMTZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3MTUyNQ==", "bodyText": "Technically there can never be late assessments for exams, and for course exercises there is only one assessment round. Depending on how we handle this however we can probably remove this", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549771525", "createdAt": "2020-12-29T16:40:52Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ResultRepository.java", "diffHunk": "@@ -92,8 +92,30 @@\n     @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = TRUE AND r.submission.submitted = TRUE AND r.completionDate IS NOT NULL AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate) AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\")\n     long countNumberOfFinishedAssessmentsForExerciseIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND r.completionDate IS NOT NULL AND p.exercise.dueDate IS NOT NULL AND r.submission.submissionDate > p.exercise.dueDate\")\n-    long countNumberOfFinishedLateAssessmentsForExercise(@Param(\"exerciseId\") Long exerciseId);\n+    /**\n+     * @param exerciseId\n+     * @param correctionRound\n+     * @return the number of completed assessments for the specified correction round of an exam exercise\n+     */\n+    @Query(\"\"\"\n+               SELECT COUNT(DISTINCT p)\n+               FROM StudentParticipation p WHERE p.exercise.id = :exerciseId AND\n+                            (SELECT COUNT(r)\n+                            FROM Result r\n+                            WHERE r.assessor IS NOT NULL\n+                                AND r.rated = TRUE\n+                                AND r.submission = (select max(id) from p.submissions)\n+                                AND r.submission.submitted = TRUE\n+                                AND r.completionDate IS NOT NULL\n+                                AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n+                                AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\n+                            ) = :correctionRound\n+            \"\"\")\n+    long countNumberOfFinishedAssessmentsByCorrectionRoundsAndExerciseIdIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId, @Param(\"correctionRound\") Long correctionRound);\n+\n+    // @Query(\"SELECT COUNT(DISTINCT p) FROM StudentParticipation p left join p.results r WHERE p.exercise.id = :exerciseId AND r.assessor IS NOT NULL AND r.rated = FALSE AND\n+    // r.completionDate IS NOT NULL AND p.exercise.dueDate IS NOT NULL AND r.submission.submissionDate > p.exercise.dueDate\")\n+    // long countNumberOfFinishedLateAssessmentsForExercise(@Param(\"exerciseId\") Long exerciseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "939162e63c912c7a00dde5702929b5d45c442bc7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQxOTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1ODoxMFrOIMTuTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1ODoxMFrOIMTuTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3Njk3NQ==", "bodyText": "This query is currently identical to the query in the ResultsRepository:114.\nHere you always check for the latest submission, should this also be the case for programming exercises?", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549776975", "createdAt": "2020-12-29T16:58:10Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ProgrammingExerciseRepository.java", "diffHunk": "@@ -168,13 +168,29 @@ AND EXISTS (SELECT s FROM ProgrammingSubmission s\n                 WHERE s.participation.id = p.id\n                 AND s.submitted = TRUE\n                 AND EXISTS (SELECT r.assessor FROM s.results r\n-                    WHERE r.assessor IS NOT NULL\n-                    AND r.completionDate IS NOT NULL))\n+                        WHERE r.assessor IS NOT NULL\n+                        AND r.completionDate IS NOT NULL))\n             AND NOT EXISTS (SELECT prs FROM p.results prs\n-                WHERE prs.assessor.id = p.student.id)\n+                            WHERE prs.assessor.id = p.student.id)\n             \"\"\")\n     long countAssessmentsByExerciseIdSubmittedIgnoreTestRunSubmissions(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"\"\"\n+               SELECT COUNT(DISTINCT p)\n+               FROM ProgrammingExerciseStudentParticipation p WHERE p.exercise.id = :exerciseId AND\n+                            (SELECT COUNT(r)\n+                            FROM Result r\n+                            WHERE r.assessor IS NOT NULL\n+                                AND r.rated = TRUE\n+                                AND r.submission = (select max(id) from p.submissions)\n+                                AND r.submission.submitted = TRUE\n+                                AND r.completionDate IS NOT NULL\n+                                AND (p.exercise.dueDate IS NULL OR r.submission.submissionDate <= p.exercise.dueDate)\n+                                AND NOT EXISTS (select prs from p.results prs where prs.assessor.id = p.student.id)\n+                            ) = :correctionRound\n+            \"\"\")\n+    long countNumberOfFinishedAssessmentsByCorrectionRoundsAndExerciseIdIgnoreTestRuns(@Param(\"exerciseId\") Long exerciseId, @Param(\"correctionRound\") Long correctionRound);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "939162e63c912c7a00dde5702929b5d45c442bc7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQyMDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1ODo0N1rOIMTvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxNjoxM1rOIMq44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NzE1NA==", "bodyText": "Both these queries are functionaly identical", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r549777154", "createdAt": "2020-12-29T16:58:47Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -253,8 +257,36 @@ public DueDateStat countNumberOfFinishedAssessmentsForExercise(Long exerciseId,\n         if (examMode) {\n             return new DueDateStat(resultRepository.countNumberOfFinishedAssessmentsForExerciseIgnoreTestRuns(exerciseId), 0L);\n         }\n-        return new DueDateStat(resultRepository.countNumberOfFinishedAssessmentsForExercise(exerciseId),\n-                resultRepository.countNumberOfFinishedLateAssessmentsForExercise(exerciseId));\n+        return new DueDateStat(resultRepository.countNumberOfFinishedAssessmentsForExercise(exerciseId), 0L);\n+    }\n+\n+    /**\n+     * Given an exerciseId and a correctionRound, return the number of assessments for that exerciseId and correctionRound that have been finished\n+     *\n+     * @param exercise  - the exercise we are interested in\n+     * @param correctionRounds - the correction round we want finished assessments for\n+     * @return an array of the number of assessments for the exercise for a given correction round\n+     */\n+    public DueDateStat[] countNumberOfFinishedAssessmentsForExerciseByCorrectionRound(Exercise exercise, Long correctionRounds) {\n+        DueDateStat[] correctionRoundsDataStats = new DueDateStat[correctionRounds.intValue()];\n+\n+        for (int i = 1; i <= correctionRounds.intValue(); i++) {\n+            if (exercise instanceof ProgrammingExercise) {\n+                correctionRoundsDataStats[i - 1] = new DueDateStat(\n+                        programmingExerciseRepository.countNumberOfFinishedAssessmentsByCorrectionRoundsAndExerciseIdIgnoreTestRuns(exercise.getId(), (long) i), 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "939162e63c912c7a00dde5702929b5d45c442bc7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NjUxMg==", "bodyText": "yes, we removed the one in programmingExerciseRepository", "url": "https://github.com/ls1intum/Artemis/pull/2594#discussion_r550156512", "createdAt": "2020-12-30T11:16:13Z", "author": {"login": "SimonEntholzer"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ResultService.java", "diffHunk": "@@ -253,8 +257,36 @@ public DueDateStat countNumberOfFinishedAssessmentsForExercise(Long exerciseId,\n         if (examMode) {\n             return new DueDateStat(resultRepository.countNumberOfFinishedAssessmentsForExerciseIgnoreTestRuns(exerciseId), 0L);\n         }\n-        return new DueDateStat(resultRepository.countNumberOfFinishedAssessmentsForExercise(exerciseId),\n-                resultRepository.countNumberOfFinishedLateAssessmentsForExercise(exerciseId));\n+        return new DueDateStat(resultRepository.countNumberOfFinishedAssessmentsForExercise(exerciseId), 0L);\n+    }\n+\n+    /**\n+     * Given an exerciseId and a correctionRound, return the number of assessments for that exerciseId and correctionRound that have been finished\n+     *\n+     * @param exercise  - the exercise we are interested in\n+     * @param correctionRounds - the correction round we want finished assessments for\n+     * @return an array of the number of assessments for the exercise for a given correction round\n+     */\n+    public DueDateStat[] countNumberOfFinishedAssessmentsForExerciseByCorrectionRound(Exercise exercise, Long correctionRounds) {\n+        DueDateStat[] correctionRoundsDataStats = new DueDateStat[correctionRounds.intValue()];\n+\n+        for (int i = 1; i <= correctionRounds.intValue(); i++) {\n+            if (exercise instanceof ProgrammingExercise) {\n+                correctionRoundsDataStats[i - 1] = new DueDateStat(\n+                        programmingExerciseRepository.countNumberOfFinishedAssessmentsByCorrectionRoundsAndExerciseIdIgnoreTestRuns(exercise.getId(), (long) i), 0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NzE1NA=="}, "originalCommit": {"oid": "939162e63c912c7a00dde5702929b5d45c442bc7"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4244, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}