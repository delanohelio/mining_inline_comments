{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Njg1MjM5", "number": 2156, "title": "[Enhancement] Security & Auto-approve answers by instructors", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features (with a high test coverage)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n\nMotivation and Context\n\n\nAn answer given by an instructor is not highlighted except if it is approved manually.\nThere are insufficient checks for security with the questions and answers.\nDescription\n\nAnswers given by an instructor are now approved automatically.\nInclude course in api calls and check the user's access right in all endpoints.\nSteps for Testing\n\n\nLog in to Artemis\nNavigate to an exercise or lecture with a question\nWrite answers with different access rights (e.g student, instructor)\nCheck that only answers given by instructors are approved automatically.\n\nTest Coverage\n\n\nStudentQuestionAnswerResource.java: 92%", "createdAt": "2020-10-05T08:28:13Z", "url": "https://github.com/ls1intum/Artemis/pull/2156", "merged": true, "mergeCommit": {"oid": "70912ee1bb0c7540725142110116c3f401cd62ea"}, "closed": true, "closedAt": "2020-10-16T07:13:42Z", "author": {"login": "filip-gregurevic"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOm-TQgH2gAyNDk3Njg1MjM5OmYwMTY2ZDc4YjY0YzBlMDgzMTkxMzZhZTRlMzk1ZWVhNzAzMDIxOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSzE2uAFqTUwOTQ3MjQ4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0166d78b64c0e08319136ae4e395eea70302198", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/f0166d78b64c0e08319136ae4e395eea70302198", "committedDate": "2020-10-02T14:36:37Z", "message": "add auto approve for tutors and instructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55add1c555cbca136e76d0e646b736628392fa95", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/55add1c555cbca136e76d0e646b736628392fa95", "committedDate": "2020-10-02T14:57:06Z", "message": "add java tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed63273c9532e6c0210a04f1dd683b8552cb8bd8", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/ed63273c9532e6c0210a04f1dd683b8552cb8bd8", "committedDate": "2020-10-05T08:27:33Z", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c6cf2f4c5becd178940378395014e9ce78b0c2", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/c0c6cf2f4c5becd178940378395014e9ce78b0c2", "committedDate": "2020-10-05T13:37:40Z", "message": "only approved automatically if instructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a188451494d1670c9483e652eeec890af8feaf7d", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/a188451494d1670c9483e652eeec890af8feaf7d", "committedDate": "2020-10-05T13:43:26Z", "message": "Merge branch 'develop' into enhancement/questions-answers/auto-approve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/48a20241e28a59937a5f649e89c4fd69263ff6dc", "committedDate": "2020-10-05T16:02:28Z", "message": "Merge branch 'develop' into enhancement/questions-answers/auto-approve"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc2NzU0", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502276754", "createdAt": "2020-10-05T17:37:15Z", "commit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc2ODYy", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502276862", "createdAt": "2020-10-05T17:37:24Z", "commit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc4OTI1", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502278925", "createdAt": "2020-10-05T17:40:18Z", "commit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MDoxOVrOHcnPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MDoxOVrOHcnPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTAzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(response.isTutorApproved());\n          \n          \n            \n                    assertThat(response.isTutorApproved()).isTrue();", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r499765039", "createdAt": "2020-10-05T17:40:19Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java", "diffHunk": "@@ -67,10 +67,44 @@ public void createStudentQuestionAnswer() throws Exception {\n         studentQuestionAnswer.setQuestion(studentQuestion);\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n+        // should be automatically approved\n+        assertThat(response.isTutorApproved());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc5MTUw", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502279150", "createdAt": "2020-10-05T17:40:38Z", "commit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MDozOFrOHcnPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MDozOFrOHcnPzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTE5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!response.isTutorApproved());\n          \n          \n            \n                    assertThat(response.isTutorApproved()).isFalse();", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r499765199", "createdAt": "2020-10-05T17:40:38Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java", "diffHunk": "@@ -67,10 +67,44 @@ public void createStudentQuestionAnswer() throws Exception {\n         studentQuestionAnswer.setQuestion(studentQuestion);\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n+        // should be automatically approved\n+        assertThat(response.isTutorApproved());\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void createStudentQuestionAnswerAsTA() throws Exception {\n+        StudentQuestion studentQuestion = database.createCourseWithExerciseAndStudentQuestions().get(0);\n+\n+        StudentQuestionAnswer studentQuestionAnswer = new StudentQuestionAnswer();\n+        studentQuestionAnswer.setAuthor(database.getUserByLogin(\"tutor1\"));\n+        studentQuestionAnswer.setAnswerText(\"Test Answer\");\n+        studentQuestionAnswer.setAnswerDate(ZonedDateTime.now());\n+        studentQuestionAnswer.setQuestion(studentQuestion);\n+        StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n+\n+        // shouldn't be automatically approved\n+        assertThat(!response.isTutorApproved());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc5MzE2", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502279316", "createdAt": "2020-10-05T17:40:52Z", "commit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MDo1MlrOHcnQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MDo1MlrOHcnQQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTMxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!response.isTutorApproved());\n          \n          \n            \n                    assertThat(response.isTutorApproved()).isFalse();", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r499765314", "createdAt": "2020-10-05T17:40:52Z", "author": {"login": "MaisiKoleni"}, "path": "src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java", "diffHunk": "@@ -67,10 +67,44 @@ public void createStudentQuestionAnswer() throws Exception {\n         studentQuestionAnswer.setQuestion(studentQuestion);\n         StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n \n+        // should be automatically approved\n+        assertThat(response.isTutorApproved());\n         // trying to create same studentQuestionAnswer again --> bad request\n         request.postWithResponseBody(\"/api/student-question-answers\", response, StudentQuestionAnswer.class, HttpStatus.BAD_REQUEST);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void createStudentQuestionAnswerAsTA() throws Exception {\n+        StudentQuestion studentQuestion = database.createCourseWithExerciseAndStudentQuestions().get(0);\n+\n+        StudentQuestionAnswer studentQuestionAnswer = new StudentQuestionAnswer();\n+        studentQuestionAnswer.setAuthor(database.getUserByLogin(\"tutor1\"));\n+        studentQuestionAnswer.setAnswerText(\"Test Answer\");\n+        studentQuestionAnswer.setAnswerDate(ZonedDateTime.now());\n+        studentQuestionAnswer.setQuestion(studentQuestion);\n+        StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n+\n+        // shouldn't be automatically approved\n+        assertThat(!response.isTutorApproved());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"student1\", roles = \"USER\")\n+    public void createStudentQuestionAnswerAsStudent() throws Exception {\n+        StudentQuestion studentQuestion = database.createCourseWithExerciseAndStudentQuestions().get(0);\n+\n+        StudentQuestionAnswer studentQuestionAnswer = new StudentQuestionAnswer();\n+        studentQuestionAnswer.setAuthor(database.getUserByLogin(\"tutor1\"));\n+        studentQuestionAnswer.setAnswerText(\"Test Answer\");\n+        studentQuestionAnswer.setAnswerDate(ZonedDateTime.now());\n+        studentQuestionAnswer.setQuestion(studentQuestion);\n+        StudentQuestionAnswer response = request.postWithResponseBody(\"/api/student-question-answers\", studentQuestionAnswer, StudentQuestionAnswer.class, HttpStatus.CREATED);\n+\n+        // shouldn't be automatically approved\n+        assertThat(!response.isTutorApproved());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a20241e28a59937a5f649e89c4fd69263ff6dc"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/5e28dc7a9a5587f13bf77c48e2099c8cbd668b70", "committedDate": "2020-10-05T17:41:09Z", "message": "Update src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\nCo-authored-by: Christian Femers <c.femers@tum.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3679a355b51d34ec63cbfddd0aafeb1408e18a3", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/f3679a355b51d34ec63cbfddd0aafeb1408e18a3", "committedDate": "2020-10-05T17:41:19Z", "message": "Update src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\nCo-authored-by: Christian Femers <c.femers@tum.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/981eca69535e162bd2e00ede149bfbe956498afa", "committedDate": "2020-10-05T17:41:27Z", "message": "Update src/test/java/de/tum/in/www1/artemis/StudentQuestionAnswerIntegrationTest.java\n\nCo-authored-by: Christian Femers <c.femers@tum.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjgwNzUy", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502280752", "createdAt": "2020-10-05T17:42:57Z", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjgxMDE5", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502281019", "createdAt": "2020-10-05T17:43:18Z", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjgxMzc0", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502281374", "createdAt": "2020-10-05T17:43:49Z", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzMzMzE4", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502333318", "createdAt": "2020-10-05T18:56:23Z", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzMzNjQ1", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502333645", "createdAt": "2020-10-05T18:56:51Z", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzQ0NDU1", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502344455", "createdAt": "2020-10-05T19:12:06Z", "commit": {"oid": "981eca69535e162bd2e00ede149bfbe956498afa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b06ca18c9a930dcfd80738cea8eab39e9cca972", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/2b06ca18c9a930dcfd80738cea8eab39e9cca972", "committedDate": "2020-10-05T19:47:16Z", "message": "fix course error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ef0c2f8b0778a0eb01fbd7ab9aa2ab5203e1079", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/7ef0c2f8b0778a0eb01fbd7ab9aa2ab5203e1079", "committedDate": "2020-10-05T20:02:51Z", "message": "Merge branch 'enhancement/questions-answers/auto-approve' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76fae434ad5875d73be484ede42e2d10d3bd0bce", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/76fae434ad5875d73be484ede42e2d10d3bd0bce", "committedDate": "2020-10-05T20:52:16Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/d762f1ee0372ef37a710c8e12c9378c48038c237", "committedDate": "2020-10-05T21:14:56Z", "message": "fix undefined error in client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDM4MjY1", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502438265", "createdAt": "2020-10-05T21:35:52Z", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDM4NjEz", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502438613", "createdAt": "2020-10-05T21:36:26Z", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDQwMzA1", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502440305", "createdAt": "2020-10-05T21:39:35Z", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjU0MjU3", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502654257", "createdAt": "2020-10-06T07:29:09Z", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODAxODEz", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502801813", "createdAt": "2020-10-06T10:34:39Z", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDozNDozOVrOHdAGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDozNDozOVrOHdAGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MjM1OQ==", "bodyText": "there is still no security check here. Please check that the user is at least a student in the course", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r500172359", "createdAt": "2020-10-06T10:34:39Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -61,19 +66,28 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n     /**\n      * POST /question-answers : Create a new studentQuestionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param studentQuestionAnswer the studentQuestionAnswer to create\n      * @return the ResponseEntity with status 201 (Created) and with body the new studentQuestionAnswer, or with status 400 (Bad Request) if the studentQuestionAnswer has already\n      *         an ID\n      * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n-    @PostMapping(\"/student-question-answers\")\n+    @PostMapping(\"courses/{courseId}/student-question-answers\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@RequestBody StudentQuestionAnswer studentQuestionAnswer) throws URISyntaxException {\n+    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n+            throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODAzMTU2", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-502803156", "createdAt": "2020-10-06T10:36:33Z", "commit": {"oid": "d762f1ee0372ef37a710c8e12c9378c48038c237"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f589b495716c3555a275c9ae21a8b6cf7fe8e799", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/f589b495716c3555a275c9ae21a8b6cf7fe8e799", "committedDate": "2020-10-08T19:06:59Z", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fdff28cbb625b7105f77899923e11483354075d", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/0fdff28cbb625b7105f77899923e11483354075d", "committedDate": "2020-10-08T19:52:23Z", "message": "add course check to studentquestionanswer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d87adc9397a21892d2b9baed14916e27e7d6ee", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/99d87adc9397a21892d2b9baed14916e27e7d6ee", "committedDate": "2020-10-09T14:22:57Z", "message": "add course to studentquestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0be13b8631d8bc4d4708b3d7596381f6b63541d7", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/0be13b8631d8bc4d4708b3d7596381f6b63541d7", "committedDate": "2020-10-09T20:44:14Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fb5c688ea7d866c349ad1869a577e1588bb1bd1", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/0fb5c688ea7d866c349ad1869a577e1588bb1bd1", "committedDate": "2020-10-09T21:15:26Z", "message": "fix client tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5fbd5e771705fc370d273a67b6763a9853d2d6", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/1b5fbd5e771705fc370d273a67b6763a9853d2d6", "committedDate": "2020-10-09T21:18:50Z", "message": "remove unnecessary calls in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "064d7eb8250895104ce189e8d4ccc282f905f4d1", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/064d7eb8250895104ce189e8d4ccc282f905f4d1", "committedDate": "2020-10-09T21:20:42Z", "message": "remove unnecessary pt. 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d8ee41b132a5998ac2b260b9e35466bacb3bab5", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/6d8ee41b132a5998ac2b260b9e35466bacb3bab5", "committedDate": "2020-10-09T22:20:28Z", "message": "remove more unnecessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjE4OTAx", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-506218901", "createdAt": "2020-10-11T21:40:50Z", "commit": {"oid": "6d8ee41b132a5998ac2b260b9e35466bacb3bab5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDYxMDY4", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-506461068", "createdAt": "2020-10-12T09:42:30Z", "commit": {"oid": "6d8ee41b132a5998ac2b260b9e35466bacb3bab5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzMxNDc2", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-506731476", "createdAt": "2020-10-12T15:43:47Z", "commit": {"oid": "6d8ee41b132a5998ac2b260b9e35466bacb3bab5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjUwNTUx", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-508250551", "createdAt": "2020-10-14T11:31:07Z", "commit": {"oid": "6d8ee41b132a5998ac2b260b9e35466bacb3bab5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c", "author": {"user": {"login": "filip-gregurevic", "name": "Filip Gregurevic"}}, "url": "https://github.com/ls1intum/Artemis/commit/9354edd134cb3a1b716f04efcdf90074046c469c", "committedDate": "2020-10-14T22:08:21Z", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into enhancement/questions-answers/auto-approve\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionResource.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDEyNjc4", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-509412678", "createdAt": "2020-10-15T14:01:08Z", "commit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDI4NDEz", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-509428413", "createdAt": "2020-10-15T14:15:49Z", "commit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDcyNDg5", "url": "https://github.com/ls1intum/Artemis/pull/2156#pullrequestreview-509472489", "createdAt": "2020-10-15T14:55:47Z", "commit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo1NTo0N1rOHiMA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo1Nzo1MVrOHiMIVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMDQ2MA==", "bodyText": "As a malicious API user, I can circumvent this check by providing a course id not matching the studentQuestionAnswer. In this case, I can auto-approve messages while only being an instructor in a different course.", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505610460", "createdAt": "2020-10-15T14:55:47Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -50,30 +53,43 @@\n     SingleUserNotificationService singleUserNotificationService;\n \n     public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQuestionAnswerRepository, GroupNotificationService groupNotificationService,\n-            SingleUserNotificationService singleUserNotificationService, AuthorizationCheckService authorizationCheckService, UserService userService) {\n+            SingleUserNotificationService singleUserNotificationService, AuthorizationCheckService authorizationCheckService, UserService userService,\n+            CourseRepository courseRepository) {\n         this.studentQuestionAnswerRepository = studentQuestionAnswerRepository;\n+        this.courseRepository = courseRepository;\n         this.groupNotificationService = groupNotificationService;\n         this.singleUserNotificationService = singleUserNotificationService;\n         this.authorizationCheckService = authorizationCheckService;\n         this.userService = userService;\n     }\n \n     /**\n-     * POST /question-answers : Create a new studentQuestionAnswer.\n+     * POST /courses/{courseId}/question-answers : Create a new studentQuestionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param studentQuestionAnswer the studentQuestionAnswer to create\n      * @return the ResponseEntity with status 201 (Created) and with body the new studentQuestionAnswer, or with status 400 (Bad Request) if the studentQuestionAnswer has already\n      *         an ID\n      * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n-    @PostMapping(\"/student-question-answers\")\n+    @PostMapping(\"courses/{courseId}/student-question-answers\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@RequestBody StudentQuestionAnswer studentQuestionAnswer) throws URISyntaxException {\n+    public ResponseEntity<StudentQuestionAnswer> createStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n+            throws URISyntaxException {\n         log.debug(\"REST request to save StudentQuestionAnswer : {}\", studentQuestionAnswer);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n         if (studentQuestionAnswer.getId() != null) {\n             throw new BadRequestAlertException(\"A new studentQuestionAnswer cannot already have an ID\", ENTITY_NAME, \"idexists\");\n         }\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        if (!this.authorizationCheckService.isAtLeastStudentInCourse(optionalCourse.get(), user)) {\n+            return forbidden();\n+        }\n+        // answer to approved if written by an instructor\n+        studentQuestionAnswer.setTutorApproved(this.authorizationCheckService.isAtLeastInstructorInCourse(optionalCourse.get(), user));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMTI0Mg==", "bodyText": "Similar to above, this does not check if studentQuestionAnswer is in the same course as courseId.", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505611242", "createdAt": "2020-10-15T14:56:36Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -83,27 +99,32 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n             groupNotificationService.notifyTutorAndInstructorGroupAboutNewAnswerForLecture(result);\n             singleUserNotificationService.notifyUserAboutNewAnswerForLecture(result);\n         }\n-        return ResponseEntity.created(new URI(\"/api/question-answers/\" + result.getId()))\n+        return ResponseEntity.created(new URI(\"/api/courses\" + courseId + \"/student-question-answers/\" + result.getId()))\n                 .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString())).body(result);\n     }\n \n     /**\n-     * PUT /question-answers : Updates an existing studentQuestionAnswer.\n+     * PUT /courses/{courseId}/question-answers : Updates an existing studentQuestionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param studentQuestionAnswer the studentQuestionAnswer to update\n      * @return the ResponseEntity with status 200 (OK) and with body the updated studentQuestionAnswer, or with status 400 (Bad Request) if the studentQuestionAnswer is not valid,\n      *         or with status 500 (Internal Server Error) if the studentQuestionAnswer couldn't be updated\n      * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n-    @PutMapping(\"/student-question-answers\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n+    @PutMapping(\"courses/{courseId}/student-question-answers\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<StudentQuestionAnswer> updateStudentQuestionAnswer(@RequestBody StudentQuestionAnswer studentQuestionAnswer) throws URISyntaxException {\n+    public ResponseEntity<StudentQuestionAnswer> updateStudentQuestionAnswer(@PathVariable Long courseId, @RequestBody StudentQuestionAnswer studentQuestionAnswer)\n+            throws URISyntaxException {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to update StudentQuestionAnswer : {}\", studentQuestionAnswer);\n         if (studentQuestionAnswer.getId() == null) {\n             throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n         }\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMTk3MA==", "bodyText": "Similar to above, this does not check if the requested question is in the same course as courseId.", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505611970", "createdAt": "2020-10-15T14:57:25Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -118,35 +139,47 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n     }\n \n     /**\n-     * GET /question-answers/:id : get the \"id\" questionAnswer.\n+     * GET /courses/{courseId}/question-answers/:id : get the \"id\" questionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param id the id of the questionAnswer to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the questionAnswer, or with status 404 (Not Found)\n      */\n-    @GetMapping(\"/student-question-answers/{id}\")\n+    @GetMapping(\"courses/{courseId}/student-question-answers/{id}\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long id) {\n+    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long courseId, @PathVariable Long id) {\n         log.debug(\"REST request to get StudentQuestionAnswer : {}\", id);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        if (!this.authorizationCheckService.isAtLeastStudentInCourse(optionalCourse.get(), user)) {\n+            return forbidden();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMjM3NA==", "bodyText": "Similar to above, this does not check if the requested question is in the same course as courseId.", "url": "https://github.com/ls1intum/Artemis/pull/2156#discussion_r505612374", "createdAt": "2020-10-15T14:57:51Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentQuestionAnswerResource.java", "diffHunk": "@@ -118,35 +139,47 @@ public StudentQuestionAnswerResource(StudentQuestionAnswerRepository studentQues\n     }\n \n     /**\n-     * GET /question-answers/:id : get the \"id\" questionAnswer.\n+     * GET /courses/{courseId}/question-answers/:id : get the \"id\" questionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param id the id of the questionAnswer to retrieve\n      * @return the ResponseEntity with status 200 (OK) and with body the questionAnswer, or with status 404 (Not Found)\n      */\n-    @GetMapping(\"/student-question-answers/{id}\")\n+    @GetMapping(\"courses/{courseId}/student-question-answers/{id}\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n-    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long id) {\n+    public ResponseEntity<StudentQuestionAnswer> getStudentQuestionAnswer(@PathVariable Long courseId, @PathVariable Long id) {\n         log.debug(\"REST request to get StudentQuestionAnswer : {}\", id);\n+        User user = this.userService.getUserWithGroupsAndAuthorities();\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        if (!this.authorizationCheckService.isAtLeastStudentInCourse(optionalCourse.get(), user)) {\n+            return forbidden();\n+        }\n         Optional<StudentQuestionAnswer> questionAnswer = studentQuestionAnswerRepository.findById(id);\n         return ResponseUtil.wrapOrNotFound(questionAnswer);\n     }\n \n     /**\n-     * DELETE /question-answers/:id : delete the \"id\" questionAnswer.\n+     * DELETE /courses/{courseId}/question-answers/:id : delete the \"id\" questionAnswer.\n      *\n+     * @param courseId the id of the course the answer belongs to\n      * @param id the id of the questionAnswer to delete\n      * @return the ResponseEntity with status 200 (OK)\n      */\n-    @DeleteMapping(\"/student-question-answers/{id}\")\n-    // TODO: there are no security checks here. The API endpoint should at least include the course id\n+    @DeleteMapping(\"courses/{courseId}/student-question-answers/{id}\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteStudentQuestionAnswer(@PathVariable Long id) {\n+    public ResponseEntity<Void> deleteStudentQuestionAnswer(@PathVariable Long courseId, @PathVariable Long id) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         Optional<StudentQuestionAnswer> optionalStudentQuestionAnswer = studentQuestionAnswerRepository.findById(id);\n         if (optionalStudentQuestionAnswer.isEmpty()) {\n             return ResponseEntity.notFound().build();\n         }\n+        Optional<Course> optionalCourse = courseRepository.findById(courseId);\n+        if (optionalCourse.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9354edd134cb3a1b716f04efcdf90074046c469c"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3734, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}