{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MzcwNDUy", "number": 2223, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo1OToyNFrOEu3aGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOToyNTowOVrOExfy6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTc3NzUzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMDo1OToyNFrOHjg5jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoyNzowNVrOHlpOiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ==", "bodyText": "This is the score/credits for failed test cases. I added this here as I was not sure if it is better to add it somewhere at the updateResult method of ProgrammingExerciseGradingService.java\n@kloessst @schultek what do you think?", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r507001229", "createdAt": "2020-10-18T00:59:24Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMzEyNQ==", "bodyText": "We could set the credits by default to 0 when the feedback is created, however the client check would still be needed for existing feedback / existing exercises so i think this is fine.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r507613125", "createdAt": "2020-10-19T09:44:22Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ=="}, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMzMwOA==", "bodyText": "But why are you rounding the credits??", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r507613308", "createdAt": "2020-10-19T09:44:35Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ=="}, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMzM5Nw==", "bodyText": "@schultek I rounded it because I got e.g. 0,97884545  for a positive automatic feedback", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r507933397", "createdAt": "2020-10-19T17:37:32Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ=="}, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyNzY2Ng==", "bodyText": "But if we round the credits per automatic feedback, it no longer obeys the grading scheme defined in the test case and SCA section. This would make 0.51... into 1.0 and 0.49... into 0.0, right? I think this does not reflect fair grading and rounding already caused us enough trouble during the PGdP and EidI exams. My recommendation would be to just leave it as precise as possible, and maybe only display it better (or cut off / round up at some place far behind the dot).\nI don't think this will be much of a problem because very often the programming exercises never had \"nice\" credit number.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r508127666", "createdAt": "2020-10-19T23:53:24Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ=="}, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODYzMQ==", "bodyText": "Yes rounding would lead to a wrong result, but as @MaisiKoleni suggested you could just display a rounded number.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r508268631", "createdAt": "2020-10-20T07:27:02Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ=="}, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzNDgyNQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r509234825", "createdAt": "2020-10-21T12:27:05Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -114,6 +115,17 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n                     this.automaticResult = this.getLatestAutomaticResult(this.participation.results);\n                     this.manualResult = this.getLatestManualResult(this.participation.results);\n \n+                    // Setup automatic feedback, set or round credits and set detailText if not already set\n+                    this.automaticFeedback = this.automaticResult?.feedbacks!;\n+                    this.automaticFeedback.forEach((feedback) => {\n+                        feedback.id = undefined;\n+                        if (feedback.credits) {\n+                            feedback.credits = Math.round(feedback.credits);\n+                        } else {\n+                            feedback.credits = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwMTIyOQ=="}, "originalCommit": {"oid": "b032269d18a09bfbc8bc5db16210c5d15aef980f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTY0NTA3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MDo1NFrOHkGf7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo0MzozNlrOHkxUQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzI2Mg==", "bodyText": "Unfortunately its not that easy \ud83d\ude05. With the extended score calculation with bonus points, sca penalties and max penalties we cannot just add the feedback credits to get the overall points. Also the score is in percent. I think we should let the server do the calculation here.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r507617262", "createdAt": "2020-10-19T09:50:54Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -396,7 +408,7 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n     }\n \n     private calculateTotalScore() {\n-        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback];\n+        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback, ...this.automaticFeedback];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a6c28af326e50696c82f5060a3d06748680db38"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxODc4NQ==", "bodyText": "We discussed this and this is fine for now. We will address this in a later PR.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r508318785", "createdAt": "2020-10-20T08:43:36Z", "author": {"login": "schultek"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -396,7 +408,7 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n     }\n \n     private calculateTotalScore() {\n-        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback];\n+        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback, ...this.automaticFeedback];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzI2Mg=="}, "originalCommit": {"oid": "2a6c28af326e50696c82f5060a3d06748680db38"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDkxMzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo0ODoyNVrOHnTnWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToyODo1NFrOHnbfnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3Nzg4Mg==", "bodyText": "Could this be simplified to return this.type != FeedbackType.AUTOMATIC. The null case is already covered by the second conditional.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r510977882", "createdAt": "2020-10-23T15:48:25Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "diffHunk": "@@ -226,6 +226,17 @@ public boolean isStaticCodeAnalysisFeedback() {\n         return this.text != null && this.text.startsWith(STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER) && this.type == FeedbackType.AUTOMATIC;\n     }\n \n+    /**\n+     * Checks whether the feedback is not an automatically generated feedback (test cases or SCA). We check for\n+     * manual (FeedbackType.MANUAL), unreferenced (FeedbackType.MANUAL_UNREFERENCED) and general (null) feedback.\n+     *\n+     * @return true if the it is not an automatically generated feedback else false\n+     */\n+    @JsonIgnore\n+    public boolean isNotAutomaticFeedback() {\n+        return this.type == null || this.type != FeedbackType.AUTOMATIC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjU0NQ==", "bodyText": "You are right, then I will remove this and just do this.type != FeedbackType.AUTOMATIC.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511096545", "createdAt": "2020-10-23T19:16:20Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "diffHunk": "@@ -226,6 +226,17 @@ public boolean isStaticCodeAnalysisFeedback() {\n         return this.text != null && this.text.startsWith(STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER) && this.type == FeedbackType.AUTOMATIC;\n     }\n \n+    /**\n+     * Checks whether the feedback is not an automatically generated feedback (test cases or SCA). We check for\n+     * manual (FeedbackType.MANUAL), unreferenced (FeedbackType.MANUAL_UNREFERENCED) and general (null) feedback.\n+     *\n+     * @return true if the it is not an automatically generated feedback else false\n+     */\n+    @JsonIgnore\n+    public boolean isNotAutomaticFeedback() {\n+        return this.type == null || this.type != FeedbackType.AUTOMATIC;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3Nzg4Mg=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwNjk3Mw==", "bodyText": "Done in 217c9f209", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511106973", "createdAt": "2020-10-23T19:28:54Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "diffHunk": "@@ -226,6 +226,17 @@ public boolean isStaticCodeAnalysisFeedback() {\n         return this.text != null && this.text.startsWith(STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER) && this.type == FeedbackType.AUTOMATIC;\n     }\n \n+    /**\n+     * Checks whether the feedback is not an automatically generated feedback (test cases or SCA). We check for\n+     * manual (FeedbackType.MANUAL), unreferenced (FeedbackType.MANUAL_UNREFERENCED) and general (null) feedback.\n+     *\n+     * @return true if the it is not an automatically generated feedback else false\n+     */\n+    @JsonIgnore\n+    public boolean isNotAutomaticFeedback() {\n+        return this.type == null || this.type != FeedbackType.AUTOMATIC;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3Nzg4Mg=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDk1MTQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGradingServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1ODoyNFrOHnT_KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0Mzo1N1rOHncMFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4Mzk3Ng==", "bodyText": "Why do you expect that one more result is updated? I don't see where the setup was changed.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r510983976", "createdAt": "2020-10-23T15:58:24Z", "author": {"login": "kloessst"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGradingServiceTest.java", "diffHunk": "@@ -420,7 +423,7 @@ public void shouldReEvaluateScoreOfTheCorrectResults() throws Exception {\n         // re-evaluate\n         final var endpoint = ProgrammingExerciseGradingResource.RE_EVALUATE.replace(\"{exerciseId}\", programmingExercise.getId().toString());\n         final var response = request.putWithResponseBody(ROOT + endpoint, \"{}\", Integer.class, HttpStatus.OK);\n-        assertThat(response).isEqualTo(6);\n+        assertThat(response).isEqualTo(7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExODM1OQ==", "bodyText": "The createTestParticipations method creates a manual result. See line ProgrammingExerciseGradingServiceTest:572. Therefore the REST Call returns the size of 7.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511118359", "createdAt": "2020-10-23T19:43:57Z", "author": {"login": "fde312"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseGradingServiceTest.java", "diffHunk": "@@ -420,7 +423,7 @@ public void shouldReEvaluateScoreOfTheCorrectResults() throws Exception {\n         // re-evaluate\n         final var endpoint = ProgrammingExerciseGradingResource.RE_EVALUATE.replace(\"{exerciseId}\", programmingExercise.getId().toString());\n         final var response = request.putWithResponseBody(ROOT + endpoint, \"{}\", Integer.class, HttpStatus.OK);\n-        assertThat(response).isEqualTo(6);\n+        assertThat(response).isEqualTo(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4Mzk3Ng=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTAyNDk3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxODoxNlrOHnUsqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyMjowOFrOHng3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NTYyNw==", "bodyText": "What is the plus doing here?", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r510995627", "createdAt": "2020-10-23T16:18:16Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -398,7 +410,38 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n     }\n \n     private calculateTotalScore() {\n-        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback];\n-        this.totalScore = this.structuredGradingCriterionService.computeTotalScore(feedbacks);\n+        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback, ...this.automaticFeedback];\n+        const maxPoints = this.exercise.maxScore! + this.exercise.bonusPoints! ?? 0.0;\n+        let totalScore = 0.0;\n+        let scoreAutomaticTests = 0.0;\n+        const gradingInstructions = {}; // { instructionId: noOfEncounters }\n+\n+        feedbacks.forEach((feedback) => {\n+            // Check for feedback from automatic tests and store them separately\n+            if (feedback.type === FeedbackType.AUTOMATIC && !Feedback.isStaticCodeAnalysisFeedback(feedback)) {\n+                scoreAutomaticTests += feedback.credits!;\n+            } else {\n+                if (feedback.gradingInstruction) {\n+                    totalScore = this.structuredGradingCriterionService.calculateScoreForGradingInstructions(feedback, totalScore, gradingInstructions);\n+                } else {\n+                    totalScore += feedback.credits!;\n+                }\n+            }\n+        });\n+\n+        // Cap automatic test feedback to maxScore + bonus points of exercise\n+        if (scoreAutomaticTests > maxPoints) {\n+            scoreAutomaticTests = maxPoints;\n+        }\n+        totalScore += scoreAutomaticTests;\n+        // Do not allow negative score\n+        if (totalScore < 0) {\n+            totalScore = 0;\n+        }\n+        // Cap totalScore to maxPoints\n+        if (totalScore > maxPoints) {\n+            totalScore = maxPoints;\n+        }\n+        this.totalScore = +totalScore.toFixed(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExNjQ2Mw==", "bodyText": "toFixed()converts it to a string and the + just converts it back to a number", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511116463", "createdAt": "2020-10-23T19:41:32Z", "author": {"login": "fde312"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -398,7 +410,38 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n     }\n \n     private calculateTotalScore() {\n-        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback];\n-        this.totalScore = this.structuredGradingCriterionService.computeTotalScore(feedbacks);\n+        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback, ...this.automaticFeedback];\n+        const maxPoints = this.exercise.maxScore! + this.exercise.bonusPoints! ?? 0.0;\n+        let totalScore = 0.0;\n+        let scoreAutomaticTests = 0.0;\n+        const gradingInstructions = {}; // { instructionId: noOfEncounters }\n+\n+        feedbacks.forEach((feedback) => {\n+            // Check for feedback from automatic tests and store them separately\n+            if (feedback.type === FeedbackType.AUTOMATIC && !Feedback.isStaticCodeAnalysisFeedback(feedback)) {\n+                scoreAutomaticTests += feedback.credits!;\n+            } else {\n+                if (feedback.gradingInstruction) {\n+                    totalScore = this.structuredGradingCriterionService.calculateScoreForGradingInstructions(feedback, totalScore, gradingInstructions);\n+                } else {\n+                    totalScore += feedback.credits!;\n+                }\n+            }\n+        });\n+\n+        // Cap automatic test feedback to maxScore + bonus points of exercise\n+        if (scoreAutomaticTests > maxPoints) {\n+            scoreAutomaticTests = maxPoints;\n+        }\n+        totalScore += scoreAutomaticTests;\n+        // Do not allow negative score\n+        if (totalScore < 0) {\n+            totalScore = 0;\n+        }\n+        // Cap totalScore to maxPoints\n+        if (totalScore > maxPoints) {\n+            totalScore = maxPoints;\n+        }\n+        this.totalScore = +totalScore.toFixed(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NTYyNw=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NDg4NQ==", "bodyText": "Cool didn't know that", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511194885", "createdAt": "2020-10-23T23:22:08Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/programming/assess/code-editor-tutor-assessment-container.component.ts", "diffHunk": "@@ -398,7 +410,38 @@ export class CodeEditorTutorAssessmentContainerComponent implements OnInit, OnDe\n     }\n \n     private calculateTotalScore() {\n-        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback];\n-        this.totalScore = this.structuredGradingCriterionService.computeTotalScore(feedbacks);\n+        const feedbacks = [...this.referencedFeedback, ...this.unreferencedFeedback, ...this.automaticFeedback];\n+        const maxPoints = this.exercise.maxScore! + this.exercise.bonusPoints! ?? 0.0;\n+        let totalScore = 0.0;\n+        let scoreAutomaticTests = 0.0;\n+        const gradingInstructions = {}; // { instructionId: noOfEncounters }\n+\n+        feedbacks.forEach((feedback) => {\n+            // Check for feedback from automatic tests and store them separately\n+            if (feedback.type === FeedbackType.AUTOMATIC && !Feedback.isStaticCodeAnalysisFeedback(feedback)) {\n+                scoreAutomaticTests += feedback.credits!;\n+            } else {\n+                if (feedback.gradingInstruction) {\n+                    totalScore = this.structuredGradingCriterionService.calculateScoreForGradingInstructions(feedback, totalScore, gradingInstructions);\n+                } else {\n+                    totalScore += feedback.credits!;\n+                }\n+            }\n+        });\n+\n+        // Cap automatic test feedback to maxScore + bonus points of exercise\n+        if (scoreAutomaticTests > maxPoints) {\n+            scoreAutomaticTests = maxPoints;\n+        }\n+        totalScore += scoreAutomaticTests;\n+        // Do not allow negative score\n+        if (totalScore < 0) {\n+            totalScore = 0;\n+        }\n+        // Cap totalScore to maxPoints\n+        if (totalScore > maxPoints) {\n+            totalScore = maxPoints;\n+        }\n+        this.totalScore = +totalScore.toFixed(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NTYyNw=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTE0MTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1MTo1MlrOHnV0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToyOTo0MVrOHnbiOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxMzk2NQ==", "bodyText": "Could you use feedback.type == FeedbackType.AUTOMATIC instead of a double negation.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511013965", "createdAt": "2020-10-23T16:51:52Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -453,7 +483,7 @@ private void removeAllTestCaseFeedbackAndSetScoreToZero(Result result, List<Feed\n      * @return true if there is no feedback for a given test.\n      */\n     private Predicate<ProgrammingExerciseTestCase> wasNotExecuted(Result result) {\n-        return testCase -> result.getFeedbacks().stream().noneMatch(feedback -> feedback.getText().equals(testCase.getTestName()));\n+        return testCase -> result.getFeedbacks().stream().noneMatch(feedback -> !feedback.isNotAutomaticFeedback() && feedback.getText().equals(testCase.getTestName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwNzY0Mg==", "bodyText": "Done in 217c9f209", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511107642", "createdAt": "2020-10-23T19:29:41Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -453,7 +483,7 @@ private void removeAllTestCaseFeedbackAndSetScoreToZero(Result result, List<Feed\n      * @return true if there is no feedback for a given test.\n      */\n     private Predicate<ProgrammingExerciseTestCase> wasNotExecuted(Result result) {\n-        return testCase -> result.getFeedbacks().stream().noneMatch(feedback -> feedback.getText().equals(testCase.getTestName()));\n+        return testCase -> result.getFeedbacks().stream().noneMatch(feedback -> !feedback.isNotAutomaticFeedback() && feedback.getText().equals(testCase.getTestName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxMzk2NQ=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTE5Nzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzowOTozMFrOHnWYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0NjoyM1rOHncRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMzEwNQ==", "bodyText": "I think I've seen this exact calculation also in the client gradingCriterionService. Could this be unified somehow? I guess it was always like this.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511023105", "createdAt": "2020-10-23T17:09:30Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -232,34 +239,11 @@ public double calculateTotalScore(Double calculatedScore, Double maxScore) {\n      */\n     public Double calculateTotalScore(List<Feedback> assessments) {\n         double totalScore = 0.0;\n-\n         var gradingInstructions = new HashMap<Long, Integer>(); // { instructionId: noOfEncounters }\n+\n         for (Feedback feedback : assessments) {\n             if (feedback.getGradingInstruction() != null) {\n-                if (gradingInstructions.get(feedback.getGradingInstruction().getId()) != null) {\n-                    // We Encountered this grading instruction before\n-                    var maxCount = feedback.getGradingInstruction().getUsageCount();\n-                    var encounters = gradingInstructions.get(feedback.getGradingInstruction().getId());\n-                    if (maxCount > 0) {\n-                        if (encounters >= maxCount) {\n-                            // the structured grading instruction was applied on assessment models more often that the usageCount limit allows so we don't sum the feedback credit\n-                            gradingInstructions.put(feedback.getGradingInstruction().getId(), encounters + 1);\n-                        }\n-                        else {\n-                            // the usageCount limit was not exceeded yet so we add the credit and increase the nrOfEncounters counter\n-                            gradingInstructions.put(feedback.getGradingInstruction().getId(), encounters + 1);\n-                            totalScore += feedback.getGradingInstruction().getCredits();\n-                        }\n-                    }\n-                    else {\n-                        totalScore += feedback.getCredits();\n-                    }\n-                }\n-                else {\n-                    // First time encountering the grading instruction\n-                    gradingInstructions.put(feedback.getGradingInstruction().getId(), 1);\n-                    totalScore += feedback.getCredits();\n-                }\n+                totalScore = gradingCriterionService.computeTotalScore(feedback, totalScore, gradingInstructions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExOTgxNw==", "bodyText": "See general comment.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511119817", "createdAt": "2020-10-23T19:46:23Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/AssessmentService.java", "diffHunk": "@@ -232,34 +239,11 @@ public double calculateTotalScore(Double calculatedScore, Double maxScore) {\n      */\n     public Double calculateTotalScore(List<Feedback> assessments) {\n         double totalScore = 0.0;\n-\n         var gradingInstructions = new HashMap<Long, Integer>(); // { instructionId: noOfEncounters }\n+\n         for (Feedback feedback : assessments) {\n             if (feedback.getGradingInstruction() != null) {\n-                if (gradingInstructions.get(feedback.getGradingInstruction().getId()) != null) {\n-                    // We Encountered this grading instruction before\n-                    var maxCount = feedback.getGradingInstruction().getUsageCount();\n-                    var encounters = gradingInstructions.get(feedback.getGradingInstruction().getId());\n-                    if (maxCount > 0) {\n-                        if (encounters >= maxCount) {\n-                            // the structured grading instruction was applied on assessment models more often that the usageCount limit allows so we don't sum the feedback credit\n-                            gradingInstructions.put(feedback.getGradingInstruction().getId(), encounters + 1);\n-                        }\n-                        else {\n-                            // the usageCount limit was not exceeded yet so we add the credit and increase the nrOfEncounters counter\n-                            gradingInstructions.put(feedback.getGradingInstruction().getId(), encounters + 1);\n-                            totalScore += feedback.getGradingInstruction().getCredits();\n-                        }\n-                    }\n-                    else {\n-                        totalScore += feedback.getCredits();\n-                    }\n-                }\n-                else {\n-                    // First time encountering the grading instruction\n-                    gradingInstructions.put(feedback.getGradingInstruction().getId(), 1);\n-                    totalScore += feedback.getCredits();\n-                }\n+                totalScore = gradingCriterionService.computeTotalScore(feedback, totalScore, gradingInstructions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMzEwNQ=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTIwMDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/GradingCriterionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMDoyNFrOHnWZwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMDoyNFrOHnWZwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMzU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public double computeTotalScore(Feedback feedback, double totalScore, HashMap<Long, Integer> gradingInstructions) {\n          \n          \n            \n                public double computeTotalScore(Feedback feedback, double totalScore, Map<Long, Integer> gradingInstructions) {", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511023553", "createdAt": "2020-10-23T17:10:24Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GradingCriterionService.java", "diffHunk": "@@ -46,4 +48,39 @@ public GradingCriterion findOne(long gradingCriterionId) {\n         return gradingCriterionRepository.findByExerciseIdWithEagerGradingCriteria(exerciseId);\n     }\n \n+    /**\n+     * Calculates the score over all feedback elements that were set using structured grading instructions (SGI)\n+     * @param feedback feedback element that was set by SGI\n+     * @param totalScore totalScore which is summed up. Starts from 0.0\n+     * @param gradingInstructions empty grading instruction Map to collect the used gradingInstructions\n+     * @return calculated total score from feedback elements set by SGI\n+     */\n+    public double computeTotalScore(Feedback feedback, double totalScore, HashMap<Long, Integer> gradingInstructions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTIwNzgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/GradingCriterionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxMjozNlrOHnWeOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTozMzo1MlrOHnbwHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNDY5Nw==", "bodyText": "If the parameter totalScore is always zero, then it doesn't make sense to have it as a parameter. I would suggest to remove it from the signature and provide it as a local variable.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511024697", "createdAt": "2020-10-23T17:12:36Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GradingCriterionService.java", "diffHunk": "@@ -46,4 +48,39 @@ public GradingCriterion findOne(long gradingCriterionId) {\n         return gradingCriterionRepository.findByExerciseIdWithEagerGradingCriteria(exerciseId);\n     }\n \n+    /**\n+     * Calculates the score over all feedback elements that were set using structured grading instructions (SGI)\n+     * @param feedback feedback element that was set by SGI\n+     * @param totalScore totalScore which is summed up. Starts from 0.0\n+     * @param gradingInstructions empty grading instruction Map to collect the used gradingInstructions\n+     * @return calculated total score from feedback elements set by SGI\n+     */\n+    public double computeTotalScore(Feedback feedback, double totalScore, HashMap<Long, Integer> gradingInstructions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExMTE5Nw==", "bodyText": "No, it is also summed up from the Class where it is called from. Fixed the description", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511111197", "createdAt": "2020-10-23T19:33:52Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/GradingCriterionService.java", "diffHunk": "@@ -46,4 +48,39 @@ public GradingCriterion findOne(long gradingCriterionId) {\n         return gradingCriterionRepository.findByExerciseIdWithEagerGradingCriteria(exerciseId);\n     }\n \n+    /**\n+     * Calculates the score over all feedback elements that were set using structured grading instructions (SGI)\n+     * @param feedback feedback element that was set by SGI\n+     * @param totalScore totalScore which is summed up. Starts from 0.0\n+     * @param gradingInstructions empty grading instruction Map to collect the used gradingInstructions\n+     * @return calculated total score from feedback elements set by SGI\n+     */\n+    public double computeTotalScore(Feedback feedback, double totalScore, HashMap<Long, Integer> gradingInstructions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNDY5Nw=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTIzMzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyMDoyM1rOHnWt8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTozODowNVrOHnb5aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyODcyMA==", "bodyText": "It seems a bit off to calculate the score again for manual assessments in this method. The method should just update the result String and do nothing else.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511028720", "createdAt": "2020-10-23T17:20:23Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -419,10 +438,21 @@ private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnaly\n      * @param successfulTestCases test cases with positive feedback.\n      * @param allTests of the given programming exercise.\n      */\n-    private void updateResultString(Result result, Set<ProgrammingExerciseTestCase> successfulTestCases, Set<ProgrammingExerciseTestCase> allTests) {\n-        // Create a new result string that reflects passed, failed & not executed test cases.\n-        String newResultString = successfulTestCases.size() + \" of \" + allTests.size() + \" passed\";\n-        result.setResultString(newResultString);\n+    private void updateResultString(Result result, Set<ProgrammingExerciseTestCase> successfulTestCases, Set<ProgrammingExerciseTestCase> allTests, ProgrammingExercise exercise) {\n+        if (result.getAssessmentType() == AssessmentType.AUTOMATIC) {\n+            // Create a new result string that reflects passed, failed & not executed test cases.\n+            String newResultString = successfulTestCases.size() + \" of \" + allTests.size() + \" passed\";\n+            result.setResultString(newResultString);\n+        }\n+        else {\n+            // Calculate different scores for totalScore calculation and set resultString for manual results\n+            double maxScore = exercise.getMaxScore();\n+            double bonusPoints = Optional.ofNullable(exercise.getBonusPoints()).orElse(0.0);\n+            double calculatedScore = programmingAssessmentService.calculateTotalScore(result.getFeedbacks());\n+            double totalScore = programmingAssessmentService.calculateTotalScore(calculatedScore, maxScore + bonusPoints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExMzU3OQ==", "bodyText": "The problem was that the result score calculation just included the automatic feedback, so it was falsely calculated in case of a manual result. Therefore I recalculated it like it is done for the Assessment.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511113579", "createdAt": "2020-10-23T19:38:05Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -419,10 +438,21 @@ private double calculateStaticCodeAnalysisPenalty(List<Feedback> staticCodeAnaly\n      * @param successfulTestCases test cases with positive feedback.\n      * @param allTests of the given programming exercise.\n      */\n-    private void updateResultString(Result result, Set<ProgrammingExerciseTestCase> successfulTestCases, Set<ProgrammingExerciseTestCase> allTests) {\n-        // Create a new result string that reflects passed, failed & not executed test cases.\n-        String newResultString = successfulTestCases.size() + \" of \" + allTests.size() + \" passed\";\n-        result.setResultString(newResultString);\n+    private void updateResultString(Result result, Set<ProgrammingExerciseTestCase> successfulTestCases, Set<ProgrammingExerciseTestCase> allTests, ProgrammingExercise exercise) {\n+        if (result.getAssessmentType() == AssessmentType.AUTOMATIC) {\n+            // Create a new result string that reflects passed, failed & not executed test cases.\n+            String newResultString = successfulTestCases.size() + \" of \" + allTests.size() + \" passed\";\n+            result.setResultString(newResultString);\n+        }\n+        else {\n+            // Calculate different scores for totalScore calculation and set resultString for manual results\n+            double maxScore = exercise.getMaxScore();\n+            double bonusPoints = Optional.ofNullable(exercise.getBonusPoints()).orElse(0.0);\n+            double calculatedScore = programmingAssessmentService.calculateTotalScore(result.getFeedbacks());\n+            double totalScore = programmingAssessmentService.calculateTotalScore(calculatedScore, maxScore + bonusPoints);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyODcyMA=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTIzNzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyMTo1M1rOHnWw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToyOTozMFrOHnbhqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyOTQ5OA==", "bodyText": "Double negation. Could probably check for FeedbackType.AUTOMATIC", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511029498", "createdAt": "2020-10-23T17:21:53Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -325,7 +343,8 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 double testPoints = testWeight / weightSum * programmingExercise.getMaxScore();\n                 double testPointsWithBonus = testPoints + test.getBonusPoints();\n                 // update credits of related feedback\n-                result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n+                result.getFeedbacks().stream().filter(fb -> !fb.isNotAutomaticFeedback() && fb.getText().equals(test.getTestName())).findFirst()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwNzQ5OQ==", "bodyText": "Done in 217c9f209", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511107499", "createdAt": "2020-10-23T19:29:30Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -325,7 +343,8 @@ private void updateScore(Result result, Set<ProgrammingExerciseTestCase> success\n                 double testPoints = testWeight / weightSum * programmingExercise.getMaxScore();\n                 double testPointsWithBonus = testPoints + test.getBonusPoints();\n                 // update credits of related feedback\n-                result.getFeedbacks().stream().filter(fb -> fb.getText().equals(test.getTestName())).findFirst().ifPresent(feedback -> feedback.setCredits(testPointsWithBonus));\n+                result.getFeedbacks().stream().filter(fb -> !fb.isNotAutomaticFeedback() && fb.getText().equals(test.getTestName())).findFirst()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyOTQ5OA=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTI0MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyMjo0M1rOHnWyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToyOToyMFrOHnbhIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyOTkzMw==", "bodyText": "Double negation. Could probably check for FeedbackType.AUTOMATIC", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511029933", "createdAt": "2020-10-23T17:22:43Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -295,8 +313,8 @@ private void createFeedbackForNotExecutedTests(Result result, Set<ProgrammingExe\n      */\n     private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingExerciseTestCase> testCasesForCurrentDate) {\n         // Find feedback which is not associated with test cases for the current date. Does not remove static code analysis feedback\n-        List<Feedback> feedbacksToFilterForCurrentDate = result.getFeedbacks().stream().filter(\n-                feedback -> !feedback.isStaticCodeAnalysisFeedback() && testCasesForCurrentDate.stream().noneMatch(testCase -> testCase.getTestName().equals(feedback.getText())))\n+        List<Feedback> feedbacksToFilterForCurrentDate = result.getFeedbacks().stream().filter(feedback -> !feedback.isStaticCodeAnalysisFeedback()\n+                && !feedback.isNotAutomaticFeedback() && testCasesForCurrentDate.stream().noneMatch(testCase -> testCase.getTestName().equals(feedback.getText())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwNzM2MQ==", "bodyText": "Done in 217c9f209", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511107361", "createdAt": "2020-10-23T19:29:20Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -295,8 +313,8 @@ private void createFeedbackForNotExecutedTests(Result result, Set<ProgrammingExe\n      */\n     private void removeFeedbacksForAfterDueDateTests(Result result, Set<ProgrammingExerciseTestCase> testCasesForCurrentDate) {\n         // Find feedback which is not associated with test cases for the current date. Does not remove static code analysis feedback\n-        List<Feedback> feedbacksToFilterForCurrentDate = result.getFeedbacks().stream().filter(\n-                feedback -> !feedback.isStaticCodeAnalysisFeedback() && testCasesForCurrentDate.stream().noneMatch(testCase -> testCase.getTestName().equals(feedback.getText())))\n+        List<Feedback> feedbacksToFilterForCurrentDate = result.getFeedbacks().stream().filter(feedback -> !feedback.isStaticCodeAnalysisFeedback()\n+                && !feedback.isNotAutomaticFeedback() && testCasesForCurrentDate.stream().noneMatch(testCase -> testCase.getTestName().equals(feedback.getText())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyOTkzMw=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTI1MzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyNjozMlrOHnW6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0NjowOVrOHncRYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzMTg3Mg==", "bodyText": "Maybe we need a bigger refactoring here. Instead of having an all in one updateResult method which gets more and more complex because it has to handle all kinds of different feedback, we create a updateManualResult method. This could also solve the problem that updateResultString triggers yet another calculation for the manual case. This might be out of scope of this PR.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511031872", "createdAt": "2020-10-23T17:26:32Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -215,6 +219,17 @@ public Result updateResult(Result result, ProgrammingExercise exercise, boolean\n                 updatedResults.add(result);\n             }\n         }\n+\n+        // Update also manual results\n+        List<StudentParticipation> participationsWithManualResult = participationService.findByExerciseIdWithManualResultAndFeedbacks(exercise.getId());\n+        for (StudentParticipation studentParticipation : participationsWithManualResult) {\n+            Result result = studentParticipation.findLatestResult();\n+            if (result != null) {\n+                updateResult(testCases, testCasesForCurrentDate, result, exercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExOTcxMg==", "bodyText": "I think that @schultek wanted to adapt the calculation anyways. Maybe we can do the refactoring then or in a follow up after that :)", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511119712", "createdAt": "2020-10-23T19:46:09Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseGradingService.java", "diffHunk": "@@ -215,6 +219,17 @@ public Result updateResult(Result result, ProgrammingExercise exercise, boolean\n                 updatedResults.add(result);\n             }\n         }\n+\n+        // Update also manual results\n+        List<StudentParticipation> participationsWithManualResult = participationService.findByExerciseIdWithManualResultAndFeedbacks(exercise.getId());\n+        for (StudentParticipation studentParticipation : participationsWithManualResult) {\n+            Result result = studentParticipation.findLatestResult();\n+            if (result != null) {\n+                updateResult(testCases, testCasesForCurrentDate, result, exercise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzMTg3Mg=="}, "originalCommit": {"oid": "4d51dab7e46ca17920d0fae634ca2d852e9a4ce1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzM2NjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingAssessmentService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOToyNTowOVrOHnq-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMzo0OToxNVrOHnxHKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MDY4OA==", "bodyText": "You should cap this again to maxPoints, as you did in the tutor-assessment-container line 442", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511360688", "createdAt": "2020-10-24T09:25:09Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingAssessmentService.java", "diffHunk": "@@ -61,7 +68,50 @@ public Result submitManualAssessment(long resultId) {\n         Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n                 .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n \n-        Double calculatedScore = calculateTotalScore(result.getFeedbacks());\n+        Double calculatedScore = calculateTotalScore(result);\n         return submitResult(result, result.getParticipation().getExercise(), calculatedScore);\n     }\n+\n+    /**\n+     * Calculates the total score for programming exercises.\n+     * @param result with information about feedback and exercise\n+     * @return calculated totalScore\n+     */\n+    private Double calculateTotalScore(Result result) {\n+        double totalScore = 0.0;\n+        double scoreAutomaticTests = 0.0;\n+        ProgrammingExercise programmingExercise = (ProgrammingExercise) result.getParticipation().getExercise();\n+        List<Feedback> assessments = result.getFeedbacks();\n+        var gradingInstructions = new HashMap<Long, Integer>(); // { instructionId: noOfEncounters }\n+\n+        for (Feedback feedback : assessments) {\n+            if (feedback.getGradingInstruction() != null) {\n+                totalScore = gradingCriterionService.computeTotalScore(feedback, totalScore, gradingInstructions);\n+            }\n+            else {\n+                /*\n+                 * In case no structured grading instruction was applied on the assessment model we just sum the feedback credit. We differentiate between automatic test and\n+                 * automatic SCA feedback (automatic test feedback has to be capped)\n+                 */\n+                if (feedback.getType() == FeedbackType.AUTOMATIC && !feedback.isStaticCodeAnalysisFeedback()) {\n+                    scoreAutomaticTests += feedback.getCredits();\n+                }\n+                else {\n+                    totalScore += feedback.getCredits();\n+                }\n+            }\n+        }\n+        /** Calculated score from automatic test feedbacks, is capped to max points + bonus points,\n+        * see also see {@link ProgrammingExerciseGradingService#updateScore} */\n+        double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+        if (scoreAutomaticTests > maxPoints) {\n+            scoreAutomaticTests = maxPoints;\n+        }\n+        totalScore += scoreAutomaticTests;\n+        // Make sure to not give negative points\n+        if (totalScore < 0) {\n+            totalScore = 0;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba184164ade361bb0764bf59730d7240918f0d6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQyMDQyMQ==", "bodyText": "@schultek This is done, but in the submitResult call which is done in line 72 (after this calculation). Then in the submitResult call we call a different calculateTotalScore method see AssessementService.java:227 and there we cap it to the maxScore.", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511420421", "createdAt": "2020-10-24T12:05:11Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingAssessmentService.java", "diffHunk": "@@ -61,7 +68,50 @@ public Result submitManualAssessment(long resultId) {\n         Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n                 .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n \n-        Double calculatedScore = calculateTotalScore(result.getFeedbacks());\n+        Double calculatedScore = calculateTotalScore(result);\n         return submitResult(result, result.getParticipation().getExercise(), calculatedScore);\n     }\n+\n+    /**\n+     * Calculates the total score for programming exercises.\n+     * @param result with information about feedback and exercise\n+     * @return calculated totalScore\n+     */\n+    private Double calculateTotalScore(Result result) {\n+        double totalScore = 0.0;\n+        double scoreAutomaticTests = 0.0;\n+        ProgrammingExercise programmingExercise = (ProgrammingExercise) result.getParticipation().getExercise();\n+        List<Feedback> assessments = result.getFeedbacks();\n+        var gradingInstructions = new HashMap<Long, Integer>(); // { instructionId: noOfEncounters }\n+\n+        for (Feedback feedback : assessments) {\n+            if (feedback.getGradingInstruction() != null) {\n+                totalScore = gradingCriterionService.computeTotalScore(feedback, totalScore, gradingInstructions);\n+            }\n+            else {\n+                /*\n+                 * In case no structured grading instruction was applied on the assessment model we just sum the feedback credit. We differentiate between automatic test and\n+                 * automatic SCA feedback (automatic test feedback has to be capped)\n+                 */\n+                if (feedback.getType() == FeedbackType.AUTOMATIC && !feedback.isStaticCodeAnalysisFeedback()) {\n+                    scoreAutomaticTests += feedback.getCredits();\n+                }\n+                else {\n+                    totalScore += feedback.getCredits();\n+                }\n+            }\n+        }\n+        /** Calculated score from automatic test feedbacks, is capped to max points + bonus points,\n+        * see also see {@link ProgrammingExerciseGradingService#updateScore} */\n+        double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+        if (scoreAutomaticTests > maxPoints) {\n+            scoreAutomaticTests = maxPoints;\n+        }\n+        totalScore += scoreAutomaticTests;\n+        // Make sure to not give negative points\n+        if (totalScore < 0) {\n+            totalScore = 0;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MDY4OA=="}, "originalCommit": {"oid": "1ba184164ade361bb0764bf59730d7240918f0d6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ2MTE2Mw==", "bodyText": "Ok", "url": "https://github.com/ls1intum/Artemis/pull/2223#discussion_r511461163", "createdAt": "2020-10-24T13:49:15Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingAssessmentService.java", "diffHunk": "@@ -61,7 +68,50 @@ public Result submitManualAssessment(long resultId) {\n         Result result = resultRepository.findWithEagerSubmissionAndFeedbackAndAssessorById(resultId)\n                 .orElseThrow(() -> new EntityNotFoundException(\"No result for the given resultId could be found\"));\n \n-        Double calculatedScore = calculateTotalScore(result.getFeedbacks());\n+        Double calculatedScore = calculateTotalScore(result);\n         return submitResult(result, result.getParticipation().getExercise(), calculatedScore);\n     }\n+\n+    /**\n+     * Calculates the total score for programming exercises.\n+     * @param result with information about feedback and exercise\n+     * @return calculated totalScore\n+     */\n+    private Double calculateTotalScore(Result result) {\n+        double totalScore = 0.0;\n+        double scoreAutomaticTests = 0.0;\n+        ProgrammingExercise programmingExercise = (ProgrammingExercise) result.getParticipation().getExercise();\n+        List<Feedback> assessments = result.getFeedbacks();\n+        var gradingInstructions = new HashMap<Long, Integer>(); // { instructionId: noOfEncounters }\n+\n+        for (Feedback feedback : assessments) {\n+            if (feedback.getGradingInstruction() != null) {\n+                totalScore = gradingCriterionService.computeTotalScore(feedback, totalScore, gradingInstructions);\n+            }\n+            else {\n+                /*\n+                 * In case no structured grading instruction was applied on the assessment model we just sum the feedback credit. We differentiate between automatic test and\n+                 * automatic SCA feedback (automatic test feedback has to be capped)\n+                 */\n+                if (feedback.getType() == FeedbackType.AUTOMATIC && !feedback.isStaticCodeAnalysisFeedback()) {\n+                    scoreAutomaticTests += feedback.getCredits();\n+                }\n+                else {\n+                    totalScore += feedback.getCredits();\n+                }\n+            }\n+        }\n+        /** Calculated score from automatic test feedbacks, is capped to max points + bonus points,\n+        * see also see {@link ProgrammingExerciseGradingService#updateScore} */\n+        double maxPoints = programmingExercise.getMaxScore() + Optional.ofNullable(programmingExercise.getBonusPoints()).orElse(0.0);\n+        if (scoreAutomaticTests > maxPoints) {\n+            scoreAutomaticTests = maxPoints;\n+        }\n+        totalScore += scoreAutomaticTests;\n+        // Make sure to not give negative points\n+        if (totalScore < 0) {\n+            totalScore = 0;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2MDY4OA=="}, "originalCommit": {"oid": "1ba184164ade361bb0764bf59730d7240918f0d6"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4550, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}