{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDIzNDcy", "number": 1614, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxNzoxMFrOEEQBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0NjoxNVrOEEa0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODkyMTgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxNzoxMFrOGhwPKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxNzoxMFrOGhwPKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0NjUwNA==", "bodyText": "we should always use 'api/courses' as base URL. This simplifies authorization checks on the server! Only instructors and admins should be able to call requests related to exams", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438046504", "createdAt": "2020-06-10T11:17:10Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "diffHunk": "@@ -1,8 +1,111 @@\n import { Injectable } from '@angular/core';\n-\n+import { Router } from '@angular/router';\n+import { HttpClient, HttpResponse } from '@angular/common/http';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import * as moment from 'moment';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Exam } from 'app/entities/exam.model';\n+import { createRequestOption } from 'app/shared/util/request-util';\n+\n+type EntityResponseType = HttpResponse<Exam>;\n+type EntityArrayResponseType = HttpResponse<Exam[]>;\n \n @Injectable({ providedIn: 'root' })\n export class ExamManagementService {\n-    public resourceUrl = SERVER_API_URL + 'api/exams';\n+    public resourceUrlCourses = SERVER_API_URL + 'api/courses';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520ad798cc5e4dd66d18d7eb22adffd1bb2c8576"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODkyMjgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxNzoyOFrOGhwPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxNzoyOFrOGhwPwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0NjY1Ng==", "bodyText": "please remove resourceUrlExams and use  resourceUrlCourses", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438046656", "createdAt": "2020-06-10T11:17:28Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "diffHunk": "@@ -1,8 +1,111 @@\n import { Injectable } from '@angular/core';\n-\n+import { Router } from '@angular/router';\n+import { HttpClient, HttpResponse } from '@angular/common/http';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import * as moment from 'moment';\n import { SERVER_API_URL } from 'app/app.constants';\n+import { Exam } from 'app/entities/exam.model';\n+import { createRequestOption } from 'app/shared/util/request-util';\n+\n+type EntityResponseType = HttpResponse<Exam>;\n+type EntityArrayResponseType = HttpResponse<Exam[]>;\n \n @Injectable({ providedIn: 'root' })\n export class ExamManagementService {\n-    public resourceUrl = SERVER_API_URL + 'api/exams';\n+    public resourceUrlCourses = SERVER_API_URL + 'api/courses';\n+    public resourceUrlExams = SERVER_API_URL + 'api/exams';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520ad798cc5e4dd66d18d7eb22adffd1bb2c8576"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODkyNjkzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exercise-groups/exercise-group.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxODo1N1rOGhwSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxODo1N1rOGhwSew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0NzM1NQ==", "bodyText": "I would also like to have 'courses' and '{courseId}' in all paths here", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438047355", "createdAt": "2020-06-10T11:18:57Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/manage/exercise-groups/exercise-group.service.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Injectable } from '@angular/core';\n+import { Router } from '@angular/router';\n+import { HttpClient, HttpResponse } from '@angular/common/http';\n+import { Observable } from 'rxjs';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+\n+type EntityResponseType = HttpResponse<ExerciseGroup>;\n+type EntityArrayResponseType = HttpResponse<ExerciseGroup[]>;\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupService {\n+    public resourceUrlExerciseGroups = SERVER_API_URL + 'api/exerciseGroups';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520ad798cc5e4dd66d18d7eb22adffd1bb2c8576"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODkyOTQxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/student-exams/student-exam.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxOTo1NlrOGhwUIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxOTo1NlrOGhwUIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0Nzc3Nw==", "bodyText": "Please also include 'api/courses' and '{courseId}' here", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438047777", "createdAt": "2020-06-10T11:19:56Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/manage/student-exams/student-exam.service.ts", "diffHunk": "@@ -0,0 +1,33 @@\n+import { Injectable } from '@angular/core';\n+import { Router } from '@angular/router';\n+import { HttpClient, HttpResponse } from '@angular/common/http';\n+import { Observable } from 'rxjs';\n+import { SERVER_API_URL } from 'app/app.constants';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+\n+type EntityResponseType = HttpResponse<StudentExam>;\n+type EntityArrayResponseType = HttpResponse<StudentExam[]>;\n+\n+@Injectable({ providedIn: 'root' })\n+export class StudentExamService {\n+    public resourceUrlStudentExam = SERVER_API_URL + 'api/studentExams';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520ad798cc5e4dd66d18d7eb22adffd1bb2c8576"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDI1MTgxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exercise-groups/exercise-group-detail.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozOTo0MFrOGh9eGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjo0ODozMVrOGh9yxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MzMyMQ==", "bodyText": "Shouldn't the exerciseGroups be accessible using the examId instead of the courseId? See UML", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438263321", "createdAt": "2020-06-10T16:39:40Z", "author": {"login": "anditurdiu"}, "path": "src/main/webapp/app/exam/manage/exercise-groups/exercise-group-detail.component.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ActivatedRoute } from '@angular/router';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+\n+@Component({\n+    selector: 'jhi-exercise-group-detail',\n+    templateUrl: './exercise-group-detail.component.html',\n+})\n+export class ExerciseGroupDetailComponent implements OnInit {\n+    courseId: number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2ODYxNA==", "bodyText": "Actually, we will always use both: the courseId and the examId. We need them to secure the server REST routes.\nI only initialized courseId here, as the examId is stored directly in the exerciseGroup object that comes from the resolver.", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438268614", "createdAt": "2020-06-10T16:48:31Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exercise-groups/exercise-group-detail.component.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ActivatedRoute } from '@angular/router';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+\n+@Component({\n+    selector: 'jhi-exercise-group-detail',\n+    templateUrl: './exercise-group-detail.component.html',\n+})\n+export class ExerciseGroupDetailComponent implements OnInit {\n+    courseId: number;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MzMyMQ=="}, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDMzODUwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzowMzo1NlrOGh-Wtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxNjozOFrOGh-zgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NzgxNQ==", "bodyText": "Do we actually need courseId, examId and exerciseGroupId to retrieve an exerciseGroup? My understanding is that exerciseGroupId is already unique and should suffice for the retrieval.", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438277815", "createdAt": "2020-06-10T17:03:56Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -1,14 +1,211 @@\n-import { Routes } from '@angular/router';\n+import { Injectable } from '@angular/core';\n+import { HttpResponse } from '@angular/common/http';\n+import { ActivatedRouteSnapshot, Resolve, Routes } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { filter, map } from 'rxjs/operators';\n import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n import { ExamManagementComponent } from 'app/exam/manage/exam-management.component';\n+import { ExamUpdateComponent } from 'app/exam/manage/exams/exam-update.component';\n+import { ExamDetailComponent } from 'app/exam/manage/exams/exam-detail.component';\n+import { ExerciseGroupsComponent } from 'app/exam/manage/exercise-groups/exercise-groups.component';\n+import { ExerciseGroupUpdateComponent } from 'app/exam/manage/exercise-groups/exercise-group-update.component';\n+import { ExerciseGroupDetailComponent } from 'app/exam/manage/exercise-groups/exercise-group-detail.component';\n+import { ExamStudentsComponent } from 'app/exam/manage/students/exam-students.component';\n+import { StudentExamsComponent } from 'app/exam/manage/student-exams/student-exams.component';\n+import { StudentExamDetailComponent } from 'app/exam/manage/student-exams/student-exam-detail.component';\n+import { Exam } from 'app/entities/exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+import { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExamResolve implements Resolve<Exam> {\n+    constructor(private examManagementService: ExamManagementService) {}\n+\n+    /**\n+     * Resolves the route by extracting the examId and returns the exam with that Id if it exists\n+     * or creates a new exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<Exam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        if (courseId && examId) {\n+            return this.examManagementService.find(courseId, examId).pipe(\n+                filter((response: HttpResponse<Exam>) => response.ok),\n+                map((course: HttpResponse<Exam>) => course.body!),\n+            );\n+        }\n+        return of(new Exam());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupResolve implements Resolve<ExerciseGroup> {\n+    constructor(private exerciseGroupService: ExerciseGroupService) {}\n+\n+    /**\n+     * Resolves the route by extracting the exerciseGroupId and returns the exercise group with that id if it exists\n+     * or creates a new exercise group otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<ExerciseGroup> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NTE4Nw==", "bodyText": "I've already discussed this with Stephan. The idea is that we will use both to secure the REST routes: we'll check in all routes that the user is an instructor in the course (courseId) and that the exam (examId) belongs to the course.", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438285187", "createdAt": "2020-06-10T17:16:38Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -1,14 +1,211 @@\n-import { Routes } from '@angular/router';\n+import { Injectable } from '@angular/core';\n+import { HttpResponse } from '@angular/common/http';\n+import { ActivatedRouteSnapshot, Resolve, Routes } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { filter, map } from 'rxjs/operators';\n import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n import { ExamManagementComponent } from 'app/exam/manage/exam-management.component';\n+import { ExamUpdateComponent } from 'app/exam/manage/exams/exam-update.component';\n+import { ExamDetailComponent } from 'app/exam/manage/exams/exam-detail.component';\n+import { ExerciseGroupsComponent } from 'app/exam/manage/exercise-groups/exercise-groups.component';\n+import { ExerciseGroupUpdateComponent } from 'app/exam/manage/exercise-groups/exercise-group-update.component';\n+import { ExerciseGroupDetailComponent } from 'app/exam/manage/exercise-groups/exercise-group-detail.component';\n+import { ExamStudentsComponent } from 'app/exam/manage/students/exam-students.component';\n+import { StudentExamsComponent } from 'app/exam/manage/student-exams/student-exams.component';\n+import { StudentExamDetailComponent } from 'app/exam/manage/student-exams/student-exam-detail.component';\n+import { Exam } from 'app/entities/exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+import { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExamResolve implements Resolve<Exam> {\n+    constructor(private examManagementService: ExamManagementService) {}\n+\n+    /**\n+     * Resolves the route by extracting the examId and returns the exam with that Id if it exists\n+     * or creates a new exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<Exam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        if (courseId && examId) {\n+            return this.examManagementService.find(courseId, examId).pipe(\n+                filter((response: HttpResponse<Exam>) => response.ok),\n+                map((course: HttpResponse<Exam>) => course.body!),\n+            );\n+        }\n+        return of(new Exam());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupResolve implements Resolve<ExerciseGroup> {\n+    constructor(private exerciseGroupService: ExerciseGroupService) {}\n+\n+    /**\n+     * Resolves the route by extracting the exerciseGroupId and returns the exercise group with that id if it exists\n+     * or creates a new exercise group otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<ExerciseGroup> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NzgxNQ=="}, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDY3NTgxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0MTowNVrOGiByKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0MTowNVrOGiByKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzMzk5Mw==", "bodyText": "The full path here is course-management/:courseId/exams/new. We don't have an examId here, so ExamResolve won't work.", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438333993", "createdAt": "2020-06-10T18:41:05Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -1,14 +1,211 @@\n-import { Routes } from '@angular/router';\n+import { Injectable } from '@angular/core';\n+import { HttpResponse } from '@angular/common/http';\n+import { ActivatedRouteSnapshot, Resolve, Routes } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { filter, map } from 'rxjs/operators';\n import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n import { ExamManagementComponent } from 'app/exam/manage/exam-management.component';\n+import { ExamUpdateComponent } from 'app/exam/manage/exams/exam-update.component';\n+import { ExamDetailComponent } from 'app/exam/manage/exams/exam-detail.component';\n+import { ExerciseGroupsComponent } from 'app/exam/manage/exercise-groups/exercise-groups.component';\n+import { ExerciseGroupUpdateComponent } from 'app/exam/manage/exercise-groups/exercise-group-update.component';\n+import { ExerciseGroupDetailComponent } from 'app/exam/manage/exercise-groups/exercise-group-detail.component';\n+import { ExamStudentsComponent } from 'app/exam/manage/students/exam-students.component';\n+import { StudentExamsComponent } from 'app/exam/manage/student-exams/student-exams.component';\n+import { StudentExamDetailComponent } from 'app/exam/manage/student-exams/student-exam-detail.component';\n+import { Exam } from 'app/entities/exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+import { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExamResolve implements Resolve<Exam> {\n+    constructor(private examManagementService: ExamManagementService) {}\n+\n+    /**\n+     * Resolves the route by extracting the examId and returns the exam with that Id if it exists\n+     * or creates a new exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<Exam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        if (courseId && examId) {\n+            return this.examManagementService.find(courseId, examId).pipe(\n+                filter((response: HttpResponse<Exam>) => response.ok),\n+                map((course: HttpResponse<Exam>) => course.body!),\n+            );\n+        }\n+        return of(new Exam());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupResolve implements Resolve<ExerciseGroup> {\n+    constructor(private exerciseGroupService: ExerciseGroupService) {}\n+\n+    /**\n+     * Resolves the route by extracting the exerciseGroupId and returns the exercise group with that id if it exists\n+     * or creates a new exercise group otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<ExerciseGroup> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const exerciseGroupId = route.params['exerciseGroupId'] ? route.params['exerciseGroupId'] : null;\n+        if (courseId && examId && exerciseGroupId) {\n+            return this.exerciseGroupService.find(courseId, examId, exerciseGroupId).pipe(\n+                filter((response: HttpResponse<ExerciseGroup>) => response.ok),\n+                map((course: HttpResponse<ExerciseGroup>) => course.body!),\n+            );\n+        }\n+        return of(new ExerciseGroup());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class StudentExamResolve implements Resolve<StudentExam> {\n+    constructor(private studentExamService: StudentExamService) {}\n+\n+    /**\n+     * Resolves the route by extracting the studentExamId and returns the student exam with that id if it exists\n+     * or creates a new student exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<StudentExam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const studentExamId = route.params['studentExamId'] ? route.params['studentExamId'] : null;\n+        if (courseId && examId && studentExamId) {\n+            return this.studentExamService.find(courseId, examId, studentExamId).pipe(\n+                filter((response: HttpResponse<StudentExam>) => response.ok),\n+                map((course: HttpResponse<StudentExam>) => course.body!),\n+            );\n+        }\n+        return of(new StudentExam());\n+    }\n+}\n \n export const examManagementRoute: Routes = [\n     {\n         path: '',\n         component: ExamManagementComponent,\n         data: {\n             authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n-            pageTitle: 'artemisApp.exam.title',\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: 'new',\n+        component: ExamUpdateComponent,\n+        resolve: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDY5MjI1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0NjoxNVrOGiB9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo1NjoxMlrOGiCR-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjc4OQ==", "bodyText": "ExerciseGroupResolve uses courseId, examId and exerciseGroupId. ExerciseGroupId is not part of the route", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438336789", "createdAt": "2020-06-10T18:46:15Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -1,14 +1,211 @@\n-import { Routes } from '@angular/router';\n+import { Injectable } from '@angular/core';\n+import { HttpResponse } from '@angular/common/http';\n+import { ActivatedRouteSnapshot, Resolve, Routes } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { filter, map } from 'rxjs/operators';\n import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n import { ExamManagementComponent } from 'app/exam/manage/exam-management.component';\n+import { ExamUpdateComponent } from 'app/exam/manage/exams/exam-update.component';\n+import { ExamDetailComponent } from 'app/exam/manage/exams/exam-detail.component';\n+import { ExerciseGroupsComponent } from 'app/exam/manage/exercise-groups/exercise-groups.component';\n+import { ExerciseGroupUpdateComponent } from 'app/exam/manage/exercise-groups/exercise-group-update.component';\n+import { ExerciseGroupDetailComponent } from 'app/exam/manage/exercise-groups/exercise-group-detail.component';\n+import { ExamStudentsComponent } from 'app/exam/manage/students/exam-students.component';\n+import { StudentExamsComponent } from 'app/exam/manage/student-exams/student-exams.component';\n+import { StudentExamDetailComponent } from 'app/exam/manage/student-exams/student-exam-detail.component';\n+import { Exam } from 'app/entities/exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+import { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExamResolve implements Resolve<Exam> {\n+    constructor(private examManagementService: ExamManagementService) {}\n+\n+    /**\n+     * Resolves the route by extracting the examId and returns the exam with that Id if it exists\n+     * or creates a new exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<Exam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        if (courseId && examId) {\n+            return this.examManagementService.find(courseId, examId).pipe(\n+                filter((response: HttpResponse<Exam>) => response.ok),\n+                map((course: HttpResponse<Exam>) => course.body!),\n+            );\n+        }\n+        return of(new Exam());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupResolve implements Resolve<ExerciseGroup> {\n+    constructor(private exerciseGroupService: ExerciseGroupService) {}\n+\n+    /**\n+     * Resolves the route by extracting the exerciseGroupId and returns the exercise group with that id if it exists\n+     * or creates a new exercise group otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<ExerciseGroup> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const exerciseGroupId = route.params['exerciseGroupId'] ? route.params['exerciseGroupId'] : null;\n+        if (courseId && examId && exerciseGroupId) {\n+            return this.exerciseGroupService.find(courseId, examId, exerciseGroupId).pipe(\n+                filter((response: HttpResponse<ExerciseGroup>) => response.ok),\n+                map((course: HttpResponse<ExerciseGroup>) => course.body!),\n+            );\n+        }\n+        return of(new ExerciseGroup());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class StudentExamResolve implements Resolve<StudentExam> {\n+    constructor(private studentExamService: StudentExamService) {}\n+\n+    /**\n+     * Resolves the route by extracting the studentExamId and returns the student exam with that id if it exists\n+     * or creates a new student exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<StudentExam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const studentExamId = route.params['studentExamId'] ? route.params['studentExamId'] : null;\n+        if (courseId && examId && studentExamId) {\n+            return this.studentExamService.find(courseId, examId, studentExamId).pipe(\n+                filter((response: HttpResponse<StudentExam>) => response.ok),\n+                map((course: HttpResponse<StudentExam>) => course.body!),\n+            );\n+        }\n+        return of(new StudentExam());\n+    }\n+}\n \n export const examManagementRoute: Routes = [\n     {\n         path: '',\n         component: ExamManagementComponent,\n         data: {\n             authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n-            pageTitle: 'artemisApp.exam.title',\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: 'new',\n+        component: ExamUpdateComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/edit',\n+        component: ExamUpdateComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/view',\n+        component: ExamDetailComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups',\n+        component: ExerciseGroupsComponent,\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups/new',\n+        component: ExerciseGroupUpdateComponent,\n+        resolve: {\n+            exerciseGroup: ExerciseGroupResolve,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MTA0Ng==", "bodyText": "The idea (also for the other resolvers) is that if one of the ids does not exists (if (courseId && examId && exerciseGroupId)) an empty entity will be returned (return of(new ExerciseGroup());). This is how we do it in other places of the application :-)", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438341046", "createdAt": "2020-06-10T18:54:13Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -1,14 +1,211 @@\n-import { Routes } from '@angular/router';\n+import { Injectable } from '@angular/core';\n+import { HttpResponse } from '@angular/common/http';\n+import { ActivatedRouteSnapshot, Resolve, Routes } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { filter, map } from 'rxjs/operators';\n import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n import { ExamManagementComponent } from 'app/exam/manage/exam-management.component';\n+import { ExamUpdateComponent } from 'app/exam/manage/exams/exam-update.component';\n+import { ExamDetailComponent } from 'app/exam/manage/exams/exam-detail.component';\n+import { ExerciseGroupsComponent } from 'app/exam/manage/exercise-groups/exercise-groups.component';\n+import { ExerciseGroupUpdateComponent } from 'app/exam/manage/exercise-groups/exercise-group-update.component';\n+import { ExerciseGroupDetailComponent } from 'app/exam/manage/exercise-groups/exercise-group-detail.component';\n+import { ExamStudentsComponent } from 'app/exam/manage/students/exam-students.component';\n+import { StudentExamsComponent } from 'app/exam/manage/student-exams/student-exams.component';\n+import { StudentExamDetailComponent } from 'app/exam/manage/student-exams/student-exam-detail.component';\n+import { Exam } from 'app/entities/exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+import { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExamResolve implements Resolve<Exam> {\n+    constructor(private examManagementService: ExamManagementService) {}\n+\n+    /**\n+     * Resolves the route by extracting the examId and returns the exam with that Id if it exists\n+     * or creates a new exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<Exam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        if (courseId && examId) {\n+            return this.examManagementService.find(courseId, examId).pipe(\n+                filter((response: HttpResponse<Exam>) => response.ok),\n+                map((course: HttpResponse<Exam>) => course.body!),\n+            );\n+        }\n+        return of(new Exam());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupResolve implements Resolve<ExerciseGroup> {\n+    constructor(private exerciseGroupService: ExerciseGroupService) {}\n+\n+    /**\n+     * Resolves the route by extracting the exerciseGroupId and returns the exercise group with that id if it exists\n+     * or creates a new exercise group otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<ExerciseGroup> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const exerciseGroupId = route.params['exerciseGroupId'] ? route.params['exerciseGroupId'] : null;\n+        if (courseId && examId && exerciseGroupId) {\n+            return this.exerciseGroupService.find(courseId, examId, exerciseGroupId).pipe(\n+                filter((response: HttpResponse<ExerciseGroup>) => response.ok),\n+                map((course: HttpResponse<ExerciseGroup>) => course.body!),\n+            );\n+        }\n+        return of(new ExerciseGroup());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class StudentExamResolve implements Resolve<StudentExam> {\n+    constructor(private studentExamService: StudentExamService) {}\n+\n+    /**\n+     * Resolves the route by extracting the studentExamId and returns the student exam with that id if it exists\n+     * or creates a new student exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<StudentExam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const studentExamId = route.params['studentExamId'] ? route.params['studentExamId'] : null;\n+        if (courseId && examId && studentExamId) {\n+            return this.studentExamService.find(courseId, examId, studentExamId).pipe(\n+                filter((response: HttpResponse<StudentExam>) => response.ok),\n+                map((course: HttpResponse<StudentExam>) => course.body!),\n+            );\n+        }\n+        return of(new StudentExam());\n+    }\n+}\n \n export const examManagementRoute: Routes = [\n     {\n         path: '',\n         component: ExamManagementComponent,\n         data: {\n             authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n-            pageTitle: 'artemisApp.exam.title',\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: 'new',\n+        component: ExamUpdateComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/edit',\n+        component: ExamUpdateComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/view',\n+        component: ExamDetailComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups',\n+        component: ExerciseGroupsComponent,\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups/new',\n+        component: ExerciseGroupUpdateComponent,\n+        resolve: {\n+            exerciseGroup: ExerciseGroupResolve,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjc4OQ=="}, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MjEzNw==", "bodyText": "I missed that, got it now, thanks!", "url": "https://github.com/ls1intum/Artemis/pull/1614#discussion_r438342137", "createdAt": "2020-06-10T18:56:12Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exam/manage/exam-management.route.ts", "diffHunk": "@@ -1,14 +1,211 @@\n-import { Routes } from '@angular/router';\n+import { Injectable } from '@angular/core';\n+import { HttpResponse } from '@angular/common/http';\n+import { ActivatedRouteSnapshot, Resolve, Routes } from '@angular/router';\n+import { Observable, of } from 'rxjs';\n+import { filter, map } from 'rxjs/operators';\n import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n import { ExamManagementComponent } from 'app/exam/manage/exam-management.component';\n+import { ExamUpdateComponent } from 'app/exam/manage/exams/exam-update.component';\n+import { ExamDetailComponent } from 'app/exam/manage/exams/exam-detail.component';\n+import { ExerciseGroupsComponent } from 'app/exam/manage/exercise-groups/exercise-groups.component';\n+import { ExerciseGroupUpdateComponent } from 'app/exam/manage/exercise-groups/exercise-group-update.component';\n+import { ExerciseGroupDetailComponent } from 'app/exam/manage/exercise-groups/exercise-group-detail.component';\n+import { ExamStudentsComponent } from 'app/exam/manage/students/exam-students.component';\n+import { StudentExamsComponent } from 'app/exam/manage/student-exams/student-exams.component';\n+import { StudentExamDetailComponent } from 'app/exam/manage/student-exams/student-exam-detail.component';\n+import { Exam } from 'app/entities/exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ExerciseGroupService } from 'app/exam/manage/exercise-groups/exercise-group.service';\n+import { StudentExamService } from 'app/exam/manage/student-exams/student-exam.service';\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExamResolve implements Resolve<Exam> {\n+    constructor(private examManagementService: ExamManagementService) {}\n+\n+    /**\n+     * Resolves the route by extracting the examId and returns the exam with that Id if it exists\n+     * or creates a new exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<Exam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        if (courseId && examId) {\n+            return this.examManagementService.find(courseId, examId).pipe(\n+                filter((response: HttpResponse<Exam>) => response.ok),\n+                map((course: HttpResponse<Exam>) => course.body!),\n+            );\n+        }\n+        return of(new Exam());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class ExerciseGroupResolve implements Resolve<ExerciseGroup> {\n+    constructor(private exerciseGroupService: ExerciseGroupService) {}\n+\n+    /**\n+     * Resolves the route by extracting the exerciseGroupId and returns the exercise group with that id if it exists\n+     * or creates a new exercise group otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<ExerciseGroup> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const exerciseGroupId = route.params['exerciseGroupId'] ? route.params['exerciseGroupId'] : null;\n+        if (courseId && examId && exerciseGroupId) {\n+            return this.exerciseGroupService.find(courseId, examId, exerciseGroupId).pipe(\n+                filter((response: HttpResponse<ExerciseGroup>) => response.ok),\n+                map((course: HttpResponse<ExerciseGroup>) => course.body!),\n+            );\n+        }\n+        return of(new ExerciseGroup());\n+    }\n+}\n+\n+@Injectable({ providedIn: 'root' })\n+export class StudentExamResolve implements Resolve<StudentExam> {\n+    constructor(private studentExamService: StudentExamService) {}\n+\n+    /**\n+     * Resolves the route by extracting the studentExamId and returns the student exam with that id if it exists\n+     * or creates a new student exam otherwise.\n+     * @param route Contains the information about the route to be resolved\n+     */\n+    resolve(route: ActivatedRouteSnapshot): Observable<StudentExam> {\n+        const courseId = route.params['courseId'] ? route.params['courseId'] : null;\n+        const examId = route.params['examId'] ? route.params['examId'] : null;\n+        const studentExamId = route.params['studentExamId'] ? route.params['studentExamId'] : null;\n+        if (courseId && examId && studentExamId) {\n+            return this.studentExamService.find(courseId, examId, studentExamId).pipe(\n+                filter((response: HttpResponse<StudentExam>) => response.ok),\n+                map((course: HttpResponse<StudentExam>) => course.body!),\n+            );\n+        }\n+        return of(new StudentExam());\n+    }\n+}\n \n export const examManagementRoute: Routes = [\n     {\n         path: '',\n         component: ExamManagementComponent,\n         data: {\n             authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n-            pageTitle: 'artemisApp.exam.title',\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: 'new',\n+        component: ExamUpdateComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/edit',\n+        component: ExamUpdateComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/view',\n+        component: ExamDetailComponent,\n+        resolve: {\n+            exam: ExamResolve,\n+        },\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups',\n+        component: ExerciseGroupsComponent,\n+        data: {\n+            authorities: ['ROLE_INSTRUCTOR', 'ROLE_ADMIN'],\n+            pageTitle: 'artemisApp.examManagement.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+    {\n+        path: ':examId/exerciseGroups/new',\n+        component: ExerciseGroupUpdateComponent,\n+        resolve: {\n+            exerciseGroup: ExerciseGroupResolve,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjc4OQ=="}, "originalCommit": {"oid": "91b9cc15b92ed927632c448789d2bd634d757369"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 41, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}