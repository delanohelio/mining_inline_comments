{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjE3MTQ5", "number": 1721, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1ODoxNFrOELCUtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoxMjozN1rOELfeZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDA3ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1ODoxNFrOGsbTrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzozNjoyMVrOGsftag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNzkzNQ==", "bodyText": "I'd prefer returning an Optional instead of null.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449237935", "createdAt": "2020-07-02T19:58:14Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return relevant result of student participation or null if none exists\n+     */\n+    private Result getRelevantResult(StudentParticipation studentParticipation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxMDA1OA==", "bodyText": "Adressed both points in\n7a4e807\nand\nfd02505", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449310058", "createdAt": "2020-07-02T23:36:21Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return relevant result of student participation or null if none exists\n+     */\n+    private Result getRelevantResult(StudentParticipation studentParticipation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNzkzNQ=="}, "originalCommit": {"oid": "1ad784ff68ccc4ae992813422239cbda18b4109e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU4MDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowMDoxOFrOGspSNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToxMTowMFrOGspn_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ==", "bodyText": "I don't think you need \"exerciseGroups.exercises.studentParticipations.submissions\" here.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449466935", "createdAt": "2020-07-03T09:00:18Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java", "diffHunk": "@@ -46,6 +46,10 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exerciseGroups\", \"exerciseGroups.exercises\", \"registeredUsers\", \"studentExams\" })\n     Optional<Exam> findWithExercisesRegisteredUsersStudentExamsById(Long id);\n \n+    @EntityGraph(type = LOAD, attributePaths = { \"registeredUsers\", \"exerciseGroups\", \"exerciseGroups.exercises\", \"exerciseGroups.exercises.studentParticipations\",\n+            \"exerciseGroups.exercises.studentParticipations.results\", \"exerciseGroups.exercises.studentParticipations.submissions\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzIzMg==", "bodyText": "The DB query is already quite extensive, in particular if we have >1000 students and 6-10 exercises, so we should try to avoid unnecessary data here", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449467232", "createdAt": "2020-07-03T09:00:52Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java", "diffHunk": "@@ -46,6 +46,10 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exerciseGroups\", \"exerciseGroups.exercises\", \"registeredUsers\", \"studentExams\" })\n     Optional<Exam> findWithExercisesRegisteredUsersStudentExamsById(Long id);\n \n+    @EntityGraph(type = LOAD, attributePaths = { \"registeredUsers\", \"exerciseGroups\", \"exerciseGroups.exercises\", \"exerciseGroups.exercises.studentParticipations\",\n+            \"exerciseGroups.exercises.studentParticipations.results\", \"exerciseGroups.exercises.studentParticipations.submissions\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ=="}, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MjUwOQ==", "bodyText": "Changed in 1ebbac8", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449472509", "createdAt": "2020-07-03T09:11:00Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/ExamRepository.java", "diffHunk": "@@ -46,6 +46,10 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exerciseGroups\", \"exerciseGroups.exercises\", \"registeredUsers\", \"studentExams\" })\n     Optional<Exam> findWithExercisesRegisteredUsersStudentExamsById(Long id);\n \n+    @EntityGraph(type = LOAD, attributePaths = { \"registeredUsers\", \"exerciseGroups\", \"exerciseGroups.exercises\", \"exerciseGroups.exercises.studentParticipations\",\n+            \"exerciseGroups.exercises.studentParticipations.results\", \"exerciseGroups.exercises.studentParticipations.submissions\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjkzNQ=="}, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU4Mjk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowMTowM1rOGspTvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToxMTo0NlrOGsppxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzMyNQ==", "bodyText": "please add { }", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449467325", "createdAt": "2020-07-03T09:01:03Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,147 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3Mjk2Ng==", "bodyText": "Changed in 5011dbd", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449472966", "createdAt": "2020-07-03T09:11:46Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,147 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NzMyNQ=="}, "originalCommit": {"oid": "fd0250513c752c1f9f2dbcdc4e1237652146dc68"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk4MTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMToyNDoyOVrOGs-BOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1MTozNlrOGs-HRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNjY0OA==", "bodyText": "Why do we return \"\" instead of null if no registrationNumber is present?", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449806648", "createdAt": "2020-07-04T21:24:29Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODE5Nw==", "bodyText": "yes, we should return null, trim() is also not necessary", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808197", "createdAt": "2020-07-04T21:51:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNjY0OA=="}, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk4NTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTozMTo0MVrOGs-C6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1MjowOVrOGs-HbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzA4MA==", "bodyText": "Why not initialize studentResult.overallPointsAchieved with 0. Then you don't need the conditional.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807080", "createdAt": "2020-07-04T21:31:41Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODIzNw==", "bodyText": "makes more sense", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808237", "createdAt": "2020-07-04T21:52:09Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzA4MA=="}, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk4NzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTozNzowM1rOGs-EDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1Mjo0N1rOGs-HiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzM3Mg==", "bodyText": "scores.maxPoints is equalTo exam.maxPoints. The assumption here is, that the exam.maxPoints = sum(all exercise.maxPoints) but at the moment the scores of the exercises are set independently.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807372", "createdAt": "2020-07-04T21:37:03Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI2NQ==", "bodyText": "I think we should take exam.maxPoints. The instructor needs to make sure that this is set correctly", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808265", "createdAt": "2020-07-04T21:52:47Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzM3Mg=="}, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk4ODIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTozODoxMVrOGs-ETQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1MzoxM1rOGs-HoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQzNw==", "bodyText": "Compares Long with double", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807437", "createdAt": "2020-07-04T21:38:11Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {\n+                exerciseGroup.averagePointsAchieved = round((sumOfPoints / noOfFoundResults), 2);\n+            }\n+        }\n+\n+        // Uptading exam information in DTO\n+        Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n+                .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n+\n+        Long numberOfStudentResultsWithOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null).count();\n+\n+        if (numberOfStudentResultsWithOverallPoints != 0.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI4OA==", "bodyText": "not good", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808288", "createdAt": "2020-07-04T21:53:13Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {\n+                exerciseGroup.averagePointsAchieved = round((sumOfPoints / noOfFoundResults), 2);\n+            }\n+        }\n+\n+        // Uptading exam information in DTO\n+        Double sumOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null)\n+                .map(studentResult -> studentResult.overallPointsAchieved).reduce(0.0, Double::sum);\n+\n+        Long numberOfStudentResultsWithOverallPoints = scores.studentResults.stream().filter(studentResult -> studentResult.overallPointsAchieved != null).count();\n+\n+        if (numberOfStudentResultsWithOverallPoints != 0.0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQzNw=="}, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk4ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTozODo0N1rOGs-EXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1Mjo1OVrOGs-Hlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ1Mg==", "bodyText": "Could use an int here", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807452", "createdAt": "2020-07-04T21:38:47Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI3OA==", "bodyText": "int makes more sense", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808278", "createdAt": "2020-07-04T21:52:59Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ1Mg=="}, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk4ODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTozOToxOVrOGs-EgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1MzowNVrOGs-Hmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ4OQ==", "bodyText": "See above", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807489", "createdAt": "2020-07-04T21:39:19Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI4Mg==", "bodyText": "!", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808282", "createdAt": "2020-07-04T21:53:05Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -182,10 +187,148 @@ public void delete(Long examId) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Rounds a double to a specified number of decimal places\n+     *\n+     * @param value  the number to round\n+     * @param places the number of decimal places to round to\n+     * @return rounded number\n+     */\n+    public static double round(double value, int places) {\n+        if (places < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        BigDecimal bd = BigDecimal.valueOf(value);\n+        bd = bd.setScale(places, RoundingMode.HALF_UP);\n+        return bd.doubleValue();\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());\n+            }\n+\n+            scores.exerciseGroups.add(new ExamScoresDTO.ExerciseGroup(exerciseGroup.getId(), exerciseGroup.getTitle(), maximumNumberOfPoints, containedExercises));\n+        }\n+\n+        // Adding registered student information to DTO\n+        for (User user : exam.getRegisteredUsers()) {\n+            scores.studentResults.add(new ExamScoresDTO.StudentResult(user.getId(), user.getName(), user.getEmail(), user.getLogin(),\n+                    user.getRegistrationNumber() != null ? user.getRegistrationNumber().trim() : \"\"));\n+        }\n+\n+        List<StudentParticipation> studentParticipations = exam.getExerciseGroups().stream().map(ExerciseGroup::getExercises).flatMap(Collection::stream)\n+                .map(Exercise::getStudentParticipations).flatMap(Collection::stream).collect(Collectors.toList());\n+\n+        // Adding student results information to DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            // ToDo Support Team Exercises\n+            List<StudentParticipation> participationsOfStudent = studentParticipations.stream()\n+                    .filter(studentParticipation -> studentParticipation.getStudent().get().getId() == studentResult.id).collect(Collectors.toList());\n+\n+            for (StudentParticipation studentParticipation : participationsOfStudent) {\n+                Exercise exercise = studentParticipation.getExercise();\n+\n+                Optional<Result> relevantResult = getRelevantResult(studentParticipation);\n+\n+                if (relevantResult.isPresent()) {\n+                    Result result = relevantResult.get();\n+                    Double achievedPoints = round((result.getScore() / 100.0 * exercise.getMaxScore()), 2);\n+\n+                    if (studentResult.overallPointsAchieved == null) {\n+                        studentResult.overallPointsAchieved = achievedPoints;\n+                    }\n+                    else {\n+                        studentResult.overallPointsAchieved = studentResult.overallPointsAchieved + achievedPoints;\n+                    }\n+\n+                    studentResult.exerciseGroupIdToExerciseResult.put(exercise.getExerciseGroup().getId(),\n+                            new ExamScoresDTO.ExerciseResult(exercise.getId(), exercise.getTitle(), exercise.getMaxScore(), result.getScore(), achievedPoints));\n+                }\n+            }\n+        }\n+\n+        // Updating student result information in DTO\n+        for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+            if (studentResult.overallPointsAchieved != null) {\n+                studentResult.overallScoreAchieved = round((studentResult.overallPointsAchieved / scores.maxPoints) * 100.0, 2);\n+            }\n+        }\n+\n+        // Updating exerciseGroup information in DTO\n+        for (ExamScoresDTO.ExerciseGroup exerciseGroup : scores.exerciseGroups) {\n+            Double noOfFoundResults = 0.0;\n+            Double sumOfPoints = 0.0;\n+\n+            for (ExamScoresDTO.StudentResult studentResult : scores.studentResults) {\n+                if (studentResult.exerciseGroupIdToExerciseResult.containsKey(exerciseGroup.id)) {\n+                    ExamScoresDTO.ExerciseResult exerciseResult = studentResult.exerciseGroupIdToExerciseResult.get(exerciseGroup.id);\n+                    noOfFoundResults++;\n+                    sumOfPoints = sumOfPoints + exerciseResult.achievedPoints;\n+                }\n+            }\n+\n+            if (noOfFoundResults != 0.0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzQ4OQ=="}, "originalCommit": {"oid": "d617bd79f9689495de67a3a3f0c59ed3cf942eed"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk5MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo0NDoxOFrOGs-FlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTo1MzoyMVrOGs-Hog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzc2NA==", "bodyText": "Should we use @JsonInclude(JsonInclude.Include.NON_EMPTY) like with the other entities. I'm not sure what the client expects.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449807764", "createdAt": "2020-07-04T21:44:18Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76851cc9ef44dac8dea8ee819f7704329029f29"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODI5MA==", "bodyText": "yes", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449808290", "createdAt": "2020-07-04T21:53:21Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/ExamScoresDTO.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNzc2NA=="}, "originalCommit": {"oid": "e76851cc9ef44dac8dea8ee819f7704329029f29"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgyNDk5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/exam-scores/ExamScoreDTOs.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOToyOToyMFrOGtEXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOToyOToyMFrOGtEXLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMDU3NQ==", "bodyText": "I really like how you have used DTOs here! I would suggest to stick to our implicit filename convention (e.g. (student-dto.model.ts)", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449910575", "createdAt": "2020-07-05T19:29:20Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/ExamScoreDTOs.ts", "diffHunk": "@@ -0,0 +1,35 @@\n+export class ExamScoreDTO {\n+    constructor(\n+        public id: number,\n+        public title: string,\n+        public maxPoints: number,\n+        public averagePointsAchieved: number,\n+        public exerciseGroups: ExerciseGroup[],\n+        public studentResults: StudentResult[],\n+    ) {}\n+}\n+\n+export class ExerciseGroup {\n+    constructor(public id: number, public title: string, public maxPoints: number, public averagePointsAchieved: number, public containedExercises: string[]) {}\n+}\n+\n+export class StudentResult {\n+    constructor(\n+        public id: number,\n+        public name: string,\n+        public login: string,\n+        public eMail: string,\n+        public registrationNumber: string,\n+        public overallPointsAchieved: number,\n+        public overallScoreAchieved: number,\n+        public exerciseGroupIdToExerciseResult: MapToExerciseResult,\n+    ) {}\n+}\n+\n+export interface MapToExerciseResult {\n+    [key: number]: ExerciseResult;\n+}\n+\n+export class ExerciseResult {\n+    constructor(public id: number, public title: string, public maxScore: number, public achievedScore: number, public achievedPoints: number) {}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzMDE5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/exam-scores/exam-scores-routing.module.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTozNjo1M1rOGtEZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTozNzo1NlrOGtEaEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTIyNg==", "bodyText": "I think this routes wouldn't be lazy loaded. Have a look at exam-management.route.ts, especially examManagementState routes (also see Angular's documentation).\nI would also suggest to stick to our naming convention --> exam-scores.route.ts", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911226", "createdAt": "2020-07-05T19:36:53Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores-routing.module.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+import { NgModule } from '@angular/core';\n+import { RouterModule, Routes } from '@angular/router';\n+import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n+import { ExamScoresComponent } from 'app/exam/exam-scores/exam-scores.component';\n+\n+const routes: Routes = [\n+    {\n+        path: ':examId/scores',\n+        component: ExamScoresComponent,\n+        data: {\n+            authorities: ['ROLE_ADMIN', 'ROLE_INSTRUCTOR'],\n+            pageTitle: 'artemisApp.examScores.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+];\n+\n+@NgModule({\n+    imports: [RouterModule.forChild(routes)],\n+    exports: [RouterModule],\n+})\n+export class ArtemisExamScoresRoutingModule {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTMxMg==", "bodyText": "I've overseen RouterModule.forChild(routes). So lazy loading should be fine but I would still suggest to change the filename.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911312", "createdAt": "2020-07-05T19:37:56Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores-routing.module.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+import { NgModule } from '@angular/core';\n+import { RouterModule, Routes } from '@angular/router';\n+import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n+import { ExamScoresComponent } from 'app/exam/exam-scores/exam-scores.component';\n+\n+const routes: Routes = [\n+    {\n+        path: ':examId/scores',\n+        component: ExamScoresComponent,\n+        data: {\n+            authorities: ['ROLE_ADMIN', 'ROLE_INSTRUCTOR'],\n+            pageTitle: 'artemisApp.examScores.title',\n+        },\n+        canActivate: [UserRouteAccessService],\n+    },\n+];\n+\n+@NgModule({\n+    imports: [RouterModule.forChild(routes)],\n+    exports: [RouterModule],\n+})\n+export class ArtemisExamScoresRoutingModule {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTIyNg=="}, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzMzEwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.component.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0MToyMFrOGtEbKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0MToyMFrOGtEbKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTU5Mg==", "bodyText": "Type should be button", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911592", "createdAt": "2020-07-05T19:41:20Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.component.html", "diffHunk": "@@ -79,6 +79,18 @@ <h4 id=\"course-page-heading\" jhiTranslate=\"artemisApp.examManagement.title\">Exam\n                         </div>\n \n                         <div class=\"btn-group flex-btn-group-container\">\n+                            <div class=\"btn-group-vertical mr-1 mb-1\" *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_INSTRUCTOR']\">\n+                                <button\n+                                    type=\"submit\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzMzQzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0MTo0OVrOGtEbUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0MTo0OVrOGtEbUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTYzNA==", "bodyText": "Scores?", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911634", "createdAt": "2020-07-05T19:41:49Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/exam-management.service.ts", "diffHunk": "@@ -58,6 +59,10 @@ export class ExamManagementService {\n             .pipe(map((res: EntityResponseType) => ExamManagementService.convertDateFromServer(res)));\n     }\n \n+    getExamScore(courseId: number, examId: number): Observable<HttpResponse<ExamScoreDTO>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24106d7495a9eb3c01bffdb66a4a4c7560d23010"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzNDYzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0Mzo1NVrOGtEb-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0Mzo1NVrOGtEb-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTgwMg==", "bodyText": "The comment should be placed above the method :-)", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911802", "createdAt": "2020-07-05T19:43:55Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { SortService } from 'app/shared/service/sort.service';\n+import { ExportToCsv } from 'export-to-csv';\n+import { ExamScoreDTO, ExerciseGroup, StudentResult } from 'app/exam/exam-scores/ExamScoreDTOs';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { onError } from 'app/shared/util/global.utils';\n+import { AlertService } from 'app/core/alert/alert.service';\n+\n+@Component({\n+    selector: 'jhi-exam-scores',\n+    templateUrl: './exam-scores.component.html',\n+    styles: [],\n+})\n+export class ExamScoresComponent implements OnInit {\n+    public examScoreDTO: ExamScoreDTO;\n+    public exerciseGroups: ExerciseGroup[];\n+    public studentResults: StudentResult[];\n+\n+    public predicate = 'id';\n+    public reverse = false;\n+    public isLoading = true;\n+\n+    constructor(private route: ActivatedRoute, private examService: ExamManagementService, private sortService: SortService, private jhiAlertService: AlertService) {}\n+\n+    ngOnInit() {\n+        this.route.params.subscribe((params) => {\n+            this.examService.getExamScore(params['courseId'], params['examId']).subscribe(\n+                (examResponse) => {\n+                    this.examScoreDTO = examResponse.body!;\n+                    if (this.examScoreDTO) {\n+                        this.studentResults = this.examScoreDTO.studentResults;\n+                        this.exerciseGroups = this.examScoreDTO.exerciseGroups;\n+                    }\n+                    this.isLoading = false;\n+                },\n+                (res: HttpErrorResponse) => onError(this.jhiAlertService, res),\n+            );\n+        });\n+    }\n+\n+    round(value: any, exp: number) {\n+        // helper function to make actually rounding possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzNDk1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/exam.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NDoyNlrOGtEcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NDoyNlrOGtEcJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTg0NQ==", "bodyText": "erreichbare", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449911845", "createdAt": "2020-07-05T19:44:26Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -33,6 +33,22 @@\n                 \"tooManyMandatoryExerciseGroups\": \"Die Anzahl verpflichtender Aufgabengruppen ist zu gro\u00df.\"\n             }\n         },\n+        \"examScores\": {\n+            \"pointsAchievable\": \"{{ maxPoints }} Punkte erreichbar\",\n+            \"title\": \"Klausur Ergebnisse\",\n+            \"titleColumn\": \"Titel\",\n+            \"containedExercisesColumn\": \"Aufgaben in Gruppe\",\n+            \"averagePointsColumn\": \"Durchschnittlich erreichte Punkte\",\n+            \"maximumPointsColumn\": \"Maximal Erreichbare Punkte\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzNjY1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0Njo0MlrOGtEc8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0Njo0MlrOGtEc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMjA1MQ==", "bodyText": "Can be private", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449912051", "createdAt": "2020-07-05T19:46:42Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/exam-scores/exam-scores.component.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { Component, OnInit } from '@angular/core';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { SortService } from 'app/shared/service/sort.service';\n+import { ExportToCsv } from 'export-to-csv';\n+import { ExamScoreDTO, ExerciseGroup, StudentResult } from 'app/exam/exam-scores/ExamScoreDTOs';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { onError } from 'app/shared/util/global.utils';\n+import { AlertService } from 'app/core/alert/alert.service';\n+\n+@Component({\n+    selector: 'jhi-exam-scores',\n+    templateUrl: './exam-scores.component.html',\n+    styles: [],\n+})\n+export class ExamScoresComponent implements OnInit {\n+    public examScoreDTO: ExamScoreDTO;\n+    public exerciseGroups: ExerciseGroup[];\n+    public studentResults: StudentResult[];\n+\n+    public predicate = 'id';\n+    public reverse = false;\n+    public isLoading = true;\n+\n+    constructor(private route: ActivatedRoute, private examService: ExamManagementService, private sortService: SortService, private jhiAlertService: AlertService) {}\n+\n+    ngOnInit() {\n+        this.route.params.subscribe((params) => {\n+            this.examService.getExamScore(params['courseId'], params['examId']).subscribe(\n+                (examResponse) => {\n+                    this.examScoreDTO = examResponse.body!;\n+                    if (this.examScoreDTO) {\n+                        this.studentResults = this.examScoreDTO.studentResults;\n+                        this.exerciseGroups = this.examScoreDTO.exerciseGroups;\n+                    }\n+                    this.isLoading = false;\n+                },\n+                (res: HttpErrorResponse) => onError(this.jhiAlertService, res),\n+            );\n+        });\n+    }\n+\n+    round(value: any, exp: number) {\n+        // helper function to make actually rounding possible\n+        if (typeof exp === 'undefined' || +exp === 0) {\n+            return Math.round(value);\n+        }\n+\n+        value = +value;\n+        exp = +exp;\n+\n+        if (isNaN(value) || !(exp % 1 === 0)) {\n+            return NaN;\n+        }\n+\n+        // Shift\n+        value = value.toString().split('e');\n+        value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + exp : exp)));\n+\n+        // Shift back\n+        value = value.toString().split('e');\n+        return +(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp));\n+    }\n+\n+    sortRows() {\n+        this.sortService.sortByProperty(this.examScoreDTO.studentResults, this.predicate, this.reverse);\n+    }\n+\n+    exportToCsv() {\n+        const headers = ['Name', 'Login', 'E-Mail', 'Matriculation Number'];\n+        this.exerciseGroups.forEach((exerciseGroup) => {\n+            headers.push(exerciseGroup.title + ' Assigned Exercise');\n+            headers.push(exerciseGroup.title + ' Achieved Points');\n+            headers.push(exerciseGroup.title + ' Achieved Score (%)');\n+        });\n+        headers.push('Overall Points');\n+        headers.push('Overall Score (%)');\n+\n+        const data = this.studentResults.map((studentResult) => {\n+            return this.convertToCSVRow(studentResult);\n+        });\n+\n+        const options = {\n+            fieldSeparator: ',',\n+            quoteStrings: '\"',\n+            decimalSeparator: '.',\n+            showLabels: true,\n+            title: this.examScoreDTO.title,\n+            filename: this.examScoreDTO.title + 'Results',\n+            useTextFile: false,\n+            useBom: true,\n+            headers,\n+        };\n+\n+        const csvExporter = new ExportToCsv(options);\n+\n+        csvExporter.generateCsv(data);\n+    }\n+\n+    convertToCSVRow(studentResult: StudentResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601c000da0e3b01d1399b656aaf3d90897221d0e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg1NDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoxMjozN1rOGtEltA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDozMjoyNlrOGtEr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg==", "bodyText": "Why do we use a title here instead of an ID?", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449914292", "createdAt": "2020-07-05T20:12:37Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -187,10 +190,120 @@ public void delete(Long examId) {\n         return exams.stream().filter(exam -> Boolean.TRUE.equals(exam.isVisibleToStudents())).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTU5Mw==", "bodyText": "I think Stefan intended to send only necessary data. This is one reason why he used DTOs here.", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449915593", "createdAt": "2020-07-05T20:28:51Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -187,10 +190,120 @@ public void delete(Long examId) {\n         return exams.stream().filter(exam -> Boolean.TRUE.equals(exam.isVisibleToStudents())).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg=="}, "originalCommit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTY1MQ==", "bodyText": "I guess these are used for the columns in the export, but I can't tell you for sure", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449915651", "createdAt": "2020-07-05T20:29:37Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -187,10 +190,120 @@ public void delete(Long examId) {\n         return exams.stream().filter(exam -> Boolean.TRUE.equals(exam.isVisibleToStudents())).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg=="}, "originalCommit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTg3Nw==", "bodyText": "I just looked it up, this is used to display the title of the exercise in the html.\nThere is no other usage, so I think it should be fine!", "url": "https://github.com/ls1intum/Artemis/pull/1721#discussion_r449915877", "createdAt": "2020-07-05T20:32:26Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -187,10 +190,120 @@ public void delete(Long examId) {\n         return exams.stream().filter(exam -> Boolean.TRUE.equals(exam.isVisibleToStudents())).collect(Collectors.toSet());\n     }\n \n+    /**\n+     * Returns the relevant result of a student participation\n+     *\n+     * @param studentParticipation studentParticipation to get relevant result for\n+     * @return optional of relevant result\n+     */\n+    private Optional<Result> getRelevantResult(StudentParticipation studentParticipation) {\n+        // no participant -> no relevant result\n+        if (studentParticipation.getParticipant() == null) {\n+            return Optional.empty();\n+        }\n+\n+        return studentParticipation.getResults().stream().filter(Result::isRated).filter(result -> result.getCompletionDate() != null).filter(result -> result.getScore() != null)\n+                .sorted((r1, r2) -> r2.getCompletionDate().compareTo(r1.getCompletionDate())).findFirst();\n+\n+    }\n+\n+    /**\n+     * Puts students, result and exerciseGroups together for ExamScoresDTO\n+     *\n+     * @param examId the id of the exam\n+     * @return return ExamScoresDTO with students, scores and exerciseGroups for exam\n+     */\n+    public ExamScoresDTO getExamScore(Long examId) {\n+        Exam exam = examRepository.findForScoreCalculationById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id: \\\"\" + examId + \"\\\" does not exist\"));\n+\n+        // Adding exam information to DTO\n+        ExamScoresDTO scores = new ExamScoresDTO(exam.getId(), exam.getTitle(), exam.getMaxPoints());\n+\n+        // Adding exercise group information to DTO\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            // Alert: This only works if all exercises in an exercise groups have the same number of maximum points\n+            Double maximumNumberOfPoints = null;\n+            if (!exerciseGroup.getExercises().isEmpty()) {\n+                maximumNumberOfPoints = exerciseGroup.getExercises().iterator().next().getMaxScore();\n+            }\n+\n+            List<String> containedExercises = new ArrayList<>();\n+\n+            for (Exercise exercise : exerciseGroup.getExercises()) {\n+                containedExercises.add(exercise.getTitle().trim());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDI5Mg=="}, "originalCommit": {"oid": "a872b3ccb22836d698fd9610f059699d6fa74814"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4921, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}