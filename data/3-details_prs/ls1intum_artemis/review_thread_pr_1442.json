{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzgyNTY2", "number": 1442, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMDo1MFrOD7KTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMTozOFrOD7KUxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzYxNDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/java/test/testFiles/behavior/BehaviorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMDo1MFrOGTUUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMDo1MFrOGTUUwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwOTEyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        + getParameterTypesAsString(parameterTypes) + \" from the \" + declaringClass.getSimpleName() + \" because\";\n          \n          \n            \n                        + getParameterTypesAsString(parameterTypes) + \" in the class \" + declaringClass.getSimpleName() + \" because\";", "url": "https://github.com/ls1intum/Artemis/pull/1442#discussion_r422909122", "createdAt": "2020-05-11T09:30:50Z", "author": {"login": "krusche"}, "path": "src/main/resources/templates/java/test/testFiles/behavior/BehaviorTest.java", "diffHunk": "@@ -125,7 +180,7 @@ protected Method getMethod(Object object, String methodName, Class<?>... paramet\n      */\n     protected Method getMethod(Class<?> declaringClass, String methodName, Class<?>... parameterTypes) {\n         String failMessage = \"Could not find the method '\" + methodName + \"' with the parameters: \"\n-            + getParameterTypesAsString(parameterTypes) + \" from the class \" + declaringClass.getSimpleName() + \" because\";\n+            + getParameterTypesAsString(parameterTypes) + \" from the \" + declaringClass.getSimpleName() + \" because\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50c072b39d95c6f6dd4ff85345cc668f014c9198"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzYxNzM0OnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/java/test/testFiles/behavior/BehaviorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMTozOFrOGTUWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMTozOFrOGTUWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwOTU3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \" from the class \" + declaringClass.getSimpleName() + \" because\";\n          \n          \n            \n                            + \" in the class \" + declaringClass.getSimpleName() + \" because\";", "url": "https://github.com/ls1intum/Artemis/pull/1442#discussion_r422909571", "createdAt": "2020-05-11T09:31:38Z", "author": {"login": "krusche"}, "path": "src/main/resources/templates/java/test/testFiles/behavior/BehaviorTest.java", "diffHunk": "@@ -167,39 +224,86 @@ protected Object invokeMethod(Object object, Method method, Object... params) {\n     }\n \n     /**\n-     * Invoke a given method name of a given object with instances of the parameters.\n+     * Invoke a given method of a given object with instances of the parameters,\n+     * and rethrow an exception if one occurs during the method execution.\n      * @param object: The instance of the class that should invoke the method.\n+     * @param method: The method that has to get invoked.\n+     * @param params: Parameter instances of the method. Do not include if the method has no parameters.\n+     * @return The return value of the method.\n+     */\n+    protected Object invokeMethodRethrowing(Object object, Method method, Object... params) throws Throwable {\n+        // NOTE: object can be null, if method is static\n+        String failMessage = \"Could not invoke the method '\" + method.getName()\n+                + \"' in the class \" + method.getDeclaringClass().getSimpleName() + \" because\";\n+        try {\n+            return method.invoke(object, params);\n+        } catch (IllegalAccessException iae) {\n+            fail(failMessage += \" access to the method was denied. Make sure to check the modifiers of the method.\");\n+        } catch (IllegalArgumentException iae) {\n+            fail(failMessage += \" the parameters are not implemented right. Make sure to check the parameters of the method\");\n+        } catch (InvocationTargetException e) {\n+            throw e.getCause();\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Invoke a given method name of a given object with instances of the parameters.\n+     * <p>\n+     * This method does not support invoking static methods and passing null, passing subclasses of the parameter types or invoking\n+     * methods with primitive parameters. Use {@link #invokeMethod(Object, Method, Object...)} for that.\n+     * @param object: The instance of the class that should invoke the method. Must not be null, even for static methods.\n      * @param methodName: The method name that has to get invoked.\n      * @param params: Parameter instances of the method. Do not include if the method has no parameters.\n      * @return The return value of the method.\n      */\n     protected Object invokeMethod(Object object, String methodName, Object... params) {\n-        Class<?>[] parameterTypes = getParameterTypes(params);\n+        String failMessage = \"Could not find the method '\" + methodName + \"' because\";\n+        Class<?>[] parameterTypes = getParameterTypes(failMessage, params);\n         Method method = getMethod(object, methodName, parameterTypes);\n         return invokeMethod(object, method, params);\n     }\n \n     /**\n-     * Retrieves the parameters types of a given collection of parameter instances.\n-     * @param params: The instances of the parameters.\n-     * @return The parameter types of the instances as an array.\n+     * Retrieve a constructor with arguments of a given class.\n+     * @param declaringClass: The class that declares this constructor.\n+     * @param parameterTypes: The parameter types of this method. Do not include if the method has no parameters.\n+     * @return The wanted method.\n      */\n-    private Class<?>[] getParameterTypes(Object... params) {\n-        Class<?>[] parameterTypes;\n+    protected Constructor<?> getConstructor(Class<?> declaringClass, Class<?>... parameterTypes) {\n+        String failMessage = \"Could not find the constructor with the parameters: \"\n+                + getParameterTypesAsString(parameterTypes)\n+                + \" from the class \" + declaringClass.getSimpleName() + \" because\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50c072b39d95c6f6dd4ff85345cc668f014c9198"}, "originalPosition": 209}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 154, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}