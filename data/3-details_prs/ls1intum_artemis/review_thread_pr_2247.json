{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MzAwOTI4", "number": 2247, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1MTo0NVrOEwa1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxOToyNFrOEzclHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjA2Nzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1MTo0NVrOHl-MBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToxODoxMFrOHl_tTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3ODI0NQ==", "bodyText": "we should return List<BitbucketWebHookDTO> here and simply return response.getBody().getSearchResults() or List.of()", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r509578245", "createdAt": "2020-10-21T18:51:45Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -599,9 +583,10 @@ private void grantGroupPermissionToProject(String projectKey, String groupName,\n      */\n     private Map<Integer, String> getExistingWebHooks(String projectKey, String repositorySlug) throws BitbucketException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3402b446644e577d357f76eda7a268789354e65d"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMzE1MA==", "bodyText": "good idea. I've fixed that", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r509603150", "createdAt": "2020-10-21T19:18:10Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -599,9 +583,10 @@ private void grantGroupPermissionToProject(String projectKey, String groupName,\n      */\n     private Map<Integer, String> getExistingWebHooks(String projectKey, String repositorySlug) throws BitbucketException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3ODI0NQ=="}, "originalCommit": {"oid": "3402b446644e577d357f76eda7a268789354e65d"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjA3Mzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1Mjo0M1rOHl-QLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1Mjo0M1rOHl-QLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3OTMxMA==", "bodyText": "please avoid String.format and use normal string concatenation", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r509579310", "createdAt": "2020-10-21T18:52:43Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "diffHunk": "@@ -30,6 +30,18 @@ public void setCloneDetails(CloneDetailsDTO cloneDetails) {\n         this.cloneDetails = cloneDetails;\n     }\n \n+    /**\n+     * Creating a description for the console log\n+     * @return description with name and project key\n+     */\n+    public String toString() {\n+        String description = String.format(\"name=%s\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3402b446644e577d357f76eda7a268789354e65d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjA3Njk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1MzowOVrOHl-SWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToyNDowNVrOHl_6Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3OTg2NA==", "bodyText": "please avoid String.format and use normal string concatenation\ncheck out other toString() methods, you can actually generate those automatically in IntelliJ", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r509579864", "createdAt": "2020-10-21T18:53:09Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "diffHunk": "@@ -45,5 +57,9 @@ public String getKey() {\n         public void setKey(String key) {\n             this.key = key;\n         }\n+\n+        public String toString() {\n+            return String.format(\"project={key=%s}\", key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3402b446644e577d357f76eda7a268789354e65d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwNjQwMw==", "bodyText": "thanks for the tip with IntelliJ", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r509606403", "createdAt": "2020-10-21T19:24:05Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "diffHunk": "@@ -45,5 +57,9 @@ public String getKey() {\n         public void setKey(String key) {\n             this.key = key;\n         }\n+\n+        public String toString() {\n+            return String.format(\"project={key=%s}\", key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3OTg2NA=="}, "originalCommit": {"oid": "3402b446644e577d357f76eda7a268789354e65d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODc1MDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOToxNTo1OFrOHp5uOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTozMDoyOVrOHp6Nxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5OTM4Nw==", "bodyText": "Maybe add here also a constructor, like for BitbucketCloneDTO :)", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r513699387", "createdAt": "2020-10-28T19:15:58Z", "author": {"login": "fde312"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "diffHunk": "@@ -30,6 +36,15 @@ public void setCloneDetails(CloneDetailsDTO cloneDetails) {\n         this.cloneDetails = cloneDetails;\n     }\n \n+    /**\n+     * Creating a description for the console log\n+     * @return description with name and project key\n+     */\n+    @Override\n+    public String toString() {\n+        return \"BitbucketCloneDTO{\" + \"name='\" + name + '\\'' + \", cloneDetails=\" + cloneDetails.toString() + '}';\n+    }\n+\n     public static final class CloneDetailsDTO {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8940b9bfc193896e413207eaf4981cdf2530fd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNzQ2Mw==", "bodyText": "yes thanks!", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r513707463", "createdAt": "2020-10-28T19:30:29Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "diffHunk": "@@ -30,6 +36,15 @@ public void setCloneDetails(CloneDetailsDTO cloneDetails) {\n         this.cloneDetails = cloneDetails;\n     }\n \n+    /**\n+     * Creating a description for the console log\n+     * @return description with name and project key\n+     */\n+    @Override\n+    public String toString() {\n+        return \"BitbucketCloneDTO{\" + \"name='\" + name + '\\'' + \", cloneDetails=\" + cloneDetails.toString() + '}';\n+    }\n+\n     public static final class CloneDetailsDTO {\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5OTM4Nw=="}, "originalCommit": {"oid": "fe8940b9bfc193896e413207eaf4981cdf2530fd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTk4OTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjozNjoyOFrOHqFcLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0MTo1OVrOHqReNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5MTM3Mg==", "bodyText": "This can be shortened to buildResult.getPlan().getKey().", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r513891372", "createdAt": "2020-10-29T02:36:28Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -496,11 +496,10 @@ public void updatePlanRepository(String bambooProject, String buildPlanKey, Stri\n      */\n     @Override\n     public String getPlanKey(Object requestBody) throws BambooException {\n-        // TODO: convert into a proper DTO object to avoid unchecked Map casts\n         try {\n-            Map<String, Object> requestBodyMap = (Map<String, Object>) requestBody;\n-            Map<String, Object> planMap = (Map<String, Object>) requestBodyMap.get(\"plan\");\n-            return (String) planMap.get(\"key\");\n+            final var buildResult = mapper.convertValue(requestBody, BambooBuildResultNotificationDTO.class);\n+            var plan = buildResult.getPlan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac5c71762690554fe29a2886894ae66efb8541d5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4ODUwMA==", "bodyText": "well seen. I've changed it.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514088500", "createdAt": "2020-10-29T08:41:59Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -496,11 +496,10 @@ public void updatePlanRepository(String bambooProject, String buildPlanKey, Stri\n      */\n     @Override\n     public String getPlanKey(Object requestBody) throws BambooException {\n-        // TODO: convert into a proper DTO object to avoid unchecked Map casts\n         try {\n-            Map<String, Object> requestBodyMap = (Map<String, Object>) requestBody;\n-            Map<String, Object> planMap = (Map<String, Object>) requestBodyMap.get(\"plan\");\n-            return (String) planMap.get(\"key\");\n+            final var buildResult = mapper.convertValue(requestBody, BambooBuildResultNotificationDTO.class);\n+            var plan = buildResult.getPlan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5MTM3Mg=="}, "originalCommit": {"oid": "ac5c71762690554fe29a2886894ae66efb8541d5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTE3NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0MToxMlrOHqRcXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0MToxMlrOHqRcXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4ODAyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var plan = buildResult.getPlan();\n          \n          \n            \n                        return plan.getKey();\n          \n          \n            \n                        return buildResult.getPlan().getKey();", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514088028", "createdAt": "2020-10-29T08:41:12Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooService.java", "diffHunk": "@@ -496,11 +496,10 @@ public void updatePlanRepository(String bambooProject, String buildPlanKey, Stri\n      */\n     @Override\n     public String getPlanKey(Object requestBody) throws BambooException {\n-        // TODO: convert into a proper DTO object to avoid unchecked Map casts\n         try {\n-            Map<String, Object> requestBodyMap = (Map<String, Object>) requestBody;\n-            Map<String, Object> planMap = (Map<String, Object>) requestBodyMap.get(\"plan\");\n-            return (String) planMap.get(\"key\");\n+            final var buildResult = mapper.convertValue(requestBody, BambooBuildResultNotificationDTO.class);\n+            var plan = buildResult.getPlan();\n+            return plan.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac5c71762690554fe29a2886894ae66efb8541d5"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU4OTUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0NlrOHqVdWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0NlrOHqVdWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzgxNg==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'sourceRepoName'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153816", "createdAt": "2020-10-29T10:27:46Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -118,24 +126,29 @@ public void mockAddWebHooks(ProgrammingExercise exercise) throws IOException {\n                 .andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n     }\n \n-    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, IOException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n         final var templateRepoName = exercise.getProjectKey().toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n         final var clonedRepoName = projectKey.toLowerCase() + \"-\" + username.toLowerCase();\n \n-        mockCopyRepository(projectKey, projectKey, templateRepoName, clonedRepoName);\n+        mockCopyRepository(projectKey, projectKey, templateRepoName, clonedRepoName, status);\n     }\n \n     public void mockCopyRepository(String sourceProjectKey, String targetProjectKey, String sourceRepoName, String targetRepoName)\n             throws JsonProcessingException, URISyntaxException {\n+        mockCopyRepository(sourceProjectKey, targetProjectKey, sourceRepoName, targetRepoName, HttpStatus.CREATED);\n+    }\n+\n+    public void mockCopyRepository(String sourceProjectKey, String targetProjectKey, String sourceRepoName, String targetRepoName, HttpStatus httpStatus)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU4OTY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketBranchProtectionDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0N1rOHqVdag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyNzoxN1rOHqm00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzgzNA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153834", "createdAt": "2020-10-29T10:27:47Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketBranchProtectionDTO.java", "diffHunk": "@@ -9,6 +9,12 @@\n \n     private MatcherDTO matcher;\n \n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketBranchProtectionDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzODM1NA==", "bodyText": "@derLalla I believe you could prevent these warning if you put the documentation inside the (empty) constructor instead of above, in case you are interested in changing this.\nOtherwise just resolve it again.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514438354", "createdAt": "2020-10-29T17:27:17Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketBranchProtectionDTO.java", "diffHunk": "@@ -9,6 +9,12 @@\n \n     private MatcherDTO matcher;\n \n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketBranchProtectionDTO() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzgzNA=="}, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU4OTc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0OFrOHqVdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0OFrOHqVdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzg0OQ==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153849", "createdAt": "2020-10-29T10:27:48Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // create a team for the user (necessary condition before starting an exercise)\n+        final String edxUsername = userPrefixEdx.get() + \"student\";\n+        User edxStudent = ModelFactory.generateActivatedUsers(edxUsername, new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n+        edxStudent.setPassword(userService.encryptor().encrypt(edxStudent.getPassword()));\n+        edxStudent = userRepo.save(edxStudent);\n+        Set<User> students = Set.of(edxStudent);\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n+\n+        // Set up mock requests for start participation and that a lti user is not existent\n+        final boolean ltiUserExists = false;\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CREATED);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), ltiUserExists);\n+\n+        // Start participation with original team\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void copyRepository_testInternalServerError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU4OTgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0OVrOHqVdhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo0OVrOHqVdhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzg2MQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153861", "createdAt": "2020-10-29T10:27:49Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -146,24 +159,59 @@ public void mockGetBitbucketRepository(ProgrammingExercise exercise, String bitb\n                 .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(bitbucketRepository)));\n     }\n \n-    public void mockConfigureRepository(ProgrammingExercise exercise, String username, Set<User> users) throws URISyntaxException, IOException {\n+    public void mockConfigureRepository(ProgrammingExercise exercise, String username, Set<User> users, boolean ltiUserExists) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n         final var repoName = projectKey.toLowerCase() + \"-\" + username.toLowerCase();\n         for (User user : users) {\n             if (exercise.hasCourse()) {\n-                mockGiveWritePermission(exercise, repoName, user.getLogin());\n+                // add mock for userExists() check, if the username contains edx_ or u4i_\n+                String loginName = user.getLogin();\n+                if (userPrefixEdx.isPresent() && loginName.startsWith(userPrefixEdx.get()) || userPrefixU4I.isPresent() && loginName.startsWith((userPrefixU4I.get()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU4OTk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1MFrOHqVdlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1MFrOHqVdlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzg3OA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153878", "createdAt": "2020-10-29T10:27:50Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -118,24 +126,29 @@ public void mockAddWebHooks(ProgrammingExercise exercise) throws IOException {\n                 .andExpect(method(HttpMethod.POST)).andRespond(withStatus(HttpStatus.OK));\n     }\n \n-    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username) throws URISyntaxException, IOException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n         final var templateRepoName = exercise.getProjectKey().toLowerCase() + \"-\" + RepositoryType.TEMPLATE.getName();\n         final var clonedRepoName = projectKey.toLowerCase() + \"-\" + username.toLowerCase();\n \n-        mockCopyRepository(projectKey, projectKey, templateRepoName, clonedRepoName);\n+        mockCopyRepository(projectKey, projectKey, templateRepoName, clonedRepoName, status);\n     }\n \n     public void mockCopyRepository(String sourceProjectKey, String targetProjectKey, String sourceRepoName, String targetRepoName)\n             throws JsonProcessingException, URISyntaxException {\n+        mockCopyRepository(sourceProjectKey, targetProjectKey, sourceRepoName, targetRepoName, HttpStatus.CREATED);\n+    }\n+\n+    public void mockCopyRepository(String sourceProjectKey, String targetProjectKey, String sourceRepoName, String targetRepoName, HttpStatus httpStatus)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1MVrOHqVdpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1MVrOHqVdpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzg5Mg==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153892", "createdAt": "2020-10-29T10:27:51Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -89,7 +90,13 @@ public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws E\n     }\n \n     @Override\n-    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users, boolean ltiUserExists)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDExOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1MlrOHqVdqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1MlrOHqVdqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzg5Nw==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'repoName'.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153897", "createdAt": "2020-10-29T10:27:52Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // create a team for the user (necessary condition before starting an exercise)\n+        final String edxUsername = userPrefixEdx.get() + \"student\";\n+        User edxStudent = ModelFactory.generateActivatedUsers(edxUsername, new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n+        edxStudent.setPassword(userService.encryptor().encrypt(edxStudent.getPassword()));\n+        edxStudent = userRepo.save(edxStudent);\n+        Set<User> students = Set.of(edxStudent);\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n+\n+        // Set up mock requests for start participation and that a lti user is not existent\n+        final boolean ltiUserExists = false;\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CREATED);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), ltiUserExists);\n+\n+        // Start participation with original team\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.INTERNAL_SERVER_ERROR);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.BAD_REQUEST);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testConflictError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for Conflict exception\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CONFLICT);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), true);\n+\n+        // Start participation\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void configureRepository_testBadRequestError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        final var username = team.getParticipantIdentifier();\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, username, HttpStatus.CREATED);\n+        final var projectKey = exercise.getProjectKey();\n+        final var repoName = projectKey.toLowerCase() + \"-\" + username.toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1M1rOHqVdsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1M1rOHqVdsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzkwNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153907", "createdAt": "2020-10-29T10:27:53Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NFrOHqVduQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NFrOHqVduQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzkxMw==", "bodyText": "Codacy found an issue: The instance method name 'copyRepository_testConflictError' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153913", "createdAt": "2020-10-29T10:27:54Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // create a team for the user (necessary condition before starting an exercise)\n+        final String edxUsername = userPrefixEdx.get() + \"student\";\n+        User edxStudent = ModelFactory.generateActivatedUsers(edxUsername, new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n+        edxStudent.setPassword(userService.encryptor().encrypt(edxStudent.getPassword()));\n+        edxStudent = userRepo.save(edxStudent);\n+        Set<User> students = Set.of(edxStudent);\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n+\n+        // Set up mock requests for start participation and that a lti user is not existent\n+        final boolean ltiUserExists = false;\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CREATED);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), ltiUserExists);\n+\n+        // Start participation with original team\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.INTERNAL_SERVER_ERROR);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.BAD_REQUEST);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testConflictError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NFrOHqVdwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NFrOHqVdwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzkyMg==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153922", "createdAt": "2020-10-29T10:27:54Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -146,24 +159,59 @@ public void mockGetBitbucketRepository(ProgrammingExercise exercise, String bitb\n                 .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(bitbucketRepository)));\n     }\n \n-    public void mockConfigureRepository(ProgrammingExercise exercise, String username, Set<User> users) throws URISyntaxException, IOException {\n+    public void mockConfigureRepository(ProgrammingExercise exercise, String username, Set<User> users, boolean ltiUserExists) throws URISyntaxException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/dto/JiraUserDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NVrOHqVdzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NVrOHqVdzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1MzkzNA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153934", "createdAt": "2020-10-29T10:27:55Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/dto/JiraUserDTO.java", "diffHunk": "@@ -16,6 +20,41 @@\n \n     private JiraUserGroupsDTO groups;\n \n+    private List<String> applicationKeys = new ArrayList<>();\n+\n+    /**\n+     * needed for Jackson\n+     */\n+    public JiraUserDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NlrOHqVd3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1NlrOHqVd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzk0OA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'copyRepository_testInternalServerError' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153948", "createdAt": "2020-10-29T10:27:56Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -144,4 +144,34 @@ public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        programmingExerciseTestService.configureRepository_createTeamUserWhenLtiUserIsNotExistent();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testInternalServerError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1N1rOHqVd6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1N1rOHqVd6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzk2MA==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153960", "createdAt": "2020-10-29T10:27:57Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -287,4 +337,16 @@ public void mockHealth(String state, HttpStatus httpStatus) throws URISyntaxExce\n         mockServer.expect(requestTo(uri)).andExpect(method(HttpMethod.GET))\n                 .andRespond(withStatus(httpStatus).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(response)));\n     }\n+\n+    public void mockFetchCommitInfo(String projectKey, String slug, String hash) throws URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1OFrOHqVd8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1OFrOHqVd8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzk3MQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'copyRepository_testConflictError' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153971", "createdAt": "2020-10-29T10:27:58Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -144,4 +144,34 @@ public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        programmingExerciseTestService.configureRepository_createTeamUserWhenLtiUserIsNotExistent();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testConflictError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDY4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1OVrOHqVd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyNzo1OVrOHqVd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzk3Ng==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153976", "createdAt": "2020-10-29T10:27:59Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // create a team for the user (necessary condition before starting an exercise)\n+        final String edxUsername = userPrefixEdx.get() + \"student\";\n+        User edxStudent = ModelFactory.generateActivatedUsers(edxUsername, new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n+        edxStudent.setPassword(userService.encryptor().encrypt(edxStudent.getPassword()));\n+        edxStudent = userRepo.save(edxStudent);\n+        Set<User> students = Set.of(edxStudent);\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n+\n+        // Set up mock requests for start participation and that a lti user is not existent\n+        final boolean ltiUserExists = false;\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CREATED);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), ltiUserExists);\n+\n+        // Start participation with original team\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.INTERNAL_SERVER_ERROR);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.BAD_REQUEST);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testConflictError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for Conflict exception\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CONFLICT);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), true);\n+\n+        // Start participation\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void configureRepository_testBadRequestError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowMFrOHqVd_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowMFrOHqVd_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzk4Mw==", "bodyText": "Codacy found an issue: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153983", "createdAt": "2020-10-29T10:28:00Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -89,7 +90,13 @@ public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws E\n     }\n \n     @Override\n-    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowMVrOHqVeCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowMVrOHqVeCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1Mzk5NA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514153994", "createdAt": "2020-10-29T10:28:01Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketCloneDTO.java", "diffHunk": "@@ -9,6 +9,12 @@\n     @JsonProperty(\"project\")\n     private CloneDetailsDTO cloneDetails;\n \n+    /**\n+     * needed for Jackson\n+     */\n+    public BitbucketCloneDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDg2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowMlrOHqVeFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowMlrOHqVeFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDAwNg==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154006", "createdAt": "2020-10-29T10:28:02Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -227,19 +275,21 @@ public void mockCheckIfProjectExists(final ProgrammingExercise exercise, final b\n                 .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(searchResults)));\n     }\n \n-    public void mockGetExistingWebhooks(String projectKey, String repositoryName) throws URISyntaxException {\n+    public void mockGetExistingWebhooks(String projectKey, String repositoryName) throws URISyntaxException, JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MDkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowM1rOHqVeHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowM1rOHqVeHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDAxMg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'configureRepository_createTeamUserWhenLtiUserIsNotExistent' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154012", "createdAt": "2020-10-29T10:28:03Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -144,4 +144,34 @@ public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/dto/JiraUserDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowNFrOHqVeLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowNFrOHqVeLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDAyOA==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154028", "createdAt": "2020-10-29T10:28:04Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/jira/dto/JiraUserDTO.java", "diffHunk": "@@ -79,6 +126,12 @@ public void setItems(Set<JiraUserGroupDTO> items) {\n \n         private URL self;\n \n+        /**\n+         * needed for Jackson\n+         */\n+        public JiraUserGroupDTO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowNVrOHqVeNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowNVrOHqVeNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDAzNw==", "bodyText": "Codacy found an issue: The instance method name 'copyRepository_testInternalServerError' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154037", "createdAt": "2020-10-29T10:28:05Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // create a team for the user (necessary condition before starting an exercise)\n+        final String edxUsername = userPrefixEdx.get() + \"student\";\n+        User edxStudent = ModelFactory.generateActivatedUsers(edxUsername, new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n+        edxStudent.setPassword(userService.encryptor().encrypt(edxStudent.getPassword()));\n+        edxStudent = userRepo.save(edxStudent);\n+        Set<User> students = Set.of(edxStudent);\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n+\n+        // Set up mock requests for start participation and that a lti user is not existent\n+        final boolean ltiUserExists = false;\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CREATED);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), ltiUserExists);\n+\n+        // Start participation with original team\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void copyRepository_testInternalServerError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MTE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowNlrOHqVeQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowNlrOHqVeQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDA1MA==", "bodyText": "Codacy found an issue: The instance method name 'copyRepository_testBadRequestError' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154050", "createdAt": "2020-10-29T10:28:06Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // create a team for the user (necessary condition before starting an exercise)\n+        final String edxUsername = userPrefixEdx.get() + \"student\";\n+        User edxStudent = ModelFactory.generateActivatedUsers(edxUsername, new String[] { \"tumuser\", \"testgroup\" }, Set.of(new Authority(AuthoritiesConstants.USER)), 1).get(0);\n+        edxStudent.setPassword(userService.encryptor().encrypt(edxStudent.getPassword()));\n+        edxStudent = userRepo.save(edxStudent);\n+        Set<User> students = Set.of(edxStudent);\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Student was correctly added to team\").hasSize(1);\n+\n+        // Set up mock requests for start participation and that a lti user is not existent\n+        final boolean ltiUserExists = false;\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.CREATED);\n+        mockDelegate.mockConnectorRequestsForStartParticipation(exercise, team.getParticipantIdentifier(), team.getStudents(), ltiUserExists);\n+\n+        // Start participation with original team\n+        participationService.startExercise(exercise, team, false);\n+    }\n+\n+    // TEST\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        exercise.setMode(ExerciseMode.TEAM);\n+        programmingExerciseRepository.save(exercise);\n+        database.addTemplateParticipationForProgrammingExercise(exercise);\n+        database.addSolutionParticipationForProgrammingExercise(exercise);\n+\n+        // Create a team with students\n+        Set<User> students = new HashSet<>(userRepo.findAllInGroup(\"tumuser\"));\n+        Team team = new Team().name(\"Team 1\").shortName(teamShortName).exercise(exercise).students(students);\n+        team = teamService.save(exercise, team);\n+\n+        assertThat(team.getStudents()).as(\"Students were correctly added to team\").hasSize(numberOfStudents);\n+\n+        // test for internal server error\n+        mockDelegate.mockCopyRepositoryForParticipation(exercise, team.getParticipantIdentifier(), HttpStatus.INTERNAL_SERVER_ERROR);\n+\n+        // Start participation\n+        try {\n+            participationService.startExercise(exercise, team, false);\n+        }\n+        catch (BitbucketException e) {\n+            assertThat(e.getMessage()).isEqualTo(\"Error while forking repository\");\n+        }\n+    }\n+\n+    // TEST\n+    public void copyRepository_testBadRequestError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MTE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowN1rOHqVeRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowN1rOHqVeRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDA1NQ==", "bodyText": "Codacy found an issue: The instance method name 'configureRepository_createTeamUserWhenLtiUserIsNotExistent' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154055", "createdAt": "2020-10-29T10:28:07Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ProgrammingExerciseTestService.java", "diffHunk": "@@ -585,6 +600,137 @@ public void repositoryAccessIsRemoved_whenStudentIsRemovedFromTeam() throws Exce\n         }\n     }\n \n+    // TEST\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketWebHookDTO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowOFrOHqVeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODo1NjoyN1rOHqqPZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDA2Mg==", "bodyText": "Codacy found an issue: Avoid using implementation types like 'ArrayList'; use the interface instead", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154062", "createdAt": "2020-10-29T10:28:08Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketWebHookDTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service.connectors.bitbucket.dto;\n+\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BitbucketWebHookDTO {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String url;\n+\n+    private ArrayList<String> events;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    public ArrayList<String> getEvents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzAyNg==", "bodyText": "@derLalla I actually found that warning useful - Can't we use List here?", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514437026", "createdAt": "2020-10-29T17:25:17Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketWebHookDTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service.connectors.bitbucket.dto;\n+\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BitbucketWebHookDTO {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String url;\n+\n+    private ArrayList<String> events;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    public ArrayList<String> getEvents() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDA2Mg=="}, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5NDMwOA==", "bodyText": "Please use List here.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514494308", "createdAt": "2020-10-29T18:56:27Z", "author": {"login": "MaisiKoleni"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/BitbucketWebHookDTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package de.tum.in.www1.artemis.service.connectors.bitbucket.dto;\n+\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class BitbucketWebHookDTO {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String url;\n+\n+    private ArrayList<String> events;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    public ArrayList<String> getEvents() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDA2Mg=="}, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTU5MTI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowOVrOHqVeWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDoyODowOVrOHqVeWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NDA3Mg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'configureRepository_testBadRequestError' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514154072", "createdAt": "2020-10-29T10:28:09Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -144,4 +144,34 @@ public void importProgrammingExercise_mode_changedToTeam() throws Exception {\n         programmingExerciseTestService.testImportProgrammingExercise_team_modeChange();\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_createTeamUserWhenLtiUserIsNotExistent() throws Exception {\n+        programmingExerciseTestService.configureRepository_createTeamUserWhenLtiUserIsNotExistent();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testInternalServerError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testInternalServerError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testBadRequestError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testBadRequestError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void copyRepository_testConflictError() throws Exception {\n+        programmingExerciseTestService.copyRepository_testConflictError();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void configureRepository_testBadRequestError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aaac3147d9580b62e55ea7e694dfa507995b36"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzgwMzg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxNzoxNFrOHqq93g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToyNToxMVrOHqrOLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNjIwNg==", "bodyText": "The codacy point here I believe is valid. If you make this method abstract you can ensure that it is not called accidentally while it is not implemented.", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514506206", "createdAt": "2020-10-29T19:17:14Z", "author": {"login": "anditurdiu"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -89,7 +90,13 @@ public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws E\n     }\n \n     @Override\n-    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b2ca1989c9fe059e1c2ee666eeb50105b77b4e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxMDM4MA==", "bodyText": "This is intentional. This is a requirement by the interface that is implemented. This method has to be implemented later on, when we implement the tests for Jenkins", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514510380", "createdAt": "2020-10-29T19:25:11Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -89,7 +90,13 @@ public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws E\n     }\n \n     @Override\n-    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNjIwNg=="}, "originalCommit": {"oid": "d9b2ca1989c9fe059e1c2ee666eeb50105b77b4e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzgwNjczOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxODoxMFrOHqq_pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToyNToxN1rOHqrOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNjY2MQ==", "bodyText": "Same here: An empty method in an abstract class should be abstract instead", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514506661", "createdAt": "2020-10-29T19:18:10Z", "author": {"login": "anditurdiu"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -89,7 +90,13 @@ public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws E\n     }\n \n     @Override\n-    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users, boolean ltiUserExists)\n+            throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b2ca1989c9fe059e1c2ee666eeb50105b77b4e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxMDQyOQ==", "bodyText": "This is intentional. This is a requirement by the interface that is implemented. This method has to be implemented later on, when we implement the tests for Jenkins", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514510429", "createdAt": "2020-10-29T19:25:17Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationJenkinsGitlabTest.java", "diffHunk": "@@ -89,7 +90,13 @@ public void mockConnectorRequestsForSetup(ProgrammingExercise exercise) throws E\n     }\n \n     @Override\n-    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users) throws IOException, URISyntaxException {\n+    public void mockCopyRepositoryForParticipation(ProgrammingExercise exercise, String username, HttpStatus status) throws URISyntaxException, IOException {\n+        // TODO: implement\n+    }\n+\n+    @Override\n+    public List<Verifiable> mockConnectorRequestsForStartParticipation(ProgrammingExercise exercise, String username, Set<User> users, boolean ltiUserExists)\n+            throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNjY2MQ=="}, "originalCommit": {"oid": "d9b2ca1989c9fe059e1c2ee666eeb50105b77b4e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzgxMDg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxOToyNFrOHqrCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxOToyNFrOHqrCSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNzMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (userPrefixEdx.isPresent() && loginName.startsWith(userPrefixEdx.get()) || userPrefixU4I.isPresent() && loginName.startsWith((userPrefixU4I.get()))) {\n          \n          \n            \n                            if (userPrefixEdx.isPresent() && loginName.startsWith(userPrefixEdx.get()) || userPrefixU4I.isPresent() && loginName.startsWith(userPrefixU4I.get())) {", "url": "https://github.com/ls1intum/Artemis/pull/2247#discussion_r514507336", "createdAt": "2020-10-29T19:19:24Z", "author": {"login": "anditurdiu"}, "path": "src/test/java/de/tum/in/www1/artemis/connector/bitbucket/BitbucketRequestMockProvider.java", "diffHunk": "@@ -146,24 +159,59 @@ public void mockGetBitbucketRepository(ProgrammingExercise exercise, String bitb\n                 .andRespond(withStatus(HttpStatus.OK).contentType(MediaType.APPLICATION_JSON).body(mapper.writeValueAsString(bitbucketRepository)));\n     }\n \n-    public void mockConfigureRepository(ProgrammingExercise exercise, String username, Set<User> users) throws URISyntaxException, IOException {\n+    public void mockConfigureRepository(ProgrammingExercise exercise, String username, Set<User> users, boolean ltiUserExists) throws URISyntaxException, IOException {\n         final var projectKey = exercise.getProjectKey();\n         final var repoName = projectKey.toLowerCase() + \"-\" + username.toLowerCase();\n         for (User user : users) {\n             if (exercise.hasCourse()) {\n-                mockGiveWritePermission(exercise, repoName, user.getLogin());\n+                // add mock for userExists() check, if the username contains edx_ or u4i_\n+                String loginName = user.getLogin();\n+                if (userPrefixEdx.isPresent() && loginName.startsWith(userPrefixEdx.get()) || userPrefixU4I.isPresent() && loginName.startsWith((userPrefixU4I.get()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b2ca1989c9fe059e1c2ee666eeb50105b77b4e"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4575, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}