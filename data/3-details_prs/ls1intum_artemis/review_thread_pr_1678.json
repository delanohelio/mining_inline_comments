{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Njc1MDUy", "number": 1678, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyMjozOVrOEG5ovQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjowOFrOEG6Pag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjcxMjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyMjozOVrOGl-7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozNTo0OFrOGl_Tmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MTQ2Ng==", "bodyText": "I like that you explicitly assign this, it helps with understanding what you are doing here. I would suggest to copy the whole array instead of just referencing it. This way no one will use a modified mandatoryIndices in the future.", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442481466", "createdAt": "2020-06-18T20:22:39Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,163 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        // Prepare indices of mandatory and optional exercise groups to preserve order of exercise groups\n+        List<Integer> indicesOfMandatoryExerciseGroups = new ArrayList<>();\n+        List<Integer> indicesOfOptionalExerciseGroups = new ArrayList<>();\n+        for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+            if (Boolean.TRUE.equals(exam.getExerciseGroups().get(i).getIsMandatory())) {\n+                indicesOfMandatoryExerciseGroups.add(i);\n+            }\n+            else {\n+                indicesOfOptionalExerciseGroups.add(i);\n+            }\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Check that there are not too much mandatory exercise groups\n+        if (numberOfOptionalExercises < 0) {\n+            throw new BadRequestAlertException(\"The number of mandatory exercise groups is too large\", \"Exam\", \"artemisApp.exam.validation.tooManyMandatoryExerciseGroups\");\n+        }\n+\n+        for (User registeredUser : exam.getRegisteredUsers()) {\n+            // Create one student exam per user\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.setExam(exam);\n+            studentExam.setUser(registeredUser);\n+\n+            // Select exercises from exercise groups randomly\n+            List<Integer> assembledIndices = assembleIndicesListWithRandomSelection(indicesOfMandatoryExerciseGroups, indicesOfOptionalExerciseGroups, numberOfOptionalExercises);\n+            for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+                if (assembledIndices.contains(i)) {\n+                    // we get one random exercise from all preselected exercise groups\n+                    studentExam.addExercise(selectRandomExercise(random, exam.getExerciseGroups().get(i)));\n+                }\n+            }\n+\n+            // Apply random exercise order\n+            if (Boolean.TRUE.equals(exam.getRandomizeExerciseOrder())) {\n+                Collections.shuffle(studentExam.getExercises());\n+            }\n+\n+            studentExams.add(studentExam);\n+        }\n+\n+        studentExams = studentExamRepository.saveAll(studentExams);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId      the id of the course\n+     * @param examId        the id of the exam\n+     * @param studentDtos   the list of students (with at least registration number) who should get access to the exam\n+     * @return the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    public List<StudentDTO> registerStudentsForExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        var course = courseService.findOne(courseId);\n+        var exam = findOneWithRegisteredUsers(examId);\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return notFoundStudentsDtos;\n+    }\n+\n+    private List<Integer> assembleIndicesListWithRandomSelection(List<Integer> mandatoryIndices, List<Integer> optionalIndices, Long numberOfOptionalExercises) {\n+        // Add all mandatory indices\n+        List<Integer> indices = mandatoryIndices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NzcwNg==", "bodyText": "Thanks for the comment! I've applied it here: c1b337e", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442487706", "createdAt": "2020-06-18T20:35:48Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,163 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        // Prepare indices of mandatory and optional exercise groups to preserve order of exercise groups\n+        List<Integer> indicesOfMandatoryExerciseGroups = new ArrayList<>();\n+        List<Integer> indicesOfOptionalExerciseGroups = new ArrayList<>();\n+        for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+            if (Boolean.TRUE.equals(exam.getExerciseGroups().get(i).getIsMandatory())) {\n+                indicesOfMandatoryExerciseGroups.add(i);\n+            }\n+            else {\n+                indicesOfOptionalExerciseGroups.add(i);\n+            }\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Check that there are not too much mandatory exercise groups\n+        if (numberOfOptionalExercises < 0) {\n+            throw new BadRequestAlertException(\"The number of mandatory exercise groups is too large\", \"Exam\", \"artemisApp.exam.validation.tooManyMandatoryExerciseGroups\");\n+        }\n+\n+        for (User registeredUser : exam.getRegisteredUsers()) {\n+            // Create one student exam per user\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.setExam(exam);\n+            studentExam.setUser(registeredUser);\n+\n+            // Select exercises from exercise groups randomly\n+            List<Integer> assembledIndices = assembleIndicesListWithRandomSelection(indicesOfMandatoryExerciseGroups, indicesOfOptionalExerciseGroups, numberOfOptionalExercises);\n+            for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+                if (assembledIndices.contains(i)) {\n+                    // we get one random exercise from all preselected exercise groups\n+                    studentExam.addExercise(selectRandomExercise(random, exam.getExerciseGroups().get(i)));\n+                }\n+            }\n+\n+            // Apply random exercise order\n+            if (Boolean.TRUE.equals(exam.getRandomizeExerciseOrder())) {\n+                Collections.shuffle(studentExam.getExercises());\n+            }\n+\n+            studentExams.add(studentExam);\n+        }\n+\n+        studentExams = studentExamRepository.saveAll(studentExams);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId      the id of the course\n+     * @param examId        the id of the exam\n+     * @param studentDtos   the list of students (with at least registration number) who should get access to the exam\n+     * @return the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    public List<StudentDTO> registerStudentsForExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        var course = courseService.findOne(courseId);\n+        var exam = findOneWithRegisteredUsers(examId);\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return notFoundStudentsDtos;\n+    }\n+\n+    private List<Integer> assembleIndicesListWithRandomSelection(List<Integer> mandatoryIndices, List<Integer> optionalIndices, Long numberOfOptionalExercises) {\n+        // Add all mandatory indices\n+        List<Integer> indices = mandatoryIndices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MTQ2Ng=="}, "originalCommit": {"oid": "280e53357491b0e859f51ef9f0392ee25314c385"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc2MzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozOTo1MFrOGl_bOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1Njo1NlrOGl_70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4OTY1OQ==", "bodyText": "Do we really need this to be a long?", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442489659", "createdAt": "2020-06-18T20:39:50Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MDM2OA==", "bodyText": "stream.count() returns a long, and I did not want to cast this to an int.\nI don't think it makes a difference", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442490368", "createdAt": "2020-06-18T20:41:17Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4OTY1OQ=="}, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5ODAwMw==", "bodyText": "The implementation of count() for Java streams returns a long :-)", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442498003", "createdAt": "2020-06-18T20:56:56Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4OTY1OQ=="}, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc3NzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NDo0OVrOGl_kYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjoyOFrOGl_65w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MjAwMw==", "bodyText": "Please clarify why you sort the indices.", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442492003", "createdAt": "2020-06-18T20:44:49Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Check that there are not too much mandatory exercise groups\n+        if (numberOfOptionalExercises < 0) {\n+            throw new BadRequestAlertException(\"The number of mandatory exercise groups is too large\", \"Exam\", \"artemisApp.exam.validation.tooManyMandatoryExerciseGroups\");\n+        }\n+\n+        // Prepare indices of mandatory and optional exercise groups to preserve order of exercise groups\n+        List<Integer> indicesOfMandatoryExerciseGroups = new ArrayList<>();\n+        List<Integer> indicesOfOptionalExerciseGroups = new ArrayList<>();\n+        for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+            if (Boolean.TRUE.equals(exam.getExerciseGroups().get(i).getIsMandatory())) {\n+                indicesOfMandatoryExerciseGroups.add(i);\n+            }\n+            else {\n+                indicesOfOptionalExerciseGroups.add(i);\n+            }\n+        }\n+\n+        for (User registeredUser : exam.getRegisteredUsers()) {\n+            // Create one student exam per user\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.setExam(exam);\n+            studentExam.setUser(registeredUser);\n+\n+            // Add a random exercise for each exercise group if the index of the exercise group is in assembledIndices\n+            List<Integer> assembledIndices = assembleIndicesListWithRandomSelection(indicesOfMandatoryExerciseGroups, indicesOfOptionalExerciseGroups, numberOfOptionalExercises);\n+            for (Integer index : assembledIndices) {\n+                // we get one random exercise from all preselected exercise groups\n+                studentExam.addExercise(selectRandomExercise(random, exerciseGroups.get(index)));\n+            }\n+\n+            // Apply random exercise order\n+            if (Boolean.TRUE.equals(exam.getRandomizeExerciseOrder())) {\n+                Collections.shuffle(studentExam.getExercises());\n+            }\n+\n+            studentExams.add(studentExam);\n+        }\n+\n+        studentExams = studentExamRepository.saveAll(studentExams);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId      the id of the course\n+     * @param examId        the id of the exam\n+     * @param studentDtos   the list of students (with at least registration number) who should get access to the exam\n+     * @return the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    public List<StudentDTO> registerStudentsForExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        var course = courseService.findOne(courseId);\n+        var exam = findOneWithRegisteredUsers(examId);\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return notFoundStudentsDtos;\n+    }\n+\n+    private List<Integer> assembleIndicesListWithRandomSelection(List<Integer> mandatoryIndices, List<Integer> optionalIndices, Long numberOfOptionalExercises) {\n+        // Add all mandatory indices\n+        List<Integer> indices = new ArrayList<>(mandatoryIndices);\n+\n+        // Add as many optional indices as numberOfOptionalExercises\n+        if (numberOfOptionalExercises > 0) {\n+            Collections.shuffle(optionalIndices);\n+            indices = Stream.concat(indices.stream(), optionalIndices.stream().limit(numberOfOptionalExercises)).collect(Collectors.toList());\n+        }\n+\n+        // Sort the indices", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5Nzc2Nw==", "bodyText": "92df128", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442497767", "createdAt": "2020-06-18T20:56:28Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -115,4 +140,161 @@ public void delete(Long examId) {\n     public Set<Exam> filterVisibleExams(Set<Exam> exams) {\n         return exams.stream().filter(Exam::isVisibleToStudents).collect(Collectors.toSet());\n     }\n+\n+    /**\n+     * Generates the student exams randomly based on the exam configuration and the exercise groups\n+     *\n+     * @param examId        the id of the exam\n+     * @return the list of student exams with their corresponding users\n+     */\n+    public List<StudentExam> generateStudentExams(Long examId) {\n+        List<StudentExam> studentExams = new ArrayList<>();\n+        SecureRandom random = new SecureRandom();\n+\n+        // Delete all existing student exams via orphan removal\n+        Exam examWithExistingStudentExams = examRepository.findWithStudentExamsById(examId).get();\n+        studentExamRepository.deleteInBatch(examWithExistingStudentExams.getStudentExams());\n+\n+        Exam exam = examRepository.findWithExercisesRegisteredUsersStudentExamsById(examId).get();\n+\n+        // Ensure that all exercise groups have at least one exercise\n+        for (ExerciseGroup exerciseGroup : exam.getExerciseGroups()) {\n+            if (exerciseGroup.getExercises().isEmpty()) {\n+                throw new BadRequestAlertException(\"All exercise groups must have at least one exercise\", \"Exam\", \"artemisApp.exam.validation.atLeastOneExercisePerExerciseGroup\");\n+            }\n+        }\n+\n+        // Check that numberOfExercisesInExam is set\n+        if (exam.getNumberOfExercisesInExam() == null) {\n+            throw new BadRequestAlertException(\"The number of exercises in the exam is not set.\", \"Exam\", \"artemisApp.exam.validation.numberOfExercisesInExamNotSet\");\n+        }\n+\n+        List<ExerciseGroup> exerciseGroups = exam.getExerciseGroups();\n+\n+        // Check that there are enough exercise groups\n+        if (exerciseGroups.size() < exam.getNumberOfExercisesInExam()) {\n+            throw new BadRequestAlertException(\"The number of exercise groups is too small\", \"Exam\", \"artemisApp.exam.validation.tooFewExerciseGroups\");\n+        }\n+\n+        long numberOfOptionalExercises = exam.getNumberOfExercisesInExam() - exerciseGroups.stream().filter(ExerciseGroup::getIsMandatory).count();\n+\n+        // Check that there are not too much mandatory exercise groups\n+        if (numberOfOptionalExercises < 0) {\n+            throw new BadRequestAlertException(\"The number of mandatory exercise groups is too large\", \"Exam\", \"artemisApp.exam.validation.tooManyMandatoryExerciseGroups\");\n+        }\n+\n+        // Prepare indices of mandatory and optional exercise groups to preserve order of exercise groups\n+        List<Integer> indicesOfMandatoryExerciseGroups = new ArrayList<>();\n+        List<Integer> indicesOfOptionalExerciseGroups = new ArrayList<>();\n+        for (int i = 0; i < exam.getExerciseGroups().size(); i++) {\n+            if (Boolean.TRUE.equals(exam.getExerciseGroups().get(i).getIsMandatory())) {\n+                indicesOfMandatoryExerciseGroups.add(i);\n+            }\n+            else {\n+                indicesOfOptionalExerciseGroups.add(i);\n+            }\n+        }\n+\n+        for (User registeredUser : exam.getRegisteredUsers()) {\n+            // Create one student exam per user\n+            StudentExam studentExam = new StudentExam();\n+            studentExam.setExam(exam);\n+            studentExam.setUser(registeredUser);\n+\n+            // Add a random exercise for each exercise group if the index of the exercise group is in assembledIndices\n+            List<Integer> assembledIndices = assembleIndicesListWithRandomSelection(indicesOfMandatoryExerciseGroups, indicesOfOptionalExerciseGroups, numberOfOptionalExercises);\n+            for (Integer index : assembledIndices) {\n+                // we get one random exercise from all preselected exercise groups\n+                studentExam.addExercise(selectRandomExercise(random, exerciseGroups.get(index)));\n+            }\n+\n+            // Apply random exercise order\n+            if (Boolean.TRUE.equals(exam.getRandomizeExerciseOrder())) {\n+                Collections.shuffle(studentExam.getExercises());\n+            }\n+\n+            studentExams.add(studentExam);\n+        }\n+\n+        studentExams = studentExamRepository.saveAll(studentExams);\n+\n+        // TODO: make sure the student exams still contain non proxy users\n+\n+        return studentExams;\n+    }\n+\n+    /**\n+     * Add multiple users to the students of the exam so that they can access the exam\n+     * The passed list of UserDTOs must include the registration number (the other entries are currently ignored and can be left out)\n+     * Note: registration based on other user attributes (e.g. email, name, login) is currently NOT supported\n+     *\n+     * This method first tries to find the student in the internal Artemis user database (because the user is most probably already using Artemis).\n+     * In case the user cannot be found, we additionally search the (TUM) LDAP in case it is configured properly.\n+     *\n+     * @param courseId      the id of the course\n+     * @param examId        the id of the exam\n+     * @param studentDtos   the list of students (with at least registration number) who should get access to the exam\n+     * @return the list of students who could not be registered for the exam, because they could NOT be found in the Artemis database and could NOT be found in the TUM LDAP\n+     */\n+    public List<StudentDTO> registerStudentsForExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody List<StudentDTO> studentDtos) {\n+        var course = courseService.findOne(courseId);\n+        var exam = findOneWithRegisteredUsers(examId);\n+        List<StudentDTO> notFoundStudentsDtos = new ArrayList<>();\n+        for (var studentDto : studentDtos) {\n+            var registrationNumber = studentDto.getRegistrationNumber();\n+            try {\n+                // 1) we use the registration number and try to find the student in the Artemis user database\n+                Optional<User> optionalStudent = userService.findUserWithGroupsAndAuthoritiesByRegistrationNumber(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // we only need to add the student to the course group, if the student is not yet part of it, otherwise the student cannot access the exam (within the course)\n+                    if (!student.getGroups().contains(course.getStudentGroupName())) {\n+                        userService.addUserToGroup(student, course.getStudentGroupName());\n+                    }\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 2) if we cannot find the student, we use the registration number and try to find the student in the (TUM) LDAP, create it in the Artemis DB and in a potential\n+                // external user management system\n+                optionalStudent = userService.createUserFromLdap(registrationNumber);\n+                if (optionalStudent.isPresent()) {\n+                    var student = optionalStudent.get();\n+                    // the newly created student needs to get the rights to access the course, otherwise the student cannot access the exam (within the course)\n+                    userService.addUserToGroup(student, course.getStudentGroupName());\n+                    exam.addUser(student);\n+                    continue;\n+                }\n+                // 3) if we cannot find the user in the (TUM) LDAP, we report this to the client\n+                log.warn(\"User with registration number \" + registrationNumber + \" not found in Artemis user database and not found in (TUM) LDAP\");\n+            }\n+            catch (Exception ex) {\n+                log.warn(\"Error while processing user with registration number \" + registrationNumber + \": \" + ex.getMessage(), ex);\n+            }\n+\n+            notFoundStudentsDtos.add(studentDto);\n+        }\n+        examRepository.save(exam);\n+        return notFoundStudentsDtos;\n+    }\n+\n+    private List<Integer> assembleIndicesListWithRandomSelection(List<Integer> mandatoryIndices, List<Integer> optionalIndices, Long numberOfOptionalExercises) {\n+        // Add all mandatory indices\n+        List<Integer> indices = new ArrayList<>(mandatoryIndices);\n+\n+        // Add as many optional indices as numberOfOptionalExercises\n+        if (numberOfOptionalExercises > 0) {\n+            Collections.shuffle(optionalIndices);\n+            indices = Stream.concat(indices.stream(), optionalIndices.stream().limit(numberOfOptionalExercises)).collect(Collectors.toList());\n+        }\n+\n+        // Sort the indices", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MjAwMw=="}, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjgxMTMwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/exam.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjowOFrOGl_6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjowOFrOGl_6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"numberOfExercisesInExamNotSet\": \"The Anzahl an Aufgaben in der Klausur ist nicht gesetzt.\",\n          \n          \n            \n                            \"numberOfExercisesInExamNotSet\": \"Die Anzahl an Aufgaben in der Klausur ist nicht gesetzt.\",", "url": "https://github.com/ls1intum/Artemis/pull/1678#discussion_r442497622", "createdAt": "2020-06-18T20:56:08Z", "author": {"login": "JonasPetry"}, "path": "src/main/webapp/i18n/de/exam.json", "diffHunk": "@@ -14,9 +14,14 @@\n             \"endDate\": \"Ende\",\n             \"duration\": \"Dauer\",\n             \"nrOfStudents\": \"Anzahl der registrierten Studenten\",\n-\n             \"created\": \"Neue Klausur erstellt\",\n-            \"updated\": \"Klausur bearbeitet\"\n+            \"updated\": \"Klausur bearbeitet\",\n+            \"validation\": {\n+                \"atLeastOneExercisePerExerciseGroup\": \"Alle Aufgabengruppen m\u00fcssen mindestens eine Aufgabe haben.\",\n+                \"numberOfExercisesInExamNotSet\": \"The Anzahl an Aufgaben in der Klausur ist nicht gesetzt.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b337e9fb26fccaef7ddc1e1e800c86ccefd4e9"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4894, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}