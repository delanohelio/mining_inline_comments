{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTMwNzA2", "number": 1239, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoyMToyM1rODg44tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0NzowNlrODiodLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODEzMDQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoyMToyM1rOFrWCvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoyMToyM1rOFrWCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NDIzNw==", "bodyText": "please do not use a SpyBean here. This significantly increases test execution costs and we absolutely want to avoid it for simple cases in which we can easily avoid this!", "url": "https://github.com/ls1intum/Artemis/pull/1239#discussion_r380994237", "createdAt": "2020-02-18T23:21:23Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.SpyBean;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.config.audit.AuditEventConverter;\n+import de.tum.in.www1.artemis.domain.PersistentAuditEvent;\n+import de.tum.in.www1.artemis.service.AuditEventService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class ManagementResourceIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @SpyBean\n+    AuditEventService auditEventService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08520f49eb2a222710eb2ea096ac14ab6ee1db94"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQwNTk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0NTo1OFrOFt_Nzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMDozMFrOFu_ieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NTk2Ng==", "bodyText": "reset the status of the FeatureToggle", "url": "https://github.com/ls1intum/Artemis/pull/1239#discussion_r383765966", "createdAt": "2020-02-25T09:45:58Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.config.audit.AuditEventConverter;\n+import de.tum.in.www1.artemis.domain.PersistentAuditEvent;\n+import de.tum.in.www1.artemis.repository.PersistenceAuditEventRepository;\n+import de.tum.in.www1.artemis.service.AuditEventService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class ManagementResourceIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AuditEventService auditEventService;\n+\n+    @Autowired\n+    PersistenceAuditEventRepository persistenceAuditEventRepository;\n+\n+    @Autowired\n+    AuditEventConverter auditEventConverter;\n+\n+    private PersistentAuditEvent persAuditEvent;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(0, 0, 0);\n+        persAuditEvent = new PersistentAuditEvent();\n+        persAuditEvent.setPrincipal(\"student1\");\n+        persAuditEvent.setAuditEventDate(Instant.now());\n+        persAuditEvent.setAuditEventType(\"type\");\n+        var data = new HashMap<String, String>();\n+        data.put(\"1\", \"2\");\n+        persAuditEvent.setData(data);\n+        persistenceAuditEventRepository.deleteAll();\n+        persAuditEvent = persistenceAuditEventRepository.save(persAuditEvent);\n+\n+        var persAuditEvent2 = new PersistentAuditEvent();\n+        persAuditEvent2.setPrincipal(\"student2\");\n+        persAuditEvent2.setAuditEventDate(Instant.now().minus(5, ChronoUnit.DAYS));\n+        persAuditEvent2.setAuditEventType(\"tt\");\n+        persAuditEvent2.setData(data);\n+        persistenceAuditEventRepository.save(persAuditEvent2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2477751048ddc98d93e0048ecc1513866048292c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTgzMg==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1239#discussion_r384819832", "createdAt": "2020-02-26T23:00:30Z", "author": {"login": "maxr96"}, "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.config.audit.AuditEventConverter;\n+import de.tum.in.www1.artemis.domain.PersistentAuditEvent;\n+import de.tum.in.www1.artemis.repository.PersistenceAuditEventRepository;\n+import de.tum.in.www1.artemis.service.AuditEventService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class ManagementResourceIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AuditEventService auditEventService;\n+\n+    @Autowired\n+    PersistenceAuditEventRepository persistenceAuditEventRepository;\n+\n+    @Autowired\n+    AuditEventConverter auditEventConverter;\n+\n+    private PersistentAuditEvent persAuditEvent;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(0, 0, 0);\n+        persAuditEvent = new PersistentAuditEvent();\n+        persAuditEvent.setPrincipal(\"student1\");\n+        persAuditEvent.setAuditEventDate(Instant.now());\n+        persAuditEvent.setAuditEventType(\"type\");\n+        var data = new HashMap<String, String>();\n+        data.put(\"1\", \"2\");\n+        persAuditEvent.setData(data);\n+        persistenceAuditEventRepository.deleteAll();\n+        persAuditEvent = persistenceAuditEventRepository.save(persAuditEvent);\n+\n+        var persAuditEvent2 = new PersistentAuditEvent();\n+        persAuditEvent2.setPrincipal(\"student2\");\n+        persAuditEvent2.setAuditEventDate(Instant.now().minus(5, ChronoUnit.DAYS));\n+        persAuditEvent2.setAuditEventType(\"tt\");\n+        persAuditEvent2.setData(data);\n+        persistenceAuditEventRepository.save(persAuditEvent2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NTk2Ng=="}, "originalCommit": {"oid": "2477751048ddc98d93e0048ecc1513866048292c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjQxMDA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0NzowNlrOFt_QdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzowMDoyNVrOFu_iWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjY0NQ==", "bodyText": "Please test that at least 5 secured REST calls for the Feature Toggles work when the feature is enabled, and do not work (return FORBIDDEN), when the feature is disabled", "url": "https://github.com/ls1intum/Artemis/pull/1239#discussion_r383766645", "createdAt": "2020-02-25T09:47:06Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.config.audit.AuditEventConverter;\n+import de.tum.in.www1.artemis.domain.PersistentAuditEvent;\n+import de.tum.in.www1.artemis.repository.PersistenceAuditEventRepository;\n+import de.tum.in.www1.artemis.service.AuditEventService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class ManagementResourceIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AuditEventService auditEventService;\n+\n+    @Autowired\n+    PersistenceAuditEventRepository persistenceAuditEventRepository;\n+\n+    @Autowired\n+    AuditEventConverter auditEventConverter;\n+\n+    private PersistentAuditEvent persAuditEvent;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(0, 0, 0);\n+        persAuditEvent = new PersistentAuditEvent();\n+        persAuditEvent.setPrincipal(\"student1\");\n+        persAuditEvent.setAuditEventDate(Instant.now());\n+        persAuditEvent.setAuditEventType(\"type\");\n+        var data = new HashMap<String, String>();\n+        data.put(\"1\", \"2\");\n+        persAuditEvent.setData(data);\n+        persistenceAuditEventRepository.deleteAll();\n+        persAuditEvent = persistenceAuditEventRepository.save(persAuditEvent);\n+\n+        var persAuditEvent2 = new PersistentAuditEvent();\n+        persAuditEvent2.setPrincipal(\"student2\");\n+        persAuditEvent2.setAuditEventDate(Instant.now().minus(5, ChronoUnit.DAYS));\n+        persAuditEvent2.setAuditEventType(\"tt\");\n+        persAuditEvent2.setData(data);\n+        persistenceAuditEventRepository.save(persAuditEvent2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void toggleFeatures() throws Exception {\n+        var features = new HashMap<Feature, Boolean>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2477751048ddc98d93e0048ecc1513866048292c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTgwMg==", "bodyText": "Added 5 calls from different resources", "url": "https://github.com/ls1intum/Artemis/pull/1239#discussion_r384819802", "createdAt": "2020-02-26T23:00:25Z", "author": {"login": "maxr96"}, "path": "src/test/java/de/tum/in/www1/artemis/ManagementResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.config.audit.AuditEventConverter;\n+import de.tum.in.www1.artemis.domain.PersistentAuditEvent;\n+import de.tum.in.www1.artemis.repository.PersistenceAuditEventRepository;\n+import de.tum.in.www1.artemis.service.AuditEventService;\n+import de.tum.in.www1.artemis.service.feature.Feature;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class ManagementResourceIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AuditEventService auditEventService;\n+\n+    @Autowired\n+    PersistenceAuditEventRepository persistenceAuditEventRepository;\n+\n+    @Autowired\n+    AuditEventConverter auditEventConverter;\n+\n+    private PersistentAuditEvent persAuditEvent;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(0, 0, 0);\n+        persAuditEvent = new PersistentAuditEvent();\n+        persAuditEvent.setPrincipal(\"student1\");\n+        persAuditEvent.setAuditEventDate(Instant.now());\n+        persAuditEvent.setAuditEventType(\"type\");\n+        var data = new HashMap<String, String>();\n+        data.put(\"1\", \"2\");\n+        persAuditEvent.setData(data);\n+        persistenceAuditEventRepository.deleteAll();\n+        persAuditEvent = persistenceAuditEventRepository.save(persAuditEvent);\n+\n+        var persAuditEvent2 = new PersistentAuditEvent();\n+        persAuditEvent2.setPrincipal(\"student2\");\n+        persAuditEvent2.setAuditEventDate(Instant.now().minus(5, ChronoUnit.DAYS));\n+        persAuditEvent2.setAuditEventType(\"tt\");\n+        persAuditEvent2.setData(data);\n+        persistenceAuditEventRepository.save(persAuditEvent2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"admin\", roles = \"ADMIN\")\n+    public void toggleFeatures() throws Exception {\n+        var features = new HashMap<Feature, Boolean>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjY0NQ=="}, "originalCommit": {"oid": "2477751048ddc98d93e0048ecc1513866048292c"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 224, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}