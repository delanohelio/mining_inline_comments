{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzgxMjIx", "number": 1260, "title": "Chore/test coverage/quiz resources", "bodyText": "Checklist\n\n Server: I added multiple integration tests (Spring) related to the features\n\nMotivation and Context\n\n\nThis PR is part of the initiative to increase the test coverage for the REST controllers.\nDescription\n\n\nmoved tests covering the QuizSubmissionResource to new class QuizSubmissionIntegrationTest.java\nadded some edge tests to increase line coverage for QuizExercise- and QuizSubmissionResource\nadded tests for not covered REST calls in QuizSubmissionResource", "createdAt": "2020-02-28T13:07:43Z", "url": "https://github.com/ls1intum/Artemis/pull/1260", "merged": true, "mergeCommit": {"oid": "9de1f5445a832f1774195c0a2c25769812d5e14d"}, "closed": true, "closedAt": "2020-02-29T13:31:07Z", "author": {"login": "clemenszuck"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIbaS1AH2gAyMzgxMzgxMjIxOmY4ODc2ZTVhOGExMjVjYjEyYTFjNjkwOTA3ZDg2N2Q5YTFmZjI1NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJEQ-rAH2gAyMzgxMzgxMjIxOjAzOTgzNjNiYTk2ZmU1MzI2YzY5ODJlMmJmOTVlNTAxMWU3MTczY2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543", "author": {"user": {"login": "clemenszuck", "name": "Clemens Zuck"}}, "url": "https://github.com/ls1intum/Artemis/commit/f8876e5a8a125cb12a1c690907d867d9a1ff2543", "committedDate": "2020-02-27T13:33:38Z", "message": "Move tests for QuizSubmissionResource into new class and added some edge test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0NzUz", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794753", "createdAt": "2020-02-29T12:07:03Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0Nzgw", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794780", "createdAt": "2020-02-29T12:07:47Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowNzo0OFrOFwJBrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowNzo0OFrOFwJBrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMzg1NA==", "bodyText": "duplicated, please use the method in the DatabaseUtilService", "url": "https://github.com/ls1intum/Artemis/pull/1260#discussion_r386023854", "createdAt": "2020-02-29T12:07:48Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizSubmissionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.security.Principal;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.quiz.*;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.scheduled.QuizScheduleService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.websocket.QuizSubmissionWebsocketService;\n+\n+public class QuizSubmissionIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepository;\n+\n+    @Autowired\n+    QuizExerciseService quizExerciseService;\n+\n+    @Autowired\n+    QuizScheduleService scheduleService;\n+\n+    @Autowired\n+    QuizSubmissionWebsocketService quizSubmissionWebsocketService;\n+\n+    @Autowired\n+    QuizSubmissionRepository quizSubmissionRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepository;\n+\n+    @Autowired\n+    ResultRepository resultRepository;\n+\n+    @BeforeEach\n+    public void init() {\n+        database.addUsers(10, 5, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmit() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().plusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        int numberOfParticipants = 10;\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // save\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            quizSubmission.setSubmitted(true);\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // submit\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        // before the quiz has ended, no submission is saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until the quiz has finished\n+        Thread.sleep(4000);\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are rated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(numberOfParticipants);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExercise.setIsOpenForPractice(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var numberOfParticipants = 1;\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/practice\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+        // TODO: can we simulate more students submitting here?\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        // wait until statistics have been updated\n+        Thread.sleep(4000);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(numberOfParticipants);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice_badRequest() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExerciseServer = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseServer.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExerciseServer.setDuration(2);\n+        quizExerciseServer.setIsPlannedToStart(true);\n+        quizExerciseServer.setIsVisibleBeforeStart(true);\n+        quizExerciseServer.setIsOpenForPractice(false);\n+        quizExerciseService.save(quizExerciseServer);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExerciseServer);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        // quiz not open for practice --> bad request expected\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExerciseServer.getId() + \"/submissions/practice\", quizSubmission, Result.class,\n+                HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testQuizSubmitPreview() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseService.save(quizExercise);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/preview\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until statistics might have been updated\n+        Thread.sleep(4000);\n+\n+        // all stats must be 0 because we have a preview here\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    private QuizExercise createQuizOnServer() throws Exception {\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+\n+        QuizExercise quizExercise = createQuiz(course);\n+        return request.postWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.CREATED);\n+        // TODO: add some checks\n+    }\n+\n+    @NotNull\n+    private QuizExercise createQuiz(Course course) {\n+        QuizExercise quizExercise = ModelFactory.generateQuizExercise(ZonedDateTime.now().plusHours(5), null, course);\n+        quizExercise.addQuestions(createMultipleChoiceQuestion());\n+        quizExercise.addQuestions(createDragAndDropQuestion());\n+        quizExercise.addQuestions(createShortAnswerQuestion());\n+        return quizExercise;\n+    }\n+\n+    @NotNull\n+    private ShortAnswerQuestion createShortAnswerQuestion() {\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) new ShortAnswerQuestion().title(\"SA\").score(2).text(\"This is a long answer text\");\n+        var shortAnswerSpot1 = new ShortAnswerSpot().spotNr(0).width(1);\n+        shortAnswerSpot1.setTempID(generateTempId());\n+        var shortAnswerSpot2 = new ShortAnswerSpot().spotNr(2).width(2);\n+        shortAnswerSpot2.setTempID(generateTempId());\n+        sa.getSpots().add(shortAnswerSpot1);\n+        sa.getSpots().add(shortAnswerSpot2);\n+        var shortAnswerSolution1 = new ShortAnswerSolution().text(\"is\");\n+        shortAnswerSolution1.setTempID(generateTempId());\n+        var shortAnswerSolution2 = new ShortAnswerSolution().text(\"long\");\n+        shortAnswerSolution2.setTempID(generateTempId());\n+        sa.getSolutions().add(shortAnswerSolution1);\n+        sa.getSolutions().add(shortAnswerSolution2);\n+        sa.getCorrectMappings().add(new ShortAnswerMapping().spot(sa.getSpots().get(0)).solution(sa.getSolutions().get(0)));\n+        sa.getCorrectMappings().add(new ShortAnswerMapping().spot(sa.getSpots().get(1)).solution(sa.getSolutions().get(1)));\n+        return sa;\n+    }\n+\n+    @NotNull\n+    private DragAndDropQuestion createDragAndDropQuestion() {\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) new DragAndDropQuestion().title(\"DnD\").score(1).text(\"Q2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "originalPosition": 316}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0Nzgy", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794782", "createdAt": "2020-02-29T12:07:53Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowNzo1M1rOFwJBrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowNzo1M1rOFwJBrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMzg1NQ==", "bodyText": "duplicated, please use the method in the DatabaseUtilService", "url": "https://github.com/ls1intum/Artemis/pull/1260#discussion_r386023855", "createdAt": "2020-02-29T12:07:53Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizSubmissionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.security.Principal;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.quiz.*;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.scheduled.QuizScheduleService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.websocket.QuizSubmissionWebsocketService;\n+\n+public class QuizSubmissionIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepository;\n+\n+    @Autowired\n+    QuizExerciseService quizExerciseService;\n+\n+    @Autowired\n+    QuizScheduleService scheduleService;\n+\n+    @Autowired\n+    QuizSubmissionWebsocketService quizSubmissionWebsocketService;\n+\n+    @Autowired\n+    QuizSubmissionRepository quizSubmissionRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepository;\n+\n+    @Autowired\n+    ResultRepository resultRepository;\n+\n+    @BeforeEach\n+    public void init() {\n+        database.addUsers(10, 5, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmit() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().plusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        int numberOfParticipants = 10;\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // save\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            quizSubmission.setSubmitted(true);\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // submit\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        // before the quiz has ended, no submission is saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until the quiz has finished\n+        Thread.sleep(4000);\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are rated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(numberOfParticipants);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExercise.setIsOpenForPractice(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var numberOfParticipants = 1;\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/practice\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+        // TODO: can we simulate more students submitting here?\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        // wait until statistics have been updated\n+        Thread.sleep(4000);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(numberOfParticipants);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice_badRequest() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExerciseServer = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseServer.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExerciseServer.setDuration(2);\n+        quizExerciseServer.setIsPlannedToStart(true);\n+        quizExerciseServer.setIsVisibleBeforeStart(true);\n+        quizExerciseServer.setIsOpenForPractice(false);\n+        quizExerciseService.save(quizExerciseServer);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExerciseServer);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        // quiz not open for practice --> bad request expected\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExerciseServer.getId() + \"/submissions/practice\", quizSubmission, Result.class,\n+                HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testQuizSubmitPreview() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseService.save(quizExercise);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/preview\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until statistics might have been updated\n+        Thread.sleep(4000);\n+\n+        // all stats must be 0 because we have a preview here\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    private QuizExercise createQuizOnServer() throws Exception {\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+\n+        QuizExercise quizExercise = createQuiz(course);\n+        return request.postWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.CREATED);\n+        // TODO: add some checks\n+    }\n+\n+    @NotNull\n+    private QuizExercise createQuiz(Course course) {\n+        QuizExercise quizExercise = ModelFactory.generateQuizExercise(ZonedDateTime.now().plusHours(5), null, course);\n+        quizExercise.addQuestions(createMultipleChoiceQuestion());\n+        quizExercise.addQuestions(createDragAndDropQuestion());\n+        quizExercise.addQuestions(createShortAnswerQuestion());\n+        return quizExercise;\n+    }\n+\n+    @NotNull\n+    private ShortAnswerQuestion createShortAnswerQuestion() {\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) new ShortAnswerQuestion().title(\"SA\").score(2).text(\"This is a long answer text\");\n+        var shortAnswerSpot1 = new ShortAnswerSpot().spotNr(0).width(1);\n+        shortAnswerSpot1.setTempID(generateTempId());\n+        var shortAnswerSpot2 = new ShortAnswerSpot().spotNr(2).width(2);\n+        shortAnswerSpot2.setTempID(generateTempId());\n+        sa.getSpots().add(shortAnswerSpot1);\n+        sa.getSpots().add(shortAnswerSpot2);\n+        var shortAnswerSolution1 = new ShortAnswerSolution().text(\"is\");\n+        shortAnswerSolution1.setTempID(generateTempId());\n+        var shortAnswerSolution2 = new ShortAnswerSolution().text(\"long\");\n+        shortAnswerSolution2.setTempID(generateTempId());\n+        sa.getSolutions().add(shortAnswerSolution1);\n+        sa.getSolutions().add(shortAnswerSolution2);\n+        sa.getCorrectMappings().add(new ShortAnswerMapping().spot(sa.getSpots().get(0)).solution(sa.getSolutions().get(0)));\n+        sa.getCorrectMappings().add(new ShortAnswerMapping().spot(sa.getSpots().get(1)).solution(sa.getSolutions().get(1)));\n+        return sa;\n+    }\n+\n+    @NotNull\n+    private DragAndDropQuestion createDragAndDropQuestion() {\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) new DragAndDropQuestion().title(\"DnD\").score(1).text(\"Q2\");\n+        var dropLocation1 = new DropLocation().posX(10).posY(10).height(10).width(10);\n+        dropLocation1.setTempID(generateTempId());\n+        var dropLocation2 = new DropLocation().posX(20).posY(20).height(10).width(10);\n+        dropLocation2.setTempID(generateTempId());\n+        dnd.getDropLocations().add(dropLocation1);\n+        dnd.getDropLocations().add(dropLocation2);\n+        var dragItem1 = new DragItem().text(\"D1\");\n+        dragItem1.setTempID(generateTempId());\n+        var dragItem2 = new DragItem().text(\"D2\");\n+        dragItem2.setTempID(generateTempId());\n+        dnd.getDragItems().add(dragItem1);\n+        dnd.getDragItems().add(dragItem2);\n+        dnd.getCorrectMappings().add(new DragAndDropMapping().dragItem(dragItem1).dropLocation(dropLocation1));\n+        dnd.getCorrectMappings().add(new DragAndDropMapping().dragItem(dragItem2).dropLocation(dropLocation2));\n+        return dnd;\n+    }\n+\n+    private Long generateTempId() {\n+        return ThreadLocalRandom.current().nextLong(Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "originalPosition": 335}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0Nzg3", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794787", "createdAt": "2020-02-29T12:07:57Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowNzo1N1rOFwJBsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowNzo1N1rOFwJBsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMzg1OQ==", "bodyText": "duplicated, please use the method in the DatabaseUtilService", "url": "https://github.com/ls1intum/Artemis/pull/1260#discussion_r386023859", "createdAt": "2020-02-29T12:07:57Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizSubmissionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.security.Principal;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.quiz.*;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.scheduled.QuizScheduleService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.websocket.QuizSubmissionWebsocketService;\n+\n+public class QuizSubmissionIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepository;\n+\n+    @Autowired\n+    QuizExerciseService quizExerciseService;\n+\n+    @Autowired\n+    QuizScheduleService scheduleService;\n+\n+    @Autowired\n+    QuizSubmissionWebsocketService quizSubmissionWebsocketService;\n+\n+    @Autowired\n+    QuizSubmissionRepository quizSubmissionRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepository;\n+\n+    @Autowired\n+    ResultRepository resultRepository;\n+\n+    @BeforeEach\n+    public void init() {\n+        database.addUsers(10, 5, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmit() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().plusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        int numberOfParticipants = 10;\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // save\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            quizSubmission.setSubmitted(true);\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // submit\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        // before the quiz has ended, no submission is saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until the quiz has finished\n+        Thread.sleep(4000);\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are rated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(numberOfParticipants);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExercise.setIsOpenForPractice(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var numberOfParticipants = 1;\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/practice\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+        // TODO: can we simulate more students submitting here?\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        // wait until statistics have been updated\n+        Thread.sleep(4000);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(numberOfParticipants);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice_badRequest() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExerciseServer = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseServer.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExerciseServer.setDuration(2);\n+        quizExerciseServer.setIsPlannedToStart(true);\n+        quizExerciseServer.setIsVisibleBeforeStart(true);\n+        quizExerciseServer.setIsOpenForPractice(false);\n+        quizExerciseService.save(quizExerciseServer);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExerciseServer);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        // quiz not open for practice --> bad request expected\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExerciseServer.getId() + \"/submissions/practice\", quizSubmission, Result.class,\n+                HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testQuizSubmitPreview() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseService.save(quizExercise);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/preview\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until statistics might have been updated\n+        Thread.sleep(4000);\n+\n+        // all stats must be 0 because we have a preview here\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    private QuizExercise createQuizOnServer() throws Exception {\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+\n+        QuizExercise quizExercise = createQuiz(course);\n+        return request.postWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.CREATED);\n+        // TODO: add some checks\n+    }\n+\n+    @NotNull\n+    private QuizExercise createQuiz(Course course) {\n+        QuizExercise quizExercise = ModelFactory.generateQuizExercise(ZonedDateTime.now().plusHours(5), null, course);\n+        quizExercise.addQuestions(createMultipleChoiceQuestion());\n+        quizExercise.addQuestions(createDragAndDropQuestion());\n+        quizExercise.addQuestions(createShortAnswerQuestion());\n+        return quizExercise;\n+    }\n+\n+    @NotNull\n+    private ShortAnswerQuestion createShortAnswerQuestion() {\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) new ShortAnswerQuestion().title(\"SA\").score(2).text(\"This is a long answer text\");\n+        var shortAnswerSpot1 = new ShortAnswerSpot().spotNr(0).width(1);\n+        shortAnswerSpot1.setTempID(generateTempId());\n+        var shortAnswerSpot2 = new ShortAnswerSpot().spotNr(2).width(2);\n+        shortAnswerSpot2.setTempID(generateTempId());\n+        sa.getSpots().add(shortAnswerSpot1);\n+        sa.getSpots().add(shortAnswerSpot2);\n+        var shortAnswerSolution1 = new ShortAnswerSolution().text(\"is\");\n+        shortAnswerSolution1.setTempID(generateTempId());\n+        var shortAnswerSolution2 = new ShortAnswerSolution().text(\"long\");\n+        shortAnswerSolution2.setTempID(generateTempId());\n+        sa.getSolutions().add(shortAnswerSolution1);\n+        sa.getSolutions().add(shortAnswerSolution2);\n+        sa.getCorrectMappings().add(new ShortAnswerMapping().spot(sa.getSpots().get(0)).solution(sa.getSolutions().get(0)));\n+        sa.getCorrectMappings().add(new ShortAnswerMapping().spot(sa.getSpots().get(1)).solution(sa.getSolutions().get(1)));\n+        return sa;\n+    }\n+\n+    @NotNull\n+    private DragAndDropQuestion createDragAndDropQuestion() {\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) new DragAndDropQuestion().title(\"DnD\").score(1).text(\"Q2\");\n+        var dropLocation1 = new DropLocation().posX(10).posY(10).height(10).width(10);\n+        dropLocation1.setTempID(generateTempId());\n+        var dropLocation2 = new DropLocation().posX(20).posY(20).height(10).width(10);\n+        dropLocation2.setTempID(generateTempId());\n+        dnd.getDropLocations().add(dropLocation1);\n+        dnd.getDropLocations().add(dropLocation2);\n+        var dragItem1 = new DragItem().text(\"D1\");\n+        dragItem1.setTempID(generateTempId());\n+        var dragItem2 = new DragItem().text(\"D2\");\n+        dragItem2.setTempID(generateTempId());\n+        dnd.getDragItems().add(dragItem1);\n+        dnd.getDragItems().add(dragItem2);\n+        dnd.getCorrectMappings().add(new DragAndDropMapping().dragItem(dragItem1).dropLocation(dropLocation1));\n+        dnd.getCorrectMappings().add(new DragAndDropMapping().dragItem(dragItem2).dropLocation(dropLocation2));\n+        return dnd;\n+    }\n+\n+    private Long generateTempId() {\n+        return ThreadLocalRandom.current().nextLong(Long.MAX_VALUE);\n+    }\n+\n+    @NotNull\n+    private MultipleChoiceQuestion createMultipleChoiceQuestion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "originalPosition": 339}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0Nzk2", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794796", "createdAt": "2020-02-29T12:08:05Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowODowNVrOFwJBug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowODowNVrOFwJBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMzg2Ng==", "bodyText": "duplicated, please use the method in the DatabaseUtilService", "url": "https://github.com/ls1intum/Artemis/pull/1260#discussion_r386023866", "createdAt": "2020-02-29T12:08:05Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizSubmissionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.security.Principal;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.quiz.*;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.scheduled.QuizScheduleService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.websocket.QuizSubmissionWebsocketService;\n+\n+public class QuizSubmissionIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepository;\n+\n+    @Autowired\n+    QuizExerciseService quizExerciseService;\n+\n+    @Autowired\n+    QuizScheduleService scheduleService;\n+\n+    @Autowired\n+    QuizSubmissionWebsocketService quizSubmissionWebsocketService;\n+\n+    @Autowired\n+    QuizSubmissionRepository quizSubmissionRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepository;\n+\n+    @Autowired\n+    ResultRepository resultRepository;\n+\n+    @BeforeEach\n+    public void init() {\n+        database.addUsers(10, 5, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmit() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().plusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        int numberOfParticipants = 10;\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // save\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            quizSubmission.setSubmitted(true);\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // submit\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        // before the quiz has ended, no submission is saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until the quiz has finished\n+        Thread.sleep(4000);\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are rated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(numberOfParticipants);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExercise.setIsOpenForPractice(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var numberOfParticipants = 1;\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/practice\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+        // TODO: can we simulate more students submitting here?\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        // wait until statistics have been updated\n+        Thread.sleep(4000);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(numberOfParticipants);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice_badRequest() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExerciseServer = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseServer.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExerciseServer.setDuration(2);\n+        quizExerciseServer.setIsPlannedToStart(true);\n+        quizExerciseServer.setIsVisibleBeforeStart(true);\n+        quizExerciseServer.setIsOpenForPractice(false);\n+        quizExerciseService.save(quizExerciseServer);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExerciseServer);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        // quiz not open for practice --> bad request expected\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExerciseServer.getId() + \"/submissions/practice\", quizSubmission, Result.class,\n+                HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testQuizSubmitPreview() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseService.save(quizExercise);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/preview\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until statistics might have been updated\n+        Thread.sleep(4000);\n+\n+        // all stats must be 0 because we have a preview here\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    private QuizExercise createQuizOnServer() throws Exception {\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+\n+        QuizExercise quizExercise = createQuiz(course);\n+        return request.postWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.CREATED);\n+        // TODO: add some checks\n+    }\n+\n+    @NotNull\n+    private QuizExercise createQuiz(Course course) {\n+        QuizExercise quizExercise = ModelFactory.generateQuizExercise(ZonedDateTime.now().plusHours(5), null, course);\n+        quizExercise.addQuestions(createMultipleChoiceQuestion());\n+        quizExercise.addQuestions(createDragAndDropQuestion());\n+        quizExercise.addQuestions(createShortAnswerQuestion());\n+        return quizExercise;\n+    }\n+\n+    @NotNull\n+    private ShortAnswerQuestion createShortAnswerQuestion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "originalPosition": 295}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0ODAw", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794800", "createdAt": "2020-02-29T12:08:15Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowODoxNlrOFwJBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjowODoxNlrOFwJBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMzg2OA==", "bodyText": "duplicated, please use the method in the DatabaseUtilService", "url": "https://github.com/ls1intum/Artemis/pull/1260#discussion_r386023868", "createdAt": "2020-02-29T12:08:16Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/QuizSubmissionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.security.Principal;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.quiz.*;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.QuizExerciseService;\n+import de.tum.in.www1.artemis.service.scheduled.QuizScheduleService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.websocket.QuizSubmissionWebsocketService;\n+\n+public class QuizSubmissionIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepository;\n+\n+    @Autowired\n+    QuizExerciseService quizExerciseService;\n+\n+    @Autowired\n+    QuizScheduleService scheduleService;\n+\n+    @Autowired\n+    QuizSubmissionWebsocketService quizSubmissionWebsocketService;\n+\n+    @Autowired\n+    QuizSubmissionRepository quizSubmissionRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepository;\n+\n+    @Autowired\n+    ResultRepository resultRepository;\n+\n+    @BeforeEach\n+    public void init() {\n+        database.addUsers(10, 5, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmit() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().plusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        int numberOfParticipants = 10;\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // save\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        for (int i = 1; i <= numberOfParticipants; i++) {\n+            var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+            // TODO: add more submitted answers\n+            quizSubmission.setSubmitted(true);\n+            final var username = \"student\" + i;\n+            final Principal principal = () -> username;\n+            // submit\n+            quizSubmissionWebsocketService.saveSubmission(quizExercise.getId(), quizSubmission, principal);\n+            verify(messagingTemplate, times(1)).convertAndSendToUser(username, \"/topic/quizExercise/\" + quizExercise.getId() + \"/submission\", quizSubmission);\n+        }\n+\n+        // before the quiz has ended, no submission is saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until the quiz has finished\n+        Thread.sleep(4000);\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are rated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(numberOfParticipants);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExercise.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExercise.setDuration(2);\n+        quizExercise.setIsPlannedToStart(true);\n+        quizExercise.setIsVisibleBeforeStart(true);\n+        quizExercise.setIsOpenForPractice(true);\n+        quizExerciseService.save(quizExercise);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var numberOfParticipants = 1;\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/practice\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+        // TODO: can we simulate more students submitting here?\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(numberOfParticipants);\n+\n+        // wait until statistics have been updated\n+        Thread.sleep(4000);\n+\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(numberOfParticipants);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(numberOfParticipants);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testQuizSubmitPractice_badRequest() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 2 seconds\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExerciseServer = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseServer.setDueDate(ZonedDateTime.now().minusSeconds(2));\n+        quizExerciseServer.setDuration(2);\n+        quizExerciseServer.setIsPlannedToStart(true);\n+        quizExerciseServer.setIsVisibleBeforeStart(true);\n+        quizExerciseServer.setIsOpenForPractice(false);\n+        quizExerciseService.save(quizExerciseServer);\n+\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExerciseServer);\n+        // TODO: add more submitted answers\n+        quizSubmission.setSubmitted(true);\n+        // quiz not open for practice --> bad request expected\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExerciseServer.getId() + \"/submissions/practice\", quizSubmission, Result.class,\n+                HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testQuizSubmitPreview() throws Exception {\n+        // change config to make test faster\n+        scheduleService.stopSchedule();\n+        scheduleService.startSchedule(2 * 1000); // every 1 second\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now().minusSeconds(4), null);\n+        quizExerciseService.save(quizExercise);\n+\n+        var quizSubmission = wrongQuizSubmissionFor(quizExercise);\n+        // TODO: add more submitted answers\n+        Result result = request.postWithResponseBody(\"/api/exercises/\" + quizExercise.getId() + \"/submissions/preview\", quizSubmission, Result.class, HttpStatus.OK);\n+        // TODO: check the result\n+\n+        // after the quiz has ended, all submission are saved to the database\n+        assertThat(quizSubmissionRepository.findAll().size()).isEqualTo(0);\n+\n+        // wait until statistics might have been updated\n+        Thread.sleep(4000);\n+\n+        // all stats must be 0 because we have a preview here\n+        QuizExercise quizExerciseWithStatistic = quizExerciseService.findOneWithQuestionsAndStatistics(quizExercise.getId());\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsRated()).isEqualTo(0);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getParticipantsUnrated()).isEqualTo(0);\n+        int questionScore = quizExerciseWithStatistic.getQuizQuestions().stream().map(QuizQuestion::getScore).reduce(0, Integer::sum);\n+        assertThat(quizExerciseWithStatistic.getMaxScore()).isEqualTo(questionScore);\n+        assertThat(quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters().size()).isEqualTo(questionScore + 1);\n+        for (var pointCounter : quizExerciseWithStatistic.getQuizPointStatistic().getPointCounters()) {\n+            if (pointCounter.getPoints() == 0.0f) {\n+                // all participants have 0 points (and are unrated)\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+            else {\n+                assertThat(pointCounter.getRatedCounter()).isEqualTo(0);\n+                assertThat(pointCounter.getUnRatedCounter()).isEqualTo(0);\n+            }\n+        }\n+        for (var question : quizExerciseWithStatistic.getQuizQuestions()) {\n+            assertThat(question.getQuizQuestionStatistic().getRatedCorrectCounter()).isEqualTo(0);\n+            assertThat(question.getQuizQuestionStatistic().getUnRatedCorrectCounter()).isEqualTo(0);\n+        }\n+        // TODO: check more statistics (e.g. for each question)\n+    }\n+\n+    private QuizExercise createQuizOnServer() throws Exception {\n+        List<Course> courses = database.createCoursesWithExercisesAndLectures();\n+        Course course = courses.get(0);\n+\n+        QuizExercise quizExercise = createQuiz(course);\n+        return request.postWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.CREATED);\n+        // TODO: add some checks\n+    }\n+\n+    @NotNull\n+    private QuizExercise createQuiz(Course course) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "originalPosition": 286}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzk0ODEw", "url": "https://github.com/ls1intum/Artemis/pull/1260#pullrequestreview-366794810", "createdAt": "2020-02-29T12:08:33Z", "commit": {"oid": "f8876e5a8a125cb12a1c690907d867d9a1ff2543"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "635a375a28349170de222ed41c84841cf75a64d5", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/635a375a28349170de222ed41c84841cf75a64d5", "committedDate": "2020-02-29T12:09:58Z", "message": "Merge branch 'develop' into chore/test-coverage/quiz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31440cf5b72c88f2b0ab5b71c650a9ccdd157cb9", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/31440cf5b72c88f2b0ab5b71c650a9ccdd157cb9", "committedDate": "2020-02-29T12:22:01Z", "message": "make sure that quiz tests are not randomly failing by using a different approach for the scheduling problem\n\nsubmit multiple times for practice\nTODO: the test currently fails because statistics are not updated properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9749e671fdef337b5db18a9710c2db40e79006", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/9e9749e671fdef337b5db18a9710c2db40e79006", "committedDate": "2020-02-29T12:46:55Z", "message": "Merge branch 'chore/test-coverage/quiz' of https://github.com/ls1intum/Artemis into chore/test-coverage/quiz"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0398363ba96fe5326c6982e2bf95e5011e7173cc", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/0398363ba96fe5326c6982e2bf95e5011e7173cc", "committedDate": "2020-02-29T13:09:34Z", "message": "fix quiz submission practice test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3212, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}