{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NDI4MzQ2", "number": 2611, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTozNjo0MVrOFJwFHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1NzozN1rOFJwUFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzY5MjQ1OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTozNjo0MVrOIMNVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTozNjo0MVrOIMNVyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MjM5NQ==", "bodyText": "Could you do me a favor and also add this code to the file. This would also reset all mocks after every test and is a good practice :)\n   afterEach(function () {\n        // completely restore all fakes created through the sandbox\n        sinon.restore();\n    });", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549672395", "createdAt": "2020-12-29T11:36:41Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -17,6 +17,7 @@ import { Exam } from 'app/entities/exam.model';\n import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n import { CourseManagementService } from 'app/course/manage/course-management.service';\n import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzY5NDI0OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTozNzozOVrOIMNWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTozNzozOVrOIMNWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MjY1MA==", "bodyText": "Could you do me a favor and add this code to the test to reset all mocks, stub etc after every test.\nafterEach(function () {\n        sinon.restore();\n    });", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549672650", "createdAt": "2020-12-29T11:37:39Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzcyNDI3OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1NDoyOFrOIMNnaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOToyMzo0NVrOINqfKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ==", "bodyText": "Why did you mock this? It would be useful to test the real function here", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549676905", "createdAt": "2020-12-29T11:54:28Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "diffHunk": "@@ -0,0 +1,405 @@\n+import { TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Course } from 'app/entities/course.model';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { Exam } from 'app/entities/exam.model';\n+import * as chai from 'chai';\n+import * as moment from 'moment';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n+import { StudentDTO } from 'app/entities/student-dto.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\n+\n+const expect = chai.expect;\n+describe('Exam Management Service Tests', () => {\n+    let service: ExamManagementService;\n+    let httpMock: HttpTestingController;\n+\n+    const course = { id: 456 } as Course;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            providers: [ExamManagementService],\n+            imports: [ArtemisTestModule, HttpClientTestingModule],\n+        });\n+\n+        service = TestBed.inject(ExamManagementService);\n+        httpMock = TestBed.inject(HttpTestingController);\n+    });\n+\n+    afterEach(() => {\n+        httpMock.verify();\n+    });\n+\n+    it('should create an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.create(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should update an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.update(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'PUT', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find an exam with no students and no exercise groups', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.find(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}?withStudents=false&withExerciseGroups=false` });\n+        expect(req.request.url).to.equal(`${service.resourceUrl}/${course.id!}/exams/${mockExam.id}`);\n+        expect(req.request.params.get('withStudents')).to.be.false;\n+        expect(req.request.params.get('withExerciseGroups')).to.be.false;\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should get exam scores', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExamScore: ExamScoreDTO = { examId: mockExam.id!, title: '', averagePointsAchieved: 1, exerciseGroups: [], maxPoints: 1, studentResults: [] };\n+\n+        // WHEN\n+        service.getExamScores(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExamScore));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/scores` });\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find all exams for course', () => {\n+        // WHEN\n+        service.findAllExamsForCourse(course.id!).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams` });\n+    });\n+\n+    it('should find all current and upcoming exams', () => {\n+        // WHEN\n+        service.findAllCurrentAndUpcomingExams().subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/upcoming-exams` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=false', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, false).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-dashboard` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=true', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, true).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-test-run-dashboard` });\n+    });\n+\n+    it('should get latest individual end date of exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockResponse: ExamInformationDTO = { latestIndividualEndDate: moment() };\n+\n+        // WHEN\n+        service.getLatestIndividualEndDateOfExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockResponse));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/latest-end-date` });\n+    });\n+\n+    it('should delete an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.delete(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'DELETE', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}` });\n+    });\n+\n+    it('should add student to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.addStudentToExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}` });\n+    });\n+\n+    it('should add students to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudents: StudentDTO[] = [\n+            { firstName: 'firstName1', lastName: 'lastName1', registrationNumber: '1' },\n+            { firstName: 'firstName2', lastName: 'lastName2', registrationNumber: '2' },\n+        ];\n+\n+        // WHEN\n+        service.addStudentsToExam(course.id!, mockExam.id!, mockStudents).subscribe((res) => expect(res.body).to.eq(mockStudents));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students` });\n+        expect(req.request.body).to.eq(mockStudents);\n+\n+        // CLEAN\n+        req.flush(mockStudents);\n+    });\n+\n+    it('should remove student from exam with no participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=false`,\n+        });\n+\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should remove student from exam with participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should generate student exams', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam }];\n+\n+        // WHEN\n+        service.generateStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/generate-student-exams`,\n+        });\n+    });\n+\n+    it('should create test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam };\n+\n+        // WHEN\n+        service.createTestRun(course.id!, mockExam.id!, mockStudentExam).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/test-run`,\n+        });\n+    });\n+\n+    it('should delete test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam, id: 2 };\n+\n+        // WHEN\n+        service.deleteTestRun(course.id!, mockExam.id!, mockStudentExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-run/${mockStudentExam.id}`,\n+        });\n+    });\n+\n+    it('should find all test runs for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.findAllTestRunsForExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'GET',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-runs`,\n+        });\n+    });\n+\n+    it('should generate missing student for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.generateMissingStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/generate-missing-student-exams`,\n+        });\n+    });\n+\n+    it('should start exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.startExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockStudentExams.length));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/start-exercises`,\n+        });\n+    });\n+\n+    it('should evaluate quiz exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockEvaluatedExercises = 1;\n+\n+        // WHEN\n+        service.evaluateQuizExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockEvaluatedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/evaluate-quiz-exercises`,\n+        });\n+    });\n+\n+    it('should assess unsubmitted exam modelling and text participations', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockUnsubmittedExercises = 1;\n+\n+        // WHEN\n+        service.assessUnsubmittedExamModelingAndTextParticipations(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockUnsubmittedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/assess-unsubmitted-and-empty-student-exams`,\n+        });\n+    });\n+\n+    it('should unlock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.unlockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/unlock-all-repositories`,\n+        });\n+    });\n+\n+    it('should lock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.lockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/lock-all-repositories`,\n+        });\n+    });\n+\n+    it('should update order', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExerciseGroups: ExerciseGroup[] = [{ exam: mockExam, id: 1 }];\n+\n+        // WHEN\n+        service.updateOrder(course.id!, mockExam.id!, mockExerciseGroups).subscribe((res) => expect(res.body).to.equal(mockExerciseGroups));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'PUT',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/exerciseGroupsOrder`,\n+        });\n+    });\n+});\n+\n+function mockConvertDateFromClient(exam: Exam): Exam {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNDA3MQ==", "bodyText": "Is it possible to test the real function (since it's private)?", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549724071", "createdAt": "2020-12-29T14:27:08Z", "author": {"login": "ivanchimeno"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "diffHunk": "@@ -0,0 +1,405 @@\n+import { TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Course } from 'app/entities/course.model';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { Exam } from 'app/entities/exam.model';\n+import * as chai from 'chai';\n+import * as moment from 'moment';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n+import { StudentDTO } from 'app/entities/student-dto.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\n+\n+const expect = chai.expect;\n+describe('Exam Management Service Tests', () => {\n+    let service: ExamManagementService;\n+    let httpMock: HttpTestingController;\n+\n+    const course = { id: 456 } as Course;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            providers: [ExamManagementService],\n+            imports: [ArtemisTestModule, HttpClientTestingModule],\n+        });\n+\n+        service = TestBed.inject(ExamManagementService);\n+        httpMock = TestBed.inject(HttpTestingController);\n+    });\n+\n+    afterEach(() => {\n+        httpMock.verify();\n+    });\n+\n+    it('should create an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.create(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should update an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.update(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'PUT', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find an exam with no students and no exercise groups', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.find(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}?withStudents=false&withExerciseGroups=false` });\n+        expect(req.request.url).to.equal(`${service.resourceUrl}/${course.id!}/exams/${mockExam.id}`);\n+        expect(req.request.params.get('withStudents')).to.be.false;\n+        expect(req.request.params.get('withExerciseGroups')).to.be.false;\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should get exam scores', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExamScore: ExamScoreDTO = { examId: mockExam.id!, title: '', averagePointsAchieved: 1, exerciseGroups: [], maxPoints: 1, studentResults: [] };\n+\n+        // WHEN\n+        service.getExamScores(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExamScore));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/scores` });\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find all exams for course', () => {\n+        // WHEN\n+        service.findAllExamsForCourse(course.id!).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams` });\n+    });\n+\n+    it('should find all current and upcoming exams', () => {\n+        // WHEN\n+        service.findAllCurrentAndUpcomingExams().subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/upcoming-exams` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=false', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, false).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-dashboard` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=true', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, true).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-test-run-dashboard` });\n+    });\n+\n+    it('should get latest individual end date of exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockResponse: ExamInformationDTO = { latestIndividualEndDate: moment() };\n+\n+        // WHEN\n+        service.getLatestIndividualEndDateOfExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockResponse));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/latest-end-date` });\n+    });\n+\n+    it('should delete an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.delete(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'DELETE', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}` });\n+    });\n+\n+    it('should add student to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.addStudentToExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}` });\n+    });\n+\n+    it('should add students to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudents: StudentDTO[] = [\n+            { firstName: 'firstName1', lastName: 'lastName1', registrationNumber: '1' },\n+            { firstName: 'firstName2', lastName: 'lastName2', registrationNumber: '2' },\n+        ];\n+\n+        // WHEN\n+        service.addStudentsToExam(course.id!, mockExam.id!, mockStudents).subscribe((res) => expect(res.body).to.eq(mockStudents));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students` });\n+        expect(req.request.body).to.eq(mockStudents);\n+\n+        // CLEAN\n+        req.flush(mockStudents);\n+    });\n+\n+    it('should remove student from exam with no participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=false`,\n+        });\n+\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should remove student from exam with participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should generate student exams', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam }];\n+\n+        // WHEN\n+        service.generateStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/generate-student-exams`,\n+        });\n+    });\n+\n+    it('should create test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam };\n+\n+        // WHEN\n+        service.createTestRun(course.id!, mockExam.id!, mockStudentExam).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/test-run`,\n+        });\n+    });\n+\n+    it('should delete test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam, id: 2 };\n+\n+        // WHEN\n+        service.deleteTestRun(course.id!, mockExam.id!, mockStudentExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-run/${mockStudentExam.id}`,\n+        });\n+    });\n+\n+    it('should find all test runs for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.findAllTestRunsForExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'GET',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-runs`,\n+        });\n+    });\n+\n+    it('should generate missing student for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.generateMissingStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/generate-missing-student-exams`,\n+        });\n+    });\n+\n+    it('should start exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.startExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockStudentExams.length));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/start-exercises`,\n+        });\n+    });\n+\n+    it('should evaluate quiz exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockEvaluatedExercises = 1;\n+\n+        // WHEN\n+        service.evaluateQuizExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockEvaluatedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/evaluate-quiz-exercises`,\n+        });\n+    });\n+\n+    it('should assess unsubmitted exam modelling and text participations', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockUnsubmittedExercises = 1;\n+\n+        // WHEN\n+        service.assessUnsubmittedExamModelingAndTextParticipations(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockUnsubmittedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/assess-unsubmitted-and-empty-student-exams`,\n+        });\n+    });\n+\n+    it('should unlock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.unlockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/unlock-all-repositories`,\n+        });\n+    });\n+\n+    it('should lock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.lockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/lock-all-repositories`,\n+        });\n+    });\n+\n+    it('should update order', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExerciseGroups: ExerciseGroup[] = [{ exam: mockExam, id: 1 }];\n+\n+        // WHEN\n+        service.updateOrder(course.id!, mockExam.id!, mockExerciseGroups).subscribe((res) => expect(res.body).to.equal(mockExerciseGroups));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'PUT',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/exerciseGroupsOrder`,\n+        });\n+    });\n+});\n+\n+function mockConvertDateFromClient(exam: Exam): Exam {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ=="}, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwODkyNg==", "bodyText": "Afaik we can't test private functions, but would have to make it publicly accessible.", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r550908926", "createdAt": "2021-01-02T18:43:14Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "diffHunk": "@@ -0,0 +1,405 @@\n+import { TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Course } from 'app/entities/course.model';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { Exam } from 'app/entities/exam.model';\n+import * as chai from 'chai';\n+import * as moment from 'moment';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n+import { StudentDTO } from 'app/entities/student-dto.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\n+\n+const expect = chai.expect;\n+describe('Exam Management Service Tests', () => {\n+    let service: ExamManagementService;\n+    let httpMock: HttpTestingController;\n+\n+    const course = { id: 456 } as Course;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            providers: [ExamManagementService],\n+            imports: [ArtemisTestModule, HttpClientTestingModule],\n+        });\n+\n+        service = TestBed.inject(ExamManagementService);\n+        httpMock = TestBed.inject(HttpTestingController);\n+    });\n+\n+    afterEach(() => {\n+        httpMock.verify();\n+    });\n+\n+    it('should create an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.create(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should update an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.update(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'PUT', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find an exam with no students and no exercise groups', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.find(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}?withStudents=false&withExerciseGroups=false` });\n+        expect(req.request.url).to.equal(`${service.resourceUrl}/${course.id!}/exams/${mockExam.id}`);\n+        expect(req.request.params.get('withStudents')).to.be.false;\n+        expect(req.request.params.get('withExerciseGroups')).to.be.false;\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should get exam scores', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExamScore: ExamScoreDTO = { examId: mockExam.id!, title: '', averagePointsAchieved: 1, exerciseGroups: [], maxPoints: 1, studentResults: [] };\n+\n+        // WHEN\n+        service.getExamScores(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExamScore));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/scores` });\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find all exams for course', () => {\n+        // WHEN\n+        service.findAllExamsForCourse(course.id!).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams` });\n+    });\n+\n+    it('should find all current and upcoming exams', () => {\n+        // WHEN\n+        service.findAllCurrentAndUpcomingExams().subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/upcoming-exams` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=false', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, false).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-dashboard` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=true', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, true).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-test-run-dashboard` });\n+    });\n+\n+    it('should get latest individual end date of exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockResponse: ExamInformationDTO = { latestIndividualEndDate: moment() };\n+\n+        // WHEN\n+        service.getLatestIndividualEndDateOfExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockResponse));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/latest-end-date` });\n+    });\n+\n+    it('should delete an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.delete(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'DELETE', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}` });\n+    });\n+\n+    it('should add student to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.addStudentToExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}` });\n+    });\n+\n+    it('should add students to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudents: StudentDTO[] = [\n+            { firstName: 'firstName1', lastName: 'lastName1', registrationNumber: '1' },\n+            { firstName: 'firstName2', lastName: 'lastName2', registrationNumber: '2' },\n+        ];\n+\n+        // WHEN\n+        service.addStudentsToExam(course.id!, mockExam.id!, mockStudents).subscribe((res) => expect(res.body).to.eq(mockStudents));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students` });\n+        expect(req.request.body).to.eq(mockStudents);\n+\n+        // CLEAN\n+        req.flush(mockStudents);\n+    });\n+\n+    it('should remove student from exam with no participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=false`,\n+        });\n+\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should remove student from exam with participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should generate student exams', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam }];\n+\n+        // WHEN\n+        service.generateStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/generate-student-exams`,\n+        });\n+    });\n+\n+    it('should create test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam };\n+\n+        // WHEN\n+        service.createTestRun(course.id!, mockExam.id!, mockStudentExam).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/test-run`,\n+        });\n+    });\n+\n+    it('should delete test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam, id: 2 };\n+\n+        // WHEN\n+        service.deleteTestRun(course.id!, mockExam.id!, mockStudentExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-run/${mockStudentExam.id}`,\n+        });\n+    });\n+\n+    it('should find all test runs for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.findAllTestRunsForExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'GET',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-runs`,\n+        });\n+    });\n+\n+    it('should generate missing student for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.generateMissingStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/generate-missing-student-exams`,\n+        });\n+    });\n+\n+    it('should start exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.startExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockStudentExams.length));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/start-exercises`,\n+        });\n+    });\n+\n+    it('should evaluate quiz exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockEvaluatedExercises = 1;\n+\n+        // WHEN\n+        service.evaluateQuizExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockEvaluatedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/evaluate-quiz-exercises`,\n+        });\n+    });\n+\n+    it('should assess unsubmitted exam modelling and text participations', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockUnsubmittedExercises = 1;\n+\n+        // WHEN\n+        service.assessUnsubmittedExamModelingAndTextParticipations(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockUnsubmittedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/assess-unsubmitted-and-empty-student-exams`,\n+        });\n+    });\n+\n+    it('should unlock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.unlockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/unlock-all-repositories`,\n+        });\n+    });\n+\n+    it('should lock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.lockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/lock-all-repositories`,\n+        });\n+    });\n+\n+    it('should update order', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExerciseGroups: ExerciseGroup[] = [{ exam: mockExam, id: 1 }];\n+\n+        // WHEN\n+        service.updateOrder(course.id!, mockExam.id!, mockExerciseGroups).subscribe((res) => expect(res.body).to.equal(mockExerciseGroups));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'PUT',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/exerciseGroupsOrder`,\n+        });\n+    });\n+});\n+\n+function mockConvertDateFromClient(exam: Exam): Exam {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ=="}, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5ODUwNA==", "bodyText": "Its not private in other services as far as I can see. Just remove the private and use the real function here imo", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r551198504", "createdAt": "2021-01-04T09:23:45Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "diffHunk": "@@ -0,0 +1,405 @@\n+import { TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Course } from 'app/entities/course.model';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { Exam } from 'app/entities/exam.model';\n+import * as chai from 'chai';\n+import * as moment from 'moment';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n+import { StudentDTO } from 'app/entities/student-dto.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\n+\n+const expect = chai.expect;\n+describe('Exam Management Service Tests', () => {\n+    let service: ExamManagementService;\n+    let httpMock: HttpTestingController;\n+\n+    const course = { id: 456 } as Course;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            providers: [ExamManagementService],\n+            imports: [ArtemisTestModule, HttpClientTestingModule],\n+        });\n+\n+        service = TestBed.inject(ExamManagementService);\n+        httpMock = TestBed.inject(HttpTestingController);\n+    });\n+\n+    afterEach(() => {\n+        httpMock.verify();\n+    });\n+\n+    it('should create an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.create(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should update an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.update(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'PUT', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find an exam with no students and no exercise groups', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.find(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}?withStudents=false&withExerciseGroups=false` });\n+        expect(req.request.url).to.equal(`${service.resourceUrl}/${course.id!}/exams/${mockExam.id}`);\n+        expect(req.request.params.get('withStudents')).to.be.false;\n+        expect(req.request.params.get('withExerciseGroups')).to.be.false;\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should get exam scores', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExamScore: ExamScoreDTO = { examId: mockExam.id!, title: '', averagePointsAchieved: 1, exerciseGroups: [], maxPoints: 1, studentResults: [] };\n+\n+        // WHEN\n+        service.getExamScores(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExamScore));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/scores` });\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find all exams for course', () => {\n+        // WHEN\n+        service.findAllExamsForCourse(course.id!).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams` });\n+    });\n+\n+    it('should find all current and upcoming exams', () => {\n+        // WHEN\n+        service.findAllCurrentAndUpcomingExams().subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/upcoming-exams` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=false', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, false).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-dashboard` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=true', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, true).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-test-run-dashboard` });\n+    });\n+\n+    it('should get latest individual end date of exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockResponse: ExamInformationDTO = { latestIndividualEndDate: moment() };\n+\n+        // WHEN\n+        service.getLatestIndividualEndDateOfExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockResponse));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/latest-end-date` });\n+    });\n+\n+    it('should delete an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.delete(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'DELETE', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}` });\n+    });\n+\n+    it('should add student to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.addStudentToExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}` });\n+    });\n+\n+    it('should add students to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudents: StudentDTO[] = [\n+            { firstName: 'firstName1', lastName: 'lastName1', registrationNumber: '1' },\n+            { firstName: 'firstName2', lastName: 'lastName2', registrationNumber: '2' },\n+        ];\n+\n+        // WHEN\n+        service.addStudentsToExam(course.id!, mockExam.id!, mockStudents).subscribe((res) => expect(res.body).to.eq(mockStudents));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students` });\n+        expect(req.request.body).to.eq(mockStudents);\n+\n+        // CLEAN\n+        req.flush(mockStudents);\n+    });\n+\n+    it('should remove student from exam with no participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=false`,\n+        });\n+\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should remove student from exam with participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should generate student exams', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam }];\n+\n+        // WHEN\n+        service.generateStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/generate-student-exams`,\n+        });\n+    });\n+\n+    it('should create test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam };\n+\n+        // WHEN\n+        service.createTestRun(course.id!, mockExam.id!, mockStudentExam).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/test-run`,\n+        });\n+    });\n+\n+    it('should delete test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam, id: 2 };\n+\n+        // WHEN\n+        service.deleteTestRun(course.id!, mockExam.id!, mockStudentExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-run/${mockStudentExam.id}`,\n+        });\n+    });\n+\n+    it('should find all test runs for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.findAllTestRunsForExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'GET',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-runs`,\n+        });\n+    });\n+\n+    it('should generate missing student for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.generateMissingStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/generate-missing-student-exams`,\n+        });\n+    });\n+\n+    it('should start exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.startExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockStudentExams.length));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/start-exercises`,\n+        });\n+    });\n+\n+    it('should evaluate quiz exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockEvaluatedExercises = 1;\n+\n+        // WHEN\n+        service.evaluateQuizExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockEvaluatedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/evaluate-quiz-exercises`,\n+        });\n+    });\n+\n+    it('should assess unsubmitted exam modelling and text participations', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockUnsubmittedExercises = 1;\n+\n+        // WHEN\n+        service.assessUnsubmittedExamModelingAndTextParticipations(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockUnsubmittedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/assess-unsubmitted-and-empty-student-exams`,\n+        });\n+    });\n+\n+    it('should unlock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.unlockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/unlock-all-repositories`,\n+        });\n+    });\n+\n+    it('should lock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.lockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/lock-all-repositories`,\n+        });\n+    });\n+\n+    it('should update order', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExerciseGroups: ExerciseGroup[] = [{ exam: mockExam, id: 1 }];\n+\n+        // WHEN\n+        service.updateOrder(course.id!, mockExam.id!, mockExerciseGroups).subscribe((res) => expect(res.body).to.equal(mockExerciseGroups));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'PUT',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/exerciseGroupsOrder`,\n+        });\n+    });\n+});\n+\n+function mockConvertDateFromClient(exam: Exam): Exam {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ=="}, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzcyODI2OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1NjoxOVrOIMNphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDozMDo1OVrOIMQkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NzQ0NA==", "bodyText": "I do not understand this test case? What do you mean by has information of other exams", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549677444", "createdAt": "2020-12-29T11:56:19Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {\n+        // GIVEN\n+        comp.examIdToExamInformation = new Map<number, ExamInformationDTO>();\n+\n+        // WHEN\n+        const examHasFinished = comp.examHasFinished(exam.id!);\n+\n+        // THEN\n+        expect(examHasFinished).to.be.true;\n+    });\n+\n+    it('Should return true for examHasFinished when component has information of other exams', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTMyNg==", "bodyText": "Ah what is meant is that I pass a non-empty comp.examIdToExamInformation to the function", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549725326", "createdAt": "2020-12-29T14:30:59Z", "author": {"login": "ivanchimeno"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {\n+        // GIVEN\n+        comp.examIdToExamInformation = new Map<number, ExamInformationDTO>();\n+\n+        // WHEN\n+        const examHasFinished = comp.examHasFinished(exam.id!);\n+\n+        // THEN\n+        expect(examHasFinished).to.be.true;\n+    });\n+\n+    it('Should return true for examHasFinished when component has information of other exams', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NzQ0NA=="}, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzczMDc5OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTo1NzozN1rOIMNq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxODo1NTozMlrOINY4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg==", "bodyText": "The tests are valid but I am questioning their usefulness somehow. This is a very simple method:\n    examHasFinished(examId: number): boolean {\n        if (this.examIdToExamInformation.has(examId)) {\n            return this.examIdToExamInformation.get(examId)!.latestIndividualEndDate.isBefore(moment());\n        }\n        return true;\n    }\n\nWriting that many test cases for it seems excessive. What do other reviewers say? @krusche", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549677792", "createdAt": "2020-12-29T11:57:37Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTUzNQ==", "bodyText": "Sadly I'm pretty new to testing so I don't know. The goal was to cover all branches in the function.", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549725535", "createdAt": "2020-12-29T14:31:38Z", "author": {"login": "ivanchimeno"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg=="}, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwOTk2NQ==", "bodyText": "I think the point was that usually a test covering the most common use case would be enough for a simple method. I don't think we should remove the tests now that we have them already.", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r550909965", "createdAt": "2021-01-02T18:55:32Z", "author": {"login": "FrankeLukas"}, "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg=="}, "originalCommit": {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4257, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}