{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NjEyNzQ2", "number": 2086, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0NTozMFrOEmgyWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNlrOEpqdew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODE4NTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0NTozMFrOHWlIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo0NTozMFrOHWlIjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzOTExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n          \n          \n            \n                            staticCodeAnalysisService.createDefaultCategories(newProgrammingExercise);\n          \n      \n    \n    \n  \n\nUse the correct exercise here.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r493439116", "createdAt": "2020-09-23T10:45:30Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -313,6 +348,10 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n         try {\n             // Setup all repositories etc\n             ProgrammingExercise newProgrammingExercise = programmingExerciseService.createProgrammingExercise(programmingExercise);\n+            // Create default static code analysis categories\n+            if (Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+                staticCodeAnalysisService.createDefaultCategories(programmingExercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859f54511de107317c0374ddbcabc2358c3018bf"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDU3NDIyOnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/staticCodeAnalysis/defaultConfigurationJava.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1Nzo0MFrOHW8q3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo1ODo1MVrOHXXAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNDczMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\n          \n          \n            \n                        \"name\": \"Naming & Formatting\",\n          \n          \n            \n                        \"state\": \"INACTIVE\",\n          \n          \n            \n                        \"penalty\": 0,\n          \n          \n            \n                        \"maxPenalty\": 0,\n          \n          \n            \n                        \"categoryMappings\": [\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"imports\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"indentation\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"naming\"\n          \n          \n            \n                            },\n          \n          \n            \n                            {\n          \n          \n            \n                                \"tool\": \"CHECKSTYLE\",\n          \n          \n            \n                                \"category\": \"whitespaces\"\n          \n          \n            \n                            }\n          \n          \n            \n                        ]\n          \n          \n            \n                    },\n          \n          \n            \n                    \n          \n      \n    \n    \n  \n\nThis is a duplicate", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r493824733", "createdAt": "2020-09-23T18:57:40Z", "author": {"login": "schultek"}, "path": "src/main/resources/templates/staticCodeAnalysis/defaultConfigurationJava.json", "diffHunk": "@@ -0,0 +1,225 @@\n+{\n+    \"defaultCategories\":\n+    [\n+        {\n+            \"name\": \"Bad Practice\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"BAD_PRACTICE\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Best-Practices\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Code Style\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.2,\n+            \"maxPenalty\": 2,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"STYLE\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"blocks\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"coding\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"modifier\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Code-Style\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Potential Bugs\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"CORRECTNESS\"\n+                },\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"MT_CORRECTNESS\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Error Prone\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Multithreading\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Security\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 2.5,\n+            \"maxPenalty\": 10,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"MALICIOUS_CODE\"\n+                },\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"SECURITY\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Security\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Performance\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 1,\n+            \"maxPenalty\": 2,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"PERFORMANCE\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Performance\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Design\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"design\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Design\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Code Metrics\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"metrics\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"sizes\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Documentation\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"I18N\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"javadoc\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"annotation\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Documentation\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Naming & Formatting\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"imports\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"indentation\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"naming\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"whitespaces\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Naming & Formatting\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"imports\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"indentation\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"naming\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"whitespaces\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NjE2NA==", "bodyText": "Good catch, removed the duplicate", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494256164", "createdAt": "2020-09-24T11:58:51Z", "author": {"login": "kloessst"}, "path": "src/main/resources/templates/staticCodeAnalysis/defaultConfigurationJava.json", "diffHunk": "@@ -0,0 +1,225 @@\n+{\n+    \"defaultCategories\":\n+    [\n+        {\n+            \"name\": \"Bad Practice\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"BAD_PRACTICE\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Best-Practices\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Code Style\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.2,\n+            \"maxPenalty\": 2,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"STYLE\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"blocks\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"coding\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"modifier\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Code-Style\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Potential Bugs\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 0.5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"CORRECTNESS\"\n+                },\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"MT_CORRECTNESS\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Error Prone\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Multithreading\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Security\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 2.5,\n+            \"maxPenalty\": 10,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"MALICIOUS_CODE\"\n+                },\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"SECURITY\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Security\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Performance\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 1,\n+            \"maxPenalty\": 2,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"PERFORMANCE\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Performance\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Design\",\n+            \"state\": \"VISIBLE\",\n+            \"penalty\": 5,\n+            \"maxPenalty\": 5,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"design\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Design\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Code Metrics\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"metrics\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"sizes\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Documentation\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"SPOTBUGS\",\n+                    \"category\": \"I18N\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"javadoc\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"annotation\"\n+                },\n+                {\n+                    \"tool\": \"PMD\",\n+                    \"category\": \"Documentation\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Naming & Formatting\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"imports\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"indentation\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"naming\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"whitespaces\"\n+                }\n+            ]\n+        },\n+        {\n+            \"name\": \"Naming & Formatting\",\n+            \"state\": \"INACTIVE\",\n+            \"penalty\": 0,\n+            \"maxPenalty\": 0,\n+            \"categoryMappings\": [\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"imports\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"indentation\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"naming\"\n+                },\n+                {\n+                    \"tool\": \"CHECKSTYLE\",\n+                    \"category\": \"whitespaces\"\n+                }\n+            ]\n+        },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNDczMw=="}, "originalCommit": {"oid": "4d72af6e212087d8ad7b83c0f8ea3be5acc27e8b"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzU5MzU3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/exercise.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo1MTo0MlrOHXZIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0NjozN1rOHXhSuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5MDk5Mg==", "bodyText": "You could add that the penalty is in percent (as in the german translation).", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494290992", "createdAt": "2020-09-24T12:51:42Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/i18n/en/exercise.json", "diffHunk": "@@ -140,6 +140,9 @@\n                 },\n                 \"maxScore\": {\n                     \"pattern\": \"The maximum score must be between 1 and 9999!\"\n+                },\n+                \"maxPenalty\": {\n+                    \"pattern\": \"The maximum penalty must be between 0 and 100!\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNDc2MQ==", "bodyText": "Added this to the string", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494424761", "createdAt": "2020-09-24T15:46:37Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/i18n/en/exercise.json", "diffHunk": "@@ -140,6 +140,9 @@\n                 },\n                 \"maxScore\": {\n                     \"pattern\": \"The maximum score must be between 1 and 9999!\"\n+                },\n+                \"maxPenalty\": {\n+                    \"pattern\": \"The maximum penalty must be between 0 and 100!\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5MDk5Mg=="}, "originalCommit": {"oid": "ebed138ae3bf043be047bd51f131ed3cbe085bed"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDUzNTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMDo0MVrOHXiUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjozNTo1OFrOHXjUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw==", "bodyText": "Maybe you can refactor this logic into a different method, it makes this method quite large and I guess it might be useful elsewhere.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494441653", "createdAt": "2020-09-24T16:10:41Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // Validate the category updates\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1ODAxNQ==", "bodyText": "Created a own method for the validation.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494458015", "createdAt": "2020-09-24T16:35:58Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // Validate the category updates\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\");\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\");\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\");\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTY1Mw=="}, "originalCommit": {"oid": "5c6477ed578473a2c849b827164a85d0f97ea628"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgyNTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODoxMFrOHYBOVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjowMzoxMlrOHYUxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA==", "bodyText": "Should TAs be allowed to update the categories or is this a task that only instructors should perform?", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494947924", "createdAt": "2020-09-25T12:18:10Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2ODI3MQ==", "bodyText": "At the moment test cases can be changed also by TA. As the categories will be changed in the same view, I've chosen to use the same settings.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r495268271", "createdAt": "2020-09-25T22:03:12Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NzkyNA=="}, "originalCommit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Nzg2MTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoyODoyOVrOHYBjWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxMTo1M1rOHYVFrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg==", "bodyText": "Just to make sure: The @Transactional annotation ensures that the imported SCA categories get saved into the DB although programmingExerciseRepository.save(newExercise); is only called before setting the categories, right?", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r494953306", "createdAt": "2020-09-25T12:28:29Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java", "diffHunk": "@@ -89,10 +94,13 @@ public ProgrammingExercise importProgrammingExerciseBasis(final ProgrammingExerc\n         setupTestRepository(newExercise, projectKey);\n         programmingExerciseService.initParticipations(newExercise);\n \n-        // Hints and test cases\n+        // Hints, test cases and static code analysis categories\n         exerciseHintService.copyExerciseHints(templateExercise, newExercise);\n         programmingExerciseRepository.save(newExercise);\n         importTestCases(templateExercise, newExercise);\n+        if (Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+            importStaticCodeAnalysisCategories(templateExercise, newExercise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3MzM5MQ==", "bodyText": "I honestly don't know why we use a Transactional here. From a DB perspective, the table storing the programming exercise doesn't have information about the categories. The reference (exercise_id) resides in the category table as usual in a 1:n relationship. The importStaticCodeAnalysisCategories uses newExercise which already contains the exercise_id after programmingExerciseRepository.save(newExercise) was called to create new categories with the right relation.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r495273391", "createdAt": "2020-09-25T22:11:53Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseImportService.java", "diffHunk": "@@ -89,10 +94,13 @@ public ProgrammingExercise importProgrammingExerciseBasis(final ProgrammingExerc\n         setupTestRepository(newExercise, projectKey);\n         programmingExerciseService.initParticipations(newExercise);\n \n-        // Hints and test cases\n+        // Hints, test cases and static code analysis categories\n         exerciseHintService.copyExerciseHints(templateExercise, newExercise);\n         programmingExerciseRepository.save(newExercise);\n         importTestCases(templateExercise, newExercise);\n+        if (Boolean.TRUE.equals(templateExercise.isStaticCodeAnalysisEnabled())) {\n+            importStaticCodeAnalysisCategories(templateExercise, newExercise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1MzMwNg=="}, "originalCommit": {"oid": "c83e59f4145dea33ff66d559f72e08c11b9cf828"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTAwMDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTowNTozMlrOHZn5dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTowNTozMlrOHZn5dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMDEzNQ==", "bodyText": "move everything into the try block and catch the generic Exception so that this code can never break the application start", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r496630135", "createdAt": "2020-09-29T11:05:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.ResourcePatternUtils;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisConfiguration;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+\n+/**\n+ * Reads static code analysis configurations from json files at application start-up and provides a Bean with\n+ * programming language specific default categories.\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private final ResourceLoader resourceLoader;\n+\n+    private final Map<ProgrammingLanguage, StaticCodeAnalysisConfiguration> languageToConfiguration = new HashMap<>();\n+\n+    public StaticCodeAnalysisConfigurer(ResourceLoader resourceLoader) {\n+        this.resourceLoader = resourceLoader;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String configurationsPath = \"classpath:templates/staticCodeAnalysis/*.*\";\n+        Resource[] jsonConfigurations;\n+\n+        try {\n+            jsonConfigurations = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(configurationsPath);\n+        }\n+        catch (IOException e) {\n+            log.debug(\"Could not load static code analysis configuration resources: \" + e.getMessage());\n+            return;\n+        }\n+\n+        for (var jsonConfiguration : jsonConfigurations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0655281d8f94c348d618c7aeefc8fa833c2bf929"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MFrOHbeNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MFrOHbeNNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwMw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importExercise_created' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568503", "createdAt": "2020-10-02T00:06:50Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -146,6 +184,51 @@ public void createProgrammingExerciseForExam_validExercise_created() throws Exce\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importExercise_created() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MlrOHbeNPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1MlrOHbeNPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUwOQ==", "bodyText": "Codacy found an issue: The utility class name 'Endpoints' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568509", "createdAt": "2020-10-02T00:06:52Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StaticCodeAnalysisResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PatchMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+\n+/**\n+ * REST controller for managing static code analysis.\n+ * Static code analysis categories are created automatically when the programming exercise with static code analysis is\n+ * created, therefore a POST mapping is missing. A DELETE mapping is also not necessary as those categories can only be\n+ * deactivated but not deleted.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class StaticCodeAnalysisResource {\n+\n+    private static final String ENTITY_NAME = \"StaticCodeAnalysisCategory\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ProgrammingExerciseService programmingExerciseService;\n+\n+    private final StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    public StaticCodeAnalysisResource(AuthorizationCheckService authCheckService, ProgrammingExerciseService programmingExerciseService,\n+            StaticCodeAnalysisService staticCodeAnalysisService) {\n+        this.authCheckService = authCheckService;\n+        this.programmingExerciseService = programmingExerciseService;\n+        this.staticCodeAnalysisService = staticCodeAnalysisService;\n+    }\n+\n+    /**\n+     * Get the static code analysis categories for a given exercise id.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @return the static code analysis categories\n+     */\n+    @GetMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> getStaticCodeAnalysisCategories(@PathVariable Long exerciseId) {\n+        log.debug(\"REST request to get static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.findByExerciseId(exerciseId);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Updates the static code analysis categories of a given programming exercise using the data in the request body.\n+     *\n+     * @param exerciseId of the the exercise\n+     * @param categories used for the update\n+     * @return the updated static code analysis categories\n+     */\n+    @PatchMapping(Endpoints.CATEGORIES)\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<StaticCodeAnalysisCategory>> updateStaticCodeAnalysisCategories(@PathVariable Long exerciseId,\n+            @RequestBody Set<StaticCodeAnalysisCategory> categories) {\n+        log.debug(\"REST request to update static code analysis categories for programming exercise {}\", exerciseId);\n+\n+        ProgrammingExercise programmingExercise = programmingExerciseService.findById(exerciseId);\n+\n+        if (!Boolean.TRUE.equals(programmingExercise.isStaticCodeAnalysisEnabled())) {\n+            return badRequest();\n+        }\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(programmingExercise)) {\n+            return forbidden();\n+        }\n+\n+        var optionalError = validateCategories(categories, exerciseId);\n+        if (optionalError.isPresent()) {\n+            return optionalError.get();\n+        }\n+\n+        Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories = staticCodeAnalysisService.updateCategories(exerciseId, categories);\n+        return ResponseEntity.ok(staticCodeAnalysisCategories);\n+    }\n+\n+    /**\n+     * Validates static code analysis categories\n+     *\n+     * @param categories to be validated\n+     * @param exerciseId path variable\n+     * @return empty optional if no error was found otherwise optional with an error response\n+     */\n+    private Optional<ResponseEntity<Set<StaticCodeAnalysisCategory>>> validateCategories(Set<StaticCodeAnalysisCategory> categories, Long exerciseId) {\n+        for (var category : categories) {\n+            // Each categories must have an id\n+            if (category.getId() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME, \"scaCategoryIdError\", \"Static code analysis category id is missing.\"));\n+            }\n+\n+            // Penalty must not be null or negative\n+            if (category.getPenalty() == null || category.getPenalty() < 0) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryPenaltyError\",\n+                        \"Penalty for static code analysis category \" + category.getId() + \" must be a non-negative integer.\"));\n+            }\n+\n+            // MaxPenalty must not be smaller than penalty\n+            if (category.getMaxPenalty() != null && category.getPenalty() > category.getMaxPenalty()) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryMaxPenaltyError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Category state must not be null\n+            if (category.getState() == null) {\n+                return Optional.of(badRequest(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryStateError\",\n+                        \"Max Penalty for static code analysis category \" + category.getId() + \" must not be smaller than the penalty.\"));\n+            }\n+\n+            // Exercise id of the request path must match the exerciseId in the request body if present\n+            if (category.getExercise() != null && !Objects.equals(category.getExercise().getId(), exerciseId)) {\n+                return Optional.of(conflict(ENTITY_NAME + \" \" + category.getId(), \"scaCategoryExerciseIdError\",\n+                        \"Exercise id path variable does not match exercise id of static code analysis category \" + category.getId()));\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static final class Endpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1M1rOHbeNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1M1rOHbeNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568514", "createdAt": "2020-10-02T00:06:53Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -126,7 +118,8 @@ public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_testsAndHintsHoldTheSameInformation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NFrOHbeNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NFrOHbeNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUxNQ==", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'init()'.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568515", "createdAt": "2020-10-02T00:06:54Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {\n+    }\n+\n+    @PostConstruct\n+    private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NVrOHbeNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NVrOHbeNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyMg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568522", "createdAt": "2020-10-02T00:06:55Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var category = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next();\n+        category.setMaxPenalty(3D);\n+        category.setPenalty(5D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_stateIsNull_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setState(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_exerciseIdsDoNotMatch_conflict() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NlrOHbeNTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1NlrOHbeNTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568527", "createdAt": "2020-10-02T00:06:56Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -683,6 +684,16 @@ private static StaticCodeAnalysisReportDTO generateStaticCodeAnalysisReport(Stat\n         return issue;\n     }\n \n+    public static StaticCodeAnalysisCategory generateStaticCodeAnalysisCategory(ProgrammingExercise programmingExercise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1N1rOHbeNUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1N1rOHbeNUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUyOQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_hintsGotReplacedInStatement' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568529", "createdAt": "2020-10-02T00:06:57Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -111,10 +99,14 @@ public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws Malf\n         final var newHintIDs = newlyImported.getExerciseHints().stream().map(ExerciseHint::getId).collect(Collectors.toSet());\n         assertThat(newlyImported.getExerciseHints().size()).isEqualTo(programmingExercise.getExerciseHints().size());\n         assertThat(programmingExercise.getExerciseHints()).noneMatch(hint -> newHintIDs.contains(hint.getId()));\n+        final var newStaticCodeAnalysisCategoriesIDs = newlyImported.getStaticCodeAnalysisCategories().stream().map(StaticCodeAnalysisCategory::getId).collect(Collectors.toSet());\n+        assertThat(newlyImported.getStaticCodeAnalysisCategories().size()).isEqualTo(programmingExercise.getStaticCodeAnalysisCategories().size());\n+        assertThat(programmingExercise.getStaticCodeAnalysisCategories()).noneMatch(category -> newStaticCodeAnalysisCategoriesIDs.contains(category.getId()));\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_hintsGotReplacedInStatement() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1OFrOHbeNVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNjo1OFrOHbeNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODUzNA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_withStaticCodeAnalysis' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568534", "createdAt": "2020-10-02T00:06:58Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {\n+        exercise.setBonusPoints(null);\n+        mockConnectorRequestsForSetup(exercise);\n+        var generatedExercise = request.postWithResponseBody(ROOT + SETUP, exercise, ProgrammingExercise.class);\n+        var savedExercise = programmingExerciseRepository.findById(generatedExercise.getId()).get();\n+        assertThat(generatedExercise.getBonusPoints()).isEqualTo(0D);\n+        assertThat(savedExercise.getBonusPoints()).isEqualTo(0D);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_withStaticCodeAnalysis() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjg2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMFrOHbeNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMFrOHbeNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0MQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568541", "createdAt": "2020-10-02T00:07:00Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjkxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMVrOHbeNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMVrOHbeNZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU0OQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568549", "createdAt": "2020-10-02T00:07:01Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjk2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMlrOHbeNbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowMlrOHbeNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU1Nw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568557", "createdAt": "2020-10-02T00:07:02Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseIntegrationTest.java", "diffHunk": "@@ -409,13 +419,26 @@ public void updateProgrammingExercise_eitherCourseOrExerciseGroupSet_badRequest(\n         request.put(ROOT + PROGRAMMING_EXERCISES, programmingExerciseInExam, HttpStatus.BAD_REQUEST);\n     }\n \n+    private void mockBuildPlanAndRepositoryCheck(ProgrammingExercise programmingExercise) throws Exception {\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getTemplateBuildPlanId(), true);\n+        bambooRequestMockProvider.mockBuildPlanIsValid(programmingExercise.getSolutionBuildPlanId(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getTemplateRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+        bitbucketRequestMockProvider.mockRepositoryUrlIsValid(programmingExercise.getSolutionRepositoryUrlAsUrl(), programmingExercise.getProjectKey(), true);\n+    }\n+\n     @Test\n     @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_badRequest() throws Exception {\n-        // false -> true\n+    public void updateProgrammingExercise_staticCodeAnalysisMustNotChange_falseToTrue_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowM1rOHbeNcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowM1rOHbeNcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568560", "createdAt": "2020-10-02T00:07:03Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNjk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNFrOHbeNcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNFrOHbeNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2MQ==", "bodyText": "Codacy found an issue: The field name 'ARTEMIS_SERVER_URL' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568561", "createdAt": "2020-10-02T00:07:04Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationBambooBitbucketJiraTest.java", "diffHunk": "@@ -47,6 +52,9 @@\n @ActiveProfiles({ \"artemis\", \"bamboo\", \"bitbucket\", \"jira\", \"automaticText\", \"ldap\", \"scheduling\", \"athene\" })\n public abstract class AbstractSpringIntegrationBambooBitbucketJiraTest {\n \n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNVrOHbeNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNVrOHbeNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU2Nw==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568567", "createdAt": "2020-10-02T00:07:05Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNlrOHbeNfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowNlrOHbeNfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU3NA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'createProgrammingExercise_validExercise_bonusPointsIsNull' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568574", "createdAt": "2020-10-02T00:07:06Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseBitbucketBambooIntegrationTest.java", "diffHunk": "@@ -133,6 +146,31 @@ public void createProgrammingExercise_validExercise_created(ExerciseMode mode) t\n         assertThat(programmingExerciseRepository.count()).isEqualTo(1);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createProgrammingExercise_validExercise_bonusPointsIsNull() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzExOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowN1rOHbeNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowN1rOHbeNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4MA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568580", "createdAt": "2020-10-02T00:07:07Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOFrOHbeNig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOFrOHbeNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4Ng==", "bodyText": "Codacy found an issue: Avoid unnecessary constructors - the compiler will generate these for you", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568586", "createdAt": "2020-10-02T00:07:08Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOVrOHbeNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzowOVrOHbeNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU4OQ==", "bodyText": "Codacy found an issue: Document empty constructor", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568589", "createdAt": "2020-10-02T00:07:09Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/config/StaticCodeAnalysisConfigurer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisDefaultCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.domain.enumeration.StaticCodeAnalysisTool;\n+\n+/**\n+ * Provides hard-coded programming language specific static code analysis default categories as an unmodifiable Map\n+ */\n+@Configuration\n+public class StaticCodeAnalysisConfigurer {\n+\n+    private final Logger log = LoggerFactory.getLogger(StaticCodeAnalysisConfigurer.class);\n+\n+    private Map<ProgrammingLanguage, List<StaticCodeAnalysisDefaultCategory>> languageToDefaultCategories;\n+\n+    public StaticCodeAnalysisConfigurer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMFrOHbeNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMFrOHbeNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Mg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testCreateDefaultCategories_noConfigurationAvailable' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568592", "createdAt": "2020-10-02T00:07:10Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMVrOHbeNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMVrOHbeNlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODU5Ng==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'importProgrammingExerciseBasis_baseReferencesGotCloned' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568596", "createdAt": "2020-10-02T00:07:11Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/ProgrammingExerciseServiceIntegrationTest.java", "diffHunk": "@@ -64,25 +50,27 @@\n     public void setUp() {\n         bambooRequestMockProvider.enableMockingOfRequests();\n         bitbucketRequestMockProvider.enableMockingOfRequests();\n-        databse.addUsers(1, 1, 1);\n-        databse.addInstructor(\"other-instructors\", \"instructorother\");\n-        databse.addCourseWithOneProgrammingExerciseAndTestCases();\n-        additionalEmptyCourse = databse.addEmptyCourse();\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n-        databse.addHintsToExercise(programmingExercise);\n-        databse.addHintsToProblemStatement(programmingExercise);\n+        database.addUsers(1, 1, 1);\n+        database.addInstructor(\"other-instructors\", \"instructorother\");\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        additionalEmptyCourse = database.addEmptyCourse();\n+        programmingExercise = programmingExerciseRepository.findAll().get(0);\n+        database.addHintsToExercise(programmingExercise);\n+        database.addHintsToProblemStatement(programmingExercise);\n+        database.addStaticCodeAnalysisCategoriesToProgrammingExercise(programmingExercise);\n \n         // Load again to fetch changes to statement and hints while keeping eager refs\n-        programmingExercise = databse.loadProgrammingExerciseWithEagerReferences();\n+        programmingExercise = database.loadProgrammingExerciseWithEagerReferences(programmingExercise);\n     }\n \n     @AfterEach\n     public void tearDown() {\n-        databse.resetDatabase();\n+        database.resetDatabase();\n     }\n \n     @Test\n-    public void importProgrammingExerciseBasis_baseReferencesGotCloned() throws MalformedURLException {\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void importProgrammingExerciseBasis_baseReferencesGotCloned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMlrOHbeNmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxMlrOHbeNmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYwMA==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_asStudent_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568600", "createdAt": "2020-10-02T00:07:12Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxM1rOHbeNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxM1rOHbeNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxMQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568611", "createdAt": "2020-10-02T00:07:13Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNFrOHbeNqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNFrOHbeNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYxOQ==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568619", "createdAt": "2020-10-02T00:07:14Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_categoryIdMissing_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setId(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_penaltyNullOrNegative_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(null);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator().next().setPenalty(-1D);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories_maxPenaltySmallerThanPenalty_badRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNVrOHbeNrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNVrOHbeNrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyMg==", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568622", "createdAt": "2020-10-02T00:07:15Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/programmingexercise/StaticCodeAnalysisIntegrationTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package de.tum.in.www1.artemis.programmingexercise;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.ProgrammingExercise;\n+import de.tum.in.www1.artemis.domain.StaticCodeAnalysisCategory;\n+import de.tum.in.www1.artemis.domain.enumeration.CategoryState;\n+import de.tum.in.www1.artemis.domain.enumeration.ProgrammingLanguage;\n+import de.tum.in.www1.artemis.repository.ProgrammingExerciseRepository;\n+import de.tum.in.www1.artemis.repository.StaticCodeAnalysisCategoryRepository;\n+import de.tum.in.www1.artemis.service.StaticCodeAnalysisService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+import de.tum.in.www1.artemis.web.rest.StaticCodeAnalysisResource;\n+\n+class StaticCodeAnalysisIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    private StaticCodeAnalysisService staticCodeAnalysisService;\n+\n+    @Autowired\n+    private ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    private StaticCodeAnalysisCategoryRepository staticCodeAnalysisCategoryRepository;\n+\n+    private ProgrammingExercise programmingExerciseSCAEnabled;\n+\n+    private ProgrammingExercise programmingExercise;\n+\n+    @BeforeEach\n+    void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+        programmingExerciseSCAEnabled = database.addCourseWithOneProgrammingExerciseAndStaticCodeAnalysisCategories();\n+        var tempProgrammingEx = ModelFactory.generateProgrammingExercise(ZonedDateTime.now(), ZonedDateTime.now().plusDays(1),\n+                programmingExerciseSCAEnabled.getCourseViaExerciseGroupOrCourseMember());\n+        programmingExercise = programmingExerciseRepository.save(tempProgrammingEx);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    private String parameterizeEndpoint(String endpoint, ProgrammingExercise exercise) {\n+        return endpoint.replace(\"{exerciseId}\", String.valueOf(exercise.getId()));\n+    }\n+\n+    @Test\n+    void testCreateDefaultCategories_noConfigurationAvailable() {\n+        // Haskell does not have a default configuration at the time of creation of this test\n+        programmingExercise.setProgrammingLanguage(ProgrammingLanguage.HASKELL);\n+        staticCodeAnalysisService.createDefaultCategories(programmingExercise);\n+        var categories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExercise.getId());\n+        assertThat(categories).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        var categories = request.get(endpoint, HttpStatus.OK, new TypeReference<Set<StaticCodeAnalysisCategory>>() {\n+        });\n+        assertThat(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories()).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(categories);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testGetStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testGetStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        database.addTeachingAssistant(\"other-tas\", \"other-ta\");\n+        request.getList(endpoint, HttpStatus.FORBIDDEN, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testGetStaticCodeAnalysisCategories_staticCodeAnalysisNotEnabled_badRequest() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExercise);\n+        request.getList(endpoint, HttpStatus.BAD_REQUEST, StaticCodeAnalysisCategory.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    void testUpdateStaticCodeAnalysisCategories() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        // Change the first category\n+        var categoryIterator = programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().iterator();\n+        var firstCategory = categoryIterator.next();\n+        firstCategory.setState(CategoryState.GRADED);\n+        firstCategory.setPenalty(33D);\n+        firstCategory.setMaxPenalty(44D);\n+        // Remove the second category\n+        var removedCategory = categoryIterator.next();\n+        categoryIterator.remove();\n+\n+        var responseCategories = request.patchWithResponseBody(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(),\n+                new TypeReference<List<StaticCodeAnalysisCategory>>() {\n+                }, HttpStatus.OK);\n+        var savedCategories = staticCodeAnalysisCategoryRepository.findByExerciseId(programmingExerciseSCAEnabled.getId());\n+\n+        // The removed category should not be deleted\n+        programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories().add(removedCategory);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(savedCategories);\n+        assertThat(responseCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+        assertThat(savedCategories).usingRecursiveFieldByFieldElementComparator().usingElementComparatorIgnoringFields(\"exercise\")\n+                .containsExactlyInAnyOrderElementsOf(programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"STUDENT\")\n+    void testUpdateStaticCodeAnalysisCategories_asStudent_forbidden() throws Exception {\n+        var endpoint = parameterizeEndpoint(\"/api\" + StaticCodeAnalysisResource.Endpoints.CATEGORIES, programmingExerciseSCAEnabled);\n+        request.patch(endpoint, programmingExerciseSCAEnabled.getStaticCodeAnalysisCategories(), HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"other-ta1\", roles = \"TA\")\n+    void testUpdateStaticCodeAnalysisCategories_notAtLeastTAInCourse_forbidden() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTIyNzQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNlrOHbeNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDowNzoxNlrOHbeNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2ODYyNw==", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "url": "https://github.com/ls1intum/Artemis/pull/2086#discussion_r498568627", "createdAt": "2020-10-02T00:07:16Z", "author": {"login": "artemis-bot"}, "path": "src/test/java/de/tum/in/www1/artemis/util/RequestUtilService.java", "diffHunk": "@@ -239,6 +239,16 @@ public File postWithResponseBodyFile(String path, Object body, HttpStatus expect\n         return mapper.readValue(stringResponse, responseType);\n     }\n \n+    public void patch(String path, Object body, HttpStatus expectedStatus) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5ccab8c3977ae4e6af817ed9dceb23158299c8a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4677, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}