{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTAwMDI0", "number": 2480, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo0NFrOE-3iMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo0NFrOE-3iMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzU3MDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo0NFrOH8QcIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0OToyM1rOH87ATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NTk1NQ==", "bodyText": "what happens in the following scenario (which happens rather often)?\n\nAn instructor works in the online code editor in the source template repository, commits&pushes changes.\nThe instructor also works offline in his IDE and commits&pushes changes\nThere is a merge conflict in the template repository on the Artemis server\nSometimes later, the instructor imports the exercise.\n\nI would assume that getOrCheckoutRepository(...) will reuse the existing repository (which is in a conflict state), and will try to pull the latest changes, which will fail. Then the whole import would fail.\nI think we should avoid this issue. I see the following easy fix: Instead of reusing the existing repository with getOrCheckoutRepository(url, boolean), we should rather clone the repository from Bitbucket again into a new folder (this is e.g. also done when we export git repos) using the method getOrCheckoutRepository(URL repoUrl, boolean pullOnGet, String targetPath). The targetPath could e.g. be REPO_CLONE_PATH", "url": "https://github.com/ls1intum/Artemis/pull/2480#discussion_r532945955", "createdAt": "2020-11-30T22:30:44Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -265,6 +270,29 @@ public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRep\n         throw new BitbucketException(\"Max retries for forking reached. Could not fork repository \" + sourceRepositoryName + \" to \" + targetRepositoryName);\n     }\n \n+    @Override\n+    public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRepositoryName, String targetProjectKey, String targetRepositoryName) {\n+        final var targetRepoSlug = targetProjectKey.toLowerCase() + \"-\" + targetRepositoryName.toLowerCase();\n+        try {\n+            var sourceRepoUrl = getCloneRepositoryUrl(sourceProjectKey, sourceRepositoryName.toLowerCase());\n+            URL sourceRepositoryUrlAsUrl = new URL(sourceRepoUrl.toString());\n+            // checkout the source repo\n+            Repository sourceRepo = gitService.getOrCheckoutRepository(sourceRepositoryUrlAsUrl, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5487a156bb3d5c1b1529fb4e845017e07299f3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NjUzMA==", "bodyText": "In this case, we should also delete the newly cloned repository after it has been copied successfully.", "url": "https://github.com/ls1intum/Artemis/pull/2480#discussion_r532946530", "createdAt": "2020-11-30T22:32:02Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -265,6 +270,29 @@ public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRep\n         throw new BitbucketException(\"Max retries for forking reached. Could not fork repository \" + sourceRepositoryName + \" to \" + targetRepositoryName);\n     }\n \n+    @Override\n+    public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRepositoryName, String targetProjectKey, String targetRepositoryName) {\n+        final var targetRepoSlug = targetProjectKey.toLowerCase() + \"-\" + targetRepositoryName.toLowerCase();\n+        try {\n+            var sourceRepoUrl = getCloneRepositoryUrl(sourceProjectKey, sourceRepositoryName.toLowerCase());\n+            URL sourceRepositoryUrlAsUrl = new URL(sourceRepoUrl.toString());\n+            // checkout the source repo\n+            Repository sourceRepo = gitService.getOrCheckoutRepository(sourceRepositoryUrlAsUrl, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NTk1NQ=="}, "originalCommit": {"oid": "5e5487a156bb3d5c1b1529fb4e845017e07299f3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzNzkxNg==", "bodyText": "But won't the repository directly from Bitbucket be also in a conflict state unless the merge conflict was fixed?\nAnd in case the merge conflict was solved, is the repo on Artemis still broken? This would mean that (independent from importing) the source template repo on Artemis would not work, right?", "url": "https://github.com/ls1intum/Artemis/pull/2480#discussion_r533137916", "createdAt": "2020-12-01T08:02:47Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -265,6 +270,29 @@ public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRep\n         throw new BitbucketException(\"Max retries for forking reached. Could not fork repository \" + sourceRepositoryName + \" to \" + targetRepositoryName);\n     }\n \n+    @Override\n+    public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRepositoryName, String targetProjectKey, String targetRepositoryName) {\n+        final var targetRepoSlug = targetProjectKey.toLowerCase() + \"-\" + targetRepositoryName.toLowerCase();\n+        try {\n+            var sourceRepoUrl = getCloneRepositoryUrl(sourceProjectKey, sourceRepositoryName.toLowerCase());\n+            URL sourceRepositoryUrlAsUrl = new URL(sourceRepoUrl.toString());\n+            // checkout the source repo\n+            Repository sourceRepo = gitService.getOrCheckoutRepository(sourceRepositoryUrlAsUrl, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NTk1NQ=="}, "originalCommit": {"oid": "5e5487a156bb3d5c1b1529fb4e845017e07299f3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MzM0Mw==", "bodyText": "resolved in the latest commit", "url": "https://github.com/ls1intum/Artemis/pull/2480#discussion_r533643343", "createdAt": "2020-12-01T18:49:23Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketService.java", "diffHunk": "@@ -265,6 +270,29 @@ public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRep\n         throw new BitbucketException(\"Max retries for forking reached. Could not fork repository \" + sourceRepositoryName + \" to \" + targetRepositoryName);\n     }\n \n+    @Override\n+    public VcsRepositoryUrl copyRepository(String sourceProjectKey, String sourceRepositoryName, String targetProjectKey, String targetRepositoryName) {\n+        final var targetRepoSlug = targetProjectKey.toLowerCase() + \"-\" + targetRepositoryName.toLowerCase();\n+        try {\n+            var sourceRepoUrl = getCloneRepositoryUrl(sourceProjectKey, sourceRepositoryName.toLowerCase());\n+            URL sourceRepositoryUrlAsUrl = new URL(sourceRepoUrl.toString());\n+            // checkout the source repo\n+            Repository sourceRepo = gitService.getOrCheckoutRepository(sourceRepositoryUrlAsUrl, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NTk1NQ=="}, "originalCommit": {"oid": "5e5487a156bb3d5c1b1529fb4e845017e07299f3"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4294, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}