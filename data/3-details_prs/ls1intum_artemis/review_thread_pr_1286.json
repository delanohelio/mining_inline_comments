{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTM1MjI2", "number": 1286, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNjozOFrODvSe9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowNTowMVrODv9jWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTEyNTAzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNjozOFrOGBoPYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozNDowMFrOGBo1Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTA1Ng==", "bodyText": "Does busy need to be set to false in the error case as well?", "url": "https://github.com/ls1intum/Artemis/pull/1286#discussion_r404361056", "createdAt": "2020-04-06T20:16:38Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -0,0 +1,255 @@\n+import { Component, OnInit } from '@angular/core';\n+import { Location } from '@angular/common';\n+import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { JhiAlertService } from 'ng-jhipster';\n+import * as moment from 'moment';\n+\n+import { AccountService } from 'app/core/auth/account.service';\n+import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n+import { TextExercise } from 'app/entities/text-exercise.model';\n+import { Result } from 'app/entities/result.model';\n+import { Complaint } from 'app/entities/complaint.model';\n+import { ComplaintService } from 'app/complaints/complaint.service';\n+import { TextAssessmentsService } from 'app/exercises/text/assess/text-assessments.service';\n+import { TextBlockRef } from 'app/entities/text-block-ref.model';\n+import { Feedback } from 'app/entities/feedback.model';\n+import { notUndefined } from 'app/shared/util/global.utils';\n+import { TextBlock } from 'app/entities/text-block.model';\n+import { TranslateService } from '@ngx-translate/core';\n+import { NEW_ASSESSMENT_PATH } from 'app/exercises/text/assess-new/text-submission-assessment.route';\n+\n+@Component({\n+    selector: 'jhi-text-submission-assessment',\n+    templateUrl: './text-submission-assessment.component.html',\n+    styleUrls: ['./text-submission-assessment.component.scss'],\n+})\n+export class TextSubmissionAssessmentComponent implements OnInit {\n+    private userId: number | null;\n+    participation: StudentParticipation | null = null;\n+    submission: TextSubmission | null = null;\n+    exercise: TextExercise | null = null;\n+    result: Result | null = null;\n+    generalFeedback: Feedback;\n+    textBlockRefs: TextBlockRef[] = [];\n+\n+    isLoading = true;\n+    busy = false;\n+    isAssessor = false;\n+    isAtLeastInstructor = false;\n+    canOverride = false;\n+    assessmentsAreValid = false;\n+    complaint: Complaint;\n+\n+    private cancelConfirmationText: string;\n+\n+    private get referencedFeedback(): Feedback[] {\n+        return this.textBlockRefs.map(({ feedback }) => feedback).filter(notUndefined) as Feedback[];\n+    }\n+\n+    private get assessments(): Feedback[] {\n+        if (Feedback.hasDetailText(this.generalFeedback)) {\n+            return [this.generalFeedback, ...this.referencedFeedback];\n+        } else {\n+            return this.referencedFeedback;\n+        }\n+    }\n+\n+    private get textBlocks(): TextBlock[] {\n+        return this.textBlockRefs.map(({ block }) => block);\n+    }\n+\n+    constructor(\n+        private activatedRoute: ActivatedRoute,\n+        private router: Router,\n+        private location: Location,\n+        private jhiAlertService: JhiAlertService,\n+        private accountService: AccountService,\n+        private assessmentsService: TextAssessmentsService,\n+        private complaintService: ComplaintService,\n+        translateService: TranslateService,\n+    ) {\n+        translateService.get('artemisApp.textAssessment.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\n+    }\n+\n+    async ngOnInit() {\n+        // Used to check if the assessor is the current user\n+        const identity = await this.accountService.identity();\n+        this.userId = identity ? identity.id : null;\n+\n+        this.isAtLeastInstructor = this.accountService.hasAnyAuthorityDirect(['ROLE_ADMIN', 'ROLE_INSTRUCTOR']);\n+\n+        this.activatedRoute.data.subscribe(({ studentParticipation }) => this.setPropertiesFromServerResponse(studentParticipation));\n+    }\n+\n+    private setPropertiesFromServerResponse(studentParticipation: StudentParticipation) {\n+        this.participation = studentParticipation;\n+        this.submission = this.participation?.submissions[0] as TextSubmission;\n+        this.exercise = this.participation?.exercise as TextExercise;\n+        this.result = this.submission?.result;\n+        this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course!);\n+        this.prepareTextBlocksAndFeedbacks();\n+        this.getComplaint();\n+        this.updateUrlIfNeeded();\n+\n+        this.checkPermissions();\n+        this.isLoading = false;\n+    }\n+\n+    private updateUrlIfNeeded() {\n+        if (this.activatedRoute.routeConfig?.path === NEW_ASSESSMENT_PATH) {\n+            // Update the url with the new id, without reloading the page, to make the history consistent\n+            const newUrl = this.router\n+                .createUrlTree(\n+                    // TODO:  Remove '-new' when migrating to Text Assessment V2\n+                    ['course-management', this.exercise?.course?.id, 'text-exercises', this.exercise?.id, 'submissions-new', this.submission?.id, 'assessment'],\n+                )\n+                .toString();\n+            this.location.go(newUrl);\n+        }\n+    }\n+\n+    navigateBack(): void {\n+        history.back();\n+    }\n+\n+    save(): void {\n+        if (!this.assessmentsAreValid) {\n+            this.jhiAlertService.error('artemisApp.textAssessment.error.invalidAssessments');\n+            return;\n+        }\n+\n+        this.busy = true;\n+        this.assessmentsService.save(this.exercise!.id, this.result!.id, this.assessments, this.textBlocks).subscribe(\n+            (response) => this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.saveSuccessful'),\n+            (error: HttpErrorResponse) => this.handleError(error),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4d571405f0cad96503b85849b29d88d775e719"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDc3MA==", "bodyText": "Good catch! Fixed it.", "url": "https://github.com/ls1intum/Artemis/pull/1286#discussion_r404370770", "createdAt": "2020-04-06T20:34:00Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -0,0 +1,255 @@\n+import { Component, OnInit } from '@angular/core';\n+import { Location } from '@angular/common';\n+import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { JhiAlertService } from 'ng-jhipster';\n+import * as moment from 'moment';\n+\n+import { AccountService } from 'app/core/auth/account.service';\n+import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n+import { TextExercise } from 'app/entities/text-exercise.model';\n+import { Result } from 'app/entities/result.model';\n+import { Complaint } from 'app/entities/complaint.model';\n+import { ComplaintService } from 'app/complaints/complaint.service';\n+import { TextAssessmentsService } from 'app/exercises/text/assess/text-assessments.service';\n+import { TextBlockRef } from 'app/entities/text-block-ref.model';\n+import { Feedback } from 'app/entities/feedback.model';\n+import { notUndefined } from 'app/shared/util/global.utils';\n+import { TextBlock } from 'app/entities/text-block.model';\n+import { TranslateService } from '@ngx-translate/core';\n+import { NEW_ASSESSMENT_PATH } from 'app/exercises/text/assess-new/text-submission-assessment.route';\n+\n+@Component({\n+    selector: 'jhi-text-submission-assessment',\n+    templateUrl: './text-submission-assessment.component.html',\n+    styleUrls: ['./text-submission-assessment.component.scss'],\n+})\n+export class TextSubmissionAssessmentComponent implements OnInit {\n+    private userId: number | null;\n+    participation: StudentParticipation | null = null;\n+    submission: TextSubmission | null = null;\n+    exercise: TextExercise | null = null;\n+    result: Result | null = null;\n+    generalFeedback: Feedback;\n+    textBlockRefs: TextBlockRef[] = [];\n+\n+    isLoading = true;\n+    busy = false;\n+    isAssessor = false;\n+    isAtLeastInstructor = false;\n+    canOverride = false;\n+    assessmentsAreValid = false;\n+    complaint: Complaint;\n+\n+    private cancelConfirmationText: string;\n+\n+    private get referencedFeedback(): Feedback[] {\n+        return this.textBlockRefs.map(({ feedback }) => feedback).filter(notUndefined) as Feedback[];\n+    }\n+\n+    private get assessments(): Feedback[] {\n+        if (Feedback.hasDetailText(this.generalFeedback)) {\n+            return [this.generalFeedback, ...this.referencedFeedback];\n+        } else {\n+            return this.referencedFeedback;\n+        }\n+    }\n+\n+    private get textBlocks(): TextBlock[] {\n+        return this.textBlockRefs.map(({ block }) => block);\n+    }\n+\n+    constructor(\n+        private activatedRoute: ActivatedRoute,\n+        private router: Router,\n+        private location: Location,\n+        private jhiAlertService: JhiAlertService,\n+        private accountService: AccountService,\n+        private assessmentsService: TextAssessmentsService,\n+        private complaintService: ComplaintService,\n+        translateService: TranslateService,\n+    ) {\n+        translateService.get('artemisApp.textAssessment.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\n+    }\n+\n+    async ngOnInit() {\n+        // Used to check if the assessor is the current user\n+        const identity = await this.accountService.identity();\n+        this.userId = identity ? identity.id : null;\n+\n+        this.isAtLeastInstructor = this.accountService.hasAnyAuthorityDirect(['ROLE_ADMIN', 'ROLE_INSTRUCTOR']);\n+\n+        this.activatedRoute.data.subscribe(({ studentParticipation }) => this.setPropertiesFromServerResponse(studentParticipation));\n+    }\n+\n+    private setPropertiesFromServerResponse(studentParticipation: StudentParticipation) {\n+        this.participation = studentParticipation;\n+        this.submission = this.participation?.submissions[0] as TextSubmission;\n+        this.exercise = this.participation?.exercise as TextExercise;\n+        this.result = this.submission?.result;\n+        this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course!);\n+        this.prepareTextBlocksAndFeedbacks();\n+        this.getComplaint();\n+        this.updateUrlIfNeeded();\n+\n+        this.checkPermissions();\n+        this.isLoading = false;\n+    }\n+\n+    private updateUrlIfNeeded() {\n+        if (this.activatedRoute.routeConfig?.path === NEW_ASSESSMENT_PATH) {\n+            // Update the url with the new id, without reloading the page, to make the history consistent\n+            const newUrl = this.router\n+                .createUrlTree(\n+                    // TODO:  Remove '-new' when migrating to Text Assessment V2\n+                    ['course-management', this.exercise?.course?.id, 'text-exercises', this.exercise?.id, 'submissions-new', this.submission?.id, 'assessment'],\n+                )\n+                .toString();\n+            this.location.go(newUrl);\n+        }\n+    }\n+\n+    navigateBack(): void {\n+        history.back();\n+    }\n+\n+    save(): void {\n+        if (!this.assessmentsAreValid) {\n+            this.jhiAlertService.error('artemisApp.textAssessment.error.invalidAssessments');\n+            return;\n+        }\n+\n+        this.busy = true;\n+        this.assessmentsService.save(this.exercise!.id, this.result!.id, this.assessments, this.textBlocks).subscribe(\n+            (response) => this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.saveSuccessful'),\n+            (error: HttpErrorResponse) => this.handleError(error),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTA1Ng=="}, "originalCommit": {"oid": "4f4d571405f0cad96503b85849b29d88d775e719"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTEyNTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNjo0NlrOGBoPog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNjo0NlrOGBoPog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTEyMg==", "bodyText": "Does busy need to be set to false in the error case as well?", "url": "https://github.com/ls1intum/Artemis/pull/1286#discussion_r404361122", "createdAt": "2020-04-06T20:16:46Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -0,0 +1,255 @@\n+import { Component, OnInit } from '@angular/core';\n+import { Location } from '@angular/common';\n+import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { JhiAlertService } from 'ng-jhipster';\n+import * as moment from 'moment';\n+\n+import { AccountService } from 'app/core/auth/account.service';\n+import { StudentParticipation } from 'app/entities/participation/student-participation.model';\n+import { TextSubmission } from 'app/entities/text-submission.model';\n+import { TextExercise } from 'app/entities/text-exercise.model';\n+import { Result } from 'app/entities/result.model';\n+import { Complaint } from 'app/entities/complaint.model';\n+import { ComplaintService } from 'app/complaints/complaint.service';\n+import { TextAssessmentsService } from 'app/exercises/text/assess/text-assessments.service';\n+import { TextBlockRef } from 'app/entities/text-block-ref.model';\n+import { Feedback } from 'app/entities/feedback.model';\n+import { notUndefined } from 'app/shared/util/global.utils';\n+import { TextBlock } from 'app/entities/text-block.model';\n+import { TranslateService } from '@ngx-translate/core';\n+import { NEW_ASSESSMENT_PATH } from 'app/exercises/text/assess-new/text-submission-assessment.route';\n+\n+@Component({\n+    selector: 'jhi-text-submission-assessment',\n+    templateUrl: './text-submission-assessment.component.html',\n+    styleUrls: ['./text-submission-assessment.component.scss'],\n+})\n+export class TextSubmissionAssessmentComponent implements OnInit {\n+    private userId: number | null;\n+    participation: StudentParticipation | null = null;\n+    submission: TextSubmission | null = null;\n+    exercise: TextExercise | null = null;\n+    result: Result | null = null;\n+    generalFeedback: Feedback;\n+    textBlockRefs: TextBlockRef[] = [];\n+\n+    isLoading = true;\n+    busy = false;\n+    isAssessor = false;\n+    isAtLeastInstructor = false;\n+    canOverride = false;\n+    assessmentsAreValid = false;\n+    complaint: Complaint;\n+\n+    private cancelConfirmationText: string;\n+\n+    private get referencedFeedback(): Feedback[] {\n+        return this.textBlockRefs.map(({ feedback }) => feedback).filter(notUndefined) as Feedback[];\n+    }\n+\n+    private get assessments(): Feedback[] {\n+        if (Feedback.hasDetailText(this.generalFeedback)) {\n+            return [this.generalFeedback, ...this.referencedFeedback];\n+        } else {\n+            return this.referencedFeedback;\n+        }\n+    }\n+\n+    private get textBlocks(): TextBlock[] {\n+        return this.textBlockRefs.map(({ block }) => block);\n+    }\n+\n+    constructor(\n+        private activatedRoute: ActivatedRoute,\n+        private router: Router,\n+        private location: Location,\n+        private jhiAlertService: JhiAlertService,\n+        private accountService: AccountService,\n+        private assessmentsService: TextAssessmentsService,\n+        private complaintService: ComplaintService,\n+        translateService: TranslateService,\n+    ) {\n+        translateService.get('artemisApp.textAssessment.confirmCancel').subscribe((text) => (this.cancelConfirmationText = text));\n+    }\n+\n+    async ngOnInit() {\n+        // Used to check if the assessor is the current user\n+        const identity = await this.accountService.identity();\n+        this.userId = identity ? identity.id : null;\n+\n+        this.isAtLeastInstructor = this.accountService.hasAnyAuthorityDirect(['ROLE_ADMIN', 'ROLE_INSTRUCTOR']);\n+\n+        this.activatedRoute.data.subscribe(({ studentParticipation }) => this.setPropertiesFromServerResponse(studentParticipation));\n+    }\n+\n+    private setPropertiesFromServerResponse(studentParticipation: StudentParticipation) {\n+        this.participation = studentParticipation;\n+        this.submission = this.participation?.submissions[0] as TextSubmission;\n+        this.exercise = this.participation?.exercise as TextExercise;\n+        this.result = this.submission?.result;\n+        this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course!);\n+        this.prepareTextBlocksAndFeedbacks();\n+        this.getComplaint();\n+        this.updateUrlIfNeeded();\n+\n+        this.checkPermissions();\n+        this.isLoading = false;\n+    }\n+\n+    private updateUrlIfNeeded() {\n+        if (this.activatedRoute.routeConfig?.path === NEW_ASSESSMENT_PATH) {\n+            // Update the url with the new id, without reloading the page, to make the history consistent\n+            const newUrl = this.router\n+                .createUrlTree(\n+                    // TODO:  Remove '-new' when migrating to Text Assessment V2\n+                    ['course-management', this.exercise?.course?.id, 'text-exercises', this.exercise?.id, 'submissions-new', this.submission?.id, 'assessment'],\n+                )\n+                .toString();\n+            this.location.go(newUrl);\n+        }\n+    }\n+\n+    navigateBack(): void {\n+        history.back();\n+    }\n+\n+    save(): void {\n+        if (!this.assessmentsAreValid) {\n+            this.jhiAlertService.error('artemisApp.textAssessment.error.invalidAssessments');\n+            return;\n+        }\n+\n+        this.busy = true;\n+        this.assessmentsService.save(this.exercise!.id, this.result!.id, this.assessments, this.textBlocks).subscribe(\n+            (response) => this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.saveSuccessful'),\n+            (error: HttpErrorResponse) => this.handleError(error),\n+        );\n+    }\n+\n+    submit(): void {\n+        if (!this.result?.id) {\n+            return; // We need to have saved the result before\n+        }\n+\n+        if (!this.assessmentsAreValid) {\n+            this.jhiAlertService.error('artemisApp.textAssessment.error.invalidAssessments');\n+            return;\n+        }\n+\n+        this.busy = true;\n+        this.assessmentsService.submit(this.exercise!.id, this.result!.id, this.assessments, this.textBlocks).subscribe(\n+            (response) => this.handleSaveOrSubmitSuccessWithAlert(response, 'artemisApp.textAssessment.submitSuccessful'),\n+            (error: HttpErrorResponse) => this.handleError(error),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4d571405f0cad96503b85849b29d88d775e719"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE2OTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowMTozMFrOGCr9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowMTozMFrOGCr9qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3MDYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @deprecated Text Blocks should be returned with Submission.\n          \n          \n            \n                 * @deprecated Text Blocks should be returned with Submission. Please use V2 text assessment which does not need this API call. This API call will be removed soon.", "url": "https://github.com/ls1intum/Artemis/pull/1286#discussion_r405470632", "createdAt": "2020-04-08T12:01:30Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "diffHunk": "@@ -190,11 +209,13 @@ public TextAssessmentResource(AuthorizationCheckService authCheckService, Result\n      * Splits the TextSubmission corresponding to a resultId into TextBlocks.\n      * The TextBlocks get a suggested feedback if automatic assessment is enabled and feedback available\n      *\n+     * @deprecated Text Blocks should be returned with Submission.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5607eade0332792cf3bbf11249803132fb6e746"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE4MTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowNTowMlrOGCsFPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoxMDoyMVrOGCsQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3MjU3NQ==", "bodyText": "add some documentation comments", "url": "https://github.com/ls1intum/Artemis/pull/1286#discussion_r405472575", "createdAt": "2020-04-08T12:05:02Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "diffHunk": "@@ -285,17 +307,22 @@ private void computeBlocks(Result result, TextExercise textExercise) {\n         final List<Feedback> assessments = textAssessmentService.getAssessmentsForResult(result);\n         result.setFeedbacks(assessments);\n \n-        if (exercise.isAutomaticAssessmentEnabled() && (textSubmission.getBlocks() == null || textSubmission.getBlocks().isEmpty())) {\n-            computeBlocks(result, exercise);\n+        final List<TextBlock> textBlocks = textBlockRepository.findAllBySubmissionId(textSubmission.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5607eade0332792cf3bbf11249803132fb6e746"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NTUyNw==", "bodyText": "Also explain the fall back solution here", "url": "https://github.com/ls1intum/Artemis/pull/1286#discussion_r405475527", "createdAt": "2020-04-08T12:10:21Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java", "diffHunk": "@@ -285,17 +307,22 @@ private void computeBlocks(Result result, TextExercise textExercise) {\n         final List<Feedback> assessments = textAssessmentService.getAssessmentsForResult(result);\n         result.setFeedbacks(assessments);\n \n-        if (exercise.isAutomaticAssessmentEnabled() && (textSubmission.getBlocks() == null || textSubmission.getBlocks().isEmpty())) {\n-            computeBlocks(result, exercise);\n+        final List<TextBlock> textBlocks = textBlockRepository.findAllBySubmissionId(textSubmission.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3MjU3NQ=="}, "originalCommit": {"oid": "f5607eade0332792cf3bbf11249803132fb6e746"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 86, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}