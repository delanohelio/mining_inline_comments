{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMTQ2MjE2", "number": 1929, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1MjoyOFrOEPyxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1MzowNlrOEPyxhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTk1OTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1MjoyOFrOGzqx_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1MjoyOFrOGzqx_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgzMTQ4NA==", "bodyText": "Is already checked via checkCourseAndExamAndStudentExamAccess()", "url": "https://github.com/ls1intum/Artemis/pull/1929#discussion_r456831484", "createdAt": "2020-07-18T21:52:28Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -138,7 +138,12 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         if (workingTime <= 0) {\n             return badRequest();\n         }\n-        Exam exam = examRepository.findById(examId).get();\n+        Optional<Exam> optionalExam = examRepository.findById(examId);\n+        if (optionalExam.isEmpty()) {\n+            return notFound();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02be013392c0f95b00606142852b7cb91ffc5f75"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTk1OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1Mjo0NlrOGzqyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1Mjo0NlrOGzqyBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgzMTQ5NA==", "bodyText": "?", "url": "https://github.com/ls1intum/Artemis/pull/1929#discussion_r456831494", "createdAt": "2020-07-18T21:52:46Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -151,35 +156,35 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     /**\n      * POST /courses/{courseId}/exams/{examId}/studentExams/submit : Submits the student exam\n      * Updates all submissions and marks student exam as submitted according to given student exam\n-     *\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02be013392c0f95b00606142852b7cb91ffc5f75"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTk1OTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1MzowNlrOGzqyJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMTo1MzowNlrOGzqyJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgzMTUyNA==", "bodyText": "?", "url": "https://github.com/ls1intum/Artemis/pull/1929#discussion_r456831524", "createdAt": "2020-07-18T21:53:06Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -151,35 +156,35 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     /**\n      * POST /courses/{courseId}/exams/{examId}/studentExams/submit : Submits the student exam\n      * Updates all submissions and marks student exam as submitted according to given student exam\n-     *\n+     * <p>\n      * NOTE: the studentExam has to be sent with all exercises, participations and submissions\n      *\n-     * @param courseId      the course to which the student exams belong to\n-     * @param examId        the exam to which the student exams belong to\n-     * @param studentExam   the student exam with exercises, participations and submissions\n-     * @return              empty response with status code:\n-     *                          200 if successful\n-     *                          400 if student exam was in an illegal state\n+     * @param courseId    the course to which the student exams belong to\n+     * @param examId      the exam to which the student exams belong to\n+     * @param studentExam the student exam with exercises, participations and submissions\n+     * @return empty response with status code:\n+     * 200 if successful\n+     * 400 if student exam was in an illegal state\n      */\n     @PostMapping(\"/courses/{courseId}/exams/{examId}/studentExams/submit\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> submitStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody StudentExam studentExam) {\n+    public ResponseEntity<StudentExam> submitStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody StudentExam studentExam) {\n         log.debug(\"REST request to mark the studentExam as submitted : {}\", studentExam.getId());\n         User currentUser = userService.getUserWithGroupsAndAuthorities();\n-        Optional<ResponseEntity<Void>> accessFailure = this.studentExamAccessService.checkStudentExamAccess(courseId, examId, studentExam.getId(), currentUser);\n+        Optional<ResponseEntity<StudentExam>> accessFailure = this.studentExamAccessService.checkStudentExamAccess(courseId, examId, studentExam.getId(), currentUser);\n         return accessFailure.orElseGet(() -> studentExamService.submitStudentExam(studentExam, currentUser));\n     }\n \n     /**\n      * GET /courses/{courseId}/exams/{examId}/studentExams/conduction : Find a student exam for the user.\n      * This will be used for the actual conduction of the exam. The student exam will be returned with the exercises\n      * and with the student participation and with the submissions.\n-     *\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02be013392c0f95b00606142852b7cb91ffc5f75"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4796, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}