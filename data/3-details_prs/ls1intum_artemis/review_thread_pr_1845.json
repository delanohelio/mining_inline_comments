{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTExNDc4", "number": 1845, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1OToyM1rOENP6GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNTowOFrOENQAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI3NTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1OToyM1rOGv0p3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMTo0Mzo1MlrOGwMU1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5ODk0MQ==", "bodyText": "Is this a typo? \"healthindicator\"", "url": "https://github.com/ls1intum/Artemis/pull/1845#discussion_r452798941", "createdAt": "2020-07-10T11:59:23Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.actuate.health.*;\n+import org.springframework.cloud.client.discovery.health.DiscoveryCompositeHealthContributor;\n+import org.springframework.messaging.simp.user.SimpUserRegistry;\n+import org.springframework.stereotype.Component;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+@Component\n+public class MetricsBean {\n+\n+    public MetricsBean(MeterRegistry meterRegistry, SimpUserRegistry simpUserRegistry, List<HealthContributor> healthContributors) {\n+        Gauge.builder(\"artemis.instance.websocket.users\", simpUserRegistry, SimpUserRegistry::getUserCount).strongReference(true)\n+                .description(\"Number of users connected to this Artemis instance\").register(meterRegistry);\n+\n+        for (HealthContributor healthContributor : healthContributors) {\n+            if (healthContributor instanceof HealthIndicator) {\n+                HealthIndicator healthIndicator = (HealthIndicator) healthContributor;\n+                Gauge.builder(\"artemis.health\", healthIndicator, h -> mapHealthToDouble(h.health())).strongReference(true).description(\"Artemis Health Indicator\")\n+                        .tag(\"healtindicator\", healthIndicator.getClass().getSimpleName().toLowerCase()).register(meterRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617836921f4a85b79dbc3cd5103dfe0e7448696f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4Njc3Mg==", "bodyText": "Good catch, I extracted it into a constant.", "url": "https://github.com/ls1intum/Artemis/pull/1845#discussion_r453186772", "createdAt": "2020-07-11T11:43:52Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.actuate.health.*;\n+import org.springframework.cloud.client.discovery.health.DiscoveryCompositeHealthContributor;\n+import org.springframework.messaging.simp.user.SimpUserRegistry;\n+import org.springframework.stereotype.Component;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+@Component\n+public class MetricsBean {\n+\n+    public MetricsBean(MeterRegistry meterRegistry, SimpUserRegistry simpUserRegistry, List<HealthContributor> healthContributors) {\n+        Gauge.builder(\"artemis.instance.websocket.users\", simpUserRegistry, SimpUserRegistry::getUserCount).strongReference(true)\n+                .description(\"Number of users connected to this Artemis instance\").register(meterRegistry);\n+\n+        for (HealthContributor healthContributor : healthContributors) {\n+            if (healthContributor instanceof HealthIndicator) {\n+                HealthIndicator healthIndicator = (HealthIndicator) healthContributor;\n+                Gauge.builder(\"artemis.health\", healthIndicator, h -> mapHealthToDouble(h.health())).strongReference(true).description(\"Artemis Health Indicator\")\n+                        .tag(\"healtindicator\", healthIndicator.getClass().getSimpleName().toLowerCase()).register(meterRegistry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5ODk0MQ=="}, "originalCommit": {"oid": "617836921f4a85b79dbc3cd5103dfe0e7448696f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI4MTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowMToyMVrOGv0tRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowMToyMVrOGv0tRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5OTgxNA==", "bodyText": "Is this a typo? \"healthindicator\"", "url": "https://github.com/ls1intum/Artemis/pull/1845#discussion_r452799814", "createdAt": "2020-07-10T12:01:21Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.actuate.health.*;\n+import org.springframework.cloud.client.discovery.health.DiscoveryCompositeHealthContributor;\n+import org.springframework.messaging.simp.user.SimpUserRegistry;\n+import org.springframework.stereotype.Component;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+@Component\n+public class MetricsBean {\n+\n+    public MetricsBean(MeterRegistry meterRegistry, SimpUserRegistry simpUserRegistry, List<HealthContributor> healthContributors) {\n+        Gauge.builder(\"artemis.instance.websocket.users\", simpUserRegistry, SimpUserRegistry::getUserCount).strongReference(true)\n+                .description(\"Number of users connected to this Artemis instance\").register(meterRegistry);\n+\n+        for (HealthContributor healthContributor : healthContributors) {\n+            if (healthContributor instanceof HealthIndicator) {\n+                HealthIndicator healthIndicator = (HealthIndicator) healthContributor;\n+                Gauge.builder(\"artemis.health\", healthIndicator, h -> mapHealthToDouble(h.health())).strongReference(true).description(\"Artemis Health Indicator\")\n+                        .tag(\"healtindicator\", healthIndicator.getClass().getSimpleName().toLowerCase()).register(meterRegistry);\n+            }\n+            if (healthContributor instanceof DiscoveryCompositeHealthContributor) {\n+                DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) healthContributor;\n+                for (NamedContributor<HealthContributor> discoveryHealthContributor : discoveryCompositeHealthContributor) {\n+                    if (discoveryHealthContributor.getContributor() instanceof HealthIndicator) {\n+                        HealthIndicator healthIndicator = (HealthIndicator) discoveryHealthContributor.getContributor();\n+                        Gauge.builder(\"artemis.health\", healthIndicator, h -> mapHealthToDouble(h.health())).strongReference(true).description(\"Artemis Health Indicator\")\n+                                .tag(\"healtindicator\", discoveryHealthContributor.getName().toLowerCase()).register(meterRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617836921f4a85b79dbc3cd5103dfe0e7448696f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI4NTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/PrometheusAuthConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowMzoxMlrOGv0wJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMTo0NDo1M1rOGwMVLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMDU1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Only enable the endpoint an ip-address is specified\n          \n          \n            \n                    // Only enable the endpoint if an ip-address is specified", "url": "https://github.com/ls1intum/Artemis/pull/1845#discussion_r452800551", "createdAt": "2020-07-10T12:03:12Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/config/PrometheusAuthConfiguration.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+\n+@Configuration\n+@Order(1)\n+@ConditionalOnProperty(prefix = \"management\", name = \"metrics.export.prometheus.enabled\")\n+public class PrometheusAuthConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Value(\"${spring.prometheus.monitoringIp}\")\n+    private String monitoringIpAddress;\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        // Only enable the endpoint an ip-address is specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617836921f4a85b79dbc3cd5103dfe0e7448696f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4Njg2Mw==", "bodyText": "Thanks, I fixed the documentation.", "url": "https://github.com/ls1intum/Artemis/pull/1845#discussion_r453186863", "createdAt": "2020-07-11T11:44:53Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/config/PrometheusAuthConfiguration.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.config.http.SessionCreationPolicy;\n+\n+@Configuration\n+@Order(1)\n+@ConditionalOnProperty(prefix = \"management\", name = \"metrics.export.prometheus.enabled\")\n+public class PrometheusAuthConfiguration extends WebSecurityConfigurerAdapter {\n+\n+    @Value(\"${spring.prometheus.monitoringIp}\")\n+    private String monitoringIpAddress;\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        // Only enable the endpoint an ip-address is specified", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMDU1MQ=="}, "originalCommit": {"oid": "617836921f4a85b79dbc3cd5103dfe0e7448696f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzI5MTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNTowOFrOGv0znA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNTowOFrOGv0znA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTQzNg==", "bodyText": "You could define constants for \"artemis.health\", \"Artemis Health Indicator\", \"healt(h)indicator\". But this could also hurt readability.", "url": "https://github.com/ls1intum/Artemis/pull/1845#discussion_r452801436", "createdAt": "2020-07-10T12:05:08Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/config/MetricsBean.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package de.tum.in.www1.artemis.config;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.actuate.health.*;\n+import org.springframework.cloud.client.discovery.health.DiscoveryCompositeHealthContributor;\n+import org.springframework.messaging.simp.user.SimpUserRegistry;\n+import org.springframework.stereotype.Component;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+@Component\n+public class MetricsBean {\n+\n+    public MetricsBean(MeterRegistry meterRegistry, SimpUserRegistry simpUserRegistry, List<HealthContributor> healthContributors) {\n+        Gauge.builder(\"artemis.instance.websocket.users\", simpUserRegistry, SimpUserRegistry::getUserCount).strongReference(true)\n+                .description(\"Number of users connected to this Artemis instance\").register(meterRegistry);\n+\n+        for (HealthContributor healthContributor : healthContributors) {\n+            if (healthContributor instanceof HealthIndicator) {\n+                HealthIndicator healthIndicator = (HealthIndicator) healthContributor;\n+                Gauge.builder(\"artemis.health\", healthIndicator, h -> mapHealthToDouble(h.health())).strongReference(true).description(\"Artemis Health Indicator\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617836921f4a85b79dbc3cd5103dfe0e7448696f"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4749, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}