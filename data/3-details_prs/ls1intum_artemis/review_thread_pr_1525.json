{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTQ3Njcy", "number": 1525, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozOFrOED4zGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNzozMlrOEV8m3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTExNzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/FeedbackService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozOFrOGhKxKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NzozOFrOGhKxKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjYxOA==", "bodyText": "I suggest that we use a text identifier for static code analysis, e.g.\n\"StaticCodeAnalysisFeedback:<tool.name()>\"", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r437432618", "createdAt": "2020-06-09T13:47:38Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/FeedbackService.java", "diffHunk": "@@ -37,4 +44,31 @@ public FeedbackService(FeedbackRepository feedbackRepository) {\n         return feedbackRepository.findByReferenceInAndResult_Submission_Participation_Exercise(references, exercise).parallelStream()\n                 .collect(toMap(Feedback::getReference, feedback -> feedback));\n     }\n+\n+    // TODO: Move this to a StaticAssessmentService, implement it as a Helper Entity or directly in Feedback?\n+    /**\n+     * Transforms static assessment reports to feedback objects.\n+     * As we reuse the Feedback entity to store static code analysis issues, a mapping to those attributes\n+     * has to be defined, violating the first normal form.\n+     *\n+     * @param reports Static Assessment reports to be transformed\n+     * @return Feedback objects storing the static assessment issues\n+     */\n+    public List<Feedback> createFeedbackFromStaticAssessmentReports(List<StaticAssessmentReportDTO> reports) {\n+        List<Feedback> feedbackList = new ArrayList<>();\n+        for (final var report : reports) {\n+            StaticCodeAnalysisTool tool = report.getTool();\n+\n+            for (final var issue : report.getIssues()) {\n+                Feedback feedback = new Feedback();\n+                feedback.setText(tool.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a8d9bf0d6d529d93ff4bd9d8989f390ab19beb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTEyMDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/FeedbackService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1N1rOGhKyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Nzo1N1rOGhKyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjk3MA==", "bodyText": "AUTOMATIC", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r437432970", "createdAt": "2020-06-09T13:47:57Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/FeedbackService.java", "diffHunk": "@@ -37,4 +44,31 @@ public FeedbackService(FeedbackRepository feedbackRepository) {\n         return feedbackRepository.findByReferenceInAndResult_Submission_Participation_Exercise(references, exercise).parallelStream()\n                 .collect(toMap(Feedback::getReference, feedback -> feedback));\n     }\n+\n+    // TODO: Move this to a StaticAssessmentService, implement it as a Helper Entity or directly in Feedback?\n+    /**\n+     * Transforms static assessment reports to feedback objects.\n+     * As we reuse the Feedback entity to store static code analysis issues, a mapping to those attributes\n+     * has to be defined, violating the first normal form.\n+     *\n+     * @param reports Static Assessment reports to be transformed\n+     * @return Feedback objects storing the static assessment issues\n+     */\n+    public List<Feedback> createFeedbackFromStaticAssessmentReports(List<StaticAssessmentReportDTO> reports) {\n+        List<Feedback> feedbackList = new ArrayList<>();\n+        for (final var report : reports) {\n+            StaticCodeAnalysisTool tool = report.getTool();\n+\n+            for (final var issue : report.getIssues()) {\n+                Feedback feedback = new Feedback();\n+                feedback.setText(tool.name());\n+                feedback.setDetailText(issue.getMessage());\n+                feedback.setReference(issue.getClassname() + ':' + issue.getLine());\n+                feedback.setType(FeedbackType.AUTOMATIC_STATIC_ASSESSMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a8d9bf0d6d529d93ff4bd9d8989f390ab19beb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTE0MDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1MDo1N1rOGhK-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1MDo1N1rOGhK-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNjE0OQ==", "bodyText": "please get rid of this", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r437436149", "createdAt": "2020-06-09T13:50:57Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Result.java", "diffHunk": "@@ -117,6 +118,10 @@\n     @Column(name = \"example_result\")\n     private Boolean exampleResult;\n \n+    // Stores static assessment feedback temporally. Otherwise, ProgrammingExerciseTestCaseService will remove it\n+    @Transient\n+    private List<Feedback> staticAssessmentFeedback = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a8d9bf0d6d529d93ff4bd9d8989f390ab19beb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTQ1MTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo1OToyM1rOG7DXow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo1OToyM1rOG7DXow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NDM3MQ==", "bodyText": "Maybe add a null check for this.text?", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464574371", "createdAt": "2020-08-03T17:59:23Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Feedback.java", "diffHunk": "@@ -207,6 +209,15 @@ public void setGradingInstruction(GradingInstruction gradingInstruction) {\n         this.gradingInstruction = gradingInstruction;\n     }\n \n+    /**\n+     * Checks whether the feedback was created by static code analysis\n+     * @return true if the it is static code analysis feedback else false\n+     */\n+    @JsonIgnore\n+    public boolean isStaticCodeAnalysisFeedback() {\n+        return this.text.startsWith(STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER) && this.type == FeedbackType.AUTOMATIC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e77d395518ed1ccd6057d1924928200c6d987bd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTQ5OTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxNDoxNVrOG7D04A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxNDoxNVrOG7D04A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MTg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @param staticCodeAnalysisFeedback the static code analysis feedback items to keep\n          \n          \n            \n                 */", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464581856", "createdAt": "2020-08-03T18:14:15Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -254,12 +270,12 @@ private void updateResultString(Result result, Set<ProgrammingExerciseTestCase>\n     }\n \n     /**\n-     * Remove all feedback information from a result and treat it as if it has a score of 0.\n+     * Remove all test case feedback information from a result and treat it as if it has a score of 0.\n      * @param result\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e77d395518ed1ccd6057d1924928200c6d987bd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTUwODMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxNjo0NFrOG7D54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxNjo0NFrOG7D54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param jobs   the jobs list of the requestBody\n          \n          \n            \n                 * @param jobs   the jobs list of the requestBody\n          \n          \n            \n                 * @param isStaticCodeAnalysisEnabled  whether to include static code analysis reports as feedback", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464583139", "createdAt": "2020-08-03T18:16:44Z", "author": {"login": "schultek"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -623,10 +624,10 @@ private void createAutomaticFeedback(Result result, String methodName, boolean p\n      *\n      * @param result the result for which the feedback should be added\n      * @param jobs   the jobs list of the requestBody", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e77d395518ed1ccd6057d1924928200c6d987bd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzY0OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTowODo0N1rOG7X4sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTo1Nzo0MVrOG7ZmWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMDUxMw==", "bodyText": "Is that something that is caused by spotbugs or by Bamboo?\nSo if a different tool gets added, do we also have to change something here?", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464910513", "createdAt": "2020-08-04T09:08:47Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -850,7 +876,9 @@ private Long calculateScoreForResult(Result result, int skippedTests) {\n                         logString.startsWith(\"[ERROR] For more information about the errors and possible solutions\") ||\n                         logString.startsWith(\"[ERROR] Re-run Maven using\") ||\n                         logString.startsWith(\"[ERROR] To see the full stack trace of the errors\") ||\n-                        logString.startsWith(\"[ERROR] -> [Help 1]\")\n+                        logString.startsWith(\"[ERROR] -> [Help 1]\") ||\n+                        logString.startsWith(\"Unable to publish artifact\") ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7235a3faeb1c9947c78f13bcf3f5cfbbbc5323ab"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzMTYxNA==", "bodyText": "This logged by bamboo itself if an artifact can't be created. Happens for example if a compilation error occurs and and no Bytecode is available for analysis. This should be fine for other tools as well.", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464931614", "createdAt": "2020-08-04T09:45:06Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -850,7 +876,9 @@ private Long calculateScoreForResult(Result result, int skippedTests) {\n                         logString.startsWith(\"[ERROR] For more information about the errors and possible solutions\") ||\n                         logString.startsWith(\"[ERROR] Re-run Maven using\") ||\n                         logString.startsWith(\"[ERROR] To see the full stack trace of the errors\") ||\n-                        logString.startsWith(\"[ERROR] -> [Help 1]\")\n+                        logString.startsWith(\"[ERROR] -> [Help 1]\") ||\n+                        logString.startsWith(\"Unable to publish artifact\") ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMDUxMw=="}, "originalCommit": {"oid": "7235a3faeb1c9947c78f13bcf3f5cfbbbc5323ab"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzODU4NQ==", "bodyText": "Great!", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464938585", "createdAt": "2020-08-04T09:57:41Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -850,7 +876,9 @@ private Long calculateScoreForResult(Result result, int skippedTests) {\n                         logString.startsWith(\"[ERROR] For more information about the errors and possible solutions\") ||\n                         logString.startsWith(\"[ERROR] Re-run Maven using\") ||\n                         logString.startsWith(\"[ERROR] To see the full stack trace of the errors\") ||\n-                        logString.startsWith(\"[ERROR] -> [Help 1]\")\n+                        logString.startsWith(\"[ERROR] -> [Help 1]\") ||\n+                        logString.startsWith(\"Unable to publish artifact\") ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMDUxMw=="}, "originalCommit": {"oid": "7235a3faeb1c9947c78f13bcf3f5cfbbbc5323ab"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzY2Njc2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/templates/java/test/projectTemplate/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToxMzoyN1rOG7YC_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTo0NzoyMFrOG7ZP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMzE1MA==", "bodyText": "Is it planned to only enable some of the static code analysis tools (e.g. only SpotBugs and not a different tool)?\nThis cannot be realized well here, so it might be better to use something like static-code-analysis-stopbugs-start instead?", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464913150", "createdAt": "2020-08-04T09:13:27Z", "author": {"login": "sleiss"}, "path": "src/main/resources/templates/java/test/projectTemplate/pom.xml", "diffHunk": "@@ -61,6 +61,17 @@\n                 <artifactId>maven-failsafe-plugin</artifactId>\n                 <version>2.22.2</version>\n             </plugin>\n+            %static-code-analysis-start%", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7235a3faeb1c9947c78f13bcf3f5cfbbbc5323ab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzMjg0Nw==", "bodyText": "I have no concept for this at the moment. We probably just enable all tools for a language and provide some predefined rule configurations for the instructor. I think this is fine and we can adapt this if we have a concept for configurations.", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464932847", "createdAt": "2020-08-04T09:47:20Z", "author": {"login": "kloessst"}, "path": "src/main/resources/templates/java/test/projectTemplate/pom.xml", "diffHunk": "@@ -61,6 +61,17 @@\n                 <artifactId>maven-failsafe-plugin</artifactId>\n                 <version>2.22.2</version>\n             </plugin>\n+            %static-code-analysis-start%", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMzE1MA=="}, "originalCommit": {"oid": "7235a3faeb1c9947c78f13bcf3f5cfbbbc5323ab"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzcwNDA3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/result/result.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyMzoyM1rOG7YaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyMzoyM1rOG7YaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxOTA2Mw==", "bodyText": "I'm not sure if this is also affected by what @krusche told us today in the meeting with the problematic getters, could you maybe check that?", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464919063", "createdAt": "2020-08-04T09:23:23Z", "author": {"login": "sleiss"}, "path": "src/main/webapp/app/exercises/shared/result/result.component.ts", "diffHunk": "@@ -292,6 +292,13 @@ export class ResultComponent implements OnInit, OnChanges {\n         return false;\n     }\n \n+    /**\n+     * Checks whether the participation is a student programming participation\n+     */\n+    isStudentProgrammingParticipation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7235a3faeb1c9947c78f13bcf3f5cfbbbc5323ab"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDE3MzI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo0ODoyM1rOG7c3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo1MTozNVrOG7pBfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MjAzNA==", "bodyText": "Does it make sense to put these checks in a separate class (ProgramminExerciseAccessService), since we are using them at least twice? I saw something similar for StudentExams", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r464992034", "createdAt": "2020-08-04T11:48:23Z", "author": {"login": "TobiasPr"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -360,6 +373,34 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n \n         log.debug(\"REST request to import programming exercise {} into course {}\", sourceExerciseId, newExercise.getCourseViaExerciseGroupOrCourseMember().getId());\n \n+        // Check if max score is set\n+        if (newExercise.getMaxScore() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The max score is invalid\", \"maxscoreInvalid\")).body(null);\n+        }\n+\n+        // Check if a participation mode is set\n+        if (!Boolean.TRUE.equals(newExercise.isAllowOnlineEditor()) && !Boolean.TRUE.equals(newExercise.isAllowOfflineIde())) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName,\n+                    \"You need to allow at least one participation mode, the online editor or the offline IDE\", \"noParticipationModeAllowed\")).body(null);\n+        }\n+\n+        // Check if the static code analysis flag was set\n+        if (newExercise.isStaticCodeAnalysisEnabled() == null) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The static code analysis flag must be set to true or false\", \"staticCodeAnalysisFlagNotSet\")).body(null);\n+        }\n+\n+        // Check if programming language is set\n+        if (newExercise.getProgrammingLanguage() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"No programming language was specified\", \"programmingLanguageNotSet\")).body(null);\n+        }\n+\n+        // Static code analysis is only supported for Java at the moment\n+        if (Boolean.TRUE.equals(newExercise.isStaticCodeAnalysisEnabled()) && newExercise.getProgrammingLanguage() != ProgrammingLanguage.JAVA) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The static code analysis can only be enabled for Java\", \"staticCodeAnalysisOnlyAvailableForJava\")).body(null);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2464bb8e8f336c992c3bdd5241235434a9d4d50b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5MTI5NQ==", "bodyText": "Do you mean something like ProgrammingExerciseValidationService to validate incoming requests? I think that would be a good pattern in general. But I think this is out of scope for this PR.", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r465191295", "createdAt": "2020-08-04T16:51:35Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "diffHunk": "@@ -360,6 +373,34 @@ public ProgrammingExerciseResource(ProgrammingExerciseRepository programmingExer\n \n         log.debug(\"REST request to import programming exercise {} into course {}\", sourceExerciseId, newExercise.getCourseViaExerciseGroupOrCourseMember().getId());\n \n+        // Check if max score is set\n+        if (newExercise.getMaxScore() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"The max score is invalid\", \"maxscoreInvalid\")).body(null);\n+        }\n+\n+        // Check if a participation mode is set\n+        if (!Boolean.TRUE.equals(newExercise.isAllowOnlineEditor()) && !Boolean.TRUE.equals(newExercise.isAllowOfflineIde())) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName,\n+                    \"You need to allow at least one participation mode, the online editor or the offline IDE\", \"noParticipationModeAllowed\")).body(null);\n+        }\n+\n+        // Check if the static code analysis flag was set\n+        if (newExercise.isStaticCodeAnalysisEnabled() == null) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The static code analysis flag must be set to true or false\", \"staticCodeAnalysisFlagNotSet\")).body(null);\n+        }\n+\n+        // Check if programming language is set\n+        if (newExercise.getProgrammingLanguage() == null) {\n+            return ResponseEntity.badRequest().headers(HeaderUtil.createAlert(applicationName, \"No programming language was specified\", \"programmingLanguageNotSet\")).body(null);\n+        }\n+\n+        // Static code analysis is only supported for Java at the moment\n+        if (Boolean.TRUE.equals(newExercise.isStaticCodeAnalysisEnabled()) && newExercise.getProgrammingLanguage() != ProgrammingLanguage.JAVA) {\n+            return ResponseEntity.badRequest()\n+                    .headers(HeaderUtil.createAlert(applicationName, \"The static code analysis can only be enabled for Java\", \"staticCodeAnalysisOnlyAvailableForJava\")).body(null);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MjAzNA=="}, "originalCommit": {"oid": "2464bb8e8f336c992c3bdd5241235434a9d4d50b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMToyN1rOG8_d3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMToyN1rOG8_d3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzU4MQ==", "bodyText": "Codacy found an issue: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466607581", "createdAt": "2020-08-06T18:31:27Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -175,10 +189,10 @@ public Result updateResultFromTestCases(Result result, ProgrammingExercise exerc\n             updateResultString(result, successfulTestCases, testCasesForCurrentDate);\n         }\n         // Case 2: There are no test cases that are executed before the due date has passed. We need to do this to differentiate this case from a build error.\n-        else if (testCases.size() > 0 && result.getFeedbacks().size() > 0) {\n-            removeAllFeedbackAndSetScoreToZero(result);\n+        else if (testCases.size() > 0 && testCaseFeedback.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2NjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMToyOFrOG8_d4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMToyOFrOG8_d4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzU4NQ==", "bodyText": "Codacy found an issue: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466607585", "createdAt": "2020-08-06T18:31:28Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -254,12 +270,13 @@ private void updateResultString(Result result, Set<ProgrammingExerciseTestCase>\n     }\n \n     /**\n-     * Remove all feedback information from a result and treat it as if it has a score of 0.\n-     * @param result\n+     * Remove all test case feedback information from a result and treat it as if it has a score of 0.\n+     * @param result Result containing all feedback\n+     * @param staticCodeAnalysisFeedback Static code analysis feedback to keep\n      */\n-    private void removeAllFeedbackAndSetScoreToZero(Result result) {\n-        result.setFeedbacks(new ArrayList<>());\n-        result.hasFeedback(false);\n+    private void removeAllTestCaseFeedbackAndSetScoreToZero(Result result, List<Feedback> staticCodeAnalysisFeedback) {\n+        result.setFeedbacks(staticCodeAnalysisFeedback);\n+        result.hasFeedback(staticCodeAnalysisFeedback.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMToyOVrOG8_d6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMToyOVrOG8_d6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzU5Mw==", "bodyText": "Codacy found an issue: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466607593", "createdAt": "2020-08-06T18:31:29Z", "author": {"login": "artemis-bot"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ProgrammingExerciseTestCaseService.java", "diffHunk": "@@ -157,8 +158,21 @@ public Result updateResultFromTestCases(Result result, ProgrammingExercise exerc\n         // We also don't filter the test cases for the solution/template participation's results as they are used as indicators for the instructor!\n         Set<ProgrammingExerciseTestCase> testCasesForCurrentDate = testCases.stream().filter(testCase -> !shouldTestsWithAfterDueDateFlagBeRemoved || !testCase.isAfterDueDate())\n                 .collect(Collectors.toSet());\n-        // Case 1: There are tests and feedbacks, find out which tests were not executed or should only count to the score after the due date.\n-        if (testCasesForCurrentDate.size() > 0 && result.getFeedbacks().size() > 0) {\n+        // Distinguish between static code analysis feedback and test case feedback\n+        // TODO: For now we are only concerned with not breaking existing functionality and not losing static code analysis feedback.\n+        // This method has to be extended/refactored when a grading concept for static code analysis has been created\n+        List<Feedback> testCaseFeedback = new ArrayList<>();\n+        List<Feedback> staticCodeAnalysisFeedback = new ArrayList<>();\n+        for (var feedback : result.getFeedbacks()) {\n+            if (feedback.isStaticCodeAnalysisFeedback()) {\n+                staticCodeAnalysisFeedback.add(feedback);\n+            }\n+            else {\n+                testCaseFeedback.add(feedback);\n+            }\n+        }\n+        // Case 1: There are tests and test case feedbacks, find out which tests were not executed or should only count to the score after the due date.\n+        if (testCasesForCurrentDate.size() > 0 && testCaseFeedback.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2NjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMTo0MFrOG8_eSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNTowOVrOG9A4HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzY4OQ==", "bodyText": "isStaticCodeAnalysisEnabled could be null which might be problematic", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466607689", "createdAt": "2020-08-06T18:31:40Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -623,10 +628,11 @@ private void createAutomaticFeedback(Result result, String methodName, boolean p\n      *\n      * @param result the result for which the feedback should be added\n      * @param jobs   the jobs list of the requestBody\n-     * @return a list of feedbacks itemsstored in a result\n+     * @param isStaticCodeAnalysisEnabled flag determining whether static code analysis was enabled\n+     * @return a list of feedback items stored in a result\n      */\n     @SuppressWarnings(\"unchecked\")\n-    private Result addFeedbackToResultNew(Result result, List<BambooBuildResultNotificationDTO.BambooJobDTO> jobs) {\n+    private Result addFeedbackToResultNew(Result result, List<BambooBuildResultNotificationDTO.BambooJobDTO> jobs, Boolean isStaticCodeAnalysisEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDY4NA==", "bodyText": "I've implemented extra checks when creating, importing and editing programming exercises and secured those checks with integration tests. Additionally the database field isStaticCodeAnalysisEnabled is by default false and not nullable. This should be fine", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466630684", "createdAt": "2020-08-06T19:15:09Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -623,10 +628,11 @@ private void createAutomaticFeedback(Result result, String methodName, boolean p\n      *\n      * @param result the result for which the feedback should be added\n      * @param jobs   the jobs list of the requestBody\n-     * @return a list of feedbacks itemsstored in a result\n+     * @param isStaticCodeAnalysisEnabled flag determining whether static code analysis was enabled\n+     * @return a list of feedback items stored in a result\n      */\n     @SuppressWarnings(\"unchecked\")\n-    private Result addFeedbackToResultNew(Result result, List<BambooBuildResultNotificationDTO.BambooJobDTO> jobs) {\n+    private Result addFeedbackToResultNew(Result result, List<BambooBuildResultNotificationDTO.BambooJobDTO> jobs, Boolean isStaticCodeAnalysisEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzY4OQ=="}, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2ODg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMjoyNVrOG8_fsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNjo1M1rOG9A7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwODA1MQ==", "bodyText": "in case isStaticCodeAnalysisEnabled is null, this will lead to a null pointer exception.\nEither you check for equals Boolean.TRUE or you make sure the value cannot be null which basically means you can use boolean above", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466608051", "createdAt": "2020-08-06T18:32:25Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -656,8 +662,14 @@ private Result addFeedbackToResultNew(Result result, List<BambooBuildResultNotif\n \n                     createAutomaticFeedback(result, methodName, true, null);\n                 }\n+                // 3) process static code analysis feedback\n+                boolean hasStaticCodeAnalysisFeedback = false;\n+                if (isStaticCodeAnalysisEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMTYxMw==", "bodyText": "See above. I can additionally secure this but it is no problem.", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466631613", "createdAt": "2020-08-06T19:16:53Z", "author": {"login": "kloessst"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "diffHunk": "@@ -656,8 +662,14 @@ private Result addFeedbackToResultNew(Result result, List<BambooBuildResultNotif\n \n                     createAutomaticFeedback(result, methodName, true, null);\n                 }\n+                // 3) process static code analysis feedback\n+                boolean hasStaticCodeAnalysisFeedback = false;\n+                if (isStaticCodeAnalysisEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwODA1MQ=="}, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ3ODQwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/feedback.model.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNToxN1rOG8_lpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNToxN1rOG8_lpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwOTU3Mw==", "bodyText": "add a note that this must be equal to the constant on the server (including the link to the corresponding file)", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466609573", "createdAt": "2020-08-06T18:35:17Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/feedback.model.ts", "diffHunk": "@@ -18,6 +18,8 @@ export enum FeedbackType {\n     AUTOMATIC_ADAPTED = 'AUTOMATIC_ADAPTED',\n }\n \n+export const STATIC_CODE_ANALYSIS_FEEDBACK_IDENTIFIER = 'SCAFeedbackIdentifier:';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ4MTkyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/entities/feedback.model.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNjoyM1rOG8_n0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxMDoyMVrOG9AuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMDEyOQ==", "bodyText": "why do you call it that and not feedback?\nWould it not make more sense to have this as instance method (without static) and check it for this", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466610129", "createdAt": "2020-08-06T18:36:23Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/entities/feedback.model.ts", "diffHunk": "@@ -33,6 +35,13 @@ export class Feedback implements BaseEntity {\n     public referenceType: string | null; // this string needs to follow UMLModelElementType in Apollon in typings.d.ts\n     public referenceId: string | null;\n \n+    public static isStaticCodeAnalysisFeedback(that: Feedback): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyODE0Mg==", "bodyText": "That's what I first tried when I've written the method. The problem is that we don't get proper feedback TypeScript instances from the server but just plain JSON which is transformed to JavaScript objects. Those objects don't have the proper prototype. I would need to create Feedback instances from the plain JSON received from the server. That's why all the other Feedback methods are also static.", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466628142", "createdAt": "2020-08-06T19:10:21Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/entities/feedback.model.ts", "diffHunk": "@@ -33,6 +35,13 @@ export class Feedback implements BaseEntity {\n     public referenceType: string | null; // this string needs to follow UMLModelElementType in Apollon in typings.d.ts\n     public referenceId: string | null;\n \n+    public static isStaticCodeAnalysisFeedback(that: Feedback): boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMDEyOQ=="}, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ4NTQyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/shared/result/result-detail.component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNzozMlrOG8_qEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNzoxNFrOG9A8dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMDcwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (Feedback.isStaticCodeAnalysisFeedback(feedback)) {\n          \n          \n            \n                        if (feedback.isStaticCodeAnalysisFeedback()) {", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466610707", "createdAt": "2020-08-06T18:37:32Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/result/result-detail.component.ts", "diffHunk": "@@ -65,20 +75,40 @@ export class ResultDetailComponent implements OnInit {\n         return this.resultService.getFeedbackDetailsForResult(resultId).pipe(map(({ body: feedbackList }) => feedbackList!));\n     }\n \n-    private filterAndSetFeedbacks = (feedbackList: Feedback[]) => {\n+    private filterFeedback = (feedbackList: Feedback[]) => {\n         // TODO: The input object is mutated, this could lead to unexpected bugs.\n         this.result.feedbacks = feedbackList!;\n         if (!this.feedbackFilter) {\n-            this.feedbackList = feedbackList;\n+            return feedbackList;\n         } else {\n-            this.feedbackList = this.feedbackFilter\n+            return this.feedbackFilter\n                 .map((test) => {\n                     return feedbackList.find(({ text }) => text === test);\n                 })\n                 .filter(Boolean) as Feedback[];\n         }\n     };\n \n+    /**\n+     * Distinguishes between static code analysis feedback and test case feedback.\n+     * Assigns both lists to the component.\n+     *\n+     * @param feedbackList All available Feedback\n+     */\n+    private partitionAndSetFeedback(feedbackList: Feedback[]) {\n+        const testCaseFeedback: Feedback[] = [];\n+        const staticCodeAnalysisFeedback: Feedback[] = [];\n+        feedbackList.forEach((feedback) => {\n+            if (Feedback.isStaticCodeAnalysisFeedback(feedback)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMTc5Ng==", "bodyText": "See above", "url": "https://github.com/ls1intum/Artemis/pull/1525#discussion_r466631796", "createdAt": "2020-08-06T19:17:14Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/exercises/shared/result/result-detail.component.ts", "diffHunk": "@@ -65,20 +75,40 @@ export class ResultDetailComponent implements OnInit {\n         return this.resultService.getFeedbackDetailsForResult(resultId).pipe(map(({ body: feedbackList }) => feedbackList!));\n     }\n \n-    private filterAndSetFeedbacks = (feedbackList: Feedback[]) => {\n+    private filterFeedback = (feedbackList: Feedback[]) => {\n         // TODO: The input object is mutated, this could lead to unexpected bugs.\n         this.result.feedbacks = feedbackList!;\n         if (!this.feedbackFilter) {\n-            this.feedbackList = feedbackList;\n+            return feedbackList;\n         } else {\n-            this.feedbackList = this.feedbackFilter\n+            return this.feedbackFilter\n                 .map((test) => {\n                     return feedbackList.find(({ text }) => text === test);\n                 })\n                 .filter(Boolean) as Feedback[];\n         }\n     };\n \n+    /**\n+     * Distinguishes between static code analysis feedback and test case feedback.\n+     * Assigns both lists to the component.\n+     *\n+     * @param feedbackList All available Feedback\n+     */\n+    private partitionAndSetFeedback(feedbackList: Feedback[]) {\n+        const testCaseFeedback: Feedback[] = [];\n+        const staticCodeAnalysisFeedback: Feedback[] = [];\n+        feedbackList.forEach((feedback) => {\n+            if (Feedback.isStaticCodeAnalysisFeedback(feedback)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMDcwNw=="}, "originalCommit": {"oid": "d9215ea4a47e8f3662d648a94447d8ceceeea6de"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}