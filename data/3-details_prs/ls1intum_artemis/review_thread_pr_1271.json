{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Nzk1MzY2", "number": 1271, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNTo0MFrODostIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNzozM1rODosvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDAyMDgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNTo0MFrOF3Z7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1MDozMlrOF4yDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg==", "bodyText": "This method throws an error while setting up the bitbucket project (line 132/133): org.springframework.web.client.HttpClientErrorException$Unauthorized: 401\nWhat might I do wrong here? Is there an easier way to upload/create a template file, to test the GET request?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393640742", "createdAt": "2020-03-17T12:25:40Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjQwNA==", "bodyText": "I entered my credentials for bitbucket etc. in the application-artemis.yml using my personal account, are there any special rights needed to setup these repositories?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393832404", "createdAt": "2020-03-17T17:02:26Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2NTI0MA==", "bodyText": "Yes, you need special permissions for those actions. I guess we want to mock bitbucket @krusche?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393865240", "createdAt": "2020-03-17T17:54:22Z", "author": {"login": "jpbernius"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTI5OA==", "bodyText": "I found these functions for mocking:\nbitbucketRequestMockProvider.enableMockingOfRequests();\nbitbucketRequestMockProvider.mockCreateProjectForExercise(programmingExercise);\nbitbucketRequestMockProvider.mockCreateRepository(programmingExercise, \"test\");\n\nAre these creating template files? If yes where and under which filename?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393891298", "createdAt": "2020-03-17T18:37:20Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Mjk2OA==", "bodyText": "It depends what you want to achieve here. If you simply need a programming exercise in the database, just add it directly using the corresponding repository.\nIf you need git repositories, you can also create them in the temp folder of the system and tell the git service (using mockito) to use them instead of the real ones.\nYou might also want to use these methods to mock bitbucket, but it really depends what you want to achieve here", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393952968", "createdAt": "2020-03-17T20:34:33Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMDg2NA==", "bodyText": "The main thing I want to achieve is to create a file in the folder\nfiles/templates\nUnfortunately it is not possible to move files there manually using the fileService and the only way (I found) to create a file there is via the setupProgrammingExercise method.\nBut it is not clear for me how to mock that method or whats the cleanest way to create such a file.", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r395030864", "createdAt": "2020-03-19T13:39:09Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjYyMA==", "bodyText": "then I suggest to leave this out for now. It does not make sense to call setupProgrammingExercise just to create files in the templates folder!", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r395032620", "createdAt": "2020-03-19T13:41:36Z", "author": {"login": "krusche"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NDcyNw==", "bodyText": "Ok I disabled the test case and added a TODO.", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r395084727", "createdAt": "2020-03-19T14:50:32Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MDc0Mg=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDAyNzUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyNzozM1rOF3Z_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDo0MTo1NFrOF3tObA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MTg1NQ==", "bodyText": "This GET request failes, because the attachment file cannot be found. I created and uploaded the file and moved it to the correct folder. What might I be missing here?", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393641855", "createdAt": "2020-03-17T12:27:33Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetCourseIcon() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"icon.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String iconPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.COURSE_ICON_FILEPATH, course.getId());\n+\n+        course.setCourseIcon(iconPath);\n+        courseRepo.save(course);\n+\n+        String receivedIcon = request.get(iconPath, HttpStatus.OK, String.class);\n+        assertThat(receivedIcon).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragAndDropBackgroundFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String backgroundPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_AND_DROP_BACKGROUND_FILEPATH, dragAndDropQuestion.getId());\n+\n+        dragAndDropQuestion.setBackgroundFilePath(backgroundPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(backgroundPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragItemFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        DragItem dragItem = dragAndDropQuestion.getDragItems().get(0);\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String dragItemPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_ITEM_FILEPATH, dragItem.getId());\n+\n+        dragItem.setPictureFilePath(dragItemPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(dragItemPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetFileUploadSubmission() throws Exception {\n+        database.addCourseWithTwoFileUploadExercise();\n+        FileUploadExercise fileUploadExercise = (FileUploadExercise) exerciseRepo.findAll().get(0);\n+        FileUploadSubmission fileUploadSubmission = ModelFactory.generateFileUploadSubmission(true);\n+        fileUploadSubmission = database.addFileUploadSubmission(fileUploadExercise, fileUploadSubmission, \"student1\");\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String filePath = fileService.manageFilesForUpdatedFilePath(null, responsePath,\n+                fileUploadSubmission.buildFilePath(fileUploadExercise.getId(), fileUploadSubmission.getId()), fileUploadSubmission.getId(), true);\n+\n+        fileUploadSubmission.setFilePath(filePath);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/file.png\", HttpStatus.OK, String.class);\n+\n+        String receivedFile = request.get(fileUploadSubmission.getFilePath() + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);\n+        assertThat(receivedFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetLectureAttachment() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture(true);\n+\n+        Attachment attachment = ModelFactory.generateAttachment(ZonedDateTime.now(), lecture);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"attachment.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String attachmentPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.LECTURE_ATTACHMENT_FILEPATH, lecture.getId(), true);\n+\n+        attachment.setLink(attachmentPath);\n+        lecture.addAttachments(attachment);\n+        lectureRepo.save(lecture);\n+        attachmentRepo.save(attachment);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/attachment.png\", HttpStatus.OK, String.class);\n+\n+        String receivedAttachment = request.get(attachmentPath + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2NTYzNg==", "bodyText": "The error 404 is thrown when the file should be returned, but it can not be found at the given path attachmentPath, allthough I saved it there just before.", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393865636", "createdAt": "2020-03-17T17:55:00Z", "author": {"login": "clemenszuck"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetCourseIcon() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"icon.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String iconPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.COURSE_ICON_FILEPATH, course.getId());\n+\n+        course.setCourseIcon(iconPath);\n+        courseRepo.save(course);\n+\n+        String receivedIcon = request.get(iconPath, HttpStatus.OK, String.class);\n+        assertThat(receivedIcon).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragAndDropBackgroundFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String backgroundPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_AND_DROP_BACKGROUND_FILEPATH, dragAndDropQuestion.getId());\n+\n+        dragAndDropQuestion.setBackgroundFilePath(backgroundPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(backgroundPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragItemFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        DragItem dragItem = dragAndDropQuestion.getDragItems().get(0);\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String dragItemPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_ITEM_FILEPATH, dragItem.getId());\n+\n+        dragItem.setPictureFilePath(dragItemPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(dragItemPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetFileUploadSubmission() throws Exception {\n+        database.addCourseWithTwoFileUploadExercise();\n+        FileUploadExercise fileUploadExercise = (FileUploadExercise) exerciseRepo.findAll().get(0);\n+        FileUploadSubmission fileUploadSubmission = ModelFactory.generateFileUploadSubmission(true);\n+        fileUploadSubmission = database.addFileUploadSubmission(fileUploadExercise, fileUploadSubmission, \"student1\");\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String filePath = fileService.manageFilesForUpdatedFilePath(null, responsePath,\n+                fileUploadSubmission.buildFilePath(fileUploadExercise.getId(), fileUploadSubmission.getId()), fileUploadSubmission.getId(), true);\n+\n+        fileUploadSubmission.setFilePath(filePath);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/file.png\", HttpStatus.OK, String.class);\n+\n+        String receivedFile = request.get(fileUploadSubmission.getFilePath() + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);\n+        assertThat(receivedFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetLectureAttachment() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture(true);\n+\n+        Attachment attachment = ModelFactory.generateAttachment(ZonedDateTime.now(), lecture);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"attachment.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String attachmentPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.LECTURE_ATTACHMENT_FILEPATH, lecture.getId(), true);\n+\n+        attachment.setLink(attachmentPath);\n+        lecture.addAttachments(attachment);\n+        lectureRepo.save(lecture);\n+        attachmentRepo.save(attachment);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/attachment.png\", HttpStatus.OK, String.class);\n+\n+        String receivedAttachment = request.get(attachmentPath + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MTg1NQ=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Njk3Mg==", "bodyText": "I committed the change that fixes this issue. You didn't put the lecture in the id folder, so it couldn't find it", "url": "https://github.com/ls1intum/Artemis/pull/1271#discussion_r393956972", "createdAt": "2020-03-17T20:41:54Z", "author": {"login": "maxr96"}, "path": "src/test/java/de/tum/in/www1/artemis/FileIntegrationTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package de.tum.in.www1.artemis;\n+\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.ROOT;\n+import static de.tum.in.www1.artemis.web.rest.ProgrammingExerciseResource.Endpoints.SETUP;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.lib.StoredConfig;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.connector.bamboo.BambooRequestMockProvider;\n+import de.tum.in.www1.artemis.connector.bitbucket.BitbucketRequestMockProvider;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.quiz.DragAndDropQuestion;\n+import de.tum.in.www1.artemis.domain.quiz.DragItem;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.FileService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.ProgrammingExerciseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.GitUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class FileIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    public static final String API_FILE_UPLOAD_SUBMISSIONS = \"/api/file-upload-submissions/\";\n+\n+    @Autowired\n+    CourseRepository courseRepo;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    AttachmentRepository attachmentRepo;\n+\n+    @Autowired\n+    UserRepository userRepo;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    QuizExerciseRepository quizExerciseRepository;\n+\n+    @Autowired\n+    QuizQuestionRepository quizQuestionRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseRepository programmingExerciseRepository;\n+\n+    @Autowired\n+    ProgrammingExerciseService programmingExerciseService;\n+\n+    @Autowired\n+    FileService fileService;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    ParticipationService participationService;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @Autowired\n+    private BambooRequestMockProvider bambooRequestMockProvider;\n+\n+    @Autowired\n+    private BitbucketRequestMockProvider bitbucketRequestMockProvider;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(2, 2, 1);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testSaveTempFile() throws Exception {\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+\n+        String responseFile = request.get(responsePath, HttpStatus.OK, String.class);\n+        assertThat(responseFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetTemplateFile() throws Exception {\n+        database.addCourseWithOneProgrammingExerciseAndTestCases();\n+        ProgrammingExercise programmingExercise = programmingExerciseRepository.findAllWithEagerParticipations().get(0);\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student1\");\n+        database.addStudentParticipationForProgrammingExercise(programmingExercise, \"student2\");\n+\n+        java.io.File localRepoFile = Files.createTempDirectory(\"repo\").toFile();\n+        Git localGit = Git.init().setDirectory(localRepoFile).call();\n+\n+        java.io.File originRepoFile = Files.createTempDirectory(\"repoOrigin\").toFile();\n+        Git remoteGit = Git.init().setDirectory(originRepoFile).call();\n+        StoredConfig config = localGit.getRepository().getConfig();\n+        config.setString(\"remote\", \"origin\", \"url\", originRepoFile.getAbsolutePath());\n+        config.save();\n+        doReturn(new GitUtilService.FileRepositoryUrl(originRepoFile)).when(versionControlService).getCloneRepositoryUrl(anyString(), anyString());\n+\n+        programmingExercise.setId(null);\n+        request.post(ROOT + SETUP, programmingExercise, HttpStatus.OK);\n+        // programmingExerciseService.setupProgrammingExercise(programmingExercise);\n+\n+        request.get(\"/files/templates/\" + programmingExercise.getProgrammingLanguage().toString().toLowerCase() + \"/exercise\", HttpStatus.OK, byte[].class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetCourseIcon() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"icon.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String iconPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.COURSE_ICON_FILEPATH, course.getId());\n+\n+        course.setCourseIcon(iconPath);\n+        courseRepo.save(course);\n+\n+        String receivedIcon = request.get(iconPath, HttpStatus.OK, String.class);\n+        assertThat(receivedIcon).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragAndDropBackgroundFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String backgroundPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_AND_DROP_BACKGROUND_FILEPATH, dragAndDropQuestion.getId());\n+\n+        dragAndDropQuestion.setBackgroundFilePath(backgroundPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(backgroundPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetDragItemFile() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        QuizExercise quizExercise = database.createQuiz(course, ZonedDateTime.now(), null);\n+        DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        quizExerciseRepository.save(quizExercise);\n+\n+        DragItem dragItem = dragAndDropQuestion.getDragItems().get(0);\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"background.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=false\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String dragItemPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.DRAG_ITEM_FILEPATH, dragItem.getId());\n+\n+        dragItem.setPictureFilePath(dragItemPath);\n+        courseRepo.save(course);\n+        quizQuestionRepository.save(dragAndDropQuestion);\n+\n+        String receivedPath = request.get(dragItemPath, HttpStatus.OK, String.class);\n+        assertThat(receivedPath).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetFileUploadSubmission() throws Exception {\n+        database.addCourseWithTwoFileUploadExercise();\n+        FileUploadExercise fileUploadExercise = (FileUploadExercise) exerciseRepo.findAll().get(0);\n+        FileUploadSubmission fileUploadSubmission = ModelFactory.generateFileUploadSubmission(true);\n+        fileUploadSubmission = database.addFileUploadSubmission(fileUploadExercise, fileUploadSubmission, \"student1\");\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"file.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String filePath = fileService.manageFilesForUpdatedFilePath(null, responsePath,\n+                fileUploadSubmission.buildFilePath(fileUploadExercise.getId(), fileUploadSubmission.getId()), fileUploadSubmission.getId(), true);\n+\n+        fileUploadSubmission.setFilePath(filePath);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/file.png\", HttpStatus.OK, String.class);\n+\n+        String receivedFile = request.get(fileUploadSubmission.getFilePath() + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);\n+        assertThat(receivedFile).isEqualTo(\"some data\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetLectureAttachment() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture(true);\n+\n+        Attachment attachment = ModelFactory.generateAttachment(ZonedDateTime.now(), lecture);\n+\n+        MockMultipartFile file = new MockMultipartFile(\"file\", \"attachment.png\", \"application/json\", \"some data\".getBytes());\n+        JsonNode response = request.postWithMultipartFile(\"/api/fileUpload?keepFileName=true\", file.getOriginalFilename(), \"file\", file, JsonNode.class, HttpStatus.CREATED);\n+        String responsePath = response.get(\"path\").asText();\n+        String attachmentPath = fileService.manageFilesForUpdatedFilePath(null, responsePath, Constants.LECTURE_ATTACHMENT_FILEPATH, lecture.getId(), true);\n+\n+        attachment.setLink(attachmentPath);\n+        lecture.addAttachments(attachment);\n+        lectureRepo.save(lecture);\n+        attachmentRepo.save(attachment);\n+\n+        // get access token\n+        String accessToken = request.get(\"/api/files/attachments/access-token/attachment.png\", HttpStatus.OK, String.class);\n+\n+        String receivedAttachment = request.get(attachmentPath + \"?access_token=\" + accessToken, HttpStatus.OK, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MTg1NQ=="}, "originalCommit": {"oid": "08be21c336684808443efecfe5d242e8b15a28e2"}, "originalPosition": 240}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 260, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}