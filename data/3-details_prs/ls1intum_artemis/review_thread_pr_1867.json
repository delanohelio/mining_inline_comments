{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODgyNTcw", "number": 1867, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNDoxNlrOENuhMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowODowN1rOENunQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI5MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNDoxNlrOGwfmdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNDoxNlrOGwfmdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMjU4MA==", "bodyText": "we should use forbidden(...) here", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453502580", "createdAt": "2020-07-13T09:04:16Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -67,6 +88,65 @@ public StudentExam findOneWithExercisesByUserIdAndExamId(Long userId, Long examI\n         return studentExamRepository.findWithExercisesByUserIdAndExamId(userId, examId);\n     }\n \n+    /**\n+     * submit StudentExam and uses submissions as final submissions if studentExam is not yet submitted\n+     * and if it was submitted after exam startDate and before individual endDate + gracePeriod\n+     *\n+     * @param studentExam latest studentExam object which will be submitted (final submission)\n+     */\n+    public void submitStudentExam(StudentExam studentExam) {\n+        log.debug(\"Submit student exam with id {}\", studentExam.getId());\n+        // checks if student exam is already marked as submitted\n+        if (studentExam.isSubmitted()) {\n+            throw new IllegalStateException(\"StudentExam is already marked as submitted\");\n+        }\n+\n+        // gets individual exam end or exam.endDate if individual cannot be calculated\n+        ZonedDateTime examEndDate = studentExam.getExam().getStartDate() != null && studentExam.getWorkingTime() != null\n+                ? studentExam.getExam().getStartDate().plusSeconds(studentExam.getWorkingTime())\n+                : studentExam.getExam().getEndDate();\n+\n+        // checks if student exam is live (after start date, before end date + grace period)\n+        if ((studentExam.getExam().getStartDate() != null && !ZonedDateTime.now().isAfter(studentExam.getExam().getStartDate()))\n+                || (examEndDate != null && !(ZonedDateTime.now().isBefore(examEndDate.plusSeconds(studentExam.getExam().getGracePeriod()))))) {\n+            throw new IllegalStateException(\"StudentExam cannot be marked as submitted, because it is not invoked between start and end of exam\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI5NjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNToyOFrOGwfpYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToxMDozMFrOGws86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMzMzMA==", "bodyText": "Security: we should double check that the user is owner of the participation so that no wrong data can be injected over REST here", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453503330", "createdAt": "2020-07-13T09:05:28Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -67,6 +88,65 @@ public StudentExam findOneWithExercisesByUserIdAndExamId(Long userId, Long examI\n         return studentExamRepository.findWithExercisesByUserIdAndExamId(userId, examId);\n     }\n \n+    /**\n+     * submit StudentExam and uses submissions as final submissions if studentExam is not yet submitted\n+     * and if it was submitted after exam startDate and before individual endDate + gracePeriod\n+     *\n+     * @param studentExam latest studentExam object which will be submitted (final submission)\n+     */\n+    public void submitStudentExam(StudentExam studentExam) {\n+        log.debug(\"Submit student exam with id {}\", studentExam.getId());\n+        // checks if student exam is already marked as submitted\n+        if (studentExam.isSubmitted()) {\n+            throw new IllegalStateException(\"StudentExam is already marked as submitted\");\n+        }\n+\n+        // gets individual exam end or exam.endDate if individual cannot be calculated\n+        ZonedDateTime examEndDate = studentExam.getExam().getStartDate() != null && studentExam.getWorkingTime() != null\n+                ? studentExam.getExam().getStartDate().plusSeconds(studentExam.getWorkingTime())\n+                : studentExam.getExam().getEndDate();\n+\n+        // checks if student exam is live (after start date, before end date + grace period)\n+        if ((studentExam.getExam().getStartDate() != null && !ZonedDateTime.now().isAfter(studentExam.getExam().getStartDate()))\n+                || (examEndDate != null && !(ZonedDateTime.now().isBefore(examEndDate.plusSeconds(studentExam.getExam().getGracePeriod()))))) {\n+            throw new IllegalStateException(\"StudentExam cannot be marked as submitted, because it is not invoked between start and end of exam\");\n+        }\n+\n+        studentExam.getExercises().forEach(exercise -> {\n+            // if exercise is either QuizExercise, TextExercise or ModelingExercise and exactly one participation exists\n+            if (exercise.getStudentParticipations() != null && exercise.getStudentParticipations().size() == 1) {\n+                exercise.getStudentParticipations().forEach(studentParticipation -> {\n+                    // if exactly one submission exists we save the submission\n+                    if (studentParticipation.getSubmissions() != null && studentParticipation.getSubmissions().size() == 1) {\n+                        studentParticipation.setExercise(exercise);\n+                        studentParticipation.getSubmissions().forEach(submission -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyMTMyMw==", "bodyText": "See 6cc959b", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453721323", "createdAt": "2020-07-13T15:10:30Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -67,6 +88,65 @@ public StudentExam findOneWithExercisesByUserIdAndExamId(Long userId, Long examI\n         return studentExamRepository.findWithExercisesByUserIdAndExamId(userId, examId);\n     }\n \n+    /**\n+     * submit StudentExam and uses submissions as final submissions if studentExam is not yet submitted\n+     * and if it was submitted after exam startDate and before individual endDate + gracePeriod\n+     *\n+     * @param studentExam latest studentExam object which will be submitted (final submission)\n+     */\n+    public void submitStudentExam(StudentExam studentExam) {\n+        log.debug(\"Submit student exam with id {}\", studentExam.getId());\n+        // checks if student exam is already marked as submitted\n+        if (studentExam.isSubmitted()) {\n+            throw new IllegalStateException(\"StudentExam is already marked as submitted\");\n+        }\n+\n+        // gets individual exam end or exam.endDate if individual cannot be calculated\n+        ZonedDateTime examEndDate = studentExam.getExam().getStartDate() != null && studentExam.getWorkingTime() != null\n+                ? studentExam.getExam().getStartDate().plusSeconds(studentExam.getWorkingTime())\n+                : studentExam.getExam().getEndDate();\n+\n+        // checks if student exam is live (after start date, before end date + grace period)\n+        if ((studentExam.getExam().getStartDate() != null && !ZonedDateTime.now().isAfter(studentExam.getExam().getStartDate()))\n+                || (examEndDate != null && !(ZonedDateTime.now().isBefore(examEndDate.plusSeconds(studentExam.getExam().getGracePeriod()))))) {\n+            throw new IllegalStateException(\"StudentExam cannot be marked as submitted, because it is not invoked between start and end of exam\");\n+        }\n+\n+        studentExam.getExercises().forEach(exercise -> {\n+            // if exercise is either QuizExercise, TextExercise or ModelingExercise and exactly one participation exists\n+            if (exercise.getStudentParticipations() != null && exercise.getStudentParticipations().size() == 1) {\n+                exercise.getStudentParticipations().forEach(studentParticipation -> {\n+                    // if exactly one submission exists we save the submission\n+                    if (studentParticipation.getSubmissions() != null && studentParticipation.getSubmissions().size() == 1) {\n+                        studentParticipation.setExercise(exercise);\n+                        studentParticipation.getSubmissions().forEach(submission -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMzMzMA=="}, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODMwMDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNjozNlrOGwfsAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo1NzoyNlrOGwxWhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDAwMg==", "bodyText": "Security: we should compare the submission with the existing one, so that no wrong data can be injected here (e.g. a submission with a different ID that overrides another submission of another user)", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453504002", "createdAt": "2020-07-13T09:06:36Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -67,6 +88,65 @@ public StudentExam findOneWithExercisesByUserIdAndExamId(Long userId, Long examI\n         return studentExamRepository.findWithExercisesByUserIdAndExamId(userId, examId);\n     }\n \n+    /**\n+     * submit StudentExam and uses submissions as final submissions if studentExam is not yet submitted\n+     * and if it was submitted after exam startDate and before individual endDate + gracePeriod\n+     *\n+     * @param studentExam latest studentExam object which will be submitted (final submission)\n+     */\n+    public void submitStudentExam(StudentExam studentExam) {\n+        log.debug(\"Submit student exam with id {}\", studentExam.getId());\n+        // checks if student exam is already marked as submitted\n+        if (studentExam.isSubmitted()) {\n+            throw new IllegalStateException(\"StudentExam is already marked as submitted\");\n+        }\n+\n+        // gets individual exam end or exam.endDate if individual cannot be calculated\n+        ZonedDateTime examEndDate = studentExam.getExam().getStartDate() != null && studentExam.getWorkingTime() != null\n+                ? studentExam.getExam().getStartDate().plusSeconds(studentExam.getWorkingTime())\n+                : studentExam.getExam().getEndDate();\n+\n+        // checks if student exam is live (after start date, before end date + grace period)\n+        if ((studentExam.getExam().getStartDate() != null && !ZonedDateTime.now().isAfter(studentExam.getExam().getStartDate()))\n+                || (examEndDate != null && !(ZonedDateTime.now().isBefore(examEndDate.plusSeconds(studentExam.getExam().getGracePeriod()))))) {\n+            throw new IllegalStateException(\"StudentExam cannot be marked as submitted, because it is not invoked between start and end of exam\");\n+        }\n+\n+        studentExam.getExercises().forEach(exercise -> {\n+            // if exercise is either QuizExercise, TextExercise or ModelingExercise and exactly one participation exists\n+            if (exercise.getStudentParticipations() != null && exercise.getStudentParticipations().size() == 1) {\n+                exercise.getStudentParticipations().forEach(studentParticipation -> {\n+                    // if exactly one submission exists we save the submission\n+                    if (studentParticipation.getSubmissions() != null && studentParticipation.getSubmissions().size() == 1) {\n+                        studentParticipation.setExercise(exercise);\n+                        studentParticipation.getSubmissions().forEach(submission -> {\n+                            submission.setParticipation(studentParticipation);\n+                            submission.submissionDate(ZonedDateTime.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MzQxNQ==", "bodyText": "See f73351d", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453793415", "createdAt": "2020-07-13T16:57:26Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -67,6 +88,65 @@ public StudentExam findOneWithExercisesByUserIdAndExamId(Long userId, Long examI\n         return studentExamRepository.findWithExercisesByUserIdAndExamId(userId, examId);\n     }\n \n+    /**\n+     * submit StudentExam and uses submissions as final submissions if studentExam is not yet submitted\n+     * and if it was submitted after exam startDate and before individual endDate + gracePeriod\n+     *\n+     * @param studentExam latest studentExam object which will be submitted (final submission)\n+     */\n+    public void submitStudentExam(StudentExam studentExam) {\n+        log.debug(\"Submit student exam with id {}\", studentExam.getId());\n+        // checks if student exam is already marked as submitted\n+        if (studentExam.isSubmitted()) {\n+            throw new IllegalStateException(\"StudentExam is already marked as submitted\");\n+        }\n+\n+        // gets individual exam end or exam.endDate if individual cannot be calculated\n+        ZonedDateTime examEndDate = studentExam.getExam().getStartDate() != null && studentExam.getWorkingTime() != null\n+                ? studentExam.getExam().getStartDate().plusSeconds(studentExam.getWorkingTime())\n+                : studentExam.getExam().getEndDate();\n+\n+        // checks if student exam is live (after start date, before end date + grace period)\n+        if ((studentExam.getExam().getStartDate() != null && !ZonedDateTime.now().isAfter(studentExam.getExam().getStartDate()))\n+                || (examEndDate != null && !(ZonedDateTime.now().isBefore(examEndDate.plusSeconds(studentExam.getExam().getGracePeriod()))))) {\n+            throw new IllegalStateException(\"StudentExam cannot be marked as submitted, because it is not invoked between start and end of exam\");\n+        }\n+\n+        studentExam.getExercises().forEach(exercise -> {\n+            // if exercise is either QuizExercise, TextExercise or ModelingExercise and exactly one participation exists\n+            if (exercise.getStudentParticipations() != null && exercise.getStudentParticipations().size() == 1) {\n+                exercise.getStudentParticipations().forEach(studentParticipation -> {\n+                    // if exactly one submission exists we save the submission\n+                    if (studentParticipation.getSubmissions() != null && studentParticipation.getSubmissions().size() == 1) {\n+                        studentParticipation.setExercise(exercise);\n+                        studentParticipation.getSubmissions().forEach(submission -> {\n+                            submission.setParticipation(studentParticipation);\n+                            submission.submissionDate(ZonedDateTime.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDAwMg=="}, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODMwNTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNzo0NVrOGwfulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowNzo0NVrOGwfulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDY2Mw==", "bodyText": "Please be more specific. It is important to note that it includes exercises, participations and submissions, otherwise the call won't work", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453504663", "createdAt": "2020-07-13T09:07:45Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -148,6 +148,34 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         return ResponseEntity.ok(studentExamRepository.save(studentExam));\n     }\n \n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/studentExams/submit : Submits the student exam\n+     * Updates all submissions and marks student exam as submitted according to given student exam\n+     * @param courseId      the course to which the student exams belong to\n+     * @param examId        the exam to which the student exams belong to\n+     * @param studentExam   the student exam parameter (request body)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODMwNjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowODowN1rOGwfvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTowODowN1rOGwfvaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDg3Mw==", "bodyText": "Please add an error message into the bad request here", "url": "https://github.com/ls1intum/Artemis/pull/1867#discussion_r453504873", "createdAt": "2020-07-13T09:08:07Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -148,6 +148,34 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         return ResponseEntity.ok(studentExamRepository.save(studentExam));\n     }\n \n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/studentExams/submit : Submits the student exam\n+     * Updates all submissions and marks student exam as submitted according to given student exam\n+     * @param courseId      the course to which the student exams belong to\n+     * @param examId        the exam to which the student exams belong to\n+     * @param studentExam   the student exam parameter (request body)\n+     * @return              empty response with status code:\n+     *                          200 if successful\n+     *                          400 if student exam was in an illegal state\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/studentExams/submit\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> submitStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestBody StudentExam studentExam) {\n+        log.debug(\"REST request to mark the studentExam as submitted : {}\", studentExam.getId());\n+        Optional<ResponseEntity<Void>> accessFailure = this.studentExamAccessService.checkStudentExamAccess(courseId, examId, studentExam.getId());\n+        if (accessFailure.isPresent()) {\n+            return accessFailure.get();\n+        }\n+        try {\n+            studentExamService.submitStudentExam(studentExam);\n+        }\n+        catch (IllegalStateException exception) {\n+            log.debug(\"REST request to mark the studentExam as failed, because of illegal state of StudentExam : {}\", studentExam.getId());\n+            return ResponseEntity.badRequest().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8cc72a587df92941ecdd24a30891c4acf45c2b"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}