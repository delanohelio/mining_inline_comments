{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Mzc1OTY1", "number": 1698, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowNzo1M1rOEIaLiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowNzo1M1rOEIaLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjUzMDAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowNzo1M1rOGoWklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowNzo1M1rOGoWklg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NjAzOA==", "bodyText": "What would happen if both withExerciseGroups and withStudents are true?", "url": "https://github.com/ls1intum/Artemis/pull/1698#discussion_r444966038", "createdAt": "2020-06-24T15:07:53Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -150,22 +150,27 @@ public ExamResource(UserService userService, CourseService courseService, ExamRe\n     /**\n      * GET /courses/{courseId}/exams/{examId} : Find an exam by id.\n      *\n-     * @param courseId      the course to which the exam belongs\n-     * @param examId        the exam to find\n-     * @param withStudents  boolean flag whether to include all students registered for the exam\n+     * @param courseId              the course to which the exam belongs\n+     * @param examId                the exam to find\n+     * @param withStudents          boolean flag whether to include all students registered for the exam\n+     * @param withExerciseGroups    boolean flag whether to include all exercise groups of the exam\n      * @return the ResponseEntity with status 200 (OK) and with the found exam as body\n      */\n     @GetMapping(\"/courses/{courseId}/exams/{examId}\")\n     @PreAuthorize(\"hasAnyRole('ADMIN', 'INSTRUCTOR')\")\n-    public ResponseEntity<Exam> getExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestParam(defaultValue = \"false\") boolean withStudents) {\n+    public ResponseEntity<Exam> getExam(@PathVariable Long courseId, @PathVariable Long examId, @RequestParam(defaultValue = \"false\") boolean withStudents,\n+            @RequestParam(defaultValue = \"false\") boolean withExerciseGroups) {\n         log.debug(\"REST request to get exam : {}\", examId);\n         Optional<ResponseEntity<Exam>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccess(courseId, examId);\n         if (courseAndExamAccessFailure.isPresent()) {\n             return courseAndExamAccessFailure.get();\n         }\n-        if (!withStudents) {\n+        if (!withStudents && !withExerciseGroups) {\n             return ResponseEntity.ok(examService.findOne(examId));\n         }\n+        if (withExerciseGroups) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdd68c99c53a5d60ca2c21d3ccf8f0853b48507"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4907, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}