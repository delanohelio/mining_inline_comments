{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTEyMjI3", "number": 1727, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MTozM1rOEKeexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMzo0OVrOELE5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDIwNjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/CourseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MTozM1rOGriXrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjo0MTozNVrOGrkOnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNTA3MQ==", "bodyText": "The comment (and also the method name) should include that this only gets exercises after the exam is over!", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448305071", "createdAt": "2020-07-01T11:41:33Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/CourseService.java", "diffHunk": "@@ -183,6 +187,39 @@ public Course findOneWithExercises(long courseId) {\n         return courseRepository.findWithEagerExercisesById(courseId);\n     }\n \n+    /**\n+     * Get one course by id with all exercises for all exams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNTUxOQ==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448335519", "createdAt": "2020-07-01T12:41:35Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/service/CourseService.java", "diffHunk": "@@ -183,6 +187,39 @@ public Course findOneWithExercises(long courseId) {\n         return courseRepository.findWithEagerExercisesById(courseId);\n     }\n \n+    /**\n+     * Get one course by id with all exercises for all exams", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNTA3MQ=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDIxMjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MzozOVrOGribiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjo0ODozNlrOGrkc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjA1OQ==", "bodyText": "not related to this PR as this is reusing existing code, but userHasPermission should have a better name to indicate the check for Instructor OR TA in the course.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448306059", "createdAt": "2020-07-01T11:43:39Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "diffHunk": "@@ -558,6 +593,68 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n         return ResponseUtil.wrapOrNotFound(Optional.of(course));\n     }\n \n+    /**\n+     * GET /courses/:courseId/exam/:examId:for-exam-tutor-dashboard\n+     *\n+     * @param courseId the id of the course to retrieve\n+     * @param examId the id of the exam that contains the exercises\n+     * @return data about a course including all exercises, plus some data for the tutor as tutor status for assessment\n+     */\n+    @GetMapping(\"/courses/{courseId}/exam/{examId}/for-exam-tutor-dashboard\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Course> getCourseForExamTutorDashboard(@PathVariable long courseId, @PathVariable long examId) {\n+        log.debug(\"REST request /courses/{courseId}/exam/{examId}/for-exam-tutor-dashboard\");\n+        Course course = courseService.findOneWithExamExercises(courseId, examId);\n+        if (course == null) {\n+            return notFound();\n+        }\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!userHasPermission(course, user)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzOTE2MA==", "bodyText": "Renamed method", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448339160", "createdAt": "2020-07-01T12:48:36Z", "author": {"login": "JonasPetry"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "diffHunk": "@@ -558,6 +593,68 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n         return ResponseUtil.wrapOrNotFound(Optional.of(course));\n     }\n \n+    /**\n+     * GET /courses/:courseId/exam/:examId:for-exam-tutor-dashboard\n+     *\n+     * @param courseId the id of the course to retrieve\n+     * @param examId the id of the exam that contains the exercises\n+     * @return data about a course including all exercises, plus some data for the tutor as tutor status for assessment\n+     */\n+    @GetMapping(\"/courses/{courseId}/exam/{examId}/for-exam-tutor-dashboard\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Course> getCourseForExamTutorDashboard(@PathVariable long courseId, @PathVariable long examId) {\n+        log.debug(\"REST request /courses/{courseId}/exam/{examId}/for-exam-tutor-dashboard\");\n+        Course course = courseService.findOneWithExamExercises(courseId, examId);\n+        if (course == null) {\n+            return notFound();\n+        }\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!userHasPermission(course, user)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjA1OQ=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDIzNzM5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/manage/course-management.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1MTo0MVrOGriqkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjozODo1OVrOGrkJSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwOTkwNA==", "bodyText": "I would either simplify this like so:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (examId) {\n          \n          \n            \n                        return this.http\n          \n          \n            \n                            .get<Course>(`${this.resourceUrl}/${courseId}/exam/${examId}/for-exam-tutor-dashboard`, { observe: 'response' })\n          \n          \n            \n                            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return this.http\n          \n          \n            \n                            .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n          \n          \n            \n                            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n          \n          \n            \n                    const url = examId\n          \n          \n            \n                        ? `${this.resourceUrl}/${courseId}/exam/${examId}/for-exam-tutor-dashboard`\n          \n          \n            \n                        : `${this.resourceUrl}/${courseId}/for-tutor-dashboard`;\n          \n          \n            \n                    return this.http\n          \n          \n            \n                            .get<Course>(url, { observe: 'response' })\n          \n          \n            \n                            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n          \n      \n    \n    \n  \n\nOR have two different methods here and move the logic which method to call to the component.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448309904", "createdAt": "2020-07-01T11:51:41Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/course/manage/course-management.service.ts", "diffHunk": "@@ -158,11 +158,18 @@ export class CourseManagementService {\n     /**\n      * returns the course with the provided unique identifier for the tutor dashboard\n      * @param courseId - the id of the course\n+     * @param examId - Id of the exam when it is in exam mode, otherwise undefined\n      */\n-    getForTutors(courseId: number): Observable<EntityResponseType> {\n-        return this.http\n-            .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n-            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n+    getForTutors(courseId: number, examId: number): Observable<EntityResponseType> {\n+        if (examId) {\n+            return this.http\n+                .get<Course>(`${this.resourceUrl}/${courseId}/exam/${examId}/for-exam-tutor-dashboard`, { observe: 'response' })\n+                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n+        } else {\n+            return this.http\n+                .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n+                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNDE1NA==", "bodyText": "Refactored", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448334154", "createdAt": "2020-07-01T12:38:59Z", "author": {"login": "JonasPetry"}, "path": "src/main/webapp/app/course/manage/course-management.service.ts", "diffHunk": "@@ -158,11 +158,18 @@ export class CourseManagementService {\n     /**\n      * returns the course with the provided unique identifier for the tutor dashboard\n      * @param courseId - the id of the course\n+     * @param examId - Id of the exam when it is in exam mode, otherwise undefined\n      */\n-    getForTutors(courseId: number): Observable<EntityResponseType> {\n-        return this.http\n-            .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n-            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n+    getForTutors(courseId: number, examId: number): Observable<EntityResponseType> {\n+        if (examId) {\n+            return this.http\n+                .get<Course>(`${this.resourceUrl}/${courseId}/exam/${examId}/for-exam-tutor-dashboard`, { observe: 'response' })\n+                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n+        } else {\n+            return this.http\n+                .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n+                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwOTkwNA=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDI0NTU5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1NDoyNVrOGrivoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjozNTowMlrOGrkA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMTIwMA==", "bodyText": "Do we also need a check like that for other exercise types? If so, I would move this into the AccountService. Otherwise, it is fine.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448311200", "createdAt": "2020-07-01T11:54:25Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -133,7 +134,14 @@ export class TextSubmissionAssessmentComponent implements OnInit {\n         this.submission = this.participation?.submissions[0] as TextSubmission;\n         this.exercise = this.participation?.exercise as TextExercise;\n         this.result = this.submission?.result;\n-        this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course!);\n+        this.courseId = this.exercise?.course ? this.exercise?.course?.id! : this.exercise?.exerciseGroup?.exam?.course?.id!;\n+\n+        // case distinction for exam mode\n+        if (this.exercise!.course) {\n+            this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course);\n+        } else {\n+            this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.exerciseGroup!.exam!.course!);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzMjAyNA==", "bodyText": "Added isAtLeastInstructorInCourseForExam(exercise: Exercise) that takes an exercise instead of a course and does the case distinction", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448332024", "createdAt": "2020-07-01T12:35:02Z", "author": {"login": "JonasPetry"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -133,7 +134,14 @@ export class TextSubmissionAssessmentComponent implements OnInit {\n         this.submission = this.participation?.submissions[0] as TextSubmission;\n         this.exercise = this.participation?.exercise as TextExercise;\n         this.result = this.submission?.result;\n-        this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course!);\n+        this.courseId = this.exercise?.course ? this.exercise?.course?.id! : this.exercise?.exerciseGroup?.exam?.course?.id!;\n+\n+        // case distinction for exam mode\n+        if (this.exercise!.course) {\n+            this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course);\n+        } else {\n+            this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.exerciseGroup!.exam!.course!);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMTIwMA=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDI0ODY3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1NToyMlrOGrixcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjo0NjoyOVrOGrkYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMTY2NQ==", "bodyText": "Could this be a getter? :D\nOtherwise, please add this to resetComponent() as well.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448311665", "createdAt": "2020-07-01T11:55:22Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -30,6 +30,7 @@ import { StructuredGradingCriterionService } from 'app/exercises/shared/structur\n export class TextSubmissionAssessmentComponent implements OnInit {\n     private userId: number | null;\n     exerciseId: number;\n+    courseId: number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzODAxNg==", "bodyText": "I think it should not be a getter because the exercise (where we get the course from) is not always initialised. I've set it to 0 in the resetComponent().", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448338016", "createdAt": "2020-07-01T12:46:29Z", "author": {"login": "JonasPetry"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -30,6 +30,7 @@ import { StructuredGradingCriterionService } from 'app/exercises/shared/structur\n export class TextSubmissionAssessmentComponent implements OnInit {\n     private userId: number | null;\n     exerciseId: number;\n+    courseId: number;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMTY2NQ=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDI1OTA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1ODo1M1rOGri4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoyNDoxMVrOGrjpMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzM2OQ==", "bodyText": "Not sure if this is a good idea.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448313369", "createdAt": "2020-07-01T11:58:53Z", "author": {"login": "jpbernius"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -192,6 +291,8 @@\n     @Autowired\n     private ExamRepository examRepository;\n \n+    private List<User> users;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyNTkzNw==", "bodyText": "Moved to CourseIntegrationTest", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448325937", "createdAt": "2020-07-01T12:24:11Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -192,6 +291,8 @@\n     @Autowired\n     private ExamRepository examRepository;\n \n+    private List<User> users;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzM2OQ=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDI2MDE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1OToxNFrOGri4zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoyMzo1OVrOGrjoyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzU1MQ==", "bodyText": "I think i would pass the user as an argument to this method.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448313551", "createdAt": "2020-07-01T11:59:14Z", "author": {"login": "jpbernius"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -361,6 +462,14 @@ public Course createCourse() {\n         return courseRepo.save(course);\n     }\n \n+    public Course createCourseWithExamAndExerciseGroupAndExercises() {\n+        Course course = createCourse();\n+        Exam exam = addExam(course, this.users.get(0), ZonedDateTime.now(), ZonedDateTime.now(), ZonedDateTime.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyNTgzNA==", "bodyText": "Done", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r448325834", "createdAt": "2020-07-01T12:23:59Z", "author": {"login": "JonasPetry"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -361,6 +462,14 @@ public Course createCourse() {\n         return courseRepo.save(course);\n     }\n \n+    public Course createCourseWithExamAndExerciseGroupAndExercises() {\n+        Course course = createCourse();\n+        Exam exam = addExam(course, this.users.get(0), ZonedDateTime.now(), ZonedDateTime.now(), ZonedDateTime.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzU1MQ=="}, "originalCommit": {"oid": "634f3ca326c47f5c6784f0c15d5166cbe3da49cd"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQ5MzA5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/dashboards/tutor-course-dashboard/tutor-course-dashboard.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMjo1OTo1NlrOGsfL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTowNjo1NVrOGss30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMTQ4NQ==", "bodyText": "Maybe like that?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            let exercises: Exercise[] = [];\n          \n          \n            \n                            this.exam.exerciseGroups?.forEach(function (exerciseGroup) {\n          \n          \n            \n                                if (exerciseGroup.exercises) {\n          \n          \n            \n                                    exercises = exercises.concat(exerciseGroup.exercises);\n          \n          \n            \n                                }\n          \n          \n            \n                            });\n          \n          \n            \n                            const exercises = this.exam.exerciseGroups?.\n          \n          \n            \n                            \t.filter((exerciseGroup) => !!exerciseGroup.exercises)\n          \n          \n            \n                            \t.reduce((exercises, exerciseGroup) => exercises.concat(exerciseGroup.exercises), []);", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r449301485", "createdAt": "2020-07-02T22:59:56Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/course/dashboards/tutor-course-dashboard/tutor-course-dashboard.component.ts", "diffHunk": "@@ -88,15 +90,22 @@ export class TutorCourseDashboardComponent implements OnInit, AfterViewInit {\n     loadAll() {\n         const examId = Number(this.route.snapshot.paramMap.get('examId'));\n         this.isExamMode = !!examId;\n-        this.courseService.getForTutors(this.courseId, examId).subscribe(\n-            (res: HttpResponse<Course>) => {\n-                this.course = Course.from(res.body!);\n-                this.course.isAtLeastTutor = this.accountService.isAtLeastTutorInCourse(this.course);\n-                this.course.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.course);\n-\n-                if (this.course.exercises && this.course.exercises.length > 0) {\n+        if (this.isExamMode) {\n+            this.courseService.getExamWithExercises(this.courseId, examId).subscribe((res: HttpResponse<Exam>) => {\n+                this.exam = res.body!;\n+                this.course = res.body!.course;\n+\n+                // get all exercises\n+                let exercises: Exercise[] = [];\n+                this.exam.exerciseGroups?.forEach(function (exerciseGroup) {\n+                    if (exerciseGroup.exercises) {\n+                        exercises = exercises.concat(exerciseGroup.exercises);\n+                    }\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774c736a991c1a9ebed82563876b8752016993f1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNTcxNQ==", "bodyText": "This didn't work so I reverted it. Needs more Typescript magic I think :)", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r449525715", "createdAt": "2020-07-03T11:06:55Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/course/dashboards/tutor-course-dashboard/tutor-course-dashboard.component.ts", "diffHunk": "@@ -88,15 +90,22 @@ export class TutorCourseDashboardComponent implements OnInit, AfterViewInit {\n     loadAll() {\n         const examId = Number(this.route.snapshot.paramMap.get('examId'));\n         this.isExamMode = !!examId;\n-        this.courseService.getForTutors(this.courseId, examId).subscribe(\n-            (res: HttpResponse<Course>) => {\n-                this.course = Course.from(res.body!);\n-                this.course.isAtLeastTutor = this.accountService.isAtLeastTutorInCourse(this.course);\n-                this.course.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.course);\n-\n-                if (this.course.exercises && this.course.exercises.length > 0) {\n+        if (this.isExamMode) {\n+            this.courseService.getExamWithExercises(this.courseId, examId).subscribe((res: HttpResponse<Exam>) => {\n+                this.exam = res.body!;\n+                this.course = res.body!.course;\n+\n+                // get all exercises\n+                let exercises: Exercise[] = [];\n+                this.exam.exerciseGroups?.forEach(function (exerciseGroup) {\n+                    if (exerciseGroup.exercises) {\n+                        exercises = exercises.concat(exerciseGroup.exercises);\n+                    }\n+                });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMTQ4NQ=="}, "originalCommit": {"oid": "774c736a991c1a9ebed82563876b8752016993f1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQ5ODc4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/manage/course-management.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMjo1NVrOGsfPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTozNDoxMFrOGsthEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMjI3OQ==", "bodyText": "Why is this a TODO?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.http.get<Exam>(url, { observe: 'response' });\n          \n          \n            \n                    // TODO: convert date from server\n          \n          \n            \n                    // .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n          \n          \n            \n                    return this.http.get<Exam>(url, { observe: 'response' })\n          \n          \n            \n                        .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r449302279", "createdAt": "2020-07-02T23:02:55Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/course/manage/course-management.service.ts", "diffHunk": "@@ -155,21 +157,27 @@ export class CourseManagementService {\n             .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n     }\n \n+    /**\n+     * returns the course with the provided unique identifier for the tutor dashboard\n+     * @param courseId - the id of the course\n+     */\n+    getForTutors(courseId: number): Observable<EntityResponseType> {\n+        const url = `${this.resourceUrl}/${courseId}/for-tutor-dashboard`;\n+        return this.http\n+            .get<Course>(url, { observe: 'response' })\n+            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n+    }\n+\n     /**\n      * returns the course with the provided unique identifier for the tutor dashboard\n      * @param courseId - the id of the course\n      * @param examId - Id of the exam when it is in exam mode, otherwise undefined\n      */\n-    getForTutors(courseId: number, examId: number): Observable<EntityResponseType> {\n-        if (examId) {\n-            return this.http\n-                .get<Course>(`${this.resourceUrl}/${courseId}/exam/${examId}/for-exam-tutor-dashboard`, { observe: 'response' })\n-                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n-        } else {\n-            return this.http\n-                .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n-                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n-        }\n+    getExamWithExercises(courseId: number, examId: number): Observable<ExamEntityResponseType> {\n+        const url = `${this.resourceUrl}/${courseId}/exams/${examId}/for-exam-tutor-dashboard`;\n+        return this.http.get<Exam>(url, { observe: 'response' });\n+        // TODO: convert date from server\n+        // .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774c736a991c1a9ebed82563876b8752016993f1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzNjI3Mg==", "bodyText": "Types were not matching because this was implemented in the course service. Moved this to the exam service.", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r449536272", "createdAt": "2020-07-03T11:34:10Z", "author": {"login": "kloessst"}, "path": "src/main/webapp/app/course/manage/course-management.service.ts", "diffHunk": "@@ -155,21 +157,27 @@ export class CourseManagementService {\n             .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n     }\n \n+    /**\n+     * returns the course with the provided unique identifier for the tutor dashboard\n+     * @param courseId - the id of the course\n+     */\n+    getForTutors(courseId: number): Observable<EntityResponseType> {\n+        const url = `${this.resourceUrl}/${courseId}/for-tutor-dashboard`;\n+        return this.http\n+            .get<Course>(url, { observe: 'response' })\n+            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n+    }\n+\n     /**\n      * returns the course with the provided unique identifier for the tutor dashboard\n      * @param courseId - the id of the course\n      * @param examId - Id of the exam when it is in exam mode, otherwise undefined\n      */\n-    getForTutors(courseId: number, examId: number): Observable<EntityResponseType> {\n-        if (examId) {\n-            return this.http\n-                .get<Course>(`${this.resourceUrl}/${courseId}/exam/${examId}/for-exam-tutor-dashboard`, { observe: 'response' })\n-                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n-        } else {\n-            return this.http\n-                .get<Course>(`${this.resourceUrl}/${courseId}/for-tutor-dashboard`, { observe: 'response' })\n-                .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n-        }\n+    getExamWithExercises(courseId: number, examId: number): Observable<ExamEntityResponseType> {\n+        const url = `${this.resourceUrl}/${courseId}/exams/${examId}/for-exam-tutor-dashboard`;\n+        return this.http.get<Exam>(url, { observe: 'response' });\n+        // TODO: convert date from server\n+        // .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMjI3OQ=="}, "originalCommit": {"oid": "774c736a991c1a9ebed82563876b8752016993f1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDQ5OTkwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMzo0OVrOGsfPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowMzo0OVrOGsfPvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMjQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    const course = this.exercise?.course ? this.exercise?.course : this.exercise?.exerciseGroup?.exam?.course;\n          \n          \n            \n                    const course = this.exercise?.course || this.exercise?.exerciseGroup?.exam?.course;", "url": "https://github.com/ls1intum/Artemis/pull/1727#discussion_r449302460", "createdAt": "2020-07-02T23:03:49Z", "author": {"login": "jpbernius"}, "path": "src/main/webapp/app/exercises/text/assess-new/text-submission-assessment.component.ts", "diffHunk": "@@ -137,11 +138,9 @@ export class TextSubmissionAssessmentComponent implements OnInit {\n         this.courseId = this.exercise?.course ? this.exercise?.course?.id! : this.exercise?.exerciseGroup?.exam?.course?.id!;\n \n         // case distinction for exam mode\n-        if (this.exercise!.course) {\n-            this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.course);\n-        } else {\n-            this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.exercise!.exerciseGroup!.exam!.course!);\n-        }\n+        const course = this.exercise?.course ? this.exercise?.course : this.exercise?.exerciseGroup?.exam?.course;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "774c736a991c1a9ebed82563876b8752016993f1"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4927, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}