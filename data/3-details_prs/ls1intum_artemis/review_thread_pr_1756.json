{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjQwOTky", "number": 1756, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNDoyOVrOEKlDHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNjozNVrOEKlGDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI4MjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNDoyOVrOGrs8JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTozMzo0M1rOGr2FKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODI0NA==", "bodyText": "check if this already exists", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478244", "createdAt": "2020-07-01T16:24:29Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);\n+                participation.setInitializationState(InitializationState.FINISHED);\n+\n+                // create new result\n+                Result result = new Result().participation(participation).submission(quizSubmission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODAxMA==", "bodyText": "I've changed it", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448628010", "createdAt": "2020-07-01T21:33:43Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);\n+                participation.setInitializationState(InitializationState.FINISHED);\n+\n+                // create new result\n+                Result result = new Result().participation(participation).submission(quizSubmission);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODI0NA=="}, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI4NDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNTowMlrOGrs9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTozMzozNlrOGr2E8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODU0OA==", "bodyText": "you can assume that there is one submission, but it might still make sense to warn or even throw if there are multiple ones or no ones", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478548", "createdAt": "2020-07-01T16:25:02Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNzk1NA==", "bodyText": "I've changed it", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448627954", "createdAt": "2020-07-01T21:33:36Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODU0OA=="}, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI4NTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNToyMFrOGrs-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTozMzo1N1rOGr2FgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODczMQ==", "bodyText": "is already set to manually", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478731", "createdAt": "2020-07-01T16:25:20Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODA5Nw==", "bodyText": "I've removed it", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448628097", "createdAt": "2020-07-01T21:33:57Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODczMQ=="}, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI4OTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNjozNVrOGrtA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTozNDowOVrOGr2F2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3OTQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n          \n          \n            \n                private Set<Result> evaluateSubmissions(@NotNull QuizExercise quizExercise) {", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448479473", "createdAt": "2020-07-01T16:26:35Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODE4Nw==", "bodyText": "I've renamed it", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448628187", "createdAt": "2020-07-01T21:34:09Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3OTQ3Mw=="}, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4938, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}