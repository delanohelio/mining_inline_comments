{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTc1MjM3", "number": 1224, "title": "Chore/test coverage/complaint resource lecture resource", "bodyText": "Checklist\n\n Server: I added multiple integration tests (Spring) related to the features\n\nMotivation and Context\n\n\nThis PR increases the test coverage of:\n\nLectureResource.java file. from 14% -> 80%+\nComplaintResource.java file from 70% -> 80%+\n\nScreenshots", "createdAt": "2020-02-03T23:34:08Z", "url": "https://github.com/ls1intum/Artemis/pull/1224", "merged": true, "mergeCommit": {"oid": "d2af7633c1804ae4a81d95ce935ed5834226562f"}, "closed": true, "closedAt": "2020-02-06T23:23:51Z", "author": {"login": "HanyaElhashemy"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAxROtgH2gAyMzcwNTc1MjM3OmE4ZTIzOTgzNDZhM2IyOWVmMzg4ODM3ZDliOWRiNWFjZGM5YTE0NmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBzQmnAFqTM1NDg0MjkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8e2398346a3b29ef388837d9b9db5acdc9a146c", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/a8e2398346a3b29ef388837d9b9db5acdc9a146c", "committedDate": "2020-02-03T18:30:15Z", "message": "add test for rest call getComplaintsById"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef38807c17ba6a34a5d68ad1189f42573c0fd54d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ef38807c17ba6a34a5d68ad1189f42573c0fd54d", "committedDate": "2020-02-03T22:32:04Z", "message": "add tests for lectureResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f001cb2a76e2e8b57f6a8ff74b2ece353a09c9", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/55f001cb2a76e2e8b57f6a8ff74b2ece353a09c9", "committedDate": "2020-02-03T22:34:21Z", "message": "Merge branch 'develop' into chore/test-coverage/ComplaintResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "730e85fcac6effabccb889998d6b321da3028cd8", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/730e85fcac6effabccb889998d6b321da3028cd8", "committedDate": "2020-02-03T23:24:32Z", "message": "add tests for LectureResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721e9ec12bc4f79727cb006d14287a4623be21e1", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/721e9ec12bc4f79727cb006d14287a4623be21e1", "committedDate": "2020-02-04T08:50:23Z", "message": "add test case to get lectured by courseId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/ab9800a0b46fe40cc9659bdce7cc21a23b768938", "committedDate": "2020-02-04T08:59:31Z", "message": "fix java code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODY0ODgx", "url": "https://github.com/ls1intum/Artemis/pull/1224#pullrequestreview-352864881", "createdAt": "2020-02-04T10:22:39Z", "commit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDoyMjozOVrOFlO8JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozMDowMVrOFlPKkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4NjQwNA==", "bodyText": "Shouldn't the exercise be taken from the passed in receivedComplaint that is the result of a REST call? As far as I can see, modelingExercise is simply taken from the database and could thus contain very different information than exericse in the lines above. I think something along those lines would make more sense (I didn't test it but you get the idea):\nif (exercise instanceof ModelingExercise) {\n  ModelingExercise modelingExercise = (ModelingExercise) exercise;\n  assertThat(modelingExercise.getSampleSolutionModel()).as(\"Exercise only contains title and ID\").isNull();\n}", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374586404", "createdAt": "2020-02-04T10:22:39Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/AssessmentComplaintIntegrationTest.java", "diffHunk": "@@ -429,6 +440,8 @@ private void checkIfNoSensitiveExerciseDataPresent(Complaint receivedComplaint)\n             assertThat(exercise.getStudentParticipations()).as(\"Exercise only contains title and ID\").isNullOrEmpty();\n             assertThat(exercise.getTutorParticipations()).as(\"Exercise only contains title and ID\").isNullOrEmpty();\n             // TODO check exercise type specific sensitive attributes\n+            assertThat(modelingExercise.getSampleSolutionModel()).as(\"Exercise only contains title and ID\").isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4ODE5NQ==", "bodyText": "The method name would suggest that the lecture itself also gets saved. I also saw that in most use cases, the lecture is saved after this method is called. Maybe it makes sense to have a boolean flag for this where the default is that the lecture also gets saved?", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374588195", "createdAt": "2020-02-04T10:26:20Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -268,6 +268,17 @@ public void addTeachingAssistant(final String taGroup, final String taName) {\n         assertThat(ta.getId()).as(\"Teaching assistant has been created\").isNotNull();\n     }\n \n+    public Lecture createCourseWithLecture() {\n+        Course course = ModelFactory.generateCourse(null, pastTimestamp, futureFutureTimestamp, new HashSet<>(), \"tumuser\", \"tutor\", \"instructor\");\n+\n+        Lecture lecture = new Lecture();\n+        lecture.setDescription(\"Test Lecture\");\n+        lecture.setCourse(course);\n+        courseRepo.save(course);\n+        // lectureRepo.save(lecture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4OTM4Mw==", "bodyText": "This is not actually testing if an update has been performed. Could you change an attribute and then verify that it has actually changed?", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374589383", "createdAt": "2020-02-04T10:28:36Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5MDA5OQ==", "bodyText": "Can tutors delete a lecture? If not, maybe add another test or change the role.", "url": "https://github.com/ls1intum/Artemis/pull/1224#discussion_r374590099", "createdAt": "2020-02-04T10:30:01Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/LectureIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Lecture;\n+import de.tum.in.www1.artemis.repository.LectureRepository;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class LectureIntegrationTest extends AbstractSpringIntegrationTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    LectureRepository lectureRepo;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        database.addUsers(1, 1, 1);\n+\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void getLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Lecture savedLecture = lectureRepo.findAll().get(0);\n+\n+        Lecture receivedLecture = request.get(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK, Lecture.class);\n+\n+        assertThat(savedLecture.getId()).isEqualTo(receivedLecture.getId());\n+        assertThat(savedLecture).isEqualTo(receivedLecture);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void getLectureForCourseNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        Course course = lectureRepo.findAll().get(0).getCourse();\n+        request.get(\"/api/courses/\" + course.getId() + \"/lectures\", HttpStatus.FORBIDDEN, Lecture.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void createLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        Lecture receivedLecture = request.postWithResponseBody(\"/api/lectures\", lecture, Lecture.class);\n+\n+        assertThat(receivedLecture).isNotNull();\n+        assertThat(receivedLecture.getId()).isNotNull();\n+        assertThat(receivedLecture.getDescription()).isEqualTo(\"Test Lecture\");\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")\n+    public void updateLectureNoPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.putWithResponseBody(\"/api/lectures\", lecture, Lecture.class, HttpStatus.FORBIDDEN);\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void deleteLectureWithPermission() throws Exception {\n+        Lecture lecture = database.createCourseWithLecture();\n+        lectureRepo.save(lecture);\n+        request.delete(\"/api/lectures/\" + lecture.getId(), HttpStatus.OK);\n+        assertThat(lectureRepo.findAll().isEmpty()).isTrue();\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = \"USER\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9800a0b46fe40cc9659bdce7cc21a23b768938"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b97c5a832fc734e5c65e2b8716873761d755941d", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b97c5a832fc734e5c65e2b8716873761d755941d", "committedDate": "2020-02-04T11:02:15Z", "message": "Apply PR review feedback on LectureIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25fe673b1a17455994d6ab18d171fe7584f0fa40", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/25fe673b1a17455994d6ab18d171fe7584f0fa40", "committedDate": "2020-02-04T13:09:04Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8459040e16ea09997e4c3826f46f9d6960ff4767", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/8459040e16ea09997e4c3826f46f9d6960ff4767", "committedDate": "2020-02-04T14:51:24Z", "message": "add test for getLectureByCourse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b21e4a88c7908d2f3562b048089dfabd652d4a48", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/b21e4a88c7908d2f3562b048089dfabd652d4a48", "committedDate": "2020-02-05T17:07:55Z", "message": "add test coverage for ComplaintResource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODQyOTAz", "url": "https://github.com/ls1intum/Artemis/pull/1224#pullrequestreview-354842903", "createdAt": "2020-02-06T23:23:18Z", "commit": {"oid": "b21e4a88c7908d2f3562b048089dfabd652d4a48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3147, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}