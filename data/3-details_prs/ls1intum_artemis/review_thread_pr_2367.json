{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MzkyNzQ2", "number": 2367, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0MToxNlrOE6DDcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0Nzo0NFrOE6DQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzAyODk4OnYy", "diffSide": "RIGHT", "path": "src/test/javascript/spec/component/shared/notification/notification-popup.component.spec.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0MToxNlrOH04B8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowMjoyNFrOH1CRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwNjAwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                describe('Webscoket receive', () => {\n          \n          \n            \n                describe('Websocket receive', () => {", "url": "https://github.com/ls1intum/Artemis/pull/2367#discussion_r525206001", "createdAt": "2020-11-17T14:41:16Z", "author": {"login": "stefanwaldhauser"}, "path": "src/test/javascript/spec/component/shared/notification/notification-popup.component.spec.ts", "diffHunk": "@@ -0,0 +1,135 @@\n+import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\n+import { By } from '@angular/platform-browser';\n+import { Router } from '@angular/router';\n+import { TranslateService } from '@ngx-translate/core';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { BehaviorSubject } from 'rxjs';\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { NotificationPopupComponent } from 'app/shared/notification/notification-popup/notification-popup.component';\n+import { NotificationService } from 'app/shared/notification/notification.service';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { MockSyncStorage } from '../../../helpers/mocks/service/mock-sync-storage.service';\n+import { MockNotificationService } from '../../../helpers/mocks/service/mock-notification.service';\n+import { MockTranslateService } from '../../../helpers/mocks/service/mock-translate.service';\n+import { MockAccountService } from '../../../helpers/mocks/service/mock-account.service';\n+import { Notification } from 'app/entities/notification.model';\n+import { RouterTestingModule } from '@angular/router/testing';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+describe('Notification Popup Component', () => {\n+    let notificationPopupComponent: NotificationPopupComponent;\n+    let notificationPopupComponentFixture: ComponentFixture<NotificationPopupComponent>;\n+    let notificationService: NotificationService;\n+    let accountService: AccountService;\n+    let router: Router;\n+\n+    const generateNotification = (id: number) => {\n+        const generatedNotification = { id, title: 'Quiz started', text: 'Quiz \"Proxy pattern\" just started.' } as Notification;\n+        generatedNotification.target = JSON.stringify({ mainPage: 'courses', course: 1, entity: 'exercise', id: 1 });\n+        return generatedNotification;\n+    };\n+    const notification = generateNotification(1);\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [ArtemisTestModule, RouterTestingModule.withRoutes([])],\n+            declarations: [NotificationPopupComponent],\n+            providers: [\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: NotificationService, useClass: MockNotificationService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: AccountService, useClass: MockAccountService },\n+            ],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                notificationPopupComponentFixture = TestBed.createComponent(NotificationPopupComponent);\n+                notificationPopupComponent = notificationPopupComponentFixture.componentInstance;\n+                notificationService = TestBed.inject(NotificationService);\n+                accountService = TestBed.inject(AccountService);\n+                router = TestBed.get(Router);\n+            });\n+    });\n+\n+    describe('Initialization', () => {\n+        it('should get authentication state', () => {\n+            sinon.spy(accountService, 'getAuthenticationState');\n+            notificationPopupComponent.ngOnInit();\n+            expect(accountService.getAuthenticationState).to.have.been.calledOnce;\n+        });\n+\n+        it('should subscribe to notification updates', () => {\n+            sinon.spy(notificationService, 'subscribeToNotificationUpdates');\n+            notificationPopupComponent.ngOnInit();\n+            expect(notificationService.subscribeToNotificationUpdates).to.have.been.calledOnce;\n+        });\n+    });\n+\n+    describe('Click', () => {\n+        beforeEach(() => {\n+            notificationPopupComponent.notifications.push(notification);\n+            notificationPopupComponentFixture.detectChanges();\n+        });\n+\n+        it('should remove notification from component state and navigate to target when notification is clicked', () => {\n+            sinon.spy(notificationPopupComponent, 'removeNotification');\n+            sinon.replace(notificationPopupComponent, 'navigateToTarget', sinon.fake());\n+            const notificationElement = notificationPopupComponentFixture.debugElement.query(By.css('.notification-popup-container > div'));\n+            notificationElement.nativeElement.click();\n+            expect(notificationPopupComponent.removeNotification).to.have.been.calledOnce;\n+            expect(notificationPopupComponent.notifications).to.be.empty;\n+            expect(notificationPopupComponent.navigateToTarget).to.have.been.calledOnce;\n+        });\n+\n+        it('should remove notification from component state when notification is closed', () => {\n+            sinon.spy(notificationPopupComponent, 'removeNotification');\n+            sinon.replace(notificationPopupComponent, 'navigateToTarget', sinon.fake());\n+            const button = notificationPopupComponentFixture.debugElement.query(By.css('.notification-popup-container > div button'));\n+            button.nativeElement.click();\n+            expect(notificationPopupComponent.removeNotification).to.have.been.called;\n+            expect(notificationPopupComponent.notifications).to.be.empty;\n+        });\n+\n+        it('should navigate to target when notification is clicked', () => {\n+            sinon.spy(notificationPopupComponent, 'navigateToTarget');\n+            sinon.replace(router, 'navigateByUrl', sinon.fake());\n+            const button = notificationPopupComponentFixture.debugElement.query(By.css('.notification-popup-container > div button'));\n+            button.nativeElement.click();\n+            expect(notificationPopupComponent.navigateToTarget).to.have.been.calledOnce;\n+            expect(router.navigateByUrl).to.have.been.calledOnce;\n+        });\n+    });\n+\n+    describe('Webscoket receive', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ce77e6b9ac9ec498e3fabeb237077cd5d35e416"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Mzc5NQ==", "bodyText": "Thanks! I'll fix this in a follow-up PR", "url": "https://github.com/ls1intum/Artemis/pull/2367#discussion_r525373795", "createdAt": "2020-11-17T18:02:24Z", "author": {"login": "sascha11110"}, "path": "src/test/javascript/spec/component/shared/notification/notification-popup.component.spec.ts", "diffHunk": "@@ -0,0 +1,135 @@\n+import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\n+import { By } from '@angular/platform-browser';\n+import { Router } from '@angular/router';\n+import { TranslateService } from '@ngx-translate/core';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { BehaviorSubject } from 'rxjs';\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import * as sinon from 'sinon';\n+import { NotificationPopupComponent } from 'app/shared/notification/notification-popup/notification-popup.component';\n+import { NotificationService } from 'app/shared/notification/notification.service';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { MockSyncStorage } from '../../../helpers/mocks/service/mock-sync-storage.service';\n+import { MockNotificationService } from '../../../helpers/mocks/service/mock-notification.service';\n+import { MockTranslateService } from '../../../helpers/mocks/service/mock-translate.service';\n+import { MockAccountService } from '../../../helpers/mocks/service/mock-account.service';\n+import { Notification } from 'app/entities/notification.model';\n+import { RouterTestingModule } from '@angular/router/testing';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+describe('Notification Popup Component', () => {\n+    let notificationPopupComponent: NotificationPopupComponent;\n+    let notificationPopupComponentFixture: ComponentFixture<NotificationPopupComponent>;\n+    let notificationService: NotificationService;\n+    let accountService: AccountService;\n+    let router: Router;\n+\n+    const generateNotification = (id: number) => {\n+        const generatedNotification = { id, title: 'Quiz started', text: 'Quiz \"Proxy pattern\" just started.' } as Notification;\n+        generatedNotification.target = JSON.stringify({ mainPage: 'courses', course: 1, entity: 'exercise', id: 1 });\n+        return generatedNotification;\n+    };\n+    const notification = generateNotification(1);\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [ArtemisTestModule, RouterTestingModule.withRoutes([])],\n+            declarations: [NotificationPopupComponent],\n+            providers: [\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: NotificationService, useClass: MockNotificationService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: AccountService, useClass: MockAccountService },\n+            ],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                notificationPopupComponentFixture = TestBed.createComponent(NotificationPopupComponent);\n+                notificationPopupComponent = notificationPopupComponentFixture.componentInstance;\n+                notificationService = TestBed.inject(NotificationService);\n+                accountService = TestBed.inject(AccountService);\n+                router = TestBed.get(Router);\n+            });\n+    });\n+\n+    describe('Initialization', () => {\n+        it('should get authentication state', () => {\n+            sinon.spy(accountService, 'getAuthenticationState');\n+            notificationPopupComponent.ngOnInit();\n+            expect(accountService.getAuthenticationState).to.have.been.calledOnce;\n+        });\n+\n+        it('should subscribe to notification updates', () => {\n+            sinon.spy(notificationService, 'subscribeToNotificationUpdates');\n+            notificationPopupComponent.ngOnInit();\n+            expect(notificationService.subscribeToNotificationUpdates).to.have.been.calledOnce;\n+        });\n+    });\n+\n+    describe('Click', () => {\n+        beforeEach(() => {\n+            notificationPopupComponent.notifications.push(notification);\n+            notificationPopupComponentFixture.detectChanges();\n+        });\n+\n+        it('should remove notification from component state and navigate to target when notification is clicked', () => {\n+            sinon.spy(notificationPopupComponent, 'removeNotification');\n+            sinon.replace(notificationPopupComponent, 'navigateToTarget', sinon.fake());\n+            const notificationElement = notificationPopupComponentFixture.debugElement.query(By.css('.notification-popup-container > div'));\n+            notificationElement.nativeElement.click();\n+            expect(notificationPopupComponent.removeNotification).to.have.been.calledOnce;\n+            expect(notificationPopupComponent.notifications).to.be.empty;\n+            expect(notificationPopupComponent.navigateToTarget).to.have.been.calledOnce;\n+        });\n+\n+        it('should remove notification from component state when notification is closed', () => {\n+            sinon.spy(notificationPopupComponent, 'removeNotification');\n+            sinon.replace(notificationPopupComponent, 'navigateToTarget', sinon.fake());\n+            const button = notificationPopupComponentFixture.debugElement.query(By.css('.notification-popup-container > div button'));\n+            button.nativeElement.click();\n+            expect(notificationPopupComponent.removeNotification).to.have.been.called;\n+            expect(notificationPopupComponent.notifications).to.be.empty;\n+        });\n+\n+        it('should navigate to target when notification is clicked', () => {\n+            sinon.spy(notificationPopupComponent, 'navigateToTarget');\n+            sinon.replace(router, 'navigateByUrl', sinon.fake());\n+            const button = notificationPopupComponentFixture.debugElement.query(By.css('.notification-popup-container > div button'));\n+            button.nativeElement.click();\n+            expect(notificationPopupComponent.navigateToTarget).to.have.been.calledOnce;\n+            expect(router.navigateByUrl).to.have.been.calledOnce;\n+        });\n+    });\n+\n+    describe('Webscoket receive', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwNjAwMQ=="}, "originalCommit": {"oid": "5ce77e6b9ac9ec498e3fabeb237077cd5d35e416"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzA0Mjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0NDoxMVrOH04Kug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0NDoxMVrOH04Kug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwODI1MA==", "bodyText": "I would suggest moving start-now into a shared constant wherever it is used. Can quizChange be an Enum instead of just a string?", "url": "https://github.com/ls1intum/Artemis/pull/2367#discussion_r525208250", "createdAt": "2020-11-17T14:44:11Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "diffHunk": "@@ -353,6 +357,11 @@ public void sendQuizExerciseToSubscribedClients(QuizExercise quizExercise, Strin\n             byte[] payload = objectMapper.writerWithView(view).writeValueAsBytes(quizExercise);\n             // For each change we send the same message. The client needs to decide how to handle the date based on the quiz status\n             if (quizExercise.isVisibleToStudents() && quizExercise.hasCourse()) {\n+                // Create a group notification if actions is 'start-now'.\n+                if (\"start-now\".equals(quizChange)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ce77e6b9ac9ec498e3fabeb237077cd5d35e416"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzA2MjE4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/notification/notification-popup/notification-popup.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0Nzo0NFrOH04WXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowMzoyMVrOH1CTig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxMTIzMA==", "bodyText": "This seems very brittle. Can this be changed to an enum?", "url": "https://github.com/ls1intum/Artemis/pull/2367#discussion_r525211230", "createdAt": "2020-11-17T14:47:44Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/shared/notification/notification-popup/notification-popup.component.ts", "diffHunk": "@@ -0,0 +1,106 @@\n+import { Component, OnInit } from '@angular/core';\n+import { Router, UrlTree } from '@angular/router';\n+import { NotificationService } from 'app/shared/notification/notification.service';\n+import { User } from 'app/core/user/user.model';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { Notification } from 'app/entities/notification.model';\n+import { GroupNotification } from 'app/entities/group-notification.model';\n+\n+@Component({\n+    selector: 'jhi-notification-popup',\n+    templateUrl: './notification-popup.component.html',\n+    styleUrls: ['./notification-popup.scss'],\n+})\n+export class NotificationPopupComponent implements OnInit {\n+    notifications: Notification[] = [];\n+\n+    constructor(private accountService: AccountService, private notificationService: NotificationService, private router: Router) {}\n+\n+    /**\n+     * Subscribe to notification updates that are received via websocket if the user is logged in.\n+     */\n+    ngOnInit(): void {\n+        this.accountService.getAuthenticationState().subscribe((user: User | undefined) => {\n+            if (user) {\n+                this.subscribeToNotificationUpdates();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Returns a string that can be interpreted as fontawesome icon based on the notification type of the given notification.\n+     * @param notification {Notification}\n+     */\n+    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+    notificationIcon(notification: Notification): string {\n+        return 'check-double';\n+    }\n+\n+    /**\n+     * Removes the notification at the specified index from the notifications array.\n+     * @param index {number}\n+     */\n+    removeNotification(index: number): void {\n+        this.notifications.splice(index, 1);\n+    }\n+\n+    /**\n+     * Navigate to the target (view) of the notification that the user clicked.\n+     * @param notification {Notification}\n+     */\n+    navigateToTarget(notification: Notification): void {\n+        this.router.navigateByUrl(this.notificationTargetRoute(notification));\n+    }\n+\n+    private notificationTargetRoute(notification: Notification): UrlTree | string {\n+        if (notification.target) {\n+            const target = JSON.parse(notification.target);\n+            return this.router.createUrlTree([target.mainPage, target.course, target.entity, target.id]);\n+        }\n+        return this.router.url;\n+    }\n+\n+    private subscribeToNotificationUpdates(): void {\n+        this.notificationService.subscribeToNotificationUpdates().subscribe((notification: Notification) => {\n+            this.addNotification(notification);\n+        });\n+    }\n+\n+    private addNotification(notification: Notification): void {\n+        // Only add a notification if it does not already exist.\n+        if (notification && !this.notifications.some(({ id }) => id === notification.id)) {\n+            // For now only notifications about a started quiz should be displayed.\n+            if (notification.title === 'Quiz started') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ce77e6b9ac9ec498e3fabeb237077cd5d35e416"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NDM0Ng==", "bodyText": "We will have dedicated notification types in the future. So I will adjust it then :-)", "url": "https://github.com/ls1intum/Artemis/pull/2367#discussion_r525374346", "createdAt": "2020-11-17T18:03:21Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/shared/notification/notification-popup/notification-popup.component.ts", "diffHunk": "@@ -0,0 +1,106 @@\n+import { Component, OnInit } from '@angular/core';\n+import { Router, UrlTree } from '@angular/router';\n+import { NotificationService } from 'app/shared/notification/notification.service';\n+import { User } from 'app/core/user/user.model';\n+import { AccountService } from 'app/core/auth/account.service';\n+import { Notification } from 'app/entities/notification.model';\n+import { GroupNotification } from 'app/entities/group-notification.model';\n+\n+@Component({\n+    selector: 'jhi-notification-popup',\n+    templateUrl: './notification-popup.component.html',\n+    styleUrls: ['./notification-popup.scss'],\n+})\n+export class NotificationPopupComponent implements OnInit {\n+    notifications: Notification[] = [];\n+\n+    constructor(private accountService: AccountService, private notificationService: NotificationService, private router: Router) {}\n+\n+    /**\n+     * Subscribe to notification updates that are received via websocket if the user is logged in.\n+     */\n+    ngOnInit(): void {\n+        this.accountService.getAuthenticationState().subscribe((user: User | undefined) => {\n+            if (user) {\n+                this.subscribeToNotificationUpdates();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Returns a string that can be interpreted as fontawesome icon based on the notification type of the given notification.\n+     * @param notification {Notification}\n+     */\n+    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+    notificationIcon(notification: Notification): string {\n+        return 'check-double';\n+    }\n+\n+    /**\n+     * Removes the notification at the specified index from the notifications array.\n+     * @param index {number}\n+     */\n+    removeNotification(index: number): void {\n+        this.notifications.splice(index, 1);\n+    }\n+\n+    /**\n+     * Navigate to the target (view) of the notification that the user clicked.\n+     * @param notification {Notification}\n+     */\n+    navigateToTarget(notification: Notification): void {\n+        this.router.navigateByUrl(this.notificationTargetRoute(notification));\n+    }\n+\n+    private notificationTargetRoute(notification: Notification): UrlTree | string {\n+        if (notification.target) {\n+            const target = JSON.parse(notification.target);\n+            return this.router.createUrlTree([target.mainPage, target.course, target.entity, target.id]);\n+        }\n+        return this.router.url;\n+    }\n+\n+    private subscribeToNotificationUpdates(): void {\n+        this.notificationService.subscribeToNotificationUpdates().subscribe((notification: Notification) => {\n+            this.addNotification(notification);\n+        });\n+    }\n+\n+    private addNotification(notification: Notification): void {\n+        // Only add a notification if it does not already exist.\n+        if (notification && !this.notifications.some(({ id }) => id === notification.id)) {\n+            // For now only notifications about a started quiz should be displayed.\n+            if (notification.title === 'Quiz started') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxMTIzMA=="}, "originalCommit": {"oid": "5ce77e6b9ac9ec498e3fabeb237077cd5d35e416"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4433, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}