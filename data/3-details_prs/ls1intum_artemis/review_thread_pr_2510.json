{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTc5Mzk4", "number": 2510, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTowMjozMFrOFB0vdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDo0Mzo1N1rOFE6wWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDU3MDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/LectureRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTowMjozMFrOIArB7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxMjozMFrOIAubig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3NTkxNw==", "bodyText": "The indentation here looks off.", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537575917", "createdAt": "2020-12-07T15:02:30Z", "author": {"login": "FrankeLukas"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/LectureRepository.java", "diffHunk": "@@ -17,16 +17,31 @@\n @Repository\n public interface LectureRepository extends JpaRepository<Lecture, Long> {\n \n-    @Query(\"select lecture from Lecture lecture left join fetch lecture.attachments WHERE lecture.course.id = :#{#courseId}\")\n-    Set<Lecture> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+    @Query(\"\"\"\n+            SELECT lecture\n+            FROM Lecture lecture\n+            LEFT JOIN FETCH lecture.attachments\n+            WHERE lecture.course.id = :#{#courseId}\n+            \"\"\")\n+    Set<Lecture> findAllByCourseIdWithAttachments(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"\"\"\n+                        SELECT lecture\n+                        FROM Lecture lecture\n+                        LEFT JOIN FETCH lecture.attachments\n+                        LEFT JOIN FETCH lecture.lectureUnits\n+                        WHERE lecture.course.id = :#{#courseId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e63099982d24ccb213c1ab5a7b67fe8269369c2c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMTYyNg==", "bodyText": "Good Catch! 09c53aa", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537631626", "createdAt": "2020-12-07T16:12:30Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/LectureRepository.java", "diffHunk": "@@ -17,16 +17,31 @@\n @Repository\n public interface LectureRepository extends JpaRepository<Lecture, Long> {\n \n-    @Query(\"select lecture from Lecture lecture left join fetch lecture.attachments WHERE lecture.course.id = :#{#courseId}\")\n-    Set<Lecture> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+    @Query(\"\"\"\n+            SELECT lecture\n+            FROM Lecture lecture\n+            LEFT JOIN FETCH lecture.attachments\n+            WHERE lecture.course.id = :#{#courseId}\n+            \"\"\")\n+    Set<Lecture> findAllByCourseIdWithAttachments(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"\"\"\n+                        SELECT lecture\n+                        FROM Lecture lecture\n+                        LEFT JOIN FETCH lecture.attachments\n+                        LEFT JOIN FETCH lecture.lectureUnits\n+                        WHERE lecture.course.id = :#{#courseId}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3NTkxNw=="}, "originalCommit": {"oid": "e63099982d24ccb213c1ab5a7b67fe8269369c2c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDYzMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/en/global.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToxNDoyM1rOIArmbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxMToyOVrOIAuYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NTI2Mg==", "bodyText": "This appears to be missing in the de file.", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537585262", "createdAt": "2020-12-07T15:14:23Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/i18n/en/global.json", "diffHunk": "@@ -299,5 +299,6 @@\n         \"connected\": \"Connected\",\n         \"disconnected\": \"Disconnected\"\n     },\n-    \"loading\": \"Loading...\"\n+    \"loading\": \"Loading...\",\n+    \"completed\": \"Completed\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDgwNw==", "bodyText": "Good catch! 9ca89cd", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537630807", "createdAt": "2020-12-07T16:11:29Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/i18n/en/global.json", "diffHunk": "@@ -299,5 +299,6 @@\n         \"connected\": \"Connected\",\n         \"disconnected\": \"Disconnected\"\n     },\n-    \"loading\": \"Loading...\"\n+    \"loading\": \"Loading...\",\n+    \"completed\": \"Completed\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NTI2Mg=="}, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDY4Nzc5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/circular-progress-bar/circular-progress-bar.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyNDo1M1rOIAsG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjowOTo1OVrOIAuToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MzU5Mg==", "bodyText": "So if I understand this correctly, Angular will call the circleColor function to get the color quite often (change detection?), even without progressInPercent changing. If so, wouldn't it make sense to cache that value in a field instead?", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537593592", "createdAt": "2020-12-07T15:24:53Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/shared/circular-progress-bar/circular-progress-bar.component.html", "diffHunk": "@@ -0,0 +1,14 @@\n+<div class=\"progress-circle\" [attr.data-percentage]=\"progressInPercent\">\n+    <span class=\"progress-left\">\n+        <span class=\"progress-bar-circle\" [style.border-color]=\"circleColor\"></span>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyOTYwMA==", "bodyText": "Good catch: 4f1d309", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537629600", "createdAt": "2020-12-07T16:09:59Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/shared/circular-progress-bar/circular-progress-bar.component.html", "diffHunk": "@@ -0,0 +1,14 @@\n+<div class=\"progress-circle\" [attr.data-percentage]=\"progressInPercent\">\n+    <span class=\"progress-left\">\n+        <span class=\"progress-bar-circle\" [style.border-color]=\"circleColor\"></span>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MzU5Mg=="}, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDcxNzgxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/learning-goals/learning-goal-management/learning-goal-management.component.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozMDoxNlrOIAsYQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjowMzoxN1rOIAt-Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5ODAxOQ==", "bodyText": "This should probably use a resolver instead (which can then be reused for course-learning-goals too).", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537598019", "createdAt": "2020-12-07T15:30:16Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/course/learning-goals/learning-goal-management/learning-goal-management.component.ts", "diffHunk": "@@ -0,0 +1,86 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { LearningGoalService } from 'app/course/learning-goals/learningGoal.service';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { LearningGoal } from 'app/entities/learningGoal.model';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { finalize } from 'rxjs/operators';\n+import { onError } from 'app/shared/util/global.utils';\n+import { forkJoin, Subject } from 'rxjs';\n+import { LearningGoalProgress } from 'app/course/learning-goals/learning-goal-progress-dtos.model';\n+\n+@Component({\n+    selector: 'jhi-learning-goal-management',\n+    templateUrl: './learning-goal-management.component.html',\n+    styleUrls: ['./learning-goal-management.component.scss'],\n+})\n+export class LearningGoalManagementComponent implements OnInit, OnDestroy {\n+    courseId: number;\n+    isLoading = false;\n+    learningGoals: LearningGoal[] = [];\n+    learningGoalIdToLearningGoalProgress = new Map<number, LearningGoalProgress>();\n+    private dialogErrorSource = new Subject<string>();\n+    dialogError$ = this.dialogErrorSource.asObservable();\n+\n+    constructor(private activatedRoute: ActivatedRoute, private router: Router, private learningGoalService: LearningGoalService, private alertService: JhiAlertService) {}\n+\n+    ngOnDestroy(): void {\n+        this.dialogErrorSource.unsubscribe();\n+    }\n+\n+    ngOnInit(): void {\n+        this.activatedRoute.params.subscribe((params) => {\n+            this.courseId = +params['courseId'];\n+            if (this.courseId) {\n+                this.loadData();\n+            }\n+        });\n+    }\n+\n+    identify(index: number, learningGoal: LearningGoal) {\n+        return `${index}-${learningGoal.id}`;\n+    }\n+\n+    deleteLearningGoal(learningGoalId: number) {\n+        this.learningGoalService.delete(learningGoalId, this.courseId).subscribe(\n+            () => {\n+                this.dialogErrorSource.next('');\n+                this.loadData();\n+            },\n+            (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\n+        );\n+    }\n+\n+    getLearningGoalProgress(learningGoal: LearningGoal) {\n+        return this.learningGoalIdToLearningGoalProgress.get(learningGoal.id!);\n+    }\n+\n+    loadData() {\n+        this.isLoading = true;\n+        this.learningGoalService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxNTA3Mw==", "bodyText": "No I am strictly against resolvers, they are a bad style imo.", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537615073", "createdAt": "2020-12-07T15:52:13Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/course/learning-goals/learning-goal-management/learning-goal-management.component.ts", "diffHunk": "@@ -0,0 +1,86 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { LearningGoalService } from 'app/course/learning-goals/learningGoal.service';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { LearningGoal } from 'app/entities/learningGoal.model';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { finalize } from 'rxjs/operators';\n+import { onError } from 'app/shared/util/global.utils';\n+import { forkJoin, Subject } from 'rxjs';\n+import { LearningGoalProgress } from 'app/course/learning-goals/learning-goal-progress-dtos.model';\n+\n+@Component({\n+    selector: 'jhi-learning-goal-management',\n+    templateUrl: './learning-goal-management.component.html',\n+    styleUrls: ['./learning-goal-management.component.scss'],\n+})\n+export class LearningGoalManagementComponent implements OnInit, OnDestroy {\n+    courseId: number;\n+    isLoading = false;\n+    learningGoals: LearningGoal[] = [];\n+    learningGoalIdToLearningGoalProgress = new Map<number, LearningGoalProgress>();\n+    private dialogErrorSource = new Subject<string>();\n+    dialogError$ = this.dialogErrorSource.asObservable();\n+\n+    constructor(private activatedRoute: ActivatedRoute, private router: Router, private learningGoalService: LearningGoalService, private alertService: JhiAlertService) {}\n+\n+    ngOnDestroy(): void {\n+        this.dialogErrorSource.unsubscribe();\n+    }\n+\n+    ngOnInit(): void {\n+        this.activatedRoute.params.subscribe((params) => {\n+            this.courseId = +params['courseId'];\n+            if (this.courseId) {\n+                this.loadData();\n+            }\n+        });\n+    }\n+\n+    identify(index: number, learningGoal: LearningGoal) {\n+        return `${index}-${learningGoal.id}`;\n+    }\n+\n+    deleteLearningGoal(learningGoalId: number) {\n+        this.learningGoalService.delete(learningGoalId, this.courseId).subscribe(\n+            () => {\n+                this.dialogErrorSource.next('');\n+                this.loadData();\n+            },\n+            (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\n+        );\n+    }\n+\n+    getLearningGoalProgress(learningGoal: LearningGoal) {\n+        return this.learningGoalIdToLearningGoalProgress.get(learningGoal.id!);\n+    }\n+\n+    loadData() {\n+        this.isLoading = true;\n+        this.learningGoalService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5ODAxOQ=="}, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxNjU0NA==", "bodyText": "https://blog.chinmoymohanty.com/2020/06/23/do-we-really-need-angular-route-resolvers/", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537616544", "createdAt": "2020-12-07T15:54:04Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/app/course/learning-goals/learning-goal-management/learning-goal-management.component.ts", "diffHunk": "@@ -0,0 +1,86 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { LearningGoalService } from 'app/course/learning-goals/learningGoal.service';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { LearningGoal } from 'app/entities/learningGoal.model';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { finalize } from 'rxjs/operators';\n+import { onError } from 'app/shared/util/global.utils';\n+import { forkJoin, Subject } from 'rxjs';\n+import { LearningGoalProgress } from 'app/course/learning-goals/learning-goal-progress-dtos.model';\n+\n+@Component({\n+    selector: 'jhi-learning-goal-management',\n+    templateUrl: './learning-goal-management.component.html',\n+    styleUrls: ['./learning-goal-management.component.scss'],\n+})\n+export class LearningGoalManagementComponent implements OnInit, OnDestroy {\n+    courseId: number;\n+    isLoading = false;\n+    learningGoals: LearningGoal[] = [];\n+    learningGoalIdToLearningGoalProgress = new Map<number, LearningGoalProgress>();\n+    private dialogErrorSource = new Subject<string>();\n+    dialogError$ = this.dialogErrorSource.asObservable();\n+\n+    constructor(private activatedRoute: ActivatedRoute, private router: Router, private learningGoalService: LearningGoalService, private alertService: JhiAlertService) {}\n+\n+    ngOnDestroy(): void {\n+        this.dialogErrorSource.unsubscribe();\n+    }\n+\n+    ngOnInit(): void {\n+        this.activatedRoute.params.subscribe((params) => {\n+            this.courseId = +params['courseId'];\n+            if (this.courseId) {\n+                this.loadData();\n+            }\n+        });\n+    }\n+\n+    identify(index: number, learningGoal: LearningGoal) {\n+        return `${index}-${learningGoal.id}`;\n+    }\n+\n+    deleteLearningGoal(learningGoalId: number) {\n+        this.learningGoalService.delete(learningGoalId, this.courseId).subscribe(\n+            () => {\n+                this.dialogErrorSource.next('');\n+                this.loadData();\n+            },\n+            (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\n+        );\n+    }\n+\n+    getLearningGoalProgress(learningGoal: LearningGoal) {\n+        return this.learningGoalIdToLearningGoalProgress.get(learningGoal.id!);\n+    }\n+\n+    loadData() {\n+        this.isLoading = true;\n+        this.learningGoalService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5ODAxOQ=="}, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNDE0Ng==", "bodyText": "This was more about fetching the learning goals themselves, but it's not too important here so I won't insist. (Btw, you're setting isLoading, which looks like it's blocking to me, too.)", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537624146", "createdAt": "2020-12-07T16:03:17Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/course/learning-goals/learning-goal-management/learning-goal-management.component.ts", "diffHunk": "@@ -0,0 +1,86 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\n+import { ActivatedRoute, Router } from '@angular/router';\n+import { LearningGoalService } from 'app/course/learning-goals/learningGoal.service';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { LearningGoal } from 'app/entities/learningGoal.model';\n+import { HttpErrorResponse } from '@angular/common/http';\n+import { finalize } from 'rxjs/operators';\n+import { onError } from 'app/shared/util/global.utils';\n+import { forkJoin, Subject } from 'rxjs';\n+import { LearningGoalProgress } from 'app/course/learning-goals/learning-goal-progress-dtos.model';\n+\n+@Component({\n+    selector: 'jhi-learning-goal-management',\n+    templateUrl: './learning-goal-management.component.html',\n+    styleUrls: ['./learning-goal-management.component.scss'],\n+})\n+export class LearningGoalManagementComponent implements OnInit, OnDestroy {\n+    courseId: number;\n+    isLoading = false;\n+    learningGoals: LearningGoal[] = [];\n+    learningGoalIdToLearningGoalProgress = new Map<number, LearningGoalProgress>();\n+    private dialogErrorSource = new Subject<string>();\n+    dialogError$ = this.dialogErrorSource.asObservable();\n+\n+    constructor(private activatedRoute: ActivatedRoute, private router: Router, private learningGoalService: LearningGoalService, private alertService: JhiAlertService) {}\n+\n+    ngOnDestroy(): void {\n+        this.dialogErrorSource.unsubscribe();\n+    }\n+\n+    ngOnInit(): void {\n+        this.activatedRoute.params.subscribe((params) => {\n+            this.courseId = +params['courseId'];\n+            if (this.courseId) {\n+                this.loadData();\n+            }\n+        });\n+    }\n+\n+    identify(index: number, learningGoal: LearningGoal) {\n+        return `${index}-${learningGoal.id}`;\n+    }\n+\n+    deleteLearningGoal(learningGoalId: number) {\n+        this.learningGoalService.delete(learningGoalId, this.courseId).subscribe(\n+            () => {\n+                this.dialogErrorSource.next('');\n+                this.loadData();\n+            },\n+            (error: HttpErrorResponse) => this.dialogErrorSource.next(error.message),\n+        );\n+    }\n+\n+    getLearningGoalProgress(learningGoal: LearningGoal) {\n+        return this.learningGoalIdToLearningGoalProgress.get(learningGoal.id!);\n+    }\n+\n+    loadData() {\n+        this.isLoading = true;\n+        this.learningGoalService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5ODAxOQ=="}, "originalCommit": {"oid": "c6fec62ea7e55b3a66808b4377a3c55bd5bd831f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjMzNDEzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/shared/circular-progress-bar/circular-progress-bar.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxOTo0NVrOIA7LeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxOTo0NVrOIA7LeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MDUwNQ==", "bodyText": "GitHub Actions: 'OnInit' is defined but never used.", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r537840505", "createdAt": "2020-12-07T21:19:45Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/shared/circular-progress-bar/circular-progress-bar.component.ts", "diffHunk": "@@ -0,0 +1,46 @@\n+import { Component, Input, OnChanges, OnInit } from '@angular/core';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTAxMzMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowODozOVrOIBmKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozOTowMFrOIDHRwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0NDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {\n          \n          \n            \n                public LearningGoalProgress calculateLearningGoalProgress(LearningGoal learningGoal, User user) {", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r538544664", "createdAt": "2020-12-08T16:08:39Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.LearningGoal;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LearningGoalRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final LearningGoalRepository learningGoalRepository;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(LearningGoalRepository learningGoalRepository, AuthorizationCheckService authorizationCheckService, ParticipationService participationService,\n+            ResultRepository resultRepository) {\n+        this.learningGoalRepository = learningGoalRepository;\n+        this.authorizationCheckService = authorizationCheckService;\n+        this.participationService = participationService;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Calculate the progress in a learning goal for a specific user\n+     * @param learningGoal learning goal to get the progress for\n+     * @param user user to get the progress for\n+     * @return progress of the user in the learning goal\n+     */\n+    public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzNTg3Mw==", "bodyText": "Done in da86f2c", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r540135873", "createdAt": "2020-12-10T12:39:00Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.LearningGoal;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LearningGoalRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final LearningGoalRepository learningGoalRepository;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(LearningGoalRepository learningGoalRepository, AuthorizationCheckService authorizationCheckService, ParticipationService participationService,\n+            ResultRepository resultRepository) {\n+        this.learningGoalRepository = learningGoalRepository;\n+        this.authorizationCheckService = authorizationCheckService;\n+        this.participationService = participationService;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Calculate the progress in a learning goal for a specific user\n+     * @param learningGoal learning goal to get the progress for\n+     * @param user user to get the progress for\n+     * @return progress of the user in the learning goal\n+     */\n+    public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0NDY2NA=="}, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTAyMDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowOTozMFrOIBmONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozOTowOVrOIDHSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0NTcxNg==", "bodyText": "split this into 2 methods", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r538545716", "createdAt": "2020-12-08T16:09:30Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.LearningGoal;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LearningGoalRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final LearningGoalRepository learningGoalRepository;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(LearningGoalRepository learningGoalRepository, AuthorizationCheckService authorizationCheckService, ParticipationService participationService,\n+            ResultRepository resultRepository) {\n+        this.learningGoalRepository = learningGoalRepository;\n+        this.authorizationCheckService = authorizationCheckService;\n+        this.participationService = participationService;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Calculate the progress in a learning goal for a specific user\n+     * @param learningGoal learning goal to get the progress for\n+     * @param user user to get the progress for\n+     * @return progress of the user in the learning goal\n+     */\n+    public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {\n+\n+        LearningGoalProgress learningGoalProgress = new LearningGoalProgress();\n+        learningGoalProgress.learningGoalId = learningGoal.getId();\n+        learningGoalProgress.learningGoalTitle = learningGoal.getTitle();\n+        learningGoalProgress.totalPointsAchievableByStudentsInLearningGoal = 0.0;\n+        learningGoalProgress.pointsAchievedByStudentInLearningGoal = 0.0;\n+\n+        // The progress will be calculated from a subset of the connected lecture units\n+        Set<LectureUnit> filteredLectureUnits = learningGoal.getLectureUnits().parallelStream().filter(LectureUnit::isVisibleToStudents).filter(lectureUnit -> {\n+            if (lectureUnit instanceof ExerciseUnit) {\n+                Exercise exercise = ((ExerciseUnit) lectureUnit).getExercise();\n+                return exercise.isAssessmentDueDateOver();\n+            }\n+            else {\n+                return true;\n+            }\n+        }).collect(Collectors.toSet());\n+\n+        // In the case that two or more connected exercise units reference the same exercise, only one of them should be used in the progress calculation\n+        Set<Exercise> exercisesAlreadyUsedInCalculation = new HashSet<>();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzNTk2MA==", "bodyText": "Done in da86f2c", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r540135960", "createdAt": "2020-12-10T12:39:09Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.LearningGoal;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LearningGoalRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final LearningGoalRepository learningGoalRepository;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(LearningGoalRepository learningGoalRepository, AuthorizationCheckService authorizationCheckService, ParticipationService participationService,\n+            ResultRepository resultRepository) {\n+        this.learningGoalRepository = learningGoalRepository;\n+        this.authorizationCheckService = authorizationCheckService;\n+        this.participationService = participationService;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Calculate the progress in a learning goal for a specific user\n+     * @param learningGoal learning goal to get the progress for\n+     * @param user user to get the progress for\n+     * @return progress of the user in the learning goal\n+     */\n+    public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {\n+\n+        LearningGoalProgress learningGoalProgress = new LearningGoalProgress();\n+        learningGoalProgress.learningGoalId = learningGoal.getId();\n+        learningGoalProgress.learningGoalTitle = learningGoal.getTitle();\n+        learningGoalProgress.totalPointsAchievableByStudentsInLearningGoal = 0.0;\n+        learningGoalProgress.pointsAchievedByStudentInLearningGoal = 0.0;\n+\n+        // The progress will be calculated from a subset of the connected lecture units\n+        Set<LectureUnit> filteredLectureUnits = learningGoal.getLectureUnits().parallelStream().filter(LectureUnit::isVisibleToStudents).filter(lectureUnit -> {\n+            if (lectureUnit instanceof ExerciseUnit) {\n+                Exercise exercise = ((ExerciseUnit) lectureUnit).getExercise();\n+                return exercise.isAssessmentDueDateOver();\n+            }\n+            else {\n+                return true;\n+            }\n+        }).collect(Collectors.toSet());\n+\n+        // In the case that two or more connected exercise units reference the same exercise, only one of them should be used in the progress calculation\n+        Set<Exercise> exercisesAlreadyUsedInCalculation = new HashSet<>();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0NTcxNg=="}, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA1Njk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/LectureService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNDoyOFrOIBmlRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToxNjo0MFrOIDELqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MTYyMw==", "bodyText": "please use Transactional here", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r538551623", "createdAt": "2020-12-08T16:14:28Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LectureService.java", "diffHunk": "@@ -77,11 +98,40 @@ public Lecture filterActiveAttachments(Lecture lectureWithAttachments, User user\n \n     /**\n      * Deletes the given lecture.\n-     * Attachments are not explicitly deleted, as the delete operation is cascaded by the database.\n+     * Attachments and Lecture Units are not explicitly deleted, as the delete operation is cascaded by the database.\n      * @param lecture the lecture to be deleted\n      */\n     public void delete(Lecture lecture) {\n-        lectureRepository.delete(lecture);\n+        Optional<Lecture> lectureToDeleteOptional = lectureRepository.findByIdWithStudentQuestionsAndLectureUnitsAndLearningGoals(lecture.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NTE2Mw==", "bodyText": "Done in ae8bec5", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r540085163", "createdAt": "2020-12-10T11:16:40Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LectureService.java", "diffHunk": "@@ -77,11 +98,40 @@ public Lecture filterActiveAttachments(Lecture lectureWithAttachments, User user\n \n     /**\n      * Deletes the given lecture.\n-     * Attachments are not explicitly deleted, as the delete operation is cascaded by the database.\n+     * Attachments and Lecture Units are not explicitly deleted, as the delete operation is cascaded by the database.\n      * @param lecture the lecture to be deleted\n      */\n     public void delete(Lecture lecture) {\n-        lectureRepository.delete(lecture);\n+        Optional<Lecture> lectureToDeleteOptional = lectureRepository.findByIdWithStudentQuestionsAndLectureUnitsAndLearningGoals(lecture.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MTYyMw=="}, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA2MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNTowNlrOIBmnxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozOToxNlrOIDHSaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MjI2MQ==", "bodyText": "this code is not very performant. I suggest to use the following existing queries:\n// 1st: fetch participations, submissions and results for individual exercises\nList<StudentParticipation> individualParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(),\n        activeIndividualExercises);\n// 2nd: fetch participations, submissions and results for team exercises\nList<StudentParticipation> teamParticipations = participationService.findByStudentIdAndTeamExercisesWithEagerSubmissionsResult(user.getId(), activeTeamExercises);\n// 3rd: merge both into one list for further processing\nList<StudentParticipation> participations = Stream.concat(individualParticipations.stream(), teamParticipations.stream()).collect(Collectors.toList());", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r538552261", "createdAt": "2020-12-08T16:15:06Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.LearningGoal;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LearningGoalRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final LearningGoalRepository learningGoalRepository;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(LearningGoalRepository learningGoalRepository, AuthorizationCheckService authorizationCheckService, ParticipationService participationService,\n+            ResultRepository resultRepository) {\n+        this.learningGoalRepository = learningGoalRepository;\n+        this.authorizationCheckService = authorizationCheckService;\n+        this.participationService = participationService;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Calculate the progress in a learning goal for a specific user\n+     * @param learningGoal learning goal to get the progress for\n+     * @param user user to get the progress for\n+     * @return progress of the user in the learning goal\n+     */\n+    public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {\n+\n+        LearningGoalProgress learningGoalProgress = new LearningGoalProgress();\n+        learningGoalProgress.learningGoalId = learningGoal.getId();\n+        learningGoalProgress.learningGoalTitle = learningGoal.getTitle();\n+        learningGoalProgress.totalPointsAchievableByStudentsInLearningGoal = 0.0;\n+        learningGoalProgress.pointsAchievedByStudentInLearningGoal = 0.0;\n+\n+        // The progress will be calculated from a subset of the connected lecture units\n+        Set<LectureUnit> filteredLectureUnits = learningGoal.getLectureUnits().parallelStream().filter(LectureUnit::isVisibleToStudents).filter(lectureUnit -> {\n+            if (lectureUnit instanceof ExerciseUnit) {\n+                Exercise exercise = ((ExerciseUnit) lectureUnit).getExercise();\n+                return exercise.isAssessmentDueDateOver();\n+            }\n+            else {\n+                return true;\n+            }\n+        }).collect(Collectors.toSet());\n+\n+        // In the case that two or more connected exercise units reference the same exercise, only one of them should be used in the progress calculation\n+        Set<Exercise> exercisesAlreadyUsedInCalculation = new HashSet<>();\n+\n+        for (LectureUnit lectureUnit : filteredLectureUnits) {\n+            LearningGoalProgress.LectureUnitProgress lectureUnitProgress = new LearningGoalProgress.LectureUnitProgress();\n+            lectureUnitProgress.lectureUnitId = lectureUnit.getId();\n+            // ToDo implement way to track progress for lecture units other than exercise units\n+            if (lectureUnit instanceof ExerciseUnit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzNjA0Mw==", "bodyText": "Done in da86f2c", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r540136043", "createdAt": "2020-12-10T12:39:16Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.LearningGoal;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LearningGoalRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final LearningGoalRepository learningGoalRepository;\n+\n+    private final AuthorizationCheckService authorizationCheckService;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(LearningGoalRepository learningGoalRepository, AuthorizationCheckService authorizationCheckService, ParticipationService participationService,\n+            ResultRepository resultRepository) {\n+        this.learningGoalRepository = learningGoalRepository;\n+        this.authorizationCheckService = authorizationCheckService;\n+        this.participationService = participationService;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Calculate the progress in a learning goal for a specific user\n+     * @param learningGoal learning goal to get the progress for\n+     * @param user user to get the progress for\n+     * @return progress of the user in the learning goal\n+     */\n+    public LearningGoalProgress getLearningGoalPerformance(LearningGoal learningGoal, User user) {\n+\n+        LearningGoalProgress learningGoalProgress = new LearningGoalProgress();\n+        learningGoalProgress.learningGoalId = learningGoal.getId();\n+        learningGoalProgress.learningGoalTitle = learningGoal.getTitle();\n+        learningGoalProgress.totalPointsAchievableByStudentsInLearningGoal = 0.0;\n+        learningGoalProgress.pointsAchievedByStudentInLearningGoal = 0.0;\n+\n+        // The progress will be calculated from a subset of the connected lecture units\n+        Set<LectureUnit> filteredLectureUnits = learningGoal.getLectureUnits().parallelStream().filter(LectureUnit::isVisibleToStudents).filter(lectureUnit -> {\n+            if (lectureUnit instanceof ExerciseUnit) {\n+                Exercise exercise = ((ExerciseUnit) lectureUnit).getExercise();\n+                return exercise.isAssessmentDueDateOver();\n+            }\n+            else {\n+                return true;\n+            }\n+        }).collect(Collectors.toSet());\n+\n+        // In the case that two or more connected exercise units reference the same exercise, only one of them should be used in the progress calculation\n+        Set<Exercise> exercisesAlreadyUsedInCalculation = new HashSet<>();\n+\n+        for (LectureUnit lectureUnit : filteredLectureUnits) {\n+            LearningGoalProgress.LectureUnitProgress lectureUnitProgress = new LearningGoalProgress.LectureUnitProgress();\n+            lectureUnitProgress.lectureUnitId = lectureUnit.getId();\n+            // ToDo implement way to track progress for lecture units other than exercise units\n+            if (lectureUnit instanceof ExerciseUnit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MjI2MQ=="}, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Njc0MDAxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/course/learning-goals/learning-goal-routing.module.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNToyODowN1rOICah9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNToyODowN1rOICah9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwMjc0Mg==", "bodyText": "This will need an update to properly display the human readable breadcrumbs since #2474 was merged.", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r539402742", "createdAt": "2020-12-09T15:28:07Z", "author": {"login": "FrankeLukas"}, "path": "src/main/webapp/app/course/learning-goals/learning-goal-routing.module.ts", "diffHunk": "@@ -0,0 +1,42 @@\n+import { NgModule } from '@angular/core';\n+import { RouterModule, Routes } from '@angular/router';\n+import { CreateLearningGoalComponent } from 'app/course/learning-goals/create-learning-goal/create-learning-goal.component';\n+import { UserRouteAccessService } from 'app/core/auth/user-route-access-service';\n+import { LearningGoalManagementComponent } from 'app/course/learning-goals/learning-goal-management/learning-goal-management.component';\n+import { EditLearningGoalComponent } from 'app/course/learning-goals/edit-learning-goal/edit-learning-goal.component';\n+\n+const routes: Routes = [\n+    {\n+        path: ':courseId/goals/create',\n+        component: CreateLearningGoalComponent,\n+        data: {\n+            authorities: ['ROLE_ADMIN', 'ROLE_INSTRUCTOR'],\n+            pageTitle: 'artemisApp.learningGoal.createLearningGoal.title',\n+        },\n+        canActivate: [UserRouteAccessService],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09c53aa3fe1d67dfc7e1c2a114156a8c71725b90"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjgyMDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/domain/LearningGoal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDowMToxNlrOIFItYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNzoxM1rOIFdatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1NjQ4MQ==", "bodyText": "is this TODO for a later PR?", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542256481", "createdAt": "2020-12-14T10:01:16Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/LearningGoal.java", "diffHunk": "@@ -25,16 +25,20 @@\n \n     @ManyToOne\n     @JoinColumn(name = \"course_id\")\n+    @JsonIgnoreProperties(\"learningGoals\")\n     private Course course;\n \n+    // ToDo remove this connection, only go through lecture units", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NTc2Ng==", "bodyText": "Done in : c70aa0f", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542595766", "createdAt": "2020-12-14T18:07:13Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/LearningGoal.java", "diffHunk": "@@ -25,16 +25,20 @@\n \n     @ManyToOne\n     @JoinColumn(name = \"course_id\")\n+    @JsonIgnoreProperties(\"learningGoals\")\n     private Course course;\n \n+    // ToDo remove this connection, only go through lecture units", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1NjQ4MQ=="}, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjgzNTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDowNDozOVrOIFI2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNzoxOFrOIFda-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1ODczNQ==", "bodyText": "it would be nice to have a consistent writing style: In other queries your are using SELECT in uppercase (which looks way more beautiful ;) )", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542258735", "createdAt": "2020-12-14T10:04:39Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -88,12 +88,25 @@\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.submissions where participation.exercise.id = :#{#exerciseId} and participation.student.id = :#{#studentId}\")\n     List<StudentParticipation> findByExerciseIdAndStudentIdWithEagerSubmissions(@Param(\"exerciseId\") Long exerciseId, @Param(\"studentId\") Long studentId);\n \n+    @Query(\"\"\"\n+            select distinct participation\n+            from StudentParticipation participation\n+            where participation.exercise.id = :#{#exerciseId} and participation.student.id = :#{#studentId}\"\"\")\n+    List<StudentParticipation> findByExerciseIdAndStudentId(@Param(\"exerciseId\") Long exerciseId, @Param(\"studentId\") Long studentId);\n+\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results left join fetch participation.submissions where participation.exercise.id = :#{#exerciseId} and participation.student.id = :#{#studentId}\")\n     List<StudentParticipation> findByExerciseIdAndStudentIdWithEagerResultsAndSubmissions(@Param(\"exerciseId\") Long exerciseId, @Param(\"studentId\") Long studentId);\n \n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.submissions where participation.exercise.id = :#{#exerciseId} and participation.team.id = :#{#teamId}\")\n     List<StudentParticipation> findByExerciseIdAndTeamIdWithEagerSubmissions(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n+    @Query(\"\"\"\n+            select distinct participation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NTgzNQ==", "bodyText": "c70aa0f", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542595835", "createdAt": "2020-12-14T18:07:18Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentParticipationRepository.java", "diffHunk": "@@ -88,12 +88,25 @@\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.submissions where participation.exercise.id = :#{#exerciseId} and participation.student.id = :#{#studentId}\")\n     List<StudentParticipation> findByExerciseIdAndStudentIdWithEagerSubmissions(@Param(\"exerciseId\") Long exerciseId, @Param(\"studentId\") Long studentId);\n \n+    @Query(\"\"\"\n+            select distinct participation\n+            from StudentParticipation participation\n+            where participation.exercise.id = :#{#exerciseId} and participation.student.id = :#{#studentId}\"\"\")\n+    List<StudentParticipation> findByExerciseIdAndStudentId(@Param(\"exerciseId\") Long exerciseId, @Param(\"studentId\") Long studentId);\n+\n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.results left join fetch participation.submissions where participation.exercise.id = :#{#exerciseId} and participation.student.id = :#{#studentId}\")\n     List<StudentParticipation> findByExerciseIdAndStudentIdWithEagerResultsAndSubmissions(@Param(\"exerciseId\") Long exerciseId, @Param(\"studentId\") Long studentId);\n \n     @Query(\"select distinct participation from StudentParticipation participation left join fetch participation.submissions where participation.exercise.id = :#{#exerciseId} and participation.team.id = :#{#teamId}\")\n     List<StudentParticipation> findByExerciseIdAndTeamIdWithEagerSubmissions(@Param(\"exerciseId\") Long exerciseId, @Param(\"teamId\") Long teamId);\n \n+    @Query(\"\"\"\n+            select distinct participation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1ODczNQ=="}, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjg1MTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDowNzo1NFrOIFI-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNzoyM1rOIFdbLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MDk5MQ==", "bodyText": "here you could combine both filters into one:\n.filter(exerciseUnit -> exerciseUnit.getExercise() != null && exerciseUnit.getExercise().isAssessmentDueDateOver()).collect(...", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542260991", "createdAt": "2020-12-14T10:07:54Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(ParticipationService participationService) {\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Calculates the progress of the given user in the given exercise units\n+     *\n+     * Note: In the case of two exercise units referencing the same exercise, only the first exercise unit will be used.\n+     *\n+     * Note: Please note that we take always the last submission into account here. Even submissions after the due date. This means for example that a student can improve his/her\n+     * progress by re-trying a quiz as often as you like. It is therefore normal, that the points here might differ from the points officially achieved in an exercise.\n+     *\n+     * @param exerciseUnits exercise units to check\n+     * @param user user to check for\n+     * @return progress of the user in the exercise units\n+     */\n+    public Set<LearningGoalProgress.LectureUnitProgress> calculateExerciseUnitsProgress(Set<ExerciseUnit> exerciseUnits, User user) {\n+        // for each exercise unit, the exercise will be mapped to a freshly created lecture unit progress.\n+        Map<Exercise, LearningGoalProgress.LectureUnitProgress> exerciseToLectureUnitProgress = exerciseUnits.stream().filter(exerciseUnit -> exerciseUnit.getExercise() != null)\n+                .filter(exerciseUnit -> exerciseUnit.getExercise().isAssessmentDueDateOver()).collect(Collectors.toMap(ExerciseUnit::getExercise, exerciseUnit -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NTg4Nw==", "bodyText": "c70aa0f", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542595887", "createdAt": "2020-12-14T18:07:23Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(ParticipationService participationService) {\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Calculates the progress of the given user in the given exercise units\n+     *\n+     * Note: In the case of two exercise units referencing the same exercise, only the first exercise unit will be used.\n+     *\n+     * Note: Please note that we take always the last submission into account here. Even submissions after the due date. This means for example that a student can improve his/her\n+     * progress by re-trying a quiz as often as you like. It is therefore normal, that the points here might differ from the points officially achieved in an exercise.\n+     *\n+     * @param exerciseUnits exercise units to check\n+     * @param user user to check for\n+     * @return progress of the user in the exercise units\n+     */\n+    public Set<LearningGoalProgress.LectureUnitProgress> calculateExerciseUnitsProgress(Set<ExerciseUnit> exerciseUnits, User user) {\n+        // for each exercise unit, the exercise will be mapped to a freshly created lecture unit progress.\n+        Map<Exercise, LearningGoalProgress.LectureUnitProgress> exerciseToLectureUnitProgress = exerciseUnits.stream().filter(exerciseUnit -> exerciseUnit.getExercise() != null)\n+                .filter(exerciseUnit -> exerciseUnit.getExercise().isAssessmentDueDateOver()).collect(Collectors.toMap(ExerciseUnit::getExercise, exerciseUnit -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2MDk5MQ=="}, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjg2NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxMDo0OFrOIFJGng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNzoyOFrOIFdbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2Mjk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542262942", "createdAt": "2020-12-14T10:10:48Z", "author": {"login": "derLalla"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(ParticipationService participationService) {\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Calculates the progress of the given user in the given exercise units\n+     *\n+     * Note: In the case of two exercise units referencing the same exercise, only the first exercise unit will be used.\n+     *\n+     * Note: Please note that we take always the last submission into account here. Even submissions after the due date. This means for example that a student can improve his/her\n+     * progress by re-trying a quiz as often as you like. It is therefore normal, that the points here might differ from the points officially achieved in an exercise.\n+     *\n+     * @param exerciseUnits exercise units to check\n+     * @param user user to check for\n+     * @return progress of the user in the exercise units\n+     */\n+    public Set<LearningGoalProgress.LectureUnitProgress> calculateExerciseUnitsProgress(Set<ExerciseUnit> exerciseUnits, User user) {\n+        // for each exercise unit, the exercise will be mapped to a freshly created lecture unit progress.\n+        Map<Exercise, LearningGoalProgress.LectureUnitProgress> exerciseToLectureUnitProgress = exerciseUnits.stream().filter(exerciseUnit -> exerciseUnit.getExercise() != null)\n+                .filter(exerciseUnit -> exerciseUnit.getExercise().isAssessmentDueDateOver()).collect(Collectors.toMap(ExerciseUnit::getExercise, exerciseUnit -> {\n+                    LearningGoalProgress.LectureUnitProgress lectureUnitProgress = new LearningGoalProgress.LectureUnitProgress();\n+                    lectureUnitProgress.lectureTitle = exerciseUnit.getLecture().getTitle();\n+                    lectureUnitProgress.lectureId = exerciseUnit.getLecture().getId();\n+                    lectureUnitProgress.lectureUnitId = exerciseUnit.getId();\n+                    lectureUnitProgress.lectureUnitTitle = exerciseUnit.getExercise().getTitle();\n+                    lectureUnitProgress.totalPointsAchievableByStudentsInLectureUnit = exerciseUnit.getExercise().getMaxScore();\n+                    return lectureUnitProgress;\n+                }, (progress1, progress2) -> progress1)); // in the case of two exercises referencing the same exercise, take the first one\n+\n+        List<Exercise> individualExercises = exerciseToLectureUnitProgress.keySet().stream().filter(exercise -> !exercise.isTeamMode()).collect(Collectors.toList());\n+        List<Exercise> teamExercises = exerciseToLectureUnitProgress.keySet().stream().filter(Exercise::isTeamMode).collect(Collectors.toList());\n+\n+        // for all relevant exercises the participations with submissions and results will be batch loaded\n+        List<StudentParticipation> participationsOfTheStudent = getStudentParticipationsWithSubmissionsAndResults(user, individualExercises, teamExercises);\n+\n+        // exercise -> participation -> submission -> result until possibly the latest result is found for the student\n+        for (Exercise exercise : exerciseToLectureUnitProgress.keySet()) {\n+            Optional<Result> optionalResult = findLastResultOfExerciseInListOfParticipatons(exercise, participationsOfTheStudent);\n+\n+            if (optionalResult.isEmpty()) {\n+                exerciseToLectureUnitProgress.get(exercise).pointsAchievedByStudentInLectureUnit = 0.0;\n+            }\n+            else {\n+                Result result = optionalResult.get();\n+                if (result.getScore() == null) {\n+                    exerciseToLectureUnitProgress.get(exercise).pointsAchievedByStudentInLectureUnit = 0.0;\n+                }\n+                else {\n+                    BigDecimal points = new BigDecimal((result.getScore() / 100.0) * exercise.getMaxScore());\n+                    points = points.setScale(2, RoundingMode.HALF_EVEN);\n+                    exerciseToLectureUnitProgress.get(exercise).pointsAchievedByStudentInLectureUnit = points.doubleValue();\n+                }\n+            }\n+\n+        }\n+\n+        return new HashSet<>(exerciseToLectureUnitProgress.values());\n+    }\n+\n+    /**\n+     * Finds the latest result for a given exercise in a list of relevant participations\n+     * @param exercise exercise to find the result for\n+     * @param participationsList participations with submissions and results that should be checked\n+     * @return optional containing the last result or else an empty optional\n+     */\n+    private Optional<Result> findLastResultOfExerciseInListOfParticipatons(Exercise exercise, List<StudentParticipation> participationsList) {\n+        StudentParticipation relevantParticipation = exercise.findRelevantParticipation(participationsList);\n+        if (relevantParticipation == null) {\n+            return Optional.empty();\n+        }\n+        else {\n+            Optional<Submission> latestSubmissionOptional = relevantParticipation.findLatestSubmission();\n+            if (latestSubmissionOptional.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            else {\n+                Submission latestSubmission = latestSubmissionOptional.get();\n+                Result latestResult = latestSubmission.getLatestResult();\n+                if (latestResult == null) {\n+                    return Optional.empty();\n+                }\n+                else {\n+                    return Optional.of(latestResult);\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NTk0NA==", "bodyText": "c70aa0f", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542595944", "createdAt": "2020-12-14T18:07:28Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/java/de/tum/in/www1/artemis/service/LearningGoalService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.lecture.ExerciseUnit;\n+import de.tum.in.www1.artemis.domain.lecture.LectureUnit;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.web.rest.dto.LearningGoalProgress;\n+\n+@Service\n+public class LearningGoalService {\n+\n+    private final ParticipationService participationService;\n+\n+    public LearningGoalService(ParticipationService participationService) {\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Calculates the progress of the given user in the given exercise units\n+     *\n+     * Note: In the case of two exercise units referencing the same exercise, only the first exercise unit will be used.\n+     *\n+     * Note: Please note that we take always the last submission into account here. Even submissions after the due date. This means for example that a student can improve his/her\n+     * progress by re-trying a quiz as often as you like. It is therefore normal, that the points here might differ from the points officially achieved in an exercise.\n+     *\n+     * @param exerciseUnits exercise units to check\n+     * @param user user to check for\n+     * @return progress of the user in the exercise units\n+     */\n+    public Set<LearningGoalProgress.LectureUnitProgress> calculateExerciseUnitsProgress(Set<ExerciseUnit> exerciseUnits, User user) {\n+        // for each exercise unit, the exercise will be mapped to a freshly created lecture unit progress.\n+        Map<Exercise, LearningGoalProgress.LectureUnitProgress> exerciseToLectureUnitProgress = exerciseUnits.stream().filter(exerciseUnit -> exerciseUnit.getExercise() != null)\n+                .filter(exerciseUnit -> exerciseUnit.getExercise().isAssessmentDueDateOver()).collect(Collectors.toMap(ExerciseUnit::getExercise, exerciseUnit -> {\n+                    LearningGoalProgress.LectureUnitProgress lectureUnitProgress = new LearningGoalProgress.LectureUnitProgress();\n+                    lectureUnitProgress.lectureTitle = exerciseUnit.getLecture().getTitle();\n+                    lectureUnitProgress.lectureId = exerciseUnit.getLecture().getId();\n+                    lectureUnitProgress.lectureUnitId = exerciseUnit.getId();\n+                    lectureUnitProgress.lectureUnitTitle = exerciseUnit.getExercise().getTitle();\n+                    lectureUnitProgress.totalPointsAchievableByStudentsInLectureUnit = exerciseUnit.getExercise().getMaxScore();\n+                    return lectureUnitProgress;\n+                }, (progress1, progress2) -> progress1)); // in the case of two exercises referencing the same exercise, take the first one\n+\n+        List<Exercise> individualExercises = exerciseToLectureUnitProgress.keySet().stream().filter(exercise -> !exercise.isTeamMode()).collect(Collectors.toList());\n+        List<Exercise> teamExercises = exerciseToLectureUnitProgress.keySet().stream().filter(Exercise::isTeamMode).collect(Collectors.toList());\n+\n+        // for all relevant exercises the participations with submissions and results will be batch loaded\n+        List<StudentParticipation> participationsOfTheStudent = getStudentParticipationsWithSubmissionsAndResults(user, individualExercises, teamExercises);\n+\n+        // exercise -> participation -> submission -> result until possibly the latest result is found for the student\n+        for (Exercise exercise : exerciseToLectureUnitProgress.keySet()) {\n+            Optional<Result> optionalResult = findLastResultOfExerciseInListOfParticipatons(exercise, participationsOfTheStudent);\n+\n+            if (optionalResult.isEmpty()) {\n+                exerciseToLectureUnitProgress.get(exercise).pointsAchievedByStudentInLectureUnit = 0.0;\n+            }\n+            else {\n+                Result result = optionalResult.get();\n+                if (result.getScore() == null) {\n+                    exerciseToLectureUnitProgress.get(exercise).pointsAchievedByStudentInLectureUnit = 0.0;\n+                }\n+                else {\n+                    BigDecimal points = new BigDecimal((result.getScore() / 100.0) * exercise.getMaxScore());\n+                    points = points.setScale(2, RoundingMode.HALF_EVEN);\n+                    exerciseToLectureUnitProgress.get(exercise).pointsAchievedByStudentInLectureUnit = points.doubleValue();\n+                }\n+            }\n+\n+        }\n+\n+        return new HashSet<>(exerciseToLectureUnitProgress.values());\n+    }\n+\n+    /**\n+     * Finds the latest result for a given exercise in a list of relevant participations\n+     * @param exercise exercise to find the result for\n+     * @param participationsList participations with submissions and results that should be checked\n+     * @return optional containing the last result or else an empty optional\n+     */\n+    private Optional<Result> findLastResultOfExerciseInListOfParticipatons(Exercise exercise, List<StudentParticipation> participationsList) {\n+        StudentParticipation relevantParticipation = exercise.findRelevantParticipation(participationsList);\n+        if (relevantParticipation == null) {\n+            return Optional.empty();\n+        }\n+        else {\n+            Optional<Submission> latestSubmissionOptional = relevantParticipation.findLatestSubmission();\n+            if (latestSubmissionOptional.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            else {\n+                Submission latestSubmission = latestSubmissionOptional.get();\n+                Result latestResult = latestSubmission.getLatestResult();\n+                if (latestResult == null) {\n+                    return Optional.empty();\n+                }\n+                else {\n+                    return Optional.of(latestResult);\n+                }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2Mjk0Mg=="}, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzAxMjczOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/i18n/de/learningGoal.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDo0Mzo1N1rOIFKcWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNzozM1rOIFdbog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NDg4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"titleMaxLengthValidationError\": \"Der Titel eines Lernziels ist auf maximal 255 Symbole beschraenkt\",\n          \n          \n            \n                            \"titleUniqueValidationError\": \"Es gibt bereits ein Lernziel mit diesem Titel in dem Kurs\",\n          \n          \n            \n                            \"descriptionPlaceholder\": \"Beschreibe das Lernziel. Was sollen die Studenten lernen?\",\n          \n          \n            \n                            \"descriptionMaxLengthValidationError\": \"Die Beschreibung eines Lernziels ist auf maximal 10 000 Symbole beschraenkt\",\n          \n          \n            \n                            \"titleMaxLengthValidationError\": \"Der Titel eines Lernziels ist auf maximal 255 Symbole beschr\u00e4nkt\",\n          \n          \n            \n                            \"titleUniqueValidationError\": \"Es gibt bereits ein Lernziel mit diesem Titel in dem Kurs\",\n          \n          \n            \n                            \"descriptionPlaceholder\": \"Beschreibe das Lernziel. Was sollen die Studenten lernen?\",\n          \n          \n            \n                            \"descriptionMaxLengthValidationError\": \"Die Beschreibung eines Lernziels ist auf maximal 10 000 Symbole beschr\u00e4nkt\",", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542284888", "createdAt": "2020-12-14T10:43:57Z", "author": {"login": "derLalla"}, "path": "src/main/webapp/i18n/de/learningGoal.json", "diffHunk": "@@ -0,0 +1,61 @@\n+{\n+    \"artemisApp\": {\n+        \"learningGoal\": {\n+            \"created\": \"Lernziel erstellt\",\n+            \"deleted\": \"Lernziel gel\u00f6scht\",\n+            \"updated\": \"Lernziel bearbeitet\",\n+            \"learningGoalButton\": \"Lernziele\",\n+            \"title\": \"Lernziele\",\n+            \"description\": \"Beschreibung\",\n+            \"manageLearningGoals\": {\n+                \"title\": \"Lernzielmanagement\"\n+            },\n+            \"createLearningGoal\": {\n+                \"title\": \"Erstelle ein neues Lernziel\",\n+                \"titlePlaceholder\": \"Gib dem Lernziel einen Titel\",\n+                \"titleRequiredValidationError\": \"Ein Lernziel braucht einen Titel\",\n+                \"titleMaxLengthValidationError\": \"Der Titel eines Lernziels ist auf maximal 255 Symbole beschraenkt\",\n+                \"titleUniqueValidationError\": \"Es gibt bereits ein Lernziel mit diesem Titel in dem Kurs\",\n+                \"descriptionPlaceholder\": \"Beschreibe das Lernziel. Was sollen die Studenten lernen?\",\n+                \"descriptionMaxLengthValidationError\": \"Die Beschreibung eines Lernziels ist auf maximal 10 000 Symbole beschraenkt\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NjAwMg==", "bodyText": "c70aa0f", "url": "https://github.com/ls1intum/Artemis/pull/2510#discussion_r542596002", "createdAt": "2020-12-14T18:07:33Z", "author": {"login": "stefanwaldhauser"}, "path": "src/main/webapp/i18n/de/learningGoal.json", "diffHunk": "@@ -0,0 +1,61 @@\n+{\n+    \"artemisApp\": {\n+        \"learningGoal\": {\n+            \"created\": \"Lernziel erstellt\",\n+            \"deleted\": \"Lernziel gel\u00f6scht\",\n+            \"updated\": \"Lernziel bearbeitet\",\n+            \"learningGoalButton\": \"Lernziele\",\n+            \"title\": \"Lernziele\",\n+            \"description\": \"Beschreibung\",\n+            \"manageLearningGoals\": {\n+                \"title\": \"Lernzielmanagement\"\n+            },\n+            \"createLearningGoal\": {\n+                \"title\": \"Erstelle ein neues Lernziel\",\n+                \"titlePlaceholder\": \"Gib dem Lernziel einen Titel\",\n+                \"titleRequiredValidationError\": \"Ein Lernziel braucht einen Titel\",\n+                \"titleMaxLengthValidationError\": \"Der Titel eines Lernziels ist auf maximal 255 Symbole beschraenkt\",\n+                \"titleUniqueValidationError\": \"Es gibt bereits ein Lernziel mit diesem Titel in dem Kurs\",\n+                \"descriptionPlaceholder\": \"Beschreibe das Lernziel. Was sollen die Studenten lernen?\",\n+                \"descriptionMaxLengthValidationError\": \"Die Beschreibung eines Lernziels ist auf maximal 10 000 Symbole beschraenkt\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NDg4OA=="}, "originalCommit": {"oid": "e3718af4662982de283e2c54bd4f539b392d1def"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4306, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}