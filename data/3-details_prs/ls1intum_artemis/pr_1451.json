{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTExNTgx", "number": 1451, "title": "Feature/#1369 add rating to text exercise", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I documented the TypeScript code using JSDoc style.\n Client: I added multiple integration tests (Jest) related to the features\n Client: I added multiple screenshots/screencasts of my UI changes\n Client: I translated all the newly inserted strings into German and English\n\nMotivation and Context\nThis feature allows students to rate the feedback they got on a result level in text exercises.\nDescription\n\nCreated a RatingModule that can be used for every exercise\nAdded a REST route\nInserted the newly created RatingComponent into the text exercises and styled it\n\nSteps for Testing\n\n\nLog in to Artemis\nNavigate to a text-exercise that has feedback\n2.1 If such does not exist do the following:\n2.2 Create a new Text exercise\n2.3 Submit a solution for it\n2.4 Assess this text exercise\nNavigate to \"view result\" on that text exercise\nSee 5 empty stars at the bottom of the page\nRate the result\nUpdate the rating by giving it another amount of stars\nReload the page and see that the rating was saved\n\nScreenshots", "createdAt": "2020-05-11T13:38:44Z", "url": "https://github.com/ls1intum/Artemis/pull/1451", "merged": true, "mergeCommit": {"oid": "ee77b4f535f949582ae0eb271a5f41472f761ed4"}, "closed": true, "closedAt": "2020-06-02T21:11:23Z", "author": {"login": "JonasPetry"}, "timelineItems": {"totalCount": 108, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnacXzgFqTQyMzAxMjcwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnbZ8PAFqTQyMzA1NjcwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDEyNzAw", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-423012700", "createdAt": "2020-06-02T19:57:39Z", "commit": {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDEzNTYy", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-423013562", "createdAt": "2020-06-02T19:58:57Z", "commit": {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDEzOTM0", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-423013934", "createdAt": "2020-06-02T19:59:30Z", "commit": {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c864205d06b265c9719ed1d6286bd9a1cce7c6d2", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/c864205d06b265c9719ed1d6286bd9a1cce7c6d2", "committedDate": "2020-06-02T20:00:10Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDI3MDcw", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-423027070", "createdAt": "2020-06-02T20:19:24Z", "commit": {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd5f2aae8863556951bb024222413b57ec0dccc", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/1fd5f2aae8863556951bb024222413b57ec0dccc", "committedDate": "2020-06-02T20:39:33Z", "message": "Fix method call that got renamed on develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377e50a9b26dca17b387f85c63ef0179a7162961", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/377e50a9b26dca17b387f85c63ef0179a7162961", "committedDate": "2020-06-02T20:51:07Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDU2NzA5", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-423056709", "createdAt": "2020-06-02T21:04:54Z", "commit": {"oid": "377e50a9b26dca17b387f85c63ef0179a7162961"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02a3fd9ed2e98346b7e060b0d11736ebbf04078", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f02a3fd9ed2e98346b7e060b0d11736ebbf04078", "committedDate": "2020-05-10T14:05:54Z", "message": "Add feedback_rating to database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f6ca475a80b64924b76f3a1f6f172173c03555", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/82f6ca475a80b64924b76f3a1f6f172173c03555", "committedDate": "2020-05-11T13:14:18Z", "message": "Add ng-starrating dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bff35df2af7a6fd8dbd6637cf69006c876db6eb6", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/bff35df2af7a6fd8dbd6637cf69006c876db6eb6", "committedDate": "2020-05-11T13:19:40Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f46d6b2f02ef10fe03ce874417fa9f63d6f720be", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f46d6b2f02ef10fe03ce874417fa9f63d6f720be", "committedDate": "2020-05-11T13:30:01Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6938329ccb1daa18d02c02ca058633523d9ef2c2", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/6938329ccb1daa18d02c02ca058633523d9ef2c2", "committedDate": "2020-05-11T13:31:46Z", "message": "Add feedback_rating to database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806f2c6dd0a00db332248285247888e32a4fb9bc", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/806f2c6dd0a00db332248285247888e32a4fb9bc", "committedDate": "2020-05-11T13:31:46Z", "message": "Add ng-starrating dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4b8c2c18d9b3466a42f8e0f25fabcf4d03eec0", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/8b4b8c2c18d9b3466a42f8e0f25fabcf4d03eec0", "committedDate": "2020-05-11T13:31:46Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d020ba7d4e5c12dcd5d923d8585d52c43e56d80", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/6d020ba7d4e5c12dcd5d923d8585d52c43e56d80", "committedDate": "2020-05-11T13:31:46Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10fdb533b30b06eb75db3bf0805d2d9fff8ff0a3", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/10fdb533b30b06eb75db3bf0805d2d9fff8ff0a3", "committedDate": "2020-05-11T13:32:18Z", "message": "Merge branch 'feature/#1369-add-rating-to-text-exercise' of github.com:ls1intum/Artemis into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc368bdb248d9d16b3ca2d4f19edb9dd6fb55439", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/fc368bdb248d9d16b3ca2d4f19edb9dd6fb55439", "committedDate": "2020-05-15T15:33:29Z", "message": "Add feedback_rating to database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d39f26518b0964e60ac07e6e250d6e9738a97a6d", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d39f26518b0964e60ac07e6e250d6e9738a97a6d", "committedDate": "2020-05-15T15:33:29Z", "message": "Add ng-starrating dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "123b466395d0fc79a3acbf04d78f8089455a623e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/123b466395d0fc79a3acbf04d78f8089455a623e", "committedDate": "2020-05-15T15:33:29Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e3d7c9881a7e7f63bb3e510142206946b45b23", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/c9e3d7c9881a7e7f63bb3e510142206946b45b23", "committedDate": "2020-05-15T15:33:29Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb9db456dbc26680e34d59a1606df4ce264aa0dc", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/fb9db456dbc26680e34d59a1606df4ce264aa0dc", "committedDate": "2020-05-15T15:33:29Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ec3883d701d9c0779e56d9d13ae9e179bc31cb", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d6ec3883d701d9c0779e56d9d13ae9e179bc31cb", "committedDate": "2020-05-15T15:33:29Z", "message": "Add rating feature with mocked setRating()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "647be15886c7cb6a9bd6b8ef1795bd7bc233b4c1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/647be15886c7cb6a9bd6b8ef1795bd7bc233b4c1", "committedDate": "2020-05-15T15:33:30Z", "message": "Add ng-starrating component to package.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec91bc498978d8df7a68125710103cb70009b5e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/7ec91bc498978d8df7a68125710103cb70009b5e", "committedDate": "2020-05-15T15:33:30Z", "message": "Add database config for result_rating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0290fc8c7c83930434c72298cc217338ad77881d", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/0290fc8c7c83930434c72298cc217338ad77881d", "committedDate": "2020-05-15T15:33:30Z", "message": "Add backend support for rating.service.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a04f61d00855f090c95789ecb61f3de73eee22e8", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/a04f61d00855f090c95789ecb61f3de73eee22e8", "committedDate": "2020-05-15T15:33:30Z", "message": "Add Rating component to Angular"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed3ff754717afffd307c4db7c4477a900ccb2183", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/ed3ff754717afffd307c4db7c4477a900ccb2183", "committedDate": "2020-05-15T15:33:30Z", "message": "Add Rating support on Result level to text exercises"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10fdb533b30b06eb75db3bf0805d2d9fff8ff0a3", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/10fdb533b30b06eb75db3bf0805d2d9fff8ff0a3", "committedDate": "2020-05-11T13:32:18Z", "message": "Merge branch 'feature/#1369-add-rating-to-text-exercise' of github.com:ls1intum/Artemis into feature/#1369-add-rating-to-text-exercise"}, "afterCommit": {"oid": "ed3ff754717afffd307c4db7c4477a900ccb2183", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/ed3ff754717afffd307c4db7c4477a900ccb2183", "committedDate": "2020-05-15T15:33:30Z", "message": "Add Rating support on Result level to text exercises"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "145d1d736fe38c110b39478478171bc96491dba4", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/145d1d736fe38c110b39478478171bc96491dba4", "committedDate": "2020-05-15T16:42:36Z", "message": "Resolve merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042fe29c816ad05c2fd8e29ce169280f8f208070", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/042fe29c816ad05c2fd8e29ce169280f8f208070", "committedDate": "2020-05-15T16:43:05Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d26f5ca274b952db338965dfded654fc4129d30", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/8d26f5ca274b952db338965dfded654fc4129d30", "committedDate": "2020-05-15T17:10:29Z", "message": "Add rating check in RatingResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1d26243763e80ab8c66d5690c83d1fc9da3ec1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/6f1d26243763e80ab8c66d5690c83d1fc9da3ec1", "committedDate": "2020-05-17T07:36:42Z", "message": "Fix failing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9539e87cbec7687d3d3d2d92a6cc255bdd78e1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/1b9539e87cbec7687d3d3d2d92a6cc255bdd78e1", "committedDate": "2020-05-18T09:01:52Z", "message": "Remove debug logging and add TODO for UserAuthentification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5811bb45159e3f9ce31a3f6d5537da10a83f07fc", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/5811bb45159e3f9ce31a3f6d5537da10a83f07fc", "committedDate": "2020-05-18T09:06:56Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b3412b52c2bf0e41a09c65355569122da4e9c7", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/55b3412b52c2bf0e41a09c65355569122da4e9c7", "committedDate": "2020-05-21T15:32:13Z", "message": "Update server resources to use MapsId and small bugfixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f195ef99303cf837c64ee6dc95750bb0d31195a", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/0f195ef99303cf837c64ee6dc95750bb0d31195a", "committedDate": "2020-05-21T15:32:55Z", "message": "Update liquibase to new PK strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9917b18f10f8be283e987d8a9c40a7bd5f5af132", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/9917b18f10f8be283e987d8a9c40a7bd5f5af132", "committedDate": "2020-05-21T15:34:50Z", "message": "Add Integration Test for RatingResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86dfbc0ab9521b006e3830886f127e75f759a3a3", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/86dfbc0ab9521b006e3830886f127e75f759a3a3", "committedDate": "2020-05-21T16:00:16Z", "message": "Update rating to handle Not Found Error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e61a799c6534c9f3f56cb4bb3d19a3acfb36ef9", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/2e61a799c6534c9f3f56cb4bb3d19a3acfb36ef9", "committedDate": "2020-05-21T22:00:07Z", "message": "Add test case for result not found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d4daa1f0686abddcc6331186656516c6570f65", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/46d4daa1f0686abddcc6331186656516c6570f65", "committedDate": "2020-05-21T23:23:56Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120d9cc80a032b93098dd8c223fb65a8a0871e75", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/120d9cc80a032b93098dd8c223fb65a8a0871e75", "committedDate": "2020-05-23T09:01:35Z", "message": "fix bug where wrong column was adressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c8b7050d9470b3a1ca54b1677df17550a21774", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/c9c8b7050d9470b3a1ca54b1677df17550a21774", "committedDate": "2020-05-23T09:08:11Z", "message": "Update Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151a5595c04f980ce88cebe32eed94f7a759c5d5", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/151a5595c04f980ce88cebe32eed94f7a759c5d5", "committedDate": "2020-05-23T10:38:42Z", "message": "Check that only the owner of the participation can change the rating and add integration test for this case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d807195f4708e51f14e455b516d52c13ae3c843a", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d807195f4708e51f14e455b516d52c13ae3c843a", "committedDate": "2020-05-24T21:11:20Z", "message": "Remove creation alert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd6650c8debb040deab13d391db8779d941768f", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/0bd6650c8debb040deab13d391db8779d941768f", "committedDate": "2020-05-25T12:28:33Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2a4b6b1322cd1d900d7143e6239457a713c494f", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d2a4b6b1322cd1d900d7143e6239457a713c494f", "committedDate": "2020-05-25T16:51:43Z", "message": "Move auto generated test file into proper folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/99935f8977138fccb6d7c61d56561509fd7c45b5", "committedDate": "2020-05-25T17:03:01Z", "message": "remove auto generated client test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODI3MzY1", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417827365", "createdAt": "2020-05-25T17:48:34Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODI3NDM1", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417827435", "createdAt": "2020-05-25T17:48:53Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODI3NTk2", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417827596", "createdAt": "2020-05-25T17:49:32Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQyNjM5", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417842639", "createdAt": "2020-05-25T18:46:41Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0Njo0MVrOGaH54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0Njo0MVrOGaH54g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTY2Ng==", "bodyText": "I don\u2019t think cascade makes sense here. This would mean a result is deleted when a rating is deleted", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430045666", "createdAt": "2020-05-25T18:46:41Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @MapsId\n+    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQyODc2", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417842876", "createdAt": "2020-05-25T18:47:31Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0NzozMVrOGaH6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0NzozMVrOGaH6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTg4MA==", "bodyText": "Please remove transactional here", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430045880", "createdAt": "2020-05-25T18:47:31Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     * @param rating - Rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQyOTM2", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417842936", "createdAt": "2020-05-25T18:47:46Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0Nzo0NlrOGaH7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0Nzo0NlrOGaH7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTk1Mg==", "bodyText": "Please remove transactional here", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430045952", "createdAt": "2020-05-25T18:47:46Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     * @param rating - Rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional\n+    public Rating saveRating(Rating rating) {\n+        Result result = resultRepository.findById(rating.getResult().getId()).orElseThrow();\n+        Rating serverRating = new Rating();\n+        serverRating.setRating(rating.getRating());\n+        serverRating.setResult(result);\n+        return ratingRepository.save(serverRating);\n+    }\n+\n+    /**\n+     * Update an existing Rating\n+     * @param rating - Updated Rating that should be persisted\n+     * @return updated rating\n+     */\n+    @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQzMTc4", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417843178", "createdAt": "2020-05-25T18:48:42Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0ODo0MlrOGaH70w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0ODo0MlrOGaH70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjE2Mw==", "bodyText": "Do you really need this?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046163", "createdAt": "2020-05-25T18:48:42Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQzMzUz", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417843353", "createdAt": "2020-05-25T18:49:27Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0OToyN1rOGaH8dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0OToyN1rOGaH8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjMyNg==", "bodyText": "The URL is incorrect. I suggest /results/{resultId}/rating", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046326", "createdAt": "2020-05-25T18:49:27Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/rating/result/{resultId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQzNDA0", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417843404", "createdAt": "2020-05-25T18:49:43Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0OTo0M1rOGaH8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0OTo0M1rOGaH8pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjM3NA==", "bodyText": "Wrong url", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046374", "createdAt": "2020-05-25T18:49:43Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/rating/result/{resultId}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param rating - Rating that should be persisted\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQzNDQ3", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417843447", "createdAt": "2020-05-25T18:49:55Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0OTo1NVrOGaH81w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo0OTo1NVrOGaH81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjQyMw==", "bodyText": "Wrong url", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046423", "createdAt": "2020-05-25T18:49:55Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/rating/result/{resultId}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param rating - Rating that should be persisted\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@RequestBody Rating rating) throws URISyntaxException {\n+        if (rating.getId() != null) {\n+            throw new BadRequestAlertException(\"The rating must not have an ID\", ENTITY_NAME, \"idDoesExist\");\n+        }\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(rating.getResult().getId());\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(rating);\n+        return ResponseEntity.created(new URI(\"/api/rating/\" + result.getId())).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param rating - updated Rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQzOTM0", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-417843934", "createdAt": "2020-05-25T18:51:40Z", "commit": {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb735d16b5588efc246be1b4809177d5175d4bbc", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/cb735d16b5588efc246be1b4809177d5175d4bbc", "committedDate": "2020-05-25T21:26:21Z", "message": "Update URls according to feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1fc82b20b697b98d289d1c34b1ea5fc067c016", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/6f1fc82b20b697b98d289d1c34b1ea5fc067c016", "committedDate": "2020-05-25T21:31:20Z", "message": "Remove transactional from update method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDkwNjc1", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-418090675", "createdAt": "2020-05-26T08:44:35Z", "commit": {"oid": "6f1fc82b20b697b98d289d1c34b1ea5fc067c016"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NDozNVrOGaUfMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NDozNVrOGaUfMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MTgyNg==", "bodyText": "You're adding the slash twice, resulting in a 500.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430251826", "createdAt": "2020-05-26T08:44:35Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1fc82b20b697b98d289d1c34b1ea5fc067c016"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/114f290e1b160b024cca9dc827af4a60e6293337", "committedDate": "2020-05-26T08:50:13Z", "message": "Remove double slash in URL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDk3MjUy", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-418097252", "createdAt": "2020-05-26T08:52:55Z", "commit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo1Mjo1NVrOGaUzFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo1Mjo1NVrOGaUzFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NjkxNg==", "bodyText": "All the urls seem inconsistent with the server endpoints. Does rating.service.ts still need to be adapted to the latest changes in RatingResource?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430256916", "createdAt": "2020-05-26T08:52:55Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Update the student rating for feedback on the server.\n+     * @param rating - Rating for the result\n+     */\n+    setRating(rating: Rating): Observable<Rating> {\n+        return this.http.post<Rating>(this.ratingResourceUrl + `${rating.id}/rating/${rating.rating}`, rating);\n+    }\n+\n+    /**\n+     * Get rating for \"resultId\" Result\n+     * @param resultId - Id of Result who's rating is received\n+     */\n+    getRating(resultId: number): Observable<Rating> {\n+        return this.http.get<Rating>(this.ratingResourceUrl + `${resultId}/rating`);\n+    }\n+\n+    /**\n+     * Update rating for \"resultId\" Result\n+     * @param rating - Rating for the result\n+     */\n+    updateRating(rating: Rating): Observable<Rating> {\n+        return this.http.put<Rating>(this.ratingResourceUrl + `${rating.id}/rating/${rating.rating}`, rating);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTA5OTUy", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-418109952", "createdAt": "2020-05-26T09:08:45Z", "commit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTowODo0NVrOGaVZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTozNzoyNVrOGaWcwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2NjYzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"Feedback{\" + \"id=\" + getId() + \", rating='\" + getRating() + \"'\" + \", resultId='\" + getId() + \"'}\";\n          \n          \n            \n                    return \"Rating{\" + \"id=\" + getId() + \", rating='\" + getRating() + \"'}\";", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430266636", "createdAt": "2020-05-26T09:08:45Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @MapsId\n+    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"id\")\n+    private Result result;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Integer getRating() {\n+        return rating;\n+    }\n+\n+    public void setRating(Integer rating) {\n+        this.rating = rating;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public void setResult(Result result) {\n+        this.result = result;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(getId());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Feedback{\" + \"id=\" + getId() + \", rating='\" + getRating() + \"'\" + \", resultId='\" + getId() + \"'}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2NzUyNQ==", "bodyText": "Maybe better call it updatedRating?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430267525", "createdAt": "2020-05-26T09:10:13Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     *\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be persisted\n+     * @param ratingValue - Value of the rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional\n+    public Rating saveRating(Long resultId, Integer ratingValue) {\n+        Result result = resultRepository.findById(resultId).orElseThrow();\n+        Rating serverRating = new Rating();\n+        serverRating.setRating(ratingValue);\n+        serverRating.setResult(result);\n+        return ratingRepository.save(serverRating);\n+    }\n+\n+    /**\n+     * Update an existing Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated rating\n+     */\n+    public Rating updateRating(Long resultId, Integer ratingValue) {\n+        Rating update = this.ratingRepository.findById(resultId).orElseThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2OTU3MQ==", "bodyText": "I think we should avoid raising a 404 simply because a result doesn't have a rating yet. I think a 404 should mostly be reserved for actual unexpected not found errors since it will also end up in Sentry and the error statistics. Having a 404 raised every time someone looks at an assessed submission without result rating would generate a lot of 404s.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430269571", "createdAt": "2020-05-26T09:13:36Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MDAwOA==", "bodyText": "this. is not needed.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430270008", "createdAt": "2020-05-26T09:14:24Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     *\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be persisted\n+     * @param ratingValue - Value of the rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional\n+    public Rating saveRating(Long resultId, Integer ratingValue) {\n+        Result result = resultRepository.findById(resultId).orElseThrow();\n+        Rating serverRating = new Rating();\n+        serverRating.setRating(ratingValue);\n+        serverRating.setResult(result);\n+        return ratingRepository.save(serverRating);\n+    }\n+\n+    /**\n+     * Update an existing Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated rating\n+     */\n+    public Rating updateRating(Long resultId, Integer ratingValue) {\n+        Rating update = this.ratingRepository.findById(resultId).orElseThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MDEwNg==", "bodyText": "this. is not needed.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430270106", "createdAt": "2020-05-26T09:14:33Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MjI0Mg==", "bodyText": "this. is not needed.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430272242", "createdAt": "2020-05-26T09:17:59Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mjk2NA==", "bodyText": "The name result is pretty confusing here since it's actually a Rating and not a Result. Better call it rating or savedRating.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430272964", "createdAt": "2020-05-26T09:19:15Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzM2NA==", "bodyText": "Can be confusing for other developers since it assumes knowledge of the shared primary key.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273364", "createdAt": "2020-05-26T09:19:57Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzQ4Mg==", "bodyText": "Can be confusing for other developers since it assumes knowledge of the shared primary key.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273482", "createdAt": "2020-05-26T09:20:07Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + result.getId() + \"/rating\")).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzczMg==", "bodyText": "this. is not needed.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273732", "createdAt": "2020-05-26T09:20:32Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + result.getId() + \"/rating\")).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> updateRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.updateRating(resultId, ratingValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mzk0Ng==", "bodyText": "The name result is pretty confusing here since it's actually a Rating and not a Result. Better call it rating or updatedRating.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273946", "createdAt": "2020-05-26T09:20:52Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + result.getId() + \"/rating\")).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> updateRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.updateRating(resultId, ratingValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzczMg=="}, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NzA2NA==", "bodyText": "Constructor should be at the top.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430277064", "createdAt": "2020-05-26T09:26:04Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;\n+    public rating: Rating;\n+    private _result: Result;\n+\n+    /**\n+     * Result Input of the result that the rating is for\n+     * @param result\n+     */\n+    @Input()\n+    public set result(result: Result) {\n+        if (!result || !result.submission) {\n+            return;\n+        }\n+        this._result = result;\n+        this.ratingService.getRating(result.id).subscribe(\n+            (rating) => {\n+                this.rating = rating;\n+            },\n+            () => {\n+                this.rating = new Rating(result, 0);\n+            },\n+        );\n+    }\n+\n+    constructor(public ratingService: RatingService) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Nzg1MA==", "bodyText": "I don't think we use this syntax of prefixing private attributes with an underscore at the moment.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430277850", "createdAt": "2020-05-26T09:27:20Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;\n+    public rating: Rating;\n+    private _result: Result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3ODEyNQ==", "bodyText": "Can this be removed?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430278125", "createdAt": "2020-05-26T09:27:44Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3OTIzMw==", "bodyText": "I think the word update should be avoided here since it could be misinterpreted as: The rating already exists and we want to update it (even though this is not the case here, it is being created).", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430279233", "createdAt": "2020-05-26T09:29:31Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Update the student rating for feedback on the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3OTQ1MA==", "bodyText": "I think createRating might be better to avoid confusion with updateRating.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430279450", "createdAt": "2020-05-26T09:29:54Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Update the student rating for feedback on the server.\n+     * @param rating - Rating for the result\n+     */\n+    setRating(rating: Rating): Observable<Rating> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MTAzOA==", "bodyText": "Is this construction needed compared to a normal @Input declaration and loading the result in ngOnInit?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430281038", "createdAt": "2020-05-26T09:32:35Z", "author": {"login": "madwau"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;\n+    public rating: Rating;\n+    private _result: Result;\n+\n+    /**\n+     * Result Input of the result that the rating is for\n+     * @param result\n+     */\n+    @Input()\n+    public set result(result: Result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MTgxNA==", "bodyText": "It would be good to add some assertions on the saved entity, e.g. that it belongs to the correct result and that the rating value is correct.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430281814", "createdAt": "2020-05-26T09:33:53Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MzExMw==", "bodyText": "The name result is confusing in this context. Should be changed to rating or savedRating. Then the this. is also not needed anymore.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430283113", "createdAt": "2020-05-26T09:35:57Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testCreateRating_asTutor_FORBIDDEN() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.OK, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser_NOT_FOUND() throws Exception {\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.NOT_FOUND, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testUpdateRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MzgzNw==", "bodyText": "Assertions are missing. Also, what is being tested here? Wouldn't it be better if an actual change to the rating value was tested and verified?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430283837", "createdAt": "2020-05-26T09:37:12Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testCreateRating_asTutor_FORBIDDEN() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.OK, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser_NOT_FOUND() throws Exception {\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.NOT_FOUND, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testUpdateRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.put(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4Mzk2OQ==", "bodyText": "See above.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430283969", "createdAt": "2020-05-26T09:37:25Z", "author": {"login": "madwau"}, "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testCreateRating_asTutor_FORBIDDEN() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.OK, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser_NOT_FOUND() throws Exception {\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.NOT_FOUND, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testUpdateRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.put(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testUpdateRating_asTutor_FORBIDDEN() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTQzODQz", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-418143843", "createdAt": "2020-05-26T09:53:46Z", "commit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1Mzo0NlrOGaXCIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1Mzo0NlrOGaXCIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MzUzNg==", "bodyText": "Depending on the usage a @JsonIgnore could be added since right now the whole result is always serialized when a rating is returned by the server although it's not actually needed for the current use case as far as I can see.", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430293536", "createdAt": "2020-05-26T09:53:46Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @MapsId\n+    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"id\")\n+    private Result result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114f290e1b160b024cca9dc827af4a60e6293337"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1e6371fec77e2425e1eb1ac6444f7dd36ba1bd", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/fa1e6371fec77e2425e1eb1ac6444f7dd36ba1bd", "committedDate": "2020-05-26T10:16:51Z", "message": "Update src/main/java/de/tum/in/www1/artemis/domain/Rating.java\n\nCo-authored-by: Martin Wauligmann <martin@wauligmann.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f01ea379f5aa041be5798d2e960672427b22d17", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/5f01ea379f5aa041be5798d2e960672427b22d17", "committedDate": "2020-05-26T10:49:50Z", "message": "Implement first part of Martins feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59207d84166153103dba14e8fc171c88b7fd53c", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d59207d84166153103dba14e8fc171c88b7fd53c", "committedDate": "2020-05-26T11:11:00Z", "message": "Change Input structure of rating.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5950ec2fd60f37d782d3e7ff4e5c115477244c6", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/e5950ec2fd60f37d782d3e7ff4e5c115477244c6", "committedDate": "2020-05-26T11:11:54Z", "message": "Remove unnecessary this. in RatingResource.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd96d3946d4ffa884393d4b1cfce566852c51a5a", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/bd96d3946d4ffa884393d4b1cfce566852c51a5a", "committedDate": "2020-05-26T11:28:19Z", "message": "Adjust RatingResource to send null if there is no rating yet instead of 404 NOT FOUND"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392fb4975bbff4da24bb6fc35dcab53e2ecbc441", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/392fb4975bbff4da24bb6fc35dcab53e2ecbc441", "committedDate": "2020-05-26T14:15:00Z", "message": "Add more assertions to RatingResourceIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "632cc3ac2002668ba1bca2e82a2d88bfb11dad17", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/632cc3ac2002668ba1bca2e82a2d88bfb11dad17", "committedDate": "2020-05-26T15:37:59Z", "message": "Fix documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6bc11a73fbe7fc84fee0e05953ef50f9345ed2", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/3f6bc11a73fbe7fc84fee0e05953ef50f9345ed2", "committedDate": "2020-05-27T20:41:15Z", "message": "Add JsonIgnore to Rating.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "497dfb695e3b1a1bfeee5385189eecd69a3fa699", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/497dfb695e3b1a1bfeee5385189eecd69a3fa699", "committedDate": "2020-05-27T20:42:39Z", "message": "Add client tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6ce8944c1ca49972acec72e38128c0a70b2107", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/5d6ce8944c1ca49972acec72e38128c0a70b2107", "committedDate": "2020-05-28T13:59:35Z", "message": "Extend createRating Javadoc regarding Transactional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80eaa3ea935298732ba2d25147088d31646e0c79", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/80eaa3ea935298732ba2d25147088d31646e0c79", "committedDate": "2020-05-28T15:25:46Z", "message": "Remove Cascading from Rating.java and remove unused body in update route"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjUwNDAy", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-421650402", "createdAt": "2020-06-01T07:41:24Z", "commit": {"oid": "80eaa3ea935298732ba2d25147088d31646e0c79"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9905dbbddf7842535a84f7f1151c6f47de655d41", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/9905dbbddf7842535a84f7f1151c6f47de655d41", "committedDate": "2020-06-01T11:32:04Z", "message": "Remove MapsId and Transactional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5af8e704f3d8fd9f6aa6c7e2f165b79dd73790b1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/5af8e704f3d8fd9f6aa6c7e2f165b79dd73790b1", "committedDate": "2020-06-01T12:09:20Z", "message": "Improve clients tests for rating.component to achieve 100% test coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTEwMTc3", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-421910177", "createdAt": "2020-06-01T14:53:10Z", "commit": {"oid": "5af8e704f3d8fd9f6aa6c7e2f165b79dd73790b1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f520fba8d409db5f04a4c91f3460372e5b65909e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/f520fba8d409db5f04a4c91f3460372e5b65909e", "committedDate": "2020-06-01T14:56:27Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0757b66b965cab93c8e8380c6a387c9dcaa5ade0", "author": {"user": {"login": "jpbernius", "name": "Jan Philip Bernius"}}, "url": "https://github.com/ls1intum/Artemis/commit/0757b66b965cab93c8e8380c6a387c9dcaa5ade0", "committedDate": "2020-06-01T17:14:57Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a5f78141be0f20cab0ed2a4be12ba01802292e8", "author": {"user": {"login": "sascha11110", "name": "Sascha Beele"}}, "url": "https://github.com/ls1intum/Artemis/commit/3a5f78141be0f20cab0ed2a4be12ba01802292e8", "committedDate": "2020-06-01T21:05:57Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e807f993bfe03303c30fb44d94ae27afe0eb9a5", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/2e807f993bfe03303c30fb44d94ae27afe0eb9a5", "committedDate": "2020-06-01T22:11:12Z", "message": "Introduce seperate Id for Rating"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzg1NzAx", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-422385701", "createdAt": "2020-06-02T06:47:56Z", "commit": {"oid": "2e807f993bfe03303c30fb44d94ae27afe0eb9a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjo0Nzo1NlrOGdkNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjo0Nzo1NlrOGdkNlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY1NTE4OA==", "bodyText": "Can you remove the unnecessary parentheses here?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433655188", "createdAt": "2020-06-02T06:47:56Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @OneToOne()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e807f993bfe03303c30fb44d94ae27afe0eb9a5"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf5054533dc471c1d4c35ee3420469f9d61c648", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/dbf5054533dc471c1d4c35ee3420469f9d61c648", "committedDate": "2020-06-02T07:39:35Z", "message": "Remove unnecessary parentheses in Rating.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d9f726c7c71db18b737d41487fa1a3afc0ad0aa", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/8d9f726c7c71db18b737d41487fa1a3afc0ad0aa", "committedDate": "2020-06-02T07:55:31Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e38bab8ef2f9a663cff5c4b0698b1fd3a592817", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/5e38bab8ef2f9a663cff5c4b0698b1fd3a592817", "committedDate": "2020-06-02T10:28:10Z", "message": "Handle bug where the initial creation of a rating takes longer such that double post requests are possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068a8877820e6420c90a581358490d4a898fbed1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/068a8877820e6420c90a581358490d4a898fbed1", "committedDate": "2020-06-02T10:45:26Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f5b034955b5cf45da6718898f1915b05209152", "author": {"user": {"login": "krusche", "name": "Stephan Krusche"}}, "url": "https://github.com/ls1intum/Artemis/commit/44f5b034955b5cf45da6718898f1915b05209152", "committedDate": "2020-06-02T10:51:00Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNTYxOTU4", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-422561958", "createdAt": "2020-06-02T10:54:00Z", "commit": {"oid": "44f5b034955b5cf45da6718898f1915b05209152"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDo1NDowMFrOGdsX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDo1NDowMFrOGdsX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4ODkwMA==", "bodyText": "This means, everyone could access every rating in all courses, not a good solution.\nI think we should only allow this to users for results for their own participations.\nTAs and instructors can see all ratings in the course in which they are TAs / instructors.\nAdmins can see all ratings", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433788900", "createdAt": "2020-06-02T10:54:00Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or null\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or null\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Optional<Rating>> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = ratingService.findRatingByResultId(resultId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f5b034955b5cf45da6718898f1915b05209152"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNTY0OTk0", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-422564994", "createdAt": "2020-06-02T10:58:34Z", "commit": {"oid": "44f5b034955b5cf45da6718898f1915b05209152"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDo1ODozNFrOGdsg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDo1ODozNFrOGdsg2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5MTE5NQ==", "bodyText": "this means we have one additional REST call, when navigating into the page that shows the rating / allows the user to interact with it.\nCan you please do the following:\n\nOnly load the rating if it is not yet available (in the passed result) --> You might need to add rating as reference to result then\nCheck if you can load the rating together with the result. (using the fetch mechanism in the repository)", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433791195", "createdAt": "2020-06-02T10:58:34Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent implements OnInit {\n+    public rating: Rating;\n+    public disableRating = false;\n+    @Input() result: Result;\n+\n+    constructor(public ratingService: RatingService) {}\n+\n+    ngOnInit(): void {\n+        if (!this.result || !this.result.submission) {\n+            return;\n+        }\n+        this.ratingService.getRating(this.result.id).subscribe((rating) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f5b034955b5cf45da6718898f1915b05209152"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa7e0399f7c65f8f635aa52c2571317078b6970", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/bfa7e0399f7c65f8f635aa52c2571317078b6970", "committedDate": "2020-06-02T14:34:41Z", "message": "Add user verification to get-request and encapsulate it in extra method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bef00727d40b04311277ae21ce36ee92e621fce", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/0bef00727d40b04311277ae21ce36ee92e621fce", "committedDate": "2020-06-02T14:34:41Z", "message": "Add check isOwnerOfParticipation to account.service.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8752e953e68ce18322b8ee5106ffc26330d0dbe", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/c8752e953e68ce18322b8ee5106ffc26330d0dbe", "committedDate": "2020-06-02T14:34:42Z", "message": "Add loaded participation to its result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eec8d7326f930b0a8732aebb9ec297915ec092a", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/4eec8d7326f930b0a8732aebb9ec297915ec092a", "committedDate": "2020-06-02T14:34:42Z", "message": "Implement client-side check that the user is the owner of the participation to prevent 403 Forbidden"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66694d42253bf1ee5b1e640580ee061864ac2f4f", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/66694d42253bf1ee5b1e640580ee061864ac2f4f", "committedDate": "2020-06-02T14:34:42Z", "message": "Adjust client tests to handle user verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccbf7fa005c46f8608a88910c15ee597584d5c3e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/ccbf7fa005c46f8608a88910c15ee597584d5c3e", "committedDate": "2020-06-02T14:38:31Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d02d93b55309e94d70408019d8ad7e72e34ca639", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/d02d93b55309e94d70408019d8ad7e72e34ca639", "committedDate": "2020-06-02T14:54:31Z", "message": "Allow Admins to view Ratings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b80adf98863b1dba76ea148ef158f4656028b0", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/20b80adf98863b1dba76ea148ef158f4656028b0", "committedDate": "2020-06-02T14:59:55Z", "message": "Insert TODO to allow Instructors to view ratings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNzg1MzU3", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-422785357", "createdAt": "2020-06-02T15:18:50Z", "commit": {"oid": "20b80adf98863b1dba76ea148ef158f4656028b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxODo1MFrOGd2quA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxODo1MFrOGd2quA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzU2MA==", "bodyText": "can you reduce this to one database access to find the participation directly?", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433957560", "createdAt": "2020-06-02T15:18:50Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or null\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or null\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Optional<Rating>> getRatingForResult(@PathVariable Long resultId) {\n+        // TODO allow for Instructors\n+        if (!checkIfUserIsOwnerOfSubmission(resultId) && !authCheckService.isAdmin()) {\n+            return forbidden();\n+        }\n+        Optional<Rating> rating = ratingService.findRatingByResultId(resultId);\n+        return ResponseEntity.ok(rating);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of result that is referenced with the rating that should be persisted\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        if (!checkIfUserIsOwnerOfSubmission(resultId)) {\n+            return forbidden();\n+        }\n+\n+        Rating savedRating = ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + savedRating.getId() + \"/rating\")).body(savedRating);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of result that is referenced with the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> updateRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) {\n+        if (!checkIfUserIsOwnerOfSubmission(resultId)) {\n+            return forbidden();\n+        }\n+\n+        Rating savedRating = ratingService.updateRating(resultId, ratingValue);\n+        return ResponseEntity.ok(savedRating);\n+    }\n+\n+    /**\n+     * Check if currently logged in user in the owner of the participation\n+     *\n+     * @param resultId - Id of the result that the participation belongs to\n+     * @return False if User is not Owner, True otherwise\n+     */\n+    private boolean checkIfUserIsOwnerOfSubmission(Long resultId) {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b80adf98863b1dba76ea148ef158f4656028b0"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c78754a722fa69b9d870392900b2d8b8af33fde", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/0c78754a722fa69b9d870392900b2d8b8af33fde", "committedDate": "2020-06-02T16:05:30Z", "message": "Remove unnecessary database call in RatingResource.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b41f7ef5a1390f37a4a6732808dafc0a8a04f6", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/09b41f7ef5a1390f37a4a6732808dafc0a8a04f6", "committedDate": "2020-06-02T16:06:13Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e73293a79ced381e0c7ea7bbbb15f5525e92551", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/4e73293a79ced381e0c7ea7bbbb15f5525e92551", "committedDate": "2020-06-02T16:42:04Z", "message": "Fix master.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "931bc43cb6a97f1408510a123f94c63b3bc7c04e", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/931bc43cb6a97f1408510a123f94c63b3bc7c04e", "committedDate": "2020-06-02T18:58:58Z", "message": "Fix circular dependency in rating.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1", "author": {"user": {"login": "JonasPetry", "name": "Jonas Petry"}}, "url": "https://github.com/ls1intum/Artemis/commit/c450c8110ebf4f1416a87e74dcfa0952f1a1bae1", "committedDate": "2020-06-02T18:59:48Z", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDA2MTg2", "url": "https://github.com/ls1intum/Artemis/pull/1451#pullrequestreview-423006186", "createdAt": "2020-06-02T19:47:56Z", "commit": {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2626, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}