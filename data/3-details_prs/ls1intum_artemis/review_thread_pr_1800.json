{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDIyMTk0", "number": 1800, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODo1NjowNVrOELZp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoxMToyMlrOELfeLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzkwMTMzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/participate/summary/exam-participation-summary.module.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODo1NjowNVrOGs9bjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOTowMTo1MVrOGs9dFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NzAwNg==", "bodyText": "ExamParticipationSummaryComponent is listed twice", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449797006", "createdAt": "2020-07-04T18:56:05Z", "author": {"login": "balazs-czopf"}, "path": "src/main/webapp/app/exam/participate/summary/exam-participation-summary.module.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import { NgModule } from '@angular/core';\n+import { ExamParticipationSummaryComponent } from 'app/exam/participate/summary/exam-participation-summary.component';\n+import { ProgrammingExamSummaryComponent } from 'app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component';\n+import { ModelingExamSummaryComponent } from 'app/exam/participate/summary/exercises/modeling-exam-summary/modeling-exam-summary.component';\n+import { FileUploadExamSummaryComponent } from 'app/exam/participate/summary/exercises/file-upload-exam-summary/file-upload-exam-summary.component';\n+import { TextExamSummaryComponent } from 'app/exam/participate/summary/exercises/text-exam-summary/text-exam-summary.component';\n+import { QuizExamSummaryComponent } from 'app/exam/participate/summary/exercises/quiz-exam-summary/quiz-exam-summary.component';\n+import { ArtemisSharedCommonModule } from 'app/shared/shared-common.module';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ArtemisQuizQuestionTypesModule } from 'app/exercises/quiz/shared/questions/artemis-quiz-question-types.module';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { ArtemisFullscreenModule } from 'app/shared/fullscreen/fullscreen.module';\n+\n+@NgModule({\n+    imports: [ArtemisSharedCommonModule, ArtemisSharedModule, ArtemisQuizQuestionTypesModule, ArtemisModelingEditorModule, ArtemisFullscreenModule],\n+    declarations: [\n+        ExamParticipationSummaryComponent,\n+        ExamParticipationSummaryComponent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b08c9eeeda812361ac5f9f6b2752cb3bd1d2296"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NzM5OQ==", "bodyText": "good catch, removed it now", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449797399", "createdAt": "2020-07-04T19:01:51Z", "author": {"login": "filip-gregurevic"}, "path": "src/main/webapp/app/exam/participate/summary/exam-participation-summary.module.ts", "diffHunk": "@@ -0,0 +1,27 @@\n+import { NgModule } from '@angular/core';\n+import { ExamParticipationSummaryComponent } from 'app/exam/participate/summary/exam-participation-summary.component';\n+import { ProgrammingExamSummaryComponent } from 'app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component';\n+import { ModelingExamSummaryComponent } from 'app/exam/participate/summary/exercises/modeling-exam-summary/modeling-exam-summary.component';\n+import { FileUploadExamSummaryComponent } from 'app/exam/participate/summary/exercises/file-upload-exam-summary/file-upload-exam-summary.component';\n+import { TextExamSummaryComponent } from 'app/exam/participate/summary/exercises/text-exam-summary/text-exam-summary.component';\n+import { QuizExamSummaryComponent } from 'app/exam/participate/summary/exercises/quiz-exam-summary/quiz-exam-summary.component';\n+import { ArtemisSharedCommonModule } from 'app/shared/shared-common.module';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ArtemisQuizQuestionTypesModule } from 'app/exercises/quiz/shared/questions/artemis-quiz-question-types.module';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { ArtemisFullscreenModule } from 'app/shared/fullscreen/fullscreen.module';\n+\n+@NgModule({\n+    imports: [ArtemisSharedCommonModule, ArtemisSharedModule, ArtemisQuizQuestionTypesModule, ArtemisModelingEditorModule, ArtemisFullscreenModule],\n+    declarations: [\n+        ExamParticipationSummaryComponent,\n+        ExamParticipationSummaryComponent,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NzAwNg=="}, "originalCommit": {"oid": "1b08c9eeeda812361ac5f9f6b2752cb3bd1d2296"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzkxMDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOToxNDozNVrOGs9gNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTowNDoxNlrOGs98bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODE5Nw==", "bodyText": "Might want to declare List<Exercise> exercises = studentExam.getExercises() here to avoid multiple database accesses fetching the list several times (lines 77, 78, 83, 90, 93) if that is not specifically intended", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449798197", "createdAt": "2020-07-04T19:14:35Z", "author": {"login": "balazs-czopf"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -71,7 +71,31 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n         log.debug(\"REST request to get student exam : {}\", studentExamId);\n         Optional<ResponseEntity<StudentExam>> accessFailure = examAccessService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n-        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOneWithExercises(studentExamId)));\n+\n+        StudentExam studentExam = studentExamService.findOneWithExercises(studentExamId);\n+        // we reload the quiz exercise because we also need the quiz questions and it is not possible to load them in a generic way with the entity graph used in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b08c9eeeda812361ac5f9f6b2752cb3bd1d2296"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNTQyMA==", "bodyText": "there is no database access, all exercises are already fetched.", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449805420", "createdAt": "2020-07-04T21:04:16Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -71,7 +71,31 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n         log.debug(\"REST request to get student exam : {}\", studentExamId);\n         Optional<ResponseEntity<StudentExam>> accessFailure = examAccessService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n-        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOneWithExercises(studentExamId)));\n+\n+        StudentExam studentExam = studentExamService.findOneWithExercises(studentExamId);\n+        // we reload the quiz exercise because we also need the quiz questions and it is not possible to load them in a generic way with the entity graph used in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODE5Nw=="}, "originalCommit": {"oid": "1b08c9eeeda812361ac5f9f6b2752cb3bd1d2296"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzk3MTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTowNToyOVrOGs981Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQyMTowNToyOVrOGs981Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwNTUyNQ==", "bodyText": "If I see this correctly, some of this code is duplicated.\nI suggest that you try to extract methods for the duplicated parts", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449805525", "createdAt": "2020-07-04T21:05:29Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -71,7 +71,31 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n         log.debug(\"REST request to get student exam : {}\", studentExamId);\n         Optional<ResponseEntity<StudentExam>> accessFailure = examAccessService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n-        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOneWithExercises(studentExamId)));\n+\n+        StudentExam studentExam = studentExamService.findOneWithExercises(studentExamId);\n+        // we reload the quiz exercise because we also need the quiz questions and it is not possible to load them in a generic way with the entity graph used in\n+        for (int i = 0; i < studentExam.getExercises().size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45cd86deba949d4a6e07b72bb032e65c8376974b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDM0MjgxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/student-exams/student-exam-detail.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwODoyNDoxN1rOGtAqAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwODoyNDoxN1rOGtAqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0OTg1Ng==", "bodyText": "I guess this has to be done inside the subscription as follows:\nthis.courseService.find(this.courseId).subscribe((courseResponse) => {\n    this.course = courseResponse.body!;\n    this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.course);\n});\n\nOtherwise line 55 gets executed before line 52 with the result that in the execution of line 55 this.course is still  undefined. This leads to this.isAtLeastInstructor becoming undefined.\nCorrect me if I\u00b4m wrong \ud83d\ude04", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449849856", "createdAt": "2020-07-05T08:24:17Z", "author": {"login": "balazs-czopf"}, "path": "src/main/webapp/app/exam/manage/student-exams/student-exam-detail.component.ts", "diffHunk": "@@ -49,6 +52,7 @@ export class StudentExamDetailComponent implements OnInit {\n             this.course = courseResponse.body!;\n         });\n         this.student = this.studentExam.user;\n+        this.isAtLeastInstructor = this.accountService.isAtLeastInstructorInCourse(this.course);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45cd86deba949d4a6e07b72bb032e65c8376974b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg0ODU1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/app/exam/manage/student-exams/student-exam-detail.component.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDowMzo1N1rOGtEiqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoyMToxMVrOGtEorA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMzUxMw==", "bodyText": "The button will be displayed next to the save button of the working time edit form. I think this is confusing for the user. I would move it next to the page title.", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449913513", "createdAt": "2020-07-05T20:03:57Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/manage/student-exams/student-exam-detail.component.html", "diffHunk": "@@ -43,13 +43,20 @@ <h5><span jhiTranslate=\"artemisApp.studentExams.workingTime\" [ngbTooltip]=\"getWo\n                 :\n                 <input formControlName=\"seconds\" type=\"number\" style=\"width: 60px; height: 35px;\" class=\"text-center\" min=\"0\" max=\"59\" step=\"1\" required />\n             </div>\n-            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"workingTimeForm.invalid || isSavingWorkingTime || examIsVisible()\">\n+            <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"workingTimeForm.invalid || isSavingWorkingTime || examIsVisible()\">\n                 <fa-icon [icon]=\"'save'\" [ngbTooltip]=\"getWorkingTimeToolTip()\"></fa-icon>\n                 <span jhiTranslate=\"entity.action.save\" [ngbTooltip]=\"getWorkingTimeToolTip()\">Save</span>\n             </button>\n         </form>\n     </div>\n \n+    <div class=\"mb-3\">\n+        <h5><span jhiTranslate=\"artemisApp.studentExams.summary\">Student Summary</span></h5>\n+        <button *ngIf=\"course?.isAtLeastInstructor\" class=\"btn btn-primary\" [routerLink]=\"'../summary'\">\n+            <span jhiTranslate=\"artemisApp.exam.summary\">Summary</span>\n+        </button>\n+    </div>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15460803ff2bd713b52b2044447af916793435f5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTA1Mg==", "bodyText": "I already changed it so that it will be shown below in a separate section", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449915052", "createdAt": "2020-07-05T20:21:11Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/manage/student-exams/student-exam-detail.component.html", "diffHunk": "@@ -43,13 +43,20 @@ <h5><span jhiTranslate=\"artemisApp.studentExams.workingTime\" [ngbTooltip]=\"getWo\n                 :\n                 <input formControlName=\"seconds\" type=\"number\" style=\"width: 60px; height: 35px;\" class=\"text-center\" min=\"0\" max=\"59\" step=\"1\" required />\n             </div>\n-            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"workingTimeForm.invalid || isSavingWorkingTime || examIsVisible()\">\n+            <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"workingTimeForm.invalid || isSavingWorkingTime || examIsVisible()\">\n                 <fa-icon [icon]=\"'save'\" [ngbTooltip]=\"getWorkingTimeToolTip()\"></fa-icon>\n                 <span jhiTranslate=\"entity.action.save\" [ngbTooltip]=\"getWorkingTimeToolTip()\">Save</span>\n             </button>\n         </form>\n     </div>\n \n+    <div class=\"mb-3\">\n+        <h5><span jhiTranslate=\"artemisApp.studentExams.summary\">Student Summary</span></h5>\n+        <button *ngIf=\"course?.isAtLeastInstructor\" class=\"btn btn-primary\" [routerLink]=\"'../summary'\">\n+            <span jhiTranslate=\"artemisApp.exam.summary\">Summary</span>\n+        </button>\n+    </div>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMzUxMw=="}, "originalCommit": {"oid": "15460803ff2bd713b52b2044447af916793435f5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg1MDgxOnYy", "diffSide": "LEFT", "path": "src/main/webapp/app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDowNzoxMlrOGtEjxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoyNjoxMFrOGtEqEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMzc5OA==", "bodyText": "Also remove the import to prevent warnings", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449913798", "createdAt": "2020-07-05T20:07:12Z", "author": {"login": "sascha11110"}, "path": "src/main/webapp/app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component.ts", "diffHunk": "@@ -15,7 +15,5 @@ export class ProgrammingExamSummaryComponent {\n     @Input()\n     participation: ProgrammingExerciseStudentParticipation;\n \n-    @Input()\n-    submission: ProgrammingSubmission;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15460803ff2bd713b52b2044447af916793435f5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTQxMA==", "bodyText": "fixed", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449915410", "createdAt": "2020-07-05T20:26:10Z", "author": {"login": "krusche"}, "path": "src/main/webapp/app/exam/participate/summary/exercises/programming-exam-summary/programming-exam-summary.component.ts", "diffHunk": "@@ -15,7 +15,5 @@ export class ProgrammingExamSummaryComponent {\n     @Input()\n     participation: ProgrammingExerciseStudentParticipation;\n \n-    @Input()\n-    submission: ProgrammingSubmission;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMzc5OA=="}, "originalCommit": {"oid": "15460803ff2bd713b52b2044447af916793435f5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg1NDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoxMToyMlrOGtElaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDoyNjoxNVrOGtEqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDIxOQ==", "bodyText": "I think it would be better to return directly when an accessFailure occurs. This makes sense not only with regard to the procedure, but also because the access service checks whether the studentExam exists at all.", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449914219", "createdAt": "2020-07-05T20:11:22Z", "author": {"login": "sascha11110"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -80,7 +80,23 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n         log.debug(\"REST request to get student exam : {}\", studentExamId);\n         Optional<ResponseEntity<StudentExam>> accessFailure = examAccessService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n-        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOneWithExercises(studentExamId)));\n+\n+        StudentExam studentExam = studentExamService.findOneWithExercises(studentExamId);\n+\n+        loadExercisesForStudentExam(studentExam);\n+\n+        // fetch participations, submissions and results for these exercises, note: exams only contain individual exercises for now\n+        // fetching all participations at once is more effective\n+        List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n+                studentExam.getExercises());\n+\n+        // connect the exercises and student participations correctly and make sure all relevant associations are available\n+        for (Exercise exercise : studentExam.getExercises()) {\n+            // add participation with submission and result to each exercise\n+            filterForExam(exercise, participations);\n+        }\n+\n+        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15460803ff2bd713b52b2044447af916793435f5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTQxNA==", "bodyText": "fixed", "url": "https://github.com/ls1intum/Artemis/pull/1800#discussion_r449915414", "createdAt": "2020-07-05T20:26:15Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -80,7 +80,23 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n     public ResponseEntity<StudentExam> getStudentExam(@PathVariable Long courseId, @PathVariable Long examId, @PathVariable Long studentExamId) {\n         log.debug(\"REST request to get student exam : {}\", studentExamId);\n         Optional<ResponseEntity<StudentExam>> accessFailure = examAccessService.checkCourseAndExamAndStudentExamAccess(courseId, examId, studentExamId);\n-        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExamService.findOneWithExercises(studentExamId)));\n+\n+        StudentExam studentExam = studentExamService.findOneWithExercises(studentExamId);\n+\n+        loadExercisesForStudentExam(studentExam);\n+\n+        // fetch participations, submissions and results for these exercises, note: exams only contain individual exercises for now\n+        // fetching all participations at once is more effective\n+        List<StudentParticipation> participations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentExam.getUser().getId(),\n+                studentExam.getExercises());\n+\n+        // connect the exercises and student participations correctly and make sure all relevant associations are available\n+        for (Exercise exercise : studentExam.getExercises()) {\n+            // add participation with submission and result to each exercise\n+            filterForExam(exercise, participations);\n+        }\n+\n+        return accessFailure.orElseGet(() -> ResponseEntity.ok(studentExam));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNDIxOQ=="}, "originalCommit": {"oid": "15460803ff2bd713b52b2044447af916793435f5"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4849, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}