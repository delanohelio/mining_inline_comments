{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MjU5MzI5", "number": 1454, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0MTo1NlrOD9W21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0MTo1NlrOD9W21w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjY0MjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0MTo1NlrOGWzZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1ODoxNFrOGXWrKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2Mzg3Ng==", "bodyText": "I don't know if that's possible, but can the teams have different tutors in different exercises?\nIf so, I believe the anyMatch predicate would return too many teams (so maybe allMatch should be used?).", "url": "https://github.com/ls1intum/Artemis/pull/1454#discussion_r426563876", "createdAt": "2020-05-18T11:41:56Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -384,18 +388,28 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         // Set teams on exercises\n         exercises.forEach(exercise -> exercise.setTeams(Set.of(exerciseTeamMap.get(exercise.getId()))));\n \n-        // Fetch participations for team and set the submission count for each participation\n-        List<StudentParticipation> participations = participationService.findAllByCourseIdAndTeamShortName(courseId, teamShortName);\n+        // Fetch participations for team\n+        List<StudentParticipation> participations;\n+        if (authCheckService.isAtLeastInstructorInCourse(course, user) || teams.stream().map(Team::getOwner).anyMatch(user::equals)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4835dea764091eff8251cdcb11857ad7debf5feb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3OTI5MA==", "bodyText": "This is a little tricky. In terms of business logic, all team instances of a team should be assigned to the same tutor for a course. If this were given, it wouldn't matter whether anyMatch or allMatch is used. However, there is nothing enforcing this in application logic at the moment, so instances of the \"same\" team (meaning same short name but different team entity in other exercise) could have different tutors if an instructor re-assigns one of the exercise teams to a different tutor.\nIn this auth check, I decided to opt for anyMatch to be a little more lenient if this situation occurs (since the endpoint would otherwise return nothing at all if the tutor is not the owner of one of the instances). Right now, this means: If a user is the team owner for any of the team instances, he gets access to their participations for all exercises.\nAs long as it's only about reading, I don't think that's a big issue but it actually can be an issue when it comes to the assessment since then more than one tutor would see the assessment button and both would think it's their job to assess this submission.\nI think the easiest solution would be if we enforce the rule that the team owner must be the same for all team instances in a course. This is normally given anyway when using the Import Teams functionality but if instructors re-assign tutors afterwards, this change is only performed for the single team instance and not for its clones in other exercises. The solution would be: In the updateTeam endpoint, changes to the team owner have to be propagated to all instances of a team.", "url": "https://github.com/ls1intum/Artemis/pull/1454#discussion_r426579290", "createdAt": "2020-05-18T12:11:55Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -384,18 +388,28 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         // Set teams on exercises\n         exercises.forEach(exercise -> exercise.setTeams(Set.of(exerciseTeamMap.get(exercise.getId()))));\n \n-        // Fetch participations for team and set the submission count for each participation\n-        List<StudentParticipation> participations = participationService.findAllByCourseIdAndTeamShortName(courseId, teamShortName);\n+        // Fetch participations for team\n+        List<StudentParticipation> participations;\n+        if (authCheckService.isAtLeastInstructorInCourse(course, user) || teams.stream().map(Team::getOwner).anyMatch(user::equals)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2Mzg3Ng=="}, "originalCommit": {"oid": "4835dea764091eff8251cdcb11857ad7debf5feb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0NTU4NA==", "bodyText": "Updates to the team tutor are now propagated to all instances of the same team for a course. I changed the auth check to now use allMatch instead so that we definitely don't run into the situation that two tutors are asked to assess the same submission.\nWhen the team update dialog is opened and a different tutor is selected, this warning is now shown:", "url": "https://github.com/ls1intum/Artemis/pull/1454#discussion_r426645584", "createdAt": "2020-05-18T13:57:24Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -384,18 +388,28 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         // Set teams on exercises\n         exercises.forEach(exercise -> exercise.setTeams(Set.of(exerciseTeamMap.get(exercise.getId()))));\n \n-        // Fetch participations for team and set the submission count for each participation\n-        List<StudentParticipation> participations = participationService.findAllByCourseIdAndTeamShortName(courseId, teamShortName);\n+        // Fetch participations for team\n+        List<StudentParticipation> participations;\n+        if (authCheckService.isAtLeastInstructorInCourse(course, user) || teams.stream().map(Team::getOwner).anyMatch(user::equals)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2Mzg3Ng=="}, "originalCommit": {"oid": "4835dea764091eff8251cdcb11857ad7debf5feb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MTkyOA==", "bodyText": "Thanks for the clarification!\nYour selected solution seems good for me.", "url": "https://github.com/ls1intum/Artemis/pull/1454#discussion_r427141928", "createdAt": "2020-05-19T08:58:14Z", "author": {"login": "sleiss"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -384,18 +388,28 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         // Set teams on exercises\n         exercises.forEach(exercise -> exercise.setTeams(Set.of(exerciseTeamMap.get(exercise.getId()))));\n \n-        // Fetch participations for team and set the submission count for each participation\n-        List<StudentParticipation> participations = participationService.findAllByCourseIdAndTeamShortName(courseId, teamShortName);\n+        // Fetch participations for team\n+        List<StudentParticipation> participations;\n+        if (authCheckService.isAtLeastInstructorInCourse(course, user) || teams.stream().map(Team::getOwner).anyMatch(user::equals)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2Mzg3Ng=="}, "originalCommit": {"oid": "4835dea764091eff8251cdcb11857ad7debf5feb"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}