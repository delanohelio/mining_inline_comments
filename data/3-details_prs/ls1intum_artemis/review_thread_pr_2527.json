{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjYzMTg2", "number": 2527, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyNjo1MVrOFFdaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNzo1OVrOFGrvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjY5MDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyNjo1MVrOIF-ocA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyNDozN1rOIGDqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzOTk1Mg==", "bodyText": "Should we rather add an abstract method to Exercise or something that returns whether an exercise needs manual assessment? I think we keep adding these is Modeling/Text(/File) checks all over the place and we are actually interested in the assessment type.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543139952", "createdAt": "2020-12-15T08:26:51Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwNTg0Mg==", "bodyText": "@jpbernius Thats a good point, but should we then include programming exercises configured with SEMI_AUTOMIC assessment type? In this feature for example we don't grade those, and there are other parts in the code where we specifically target modeling and text exercises.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543205842", "createdAt": "2020-12-15T10:01:33Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzOTk1Mg=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMjI5NA==", "bodyText": "Ok, I understand. Wouldn't we want to exclude programming submissions as well in this situation. So they might be relevant as well? (I guess out of scope here though.)\nWe can keep this as is if you want.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543222294", "createdAt": "2020-12-15T10:24:37Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzOTk1Mg=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjY5Mzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyNzozMVrOIF-qZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0NTowMVrOIHBUxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDQ1Mg==", "bodyText": "Anything going against\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n          \n          \n            \n                                result.setAssessmentType(AssessmentType.AUTOMATIC);\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543140452", "createdAt": "2020-12-15T08:27:31Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(instructor);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwODg4OA==", "bodyText": "We specifically exclude SEMI_AUTOMATIC and MANUAL assessments from eligible submissions for new manual assessment. If we mark it as AUTOMATIC, it would appear to the tutors for assessment.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543208888", "createdAt": "2020-12-15T10:05:39Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(instructor);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDQ1Mg=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMDIxMQ==", "bodyText": "Wait, why?\nI'd assume that AssessmentType.AUTOMATIC would represent results that have not been seen by a human. E.g. Quizzes and most programming results.\nMANUAL is only assessed by humans and SEMI_AUTOMATIC is that there is an automatic assessment already there (e.g. programming tests, Compass, or Athene) which is reviewed and possibly adjusted by humans.\nAs the empty submissions are not supposed to be seen by a human at all, I'd argue that it should be in fact AUTOMATIC. I'd think of such a submission not showing up for assessment in the dashboard as it is already assessed before. (Compare with another tutor, only that it is a bot in this case.)", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543220211", "createdAt": "2020-12-15T10:21:49Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(instructor);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDQ1Mg=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2OTAxMQ==", "bodyText": "@jpbernius As we discussed in private I set the assessor to be the artemis_admin user and left the assessment type currently to SEMI_AUTOMATIC. Maybe we can have a look at the assessment types and their usages in another PR to unify their meaning for different exercise types and decouple the rated functionality from them.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543569011", "createdAt": "2020-12-15T18:05:55Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(instructor);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDQ1Mg=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMjY0NA==", "bodyText": "I think we can live with the choice of SEMI_AUTOMATIC here. But please add very detailed comments into code why this decision was made and why AUTOMATIC is not possible here. It is very important that future developers immediately understand this when looking at the code", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544232644", "createdAt": "2020-12-16T11:45:01Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +252,43 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is current instructor who made the request.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int automaticallyAssessUnsubmittedExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User instructor = userService.getUser();\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(instructor);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDQ1Mg=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjY5ODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyODo0MVrOIF-tOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MjowMlrOIGLc9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MTE3OA==", "bodyText": "Looks like we fetch the exam twice here?", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543141178", "createdAt": "2020-12-15T08:28:41Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -367,6 +372,37 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         return ResponseEntity.ok(testRun);\n     }\n \n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams : Automatically assess unsubmitted student exams.\n+     *\n+     * Finds student exams which the students did not submit on time i.e {@link StudentExam#isSubmitted()} is false.\n+     * Automatically grade all modeling- and text exercises with 0 points in {@link StudentExamService#automaticallyAssessUnsubmittedExams}.\n+     *\n+     * @param courseId the id of the course\n+     * @param examId the id of the exam\n+     * @return {@link HttpStatus#BAD_REQUEST} if the exam is not over yet | {@link HttpStatus#FORBIDDEN} if the user is not an instructor\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Integer> automaticallyAssessUnsubmittedStudentExams(@PathVariable Long courseId, @PathVariable Long examId) {\n+        log.info(\"REST request to automatically assess the not submitted student exams of the exam with id {}\", examId);\n+\n+        Optional<ResponseEntity<Void>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccessForInstructor(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return forbidden();\n+        }\n+\n+        if (!this.examService.isExamOver(examId)) {\n+            // you can only grade not submitted exams if the exam is over\n+            return badRequest();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNjYwNg==", "bodyText": "@jpbernius Yeah, this is the case in most methods in the ExamResource & StudentExamResource because the public methods of the ExamAccessService only take the examId as a parameter and fetch the exam in the body. To my knowledge there is no way to only fetch the exam once if we want to reuse the checks of the ExamAccessService.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543216606", "createdAt": "2020-12-15T10:16:45Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -367,6 +372,37 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         return ResponseEntity.ok(testRun);\n     }\n \n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams : Automatically assess unsubmitted student exams.\n+     *\n+     * Finds student exams which the students did not submit on time i.e {@link StudentExam#isSubmitted()} is false.\n+     * Automatically grade all modeling- and text exercises with 0 points in {@link StudentExamService#automaticallyAssessUnsubmittedExams}.\n+     *\n+     * @param courseId the id of the course\n+     * @param examId the id of the exam\n+     * @return {@link HttpStatus#BAD_REQUEST} if the exam is not over yet | {@link HttpStatus#FORBIDDEN} if the user is not an instructor\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Integer> automaticallyAssessUnsubmittedStudentExams(@PathVariable Long courseId, @PathVariable Long examId) {\n+        log.info(\"REST request to automatically assess the not submitted student exams of the exam with id {}\", examId);\n+\n+        Optional<ResponseEntity<Void>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccessForInstructor(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return forbidden();\n+        }\n+\n+        if (!this.examService.isExamOver(examId)) {\n+            // you can only grade not submitted exams if the exam is over\n+            return badRequest();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MTE3OA=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMDc5Ng==", "bodyText": "We have a similar situation with the user object for permission checks. In this instance, we fetch the user before the checks and pass it as a reference to a second version of the check methods.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543220796", "createdAt": "2020-12-15T10:22:35Z", "author": {"login": "jpbernius"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -367,6 +372,37 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         return ResponseEntity.ok(testRun);\n     }\n \n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams : Automatically assess unsubmitted student exams.\n+     *\n+     * Finds student exams which the students did not submit on time i.e {@link StudentExam#isSubmitted()} is false.\n+     * Automatically grade all modeling- and text exercises with 0 points in {@link StudentExamService#automaticallyAssessUnsubmittedExams}.\n+     *\n+     * @param courseId the id of the course\n+     * @param examId the id of the exam\n+     * @return {@link HttpStatus#BAD_REQUEST} if the exam is not over yet | {@link HttpStatus#FORBIDDEN} if the user is not an instructor\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Integer> automaticallyAssessUnsubmittedStudentExams(@PathVariable Long courseId, @PathVariable Long examId) {\n+        log.info(\"REST request to automatically assess the not submitted student exams of the exam with id {}\", examId);\n+\n+        Optional<ResponseEntity<Void>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccessForInstructor(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return forbidden();\n+        }\n+\n+        if (!this.examService.isExamOver(examId)) {\n+            // you can only grade not submitted exams if the exam is over\n+            return badRequest();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MTE3OA=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MDAwNg==", "bodyText": "I added methods which take the prefetched exam in the ExamAccessService and am using those now in 135dbb8", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r543350006", "createdAt": "2020-12-15T13:42:02Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/web/rest/StudentExamResource.java", "diffHunk": "@@ -367,6 +372,37 @@ public StudentExamResource(ExamAccessService examAccessService, StudentExamServi\n         return ResponseEntity.ok(testRun);\n     }\n \n+    /**\n+     * POST /courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams : Automatically assess unsubmitted student exams.\n+     *\n+     * Finds student exams which the students did not submit on time i.e {@link StudentExam#isSubmitted()} is false.\n+     * Automatically grade all modeling- and text exercises with 0 points in {@link StudentExamService#automaticallyAssessUnsubmittedExams}.\n+     *\n+     * @param courseId the id of the course\n+     * @param examId the id of the exam\n+     * @return {@link HttpStatus#BAD_REQUEST} if the exam is not over yet | {@link HttpStatus#FORBIDDEN} if the user is not an instructor\n+     */\n+    @PostMapping(\"/courses/{courseId}/exams/{examId}/student-exams/automatically-assess-unsubmitted-student-exams\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Integer> automaticallyAssessUnsubmittedStudentExams(@PathVariable Long courseId, @PathVariable Long examId) {\n+        log.info(\"REST request to automatically assess the not submitted student exams of the exam with id {}\", examId);\n+\n+        Optional<ResponseEntity<Void>> courseAndExamAccessFailure = examAccessService.checkCourseAndExamAccessForInstructor(courseId, examId);\n+        if (courseAndExamAccessFailure.isPresent()) {\n+            return forbidden();\n+        }\n+\n+        if (!this.examService.isExamOver(examId)) {\n+            // you can only grade not submitted exams if the exam is over\n+            return badRequest();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MTE3OA=="}, "originalCommit": {"oid": "959f9d3e3d73157876efa15d2751b87aa8546c02"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTc3MTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTowNzo1MVrOIG_7Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzozMTo1MFrOIHQ8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTY3NA==", "bodyText": "Should it be better to define artemis_admin as a constant so that it's easier to modify in the future?", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544209674", "createdAt": "2020-12-16T11:07:51Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +260,62 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is artemis_admin.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int assessUnsubmittedStudentExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User artemisAdmin = userService.getUserWithGroupsAndAuthorities(\"artemis_admin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2236cfee811fda74ea55895f2b4c773be359c88"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMDU1MQ==", "bodyText": "This is a bad choice in my opinion. We cannot assume that this user exists and it also does not make sense to set it as assessor. Please change it to the currently logged in user, i.e. the user who clicks the button.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544230551", "createdAt": "2020-12-16T11:41:40Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +260,62 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is artemis_admin.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int assessUnsubmittedStudentExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User artemisAdmin = userService.getUserWithGroupsAndAuthorities(\"artemis_admin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTY3NA=="}, "originalCommit": {"oid": "b2236cfee811fda74ea55895f2b4c773be359c88"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODU1MQ==", "bodyText": "I reverted to using the assessor who clicks on the button", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544488551", "createdAt": "2020-12-16T17:31:50Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +260,62 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is artemis_admin.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int assessUnsubmittedStudentExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User artemisAdmin = userService.getUserWithGroupsAndAuthorities(\"artemis_admin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTY3NA=="}, "originalCommit": {"oid": "b2236cfee811fda74ea55895f2b4c773be359c88"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTc5NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToxMjozNVrOIHAHrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzozMToyOFrOIHQ7Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMjkwOQ==", "bodyText": "What's the point of this method? It fetches an instructor and student exams but it doesn't really use them right?", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544212909", "createdAt": "2020-12-16T11:12:35Z", "author": {"login": "ivanchimeno"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +260,62 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is artemis_admin.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int assessUnsubmittedStudentExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User artemisAdmin = userService.getUserWithGroupsAndAuthorities(\"artemis_admin\");\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(artemisAdmin);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    result = submissionService.saveNewResult(latestSubmission, result);\n+\n+                    var feedback = new Feedback();\n+                    feedback.setCredits(0.0);\n+                    feedback.setDetailText(\"You did not submit your exam\");\n+                    feedback.setPositive(false);\n+                    feedback.setText(\"You did not submit your exam\");\n+                    feedback.setType(FeedbackType.AUTOMATIC);\n+                    feedback = feedbackRepository.save(feedback);\n+                    feedback.setResult(result);\n+                    result.setFeedbacks(List.of(feedback));\n+                    resultRepository.save(result);\n+                    numberOfAssessedSubmissions++;\n+                }\n+            }\n+        }\n+        return numberOfAssessedSubmissions;\n+    }\n+\n+    public int assessEmptySubmissions(final Long examId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2236cfee811fda74ea55895f2b4c773be359c88"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMTM2NQ==", "bodyText": "I guess the implementation is not finished yet", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544231365", "createdAt": "2020-12-16T11:42:55Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +260,62 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is artemis_admin.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int assessUnsubmittedStudentExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User artemisAdmin = userService.getUserWithGroupsAndAuthorities(\"artemis_admin\");\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(artemisAdmin);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    result = submissionService.saveNewResult(latestSubmission, result);\n+\n+                    var feedback = new Feedback();\n+                    feedback.setCredits(0.0);\n+                    feedback.setDetailText(\"You did not submit your exam\");\n+                    feedback.setPositive(false);\n+                    feedback.setText(\"You did not submit your exam\");\n+                    feedback.setType(FeedbackType.AUTOMATIC);\n+                    feedback = feedbackRepository.save(feedback);\n+                    feedback.setResult(result);\n+                    result.setFeedbacks(List.of(feedback));\n+                    resultRepository.save(result);\n+                    numberOfAssessedSubmissions++;\n+                }\n+            }\n+        }\n+        return numberOfAssessedSubmissions;\n+    }\n+\n+    public int assessEmptySubmissions(final Long examId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMjkwOQ=="}, "originalCommit": {"oid": "b2236cfee811fda74ea55895f2b4c773be359c88"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4ODI0Ng==", "bodyText": "Yeah I had forgotten to remove the ready for review tag. I pushed the implementation now", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r544488246", "createdAt": "2020-12-16T17:31:28Z", "author": {"login": "anditurdiu"}, "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -248,6 +260,62 @@ else if (exercise instanceof ModelingExercise) {\n         }\n     }\n \n+    /**\n+     * Automatically assess the modeling- and programming exercises of student exams of an exam which are not submitted with 0 points.\n+     * The assessment is counted as {@link AssessmentType#SEMI_AUTOMATIC} to make sure it is not considered for manual assessment,\n+     * see {@link StudentParticipationRepository#findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRunParticipation}.\n+     * The assessor is artemis_admin.\n+     *\n+     * @param examId the exam id\n+     * @return returns the number of assessedSubmissions\n+     */\n+    public int assessUnsubmittedStudentExams(final Long examId) {\n+        int numberOfAssessedSubmissions = 0;\n+        User artemisAdmin = userService.getUserWithGroupsAndAuthorities(\"artemis_admin\");\n+        Set<StudentExam> unsubmittedStudentExams = findAllUnsubmittedStudentExams(examId);\n+        Map<User, List<Exercise>> exercisesOfUser = unsubmittedStudentExams.stream().collect(Collectors.toMap(StudentExam::getUser, studentExam -> studentExam.getExercises()\n+                .stream().filter(exercise -> exercise instanceof ModelingExercise || exercise instanceof TextExercise).collect(Collectors.toList())));\n+        for (final var user : exercisesOfUser.keySet()) {\n+            final var studentParticipations = participationService.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(user.getId(), exercisesOfUser.get(user));\n+            for (final var studentParticipation : studentParticipations) {\n+                if (studentParticipation.findLatestSubmission().isPresent() && studentParticipation.findLatestSubmission().get().getLatestResult() == null) {\n+                    // get last submission\n+                    final var latestSubmission = studentParticipation.findLatestSubmission().get();\n+\n+                    // create result with 0 points\n+                    Result result = new Result();\n+                    result.setParticipation(studentParticipation);\n+                    result.setAssessor(artemisAdmin);\n+                    result.setCompletionDate(ZonedDateTime.now());\n+                    result.setScore(0L);\n+                    result.rated(true);\n+                    result.setAssessmentType(AssessmentType.SEMI_AUTOMATIC);\n+                    result = submissionService.saveNewResult(latestSubmission, result);\n+\n+                    var feedback = new Feedback();\n+                    feedback.setCredits(0.0);\n+                    feedback.setDetailText(\"You did not submit your exam\");\n+                    feedback.setPositive(false);\n+                    feedback.setText(\"You did not submit your exam\");\n+                    feedback.setType(FeedbackType.AUTOMATIC);\n+                    feedback = feedbackRepository.save(feedback);\n+                    feedback.setResult(result);\n+                    result.setFeedbacks(List.of(feedback));\n+                    resultRepository.save(result);\n+                    numberOfAssessedSubmissions++;\n+                }\n+            }\n+        }\n+        return numberOfAssessedSubmissions;\n+    }\n+\n+    public int assessEmptySubmissions(final Long examId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMjkwOQ=="}, "originalCommit": {"oid": "b2236cfee811fda74ea55895f2b4c773be359c88"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTUyMzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNzo0MVrOIHzVMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNzo0MVrOIHzVMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MTk1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns calculates if the exam is over by checking if the latest individual exam end date plus grace period has passed.\n          \n          \n            \n                 * Returns if the exam is over by checking if the latest individual exam end date plus grace period has passed.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r545051952", "createdAt": "2020-12-17T12:27:41Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -804,6 +804,33 @@ public Integer lockAllRepositories(Long examId) {\n         return programmingExercises.size();\n     }\n \n+    /**\n+     * Returns calculates if the exam is over by checking if the latest individual exam end date plus grace period has passed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23264e9f8caa55baaf4afa19605042ccbf1b3353"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTUyNDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNzo1OVrOIHzVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNzo1OVrOIHzVyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns calculates if the exam is over by checking if the latest individual exam end date plus grace period has passed.\n          \n          \n            \n                 * Returns if the exam is over by checking if the latest individual exam end date plus grace period has passed.", "url": "https://github.com/ls1intum/Artemis/pull/2527#discussion_r545052107", "createdAt": "2020-12-17T12:27:59Z", "author": {"login": "FuchsDominik"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -804,6 +804,33 @@ public Integer lockAllRepositories(Long examId) {\n         return programmingExercises.size();\n     }\n \n+    /**\n+     * Returns calculates if the exam is over by checking if the latest individual exam end date plus grace period has passed.\n+     * See {@link ExamService#getLatestIndiviudalExamEndDate}\n+     * <p>\n+     *\n+     * @param examId the id of the exam\n+     * @return true if the exam is over and the students cannot submit anymore\n+     * @throws EntityNotFoundException if no exam with the given examId can be found\n+     */\n+    public boolean isExamOver(Long examId) {\n+        return isExamOver(findOne(examId));\n+    }\n+\n+    /**\n+     * Returns calculates if the exam is over by checking if the latest individual exam end date plus grace period has passed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23264e9f8caa55baaf4afa19605042ccbf1b3353"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4327, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}