{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzI2NDE3", "number": 1169, "title": "Extract Spring Beans for Programming Exercise Connectors", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n\nDescription\nThese are the production code changes necessary for #1168 .\nPlease refer to the above mentioned PR for the documentation .\nThese changes are necessary, because we never really had a full integration test in mind when implementing the connector services. This resulted in a \"non-Spring-friendly\" implementation, meaning we currently instantiate a lot of objects directly in methods and don't mock them, or just don't offer the possibility to mock outgoing requests. More detailed information can be found in #1168\nHow To Test\n\nCreate a new programming exercise\nEdit the exercise\nParticipate in the exercise\n\nPlease make sure that everything works as before!", "createdAt": "2020-01-05T18:50:57Z", "url": "https://github.com/ls1intum/Artemis/pull/1169", "merged": true, "mergeCommit": {"oid": "05bd99f077f3c1ef53ccac97f50d8cb9edbb682e"}, "closed": true, "closedAt": "2020-01-08T11:30:11Z", "author": {"login": "ungaralex"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3b9icgH2gAyMzU5MzI2NDE3Ojg4MGRkNGEzNTM3OWM1Mzk0ZWQ3YmFlNDdmY2U5ZmQ4M2YxMzc1YzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4TrDzgFqTMzOTgwNDI2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "880dd4a35379c5394ed7bae47fce9fd83f1375c0", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/880dd4a35379c5394ed7bae47fce9fd83f1375c0", "committedDate": "2020-01-05T18:35:25Z", "message": "Add separate beans for Bamboo and Bitbucket RestTemplates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7124ac63da0a821cba6f46279b40dd3ed133d5f5", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/7124ac63da0a821cba6f46279b40dd3ed133d5f5", "committedDate": "2020-01-05T18:36:59Z", "message": "Add Bamboo and Bitbucket server configurations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8babf1360ff7dbc20110dfe3e4831f34c6316294", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/8babf1360ff7dbc20110dfe3e4831f34c6316294", "committedDate": "2020-01-05T18:39:19Z", "message": "Inject new beans into BambooBuildPlanService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e7d10d258e1db2c3a26780ff68509b352bc4e50", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/7e7d10d258e1db2c3a26780ff68509b352bc4e50", "committedDate": "2020-01-05T18:40:42Z", "message": "Inject new beans into BambooService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41929aaabd25813e0e7c145452f1ba95772386c4", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/41929aaabd25813e0e7c145452f1ba95772386c4", "committedDate": "2020-01-05T18:43:46Z", "message": "Split up BitbucketBambooUpdateService and BambooBuildPlanUpdateProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8436a41bd9cc2f4bfbc07bbf41d6a295265876e1", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/8436a41bd9cc2f4bfbc07bbf41d6a295265876e1", "committedDate": "2020-01-05T18:44:58Z", "message": "Add Bamboo DTOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/0a7c6a32f22cc576bb85b6cd67ed1535d908797e", "committedDate": "2020-01-05T18:46:51Z", "message": "Add Bitbucket DTOs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDE3NDMw", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-338417430", "createdAt": "2020-01-05T19:36:51Z", "commit": {"oid": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxOTozNjo1MVrOFaSogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxOTozNjo1MVrOFaSogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExMjU3OA==", "bodyText": "The null check was always true", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363112578", "createdAt": "2020-01-05T19:36:51Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketService.java", "diffHunk": "@@ -622,7 +610,7 @@ private void grantGroupPermissionToProject(String projectKey, String groupName,\n \n         Map<Integer, String> webHooks = new HashMap<>();\n \n-        if (response != null && response.getStatusCode().equals(HttpStatus.OK)) {\n+        if (response.getStatusCode().equals(HttpStatus.OK)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDE3NTYy", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-338417562", "createdAt": "2020-01-05T19:39:37Z", "commit": {"oid": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxOTozOTozN1rOFaSpHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxOTozOTozN1rOFaSpHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExMjczNA==", "bodyText": "Was not working if we used other URLs in our tests, that don't have the Bitbucket format (which is sometimes the case because we don't only write specific Bitbucket tests, but some also just want to validate the generic VCS service functionality)", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363112734", "createdAt": "2020-01-05T19:39:37Z", "author": {"login": "ungaralex"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketService.java", "diffHunk": "@@ -296,11 +281,9 @@ private String getProjectKeyFromUrl(URL repositoryUrl) throws BitbucketException\n     public String getRepositorySlugFromUrl(URL repositoryUrl) throws BitbucketException {\n         // https://ga42xab@repobruegge.in.tum.de/scm/EIST2016RME/RMEXERCISE-ga42xab.git\n         String[] urlParts = repositoryUrl.getFile().split(\"/\");\n-        if (urlParts.length > 3) {\n-            String repositorySlug = urlParts[3];\n-            if (repositorySlug.endsWith(\".git\")) {\n-                repositorySlug = repositorySlug.substring(0, repositorySlug.length() - 4);\n-            }\n+        if (urlParts[urlParts.length - 1].endsWith(\".git\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7c6a32f22cc576bb85b6cd67ed1535d908797e"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "829eda1162239686b493b2db1b47fe75c5191541", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/829eda1162239686b493b2db1b47fe75c5191541", "committedDate": "2020-01-05T19:43:06Z", "message": "Add JavaDoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDI5NjE3", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-338429617", "createdAt": "2020-01-05T23:44:42Z", "commit": {"oid": "829eda1162239686b493b2db1b47fe75c5191541"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMzo0NDo0MlrOFaTc6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMzo0NDo0MlrOFaTc6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNTk5NQ==", "bodyText": "do we really have this case that the bitbucket profile is not active?\nAlso I guess sometimes we still need the simple bamboo client, right?", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363125995", "createdAt": "2020-01-05T23:44:42Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/config/connector/BambooServerConfiguration.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package de.tum.in.www1.artemis.config.connector;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URL;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.Base;\n+import com.appfire.common.cli.Settings;\n+import com.atlassian.bamboo.specs.util.BambooServer;\n+import com.atlassian.bamboo.specs.util.SimpleUserPasswordCredentials;\n+import com.atlassian.bamboo.specs.util.UserPasswordCredentials;\n+\n+@Configuration\n+@Profile(\"bamboo\")\n+public class BambooServerConfiguration {\n+\n+    @Value(\"${artemis.continuous-integration.user}\")\n+    private String BAMBOO_USER;\n+\n+    @Value(\"${artemis.continuous-integration.password}\")\n+    private String BAMBOO_PASSWORD;\n+\n+    @Value(\"${artemis.continuous-integration.url}\")\n+    private URL BAMBOO_SERVER_URL;\n+\n+    @Value(\"${artemis.version-control.user}\")\n+    private String BITBUCKET_USER;\n+\n+    @Value(\"${artemis.version-control.password}\")\n+    private String BITBUCKET_PASSWORD;\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    @Bean\n+    public BambooServer bambooServer() {\n+        UserPasswordCredentials userPasswordCredentials = new SimpleUserPasswordCredentials(BAMBOO_USER, BAMBOO_PASSWORD);\n+        return new BambooServer(BAMBOO_SERVER_URL.toString(), userPasswordCredentials);\n+    }\n+\n+    /**\n+     * Creates a Bamboo client for communication with the Bamboo instance over the non-REST API. This beans is also connected to the Bitbucket server\n+     * if the bitbucket profile is activated (incl. authentication).\n+     *\n+     * @return BambooClient instance for the Bamboo server that is defined in the environment yml files.\n+     */\n+    @Bean\n+    @Profile(\"bitbucket\")\n+    public BambooClient bambooClient() {\n+        final var bambooClient = new BambooClient(createBase());\n+        // setup the Bamboo Client to use the correct username and password\n+        final var args = new String[] { \"-s\", BAMBOO_SERVER_URL.toString(), \"--user\", BAMBOO_USER, \"--password\", BAMBOO_PASSWORD, \"--targetServer\", BITBUCKET_SERVER.toString(),\n+                \"--targetUser\", BITBUCKET_USER, \"--targetPassword\", BITBUCKET_PASSWORD };\n+\n+        bambooClient.doWork(args); // only invoke this to set server address, username and password so that the following action will work\n+        return bambooClient;\n+    }\n+\n+    /**\n+     * Creates a Bamboo client for communication with the Bamboo instance over the non-REST API. This bean has NO connection\n+     * to the Bitbucket server and only gets instantiated if the Bitbucket profile is not active\n+     *\n+     * @return\n+     */\n+    @Bean(\"bambooClient\")\n+    @Profile(\"!bitbucket\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829eda1162239686b493b2db1b47fe75c5191541"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDI5NzM0", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-338429734", "createdAt": "2020-01-05T23:46:37Z", "commit": {"oid": "829eda1162239686b493b2db1b47fe75c5191541"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMzo0NjozOFrOFaTdSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQyMzo0NjozOFrOFaTdSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNjA4OA==", "bodyText": "should this not be written like?\n@Profile({ \"bamboo\", \"bitbucket\" })", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363126088", "createdAt": "2020-01-05T23:46:38Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.bitbucket.cli.BitbucketClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+@Profile(\"bamboo & bitbucket\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829eda1162239686b493b2db1b47fe75c5191541"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5389b008cbadc64954b41aa9e38ff57fc1da85f3", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/5389b008cbadc64954b41aa9e38ff57fc1da85f3", "committedDate": "2020-01-07T12:17:19Z", "message": "Remove Bamboo client without Bitbucket bean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a69d5444de1b483d34b8ae149f5e24150fa1030", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/3a69d5444de1b483d34b8ae149f5e24150fa1030", "committedDate": "2020-01-07T12:19:21Z", "message": "Add comment to BitbucketBambooUpdateService profile configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22116d8ccd00e25c403320ae6b4d86f323be1f77", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/22116d8ccd00e25c403320ae6b4d86f323be1f77", "committedDate": "2020-01-07T12:20:25Z", "message": "Remove unused bitbucket client bean in BitbucketBambooUpdateService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/ea73700f3f0e069dac3d39a4a51371a2ee899925", "committedDate": "2020-01-07T12:21:34Z", "message": "Merge branch 'develop' into feature/programming-exercise/connector-beans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjUwNjAy", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-339250602", "createdAt": "2020-01-07T13:58:48Z", "commit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjUyNjcy", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-339252672", "createdAt": "2020-01-07T14:02:10Z", "commit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjQ5OTI5", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-339249929", "createdAt": "2020-01-07T13:57:37Z", "commit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMzo1NzozN1rOFa6EIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMzo1NzozN1rOFa6EIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1ODYyNA==", "bodyText": "Should this not be in the configuration file?", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363758624", "createdAt": "2020-01-07T13:57:37Z", "author": {"login": "maxr96"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {\n+                triggeredBy = Optional.of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, \"Assignment\")).collect(Collectors.toList()));\n+            }\n+            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, bambooClient, repoTriggers));\n+\n+            log.info(\"Update plan repository for build plan \" + planKey + \" was successful\");\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey + \" to the student repository : \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    private void overwriteTriggers(final String planKey, final BambooClient bambooClient, final List<String> triggeredBy) {\n+        try {\n+            final var triggersString = bambooClient.getTriggerHelper().getTriggerList(planKey, null, null, 99, Pattern.compile(\".*\"));\n+            // Bamboo CLI returns a weird String, which is the reason for this way of parsing it\n+            final var oldTriggers = Arrays.stream(triggersString.split(\"\\n\")).map(trigger -> trigger.replace(\"\\\"\", \"\").split(\",\"))\n+                    .filter(trigger -> trigger.length > 2 && NumberUtils.isCreatable(trigger[1])).map(trigger -> Long.parseLong(trigger[1])).collect(Collectors.toSet());\n+\n+            // Remove all old triggers\n+            for (final var triggerId : oldTriggers) {\n+                bambooClient.getTriggerHelper().removeTrigger(planKey, null, null, triggerId, null, false);\n+            }\n+\n+            // Add new triggers\n+            for (final var repo : triggeredBy) {\n+                bambooClient.getTriggerHelper().addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n+            }\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Unable to overwrite triggers for \" + planKey + \"\\n\" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void triggerUpdate(String buildPlanId, boolean initialBuild) {\n+        // NOT NEEDED\n+    }\n+\n+    /**\n+     * e.g. \"ssh://git@repobruegge.in.tum.de:7999/madm/helloworld.git\"\n+     * @param project the bitbucket project name\n+     * @param slug the bitbucket repo name\n+     * @return the ssh repository url\n+     */\n+    private String buildSshRepositoryUrl(String project, String slug) {\n+        final int sshPort = 7999;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjU0NDcy", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-339254472", "createdAt": "2020-01-07T14:05:11Z", "commit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDowNToxMVrOFa6RyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDoxMTo0OVrOFa6czQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MjEyMQ==", "bodyText": "Could the string be replaced by an enum or at least a local variable to not repeat \"Assignment\"?", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363762121", "createdAt": "2020-01-07T14:05:11Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzAwOQ==", "bodyText": "Can the magic number be avoided?", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363763009", "createdAt": "2020-01-07T14:07:18Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {\n+                triggeredBy = Optional.of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, \"Assignment\")).collect(Collectors.toList()));\n+            }\n+            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, bambooClient, repoTriggers));\n+\n+            log.info(\"Update plan repository for build plan \" + planKey + \" was successful\");\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey + \" to the student repository : \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    private void overwriteTriggers(final String planKey, final BambooClient bambooClient, final List<String> triggeredBy) {\n+        try {\n+            final var triggersString = bambooClient.getTriggerHelper().getTriggerList(planKey, null, null, 99, Pattern.compile(\".*\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MzMxNg==", "bodyText": "Why not needed?", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363763316", "createdAt": "2020-01-07T14:08:03Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/BitbucketBambooUpdateService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.exception.BambooException;\n+import de.tum.in.www1.artemis.service.connectors.bamboo.BambooBuildPlanUpdateProvider;\n+\n+@Service\n+// Only activate this service bean, if both Bamboo and Bitbucket are activated (@Profile({\"bitbucket\",\"bamboo\"}) would activate\n+// this if any profile is active (OR). We want both (AND)\n+@Profile(\"bamboo & bitbucket\")\n+public class BitbucketBambooUpdateService implements ContinuousIntegrationUpdateService {\n+\n+    @Value(\"${artemis.version-control.url}\")\n+    private URL BITBUCKET_SERVER;\n+\n+    private final Logger log = LoggerFactory.getLogger(BitbucketBambooUpdateService.class);\n+\n+    private final BambooClient bambooClient;\n+\n+    private final BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider;\n+\n+    public BitbucketBambooUpdateService(BambooClient bambooClient, BambooBuildPlanUpdateProvider bambooBuildPlanUpdateProvider) {\n+        this.bambooClient = bambooClient;\n+        this.bambooBuildPlanUpdateProvider = bambooBuildPlanUpdateProvider;\n+    }\n+\n+    @Override\n+    public void updatePlanRepository(String bambooProject, String planKey, String bambooRepositoryName, String bitbucketProject, String bitbucketRepository,\n+            Optional<List<String>> triggeredBy) {\n+        try {\n+            log.debug(\"Update plan repository for build plan \" + planKey);\n+            com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(bambooRepositoryName, planKey, false);\n+            // Workaround for old exercises which used a different repositoryName\n+            if (bambooRemoteRepository == null) {\n+                bambooRemoteRepository = bambooClient.getRepositoryHelper().getRemoteRepository(\"Assignment\", planKey, false);\n+                if (bambooRemoteRepository == null) {\n+                    throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey\n+                            + \" to the student repository : Could not find assignment nor Assignment repository\");\n+                }\n+            }\n+\n+            bambooBuildPlanUpdateProvider.updateRepository(bambooRemoteRepository, bitbucketRepository, bitbucketProject, planKey);\n+\n+            // Overwrite triggers if needed, incl workaround for different repo names\n+            if (triggeredBy.isPresent() && bambooRemoteRepository.getName().equals(\"Assignment\")) {\n+                triggeredBy = Optional.of(triggeredBy.get().stream().map(trigger -> trigger.replace(Constants.ASSIGNMENT_REPO_NAME, \"Assignment\")).collect(Collectors.toList()));\n+            }\n+            triggeredBy.ifPresent(repoTriggers -> overwriteTriggers(planKey, bambooClient, repoTriggers));\n+\n+            log.info(\"Update plan repository for build plan \" + planKey + \" was successful\");\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Something went wrong while updating the template repository of the build plan \" + planKey + \" to the student repository : \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    private void overwriteTriggers(final String planKey, final BambooClient bambooClient, final List<String> triggeredBy) {\n+        try {\n+            final var triggersString = bambooClient.getTriggerHelper().getTriggerList(planKey, null, null, 99, Pattern.compile(\".*\"));\n+            // Bamboo CLI returns a weird String, which is the reason for this way of parsing it\n+            final var oldTriggers = Arrays.stream(triggersString.split(\"\\n\")).map(trigger -> trigger.replace(\"\\\"\", \"\").split(\",\"))\n+                    .filter(trigger -> trigger.length > 2 && NumberUtils.isCreatable(trigger[1])).map(trigger -> Long.parseLong(trigger[1])).collect(Collectors.toSet());\n+\n+            // Remove all old triggers\n+            for (final var triggerId : oldTriggers) {\n+                bambooClient.getTriggerHelper().removeTrigger(planKey, null, null, triggerId, null, false);\n+            }\n+\n+            // Add new triggers\n+            for (final var repo : triggeredBy) {\n+                bambooClient.getTriggerHelper().addTrigger(planKey, null, \"remoteBitbucketServer\", null, null, repo, null, null, false);\n+            }\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException e) {\n+            throw new BambooException(\"Unable to overwrite triggers for \" + planKey + \"\\n\" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void triggerUpdate(String buildPlanId, boolean initialBuild) {\n+        // NOT NEEDED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2NDk0MQ==", "bodyText": "Could you add a link to the source?", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r363764941", "createdAt": "2020-01-07T14:11:49Z", "author": {"login": "madwau"}, "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/bamboo/BambooBuildPlanUpdateProvider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package de.tum.in.www1.artemis.service.connectors.bamboo;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.json.simple.JSONObject;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import com.appfire.bamboo.cli.BambooClient;\n+import com.appfire.common.cli.CliClient;\n+import com.appfire.common.cli.CliUtils;\n+import com.appfire.common.cli.JsonUtils;\n+import com.appfire.common.cli.objects.RemoteApplicationLink;\n+import com.appfire.common.cli.requesthelpers.DefaultRequestHelper;\n+\n+@Component\n+@Profile(\"bamboo\")\n+public class BambooBuildPlanUpdateProvider {\n+\n+    private final BambooClient bambooClient;\n+\n+    public BambooBuildPlanUpdateProvider(BambooClient bambooClient) {\n+        this.bambooClient = bambooClient;\n+    }\n+\n+    public void updateRepository(@Nonnull com.appfire.bamboo.cli.objects.RemoteRepository bambooRemoteRepository, String bitbucketRepositoryName, String bitbucketProjectKey,\n+            String completePlanName) throws CliClient.ClientException, CliClient.RemoteRestException {\n+\n+        Map<String, String> parameters = new HashMap<>();\n+        parameters.put(\"planKey\", completePlanName);\n+\n+        bambooClient.getRepositoryHelper().addRepositoryDetails(bambooRemoteRepository);\n+\n+        parameters.put(\"selectedRepository\", \"com.atlassian.bamboo.plugins.stash.atlassian-bamboo-plugin-stash:stash-rep\");\n+        // IMPORTANT: Don't change the name of the repo! We depend on the naming (assignment, tests) in some other parts of the application\n+        parameters.put(\"repositoryName\", bambooRemoteRepository.getName());\n+        parameters.put(\"repositoryId\", Long.toString(bambooRemoteRepository.getId()));\n+        parameters.put(\"confirm\", \"true\");\n+        parameters.put(\"save\", \"Save repository\");\n+        parameters.put(\"bamboo.successReturnMode\", \"json\");\n+        parameters.put(\"repository.stash.branch\", \"master\");\n+\n+        com.appfire.bitbucket.cli.objects.RemoteRepository bitbucketRepository;\n+        try {\n+            bitbucketRepository = bambooClient.getBitbucketClient().getRepositoryHelper().getRemoteRepository(bitbucketProjectKey, bitbucketRepositoryName, true);\n+        }\n+        catch (CliClient.ClientException | CliClient.RemoteRestException ex) {\n+            throw new CliClient.ClientException(\"Bitbucket failed trying to get repository details: \" + ex.getMessage());\n+        }\n+\n+        RemoteApplicationLink link = bambooClient.getBitbucketClient().getApplicationLink();\n+        if (link == null) {\n+            link = bambooClient.getApplicationLinksRequestHelper().getApplicationLink(bambooClient.getString(\"targetServer\"), \"stash\", true);\n+        }\n+\n+        if (link != null) {\n+            parameters.put(\"repository.stash.server\", link.getId());\n+        }\n+\n+        parameters.put(\"repository.stash.repositoryId\", bitbucketRepository.getIdString());\n+        parameters.put(\"repository.stash.repositorySlug\", bitbucketRepository.getSlug());\n+        parameters.put(\"repository.stash.projectKey\", bitbucketRepository.getProject());\n+        parameters.put(\"repository.stash.repositoryUrl\", bitbucketRepository.getCloneSshUrl());\n+\n+        String responseData = \"\";\n+\n+        try {\n+\n+            DefaultRequestHelper helper = bambooClient.getPseudoRequestHelper();\n+            helper.setRequestType(DefaultRequestHelper.RequestType.POST);\n+            helper.setContentType(DefaultRequestHelper.RequestContentType.JSON);\n+            helper.setParameters(parameters);\n+            helper.makeRequest(\"/chain/admin/config/updateRepository.action\");\n+            responseData = helper.getResponseData();\n+\n+        }\n+        catch (CliClient.RemoteInternalServerErrorException ex) {\n+            String message = \"Request failed on the server with response code 500. Make sure all required fields have been provided using the various field and value parameters. \"\n+                    + \"The server log may provide insight into missing fields: \" + ex.getMessage();\n+            throw new CliClient.ClientException(message);\n+        }\n+\n+        JSONObject json = bambooClient.getJsonWithVerboseLogging(responseData);\n+        JSONObject repositoryJson = JsonUtils.getJsonOrNull(JsonUtils.getStringOrNull(json, \"repositoryResult\"));\n+        if (repositoryJson == null) {\n+            String error = checkForError(responseData);\n+            throw new CliClient.ClientException(error.equals(\"\") ? \"Unknown error occurred.\" : error);\n+        }\n+    }\n+\n+    /**\n+     * This method was taken from RepositoryHelper of the Bamboo CLI Plugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea73700f3f0e069dac3d39a4a51371a2ee899925"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/3f9c17c89b9f9e89d0a2c7e969d61ca2a748858c", "committedDate": "2020-01-07T15:23:38Z", "message": "Use constant for old assignment repo name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d98fddfbae63b4a430c4e08cd512e50b31ac5a", "author": {"user": {"login": "ungaralex", "name": "Alexander Ungar"}}, "url": "https://github.com/ls1intum/Artemis/commit/a6d98fddfbae63b4a430c4e08cd512e50b31ac5a", "committedDate": "2020-01-07T15:27:54Z", "message": "Link RepositoryHelper in BambooBuildPlanUpdateProvider JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3c01192072489db48db3ef43e38a64366fa6e6", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/7d3c01192072489db48db3ef43e38a64366fa6e6", "committedDate": "2020-01-08T10:04:15Z", "message": "remove outdated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc", "committedDate": "2020-01-08T10:04:35Z", "message": "Merge branch 'develop' into feature/programming-exercise/connector-beans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Nzg5NjE3", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-339789617", "createdAt": "2020-01-08T10:59:32Z", "commit": {"oid": "5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1OTozMlrOFbTebQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDo1OTozMlrOFbTebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NDk1Nw==", "bodyText": "At the moment, it seems that we don't really need this class.", "url": "https://github.com/ls1intum/Artemis/pull/1169#discussion_r364174957", "createdAt": "2020-01-08T10:59:32Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/config/connector/BitbucketServerConfiguration.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package de.tum.in.www1.artemis.config.connector;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URL;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import com.appfire.bitbucket.cli.BitbucketClient;\n+import com.appfire.common.cli.Base;\n+import com.appfire.common.cli.Settings;\n+\n+@Configuration\n+@Profile(\"bitbucket\")\n+public class BitbucketServerConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ecca1f2ffdc1362aac99bdcd1f4f5c2529d2cbc"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84068a45c0d6ee52403d9c82b83fc62ec9a25453", "author": {"user": null}, "url": "https://github.com/ls1intum/Artemis/commit/84068a45c0d6ee52403d9c82b83fc62ec9a25453", "committedDate": "2020-01-08T11:17:11Z", "message": "delete unused configuration file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5ODA0MjY5", "url": "https://github.com/ls1intum/Artemis/pull/1169#pullrequestreview-339804269", "createdAt": "2020-01-08T11:29:55Z", "commit": {"oid": "84068a45c0d6ee52403d9c82b83fc62ec9a25453"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3051, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}