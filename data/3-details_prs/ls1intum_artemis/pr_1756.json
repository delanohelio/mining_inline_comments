{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjQwOTky", "number": 1756, "title": "[Exam] Evaluate (quiz) exercises by instructor.", "bodyText": "Checklist\n\n I tested all changes and all related features with different users (student, tutor, instructor, admin) on the test server https://artemistest.ase.in.tum.de.\n Server: I added multiple integration tests (Spring) related to the features\n Server: I added @PreAuthorize and check the course groups for all new REST Calls (security)\n Server: I implemented the changes with a good performance and prevented too many database calls\n Server: I documented the Java code using JavaDoc style.\n Client: I added multiple screenshots/screencasts of my UI changes\n\nMotivation and Context\nExams can contain quiz exercises. Normal quiz exercises are automatically evaluated at the quiz end using the QuizScheduleService.\nAs this service is not used, quizzes within exams are not evaluated automatically.\nThis PR adds a button Evaluate quiz exercises that allows the evaluation of all quiz exercises.\nDescription\nI've added a new ExamQuizService that allows for the evaluation of quiz exercises by loading the submissions from the database and storing the results again in the database.\nThe button Evaluate quizzes is displayed in the Student exams page and will only be enabled after the exam has ended\n(NOTE: Currently, the exam end date is used, not the start date + max(workingTime)).\nI've also disabled the Generate individual exams and Prepare exercise start buttons once the exam started.\nThe quiz statistics can then be viewed in the Exercise groups page using the Statistics button.\nSteps for Testing\n\nCreate an exam with one or multiple quiz exercises\nAdd students to the exam, generate the exams and prepare the exercises\nParticipate in the exam\nAfter the exam is over, click on the Evaluate quizzes button on the Student Exams page.\nNavigate to the Exercise groups page and review the statistics by clicking on Statistics. All quizzes should be evaluated.\nVerify that the scores are calculated correct by clicking on Scores next to the exercise within the Exercise groups page.\n\nScreenshots", "createdAt": "2020-06-29T20:46:57Z", "url": "https://github.com/ls1intum/Artemis/pull/1756", "merged": true, "mergeCommit": {"oid": "ca7ee6f21ec5b94b79245ca333b58b5aa42681fd"}, "closed": true, "closedAt": "2020-07-02T14:48:10Z", "author": {"login": "sleiss"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwHTr0gH2gAyNDQxNjQwOTkyOjI0MDQxN2IxM2YyMDFkMmRiNWZkNzMyNDQwOTY1MGQ0ZmZmYjc3Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw__bmgFqTQ0MTc1MTM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "240417b13f201d2db5fd7324409650d4fffb7768", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/240417b13f201d2db5fd7324409650d4fffb7768", "committedDate": "2020-06-29T20:45:17Z", "message": "Add evaluate exercises button, add client -> server connection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c06ffcba1498b2bfdb7ed040ff3b06f189c44e6b", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/c06ffcba1498b2bfdb7ed040ff3b06f189c44e6b", "committedDate": "2020-06-29T21:24:11Z", "message": "Rename to evaluateQuiz, disable action buttons if not applicable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac97a04c0b7d4a66384579e87581973404cbadae", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/ac97a04c0b7d4a66384579e87581973404cbadae", "committedDate": "2020-07-01T08:35:53Z", "message": "Merge branch 'develop' into exam/management/exercise-evaluate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "142f763f8ee27f9285ca899874431738ba3a6417", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/142f763f8ee27f9285ca899874431738ba3a6417", "committedDate": "2020-07-01T09:49:30Z", "message": "Add first version of evaluate quiz for exams."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07298d0f08deed0844843ee7d073ee12c07a20c1", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/07298d0f08deed0844843ee7d073ee12c07a20c1", "committedDate": "2020-07-01T10:02:41Z", "message": "Update comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4811e3b684eb68b9ebb539d30ea24d73a3f3f66a", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/4811e3b684eb68b9ebb539d30ea24d73a3f3f66a", "committedDate": "2020-07-01T10:04:29Z", "message": "Add missing comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/8f929e02c12b155259505d02a5657e33b58be819", "committedDate": "2020-07-01T14:54:03Z", "message": "Handle multiple submissions correctly. Add test cases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDIxNzQx", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441021741", "createdAt": "2020-07-01T16:24:29Z", "commit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNDoyOVrOGrs8JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNDoyOVrOGrs8JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODI0NA==", "bodyText": "check if this already exists", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478244", "createdAt": "2020-07-01T16:24:29Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);\n+                participation.setInitializationState(InitializationState.FINISHED);\n+\n+                // create new result\n+                Result result = new Result().participation(participation).submission(quizSubmission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDIyMTUy", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441022152", "createdAt": "2020-07-01T16:25:02Z", "commit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNTowMlrOGrs9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNTowMlrOGrs9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODU0OA==", "bodyText": "you can assume that there is one submission, but it might still make sense to warn or even throw if there are multiple ones or no ones", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478548", "createdAt": "2020-07-01T16:25:02Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDIyMzY2", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441022366", "createdAt": "2020-07-01T16:25:20Z", "commit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNToyMFrOGrs-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNToyMFrOGrs-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3ODczMQ==", "bodyText": "is already set to manually", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448478731", "createdAt": "2020-07-01T16:25:20Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n+        Set<Result> createdResults = new HashSet<>();\n+        Set<StudentParticipation> studentParticipations = quizExercise.getStudentParticipations();\n+\n+        for (var participation : studentParticipations) {\n+            try {\n+                Set<Submission> submissions = participation.getSubmissions();\n+                QuizSubmission quizSubmission;\n+                if (submissions.size() == 0) {\n+                    log.warn(\"Found no submissions for participation {} (Participant {}) in quiz {}\", participation.getId(), participation.getParticipant().getName(),\n+                            quizExercise.getId());\n+                    continue;\n+                }\n+                else {\n+                    List<Submission> submissionsList = new ArrayList<>(submissions);\n+\n+                    // Load submission with highest id\n+                    submissionsList.sort(Comparator.comparing(Submission::getId).reversed());\n+                    quizSubmission = (QuizSubmission) submissionsList.get(0);\n+                }\n+\n+                // Update attributes for submission and participations\n+                quizSubmission.setType(SubmissionType.TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDIzMjU3", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441023257", "createdAt": "2020-07-01T16:26:35Z", "commit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNjozNVrOGrtA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyNjozNVrOGrtA8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3OTQ3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {\n          \n          \n            \n                private Set<Result> evaluateSubmissions(@NotNull QuizExercise quizExercise) {", "url": "https://github.com/ls1intum/Artemis/pull/1756#discussion_r448479473", "createdAt": "2020-07-01T16:26:35Z", "author": {"login": "krusche"}, "path": "src/main/java/de/tum/in/www1/artemis/service/ExamQuizService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.enumeration.AssessmentType;\n+import de.tum.in.www1.artemis.domain.enumeration.InitializationState;\n+import de.tum.in.www1.artemis.domain.enumeration.SubmissionType;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.domain.quiz.QuizExercise;\n+import de.tum.in.www1.artemis.domain.quiz.QuizSubmission;\n+import de.tum.in.www1.artemis.repository.QuizSubmissionRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.StudentParticipationRepository;\n+\n+@Service\n+public class ExamQuizService {\n+\n+    static final Logger log = LoggerFactory.getLogger(ExamQuizService.class);\n+\n+    private final StudentParticipationRepository studentParticipationRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    private final QuizSubmissionRepository quizSubmissionRepository;\n+\n+    private final QuizExerciseService quizExerciseService;\n+\n+    private final QuizStatisticService quizStatisticService;\n+\n+    public ExamQuizService(StudentParticipationRepository studentParticipationRepository, ResultRepository resultRepository, QuizSubmissionRepository quizSubmissionRepository,\n+            QuizExerciseService quizExerciseService, QuizStatisticService quizStatisticService) {\n+        this.studentParticipationRepository = studentParticipationRepository;\n+        this.resultRepository = resultRepository;\n+        this.quizSubmissionRepository = quizSubmissionRepository;\n+        this.quizExerciseService = quizExerciseService;\n+        this.quizStatisticService = quizStatisticService;\n+    }\n+\n+    /**\n+     * Evaluate the given quiz exercise by evaluate the submission for each participation (there is only one for each participation in exams)\n+     * and update the statistics with the generated results.\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     */\n+    public void evaluateQuiz(@NotNull QuizExercise quizExercise) {\n+        // We have to load the questions and statistics so that we can evaluate and update and we also need the participations and submissions that exist for this exercise so that\n+        // they can be evaluated\n+        quizExercise = quizExerciseService.findOneWithQuestionsAndStatisticsAndParticipations(quizExercise.getId());\n+        Set<Result> createdResults = evaluateSubmissionsAndSaveInDB(quizExercise);\n+        quizStatisticService.updateStatistics(createdResults, quizExercise);\n+    }\n+\n+    /**\n+     * // @formatter:off\n+     * Evaluate the given quiz exercise by performing the following actions for each participation:\n+     * 1. Get the submission for each participation (there should be only one as in exam mode, the submission gets created upfront and will be updated)\n+     * - If no submission is found, print a warning and continue as we cannot evaluate that submission\n+     * - If more than one submission is found, select one of them\n+     * 2. mark submission and participation as evaluated\n+     * 3. Create a new result for the selected submission and calculate scores\n+     * 4. Save the updated submission & participation and the newly created result\n+     *\n+     * After processing all participations, the created results will be returned for further processing\n+     * // @formatter:on\n+     * @param quizExercise the QuizExercise that should be evaluated\n+     * @return the generated results\n+     */\n+    private Set<Result> evaluateSubmissionsAndSaveInDB(@NotNull QuizExercise quizExercise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f929e02c12b155259505d02a5657e33b58be819"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/5026aec22772e6b9d90cdda2ba5c0f2d402dfcc2", "committedDate": "2020-07-01T21:34:45Z", "message": "Rename methods, add more tests, implement feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e4e6b9c412bdbd4a5ab535f1913660a0d718a2b", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/9e4e6b9c412bdbd4a5ab535f1913660a0d718a2b", "committedDate": "2020-07-01T21:35:03Z", "message": "Merge branch 'develop' into exam/management/exercise-evaluate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c70f2c310317e7f44133148066443ca0796e3d92", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/c70f2c310317e7f44133148066443ca0796e3d92", "committedDate": "2020-07-02T07:43:42Z", "message": "Fix test cases, fix recalculate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbbb57778a2dc3b4c2844d65b15578e8d04d973a", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/bbbb57778a2dc3b4c2844d65b15578e8d04d973a", "committedDate": "2020-07-02T07:47:33Z", "message": "Merge remote-tracking branch 'origin/exam/management/exercise-evaluate' into exam/management/exercise-evaluate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "866b8fc4137ee3c1364fac80b51cfa8c4b2021a8", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/866b8fc4137ee3c1364fac80b51cfa8c4b2021a8", "committedDate": "2020-07-02T08:50:58Z", "message": "Add statistics button to exam groups page."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba41305e544910cda735c8892c737aa51b3c24cf", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/ba41305e544910cda735c8892c737aa51b3c24cf", "committedDate": "2020-07-02T08:54:49Z", "message": "Clarify method returns."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "320c3f96cc194a3783d9f700ead1caa792d77f12", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/320c3f96cc194a3783d9f700ead1caa792d77f12", "committedDate": "2020-07-02T09:31:13Z", "message": "Fix scores page."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjIxMzY5", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441621369", "createdAt": "2020-07-02T12:17:17Z", "commit": {"oid": "320c3f96cc194a3783d9f700ead1caa792d77f12"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5323dd53ad877b8e21c259c142231e3845c30a8", "author": {"user": {"login": "sleiss", "name": "Simon Lei\u00df"}}, "url": "https://github.com/ls1intum/Artemis/commit/b5323dd53ad877b8e21c259c142231e3845c30a8", "committedDate": "2020-07-02T12:42:34Z", "message": "Fix statistics selection for exam quiz exercises."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjU2NjYz", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441656663", "createdAt": "2020-07-02T13:03:48Z", "commit": {"oid": "b5323dd53ad877b8e21c259c142231e3845c30a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjkxODUy", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441691852", "createdAt": "2020-07-02T13:44:12Z", "commit": {"oid": "b5323dd53ad877b8e21c259c142231e3845c30a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjkzOTM1", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441693935", "createdAt": "2020-07-02T13:46:23Z", "commit": {"oid": "b5323dd53ad877b8e21c259c142231e3845c30a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzUxMzc4", "url": "https://github.com/ls1intum/Artemis/pull/1756#pullrequestreview-441751378", "createdAt": "2020-07-02T14:47:45Z", "commit": {"oid": "b5323dd53ad877b8e21c259c142231e3845c30a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2577, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}