{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDIwMTE1", "number": 163, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowNzo0MFrODvrjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyOToyN1rODwjiGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzIzMjk0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowNzo0MFrOGCP5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1NTo1M1rOGCTvFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMDg3NQ==", "bodyText": "this won't prove that it is restarted since this will trigger on the first time the service boots.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405010875", "createdAt": "2020-04-07T18:07:40Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTU5NA==", "bodyText": "First time the service boots, the install script exits 1 and the install will fail.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405051594", "createdAt": "2020-04-07T19:15:57Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMDg3NQ=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MzEwMw==", "bodyText": "Can you change the comment then?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405053103", "createdAt": "2020-04-07T19:18:31Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMDg3NQ=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MzY4Nw==", "bodyText": "My bad. I copied and pasted that comment. I'll remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405073687", "createdAt": "2020-04-07T19:55:53Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMDg3NQ=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzIzNjEwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowODozM1rOGCP7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxODo1NVrOGCSfpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMTQwNg==", "bodyText": "these shutdowns won't happen in the event that the assertion fails.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405011406", "createdAt": "2020-04-07T18:08:33Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupError\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_fail_retry_succeed_WHEN_kernel_launches_THEN_service_startup_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupErrorRetry\") && newState.equals(State.RUNNING)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTkyNA==", "bodyText": "Sure, but does it actually matter in this case even if we don't call shutdown?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405051924", "createdAt": "2020-04-07T19:16:34Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupError\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_fail_retry_succeed_WHEN_kernel_launches_THEN_service_startup_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupErrorRetry\") && newState.equals(State.RUNNING)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMTQwNg=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MzM1MA==", "bodyText": "Perhaps not a big deal, but there will be a running kernel sticking around AFAIK.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405053350", "createdAt": "2020-04-07T19:18:55Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupError\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_fail_retry_succeed_WHEN_kernel_launches_THEN_service_startup_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupErrorRetry\") && newState.equals(State.RUNNING)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMTQwNg=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI0MDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowOTo0OVrOGCP-xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxMzoxN1rOGCSTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjE2Ng==", "bodyText": "I think we're going to want something smarter than this, specifically to track the time of the errors so we can say: if it errored 5 times in 10 minutes, then consider it broken. And things like that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405012166", "createdAt": "2020-04-07T18:09:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -67,6 +67,12 @@\n     private State prevState = State.NEW;\n     private Future<?> lifecycleFuture;\n     private final AtomicBoolean isClosed = new AtomicBoolean(false);\n+    // The number of continual occurrences from a state to ERRORED.\n+    // This is not thread safe and should only be used inside reportState().\n+    private Map<State, Integer> stateToErroredCount = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MDExNg==", "bodyText": "I thought about that but am not sure that's desired. Using a time period as a condition wouldn't be very robust because a slow device can take much longer to transition state than a fast device. Plus we already have timeout for each steps, adding another time condition seems unnecessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405050116", "createdAt": "2020-04-07T19:13:17Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -67,6 +67,12 @@\n     private State prevState = State.NEW;\n     private Future<?> lifecycleFuture;\n     private final AtomicBoolean isClosed = new AtomicBoolean(false);\n+    // The number of continual occurrences from a state to ERRORED.\n+    // This is not thread safe and should only be used inside reportState().\n+    private Map<State, Integer> stateToErroredCount = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjE2Ng=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ5NDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNzo1NFrOGCSdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyMTowNlrOGCSkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjcxMQ==", "bodyText": "How is this working given that it appears to reset with any state which isn't errored? If the services goes from errored, then it will restart, so it will transition to installed (which would clear the error count), then it goes to running, then errored again.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405052711", "createdAt": "2020-04-07T19:17:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+        } else {\n+            stateToErroredCount.put(currentState, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NDU0NA==", "bodyText": "I think I understand since \"INSTALLED\" is not reported, right? We just directly transition to it. This does seem a bit brittle though.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405054544", "createdAt": "2020-04-07T19:21:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+        } else {\n+            stateToErroredCount.put(currentState, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjcxMQ=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDE4NjI5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjo1Nzo1NlrOGCZHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzozNjozNFrOGDipNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTgyNQ==", "bodyText": "Do we want to ensure that the can move to installed after it error-ed in the previous attempt\nsomething like :\nhttps://github.com/aws/aws-greengrass-kernel/blob/master/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelShutdownTest.java#L30", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405161825", "createdAt": "2020-04-07T22:57:56Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjUxOQ==", "bodyText": "GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds is the test case for that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406366519", "createdAt": "2020-04-09T17:36:34Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTgyNQ=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDE5OTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowMzoxOFrOGCZPGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzozNDowOVrOGDij7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MzgwMQ==", "bodyText": "do we want to move the service to broken state in the below scenario\nservice does not handle shutdown properly and kernel always kills the service using SIGKILL. When the service is asked to move to finished state (during shutdown), it will error and the counter is incremented. The service will be marked as broken the third time the service is shutdown.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405163801", "createdAt": "2020-04-07T23:03:18Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTE2Ng==", "bodyText": "Good point. I exclude \"STOPPING\" from the count map.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406365166", "createdAt": "2020-04-09T17:34:09Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MzgwMQ=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM2NDU2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyMjo0NFrOGCawvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyMjo0NFrOGCawvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODc5OQ==", "bodyText": "Need a test for getting out of broken state.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405188799", "createdAt": "2020-04-08T00:22:44Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupError\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_fail_retry_succeed_WHEN_kernel_launches_THEN_service_startup_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupErrorRetry\") && newState.equals(State.RUNNING)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQ2NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToxOTozNVrOGCbs5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1ODoyN1rOGDfG9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDE5OA==", "bodyText": "In the code of error handling (when currentStatus is ERROR, the error handling will restart the service by immediately transition service state to INSTALLED) , therefore service go into ERROR state consecutively is very rare", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405204198", "createdAt": "2020-04-08T01:19:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+        } else {\n+            stateToErroredCount.put(currentState, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwODU5OA==", "bodyText": "It's consecutively transition of State -> ERROR.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406308598", "createdAt": "2020-04-09T15:58:27Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+        } else {\n+            stateToErroredCount.put(currentState, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDE5OA=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQ3MDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToyMTo0MFrOGCbvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoxNzo1MlrOGDn78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDc1Mg==", "bodyText": "I personally don't like the idea of change reported state in reportState(). In that case, every place where you need to handle ERROR you need to handle BROKEN as well", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405204752", "createdAt": "2020-04-08T01:21:40Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -452,6 +468,8 @@ private void startStateTransition() throws InterruptedException {\n                     State reportState = getReportState().orElse(null);\n                     if (State.ERRORED.equals(reportState) || !ok) {\n                         updateStateAndBroadcast(State.ERRORED);\n+                    } else if (State.BROKEN.equals(reportState)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwOTg0Ng==", "bodyText": "Why is that the case? reportState() is the place where we know, for each current state, how many consecutive ERROR have occurred during the state transition.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406309846", "createdAt": "2020-04-09T16:00:19Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -452,6 +468,8 @@ private void startStateTransition() throws InterruptedException {\n                     State reportState = getReportState().orElse(null);\n                     if (State.ERRORED.equals(reportState) || !ok) {\n                         updateStateAndBroadcast(State.ERRORED);\n+                    } else if (State.BROKEN.equals(reportState)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDc1Mg=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjc4OQ==", "bodyText": "You can also set the state in error handling part, where current state is ERROR.\nOne race condition I can think of, is if a service reportError multiple times while running. If the lifecycle thread doesn't process the first ERROR state and the second ERROR comes in, this will be treated as 'consecutive failures'", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406406789", "createdAt": "2020-04-09T18:47:37Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -452,6 +468,8 @@ private void startStateTransition() throws InterruptedException {\n                     State reportState = getReportState().orElse(null);\n                     if (State.ERRORED.equals(reportState) || !ok) {\n                         updateStateAndBroadcast(State.ERRORED);\n+                    } else if (State.BROKEN.equals(reportState)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDc1Mg=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MzIzMg==", "bodyText": "It won't work if the error is transient and random. I put the logic in reportState() so that we can clear the error count if the retry of the transition succeeds.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406453232", "createdAt": "2020-04-09T20:17:52Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -452,6 +468,8 @@ private void startStateTransition() throws InterruptedException {\n                     State reportState = getReportState().orElse(null);\n                     if (State.ERRORED.equals(reportState) || !ok) {\n                         updateStateAndBroadcast(State.ERRORED);\n+                    } else if (State.BROKEN.equals(reportState)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDc1Mg=="}, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzQzNjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NzoyNVrOGC4WMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NzoyNVrOGC4WMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MzUyMQ==", "bodyText": "Nice, this fixes concurrent modification exceptions I saw while looking at flaky tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405673521", "createdAt": "2020-04-08T16:57:25Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -51,7 +51,7 @@\n     private static final File userdir = new File(System.getProperty(\"user.dir\"));\n     private static final File homedir = new File(System.getProperty(\"user.home\"));\n     @SuppressWarnings(\"PMD.LooseCoupling\")\n-    private static final LinkedList<Path> paths = new LinkedList<>();\n+    private static final ConcurrentLinkedDeque<Path> paths = new ConcurrentLinkedDeque<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA1MDc2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODozODowMVrOGDkyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNDowOFrOGDoHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMTU5MA==", "bodyText": "This is not the merge that we use. We use kernel.mergeInNewConfig, I think you may want to use that instead since that is the code path used by a deployment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406401590", "createdAt": "2020-04-09T18:38:01Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,101 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_broken_WHEN_kernel_launches_with_fix_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+\n+        // merge in a new config that fixes the installation error\n+        kernel.read(kernel.deTilde(getClass().getResource(\"config_install_succeed_partial.yaml\").toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NjIzMg==", "bodyText": "mergeInNewConfig doesn't have an interface for yaml file. I don't want to construct an object from yaml. I think the read() method is fine. We'll have a deployment test regardless.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406456232", "createdAt": "2020-04-09T20:24:08Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,101 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_broken_WHEN_kernel_launches_with_fix_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+\n+        // merge in a new config that fixes the installation error\n+        kernel.read(kernel.deTilde(getClass().getResource(\"config_install_succeed_partial.yaml\").toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMTU5MA=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA3NTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0NToxMlrOGDlBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToyNDowMFrOGDmQBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTQ5Nw==", "bodyText": "Bad merge, or are you adding this back explicitly?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406405497", "createdAt": "2020-04-09T18:45:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -120,10 +115,17 @@ public void fire(WhatHappened what) {\n                 .addKeyValue(\"reason\", what.name()).log();\n         if (watchers != null) {\n             for (Watcher s : watchers) {\n-                if (s instanceof Subscriber) {\n-                    ((Subscriber) s).published(what, this);\n+                try {\n+                    if (s instanceof Subscriber) {\n+                        ((Subscriber) s).published(what, this);\n+                    }\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNDU5NA==", "bodyText": "bad merge....", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406424594", "createdAt": "2020-04-09T19:21:54Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -120,10 +115,17 @@ public void fire(WhatHappened what) {\n                 .addKeyValue(\"reason\", what.name()).log();\n         if (watchers != null) {\n             for (Watcher s : watchers) {\n-                if (s instanceof Subscriber) {\n-                    ((Subscriber) s).published(what, this);\n+                try {\n+                    if (s instanceof Subscriber) {\n+                        ((Subscriber) s).published(what, this);\n+                    }\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTQ5Nw=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNTYwNQ==", "bodyText": "Now I look again, why do we remove the try..catch?  Is it desired to skip all the rest of the watchers if one throws an exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406425605", "createdAt": "2020-04-09T19:24:00Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -120,10 +115,17 @@ public void fire(WhatHappened what) {\n                 .addKeyValue(\"reason\", what.name()).log();\n         if (watchers != null) {\n             for (Watcher s : watchers) {\n-                if (s instanceof Subscriber) {\n-                    ((Subscriber) s).published(what, this);\n+                try {\n+                    if (s instanceof Subscriber) {\n+                        ((Subscriber) s).published(what, this);\n+                    }\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTQ5Nw=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA3ODM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0NjowNVrOGDlDPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNDozOVrOGDmlng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTk1MA==", "bodyText": "Extract statesToTrack as a static final, and use hashset.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406405950", "createdAt": "2020-04-09T18:46:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -159,8 +165,23 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        // We only need to track the ERROR for the state transition starting from NEW, INSTALLED and RUNNING because\n+        // these states impact whether the service can function as expected.\n+        List<State> statesToTrack = Arrays.asList(State.NEW, State.INSTALLED, State.RUNNING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNjMyMw==", "bodyText": "I thought about using hashset but it's an array of three elements...not sure if it makes a difference. It's used locally so not sure about using static final.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406426323", "createdAt": "2020-04-09T19:25:30Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -159,8 +165,23 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        // We only need to track the ERROR for the state transition starting from NEW, INSTALLED and RUNNING because\n+        // these states impact whether the service can function as expected.\n+        List<State> statesToTrack = Arrays.asList(State.NEW, State.INSTALLED, State.RUNNING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTk1MA=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyOTU4OA==", "bodyText": "It is used locally which means that it will be created every time that this logic triggers. Having it be static final means that we only ever need 1 copy for all of EG.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406429588", "createdAt": "2020-04-09T19:31:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -159,8 +165,23 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        // We only need to track the ERROR for the state transition starting from NEW, INSTALLED and RUNNING because\n+        // these states impact whether the service can function as expected.\n+        List<State> statesToTrack = Arrays.asList(State.NEW, State.INSTALLED, State.RUNNING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTk1MA=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTEzNA==", "bodyText": "Fair point. I'll make it constant.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406431134", "createdAt": "2020-04-09T19:34:39Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -159,8 +165,23 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        // We only need to track the ERROR for the state transition starting from NEW, INSTALLED and RUNNING because\n+        // these states impact whether the service can function as expected.\n+        List<State> statesToTrack = Arrays.asList(State.NEW, State.INSTALLED, State.RUNNING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTk1MA=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA4MzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0Nzo0MlrOGDlGvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToyNjowNlrOGDmUCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjg0NA==", "bodyText": "Did you get any understanding for why this was the way it was before?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406406844", "createdAt": "2020-04-09T18:47:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -333,7 +355,7 @@ public final void requestRestart() {\n      */\n     public final void requestReinstall() {\n         synchronized (this.desiredStateList) {\n-            setDesiredState(State.INSTALLED, State.NEW, State.RUNNING);\n+            setDesiredState(State.NEW, State.RUNNING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNjYzNQ==", "bodyText": "I asked Shirley and it seems there is no reason for what it was before.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406426635", "createdAt": "2020-04-09T19:26:06Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -333,7 +355,7 @@ public final void requestRestart() {\n      */\n     public final void requestReinstall() {\n         synchronized (this.desiredStateList) {\n-            setDesiredState(State.INSTALLED, State.NEW, State.RUNNING);\n+            setDesiredState(State.NEW, State.RUNNING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjg0NA=="}, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA5MDk4OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0OTo0MlrOGDlLRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0OTo0MlrOGDlLRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwODAwNA==", "bodyText": "doesn't this prevent the service from restarting?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406408004", "createdAt": "2020-04-09T18:49:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -511,10 +546,7 @@ private void startStateTransition() throws InterruptedException {\n                         // in order to shutdown this thread since we were requested to stop\n                         throw e;\n                     }\n-                    //TODO: Set service to broken state if error happens too often\n-                    if (!desiredState.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQwNDExOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyOToyN1rOGDoSEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo0NDozOVrOGDovHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1ODg5OQ==", "bodyText": "This is now fixed and merged. Please try again and remove these comments if it is working.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406458899", "createdAt": "2020-04-09T20:29:27Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,101 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_broken_WHEN_kernel_launches_with_fix_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+\n+        // merge in a new config that fixes the installation error\n+        kernel.read(kernel.deTilde(getClass().getResource(\"config_install_succeed_partial.yaml\").toString()));\n+        // The above read() should already trigger a re-install through subscriber but there appears a bug in the code.\n+        // SIM: https://sim.amazon.com/issues/469c4bac-808a-4fe7-ae89-8546a55566d8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ecc9fddefa35a0386b02fc250c3696a3bb04c4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2NjMzNA==", "bodyText": "works. Thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406466334", "createdAt": "2020-04-09T20:44:39Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,101 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_broken_WHEN_kernel_launches_with_fix_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+\n+        // merge in a new config that fixes the installation error\n+        kernel.read(kernel.deTilde(getClass().getResource(\"config_install_succeed_partial.yaml\").toString()));\n+        // The above read() should already trigger a re-install through subscriber but there appears a bug in the code.\n+        // SIM: https://sim.amazon.com/issues/469c4bac-808a-4fe7-ae89-8546a55566d8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1ODg5OQ=="}, "originalCommit": {"oid": "b2ecc9fddefa35a0386b02fc250c3696a3bb04c4"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 11, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}