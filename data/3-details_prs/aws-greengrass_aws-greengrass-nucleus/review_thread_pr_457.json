{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NjYxODgw", "number": 457, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxOTo0MFrOEl18nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxOTo0MFrOEl18nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTE2NjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/Topic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxOTo0MFrOHVizSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToyMDoyMVrOHVi0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MjMzMQ==", "bodyText": "Not needed for Boolean?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/457#discussion_r492352331", "createdAt": "2020-09-21T21:19:40Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/config/Topic.java", "diffHunk": "@@ -72,18 +73,77 @@ public void appendTo(Appendable a) throws IOException {\n         a.append(String.valueOf(value));\n     }\n \n-    public Topic withValue(Object nv) {\n+    public Topic withValueChecked(Object nv) throws UnsupportedInputTypeException {\n+        return withValueChecked(System.currentTimeMillis(), nv);\n+    }\n+\n+    /**\n+     * Set value with checked exception if the type will not store properly.\n+     *\n+     * @param proposedModtime proposed modification time\n+     * @param nv value\n+     * @return this\n+     * @throws UnsupportedInputTypeException if the input value is unsupported\n+     */\n+    public Topic withValueChecked(long proposedModtime, Object nv) throws UnsupportedInputTypeException {\n+        if (nv == null || nv instanceof String || nv instanceof Number || nv instanceof Boolean || nv instanceof List) {\n+            return withNewerValue(proposedModtime, nv);\n+        }\n+        throw new UnsupportedInputTypeException(nv.getClass());\n+    }\n+\n+    private Topic withValue(Object nv) {\n         return withNewerValue(System.currentTimeMillis(), nv);\n     }\n \n+    public Topic withValue(String nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    public Topic withValue(Number nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    public Topic withValue(Boolean nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    public Topic withValue(List<String> nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    // Because of type erasure, the following overrides need to have different names\n+    public Topic withValueLN(List<Number> nv) {\n+        return withValue(nv);\n+    }\n+\n+    public Topic withValueLB(List<Boolean> nv) {\n+        return withValue(nv);\n+    }\n+\n+    Topic withNewerValue(long proposedModtime, final Object proposed) {\n+        return withNewerValue(proposedModtime, proposed, false);\n+    }\n+\n+    /**\n+     * Set the value of this topic to a new value.\n+     *\n+     * @param proposedModtime the last modified time of the value. If this is in the past, we do not update the value.\n+     * @param proposed        new value.\n+     * @return this.\n+     */\n+    public Topic withNewerValue(long proposedModtime, String proposed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75cbf5ab811278c7254c8cb1dd3a736f9ee5db4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MjY4OA==", "bodyText": "No one ever calls it, we're not really storing many booleans. Can be added if required.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/457#discussion_r492352688", "createdAt": "2020-09-21T21:20:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/Topic.java", "diffHunk": "@@ -72,18 +73,77 @@ public void appendTo(Appendable a) throws IOException {\n         a.append(String.valueOf(value));\n     }\n \n-    public Topic withValue(Object nv) {\n+    public Topic withValueChecked(Object nv) throws UnsupportedInputTypeException {\n+        return withValueChecked(System.currentTimeMillis(), nv);\n+    }\n+\n+    /**\n+     * Set value with checked exception if the type will not store properly.\n+     *\n+     * @param proposedModtime proposed modification time\n+     * @param nv value\n+     * @return this\n+     * @throws UnsupportedInputTypeException if the input value is unsupported\n+     */\n+    public Topic withValueChecked(long proposedModtime, Object nv) throws UnsupportedInputTypeException {\n+        if (nv == null || nv instanceof String || nv instanceof Number || nv instanceof Boolean || nv instanceof List) {\n+            return withNewerValue(proposedModtime, nv);\n+        }\n+        throw new UnsupportedInputTypeException(nv.getClass());\n+    }\n+\n+    private Topic withValue(Object nv) {\n         return withNewerValue(System.currentTimeMillis(), nv);\n     }\n \n+    public Topic withValue(String nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    public Topic withValue(Number nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    public Topic withValue(Boolean nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    public Topic withValue(List<String> nv) {\n+        return withValue((Object) nv);\n+    }\n+\n+    // Because of type erasure, the following overrides need to have different names\n+    public Topic withValueLN(List<Number> nv) {\n+        return withValue(nv);\n+    }\n+\n+    public Topic withValueLB(List<Boolean> nv) {\n+        return withValue(nv);\n+    }\n+\n+    Topic withNewerValue(long proposedModtime, final Object proposed) {\n+        return withNewerValue(proposedModtime, proposed, false);\n+    }\n+\n+    /**\n+     * Set the value of this topic to a new value.\n+     *\n+     * @param proposedModtime the last modified time of the value. If this is in the past, we do not update the value.\n+     * @param proposed        new value.\n+     * @return this.\n+     */\n+    public Topic withNewerValue(long proposedModtime, String proposed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MjMzMQ=="}, "originalCommit": {"oid": "a75cbf5ab811278c7254c8cb1dd3a736f9ee5db4"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 533, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}