{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MjM3OTUz", "number": 225, "title": "Add more tests for Exec class", "bodyText": "Issue #, if available:\nDescription of changes:\nAdded more Tests to Exec class\nWhy is this change necessary:\nCurrently Exec class has basic coverage, adding more tests to increase that. Instead of unit tests, augmented existing integration style tests\nHow was this change tested:\nRan the tests locally\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-06T17:39:29Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225", "merged": true, "mergeCommit": {"oid": "833be32c681456da3821570db2cb83964c08da24"}, "closed": true, "closedAt": "2020-05-07T00:17:01Z", "author": {"login": "prateek-y"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcesatAAFqTQwNjg0NDQ0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcexiaogH2gAyNDE0MjM3OTUzOmJjYzJjYjVlYTM3YzBjZTZmMmUxMjg5ZjU5YTMzN2VmNjk0MTQzN2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODQ0NDQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#pullrequestreview-406844447", "createdAt": "2020-05-06T17:43:29Z", "commit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo0MzoyOVrOGReROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo0Nzo1M1rOGRecgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NDkwNQ==", "bodyText": "can you rename this as GIVEN_WHEN_THEN like we did for Stream Manager?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420974905", "createdAt": "2020-05-06T17:43:29Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NTc0Mg==", "bodyText": "These look a bit separate, maybe should be in a different test which tests the working directory.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420975742", "createdAt": "2020-05-06T17:44:41Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjUwMA==", "bodyText": "this isn't really testing anything JDK related, but testing that successful returns true or false based on the exit code (from what I can tell based on this test).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420976500", "createdAt": "2020-05-06T17:45:57Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n+    void testGetOpenJDK() throws InterruptedException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3Nzc5NA==", "bodyText": "is there anything to be tested with this? Verify that it is no-op or verify that the Process is no longer running?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420977794", "createdAt": "2020-05-06T17:47:53Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n+    void testGetOpenJDK() throws InterruptedException, IOException {\n         assertFalse(Exec.successful(false, \"echo openjdk 11.0|egrep -i -q '(jdk|jre) *18\\\\.'\"));\n         assertTrue(new Exec().withShell(\"echo openjdk 11.0|egrep -i -q '(jdk|jre) *11\\\\.'\").withDumpOut()\n                 .successful(false));\n     }\n \n     @Test\n-    void test3() throws Exception {\n+    void testExecCommandInBackground() throws Exception {\n         CountDownLatch done = new CountDownLatch(1);\n-        List<String> o = new ArrayList<>();\n-        List<String> e = new ArrayList<>();\n+        List<String> stdoutMessages = new ArrayList<>();\n+        List<String> stderrMessages = new ArrayList<>();\n \n-        new Exec().withShell(\"pwd\").withOut(str -> o.add(str.toString())).withErr(str -> e.add(str.toString()))\n+        new Exec().withShell(\"pwd\")\n+                .withOut(str -> stdoutMessages.add(str.toString()))\n+                .withErr(str -> stderrMessages.add(str.toString()))\n                 .background(exc -> done.countDown());\n-        assertTrue(done.await(10, TimeUnit.SECONDS));\n-        //        System.out.println(\"O: \"+deepToString(o));\n-        //        System.out.println(\"E: \"+deepToString(e));\n-        assertEquals(0, e.size());\n-        assertEquals(1, o.size());\n-        assertTrue(o.get(0).startsWith(\"/\"));\n+        // Wait for 1 second for command to finish\n+        assertTrue(done.await(1, TimeUnit.SECONDS));\n+        assertEquals(0, stderrMessages.size());\n+        assertEquals(1, stdoutMessages.size());\n+        assertTrue(stdoutMessages.get(0).startsWith(\"/\"));\n+    }\n+\n+    @Test\n+    void testClosingProcess() throws IOException, InterruptedException {\n+        String command = \"Sleep 10\";\n+        CountDownLatch done = new CountDownLatch(1);\n+        Exec exec = new Exec();\n+        exec.withShell(command).background(exc -> done.countDown());\n+        assertTrue(exec.isRunning());\n+        // close waits for atmost 7 seconds before close\n+        exec.close();\n+        assertFalse(exec.isRunning());\n+        //closing again should be no op\n+        exec.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTAyMjIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#pullrequestreview-406902221", "createdAt": "2020-05-06T19:00:21Z", "commit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMDoyMVrOGRhKxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMDoyMVrOGRhKxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMjQwNA==", "bodyText": "I think it is not necessary to generate a random string here. Just use something like \"this_wont_exist_ever\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421022404", "createdAt": "2020-05-06T19:00:21Z", "author": {"login": "fufranci"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n+    void testGetOpenJDK() throws InterruptedException, IOException {\n         assertFalse(Exec.successful(false, \"echo openjdk 11.0|egrep -i -q '(jdk|jre) *18\\\\.'\"));\n         assertTrue(new Exec().withShell(\"echo openjdk 11.0|egrep -i -q '(jdk|jre) *11\\\\.'\").withDumpOut()\n                 .successful(false));\n     }\n \n     @Test\n-    void test3() throws Exception {\n+    void testExecCommandInBackground() throws Exception {\n         CountDownLatch done = new CountDownLatch(1);\n-        List<String> o = new ArrayList<>();\n-        List<String> e = new ArrayList<>();\n+        List<String> stdoutMessages = new ArrayList<>();\n+        List<String> stderrMessages = new ArrayList<>();\n \n-        new Exec().withShell(\"pwd\").withOut(str -> o.add(str.toString())).withErr(str -> e.add(str.toString()))\n+        new Exec().withShell(\"pwd\")\n+                .withOut(str -> stdoutMessages.add(str.toString()))\n+                .withErr(str -> stderrMessages.add(str.toString()))\n                 .background(exc -> done.countDown());\n-        assertTrue(done.await(10, TimeUnit.SECONDS));\n-        //        System.out.println(\"O: \"+deepToString(o));\n-        //        System.out.println(\"E: \"+deepToString(e));\n-        assertEquals(0, e.size());\n-        assertEquals(1, o.size());\n-        assertTrue(o.get(0).startsWith(\"/\"));\n+        // Wait for 1 second for command to finish\n+        assertTrue(done.await(1, TimeUnit.SECONDS));\n+        assertEquals(0, stderrMessages.size());\n+        assertEquals(1, stdoutMessages.size());\n+        assertTrue(stdoutMessages.get(0).startsWith(\"/\"));\n+    }\n+\n+    @Test\n+    void testClosingProcess() throws IOException, InterruptedException {\n+        String command = \"Sleep 10\";\n+        CountDownLatch done = new CountDownLatch(1);\n+        Exec exec = new Exec();\n+        exec.withShell(command).background(exc -> done.countDown());\n+        assertTrue(exec.isRunning());\n+        // close waits for atmost 7 seconds before close\n+        exec.close();\n+        assertFalse(exec.isRunning());\n+        //closing again should be no op\n+        exec.close();\n+    }\n+\n+    @Test\n+    void testExecForStdOutputStdError() throws InterruptedException, IOException {\n+        Exec exec = new Exec();\n+        String expectedOutput = \"HELLO\";\n+        String command = \"echo \" + expectedOutput;\n+        StringBuilder stdout = new StringBuilder();\n+        StringBuilder stderr = new StringBuilder();\n+        Consumer<CharSequence> stdoutConsumer = c -> stdout.append(c);\n+        Consumer<CharSequence> stderrConsumer = c -> stderr.append(c);\n+        exec = exec.withShell(command).withOut(stdoutConsumer).withErr(stderrConsumer);\n+        assertTrue(exec.successful(false));\n+        // new line for shell\n+        assertEquals(expectedOutput.length() + 1, stdout.toString().length());\n+        assertEquals(0, stderr.toString().length());\n+\n+        // reinit consumers\n+        stdout.setLength(0);\n+        stderr.setLength(0);\n+\n+        command = command + \" 1>&2\";\n+        exec = exec.withShell(command);\n+        assertFalse(exec.successful(false));\n+        assertEquals(0, stdout.toString().length());\n+        // new line for shell\n+        assertEquals(expectedOutput.length() + 1, stderr.toString().length());\n+    }\n+\n+    @Test\n+    void testCD() throws InterruptedException, IOException {\n+        Exec exec = new Exec();\n+        final String getWorkingDirCmd = \"pwd\";\n+        // By default Exec uses home current directory for exec\n+        String expectedDir = System.getProperty(\"user.dir\");\n+        String defaultDir = exec.withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, defaultDir);\n+\n+        // Now change it to some other directory\n+        // TODO: Change this to a proper root to work on all platforms\n+        expectedDir = \"/\";\n+        String changedDir = exec.cd(new File(expectedDir)).withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+\n+        // Now use the file argument to change into another directory again\n+        // File argument would use the current directory (\"/\") as base\n+        expectedDir = System.getProperty(\"user.home\");\n+        changedDir = exec.cd(expectedDir).withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+\n+        // Now change it to root again\n+        expectedDir = \"/\";\n+        changedDir = exec.cd(new File(expectedDir)).withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+\n+        // by default cd change to home directory\n+        expectedDir = System.getProperty(\"user.home\");\n+        changedDir = exec.cd().withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+    }\n+\n+    @Test\n+    void testToString() {\n+        // TODO: length of 90 as per the class does not seem to work\n+        int maxStringLength = 50;\n+        String fakeCommand = Utils.generateRandomString(maxStringLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e"}, "originalPosition": 159}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bf6949136c9c0817beddc8722691032133d429e", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bf6949136c9c0817beddc8722691032133d429e", "committedDate": "2020-05-06T17:37:05Z", "message": "Add more tests for Exec class"}, "afterCommit": {"oid": "c8f08086c881a9d34b4ebfdefa207318071daad8", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8f08086c881a9d34b4ebfdefa207318071daad8", "committedDate": "2020-05-06T21:23:40Z", "message": "Add more tests for Exec class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDQyNTY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#pullrequestreview-407042568", "createdAt": "2020-05-06T22:56:26Z", "commit": {"oid": "c8f08086c881a9d34b4ebfdefa207318071daad8"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo1NjoyNlrOGRoTmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo1NjoyNlrOGRoTmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzOTM1Mw==", "bodyText": "Interesting. I didn't know there is a capital Sleep command!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421139353", "createdAt": "2020-05-06T22:56:26Z", "author": {"login": "fufranci"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -6,56 +6,139 @@\n import com.aws.iot.evergreen.util.Exec;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void Given_exec_WHEN_commands_executed_using_static_methods_THEN_success() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n-        assertFalse(Exec.successful(false, \"echo openjdk 11.0|egrep -i -q '(jdk|jre) *18\\\\.'\"));\n-        assertTrue(new Exec().withShell(\"echo openjdk 11.0|egrep -i -q '(jdk|jre) *11\\\\.'\").withDumpOut()\n-                .successful(false));\n+    void GIVEN_exec_WHEN_command_executed_in_background_THEN_success() throws Exception {\n+        CountDownLatch done = new CountDownLatch(1);\n+        List<String> stdoutMessages = new ArrayList<>();\n+        List<String> stderrMessages = new ArrayList<>();\n+\n+        new Exec().withShell(\"pwd\")\n+                .withOut(str -> stdoutMessages.add(str.toString()))\n+                .withErr(str -> stderrMessages.add(str.toString()))\n+                .background(exc -> done.countDown());\n+        // Wait for 1 second for command to finish\n+        assertTrue(done.await(1, TimeUnit.SECONDS));\n+        assertEquals(0, stderrMessages.size());\n+        assertEquals(1, stdoutMessages.size());\n+        assertTrue(stdoutMessages.get(0).startsWith(\"/\"));\n     }\n \n     @Test\n-    void test3() throws Exception {\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    void GIVEN_exec_WHEN_running_command_closed_THEN_success() throws IOException, InterruptedException {\n+        // close waits for atmost 7 seconds before close\n+        String command = \"Sleep 10\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8f08086c881a9d34b4ebfdefa207318071daad8"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002b71d3be0c2658cace5a757145a286e3ebca29", "committedDate": "2020-05-06T23:06:39Z", "message": "Add more tests for Exec class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8f08086c881a9d34b4ebfdefa207318071daad8", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8f08086c881a9d34b4ebfdefa207318071daad8", "committedDate": "2020-05-06T21:23:40Z", "message": "Add more tests for Exec class"}, "afterCommit": {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002b71d3be0c2658cace5a757145a286e3ebca29", "committedDate": "2020-05-06T23:06:39Z", "message": "Add more tests for Exec class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDUwMTE3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#pullrequestreview-407050117", "createdAt": "2020-05-06T23:15:46Z", "commit": {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDUwODIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#pullrequestreview-407050821", "createdAt": "2020-05-06T23:17:40Z", "commit": {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoxNzo0MFrOGRowkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoxNzo0MFrOGRowkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0Njc2OA==", "bodyText": "nit: capitalize the GIVEN.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421146768", "createdAt": "2020-05-06T23:17:40Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -6,56 +6,139 @@\n import com.aws.iot.evergreen.util.Exec;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void Given_exec_WHEN_commands_executed_using_static_methods_THEN_success() throws InterruptedException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDUxMTA0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#pullrequestreview-407051104", "createdAt": "2020-05-06T23:18:21Z", "commit": {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcc2cb5ea37c0ce6f2e1289f59a337ef6941437d", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bcc2cb5ea37c0ce6f2e1289f59a337ef6941437d", "committedDate": "2020-05-06T23:46:45Z", "message": "Merge branch 'master' into ExecTest"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2178, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}