{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTI2MDEy", "number": 65, "title": "Use logger API in kernel", "bodyText": "Issue #, if available:\nDescription of changes:\nRefactor all log lines to use new logger APIs. Cleanup of previous logger will be done in a separate PR.\nOpen Items to be addressed later:\n\n One kernel test scans the log output to make sure the execution is successful. With this change, the test will read from log file and make assertions. Should we intercept the console output instead of reading from files?\n The integration tests are configured to fork new JVM for each test class, so that the logging config is different per JVM. How can we avoid this? Can we rewrite tests to not check log output?\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-02-20T03:12:12Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65", "merged": true, "mergeCommit": {"oid": "5d846c272633e7c05df2a825e14993565bc0e46c"}, "closed": true, "closedAt": "2020-02-26T00:29:32Z", "author": {"login": "hui-yang"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGEyYugFqTM2MTY0MDgyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH7ldaAFqTM2NDU0Nzg3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjQwODIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-361640823", "createdAt": "2020-02-20T05:27:42Z", "commit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNToyNzo0MlrOFsFUfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjowMjoxMVrOFsGXQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2ODgyOA==", "bodyText": "For testing I think this should probably be much lower than error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381768828", "createdAt": "2020-02-20T05:27:42Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -115,6 +115,20 @@\n                 <configuration>\n                     <skipTests>true</skipTests>\n                     <trimStackTrace>false</trimStackTrace>\n+                    <systemProperties>\n+                        <property>\n+                            <name>log.level</name>\n+                            <value>ERROR</value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2OTA5NQ==", "bodyText": "Shouldn't the logger here (and elsewhere) not be injected, but get a unique logger for each class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381769095", "createdAt": "2020-02-20T05:28:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/servicediscovery/ServiceDiscoveryAgent.java", "diffHunk": "@@ -36,7 +36,7 @@\n     private Configuration config;\n \n     @Inject\n-    private Log log;\n+    private Logger logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2OTU5MA==", "bodyText": "Even at trace, I don't think we want this log at all.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381769590", "createdAt": "2020-02-20T05:29:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -104,8 +107,11 @@ public synchronized void published(WhatHappened what, Topic n) {\n                 out.append(',');\n                 Coerce.toParseableString(n.getOnce(), out);\n                 out.append('\\n');\n+                n.context.getLogger().atTrace().setEventType(\"config-single-write\").addKeyValue(\"config\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2OTkzOQ==", "bodyText": "I don't think this log would be helpful. Maybe have a log just for the fire, but not for each Subscriber", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381769939", "createdAt": "2020-02-20T05:29:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -124,11 +124,16 @@ public void fire(WhatHappened what) {\n                 try {\n                     if (s instanceof Subscriber) {\n                         ((Subscriber) s).published(what, this);\n+                        context.getLogger().atDebug().setEventType(\"service-config-update\").addKeyValue(\"config\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MDEzMg==", "bodyText": "Same here, I don't think we need a log for each subscriber.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381770132", "createdAt": "2020-02-20T05:30:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -202,11 +202,14 @@ protected void childChanged(WhatHappened what, Node child) {\n                 try {\n                     if (s instanceof ChildChanged) {\n                         ((ChildChanged) s).childChanged(what, child);\n+                        context.getLogger().atDebug().setEventType(\"notify\").addKeyValue(\"src\", getFullName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MDcwNQ==", "bodyText": "Didn't get rid of the old logger?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381770705", "createdAt": "2020-02-20T05:31:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -76,16 +81,22 @@ public void run() {\n     {\n         parts.put(Context.class, new Value(Context.class, this));\n         parts.put(Log.class, new Value(Log.class, log));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MTMzNw==", "bodyText": "If we want to log here at all, it should be before the run and the event type should be runOnPublishQueue", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381771337", "createdAt": "2020-02-20T05:32:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -289,9 +303,11 @@ public Throwable runOnPublishQueueAndWait(Crashable r) {\n         runOnPublishQueue(() -> {\n             try {\n                 r.run();\n+                getLogger().atTrace().setEventType(\"function-run\").addKeyValue(\"fn\", r.toString()).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MTk3Ng==", "bodyText": "Should only log this if something is actually being injected (which isn't known until line 456.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381771976", "createdAt": "2020-02-20T05:34:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -431,6 +446,8 @@ private void doInjection(Object lvalue) {\n                 return;\n             }\n             Class cl = lvalue.getClass();\n+            getLogger().atDebug().addKeyValue(\"class\", cl.getName()).setEventType(\"service-injection-start\").log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3Mjc2Mg==", "bodyText": "instead of client name, do just log out the context since that has extra information other than just the service name.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381772762", "createdAt": "2020-02-20T05:35:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java", "diffHunk": "@@ -93,20 +93,26 @@ void handleAuth(ChannelHandlerContext ctx, FrameReader.MessageFrame message) thr\n             try {\n                 ConnectionContext context = doAuth(message.message, ctx.channel().remoteAddress());\n                 ctx.channel().attr(IPCChannelHandler.CONNECTION_CONTEXT_KEY).set(context);\n-                log.note(\"Successfully authenticated client\", context);\n+                logger.atInfo().setEventType(\"ipc-client-authenticated\").addKeyValue(\"clientName\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3MzY3MA==", "bodyText": "The callback.toString() won't be at all helpful since it is just a function, so I'm not sure it should be logged at all.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381773670", "createdAt": "2020-02-20T05:37:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -44,7 +44,8 @@\n      * @throws IPCException if the callback is already registered for a destination\n      */\n     public void registerServiceCallback(int destination, IPCCallback callback) throws IPCException {\n-        log.log(Log.Level.Note, \"registering callback for destination \", destination);\n+        logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination)\n+                .addKeyValue(\"handler\", callback.toString()).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NTQyNA==", "bodyText": "Don't use the class name, you should instead us ret.getName().", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381775424", "createdAt": "2020-02-20T05:41:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -81,69 +80,89 @@ static void setState(Object o, State state) {\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n     public static EvergreenService locate(Context context, String name) throws Throwable {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n-            Configuration c = context.get(Configuration.class);\n-            Topics t = c.lookupTopics(Configuration.splitPath(name));\n-            assert (t != null);\n-            if (t.isEmpty()) {\n+            Configuration configuration = context.get(Configuration.class);\n+            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n+            assert (topics != null);\n+            if (topics.isEmpty()) {\n                 // No definition of this service was found in the config file.\n                 // weave config fragments in from elsewhere...\n-                Kernel k = context.get(Kernel.class);\n-                for (String s : k.getServiceServerURLlist()) {\n-                    if (t.isEmpty()) {\n+                Kernel kernel = context.get(Kernel.class);\n+                for (String serverUrl : kernel.getServiceServerURLlist()) {\n+                    if (topics.isEmpty()) {\n                         try {\n                             // TODO: should probably think hard about what file extension to use\n                             // TODO: allow the file to be a zip package?\n-                            URL u = new URL(s + name + \".evg\");\n-                            k.read(u, false);\n-                            context.getLog().log(t.isEmpty() ? Log.Level.Error : Log.Level.Note, name,\n-                                    \"Found external \" + \"definition\", s);\n+                            URL configUrl = new URL(serverUrl + name + \".evg\");\n+                            kernel.read(configUrl, false);\n+                            if (!topics.isEmpty()) {\n+                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                        \"configURL\", configUrl).log(\"Found external service definition.\");\n+                            }\n                         } catch (IOException ignored) {\n                         }\n                     } else {\n                         break;\n                     }\n                 }\n-                if (t.isEmpty()) {\n-                    t.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                if (topics.isEmpty()) {\n+                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                    context.getLogger().atError().setEventType(\"service-config-not-found\").addKeyValue(\n+                            \"serviceName\", name).log();\n                 }\n+            } else {\n+                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                        \"serviceName\", name).log(\"Found service definition in configuration file.\");\n             }\n             EvergreenService ret;\n             Class clazz = null;\n-            Node n = t.getChild(\"class\");\n+            Node n = topics.getChild(\"class\");\n             if (n != null) {\n                 String cn = Coerce.toString(n);\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't find class definition\", ex);\n-                    return errNode(context, name, \"creating code-backed service from \" + cn, ex);\n+                    context.getLogger().atError().setEventType(\"service-load-error\").setCause(ex)\n+                            .addKeyValue(\"serviceName\", name).log(\"Can't load service class.\");\n+                    return errNode(context, name, \"Can't load service class from \" + cn, ex);\n                 }\n             }\n             if (clazz == null) {\n                 Map<String, Class> si = context.getIfExists(Map.class, \"service-implementors\");\n                 if (si != null) {\n+                    context.getLogger().atDebug().addKeyValue(\"serviceName\", name)\n+                            .log(\"Attempt to load service from plugins.\");\n                     clazz = si.get(name);\n                 }\n             }\n             if (clazz != null) {\n                 try {\n                     Constructor ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(t);\n+                    ret = (EvergreenService) ctor.newInstance(topics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n+                    context.getLogger().atInfo().setEventType(\"evergreen-service-loaded\").addKeyValue(\"serviceName\",\n+                            clazz.getName()).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NTg2NQ==", "bodyText": "Not serviceName, it should be \"className\" in this context because the service could have a different name than the class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381775865", "createdAt": "2020-02-20T05:42:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -81,69 +80,89 @@ static void setState(Object o, State state) {\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n     public static EvergreenService locate(Context context, String name) throws Throwable {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n-            Configuration c = context.get(Configuration.class);\n-            Topics t = c.lookupTopics(Configuration.splitPath(name));\n-            assert (t != null);\n-            if (t.isEmpty()) {\n+            Configuration configuration = context.get(Configuration.class);\n+            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n+            assert (topics != null);\n+            if (topics.isEmpty()) {\n                 // No definition of this service was found in the config file.\n                 // weave config fragments in from elsewhere...\n-                Kernel k = context.get(Kernel.class);\n-                for (String s : k.getServiceServerURLlist()) {\n-                    if (t.isEmpty()) {\n+                Kernel kernel = context.get(Kernel.class);\n+                for (String serverUrl : kernel.getServiceServerURLlist()) {\n+                    if (topics.isEmpty()) {\n                         try {\n                             // TODO: should probably think hard about what file extension to use\n                             // TODO: allow the file to be a zip package?\n-                            URL u = new URL(s + name + \".evg\");\n-                            k.read(u, false);\n-                            context.getLog().log(t.isEmpty() ? Log.Level.Error : Log.Level.Note, name,\n-                                    \"Found external \" + \"definition\", s);\n+                            URL configUrl = new URL(serverUrl + name + \".evg\");\n+                            kernel.read(configUrl, false);\n+                            if (!topics.isEmpty()) {\n+                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                        \"configURL\", configUrl).log(\"Found external service definition.\");\n+                            }\n                         } catch (IOException ignored) {\n                         }\n                     } else {\n                         break;\n                     }\n                 }\n-                if (t.isEmpty()) {\n-                    t.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                if (topics.isEmpty()) {\n+                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                    context.getLogger().atError().setEventType(\"service-config-not-found\").addKeyValue(\n+                            \"serviceName\", name).log();\n                 }\n+            } else {\n+                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                        \"serviceName\", name).log(\"Found service definition in configuration file.\");\n             }\n             EvergreenService ret;\n             Class clazz = null;\n-            Node n = t.getChild(\"class\");\n+            Node n = topics.getChild(\"class\");\n             if (n != null) {\n                 String cn = Coerce.toString(n);\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't find class definition\", ex);\n-                    return errNode(context, name, \"creating code-backed service from \" + cn, ex);\n+                    context.getLogger().atError().setEventType(\"service-load-error\").setCause(ex)\n+                            .addKeyValue(\"serviceName\", name).log(\"Can't load service class.\");\n+                    return errNode(context, name, \"Can't load service class from \" + cn, ex);\n                 }\n             }\n             if (clazz == null) {\n                 Map<String, Class> si = context.getIfExists(Map.class, \"service-implementors\");\n                 if (si != null) {\n+                    context.getLogger().atDebug().addKeyValue(\"serviceName\", name)\n+                            .log(\"Attempt to load service from plugins.\");\n                     clazz = si.get(name);\n                 }\n             }\n             if (clazz != null) {\n                 try {\n                     Constructor ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(t);\n+                    ret = (EvergreenService) ctor.newInstance(topics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n+                    context.getLogger().atInfo().setEventType(\"evergreen-service-loaded\").addKeyValue(\"serviceName\",\n+                            clazz.getName()).log();\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't create instance of \" + clazz, ex);\n-                    ret = errNode(context, name, \"creating code-backed service from \" + clazz.getSimpleName(), ex);\n+                    context.getLogger().atError().setCause(ex).setEventType(\"evergreen-service-load-error\")\n+                            .addKeyValue(\"serviceName\", clazz.getName()).log(\"Can't create instance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NjY4Ng==", "bodyText": "Not clear that at this point the topic actually is the \"serviceName\", it seems that it might be something else, since it errored out.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381776686", "createdAt": "2020-02-20T05:43:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -81,69 +80,89 @@ static void setState(Object o, State state) {\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n     public static EvergreenService locate(Context context, String name) throws Throwable {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n-            Configuration c = context.get(Configuration.class);\n-            Topics t = c.lookupTopics(Configuration.splitPath(name));\n-            assert (t != null);\n-            if (t.isEmpty()) {\n+            Configuration configuration = context.get(Configuration.class);\n+            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n+            assert (topics != null);\n+            if (topics.isEmpty()) {\n                 // No definition of this service was found in the config file.\n                 // weave config fragments in from elsewhere...\n-                Kernel k = context.get(Kernel.class);\n-                for (String s : k.getServiceServerURLlist()) {\n-                    if (t.isEmpty()) {\n+                Kernel kernel = context.get(Kernel.class);\n+                for (String serverUrl : kernel.getServiceServerURLlist()) {\n+                    if (topics.isEmpty()) {\n                         try {\n                             // TODO: should probably think hard about what file extension to use\n                             // TODO: allow the file to be a zip package?\n-                            URL u = new URL(s + name + \".evg\");\n-                            k.read(u, false);\n-                            context.getLog().log(t.isEmpty() ? Log.Level.Error : Log.Level.Note, name,\n-                                    \"Found external \" + \"definition\", s);\n+                            URL configUrl = new URL(serverUrl + name + \".evg\");\n+                            kernel.read(configUrl, false);\n+                            if (!topics.isEmpty()) {\n+                                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                                        \"configURL\", configUrl).log(\"Found external service definition.\");\n+                            }\n                         } catch (IOException ignored) {\n                         }\n                     } else {\n                         break;\n                     }\n                 }\n-                if (t.isEmpty()) {\n-                    t.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                if (topics.isEmpty()) {\n+                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n+                    context.getLogger().atError().setEventType(\"service-config-not-found\").addKeyValue(\n+                            \"serviceName\", name).log();\n                 }\n+            } else {\n+                context.getLogger().atInfo().setEventType(\"service-config-found\").addKeyValue(\n+                        \"serviceName\", name).log(\"Found service definition in configuration file.\");\n             }\n             EvergreenService ret;\n             Class clazz = null;\n-            Node n = t.getChild(\"class\");\n+            Node n = topics.getChild(\"class\");\n             if (n != null) {\n                 String cn = Coerce.toString(n);\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't find class definition\", ex);\n-                    return errNode(context, name, \"creating code-backed service from \" + cn, ex);\n+                    context.getLogger().atError().setEventType(\"service-load-error\").setCause(ex)\n+                            .addKeyValue(\"serviceName\", name).log(\"Can't load service class.\");\n+                    return errNode(context, name, \"Can't load service class from \" + cn, ex);\n                 }\n             }\n             if (clazz == null) {\n                 Map<String, Class> si = context.getIfExists(Map.class, \"service-implementors\");\n                 if (si != null) {\n+                    context.getLogger().atDebug().addKeyValue(\"serviceName\", name)\n+                            .log(\"Attempt to load service from plugins.\");\n                     clazz = si.get(name);\n                 }\n             }\n             if (clazz != null) {\n                 try {\n                     Constructor ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(t);\n+                    ret = (EvergreenService) ctor.newInstance(topics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n+                    context.getLogger().atInfo().setEventType(\"evergreen-service-loaded\").addKeyValue(\"serviceName\",\n+                            clazz.getName()).log();\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't create instance of \" + clazz, ex);\n-                    ret = errNode(context, name, \"creating code-backed service from \" + clazz.getSimpleName(), ex);\n+                    context.getLogger().atError().setCause(ex).setEventType(\"evergreen-service-load-error\")\n+                            .addKeyValue(\"serviceName\", clazz.getName()).log(\"Can't create instance\");\n+                    ret = errNode(context, name, \"Can't create code-backed service from \"\n+                            + clazz.getSimpleName(), ex);\n                 }\n-            } else if (t.isEmpty()) {\n+            } else if (topics.isEmpty()) {\n+                context.getLogger().atError().setEventType(\"service-load-error\").addKeyValue(\n+                        \"serviceName\", name).log(\"No matching definition in system model\");\n                 ret = errNode(context, name, \"No matching definition in system model\", null);\n             } else {\n                 try {\n-                    ret = new GenericExternalService(t);\n+                    ret = new GenericExternalService(topics);\n+                    context.getLogger().atInfo().setEventType(\"generic-service-loaded\").addKeyValue(\"serviceName\",\n+                            ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    context.getLog().error(\"Can't create generic instance from \" + Coerce.toString(t), ex);\n-                    ret = errNode(context, name, \"Creating generic service\", ex);\n+                    context.getLogger().atError().setCause(ex).setEventType(\"generic-service-load-error\")\n+                            .addKeyValue(\"serviceName\", Coerce.toString(topics))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3Njk5MQ==", "bodyText": "Why is this log removed? It seems helpful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381776991", "createdAt": "2020-02-20T05:44:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -152,11 +171,11 @@ public static EvergreenService locate(Context context, String name) throws Throw\n \n     public static EvergreenService errNode(Context context, String name, String message, Throwable ex) {\n         try {\n-            context.getLog().error(\"Error locating service\", name, message, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3NzI0MA==", "bodyText": "This isn't desired state in this instance, it actually is the \"newState\".", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381777240", "createdAt": "2020-02-20T05:44:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -181,7 +200,8 @@ public void setState(State newState) {\n         final State currentState = (State) this.state.getOnce();\n \n         if (newState != currentState) {\n-            context.getLog().note(getName(), currentState, \"=>\", newState);\n+            context.getLogger().atInfo().setEventType(\"service-set-state\").addKeyValue(\"serviceName\", getName())\n+                    .addKeyValue(\"currentState\", currentState).addKeyValue(\"desiredState\", newState).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODU0Nw==", "bodyText": "Why check context, why not specifically check for our logger?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381778547", "createdAt": "2020-02-20T05:47:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -361,24 +402,20 @@ private synchronized void setBackingTask(Runnable r, String db) {\n         }\n     }\n \n-    public void errored(String message, Throwable e) {\n+    public void serviceErrored(Throwable e) {\n         e = getUltimateCause(e);\n         error = e;\n-        errored(message, (Object) e);\n-    }\n-\n-    public void errored(String message, Object e) {\n         if (context == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTEwNg==", "bodyText": "not \"config\", here this should be \"declaredDependencies\" or something like that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381779106", "createdAt": "2020-02-20T05:48:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -539,21 +578,27 @@ public String getName() {\n \n     @Override\n     public void postInject() {\n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n+        Node dependencies = config.getChild(\"requires\");\n+        if (dependencies instanceof Topic) {\n+            String ds = ((Topic) dependencies).getOnce().toString();\n             Matcher m = DEP_PARSE.matcher(ds);\n             while (m.find()) {\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n+                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTMzMQ==", "bodyText": "now that we have the logger, I don't see why we'd need this system out.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381779331", "createdAt": "2020-02-20T05:49:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -539,21 +578,27 @@ public String getName() {\n \n     @Override\n     public void postInject() {\n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n+        Node dependencies = config.getChild(\"requires\");\n+        if (dependencies instanceof Topic) {\n+            String ds = ((Topic) dependencies).getOnce().toString();\n             Matcher m = DEP_PARSE.matcher(ds);\n             while (m.find()) {\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n+                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                serviceErrored();\n             }\n-        } else if (d == null) {\n+        } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\", getName(), d.toString());\n+            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n+                    getName(), dependencies.toString());\n             System.err.println(errMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTQ5MA==", "bodyText": "Same here, the \"config\" should have a better name.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381779490", "createdAt": "2020-02-20T05:49:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -539,21 +578,27 @@ public String getName() {\n \n     @Override\n     public void postInject() {\n-        Node d = config.getChild(\"requires\");\n-        if (d instanceof Topic) {\n-            String ds = ((Topic) d).getOnce().toString();\n+        Node dependencies = config.getChild(\"requires\");\n+        if (dependencies instanceof Topic) {\n+            String ds = ((Topic) dependencies).getOnce().toString();\n             Matcher m = DEP_PARSE.matcher(ds);\n             while (m.find()) {\n                 addDependency(m.group(1), m.group(3));\n             }\n             if (!m.hitEnd()) {\n-                errored(\"bad dependency syntax\", ds);\n+                context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", ds).log(\"Bad dependency syntax\");\n+                serviceErrored();\n             }\n-        } else if (d == null) {\n+        } else if (dependencies == null) {\n             return;\n         } else {\n-            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\", getName(), d.toString());\n+            String errMsg = String.format(\"Unrecognized dependency configuration for service %s, config content: %s\",\n+                    getName(), dependencies.toString());\n             System.err.println(errMsg);\n+            context.getLogger().atError().setEventType(\"service-invalid-config\").addKeyValue(\"serviceName\",\n+                    getName()).addKeyValue(\"config\", dependencies.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MDM1MA==", "bodyText": "Instead of \"config\" maybe \"changedNode\" or something like that. Also this should be dropped to INFO I think.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381780350", "createdAt": "2020-02-20T05:51:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -38,7 +38,8 @@ public GenericExternalService(Topics c) {\n         super(c);\n         c.subscribe((what, child) -> {\n             if (c.parentNeedsToKnow() && !child.childOf(\"shutdown\")) {\n-                context.getLog().warn(getName(), \"responding to change to\", child);\n+                context.getLogger().atWarn().setEventType(\"service-config-change\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", child.getFullName()).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MTUzNA==", "bodyText": "It is quite possible that the script could be very large, so I'd be careful about including it in our logs. The old logger, for example, had a max length I believe.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381781534", "createdAt": "2020-02-20T05:53:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -80,11 +81,13 @@ public void shutdown() {\n         Exec e = currentScript;\n         if (e != null && e.isRunning()) {\n             try {\n-                context.getLog().significant(getName(), \"shutting down\", e);\n+                context.getLogger().atInfo().setEventType(\"generic-service-shutdown\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"script\", e.toString()).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjA2OA==", "bodyText": "If you actually want the exit code, then just use exit. exit2String will give you some different stuff which isn't the actual exit code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381782068", "createdAt": "2020-02-20T05:54:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -97,14 +100,17 @@ public void run() {\n             if (!inShutdown) {\n                 if (exit == 0) {\n                     setState(State.Finished);\n-                    context.getLog().significant(getName(), \"Finished\");\n+                    context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n+                            getName()).log(\"Service finished running.\");\n                 } else {\n                     setState(State.Errored);\n-                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                    context.getLogger().atError().setEventType(\"generic-service-errored\").addKeyValue(\"serviceName\",\n+                            getName()).addKeyValue(\"exitCode\", exit2String(exit)).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjQwMQ==", "bodyText": "Maybe this should be a DEBUG, since it is totally fine for a service to not have a run block.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381782401", "createdAt": "2020-02-20T05:55:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -97,14 +100,17 @@ public void run() {\n             if (!inShutdown) {\n                 if (exit == 0) {\n                     setState(State.Finished);\n-                    context.getLog().significant(getName(), \"Finished\");\n+                    context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",\n+                            getName()).log(\"Service finished running.\");\n                 } else {\n                     setState(State.Errored);\n-                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                    context.getLogger().atError().setEventType(\"generic-service-errored\").addKeyValue(\"serviceName\",\n+                            getName()).addKeyValue(\"exitCode\", exit2String(exit)).log();\n                 }\n             }\n         }) == RunStatus.NothingDone) {\n-            context.getLog().significant(getName(), \"run: NothingDone\");\n+            context.getLogger().atInfo().setEventType(\"generic-service-finished\").addKeyValue(\"serviceName\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4Mjk0Ng==", "bodyText": "Don't call it a \"run script\" since this method is used to call all the various scripts.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381782946", "createdAt": "2020-02-20T05:56:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -159,11 +166,14 @@ protected RunStatus run(Topics t, IntConsumer background) {\n             if (script instanceof Topic) {\n                 return run((Topic) script, background, t);\n             } else {\n-                errored(\"Missing script: for \", t.getFullName());\n+                context.getLogger().atError().setEventType(\"generic-service-invalid-config\").addKeyValue(\"serviceName\",\n+                        getName()).addKeyValue(\"config\", t.getFullName()).log(\"Missing run script\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MzI2Nw==", "bodyText": "If we're erroring out the service, then this needs to be at ERROR level.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381783267", "createdAt": "2020-02-20T05:56:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -189,7 +199,10 @@ boolean shouldSkip(Topics n) {\n                     case \"true\":\n                         return !neg;\n                     default:\n-                        errored(\"Unknown operator\", m.group(1));\n+                        context.getLogger().atDebug().setEventType(\"generic-service-invalid-config\").addKeyValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4NDY0MA==", "bodyText": "Might as well put in the onBehalfOf also and the same for the rest of the logs in this method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381784640", "createdAt": "2020-02-20T05:59:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java", "diffHunk": "@@ -26,15 +26,15 @@\n \n     class Default implements ShellRunner {\n         @Inject\n-        Log log;\n+        Logger logger;\n         @Inject\n         Kernel config;\n \n         @Override\n         public synchronized Exec setup(String note, String command, EvergreenService onBehalfOf) {\n             if (!isEmpty(command) && onBehalfOf != null) {\n-                if (!isEmpty(note) && log != null /* !!?!! */) {\n-                    log.significant(\"run\", note);\n+                if (!isEmpty(note) && logger != null /* !!?!! */) {\n+                    logger.atInfo().setEventType(\"shell-runner-start\").addKeyValue(\"name\", note).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4NTkyMA==", "bodyText": "Why do we need this log? I'm not sure it is helping anything.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r381785920", "createdAt": "2020-02-20T06:02:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -102,18 +107,21 @@ public void run() {\n             }\n             if (maxt > now) {\n                 try {\n-                    log.note(getName(), \"Holding for\", maxt - now, \"millis\");\n+                    logger.atDebug().setEventType(\"service-update-pending\").addKeyValue(\"waitInMS\",\n+                            maxt - now).addKeyValue(\"serviceName\", getName()).log();\n                     Thread.sleep(maxt - now);\n                 } catch (InterruptedException ignored) {\n                 }\n             } else {\n-                log.note(getName(), \"Queueing update actions\");\n+                logger.atDebug().setEventType(\"service-update-scheduled\").addKeyValue(\"serviceName\", getName()).log();\n                 context.runOnPublishQueueAndWait(() -> {\n-                    log.note(getName(), \"Starting safe-time update\");\n+                    logger.atInfo().setEventType(\"service-update-start\").addKeyValue(\"serviceName\", getName()).log();\n                     runUpdateActions();\n-                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                    logger.atInfo().setEventType(\"service-update-finish\").addKeyValue(\"serviceName\", getName()).log();\n                 });\n-                log.note(getName(), \"Back on run Q safe-time update\");\n+\n+                logger.atInfo().setEventType(\"check-available-service-update\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3fb866e3fd8661580ffa4bf2ec05553401135789", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3fb866e3fd8661580ffa4bf2ec05553401135789", "committedDate": "2020-02-20T03:11:29Z", "message": "Use logger API in kernel"}, "afterCommit": {"oid": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "committedDate": "2020-02-24T22:23:49Z", "message": "Use logger API in kernel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5906d896b0cd4f6aefa321b46cf8f26a83c4ec0a", "committedDate": "2020-02-24T22:23:49Z", "message": "Use logger API in kernel"}, "afterCommit": {"oid": "5e09ce8673393fd79b069247fe01be860fac32eb", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e09ce8673393fd79b069247fe01be860fac32eb", "committedDate": "2020-02-24T23:06:24Z", "message": "Use logger API in kernel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e09ce8673393fd79b069247fe01be860fac32eb", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e09ce8673393fd79b069247fe01be860fac32eb", "committedDate": "2020-02-24T23:06:24Z", "message": "Use logger API in kernel"}, "afterCommit": {"oid": "b9b117c84578336fdc84230b07015327d5bfce3c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9b117c84578336fdc84230b07015327d5bfce3c", "committedDate": "2020-02-24T23:38:53Z", "message": "Use logger API in kernel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzcwMDAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-363770003", "createdAt": "2020-02-24T23:16:52Z", "commit": {"oid": "5e09ce8673393fd79b069247fe01be860fac32eb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoxNjo1MlrOFtzWbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoxOToyMVrOFtzZ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MTU2Nw==", "bodyText": "Why is this important? Sounds like it will slow us down.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383571567", "createdAt": "2020-02-24T23:16:52Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -144,6 +158,7 @@\n                             <skipTests>false</skipTests>\n                             <excludedGroups>*</excludedGroups>\n                             <groups>Integration</groups>\n+                            <reuseForks>false</reuseForks> <!-- This will make sure to spawn a fresh jvm for each test -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e09ce8673393fd79b069247fe01be860fac32eb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjQ3MA==", "bodyText": "Is our logger even closable? Does this make sense?\nThe only logger which is closed is the one directly used by the Context.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383572470", "createdAt": "2020-02-24T23:19:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -206,14 +202,17 @@ public void shutdown() {\n         forEach(v -> {\n             Object vv = v.value;\n             try {\n-                if (vv instanceof Closeable && vv != log) {\n+                if (vv instanceof Closeable && vv != logger) {\n                     ((Closeable) vv).close();\n+                    logger.atDebug().setEventType(\"context-shutdown\").addKeyValue(\"class\",\n+                            Coerce.toString(vv)).log();\n                 }\n             } catch (Throwable t) {\n-                log.error(\"Failed to shutdown\", Coerce.toString(vv), t);\n+                logger.atError().setEventType(\"context-shutdown-error\").setCause(t).addKeyValue(\"class\",\n+                        Coerce.toString(vv)).log();\n             }\n         });\n-        Utils.close(log);\n+        Utils.close(logger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e09ce8673393fd79b069247fe01be860fac32eb"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9b117c84578336fdc84230b07015327d5bfce3c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9b117c84578336fdc84230b07015327d5bfce3c", "committedDate": "2020-02-24T23:38:53Z", "message": "Use logger API in kernel"}, "afterCommit": {"oid": "90c0e4017da86ee4548ecc10b854da6db98ded03", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/90c0e4017da86ee4548ecc10b854da6db98ded03", "committedDate": "2020-02-25T00:40:56Z", "message": "Use logger API in kernel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODEzMjE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-363813218", "createdAt": "2020-02-25T01:17:48Z", "commit": {"oid": "90c0e4017da86ee4548ecc10b854da6db98ded03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToxNzo0OFrOFt1m4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMToxNzo0OFrOFt1m4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODU0NQ==", "bodyText": "This will be too generic, let's have 1 logger per service, so get a logger for the service name: getName().", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r383608545", "createdAt": "2020-02-25T01:17:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -72,6 +72,8 @@\n     private static final Set<State> validReportState = new HashSet<>(Arrays.asList(\n             State.Running, State.Errored, State.Finished));\n \n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c0e4017da86ee4548ecc10b854da6db98ded03"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90c0e4017da86ee4548ecc10b854da6db98ded03", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/90c0e4017da86ee4548ecc10b854da6db98ded03", "committedDate": "2020-02-25T00:40:56Z", "message": "Use logger API in kernel"}, "afterCommit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35a5f97434d6195d3ed45e36e79515a60033284e", "committedDate": "2020-02-25T20:56:22Z", "message": "Use logger API in kernel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTI0NTI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-364524525", "createdAt": "2020-02-25T23:26:33Z", "commit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoyNjozM1rOFuZC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoyNjozM1rOFuZC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4OTE0MQ==", "bodyText": "IMO this should be final", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r384189141", "createdAt": "2020-02-25T23:26:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -73,10 +74,23 @@\n     private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n             State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTI1OTA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-364525906", "createdAt": "2020-02-25T23:30:02Z", "commit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozMDowMlrOFuZHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozMDowMlrOFuZHSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MDI4Mg==", "bodyText": "This isn not the name. use getName()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r384190282", "createdAt": "2020-02-25T23:30:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -73,10 +74,23 @@\n     private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n             State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;\n+\n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n+        this.logger = LogManager.getLogger(getClass());\n+\n+        String name = topics.getFullName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTI2MjQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-364526249", "createdAt": "2020-02-25T23:30:51Z", "commit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozMDo1MVrOFuZIkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozMDo1MVrOFuZIkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MDYxMA==", "bodyText": "This won't help since the class will always be GenericExternalService. You still have an overload that just takes a string, right? Use that and pass it getName().", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#discussion_r384190610", "createdAt": "2020-02-25T23:30:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -73,10 +74,23 @@\n     private static final Set<State> ALLOWED_STATES_FOR_REPORTING = new HashSet<>(Arrays.asList(\n             State.RUNNING, State.ERRORED, State.FINISHED));\n \n+    // Static logger instance for static methods\n+    private static final Logger staticLogger = LogManager.getLogger(EvergreenService.class);\n+    // Service logger instance\n+    protected Logger logger;\n+\n     @SuppressWarnings(\"LeakingThisInConstructor\")\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.state = initStateTopic(topics);\n+        this.logger = LogManager.getLogger(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13468126c93723b1aae24cfa47e81d74283733ef", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/13468126c93723b1aae24cfa47e81d74283733ef", "committedDate": "2020-02-26T00:04:52Z", "message": "Use logger API in kernel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35a5f97434d6195d3ed45e36e79515a60033284e", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35a5f97434d6195d3ed45e36e79515a60033284e", "committedDate": "2020-02-25T20:56:22Z", "message": "Use logger API in kernel"}, "afterCommit": {"oid": "13468126c93723b1aae24cfa47e81d74283733ef", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/13468126c93723b1aae24cfa47e81d74283733ef", "committedDate": "2020-02-26T00:04:52Z", "message": "Use logger API in kernel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTQyNTQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-364542545", "createdAt": "2020-02-26T00:13:50Z", "commit": {"oid": "13468126c93723b1aae24cfa47e81d74283733ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTQ3ODcz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/65#pullrequestreview-364547873", "createdAt": "2020-02-26T00:28:52Z", "commit": {"oid": "13468126c93723b1aae24cfa47e81d74283733ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2497, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}