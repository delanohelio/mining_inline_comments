{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTY5MjI1", "number": 300, "title": "Download artifacts from S3", "bodyText": "Issue #, if available:\nhttps://issues.amazon.com/P37421587\nDescription of changes:\n\nCustomer's private component artifacts will be stored in their own account's bucket so the device needs to download them from the bucket specified in the recipe\nDevice should use TES to get access to their bucket\nDevice should perform integrity check for the artifact content based on the checksum and algorithm specified in the recipe and fail deployment if the check fails.\n\nIn order to get this to work, there were certain changes made -\n\nRecent change for using x509CredentialsProvider for TES is known to fail and there's an open ticket with the SDK team to root cause. Meanwhile in order for TES to work the specific commit had to be reverted, which is originally part of this PR https://github.com/aws/aws-greengrass-kernel/pull/298/files . While that PR is open, I reverted it in the current PR and will rebase later.\nUPDATE - The revert PR has been merged to master and this PR has been rebased with it\nThe change was tested by temporarily creating a local recipe with the new artifacts model changes in an E2E test, once the cloud service supports S3 artifacts as described here https://quip-amazon.com/aEySAUNmRBZV/Customer-Artifacts-Storage-S3-WIP we will need to switch to using the cloud service for E2E\n\nWhy is this change necessary:\nHow was this change tested:\nmvn -U -ntp clean verify\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-09T16:31:31Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300", "merged": true, "mergeCommit": {"oid": "2a716da8217b0173c657944f9e2a0e6bd5932f68"}, "closed": true, "closedAt": "2020-08-01T00:15:52Z", "author": {"login": "shaguptashaikh"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczTn5wABqjM1MzEwMDc4NDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6c_sSAFqTQ1OTUyNDk1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fef8ba33ef81c3269dfa79d535502fa0bfb6ef35", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fef8ba33ef81c3269dfa79d535502fa0bfb6ef35", "committedDate": "2020-07-09T15:59:49Z", "message": "Download component artifacts from S3 buckets in customer account"}, "afterCommit": {"oid": "fe6cdcdc33d08434d9770a8624d30ec4c4303772", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe6cdcdc33d08434d9770a8624d30ec4c4303772", "committedDate": "2020-07-09T18:47:46Z", "message": "Download component artifacts from S3 buckets in customer account"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDI0MjY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-446024266", "createdAt": "2020-07-09T23:03:43Z", "commit": {"oid": "fe6cdcdc33d08434d9770a8624d30ec4c4303772"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowMzo0M1rOGvkmrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNToxNVrOGvkohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNTk4Mg==", "bodyText": "I'd prefer roleAlias is retrieved in CredentialRequestHandler constructor", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r452535982", "createdAt": "2020-07-09T23:03:43Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.tes.IotCloudHelper;\n+import com.aws.iot.evergreen.tes.IotConnectionManager;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final CredentialRequestHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     * @param iotCloudHelper iotCloudHelper\n+     * @param iotConnectionManager iotConnectionManager\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel, IotCloudHelper iotCloudHelper,\n+                        IotConnectionManager iotConnectionManager) {\n+        this.s3Client = clientFactory.getS3Client();\n+        // TODO : Move IOT_ROLE_ALIAS to DeviceConfiguration and get this info from there\n+        String iotRoleAlias = (String) kernel.getConfig()\n+                .lookup(EvergreenService.SERVICES_NAMESPACE_TOPIC, TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS,\n+                        TokenExchangeService.IOT_ROLE_ALIAS_TOPIC).getOnce();\n+        this.credentialRequestHandler =\n+                new CredentialRequestHandler(iotRoleAlias, iotCloudHelper, iotConnectionManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6cdcdc33d08434d9770a8624d30ec4c4303772"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjQ1NQ==", "bodyText": "Is this defined by S3 or evergreen?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r452536455", "createdAt": "2020-07-09T23:05:15Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.tes.IotCloudHelper;\n+import com.aws.iot.evergreen.tes.IotConnectionManager;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final CredentialRequestHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     * @param iotCloudHelper iotCloudHelper\n+     * @param iotConnectionManager iotConnectionManager\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel, IotCloudHelper iotCloudHelper,\n+                        IotConnectionManager iotConnectionManager) {\n+        this.s3Client = clientFactory.getS3Client();\n+        // TODO : Move IOT_ROLE_ALIAS to DeviceConfiguration and get this info from there\n+        String iotRoleAlias = (String) kernel.getConfig()\n+                .lookup(EvergreenService.SERVICES_NAMESPACE_TOPIC, TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS,\n+                        TokenExchangeService.IOT_ROLE_ALIAS_TOPIC).getOnce();\n+        this.credentialRequestHandler =\n+                new CredentialRequestHandler(iotRoleAlias, iotCloudHelper, iotConnectionManager);\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactURI()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactURI().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactURI(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {\n+            // Get artifact from S3\n+            GetObjectRequest getObjectRequest = GetObjectRequest.builder().overrideConfiguration(\n+                    AwsRequestOverrideConfiguration.builder()\n+                            .credentialsProvider(credentialRequestHandler.getAwsCredentialsProvider()).build())\n+                    .bucket(bucket).key(key).build();\n+            byte[] response = s3Client.getObjectAsBytes(getObjectRequest).asByteArray();\n+\n+            // Perform integrity check\n+            // Recipe has Base64 encoded checksum and the hashing algorithm used\n+            // in the format -> <algorithm>checksum<checksum>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6cdcdc33d08434d9770a8624d30ec4c4303772"}, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dac946dcb6a58f05bbbc5c00300911fef3c91a27", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dac946dcb6a58f05bbbc5c00300911fef3c91a27", "committedDate": "2020-07-10T16:59:03Z", "message": "Fix and add tests"}, "afterCommit": {"oid": "f1167bf51e06b522f7b201c54cfdc75a451a45ba", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f1167bf51e06b522f7b201c54cfdc75a451a45ba", "committedDate": "2020-07-10T17:01:27Z", "message": "Fix and add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1167bf51e06b522f7b201c54cfdc75a451a45ba", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f1167bf51e06b522f7b201c54cfdc75a451a45ba", "committedDate": "2020-07-10T17:01:27Z", "message": "Fix and add tests"}, "afterCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "committedDate": "2020-07-10T18:39:32Z", "message": "Fix and add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzgzNjYy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-447383662", "createdAt": "2020-07-13T15:55:49Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1NTo0OVrOGwu_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1NTo0OVrOGwu_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NDY3Mw==", "bodyText": "It's not just checksum, should we add extra field to include algorithm?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453754673", "createdAt": "2020-07-13T15:55:49Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {\n+    private URI artifactUri;\n+    private String checksum;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Mzg1NTAw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-447385500", "createdAt": "2020-07-13T15:57:55Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1Nzo1NVrOGwvE6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1Nzo1NVrOGwvE6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NjEzNw==", "bodyText": "For the greengrass component, we need to add similar integrity check. This constructor might not be necessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453756137", "createdAt": "2020-07-13T15:57:55Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {\n+    private URI artifactUri;\n+    private String checksum;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param artifactUri artifactUri\n+     * @param checksum checksum\n+     */\n+    @JsonCreator\n+    public ComponentArtifact(@JsonProperty(\"uri\") URI artifactUri,\n+                             @JsonProperty(\"checksum\") String checksum) {\n+        this.artifactUri = artifactUri;\n+        this.checksum = checksum;\n+    }\n+\n+    /**\n+     * Constructor for component artifacts where checksum is not needed.\n+     *\n+     * @param artifactUri artifactURI\n+     */\n+    public ComponentArtifact(URI artifactUri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Mzg4MjMz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-447388233", "createdAt": "2020-07-13T16:01:07Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowMTowN1rOGwvNFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowMTowN1rOGwvNFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1ODIyOQ==", "bodyText": "Do we have URI validation error defined? If not, should we have one? It's kind of client exception. Probably should distinguished from internal error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453758229", "createdAt": "2020-07-13T16:01:07Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzkwNjc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-447390677", "createdAt": "2020-07-13T16:04:03Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowNDowM1rOGwvUcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowNDowM1rOGwvUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MDExNA==", "bodyText": "Recommend to break the function to subroutines (for example, retrieve credential, get object, validate integrity), handle specific exception for each subroutines.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453760114", "createdAt": "2020-07-13T16:04:03Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Mzk0MDc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-447394078", "createdAt": "2020-07-13T16:08:13Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowODoxNFrOGwvezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowODoxNFrOGwvezw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Mjc2Nw==", "bodyText": "Why is a JsonNode instead of a modeled type?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r453762767", "createdAt": "2020-07-13T16:08:14Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -95,4 +129,14 @@ public void handle(final HttpExchange exchange) throws IOException {\n             throw new AWSIotException(e);\n         }\n     }\n+\n+    private JsonNode deserializeCredentials(final String credentials) throws AWSIotException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Mzk1NTE3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-447395517", "createdAt": "2020-07-13T16:10:02Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzA5OTY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-448309968", "createdAt": "2020-07-14T17:20:50Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMDo1MFrOGxdjAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozNjoyMVrOGxeJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNzUwNw==", "bodyText": "Curious, are we following 'camelCase' or 'CamelCase' naming convention for json field?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454517507", "createdAt": "2020-07-14T17:20:50Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {\n+    private URI artifactUri;\n+    private String checksum;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param artifactUri artifactUri\n+     * @param checksum checksum\n+     */\n+    @JsonCreator\n+    public ComponentArtifact(@JsonProperty(\"uri\") URI artifactUri,\n+                             @JsonProperty(\"checksum\") String checksum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNjM0MA==", "bodyText": "does saveToPath have separate directory for each package? Or all package's artifact is saved under same dir?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454526340", "createdAt": "2020-07-14T17:34:58Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {\n+            // Get artifact from S3\n+            CredentialRequestHandler credentialRequestHandler = kernel.getContext().get(CredentialRequestHandler.class);\n+            GetObjectRequest getObjectRequest = GetObjectRequest.builder().overrideConfiguration(\n+                    AwsRequestOverrideConfiguration.builder()\n+                            .credentialsProvider(credentialRequestHandler.getAwsCredentialsProvider()).build())\n+                    .bucket(bucket).key(key).build();\n+            byte[] response = s3Client.getObjectAsBytes(getObjectRequest).asByteArray();\n+\n+            // Perform integrity check\n+            // Recipe has Base64 encoded checksum and the hashing algorithm used\n+            // in the format -> <algorithm>checksum<checksum>\n+            String decoded =\n+                    new String(Base64.getDecoder().decode(artifact.getChecksum().getBytes(StandardCharsets.UTF_8)),\n+                            StandardCharsets.UTF_8);\n+            String[] checksumWithAlgorithm = decoded.split(\"checksum\");\n+            String algorithm = checksumWithAlgorithm[0];\n+            String checksum = checksumWithAlgorithm[1];\n+            String digest = new String(MessageDigest.getInstance(algorithm).digest(response), StandardCharsets.UTF_8);\n+            if (!digest.equals(checksum)) {\n+                // Handle failure in integrity check\n+                throw new PackageDownloadException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                                packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log(\"Passed integrity check\");\n+\n+            // Save file to store\n+            Files.write(saveToPath.resolve(extractFileName(key)), response, StandardOpenOption.CREATE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNjg2Mw==", "bodyText": "Are you returning credentialProvider even with AWSIotException?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454526863", "createdAt": "2020-07-14T17:35:47Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -80,10 +90,34 @@ public void handle(final HttpExchange exchange) throws IOException {\n         return response;\n     }\n \n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     *\n+     * @return Credential provider compatible with the AWS SDK for credentials recieved from cloud.\n+     */\n+    public AwsCredentialsProvider getAwsCredentialsProvider() {\n+        StaticCredentialsProvider awsCredentialsProvider = null;\n+\n+        LOGGER.debug(\"Got request for credentials\");\n+        // TODO: Add cache\n+        try {\n+            final JsonNode credentials = deserializeCredentials(iotCloudHelper\n+                    .sendHttpRequest(iotConnectionManager, iotCredentialsPath, IOT_CREDENTIALS_HTTP_VERB));\n+            awsCredentialsProvider = StaticCredentialsProvider.create(AwsSessionCredentials\n+                    .create(credentials.get(ACCESS_KEY_UPSTREAM_STR).asText(),\n+                            credentials.get(SECRET_ACCESS_UPSTREAM_STR).asText(),\n+                            credentials.get(SESSION_TOKEN_UPSTREAM_STR).asText()));\n+        } catch (AWSIotException e) {\n+            // TODO: Generate 4xx, 5xx responses for all error scnearios\n+            LOGGER.error(\"Encountered error while fetching credentials\", e);\n+        }\n+        return awsCredentialsProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNzI2NA==", "bodyText": "NIT: don't log and throw the exception at the same time", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454527264", "createdAt": "2020-07-14T17:36:21Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -95,4 +129,14 @@ public void handle(final HttpExchange exchange) throws IOException {\n             throw new AWSIotException(e);\n         }\n     }\n+\n+    private JsonNode deserializeCredentials(final String credentials) throws AWSIotException {\n+        try {\n+            // TODO: Validate if lowercase lookup can make this simpler\n+            return OBJECT_MAPPER.readTree(credentials).get(CREDENTIALS_UPSTREAM_STR);\n+        } catch (JsonProcessingException e) {\n+            LOGGER.error(\"Received malformed credential input\", e);\n+            throw new AWSIotException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzI0Nzg5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-448324789", "createdAt": "2020-07-14T17:40:34Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0MDozNFrOGxeT5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0MDozNFrOGxeT5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMDAyMg==", "bodyText": "NIT: make \"eg-e2e-tests-component-artifacts-test\" a variable", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454530022", "createdAt": "2020-07-14T17:40:34Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -127,4 +143,89 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+\n+        try {\n+            s3Client.createBucket(\n+                    CreateBucketRequest.builder().bucket(\"eg-e2e-tests-component-artifacts-test\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzI4OTU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-448328954", "createdAt": "2020-07-14T17:46:12Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NjoxMlrOGxehSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NjoxMlrOGxehSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMzQ0OA==", "bodyText": "Can this be in aftereach?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r454533448", "createdAt": "2020-07-14T17:46:12Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM =\n+            \"U0hBLTI1NmNoZWNrc3VtOxzvv73vv701ECM4MO+/vWBpJO+/vWXvv70sYu+/vQA8Au+/vSXvv70zR++/vWDvv70S77+9\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = new String(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)),\n+                StandardCharsets.UTF_8);\n+        String checksumWithAlgorithm = \"SHA-256checksum\" + checksum;\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), encoded), saveToPath);\n+        byte[] downloadedFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(\"Content of downloaded file should be same as the artifact content\",\n+                Arrays.equals(Files.readAllBytes(artifactFilePath), downloadedFile));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_uri_THEN_fail() throws Exception {\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(INVALID_ARTIFACT_URI), \"somechecksum\"), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_checksum_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksumWithAlgorithm = \"SHA-256checksumRandomString\";\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), encoded), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_algorithm_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = new String(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)),\n+                StandardCharsets.UTF_8);\n+        String checksumWithAlgorithm = \"RandomAlgorithmchecksum\" + checksum;\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), encoded), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_error_in_getting_from_s3_THEN_fail() throws Exception {\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(CredentialRequestHandler.class)).thenReturn(mock(CredentialRequestHandler.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenThrow(S3Exception.class);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), VALID_ARTIFACT_CHECKSUM), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        mockContext.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTcyMjQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-449572245", "createdAt": "2020-07-16T07:24:56Z", "commit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzoyNDo1NlrOGyddUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozNDowNlrOGydw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NDYyNw==", "bodyText": "let's make sure these are always random, otherwise we will run into concurrent run issues. A random suffix would be fine", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455564627", "createdAt": "2020-07-16T07:24:56Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -58,9 +71,15 @@\n     protected static final String CMS_BETA_ENDPOINT = \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta\";\n     protected static final Region BETA_REGION = Region.US_EAST_1;\n     protected static final String THING_GROUP_TARGET_TYPE = \"thinggroup\";\n+    private static final String TES_ROLE_NAME = \"E2ETestsTesRole\";\n+    protected static final String TES_ROLE_ALIAS_NAME = \"E2ETestsTesRoleAlias\";\n+    private static final String TES_ROLE_POLICY_NAME = \"E2ETestsTesRolePolicy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NTAxNg==", "bodyText": "Zhaoyan has similar code added, probably should use her's", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455565016", "createdAt": "2020-07-16T07:25:37Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -227,12 +252,39 @@ protected void cleanup() {\n         createdIotJobIds.clear();\n     }\n \n+    protected void setupTesRoleAndAlias() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NTk2Nw==", "bodyText": "we'll probably want this kind of thing in a utility", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455565967", "createdAt": "2020-07-16T07:27:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -127,4 +143,89 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+\n+        try {\n+            s3Client.createBucket(\n+                    CreateBucketRequest.builder().bucket(\"eg-e2e-tests-component-artifacts-test\").build());\n+        } catch (BucketAlreadyExistsException | BucketAlreadyOwnedByYouException e) {\n+            // No-op if bucket exists\n+        }\n+        s3Client.putObject(PutObjectRequest.builder().bucket(\"eg-e2e-tests-component-artifacts-test\")\n+                        .key(\"AppWithS3Artifacts/artifact\" + \".txt\").build(),\n+                RequestBody.fromBytes(Files.readAllBytes(artifactFilePath)));\n+\n+        // Calculate checksum\n+        String checksum = new String(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)),\n+                StandardCharsets.UTF_8);\n+        String checksumWithAlgorithm = \"SHA-256checksum\" + checksum;\n+        String encoded = Base64.getEncoder().encodeToString(checksumWithAlgorithm.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NjI2MA==", "bodyText": "this is not cross platform. Use @TempDir to get a temp dir and then create the file in itt", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455566260", "createdAt": "2020-07-16T07:27:58Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -127,4 +143,89 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODAxNA==", "bodyText": "why not just have TES implement this interface?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455568014", "createdAt": "2020-07-16T07:30:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -80,10 +90,34 @@ public void handle(final HttpExchange exchange) throws IOException {\n         return response;\n     }\n \n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     *\n+     * @return Credential provider compatible with the AWS SDK for credentials recieved from cloud.\n+     */\n+    public AwsCredentialsProvider getAwsCredentialsProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2ODk1OQ==", "bodyText": "Injecting the kernel to get the context to get TES doesn't seem right at all. Why not just inject TES in the constructor?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455568959", "createdAt": "2020-07-16T07:32:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.CredentialRequestHandler;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifact.getArtifactUri().toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Invalid artifact URI\"));\n+        }\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        try {\n+            // Get artifact from S3\n+            CredentialRequestHandler credentialRequestHandler = kernel.getContext().get(CredentialRequestHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2OTY2Mg==", "bodyText": "I don't like how this flips responsibility. Why not just use TES (even if it isn't running as a service), to get the credentials. Let TES call the functions in this class and provide the credentials through the AwsCredentialsProvider  interface,", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r455569662", "createdAt": "2020-07-16T07:34:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -37,16 +43,20 @@\n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n+    private final String iotRoleAlias;\n \n     /**\n      * Constructor.\n-     * @param iotRoleAlias Iot role alias configured by the customer in AWS account.\n      * @param cloudHelper {@link IotCloudHelper} for making http requests to cloud.\n      * @param connectionManager {@link IotConnectionManager} underlying connection manager for cloud.\n+     * @param kernel kernel instance\n      */\n-    public CredentialRequestHandler(final String iotRoleAlias,\n-                                    final IotCloudHelper cloudHelper,\n-                                    final IotConnectionManager connectionManager) {\n+    @Inject\n+    public CredentialRequestHandler(final IotCloudHelper cloudHelper,\n+                                    final IotConnectionManager connectionManager, final Kernel kernel) {\n+        Topics tokenExchangeServiceTopics = kernel.findServiceTopic(TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        iotRoleAlias = (String) tokenExchangeServiceTopics.lookup(TokenExchangeService.IOT_ROLE_ALIAS_TOPIC).getOnce();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d938a8f683c8fc9b8b16d6d5e1cea0951000100e", "committedDate": "2020-07-10T18:39:32Z", "message": "Fix and add tests"}, "afterCommit": {"oid": "0577d37727b265be33fca6f6425d5268e5ee50f4", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0577d37727b265be33fca6f6425d5268e5ee50f4", "committedDate": "2020-07-20T16:24:08Z", "message": "Rebase and address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0577d37727b265be33fca6f6425d5268e5ee50f4", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0577d37727b265be33fca6f6425d5268e5ee50f4", "committedDate": "2020-07-20T16:24:08Z", "message": "Rebase and address comments"}, "afterCommit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f27bfdae51edb02a000fca815c4b5453a79d57d5", "committedDate": "2020-07-20T16:31:19Z", "message": "Rebase and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzgyMzk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-451782398", "createdAt": "2020-07-20T16:46:09Z", "commit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0NjowOVrOG0WqeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0Njo1MFrOG0WsDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDQ1Nw==", "bodyText": "what about when the role alias changes? Should this go inside the subscribe call?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457550457", "createdAt": "2020-07-20T16:46:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -54,7 +54,9 @@ public TokenExchangeService(Topics topics,\n                 .subscribe((why, newv) ->\n                         iotRoleAlias = Coerce.toString(newv));\n \n-        this.iotConnectionManager = iotConnectionManager;\n+        validateConfig();\n+        this.credentialRequestHandler = new CredentialRequestHandler(iotRoleAlias, new IotCloudHelper(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDg2MQ==", "bodyText": "you could have TES implement the interface, then you can just pass TES into the AWS client and it will simply work.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457550861", "createdAt": "2020-07-20T16:46:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -102,4 +101,8 @@ private void validateConfig() {\n             throw new IllegalArgumentException(String.format(TES_CONFIG_ERROR_STR, IOT_ROLE_ALIAS_TOPIC));\n         }\n     }\n+\n+    public AwsCredentialsProvider getAwsCredentialsProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f27bfdae51edb02a000fca815c4b5453a79d57d5", "committedDate": "2020-07-20T16:31:19Z", "message": "Rebase and address comments"}, "afterCommit": {"oid": "d8720a66283e9c9d076808eab0c862d38890c641", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d8720a66283e9c9d076808eab0c862d38890c641", "committedDate": "2020-07-20T18:45:15Z", "message": "Rebase and address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8720a66283e9c9d076808eab0c862d38890c641", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d8720a66283e9c9d076808eab0c862d38890c641", "committedDate": "2020-07-20T18:45:15Z", "message": "Rebase and address comments"}, "afterCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01fd191060ea5984485f775be67a697acae38393", "committedDate": "2020-07-20T18:49:12Z", "message": "Rebase and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODExODI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-451811826", "createdAt": "2020-07-20T17:26:31Z", "commit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoyNjozMVrOG0YFRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTozNDoyNVrOG0cZqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MzcwMA==", "bodyText": "NIT: we can just have one UUID for the test run, and remove it afterwards.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457573700", "createdAt": "2020-07-20T17:26:31Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -58,9 +72,15 @@\n     protected static final String FCS_BETA_ENDPOINT = \"https://aqzw8qdn5l.execute-api.us-east-1.amazonaws.com/Beta\";\n     protected static final Region BETA_REGION = Region.US_EAST_1;\n     protected static final String THING_GROUP_TARGET_TYPE = \"thinggroup\";\n+    private static final String TES_ROLE_NAME = \"E2ETestsTesRole\" + UUID.randomUUID().toString();\n+    protected static final String TES_ROLE_ALIAS_NAME = \"E2ETestsTesRoleAlias\" + UUID.randomUUID().toString();\n+    private static final String TES_ROLE_POLICY_NAME = \"E2ETestsTesRolePolicy\" + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27bfdae51edb02a000fca815c4b5453a79d57d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzQxOA==", "bodyText": "I think the listener on role alias topic update in L51 doesn't change this credentialRequestHandler here. Either the IoTConnectionManager need to perform the listen-and-update or you update the server impl here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457643418", "createdAt": "2020-07-20T19:32:20Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -65,10 +64,7 @@ public void startup() {\n                 .addKeyValue(IOT_ROLE_ALIAS_TOPIC, iotRoleAlias).log(\"Starting Token Server at port {}\", port);\n         reportState(State.RUNNING);\n         try {\n-            validateConfig();\n-            IotCloudHelper cloudHelper = new IotCloudHelper();\n-            server = new HttpServerImpl(port,\n-                    new CredentialRequestHandler(iotRoleAlias, cloudHelper, iotConnectionManager));\n+            server = new HttpServerImpl(port, credentialRequestHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzkyNg==", "bodyText": "NIT: I feel it's actually simpler in code to create an actual Configuration and Topic object", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457643926", "createdAt": "2020-07-20T19:33:21Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/tes/TokenExchangeServiceTest.java", "diffHunk": "@@ -45,28 +43,42 @@ public void setup() {\n         // initialize Evergreen service specific mocks\n         serviceFullName = \"TokenExchangeService\";\n         initializeMockedConfig();\n-        when(stateTopic.getOnce()).thenReturn(State.INSTALLED);\n     }\n \n     @ParameterizedTest\n     @ValueSource(ints = {0, 3000})\n     public void GIVEN_token_exchange_service_WHEN_started_THEN_correct_env_set(int port) throws Exception {\n-        Topic mockTopic = mock(Topic.class);\n-        when(mockTopic.dflt(anyInt())).thenReturn(mockTopic);\n-        when(mockTopic.subscribe(any())).thenAnswer((a) -> {\n-            ((Subscriber) a.getArgument(0)).published(WhatHappened.initialized, mockTopic);\n+        when(stateTopic.getOnce()).thenReturn(State.INSTALLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NDQ1Nw==", "bodyText": "Does this return response even on AwsIOTException?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457644457", "createdAt": "2020-07-20T19:34:25Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -82,18 +84,48 @@ public void handle(final HttpExchange exchange) throws IOException {\n         return response;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTQwNDc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-451940478", "createdAt": "2020-07-20T20:36:35Z", "commit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDozNjozNVrOG0eXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDozNjozNVrOG0eXCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjU1NQ==", "bodyText": "inject context instead of kernel?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457676555", "createdAt": "2020-07-20T20:36:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        // Get artifact from S3\n+        byte[] artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n+\n+        // Perform integrity check\n+        performIntegrityCheck(artifactObject, artifact, packageIdentifier);\n+\n+        // Save file to store\n+        Files.write(saveToPath.resolve(extractFileName(key)), artifactObject, StandardOpenOption.CREATE,\n+                StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n+    }\n+\n+    private byte[] getObject(String bucket, String key, ComponentArtifact artifact,\n+                             PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException {\n+        try {\n+            TokenExchangeService tokenExchangeService = kernel.getContext().get(TokenExchangeService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTQxNjY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-451941666", "createdAt": "2020-07-20T20:38:25Z", "commit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDozODoyNVrOG0easg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDozODoyNVrOG0easg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NzQ5MA==", "bodyText": "Need to synchronize around this/when using the request handler. Maybe use an AtomicReference.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r457677490", "createdAt": "2020-07-20T20:38:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -32,29 +34,26 @@\n     private int port;\n     private String iotRoleAlias;\n     private HttpServerImpl server;\n-\n-    private final IotConnectionManager iotConnectionManager;\n+    private CredentialRequestHandler credentialRequestHandler;\n \n     /**\n      * Constructor.\n      * @param topics the configuration coming from kernel\n      * @param iotConnectionManager {@link IotConnectionManager}\n      */\n     @Inject\n-    public TokenExchangeService(Topics topics,\n-                                IotConnectionManager iotConnectionManager) {\n+    public TokenExchangeService(Topics topics, IotConnectionManager iotConnectionManager) {\n         super(topics);\n         // TODO: Add support for other params like role Aliases\n-        topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n-                .dflt(DEFAULT_PORT)\n-                .subscribe((why, newv) ->\n-                        port = Coerce.toInt(newv));\n-\n-        topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)\n-                .subscribe((why, newv) ->\n-                        iotRoleAlias = Coerce.toString(newv));\n+        topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC).dflt(DEFAULT_PORT)\n+                .subscribe((why, newv) -> port = Coerce.toInt(newv));\n \n-        this.iotConnectionManager = iotConnectionManager;\n+        topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC).subscribe((why, newv) -> {\n+            iotRoleAlias = Coerce.toString(newv);\n+            validateConfig();\n+            this.credentialRequestHandler =\n+                    new CredentialRequestHandler(iotRoleAlias, new IotCloudHelper(), iotConnectionManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01fd191060ea5984485f775be67a697acae38393", "committedDate": "2020-07-20T18:49:12Z", "message": "Rebase and address comments"}, "afterCommit": {"oid": "77b0df94b267fdf990c31f6e7f16168314ee0e8c", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77b0df94b267fdf990c31f6e7f16168314ee0e8c", "committedDate": "2020-07-20T21:01:11Z", "message": "Rebase and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTU4NzAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-451958703", "createdAt": "2020-07-20T21:05:05Z", "commit": {"oid": "77b0df94b267fdf990c31f6e7f16168314ee0e8c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDA2MjQ0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-452006244", "createdAt": "2020-07-20T22:36:59Z", "commit": {"oid": "77b0df94b267fdf990c31f6e7f16168314ee0e8c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "505ca5e96c078cdf394b8e576a6e50cd460644d6", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/505ca5e96c078cdf394b8e576a6e50cd460644d6", "committedDate": "2020-07-20T22:36:04Z", "message": "Merge branch 'master' into s3-download"}, "afterCommit": {"oid": "a806b11550906a78b0de5786901995bf62780838", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a806b11550906a78b0de5786901995bf62780838", "committedDate": "2020-07-20T23:57:07Z", "message": "Rebase and address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a806b11550906a78b0de5786901995bf62780838", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a806b11550906a78b0de5786901995bf62780838", "committedDate": "2020-07-20T23:57:07Z", "message": "Rebase and address comments"}, "afterCommit": {"oid": "62024407bf8fff6df82a053760c0fd2be2015ee8", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/62024407bf8fff6df82a053760c0fd2be2015ee8", "committedDate": "2020-07-20T23:57:53Z", "message": "Rebase and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDQ0MjAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-452044202", "createdAt": "2020-07-21T00:22:40Z", "commit": {"oid": "403c6597c1fa71d0d01b5e3357c3c43fe83a3bf1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTY0OTU2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-452164956", "createdAt": "2020-07-21T06:38:47Z", "commit": {"oid": "b7d46591bf9c903ee42aba84f8f65b5310e381ca"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "093b781089f42cba7e8be7393df3d018822d965f", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/093b781089f42cba7e8be7393df3d018822d965f", "committedDate": "2020-07-21T06:39:04Z", "message": "Merge branch 'master' into s3-download"}, "afterCommit": {"oid": "4ba80f68c001bfe1d90fdef75850e8130bf397fd", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ba80f68c001bfe1d90fdef75850e8130bf397fd", "committedDate": "2020-07-29T14:49:30Z", "message": "Fixes after rebasing, optimizing download"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ba80f68c001bfe1d90fdef75850e8130bf397fd", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ba80f68c001bfe1d90fdef75850e8130bf397fd", "committedDate": "2020-07-29T14:49:30Z", "message": "Fixes after rebasing, optimizing download"}, "afterCommit": {"oid": "ccc3f1f543f30cbdb8fe826b5ec34e29c43c83a7", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ccc3f1f543f30cbdb8fe826b5ec34e29c43c83a7", "committedDate": "2020-07-29T16:09:59Z", "message": "Fixes after rebasing, optimizing download"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccc3f1f543f30cbdb8fe826b5ec34e29c43c83a7", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ccc3f1f543f30cbdb8fe826b5ec34e29c43c83a7", "committedDate": "2020-07-29T16:09:59Z", "message": "Fixes after rebasing, optimizing download"}, "afterCommit": {"oid": "cbd347188a1a36d10c727c4869c5e8ecdbf77f9a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cbd347188a1a36d10c727c4869c5e8ecdbf77f9a", "committedDate": "2020-07-29T17:21:20Z", "message": "Fixes after rebasing, optimizing download"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbd347188a1a36d10c727c4869c5e8ecdbf77f9a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cbd347188a1a36d10c727c4869c5e8ecdbf77f9a", "committedDate": "2020-07-29T17:21:20Z", "message": "Fixes after rebasing, optimizing download"}, "afterCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ff6f336192512defd6498f6105841049d517c0a", "committedDate": "2020-07-29T17:25:43Z", "message": "Fixes after rebasing, optimizing download"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ff6f336192512defd6498f6105841049d517c0a", "committedDate": "2020-07-29T17:25:43Z", "message": "Fixes after rebasing, optimizing download"}, "afterCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e8a69adb6c0e337146047be126e3bfeb7d1877e", "committedDate": "2020-07-29T17:46:11Z", "message": "Fixes after rebasing, optimizing download"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzQ1Njc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-457745678", "createdAt": "2020-07-29T17:39:12Z", "commit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozOToxMlrOG5DF0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1NDoyMVrOG5DqXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MjY1Ng==", "bodyText": "put in finally. There's an assertion right above this which could fail and cause it not to clean up.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462472656", "createdAt": "2020-07-29T17:39:12Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -132,6 +154,7 @@ static void afterAll() {\n                     component.getName(), component.getVersion().toString());\n             assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n         }\n+        cleanUpTesRoleAndAlias();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MzcxMg==", "bodyText": "should this package have a UUID to make it unique?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462473712", "createdAt": "2020-07-29T17:40:56Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NDQ4Ng==", "bodyText": "why make a new context? You can get the existing context from kernel.getContext()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462474486", "createdAt": "2020-07-29T17:42:04Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjMzNQ==", "bodyText": "We need to delete the bucket", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462476335", "createdAt": "2020-07-29T17:45:02Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    // TODO : Remove when Component Management Service supports adding checksum to recipes\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(tempDir.resolve(\"artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String bucketName = \"eg-e2e-component-artifacts-test\" + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjkxMQ==", "bodyText": "looks like maybe a mixed up merge? I think I've seen this change before in someone else's PR.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462476911", "createdAt": "2020-07-29T17:45:57Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java", "diffHunk": "@@ -36,29 +38,39 @@\n \n @Tag(\"E2E\")\n class TESTest extends BaseITCase {\n-    private Kernel kernel;\n-    private ThingInfo thingInfo;\n-    private DeviceProvisioningHelper deviceProvisioningHelper;\n-    private String roleId;\n-    private String roleName;\n-    private String roleAliasName;\n+    private static Kernel kernel;\n+    private static ThingInfo thingInfo;\n+    private static DeviceProvisioningHelper deviceProvisioningHelper;\n+    private static String roleId;\n+    private static String roleName;\n+    private static String roleAliasName;\n     private static final String AWS_REGION = \"us-east-1\";\n     private static final String TES_ROLE_NAME = \"e2etest-TES_INTEG_ROLE\";\n     private static final String TES_ROLE_ALIAS_NAME = \"e2etest-TES_INTEG_ROLE_ALIAS\";\n \n-    @BeforeEach\n-    void setupKernel() throws IOException, DeviceConfigurationException {\n+    @BeforeAll\n+    static void setupKernel() throws Exception {\n         kernel = new Kernel();\n         kernel.parseArgs(\"-i\", TESTest.class.getResource(\"tesExample.yaml\").toString());\n-        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n         roleId = UUID.randomUUID().toString();\n         roleName = TES_ROLE_NAME + roleId;\n         roleAliasName = TES_ROLE_ALIAS_NAME + roleId;\n         provision(kernel);\n+\n+        CountDownLatch tesRunning = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NzgxNw==", "bodyText": "just use @AllArgsConstructor and @NoArgsConstructor, no need for the manual constructor.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462477817", "createdAt": "2020-07-29T17:47:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Getter;\n+\n+import java.net.URI;\n+\n+@Getter\n+public class ComponentArtifact {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODcwNA==", "bodyText": "This seems a bit sketchy, doesn't the S3 client have some way to take a s3:// URL and parse it itself, instead of us parsing it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462478704", "createdAt": "2020-07-29T17:48:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTAyNA==", "bodyText": "Why not inject TES in the constructor? You're already injecting some stuff.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462479024", "createdAt": "2020-07-29T17:49:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        // Get artifact from S3\n+        byte[] artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n+\n+        // Perform integrity check\n+        performIntegrityCheck(artifactObject, artifact, packageIdentifier);\n+\n+        // Save file to store\n+        Files.write(saveToPath.resolve(extractFileName(key)), artifactObject, StandardOpenOption.CREATE,\n+                StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n+    }\n+\n+    private byte[] getObject(String bucket, String key, ComponentArtifact artifact,\n+                             PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException {\n+        try {\n+            TokenExchangeService tokenExchangeService = kernel.getContext().get(TokenExchangeService.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NjU1NQ=="}, "originalCommit": {"oid": "01fd191060ea5984485f775be67a697acae38393"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTY5MQ==", "bodyText": "if it passed the check, I don't think we need an info level log.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462479691", "createdAt": "2020-07-29T17:50:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import software.amazon.awssdk.awscore.AwsRequestOverrideConfiguration;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Inject;\n+\n+/**\n+ * Downloads component artifacts from S3 bucket URI specified in the component recipe.\n+ */\n+public class S3Downloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(S3Downloader.class);\n+    private static final Pattern S3_PATH_REGEX = Pattern.compile(\"s3:\\\\/\\\\/([^\\\\/]+)\\\\/(.*)\");\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+    private final S3Client s3Client;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clientFactory S3 client factory\n+     * @param kernel kernel\n+     */\n+    @Inject\n+    public S3Downloader(S3SdkClientFactory clientFactory, Kernel kernel) {\n+        this.s3Client = clientFactory.getS3Client();\n+        this.kernel = kernel;\n+    }\n+\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+            throws IOException, PackageDownloadException, InvalidArtifactUriException {\n+\n+        logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log();\n+\n+        // Parse artifact path\n+        Matcher s3PathMatcher = getS3PathMatcherForURI(artifact.getArtifactUri(), packageIdentifier);\n+        String bucket = s3PathMatcher.group(1);\n+        String key = s3PathMatcher.group(2);\n+\n+        // Get artifact from S3\n+        // TODO : Calculating hash for integrity check nees the whole object in memory,\n+        //  However it could be an issue in the case of large files, need to evaluate if\n+        //  there's a way to get around this\n+        byte[] artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n+\n+        // Perform integrity check\n+        performIntegrityCheck(artifactObject, artifact, packageIdentifier);\n+\n+        // Save file to store\n+        Files.write(saveToPath.resolve(extractFileName(key)), artifactObject, StandardOpenOption.CREATE,\n+                StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n+    }\n+\n+    private byte[] getObject(String bucket, String key, ComponentArtifact artifact,\n+                             PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException {\n+        try {\n+            TokenExchangeService tokenExchangeService = kernel.getContext().get(TokenExchangeService.class);\n+            GetObjectRequest getObjectRequest = GetObjectRequest.builder().overrideConfiguration(\n+                    AwsRequestOverrideConfiguration.builder()\n+                            .credentialsProvider(tokenExchangeService).build())\n+                    .bucket(bucket).key(key).build();\n+            return s3Client.getObjectAsBytes(getObjectRequest).asByteArray();\n+        } catch (S3Exception e) {\n+            throw new PackageDownloadException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                            \"Failed to get artifact object from S3\"), e);\n+        }\n+    }\n+\n+    private Matcher getS3PathMatcherForURI(URI artifactURI, PackageIdentifier packageIdentifier)\n+            throws InvalidArtifactUriException {\n+        Matcher s3PathMatcher = S3_PATH_REGEX.matcher(artifactURI.toString());\n+        if (!s3PathMatcher.matches()) {\n+            // Bad URI\n+            throw new InvalidArtifactUriException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                            packageIdentifier.getVersion().toString(), artifactURI, \"Invalid artifact URI\"));\n+        }\n+        return s3PathMatcher;\n+    }\n+\n+    private void performIntegrityCheck(byte[] artifactObject, ComponentArtifact artifact,\n+                                       PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        try {\n+            String digest = Base64.getEncoder()\n+                    .encodeToString(MessageDigest.getInstance(artifact.getAlgorithm()).digest(artifactObject));\n+            if (!digest.equals(artifact.getChecksum())) {\n+                // Handle failure in integrity check\n+                throw new PackageDownloadException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT, packageIdentifier.getName(),\n+                                packageIdentifier.getVersion().toString(), artifact.getArtifactUri(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atInfo().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MDY1OA==", "bodyText": "TES now has caching, so it should have a method to get the credentials without doing all of what you've added.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462480658", "createdAt": "2020-07-29T17:52:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -95,4 +129,14 @@ public void handle(final HttpExchange exchange) throws IOException {\n             throw new AWSIotException(e);\n         }\n     }\n+\n+    private JsonNode deserializeCredentials(final String credentials) throws AWSIotException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Mjc2Nw=="}, "originalCommit": {"oid": "d938a8f683c8fc9b8b16d6d5e1cea0951000100e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MTY5MA==", "bodyText": "don't hard code paths. Use a @TempDir. This won't work on windows.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462481690", "createdAt": "2020-07-29T17:53:48Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM = \"StbR1g+686nCVhEJERUYNWhBqXskG6b3n9CG8vVekgM=\";\n+    private static final String VALID_ALGORITHM = \"SHA-256\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MjAxMw==", "bodyText": "these need to be in an @After or finally, otherwise if the test fails, it won't be cleaned up.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462482013", "createdAt": "2020-07-29T17:54:21Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM = \"StbR1g+686nCVhEJERUYNWhBqXskG6b3n9CG8vVekgM=\";\n+    private static final String VALID_ALGORITHM = \"SHA-256\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = Base64.getEncoder()\n+                .encodeToString(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(TokenExchangeService.class)).thenReturn(mock(TokenExchangeService.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), checksum, VALID_ALGORITHM), saveToPath);\n+        byte[] downloadedFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(\"Content of downloaded file should be same as the artifact content\",\n+                Arrays.equals(Files.readAllBytes(artifactFilePath), downloadedFile));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODMzOTgy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-457833982", "createdAt": "2020-07-29T19:44:19Z", "commit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTo0NDoxOVrOG5HeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyNzo0NVrOG5I6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NDQ2NA==", "bodyText": "Why not just leave the bucket?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462544464", "createdAt": "2020-07-29T19:44:19Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -129,4 +150,90 @@ void GIVEN_package_identifier_WHEN_resolve_dependencies_and_prepare_THEN_package\n             assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(kernelIntegTestPkgName).resolve(\"1.0.0\").resolve(\"kernel_integ_test_artifact.txt\").toFile(), anExistingFile());\n         }\n     }\n+\n+    @Test\n+    @Order(3)\n+    void GIVEN_package_with_s3_artifacts_WHEN_deployed_THEN_download_artifacts_from_customer_s3_and_perform_integrity_check()\n+            throws Exception {\n+        // TODO : Remove after Component Management Service supports checksum calculation\n+        //  on create/update component APIS\n+        createComponentLocallyWithS3Artifacts();\n+\n+        List<String> rootPackageList = new ArrayList<>();\n+        rootPackageList.add(\"AppWithS3Artifacts\");\n+        List<DeploymentPackageConfiguration> configList = new ArrayList<>();\n+        configList.add(new DeploymentPackageConfiguration(\"AppWithS3Artifacts\", true, \"1.0.0\", Collections.emptyMap()));\n+        DeploymentDocument testDeploymentDocument =\n+                DeploymentDocument.builder().deploymentId(\"test\").timestamp(12345678L).rootPackages(rootPackageList)\n+                        .deploymentPackageConfigurationList(configList)\n+                        .failureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).groupName(\"test\").build();\n+        try (Context context = new Context()) {\n+            Topics groupToRootPackagesTopics =\n+                    Topics.of(context, DeploymentService.GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+            rootPackageList.stream().forEach(pkg -> groupToRootPackagesTopics.lookupTopics(\"mockGroup\").lookup(pkg)\n+                    .withValue(ImmutableMap.of(DeploymentService.GROUP_TO_ROOT_COMPONENTS_VERSION_KEY, \"1.0.0\")));\n+            List<PackageIdentifier> resolutionResult =\n+                    dependencyResolver.resolveDependencies(testDeploymentDocument, groupToRootPackagesTopics);\n+            Future<Void> testFuture = packageManager.preparePackages(resolutionResult);\n+            testFuture.get(10, TimeUnit.SECONDS);\n+\n+            // Validate artifact was downloaded and integrity check passed\n+            assertThat(packageStorePath.toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).toFile(), anExistingDirectory());\n+            assertThat(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"AppWithS3Artifacts-1.0.0.yaml\").toFile(),\n+                    anExistingFile());\n+            assertThat(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"AppWithS3Artifacts\").resolve(\"1.0.0\")\n+                    .resolve(\"artifact.txt\").toFile(), anExistingFile());\n+        }\n+    }\n+\n+    // TODO : Remove when Component Management Service supports adding checksum to recipes\n+    private void createComponentLocallyWithS3Artifacts() throws Exception {\n+        // Create artifact object in S3\n+        Path artifactFilePath =\n+                Files.write(tempDir.resolve(\"artifact.txt\"), Collections.singletonList(\"Sample artifact content\"),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String bucketName = \"eg-e2e-component-artifacts-test\" + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NjMzNQ=="}, "originalCommit": {"oid": "0ff6f336192512defd6498f6105841049d517c0a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0NTEyMw==", "bodyText": "Why have sleep here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462545123", "createdAt": "2020-07-29T19:45:28Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESTest.java", "diffHunk": "@@ -36,29 +38,39 @@\n \n @Tag(\"E2E\")\n class TESTest extends BaseITCase {\n-    private Kernel kernel;\n-    private ThingInfo thingInfo;\n-    private DeviceProvisioningHelper deviceProvisioningHelper;\n-    private String roleId;\n-    private String roleName;\n-    private String roleAliasName;\n+    private static Kernel kernel;\n+    private static ThingInfo thingInfo;\n+    private static DeviceProvisioningHelper deviceProvisioningHelper;\n+    private static String roleId;\n+    private static String roleName;\n+    private static String roleAliasName;\n     private static final String AWS_REGION = \"us-east-1\";\n     private static final String TES_ROLE_NAME = \"e2etest-TES_INTEG_ROLE\";\n     private static final String TES_ROLE_ALIAS_NAME = \"e2etest-TES_INTEG_ROLE_ALIAS\";\n \n-    @BeforeEach\n-    void setupKernel() throws IOException, DeviceConfigurationException {\n+    @BeforeAll\n+    static void setupKernel() throws Exception {\n         kernel = new Kernel();\n         kernel.parseArgs(\"-i\", TESTest.class.getResource(\"tesExample.yaml\").toString());\n-        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n         roleId = UUID.randomUUID().toString();\n         roleName = TES_ROLE_NAME + roleId;\n         roleAliasName = TES_ROLE_ALIAS_NAME + roleId;\n         provision(kernel);\n+\n+        CountDownLatch tesRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(TOKEN_EXCHANGE_SERVICE_TOPICS) && newState.equals(State.RUNNING)) {\n+                tesRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+        assertTrue(tesRunning.await(5, TimeUnit.SECONDS));\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODA4Nw==", "bodyText": "why not read bytes from VALID_ARTIFACT_CONTENT directly?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#discussion_r462568087", "createdAt": "2020-07-29T20:27:45Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/S3DownloaderTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.tes.TokenExchangeService;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.S3SdkClientFactory;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.CloseResource\")\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class S3DownloaderTest {\n+\n+    private static final String VALID_ARTIFACT_URI = \"s3://eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String INVALID_ARTIFACT_URI = \"s3/eg-artifacts/ComponentWithS3Artifacts-1.0.0/artifact.txt\";\n+    private static final String VALID_ARTIFACT_CHECKSUM = \"StbR1g+686nCVhEJERUYNWhBqXskG6b3n9CG8vVekgM=\";\n+    private static final String VALID_ALGORITHM = \"SHA-256\";\n+    private static final String VALID_ARTIFACT_CONTENT = \"Sample artifact content\";\n+    private static final String TEST_COMPONENT_NAME = \"ComponentWithS3Artifacts\";\n+    private static final String TEST_COMPONENT_VERSION = \"1.0.0\";\n+    private static final String TEST_SCOPE = \"private\";\n+\n+    @Mock\n+    private S3Client s3Client;\n+\n+    @Mock\n+    private S3SdkClientFactory s3SdkClientFactory;\n+\n+    @Mock\n+    private Kernel kernel;\n+\n+    private S3Downloader s3Downloader;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(s3SdkClientFactory.getS3Client()).thenReturn(s3Client);\n+        s3Downloader = new S3Downloader(s3SdkClientFactory, kernel);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_download_to_path_THEN_succeed() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = Base64.getEncoder()\n+                .encodeToString(MessageDigest.getInstance(\"SHA-256\").digest(Files.readAllBytes(artifactFilePath)));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(TokenExchangeService.class)).thenReturn(mock(TokenExchangeService.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), checksum, VALID_ALGORITHM), saveToPath);\n+        byte[] downloadedFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(\"Content of downloaded file should be same as the artifact content\",\n+                Arrays.equals(Files.readAllBytes(artifactFilePath), downloadedFile));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_uri_THEN_fail() throws Exception {\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        assertThrows(InvalidArtifactUriException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(INVALID_ARTIFACT_URI), \"somechecksum\", VALID_ALGORITHM), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_checksum_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n+        String checksum = Base64.getEncoder().encodeToString(\"WrongChecksum\".getBytes(StandardCharsets.UTF_8));\n+\n+        Context mockContext = mock(Context.class);\n+        when(mockContext.get(TokenExchangeService.class)).thenReturn(mock(TokenExchangeService.class));\n+        when(kernel.getContext()).thenReturn(mockContext);\n+        ResponseBytes responseBytes = mock(ResponseBytes.class);\n+        when(responseBytes.asByteArray()).thenReturn(Files.readAllBytes(artifactFilePath));\n+        when(s3Client.getObjectAsBytes(any(GetObjectRequest.class))).thenReturn(responseBytes);\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(TEST_COMPONENT_NAME).resolve(TEST_COMPONENT_VERSION);\n+        if (Files.notExists(saveToPath)) {\n+            Files.createDirectories(saveToPath);\n+        }\n+        assertThrows(PackageDownloadException.class, () -> s3Downloader.downloadToPath(\n+                new PackageIdentifier(TEST_COMPONENT_NAME, new Semver(TEST_COMPONENT_VERSION), TEST_SCOPE),\n+                new ComponentArtifact(new URI(VALID_ARTIFACT_URI), checksum, VALID_ALGORITHM), saveToPath));\n+        TestHelper.cleanDirectory(testCache);\n+        TestHelper.cleanDirectory(artifactFilePath);\n+        mockContext.close();\n+    }\n+\n+    @Test\n+    void GIVEN_s3_artifact_uri_WHEN_bad_algorithm_THEN_fail() throws Exception {\n+        Path artifactFilePath =\n+                Files.write(Paths.get(\"/tmp/artifact.txt\"), Collections.singletonList(VALID_ARTIFACT_CONTENT),\n+                        StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e"}, "originalPosition": 141}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e8a69adb6c0e337146047be126e3bfeb7d1877e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e8a69adb6c0e337146047be126e3bfeb7d1877e", "committedDate": "2020-07-29T17:46:11Z", "message": "Fixes after rebasing, optimizing download"}, "afterCommit": {"oid": "ab7a42ce11e4e067ec0c8b1cc9ba08fbe61ee809", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ab7a42ce11e4e067ec0c8b1cc9ba08fbe61ee809", "committedDate": "2020-07-29T23:16:02Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab7a42ce11e4e067ec0c8b1cc9ba08fbe61ee809", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ab7a42ce11e4e067ec0c8b1cc9ba08fbe61ee809", "committedDate": "2020-07-29T23:16:02Z", "message": "Address comments"}, "afterCommit": {"oid": "f3cb8494b3280e4c573dc491d0627faafa9a8c42", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3cb8494b3280e4c573dc491d0627faafa9a8c42", "committedDate": "2020-07-29T23:52:24Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTc2Mzgw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-457976380", "createdAt": "2020-07-29T23:59:53Z", "commit": {"oid": "f3cb8494b3280e4c573dc491d0627faafa9a8c42"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3cb8494b3280e4c573dc491d0627faafa9a8c42", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3cb8494b3280e4c573dc491d0627faafa9a8c42", "committedDate": "2020-07-29T23:52:24Z", "message": "Address comments"}, "afterCommit": {"oid": "70f8e0a561baf7f5d6a70bcc4b3997e05c049266", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/70f8e0a561baf7f5d6a70bcc4b3997e05c049266", "committedDate": "2020-07-30T00:06:39Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a015be22f46275d47e15dcd0762676492fca80f", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9a015be22f46275d47e15dcd0762676492fca80f", "committedDate": "2020-07-30T09:03:33Z", "message": "Fix E2E tests"}, "afterCommit": {"oid": "33e785f363e2c8b45f54078ff34a5c913ab21665", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33e785f363e2c8b45f54078ff34a5c913ab21665", "committedDate": "2020-07-31T02:19:11Z", "message": "Fixes after cloud changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33e785f363e2c8b45f54078ff34a5c913ab21665", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33e785f363e2c8b45f54078ff34a5c913ab21665", "committedDate": "2020-07-31T02:19:11Z", "message": "Fixes after cloud changes"}, "afterCommit": {"oid": "e2124e50c3f2c8fa8a129f930514164bbe314552", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e2124e50c3f2c8fa8a129f930514164bbe314552", "committedDate": "2020-07-31T06:24:35Z", "message": "Minor enhancements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2124e50c3f2c8fa8a129f930514164bbe314552", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e2124e50c3f2c8fa8a129f930514164bbe314552", "committedDate": "2020-07-31T06:24:35Z", "message": "Minor enhancements"}, "afterCommit": {"oid": "43b4fd816339a8af5f5bdf0de54ed9afb50e6442", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43b4fd816339a8af5f5bdf0de54ed9afb50e6442", "committedDate": "2020-07-31T20:03:33Z", "message": "Minor enhancements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDczMDE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-459473019", "createdAt": "2020-07-31T20:55:56Z", "commit": {"oid": "43b4fd816339a8af5f5bdf0de54ed9afb50e6442"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43b4fd816339a8af5f5bdf0de54ed9afb50e6442", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43b4fd816339a8af5f5bdf0de54ed9afb50e6442", "committedDate": "2020-07-31T20:03:33Z", "message": "Minor enhancements"}, "afterCommit": {"oid": "002f22cd109dbe7097e9edd53061b7a9233f8ce3", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002f22cd109dbe7097e9edd53061b7a9233f8ce3", "committedDate": "2020-07-31T21:10:47Z", "message": "Minor enhancements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDg5NTc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-459489578", "createdAt": "2020-07-31T21:33:49Z", "commit": {"oid": "002f22cd109dbe7097e9edd53061b7a9233f8ce3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDkxODg2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-459491886", "createdAt": "2020-07-31T21:39:45Z", "commit": {"oid": "002f22cd109dbe7097e9edd53061b7a9233f8ce3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8f2b149f8774cc83ab3448027cfc6cede2bb038", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b8f2b149f8774cc83ab3448027cfc6cede2bb038", "committedDate": "2020-07-31T23:06:10Z", "message": "Download component artifacts from S3 buckets in customer account"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "464dd10f225bc6cce756b22c6eeeb68fffd48d84", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/464dd10f225bc6cce756b22c6eeeb68fffd48d84", "committedDate": "2020-07-31T23:06:10Z", "message": "Fixes after rebasing, optimizing download"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69d5d54802093e8d891f4e746e5b32b6060fad28", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/69d5d54802093e8d891f4e746e5b32b6060fad28", "committedDate": "2020-07-31T23:06:10Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7db5e7408e2ae03020ebc5b8db785b665291c3f", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a7db5e7408e2ae03020ebc5b8db785b665291c3f", "committedDate": "2020-07-31T23:06:10Z", "message": "Minor enhancements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22639f78072288479997adb87c73c88b66255a31", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/22639f78072288479997adb87c73c88b66255a31", "committedDate": "2020-07-31T23:06:10Z", "message": "[e2e test]Handle changed exception for component immutability the new gamma endpoint throws"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "017854a86a051e47e820b41405d766d842fbbcef", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/017854a86a051e47e820b41405d766d842fbbcef", "committedDate": "2020-07-31T23:31:57Z", "message": "Fixes after rebasing against latest TES changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "002f22cd109dbe7097e9edd53061b7a9233f8ce3", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002f22cd109dbe7097e9edd53061b7a9233f8ce3", "committedDate": "2020-07-31T21:10:47Z", "message": "Minor enhancements"}, "afterCommit": {"oid": "017854a86a051e47e820b41405d766d842fbbcef", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/017854a86a051e47e820b41405d766d842fbbcef", "committedDate": "2020-07-31T23:31:57Z", "message": "Fixes after rebasing against latest TES changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTI0MzIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-459524320", "createdAt": "2020-07-31T23:37:11Z", "commit": {"oid": "017854a86a051e47e820b41405d766d842fbbcef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTI0OTU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/300#pullrequestreview-459524955", "createdAt": "2020-07-31T23:40:36Z", "commit": {"oid": "017854a86a051e47e820b41405d766d842fbbcef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2863, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}