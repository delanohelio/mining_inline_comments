{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTMzMjQw", "number": 304, "title": "PubSub IPC Broker Implementation", "bodyText": "Issue #, if available:\nDescription of changes:\nDepends on PR in the IPC repo.\nServer-side implementation of IPC PubSub broker.\nWhy is this change necessary:\nHow was this change tested:\nTested with included integration test.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-13T22:31:51Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304", "merged": true, "mergeCommit": {"oid": "52220f0025d30504fc508a4b0572151e7aba0cbb"}, "closed": true, "closedAt": "2020-07-14T22:10:14Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0pTlzgBqjM1NDE1NTc5MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc09TjxgFqTQ0ODQ5NDQ5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d75a97957fe22fa337aa72d546c6e6947c75df64", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d75a97957fe22fa337aa72d546c6e6947c75df64", "committedDate": "2020-07-13T22:29:28Z", "message": "Add PubSub IPC broker implementation"}, "afterCommit": {"oid": "572c0f9f6cab065ad6a30d9519fbe16b71921c19", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/572c0f9f6cab065ad6a30d9519fbe16b71921c19", "committedDate": "2020-07-13T22:37:32Z", "message": "Add PubSub IPC broker implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Nzc1Nzc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#pullrequestreview-447775778", "createdAt": "2020-07-14T04:24:55Z", "commit": {"oid": "572c0f9f6cab065ad6a30d9519fbe16b71921c19"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyNDo1NVrOGxDi0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyNDo1NVrOGxDi0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTQ3NQ==", "bodyText": "Is this intended to be used by other internal services in the same JVM through method invocation?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#discussion_r454091475", "createdAt": "2020-07-14T04:24:55Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/pubsub/PubSubIPCAgent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.builtin.services.pubsub;\n+\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.pubsub.MessagePublishedEvent;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubGenericResponse;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubImpl;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubPublishRequest;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubServiceOpCodes;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubSubscribeRequest;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubUnsubscribeRequest;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.DefaultConcurrentHashMap;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class to handle business logic for all PubSub requests over IPC.\n+ */\n+public class PubSubIPCAgent {\n+    // Map from connection --> Function to call for each published message\n+    private static final Map<String, Set<Object>> listeners = new DefaultConcurrentHashMap<>(CopyOnWriteArraySet::new);\n+    private static final int TIMEOUT_SECONDS = 30;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private static final Logger log = LogManager.getLogger(PubSubIPCAgent.class);\n+\n+    /**\n+     * Publish a message to all subscribers.\n+     *\n+     * @param publishRequest publish request\n+     * @return response\n+     */\n+    public PubSubGenericResponse publish(PubSubPublishRequest publishRequest) {\n+        if (!listeners.containsKey(publishRequest.getTopic())) {\n+            // Still technically successful, just no one was subscribed\n+            return new PubSubGenericResponse(PubSubResponseStatus.Success, null);\n+        }\n+        Set<Object> contexts = listeners.get(publishRequest.getTopic());\n+\n+        executor.execute(() -> {\n+            contexts.forEach(c -> {\n+                publishToTopic(new MessagePublishedEvent(publishRequest.getTopic(), publishRequest.getPayload()), c);\n+            });\n+        });\n+        return new PubSubGenericResponse(PubSubResponseStatus.Success, null);\n+    }\n+\n+    /**\n+     * Handle the subscription request from the user.\n+     *\n+     * @param subscribeRequest subscribe request\n+     * @param context          connection context\n+     * @return response code Success if all went well\n+     */\n+    public PubSubGenericResponse subscribe(PubSubSubscribeRequest subscribeRequest, ConnectionContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        log.debug(\"Subscribing to topic {}, {}\", subscribeRequest.getTopic(), context);\n+        listeners.get(subscribeRequest.getTopic()).add(context);\n+        context.onDisconnect(() -> {\n+            if (listeners.containsKey(subscribeRequest.getTopic())) {\n+                if (listeners.get(subscribeRequest.getTopic()).remove(context)) {\n+                    log.debug(\"Client {} disconnected, removing subscription {}\", context, subscribeRequest.getTopic());\n+                }\n+            }\n+        });\n+\n+        return new PubSubGenericResponse(PubSubResponseStatus.Success, null);\n+    }\n+\n+    /**\n+     * Handle the subscription request from the user.\n+     *\n+     * @param subscribeRequest subscribe request\n+     * @param cb               callback to be called for each published message\n+     */\n+    public void subscribe(PubSubSubscribeRequest subscribeRequest, Consumer<MessagePublishedEvent> cb) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572c0f9f6cab065ad6a30d9519fbe16b71921c19"}, "originalPosition": 99}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "572c0f9f6cab065ad6a30d9519fbe16b71921c19", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/572c0f9f6cab065ad6a30d9519fbe16b71921c19", "committedDate": "2020-07-13T22:37:32Z", "message": "Add PubSub IPC broker implementation"}, "afterCommit": {"oid": "c7321850377540ede4b391cace416d3c81efeba9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7321850377540ede4b391cace416d3c81efeba9", "committedDate": "2020-07-14T16:24:55Z", "message": "Add PubSub IPC broker implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07eb27f62d47afe5d67ba9c341a69c46171fecf2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07eb27f62d47afe5d67ba9c341a69c46171fecf2", "committedDate": "2020-07-14T16:25:37Z", "message": "Add PubSub IPC/broker implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7321850377540ede4b391cace416d3c81efeba9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7321850377540ede4b391cace416d3c81efeba9", "committedDate": "2020-07-14T16:24:55Z", "message": "Add PubSub IPC broker implementation"}, "afterCommit": {"oid": "e8800009d0c20186dd5bec0215d7e167d3b56cec", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e8800009d0c20186dd5bec0215d7e167d3b56cec", "committedDate": "2020-07-14T16:25:37Z", "message": "Add PubSub IPC broker implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71b020f9c6d5b4caaa05cfc8557e720083679da4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/71b020f9c6d5b4caaa05cfc8557e720083679da4", "committedDate": "2020-07-14T16:55:46Z", "message": "Add PubSub IPC broker implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8800009d0c20186dd5bec0215d7e167d3b56cec", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e8800009d0c20186dd5bec0215d7e167d3b56cec", "committedDate": "2020-07-14T16:25:37Z", "message": "Add PubSub IPC broker implementation"}, "afterCommit": {"oid": "71b020f9c6d5b4caaa05cfc8557e720083679da4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/71b020f9c6d5b4caaa05cfc8557e720083679da4", "committedDate": "2020-07-14T16:55:46Z", "message": "Add PubSub IPC broker implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/34f8ca148265a221a262b9c18a4da3cfff68bf8c", "committedDate": "2020-07-14T20:08:48Z", "message": "Update cloud endpoints"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ed9fd8878cabe73c1eab34873ad102d2315f238", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ed9fd8878cabe73c1eab34873ad102d2315f238", "committedDate": "2020-07-14T17:29:54Z", "message": "Update cloud endpoints"}, "afterCommit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/34f8ca148265a221a262b9c18a4da3cfff68bf8c", "committedDate": "2020-07-14T20:08:48Z", "message": "Update cloud endpoints"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDgxNDk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#pullrequestreview-448481494", "createdAt": "2020-07-14T21:31:39Z", "commit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDgxOTgy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#pullrequestreview-448481982", "createdAt": "2020-07-14T21:32:36Z", "commit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMjozNlrOGxmIpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo0MTo1MlrOGxmZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODIxMw==", "bodyText": "what kind of guarantee does this publish operation need to support?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#discussion_r454658213", "createdAt": "2020-07-14T21:32:36Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/pubsub/PubSubIPCAgent.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.builtin.services.pubsub;\n+\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.pubsub.MessagePublishedEvent;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubGenericResponse;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubImpl;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubPublishRequest;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubServiceOpCodes;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubSubscribeRequest;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubUnsubscribeRequest;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.DefaultConcurrentHashMap;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class to handle business logic for all PubSub requests over IPC.\n+ */\n+public class PubSubIPCAgent {\n+    // Map from connection --> Function to call for each published message\n+    private static final Map<String, Set<Object>> listeners = new DefaultConcurrentHashMap<>(CopyOnWriteArraySet::new);\n+    private static final int TIMEOUT_SECONDS = 30;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private static final Logger log = LogManager.getLogger(PubSubIPCAgent.class);\n+\n+    /**\n+     * Publish a message to all subscribers.\n+     *\n+     * @param publishRequest publish request\n+     * @return response\n+     */\n+    public PubSubGenericResponse publish(PubSubPublishRequest publishRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MjYwMQ==", "bodyText": "why a CopyOnWriteArraySet? is order important? Would a set backed by concurrentHaspMap be more efficient?\nex Set myConcurrentSet = ConcurrentHashMap.newKeySet();", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#discussion_r454662601", "createdAt": "2020-07-14T21:41:52Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/pubsub/PubSubIPCAgent.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.builtin.services.pubsub;\n+\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.pubsub.MessagePublishedEvent;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubGenericResponse;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubImpl;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubPublishRequest;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubServiceOpCodes;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubSubscribeRequest;\n+import com.aws.iot.evergreen.ipc.services.pubsub.PubSubUnsubscribeRequest;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.DefaultConcurrentHashMap;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class to handle business logic for all PubSub requests over IPC.\n+ */\n+public class PubSubIPCAgent {\n+    // Map from connection --> Function to call for each published message\n+    private static final Map<String, Set<Object>> listeners = new DefaultConcurrentHashMap<>(CopyOnWriteArraySet::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDk0NDkw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/304#pullrequestreview-448494490", "createdAt": "2020-07-14T21:55:43Z", "commit": {"oid": "34f8ca148265a221a262b9c18a4da3cfff68bf8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2871, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}