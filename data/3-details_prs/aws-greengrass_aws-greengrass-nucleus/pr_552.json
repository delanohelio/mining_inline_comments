{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTgwNjE1", "number": 552, "title": "Add hook to allow test feature parameters to be overridden by a plugin", "bodyText": "Issue #, if available:\nDescription of changes:\nProvides a Hook so that Nucleus and Plugins can query for a test feature parameter. A special plugin will provide those parameters during testing.\nWhy is this change necessary:\nThis is needed to allow change of behaviors during testing scenarios (e.g. allow higher rate of FSS calls)\nHow was this change tested:\nUnit tests. Additional testing (integration) will occur when plugin is created.\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-21T01:02:44Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552", "merged": true, "mergeCommit": {"oid": "3fed48ac62ea9529db44a28a0bb7ab0761f5db96"}, "closed": true, "closedAt": "2020-10-28T14:51:49Z", "author": {"login": "JamieHunter"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUi-dfgFqTUxMzI0MTcwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW-SxLgH2gAyNTA3MTgwNjE1OjcwNzI2MDlmZDgyYTBiYTY5ZTYzNzlhOGE0YTU0ZGNjY2NmMGM0NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjQxNzA3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-513241707", "createdAt": "2020-10-21T01:19:50Z", "commit": {"oid": "42a5e1678082ac6828c956d36d921cf07819400d"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMToxOTo1MFrOHlWyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMToxOTo1MFrOHlWyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkzMjc5NQ==", "bodyText": "copyright notice here too", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#discussion_r508932795", "createdAt": "2020-10-21T01:19:50Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/testing/TestFeatureParametersTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.aws.greengrass.testing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a5e1678082ac6828c956d36d921cf07819400d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNjI3ODI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-513627825", "createdAt": "2020-10-21T12:37:17Z", "commit": {"oid": "42a5e1678082ac6828c956d36d921cf07819400d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozNzoxN1rOHlpnpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozNzoxN1rOHlpnpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MTI1NA==", "bodyText": "[nit] I think it would be beneficial to log DEBUG which handler implementation is being used to retrieve the parameter", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#discussion_r509241254", "createdAt": "2020-10-21T12:37:17Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/testing/TestFeatureParameters.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.testing;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Some functionality is enabled only for integration testing. Such functionality is subject to change between\n+ * releases of the Greengrass Nucleus and/or may result in unstable behavior in production and should be avoided.\n+ */\n+public final class TestFeatureParameters {\n+\n+    /**\n+     * Default implementation when not overridden.\n+     */\n+    /*PackagePrivate*/ static TestFeatureParameterInterface DEFAULT_HANDLER = new TestFeatureParameterInterface() {\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public <T> T get(String featureParameterName, T productionValue) {\n+            return productionValue;\n+        }\n+    };\n+\n+    private static final AtomicReference<TestFeatureParameterInterface> handler =\n+                                                                            new AtomicReference<>(DEFAULT_HANDLER);\n+\n+    private TestFeatureParameters() {\n+        // No instance methods\n+    }\n+\n+    /**\n+     * Retrieve either the provided production value of a parameter, or, under test conditions, an alternative value\n+     * specific for the test being undertaken.\n+     *\n+     * @param featureParameterName Name of parameter to query.\n+     * @param productionValue Value to use when not overridden under test conditions.\n+     * @param <T> Simple parameter type (String, Integer, etc).\n+     * @return Production value, or override value.\n+     */\n+    public static <T> T get(String featureParameterName, T productionValue) {\n+        return handler.get().get(featureParameterName, productionValue);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a5e1678082ac6828c956d36d921cf07819400d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNjU4Mzg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-513658384", "createdAt": "2020-10-21T13:10:28Z", "commit": {"oid": "42a5e1678082ac6828c956d36d921cf07819400d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0Mjg4MTk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-514288198", "createdAt": "2020-10-22T00:53:19Z", "commit": {"oid": "b054c7132687a376896d495c124c68a52d71081c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1MzoxOVrOHmMxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1MzoxOVrOHmMxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxNzI0OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#discussion_r509817248", "createdAt": "2020-10-22T00:53:19Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/testing/TestFeatureParameters.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.testing;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Some functionality is enabled only for integration testing. Such functionality is subject to change between\n+ * releases of the Greengrass Nucleus and/or may result in unstable behavior in production and should be avoided.\n+ */\n+public final class TestFeatureParameters {\n+    private static final Logger LOGGER = LogManager.getLogger(TestFeatureParameters.class);\n+\n+    /**\n+     * Default implementation when not overridden.\n+     */\n+    /*PackagePrivate*/ static TestFeatureParameterInterface DEFAULT_HANDLER = new TestFeatureParameterInterface() {\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public <T> T get(String featureParameterName, T productionValue) {\n+            return productionValue;\n+        }\n+    };\n+\n+    private static final AtomicReference<TestFeatureParameterInterface> handler =\n+                                                                            new AtomicReference<>(DEFAULT_HANDLER);\n+\n+    private TestFeatureParameters() {\n+        // No instance methods\n+    }\n+\n+    /**\n+     * Retrieve either the provided production value of a parameter, or, under test conditions, an alternative value\n+     * specific for the test being undertaken.\n+     *\n+     * @param featureParameterName Name of parameter to query.\n+     * @param productionValue Value to use when not overridden under test conditions.\n+     * @param <T> Simple parameter type (String, Integer, etc).\n+     * @return Production value, or override value.\n+     */\n+    public static <T> T get(String featureParameterName, T productionValue) {\n+        return handler.get().get(featureParameterName, productionValue);\n+    }\n+\n+    /**\n+     * Called under test conditions to provide a feature parameter handler. Note that this method is subject to change\n+     * under future releases of Nucleus.\n+     *\n+     * @param newHandler New handler to use\n+     * @return previous handler\n+     */\n+    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\") // intentional reference equals\n+    /*PackagePrivate*/ static TestFeatureParameterInterface internalEnableTestingFeatureParameters(\n+            TestFeatureParameterInterface newHandler) {\n+        if (newHandler == DEFAULT_HANDLER) {\n+            LOGGER.atInfo(\"Testing Feature Parameters has been disabled.\");\n+        } else {\n+            LOGGER.atWarn(\"Testing Feature Parameters has been enabled. This operation is not supported in \"\n+                    + \"a production environment.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b054c7132687a376896d495c124c68a52d71081c"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0Mjg4MjQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-514288246", "createdAt": "2020-10-22T00:53:30Z", "commit": {"oid": "b054c7132687a376896d495c124c68a52d71081c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0Mjg5MjQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-514289247", "createdAt": "2020-10-22T00:56:50Z", "commit": {"oid": "b054c7132687a376896d495c124c68a52d71081c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1Njo1MFrOHmM1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDo1Njo1MFrOHmM1cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgxODIyNg==", "bodyText": "You either need to use info or atinfo with log", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#discussion_r509818226", "createdAt": "2020-10-22T00:56:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/testing/TestFeatureParameters.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.testing;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Some functionality is enabled only for integration testing. Such functionality is subject to change between\n+ * releases of the Greengrass Nucleus and/or may result in unstable behavior in production and should be avoided.\n+ */\n+public final class TestFeatureParameters {\n+    private static final Logger LOGGER = LogManager.getLogger(TestFeatureParameters.class);\n+\n+    /**\n+     * Default implementation when not overridden.\n+     */\n+    /*PackagePrivate*/ static TestFeatureParameterInterface DEFAULT_HANDLER = new TestFeatureParameterInterface() {\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public <T> T get(String featureParameterName, T productionValue) {\n+            return productionValue;\n+        }\n+    };\n+\n+    private static final AtomicReference<TestFeatureParameterInterface> handler =\n+                                                                            new AtomicReference<>(DEFAULT_HANDLER);\n+\n+    private TestFeatureParameters() {\n+        // No instance methods\n+    }\n+\n+    /**\n+     * Retrieve either the provided production value of a parameter, or, under test conditions, an alternative value\n+     * specific for the test being undertaken.\n+     *\n+     * @param featureParameterName Name of parameter to query.\n+     * @param productionValue Value to use when not overridden under test conditions.\n+     * @param <T> Simple parameter type (String, Integer, etc).\n+     * @return Production value, or override value.\n+     */\n+    public static <T> T get(String featureParameterName, T productionValue) {\n+        return handler.get().get(featureParameterName, productionValue);\n+    }\n+\n+    /**\n+     * Called under test conditions to provide a feature parameter handler. Note that this method is subject to change\n+     * under future releases of Nucleus.\n+     *\n+     * @param newHandler New handler to use\n+     * @return previous handler\n+     */\n+    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\") // intentional reference equals\n+    /*PackagePrivate*/ static TestFeatureParameterInterface internalEnableTestingFeatureParameters(\n+            TestFeatureParameterInterface newHandler) {\n+        if (newHandler == DEFAULT_HANDLER) {\n+            LOGGER.atInfo(\"Testing Feature Parameters has been disabled.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b054c7132687a376896d495c124c68a52d71081c"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b054c7132687a376896d495c124c68a52d71081c", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b054c7132687a376896d495c124c68a52d71081c", "committedDate": "2020-10-21T15:53:16Z", "message": "Logging for when TestFeatureParameters is used"}, "afterCommit": {"oid": "64ec9130b883a1c3bb6bd03b07fa71aa749eed0f", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/64ec9130b883a1c3bb6bd03b07fa71aa749eed0f", "committedDate": "2020-10-26T17:01:01Z", "message": "Add hook to allow test feature parameters to be overridden by a plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cc88fd8a81c44e66d54a77823e89553697572f7", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7cc88fd8a81c44e66d54a77823e89553697572f7", "committedDate": "2020-10-26T22:25:11Z", "message": "Add hook to allow test feature parameters to be overridden by a plugin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64ec9130b883a1c3bb6bd03b07fa71aa749eed0f", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/64ec9130b883a1c3bb6bd03b07fa71aa749eed0f", "committedDate": "2020-10-26T17:01:01Z", "message": "Add hook to allow test feature parameters to be overridden by a plugin"}, "afterCommit": {"oid": "7cc88fd8a81c44e66d54a77823e89553697572f7", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7cc88fd8a81c44e66d54a77823e89553697572f7", "committedDate": "2020-10-26T22:25:11Z", "message": "Add hook to allow test feature parameters to be overridden by a plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjIyNTU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-517222555", "createdAt": "2020-10-26T22:29:43Z", "commit": {"oid": "7cc88fd8a81c44e66d54a77823e89553697572f7"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjoyOTo0NFrOHokxhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjozMDoxOVrOHokylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwNzU4OQ==", "bodyText": "you don't need to check for debug enabled unless you're doing something computationally expensive. The logger itself will skip the logging if debug isn't enabled.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#discussion_r512307589", "createdAt": "2020-10-26T22:29:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/testing/TestFeatureParameters.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.testing;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Some functionality is enabled only for integration testing. Such functionality is subject to change between\n+ * releases of the Greengrass Nucleus and/or may result in unstable behavior in production and should be avoided.\n+ */\n+public final class TestFeatureParameters {\n+    private static final Logger LOGGER = LogManager.getLogger(TestFeatureParameters.class);\n+\n+    /**\n+     * Default implementation when not overridden.\n+     */\n+    /*PackagePrivate*/ static TestFeatureParameterInterface DEFAULT_HANDLER = new TestFeatureParameterInterface() {\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public <T> T get(String featureParameterName, T productionValue) {\n+            return productionValue;\n+        }\n+    };\n+\n+    private static final AtomicReference<TestFeatureParameterInterface> handler =\n+                                                                            new AtomicReference<>(DEFAULT_HANDLER);\n+\n+    private TestFeatureParameters() {\n+        // No instance methods\n+    }\n+\n+    /**\n+     * Retrieve either the provided production value of a parameter, or, under test conditions, an alternative value\n+     * specific for the test being undertaken.\n+     *\n+     * @param featureParameterName Name of parameter to query.\n+     * @param productionValue Value to use when not overridden under test conditions.\n+     * @param <T> Simple parameter type (String, Integer, etc).\n+     * @return Production value, or override value.\n+     */\n+    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\") // intentional reference equals\n+    public static <T> T get(String featureParameterName, T productionValue) {\n+        T value = handler.get().get(featureParameterName, productionValue);\n+        if (productionValue == value && LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc88fd8a81c44e66d54a77823e89553697572f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwNzg2Mg==", "bodyText": "this is logging at warn but is only when trace is enabled?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#discussion_r512307862", "createdAt": "2020-10-26T22:30:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/testing/TestFeatureParameters.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.testing;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Some functionality is enabled only for integration testing. Such functionality is subject to change between\n+ * releases of the Greengrass Nucleus and/or may result in unstable behavior in production and should be avoided.\n+ */\n+public final class TestFeatureParameters {\n+    private static final Logger LOGGER = LogManager.getLogger(TestFeatureParameters.class);\n+\n+    /**\n+     * Default implementation when not overridden.\n+     */\n+    /*PackagePrivate*/ static TestFeatureParameterInterface DEFAULT_HANDLER = new TestFeatureParameterInterface() {\n+        /**\n+         * {@inheritDoc}\n+         */\n+        @Override\n+        public <T> T get(String featureParameterName, T productionValue) {\n+            return productionValue;\n+        }\n+    };\n+\n+    private static final AtomicReference<TestFeatureParameterInterface> handler =\n+                                                                            new AtomicReference<>(DEFAULT_HANDLER);\n+\n+    private TestFeatureParameters() {\n+        // No instance methods\n+    }\n+\n+    /**\n+     * Retrieve either the provided production value of a parameter, or, under test conditions, an alternative value\n+     * specific for the test being undertaken.\n+     *\n+     * @param featureParameterName Name of parameter to query.\n+     * @param productionValue Value to use when not overridden under test conditions.\n+     * @param <T> Simple parameter type (String, Integer, etc).\n+     * @return Production value, or override value.\n+     */\n+    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\") // intentional reference equals\n+    public static <T> T get(String featureParameterName, T productionValue) {\n+        T value = handler.get().get(featureParameterName, productionValue);\n+        if (productionValue == value && LOGGER.isDebugEnabled()) {\n+            // Pass through production value logged at debug level\n+            LOGGER.atDebug().addKeyValue(\"FeatureParameterName\", featureParameterName)\n+                    .addKeyValue(\"ProductionValue\", productionValue)\n+                    .log(\"Production Feature Parameter \\\"{}\\\"=\\\"{}\\\" via {}\", featureParameterName, value,\n+                            handler.get().getClass().getSimpleName());\n+        } else if (productionValue != value && LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc88fd8a81c44e66d54a77823e89553697572f7"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41fabd9614bb448b55c16dbde6939730417c49ea", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/41fabd9614bb448b55c16dbde6939730417c49ea", "committedDate": "2020-10-26T22:55:23Z", "message": "Simplify logging. Fix non-atomic use of atomic get."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70e9d08f0b3fe20c07ea1fc9bbde2b79ab4760f1", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/70e9d08f0b3fe20c07ea1fc9bbde2b79ab4760f1", "committedDate": "2020-10-26T23:28:25Z", "message": "Merge branch 'master' into test-feature-parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15519931adb39a4c1ac932fb71e8f8fee7219ff8", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/15519931adb39a4c1ac932fb71e8f8fee7219ff8", "committedDate": "2020-10-27T16:22:32Z", "message": "Merge branch 'master' into test-feature-parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2b4de035fa1394e735a37e0063685750ef009f", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6d2b4de035fa1394e735a37e0063685750ef009f", "committedDate": "2020-10-27T17:53:16Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b8cdab298e1af2320d3eecd1ad6095f98bf8fc", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7b8cdab298e1af2320d3eecd1ad6095f98bf8fc", "committedDate": "2020-10-27T21:19:45Z", "message": "Merge branch 'master' into test-feature-parameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjA2ODM5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-518206839", "createdAt": "2020-10-27T22:46:42Z", "commit": {"oid": "d7b8cdab298e1af2320d3eecd1ad6095f98bf8fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzA1ODk5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-518305899", "createdAt": "2020-10-28T03:52:19Z", "commit": {"oid": "d7b8cdab298e1af2320d3eecd1ad6095f98bf8fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzIxNzI4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/552#pullrequestreview-518321728", "createdAt": "2020-10-28T04:49:32Z", "commit": {"oid": "d7b8cdab298e1af2320d3eecd1ad6095f98bf8fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7072609fd82a0ba69e6379a8a4a54dccccf0c453", "author": {"user": {"login": "JamieHunter", "name": "Jamie Hunter"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7072609fd82a0ba69e6379a8a4a54dccccf0c453", "committedDate": "2020-10-28T14:18:11Z", "message": "Merge branch 'master' into test-feature-parameters"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2800, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}