{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2Mzc5Njg2", "number": 783, "title": "Update README", "bodyText": "Issue #, if available:\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-11T01:06:15Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783", "merged": true, "mergeCommit": {"oid": "267a4e6345ddd8b16c7106ee34a3052c3bf4f52d"}, "closed": true, "closedAt": "2020-12-14T19:01:25Z", "author": {"login": "hui-yang"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk9idAgFqTU0OTczNTY3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmKUcIAFqTU1MTc5MTUzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM1Njcx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-549735671", "createdAt": "2020-12-11T01:20:20Z", "commit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMDoyMVrOIDkzhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMDoyMVrOIDkzhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxOTY1Mg==", "bodyText": "Fine for now, though all these links will need to be updated when we move orgs too, and move master->main", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r540619652", "createdAt": "2020-12-11T01:20:21Z", "author": {"login": "MikeDombo"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -11,7 +11,7 @@ information to effectively respond to your bug report or contribution.\n \n We welcome you to use the GitHub issue tracker to report bugs or suggest features.\n \n-When filing an issue, please check [existing open](https://github.com/aws/aws-greengrass-kernel/issues), or [recently closed](https://github.com/aws/aws-greengrass-kernel/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\n+When filing an issue, please check [existing open](https://github.com/aws/aws-greengrass-nucleus/issues), or [recently closed](https://github.com/aws/aws-greengrass-nucleus/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM2MDE3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-549736017", "createdAt": "2020-12-11T01:21:23Z", "commit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMToyM1rOIDk1Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMToyM1rOIDk1Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDAzOA==", "bodyText": "we should remove this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r540620038", "createdAt": "2020-12-11T01:21:23Z", "author": {"login": "MikeDombo"}, "path": "README.md", "diffHunk": "@@ -7,24 +7,35 @@\n This is the nucleus of AWS's Greengrass IoT device management framework.  It manages the model that describes the\n  software running on the device.  The model is a dependency graph of *services*.  Services have three primary aspects:\n \n-* Parameters\n+* Configuration\n * Dependencies on other services\n * A set of lifecycle phases in the form of a finite state machine.\n \n A *service* may have processes, threads, code, network connections, ... But not\n-necessarily.  Some have all of these, some have only 1.\n+necessarily.  Some have all of these, some have only one.\n \n-You can think of the nucleus as a mashup of `make`, a super-lightweight publish/subscribe system, and a small hierarchic key-value data store.  The various services have continuously varying states that the nucleus monitors and manages.  A dependent service is not started until it's dependencies are started, and if they become unstable, the dependent service is notified.  The internal interconnections are handled via dependency injection. Restarts are managed automatically.\n+You can think of the nucleus as a mash-up of `make`, a super-lightweight publish/subscribe system, and a small\n+ hierarchic key-value data store.  The various services have continuously varying states that the nucleus monitors and manages.\n+   A dependent service is not started until it's dependencies are started, and if they become unstable, the dependent service is notified.\n+     The internal interconnections are handled via dependency injection. Restarts are managed automatically.\n \n-When parameters changes, all users of them are notified.  Everything adapts continuously.\n+When configuration changes, all users of them are notified.  Everything adapts continuously.\n \n ### A quick tour through com.aws.greengrass\n-1. [**config**](src/main/java/com/aws/greengrass/config) Manages the system configuration (model).  It's fundamentally a hierarchic key-value store with timestamps.  It can be serialized to/from yaml, json, or a transaction log.  The transaction log can be replayed to reconstruct the config, or streamed live to another process to maintain a mirror. The terminology is borrowed from the world of publish/subscribe systems.  Node values can have validators and watcher.\n-2. [**dependency**](src/main/java/com/aws/greengrass/dependency) The dependency injection framework.  The meat is in `context.java` which contains a Map of known objects, and the ability to get (and magically create) objects from the Context.  When an object is created by the framework, in does dependency injection.  If the created object participates in the Lifecycle framework, its lifecycle is initiated.  This feeds the Lifecycle dependency graph.\n+1. [**config**](src/main/java/com/aws/greengrass/config) Manages the system configuration (model).  It's\n+ fundamentally a hierarchic key-value store with timestamps.  It can be serialized to/from yaml, json, or a\n+  transaction log.  The transaction log can be replayed to reconstruct the config, or streamed live to another\n+   process to maintain a mirror. The terminology is borrowed from the world of publish/subscribe systems.  Config\n+    values can have validators and watcher.\n+2. [**dependency**](src/main/java/com/aws/greengrass/dependency) The dependency injection framework.  The meat is in\n+ `context.java` which contains a Map of known objects, and the ability to get (and magically create) objects from the\n+  Context.  When an object is created by the framework, it does dependency injection.  If the created object\n+   participates in the Lifecycle framework, its lifecycle is initiated.  This feeds the Lifecycle dependency graph.\n 3. [**lifecyclemanager**](src/main/java/com/aws/greengrass/lifecyclemanager) Ties the model to Lifecycle objects in the dependency graph.  The\n  primary class is `GreengrassService`, which contains most of the state transition logic.  `GenericExternalService` is a\n-  subclass that implements a service whose behavior is defined by bash scripts.  Either of these classes may be\n+  subclass that implements a service whose behavior is defined by commands and scripts.  Either of these classes may be\n    subclassed to provide services whose behavior is defined by code running within Greengrass.\n 4. [**util**](src/main/java/com/aws/greengrass/util) A grab-bag of useful utilities.\n \n-You'll probably find the coding style to be a trifle odd.  It is very paranoid about failures and tries to catch, cope with, and (maybe) repair failures locally.  Mike Duigou did a nice talk on this topic: [Always Be Running: long running and fault tolerant java services](https://youtu.be/agXce0lSo60).\n+You'll probably find the coding style to be a trifle odd.  It is very paranoid about failures and tries to catch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM2NDEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-549736412", "createdAt": "2020-12-11T01:22:32Z", "commit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMjozMlrOIDk2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMjozMlrOIDk2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDQ4MQ==", "bodyText": "nit\nupdate all these to be PascalCase", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r540620481", "createdAt": "2020-12-11T01:22:32Z", "author": {"login": "MikeDombo"}, "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -1,153 +1,116 @@\n-# Greengrass Kernel Configuration Schema\n-Detailed doc in https://quip-amazon.com/35xMAtuSgvha\n+# Greengrass Nucleus Configuration Schema\n \n-## Resolve config workflow\n+## Configuration loading workflow\n \n-**Config load/merge**\n+Raw yaml file \u2192 Resolve platform & Platform Validation (eg: return error on unrecognized platform) \u2192 Resolve Config\n+ & Validation \u2192 Take effect\n \n-Raw yaml file \u2192 Resolve platform & Platform Validation (eg: return error on unrecognized platform) \u2192 Resolve Config & Validation \u2192 take effect\n-\n-Once the config is resolved and loaded in memory, it doesn\u2019t have any platform branches.\n+Once the config is resolved and loaded in runtime, it doesn't have any platform-specific information.\n \n ## Config Schema - Overview\n \n-Config file defines how kernel starts each service.\n-A config file in kernel memory after resolving platform looks like below:\n+The config file defines how Nucleus starts each service. After loaded in runtime, the configuration looks like below:\n \n ```\n-version:\n-  <version> # schema version.\n+system: \n+  rootPath: \"/greengrass/v2\"\n+\n services:\n-  <service1>: #Service name uniquely identifies a service\n+  <service1>: # service name uniquely identifies a service\n     version: # service version. In the format of x.y.z\n-    dependencies: # declare dependency, \n+\n+    componentType: [GENERIC|PLUGIN|LAMBDA|NUCLEUS] # component type. \n+\n+    dependencies: # dependency on other services \n       - <serviceName>:[SOFT/HARD]\n         \n     lifecycle: # lifecycle commands.\n-    \n-    resources: # service reserved resources path.\n-\n-    logging: # logging config.\n-      \n+          \n     configuration: # custom config.\n     \n-    runtime: # namespace for service local datastore\n-        # not rolled back during deployment\n-\n   <service2>:\n     lifecycle:\n-    logging:\n-    \n-  _AUTH_TOKENS: # auth token read by AuthHandler\n-    <authToken>: <serviceName>\n-\n-registered-resource: # resources registered by service\n-  <path>: <SDAResource>\n \n setenv:\n-  # global env var for IPC, TES\n+  # global environment variables for IPC, TES\n ```\n \n ### Config Validation\n \n Root keys have to be recognized keys.\n \n-## Service Config Keys\n+## Service Config\n+\u2018services\u2019 field contains all services config.\n \n ### Lifecycle\n \n-\u2018Services\u2019 field contains all services config.\n-\n ```\n-services: \n <serviceName>:\n   lifecycle:\n+    setenv: # This applies to all lifecycle steps\n+      <key>: defaultValue\n+\n     bootstrap:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM2NjUx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-549736651", "createdAt": "2020-12-11T01:23:13Z", "commit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMzoxM1rOIDk3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyMzoxM1rOIDk3tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMDcyNg==", "bodyText": "is thing name in system? Or is that in the nucleus config?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r540620726", "createdAt": "2020-12-11T01:23:13Z", "author": {"login": "MikeDombo"}, "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -1,153 +1,116 @@\n-# Greengrass Kernel Configuration Schema\n-Detailed doc in https://quip-amazon.com/35xMAtuSgvha\n+# Greengrass Nucleus Configuration Schema\n \n-## Resolve config workflow\n+## Configuration loading workflow\n \n-**Config load/merge**\n+Raw yaml file \u2192 Resolve platform & Platform Validation (eg: return error on unrecognized platform) \u2192 Resolve Config\n+ & Validation \u2192 Take effect\n \n-Raw yaml file \u2192 Resolve platform & Platform Validation (eg: return error on unrecognized platform) \u2192 Resolve Config & Validation \u2192 take effect\n-\n-Once the config is resolved and loaded in memory, it doesn\u2019t have any platform branches.\n+Once the config is resolved and loaded in runtime, it doesn't have any platform-specific information.\n \n ## Config Schema - Overview\n \n-Config file defines how kernel starts each service.\n-A config file in kernel memory after resolving platform looks like below:\n+The config file defines how Nucleus starts each service. After loaded in runtime, the configuration looks like below:\n \n ```\n-version:\n-  <version> # schema version.\n+system: \n+  rootPath: \"/greengrass/v2\"\n+\n services:\n-  <service1>: #Service name uniquely identifies a service\n+  <service1>: # service name uniquely identifies a service\n     version: # service version. In the format of x.y.z\n-    dependencies: # declare dependency, \n+\n+    componentType: [GENERIC|PLUGIN|LAMBDA|NUCLEUS] # component type. \n+\n+    dependencies: # dependency on other services \n       - <serviceName>:[SOFT/HARD]\n         \n     lifecycle: # lifecycle commands.\n-    \n-    resources: # service reserved resources path.\n-\n-    logging: # logging config.\n-      \n+          \n     configuration: # custom config.\n     \n-    runtime: # namespace for service local datastore\n-        # not rolled back during deployment\n-\n   <service2>:\n     lifecycle:\n-    logging:\n-    \n-  _AUTH_TOKENS: # auth token read by AuthHandler\n-    <authToken>: <serviceName>\n-\n-registered-resource: # resources registered by service\n-  <path>: <SDAResource>\n \n setenv:\n-  # global env var for IPC, TES\n+  # global environment variables for IPC, TES\n ```\n \n ### Config Validation\n \n Root keys have to be recognized keys.\n \n-## Service Config Keys\n+## Service Config\n+\u2018services\u2019 field contains all services config.\n \n ### Lifecycle\n \n-\u2018Services\u2019 field contains all services config.\n-\n ```\n-services: \n <serviceName>:\n   lifecycle:\n+    setenv: # This applies to all lifecycle steps\n+      <key>: defaultValue\n+\n     bootstrap:\n+      requiresPrivilege: true|false # Optional. Run with root privileges.\n       script:\n-      timeout: # optional. timeout in number of seconds. Default to 120 sec.\n-      setenv: # key-value environment variables. optional, can override the parent 'setenv'\n-      skipif: onpath <executable>|exists <file> # optional\n+      setenv: # Optional. Key-value environment variables. It can override the parent 'setenv'.\n+      skipif: onpath <executable>|exists <file> # Optional. Condition to skip this lifecycle step.\n+      timeout: # Optional. Timeout in number of seconds. Default to 120 sec.\n \n     install:\n-      skipif: onpath <executable>|exists <file> # optional\n+      requiresPrivilege: # Optional. Run with root privileges.\n       script:\n-      timeout: # optional. timeout in number of seconds. Default to 120 sec.\n-      setenv: # key-value environment variables. optional, can override the parent 'setenv'\n+      setenv: # Optional. Key-value environment variables. It can override the parent 'setenv'.\n+      skipif: onpath <executable>|exists <file> # Optional.\n+      timeout: # Optional. Timeout in number of seconds. Default to 120 sec.\n       \n-    startup: # mutually exclusive from 'run'\n+    startup: # This step is mutually exclusive from 'run'.\n+      requiresPrivilege: # Optional. Run with root privileges.\n       script:\n-      timeout: # Default to 120 sec\n       setenv:\n+      skipif: onpath <executable>|exists <file> # Optional.\n+      timeout: # Optional. Timeout in number of seconds. Default to 120 sec.\n \n-    run: # mutually exclusive from 'startup'\n+    run: # This step is mutually exclusive from 'startup'.\n+      requiresPrivilege: # Optional. Run with root privileges.\n       script:\n       setenv:\n-      periodicity: # Perodically run the command\n+      skipif: onpath <executable>|exists <file> # Optional.\n+      timeout: # Optional. Timeout in number of seconds. Default to no timeout.\n       \n-    shutdown: # can co-exist with both startup/run\n+    shutdown: # This step can co-exist with both startup and run\n+      requiresPrivilege: # Optional. Run with root privileges.\n       script:\n       setenv:\n-      timeout: # Optional. Default to 15 seconds.\n+      skipif: onpath <executable>|exists <file> # Optional.\n+      timeout: # Optional. Timeout in number of seconds. Default to 15 seconds.\n     \n-    setenv: # apply to all commands\n-      <key>: defaultValue\n-\n-    recover:\n-      script: # will be run every time service enters error.\n+    recover: # This step runs every time service enters error state.\n+      requiresPrivilege: # Optional. Run with root privileges.\n+      script: \n       setenv:\n-\n-    checkIfSafeToUpdate:\n-       recheckPeriod: # default 30 seconds.\n-       timeout: # default 5 sec.\n-       script:\n-\n-    updatesCompleted:\n-       script:\n-       timeout: # default 5 sec.\n+      skipif: onpath <executable>|exists <file> # Optional.\n+      timeout: # Optional. timeout in number of seconds. Default to 60 sec.\n ```\n \n ### Dependency\n \n-Detailed documentation is at [Greengrass Service Hot-pluggable Dependencies](https://quip-amazon.com/y29dAC02fUBu)\n-\n ```\n myCustomService:\n   dependencies:\n-    - <serviceName>:dependencyType\n+    - <serviceName>:<dependencyType>\n ```\n \n-**DependencyType**\n-DependencyType is either **SOFT or HARD**\n-\n-### Logging\n-\n-Detailed design doc at: [[Design] Greengrass Logging Service](https://quip-amazon.com/QbwaANkaR95C)\n-\n-### Custom configuration\n-\n-The reason of using custom configuration instead of environment variable is to support dynamically reload config change without restarting the service. Service can listen on config change through IPC and apply the new change without restart.\n-\n-Any custom configuration locates in \u2018custom\u2019 field. Custom config field are passed to service through IPC. Currently custom configuration only support one level key-value. Detailed discussion is at [Custom config supporting complex data structure](https://quip-amazon.com/35xMAtuSgvha#aeM9CAdxOuX)\n-\n-All changes in custom fields will not restart service. Details of how configuration change push/listening can be supported is detailed in [Configuration IPC Application](https://quip-amazon.com/xtNNAdaAl9ZA).\n-\n-Detail of dynamic load config is at [Dynamically reload config without restarting Greengrass service](https://quip-amazon.com/mld0ATVx17YK)\n-\n-```\n-myCustomService: \n-  lifecycle:\n-  dependencies:\n-  custom: \n-    key1: val1\n-    config2: val2\n-```\n+DependencyType is either **SOFT or HARD**. \n+- SOFT \u2013 The dependent service doesn't restart if the dependency changes state.\n+- HARD \u2013 The dependent service restarts if the dependency changes state.\n \n ## System Config\n System config that does not change after kernel setup is hidden from deployments\n and modeled under the system config key\n ```\n system: \n-  rootPath:\n+  rootPath: \"/greengrass/v2\"\n   thingName: \"test_thing\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzM3MzEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-549737311", "createdAt": "2020-12-11T01:25:01Z", "commit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyNTowMVrOIDk6TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyNTowMVrOIDk6TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMTM4OQ==", "bodyText": "add section for permissions, and talk about how that interacts with archives.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r540621389", "createdAt": "2020-12-11T01:25:01Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -236,4 +233,4 @@ Artifacts:\n Artifacts are referenced by artifact URIs. Currently Greengrass supports Greengrass repository and s3 as artifact\n  storage location.\n ##### Unarchive\n-Indicate whether automatically unarchive artifact\n+Indicate to automatically unarchive artifact. Support ZIP files.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869"}, "originalPosition": 217}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "761c7082e14482c09a50d9a78e96a687465c9869", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/761c7082e14482c09a50d9a78e96a687465c9869", "committedDate": "2020-12-11T01:05:47Z", "message": "Update README"}, "afterCommit": {"oid": "299dae73d25f48c4bf3a6f9e5307dcbc2bb97e0f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/299dae73d25f48c4bf3a6f9e5307dcbc2bb97e0f", "committedDate": "2020-12-11T08:15:01Z", "message": "Address comments and cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "220083b660a1719ec275861909b7fd93ce521c82", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/220083b660a1719ec275861909b7fd93ce521c82", "committedDate": "2020-12-11T20:21:34Z", "message": "Update README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08cd8aaaf3a004be68bb0383b1b379ae8ec63d13", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/08cd8aaaf3a004be68bb0383b1b379ae8ec63d13", "committedDate": "2020-12-11T20:21:34Z", "message": "Address comments and cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a63bf9696babb5428164a856b83fccdbf1821f8", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8a63bf9696babb5428164a856b83fccdbf1821f8", "committedDate": "2020-12-11T20:21:34Z", "message": "Add accessControl and update deployment readme"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7ff99508886b5d2ea47879cddcf9d27f87545f4", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f7ff99508886b5d2ea47879cddcf9d27f87545f4", "committedDate": "2020-12-11T18:53:27Z", "message": "Add accessControl"}, "afterCommit": {"oid": "8a63bf9696babb5428164a856b83fccdbf1821f8", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8a63bf9696babb5428164a856b83fccdbf1821f8", "committedDate": "2020-12-11T20:21:34Z", "message": "Add accessControl and update deployment readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTkzNTE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-550593519", "createdAt": "2020-12-11T21:35:55Z", "commit": {"oid": "8a63bf9696babb5428164a856b83fccdbf1821f8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTozNTo1NVrOIEPaNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0MjoyNVrOIEPyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMxNzY4Nw==", "bodyText": "\"JDK 8 is required because we want to be able to run this on devices where only JDK8 is available.  It is often run on more modern JDKs.\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r541317687", "createdAt": "2020-12-11T21:35:55Z", "author": {"login": "JamesGosling"}, "path": "DEVELOPING.md", "diffHunk": "@@ -1,41 +1,39 @@\n # Greengrass Developer Guide\n The purpose of this guide is to get you up to speed with developing Greengrass.\n \n+## Prerequisite\n+1. Install JDK 8 and set up JAVA_HOME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a63bf9696babb5428164a856b83fccdbf1821f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzgzMg==", "bodyText": "Is this essentially a copy of the similar file in component-common?  https://github.com/aws/aws-greengrass-component-common/blob/master/RECIPE_REFERENCE.md?  Perhaps this file should be deleted and a reference to the other repo should be placed somewhere?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r541323832", "createdAt": "2020-12-11T21:42:25Z", "author": {"login": "JamesGosling"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -1,78 +1,76 @@\n # Component Recipe Reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a63bf9696babb5428164a856b83fccdbf1821f8"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf29fe6755c7ced90f5e286a17e7d582e880581", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/adf29fe6755c7ced90f5e286a17e7d582e880581", "committedDate": "2020-12-11T22:34:38Z", "message": "Reference recipe readme in common model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjY3MTI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-550667125", "createdAt": "2020-12-12T00:47:31Z", "commit": {"oid": "adf29fe6755c7ced90f5e286a17e7d582e880581"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0NzozMVrOIEYCrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0NzozMVrOIEYCrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTExOQ==", "bodyText": "main, not master here and elsewhere", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r541459119", "createdAt": "2020-12-12T00:47:31Z", "author": {"login": "MikeDombo"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -56,4 +56,4 @@ If you discover a potential security issue in this project we ask that you notif\n \n ## Licensing\n \n-See the [LICENSE](https://github.com/aws/aws-greengrass-kernel/blob/master/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n+See the [LICENSE](https://github.com/aws-greengrass/aws-greengrass-nucleus/blob/master/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf29fe6755c7ced90f5e286a17e7d582e880581"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjY4NDI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-550668425", "createdAt": "2020-12-12T00:54:30Z", "commit": {"oid": "adf29fe6755c7ced90f5e286a17e7d582e880581"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo1NDozMFrOIEYJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo1NDozMFrOIEYJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MDc2NA==", "bodyText": "you don't need to add it here, but since you asked, there's also mqttProxy which is for publishing to iot core", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#discussion_r541460764", "createdAt": "2020-12-12T00:54:30Z", "author": {"login": "MikeDombo"}, "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -1,153 +1,137 @@\n-# Greengrass Kernel Configuration Schema\n-Detailed doc in https://quip-amazon.com/35xMAtuSgvha\n+# Greengrass Nucleus Configuration Schema\n \n-## Resolve config workflow\n+## Configuration loading workflow\n \n-**Config load/merge**\n+Raw yaml file \u2192 Resolve platform & Platform Validation (eg: return error on unrecognized platform) \u2192 Resolve Config\n+ & Validation \u2192 Take effect\n \n-Raw yaml file \u2192 Resolve platform & Platform Validation (eg: return error on unrecognized platform) \u2192 Resolve Config & Validation \u2192 take effect\n-\n-Once the config is resolved and loaded in memory, it doesn\u2019t have any platform branches.\n+Once the config is resolved and loaded in runtime, it doesn't have any platform-specific information.\n \n ## Config Schema - Overview\n \n-Config file defines how kernel starts each service.\n-A config file in kernel memory after resolving platform looks like below:\n+The config file defines how Nucleus starts each service. After loaded in runtime, the configuration looks like below:\n \n ```\n-version:\n-  <version> # schema version.\n+system: \n+  rootPath: \"/greengrass/v2\"\n+\n services:\n-  <service1>: #Service name uniquely identifies a service\n+  <service1>: # service name uniquely identifies a service\n     version: # service version. In the format of x.y.z\n-    dependencies: # declare dependency, \n+\n+    componentType: [GENERIC|PLUGIN|LAMBDA|NUCLEUS] # component type.\n+\n+    dependencies: # dependency on other services\n       - <serviceName>:[SOFT/HARD]\n         \n+    runWith:\n+      posixUser: <username[:groupname]> # Optional. Posix user (and group) to run lifecycle steps as. Overrides runWithDefault in Nucleus config\n+\n     lifecycle: # lifecycle commands.\n-    \n-    resources: # service reserved resources path.\n \n-    logging: # logging config.\n-      \n     configuration: # custom config.\n-    \n-    runtime: # namespace for service local datastore\n-        # not rolled back during deployment\n+      <configName>: <configValue>\n+\n+      accessControl: # authorization to access Greengrass resources\n+        aws.greengrass.ipc.pubsub:\n+          policyId1:\n+            operations:\n+              - 'aws.greengrass#PublishToTopic'\n+              - \"aws.greengrass#SubscribeToTopic\"\n+            policyDescription: \"access to pubsub topics\"\n+            resources:\n+              - \"test/topic\"\n+        aws.greengrass.SecretManager:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf29fe6755c7ced90f5e286a17e7d582e880581"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjY5MjEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-550669211", "createdAt": "2020-12-12T00:58:50Z", "commit": {"oid": "adf29fe6755c7ced90f5e286a17e7d582e880581"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f421b37828baf19d6779a94dfcf77f87d10d182", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f421b37828baf19d6779a94dfcf77f87d10d182", "committedDate": "2020-12-12T18:58:15Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1e21d3732e30a2f35ddeabb166c7e9feae9a515", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b1e21d3732e30a2f35ddeabb166c7e9feae9a515", "committedDate": "2020-12-12T01:39:28Z", "message": "Address comments"}, "afterCommit": {"oid": "4f421b37828baf19d6779a94dfcf77f87d10d182", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f421b37828baf19d6779a94dfcf77f87d10d182", "committedDate": "2020-12-12T18:58:15Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7520f49f538d7940f885a773e1881efe37f8c5d4", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7520f49f538d7940f885a773e1881efe37f8c5d4", "committedDate": "2020-12-14T17:53:47Z", "message": "Merge branch 'master' into readme-cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzQ5MjU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-551749255", "createdAt": "2020-12-14T18:08:23Z", "commit": {"oid": "7520f49f538d7940f885a773e1881efe37f8c5d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzkxNTM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/783#pullrequestreview-551791534", "createdAt": "2020-12-14T18:47:44Z", "commit": {"oid": "7520f49f538d7940f885a773e1881efe37f8c5d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}