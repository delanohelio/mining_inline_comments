{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDcxNTM2", "number": 101, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxODozM1rODl-l3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDozMToxN1rODnning==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ5NDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxODozM1rOFzLCmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTozMDo1NlrOFzMuIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjU4NQ==", "bodyText": "How is rootPackagesToRemove derived from? Can it be included in the document?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389202585", "createdAt": "2020-03-07T00:18:33Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDExNA==", "bodyText": "It cannot be included in deployment document because deployment document is limited to a single fleet while a package even if removed in deployment for one fleet may be still needed by other fleets the device belongs to. As discussed a few days ago, there will be a mapping of fleets <-> packages maintained at the device which will handle deployments for multiple fleets. This can be used to find out what top level packages are no longer needed by any fleet and need to be removed from Kernel config. Logically DA will manage that fleets <-> packages mapping which is why I'm expecting it to pass the to be removed packages to the config resolver", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389230114", "createdAt": "2020-03-07T05:30:56Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjU4NQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ5OTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyMjozM1rOFzLFtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0NDowOFrOFzLUkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzM4MQ==", "bodyText": "All these gets should take a timeout, and that timeout should probably come from the caller of this deployment task, or something like that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389203381", "createdAt": "2020-03-07T00:22:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final DeploymentDocument document;\n+\n+    @Override\n+    public Void call() throws Exception {\n+        List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+        packageCache.preparePackages(desiredPackages).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjUyNA==", "bodyText": "Sure, I copied it as it is from Feng's PR, I think it will be taken care of when deployment code is cleaned up", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389206524", "createdAt": "2020-03-07T00:40:15Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final DeploymentDocument document;\n+\n+    @Override\n+    public Void call() throws Exception {\n+        List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+        packageCache.preparePackages(desiredPackages).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzM4MQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzE4Ng==", "bodyText": "Sounds good.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389207186", "createdAt": "2020-03-07T00:44:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final DeploymentDocument document;\n+\n+    @Override\n+    public Void call() throws Exception {\n+        List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+        packageCache.preparePackages(desiredPackages).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzM4MQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUwMTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyNDo0NlrOFzLHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0Njo1MVrOF1syDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzc0OA==", "bodyText": "Seems like since this is the KernelConfigResolver that it should be the bridge between DA and Kernel. In that way, DA should not tell it what packages to remove, but I think that this class itself should determine what packages to remove.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389203748", "createdAt": "2020-03-07T00:24:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjk5OA==", "bodyText": "This will be derived from the local map we will have in the device for fleet -> top level packages, at the moment I'm assuming deployment agent will have that information and so it can pass it on to the config resolver. Config resolver as it is will not be capable of finding out what to remove because that information is not in the deployment document", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389206998", "createdAt": "2020-03-07T00:42:59Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzc0OA=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzg3MA==", "bodyText": "Maybe add a TODO in DeploymentTask or somewhere else, that we need to find out this information rootPackagesToRemove.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391833870", "createdAt": "2020-03-12T19:08:19Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzc0OA=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MjU1OA==", "bodyText": "Yeah added a TODO in DeploymentTask", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391852558", "createdAt": "2020-03-12T19:46:51Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzc0OA=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUwNDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyNjoxOVrOFzLIdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0MzowOFrOFzLT7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDA4Nw==", "bodyText": "[nit]\nUse method reference instead of lambda: EvergreenService::getName", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389204087", "createdAt": "2020-03-07T00:26:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzAyMg==", "bodyText": "Sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389207022", "createdAt": "2020-03-07T00:43:08Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDA4Nw=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUwNjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyODoxOVrOFzLJ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0NDowNFrOFzLUhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDQ0Mw==", "bodyText": "Instead of null, why not just return the Optional?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389204443", "createdAt": "2020-03-07T00:28:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());\n+        kernelDependencies.removeAll(rootPackagesToRemove);\n+        kernelDependencies.addAll(getRootPackagesToAdd(document).stream().map(PackageIdentifier::getName)\n+                .collect(Collectors.toSet()));\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        addConfigForServiceDependencies(mainLifecycleMap, kernelDependencies);\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    void addConfigForServiceDependencies(Map<Object, Object> lifecycle, final Set<String> dependencies) {\n+        lifecycle.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencies));\n+    }\n+\n+    boolean packageExistsInDeployment(DeploymentDocument document, PackageIdentifier packageIdentifier) {\n+        return getMatchingPackageConfigFromDeployment(document, packageIdentifier.getName(),\n+                packageIdentifier.getVersion().toString()) != null;\n+    }\n+\n+    DeploymentPackageConfiguration getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                          String packageName, String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzE3Mg==", "bodyText": "Sure, I have to clean up and optimize this code still, for now let's identify major conflicts with everyone's understanding on what this class should do", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389207172", "createdAt": "2020-03-07T00:44:04Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());\n+        kernelDependencies.removeAll(rootPackagesToRemove);\n+        kernelDependencies.addAll(getRootPackagesToAdd(document).stream().map(PackageIdentifier::getName)\n+                .collect(Collectors.toSet()));\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        addConfigForServiceDependencies(mainLifecycleMap, kernelDependencies);\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    void addConfigForServiceDependencies(Map<Object, Object> lifecycle, final Set<String> dependencies) {\n+        lifecycle.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencies));\n+    }\n+\n+    boolean packageExistsInDeployment(DeploymentDocument document, PackageIdentifier packageIdentifier) {\n+        return getMatchingPackageConfigFromDeployment(document, packageIdentifier.getName(),\n+                packageIdentifier.getVersion().toString()) != null;\n+    }\n+\n+    DeploymentPackageConfiguration getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                          String packageName, String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny().orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDQ0Mw=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUwODQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozMDoxMVrOFzLLMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTozMTo0NlrOFzMuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDc4NQ==", "bodyText": "I'm not too sure about the pojos we have right now, but this seems to be unnecessarily copying data by making a new PackageIdentifier. Is it possible to just use the existing package POJO that is in the getDeploymentPackageConfigurationList?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389204785", "createdAt": "2020-03-07T00:30:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());\n+        kernelDependencies.removeAll(rootPackagesToRemove);\n+        kernelDependencies.addAll(getRootPackagesToAdd(document).stream().map(PackageIdentifier::getName)\n+                .collect(Collectors.toSet()));\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        addConfigForServiceDependencies(mainLifecycleMap, kernelDependencies);\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    void addConfigForServiceDependencies(Map<Object, Object> lifecycle, final Set<String> dependencies) {\n+        lifecycle.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencies));\n+    }\n+\n+    boolean packageExistsInDeployment(DeploymentDocument document, PackageIdentifier packageIdentifier) {\n+        return getMatchingPackageConfigFromDeployment(document, packageIdentifier.getName(),\n+                packageIdentifier.getVersion().toString()) != null;\n+    }\n+\n+    DeploymentPackageConfiguration getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                          String packageName, String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny().orElse(null);\n+    }\n+\n+    Set<PackageParameter> resolveParameterValuesToUse(Package pkg, DeploymentDocument document) {\n+        // If values for parameters were set in deployment they should be used\n+        Set<PackageParameter> resolvedParams = new HashSet<>(getParametersFromDeployment(document, pkg));\n+\n+        // Use defaults for parameters for which no values were set in deployment\n+        resolvedParams.addAll(pkg.getPackageParameters());\n+        return resolvedParams;\n+    }\n+\n+    Set<PackageParameter> getParametersFromDeployment(DeploymentDocument document, Package pkg) {\n+        return getMatchingPackageConfigFromDeployment(document, pkg.getPackageName(), pkg.getVersion().toString())\n+                .getParameters();\n+    }\n+\n+    /*\n+     * Deployment document has a flat list of packages, we need to identify those that are the root\n+     * packages that customer added so that they can be added as the top level dependencies of the main service.\n+     */\n+    Set<PackageIdentifier> getRootPackagesToAdd(DeploymentDocument document) {\n+        Set<PackageIdentifier> rootPackages = document.getDeploymentPackageConfigurationList().stream()\n+                .map(pkg -> new PackageIdentifier(pkg.getPackageName(),\n+                        new Semver(pkg.getResolvedVersion(), Semver.SemverType.NPM))).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzc3Mw==", "bodyText": "I'm not sure if the document will have dependency information in deployment doc after refactoring, and even with the current modeling it does not have this information readily available in the form of package name - version. If this turns out to be redundant I'll optimize", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389207773", "createdAt": "2020-03-07T00:48:07Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());\n+        kernelDependencies.removeAll(rootPackagesToRemove);\n+        kernelDependencies.addAll(getRootPackagesToAdd(document).stream().map(PackageIdentifier::getName)\n+                .collect(Collectors.toSet()));\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        addConfigForServiceDependencies(mainLifecycleMap, kernelDependencies);\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    void addConfigForServiceDependencies(Map<Object, Object> lifecycle, final Set<String> dependencies) {\n+        lifecycle.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencies));\n+    }\n+\n+    boolean packageExistsInDeployment(DeploymentDocument document, PackageIdentifier packageIdentifier) {\n+        return getMatchingPackageConfigFromDeployment(document, packageIdentifier.getName(),\n+                packageIdentifier.getVersion().toString()) != null;\n+    }\n+\n+    DeploymentPackageConfiguration getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                          String packageName, String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny().orElse(null);\n+    }\n+\n+    Set<PackageParameter> resolveParameterValuesToUse(Package pkg, DeploymentDocument document) {\n+        // If values for parameters were set in deployment they should be used\n+        Set<PackageParameter> resolvedParams = new HashSet<>(getParametersFromDeployment(document, pkg));\n+\n+        // Use defaults for parameters for which no values were set in deployment\n+        resolvedParams.addAll(pkg.getPackageParameters());\n+        return resolvedParams;\n+    }\n+\n+    Set<PackageParameter> getParametersFromDeployment(DeploymentDocument document, Package pkg) {\n+        return getMatchingPackageConfigFromDeployment(document, pkg.getPackageName(), pkg.getVersion().toString())\n+                .getParameters();\n+    }\n+\n+    /*\n+     * Deployment document has a flat list of packages, we need to identify those that are the root\n+     * packages that customer added so that they can be added as the top level dependencies of the main service.\n+     */\n+    Set<PackageIdentifier> getRootPackagesToAdd(DeploymentDocument document) {\n+        Set<PackageIdentifier> rootPackages = document.getDeploymentPackageConfigurationList().stream()\n+                .map(pkg -> new PackageIdentifier(pkg.getPackageName(),\n+                        new Semver(pkg.getResolvedVersion(), Semver.SemverType.NPM))).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDc4NQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwOTY4MA==", "bodyText": "Isn't listOfPackagesToDeploy in the deploymentDocument the top level packages to be deploy?  We can modify it to include version information too.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389209680", "createdAt": "2020-03-07T01:00:32Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());\n+        kernelDependencies.removeAll(rootPackagesToRemove);\n+        kernelDependencies.addAll(getRootPackagesToAdd(document).stream().map(PackageIdentifier::getName)\n+                .collect(Collectors.toSet()));\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        addConfigForServiceDependencies(mainLifecycleMap, kernelDependencies);\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    void addConfigForServiceDependencies(Map<Object, Object> lifecycle, final Set<String> dependencies) {\n+        lifecycle.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencies));\n+    }\n+\n+    boolean packageExistsInDeployment(DeploymentDocument document, PackageIdentifier packageIdentifier) {\n+        return getMatchingPackageConfigFromDeployment(document, packageIdentifier.getName(),\n+                packageIdentifier.getVersion().toString()) != null;\n+    }\n+\n+    DeploymentPackageConfiguration getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                          String packageName, String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny().orElse(null);\n+    }\n+\n+    Set<PackageParameter> resolveParameterValuesToUse(Package pkg, DeploymentDocument document) {\n+        // If values for parameters were set in deployment they should be used\n+        Set<PackageParameter> resolvedParams = new HashSet<>(getParametersFromDeployment(document, pkg));\n+\n+        // Use defaults for parameters for which no values were set in deployment\n+        resolvedParams.addAll(pkg.getPackageParameters());\n+        return resolvedParams;\n+    }\n+\n+    Set<PackageParameter> getParametersFromDeployment(DeploymentDocument document, Package pkg) {\n+        return getMatchingPackageConfigFromDeployment(document, pkg.getPackageName(), pkg.getVersion().toString())\n+                .getParameters();\n+    }\n+\n+    /*\n+     * Deployment document has a flat list of packages, we need to identify those that are the root\n+     * packages that customer added so that they can be added as the top level dependencies of the main service.\n+     */\n+    Set<PackageIdentifier> getRootPackagesToAdd(DeploymentDocument document) {\n+        Set<PackageIdentifier> rootPackages = document.getDeploymentPackageConfigurationList().stream()\n+                .map(pkg -> new PackageIdentifier(pkg.getPackageName(),\n+                        new Semver(pkg.getResolvedVersion(), Semver.SemverType.NPM))).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDc4NQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDE4MA==", "bodyText": "Right, I didn't know this was readily available in the deployment document, fixed it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389230180", "createdAt": "2020-03-07T05:31:46Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);\n+            for (Object childLifecycleKey : childLifecycleMap.keySet()) {\n+                interpolate(childLifecycleKey, childLifecycleMap, packageParameters);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Recompute main service dependencies for deployment.\n+     *\n+     * @return main service with updated dependencies\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<String> rootPackagesToRemove, DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(s -> s.getName()).collect(Collectors.toSet());\n+        kernelDependencies.removeAll(rootPackagesToRemove);\n+        kernelDependencies.addAll(getRootPackagesToAdd(document).stream().map(PackageIdentifier::getName)\n+                .collect(Collectors.toSet()));\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        addConfigForServiceDependencies(mainLifecycleMap, kernelDependencies);\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    void addConfigForServiceDependencies(Map<Object, Object> lifecycle, final Set<String> dependencies) {\n+        lifecycle.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencies));\n+    }\n+\n+    boolean packageExistsInDeployment(DeploymentDocument document, PackageIdentifier packageIdentifier) {\n+        return getMatchingPackageConfigFromDeployment(document, packageIdentifier.getName(),\n+                packageIdentifier.getVersion().toString()) != null;\n+    }\n+\n+    DeploymentPackageConfiguration getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                          String packageName, String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny().orElse(null);\n+    }\n+\n+    Set<PackageParameter> resolveParameterValuesToUse(Package pkg, DeploymentDocument document) {\n+        // If values for parameters were set in deployment they should be used\n+        Set<PackageParameter> resolvedParams = new HashSet<>(getParametersFromDeployment(document, pkg));\n+\n+        // Use defaults for parameters for which no values were set in deployment\n+        resolvedParams.addAll(pkg.getPackageParameters());\n+        return resolvedParams;\n+    }\n+\n+    Set<PackageParameter> getParametersFromDeployment(DeploymentDocument document, Package pkg) {\n+        return getMatchingPackageConfigFromDeployment(document, pkg.getPackageName(), pkg.getVersion().toString())\n+                .getParameters();\n+    }\n+\n+    /*\n+     * Deployment document has a flat list of packages, we need to identify those that are the root\n+     * packages that customer added so that they can be added as the top level dependencies of the main service.\n+     */\n+    Set<PackageIdentifier> getRootPackagesToAdd(DeploymentDocument document) {\n+        Set<PackageIdentifier> rootPackages = document.getDeploymentPackageConfigurationList().stream()\n+                .map(pkg -> new PackageIdentifier(pkg.getPackageName(),\n+                        new Semver(pkg.getResolvedVersion(), Semver.SemverType.NPM))).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDc4NQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUzMzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo1NDoxMFrOFzLaVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxMTo1OVrOF0bHgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwODY2MQ==", "bodyText": "How do we know it must be a map? Can it be a list?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389208661", "createdAt": "2020-03-07T00:54:10Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDI0OQ==", "bodyText": "As of today there are no lists/sets, but I'll talk to the Kernel folks to see if there is a possibility of seeing anything other than plain strings and nested config maps here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389230249", "createdAt": "2020-03-07T05:33:21Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwODY2MQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDU2MA==", "bodyText": "Talked to @ShirleyZheng92 and turns out this can be a list, in that case I will need to add another condition here to handle lists, I'll do that in the next update", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r390514560", "createdAt": "2020-03-10T18:11:59Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,\n+                             Set<PackageParameter> packageParameters) {\n+        if (lifecycle.get(lifecycleKey) instanceof String) {\n+            String value = (String) lifecycle.get(lifecycleKey);\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            lifecycle.put(lifecycleKey, value);\n+\n+            // TODO : Handle system parameters\n+        } else {\n+            Map<Object, Object> childLifecycleMap = (Map<Object, Object>) lifecycle.get(lifecycleKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwODY2MQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUzNzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo1NzozM1rOFzLcbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTozMzozNVrOFzMusw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwOTE5OQ==", "bodyText": "Ideally I would prefer not to mutate the object passed into a method. Can we change to return the value instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389209199", "createdAt": "2020-03-07T00:57:33Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDI1OQ==", "bodyText": "Changed it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389230259", "createdAt": "2020-03-07T05:33:35Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,\n+                                DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen over\n+        // the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> lifecycle = new HashMap<>(pkg.getLifecycle());\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(pkg, document);\n+        for (Object lifecycleKey : lifecycle.keySet()) {\n+            interpolate(lifecycleKey, lifecycle, resolvedParams);\n+        }\n+\n+        // Generate requires list\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        addConfigForServiceDependencies(lifecycle, dependencyServiceNames);\n+\n+        lifecycle.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        newConfig.put(pkg.getPackageName(), lifecycle);\n+\n+    }\n+\n+    /**\n+     * For lifecycle key-value pair of a package, substitutes parameter values.\n+     *\n+     * @param lifecycleKey      key of the key value pair in lifecycle map\n+     * @param lifecycle         lifecycle map\n+     * @param packageParameters all parameters configured for package\n+     */\n+    private void interpolate(Object lifecycleKey, Map<Object, Object> lifecycle,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwOTE5OQ=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTU0NjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMTowNjozNVrOFzLhsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNTozMzo0MVrOFzMuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMDU0Ng==", "bodyText": "Same here. Let's not return value through parameter. This can be changed to\nprivate Object generateConfig(PackageIdentifier packageIdentifier, DeploymentDocument document)\n\nIn the caller code line52:\npackageIdentifiers.stream().collect(Collectors.toMap(PackageIdentifier::getName, p -> generateConfig(p, document));", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389210546", "createdAt": "2020-03-07T01:06:35Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDI2Ng==", "bodyText": "Changed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r389230266", "createdAt": "2020-03-07T05:33:41Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.ConfigResolver;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.vdurmont.semver4j.Semver;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final Logger logger = LogManager.getLogger(ConfigResolver.class);\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> newConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> processPackage(newConfig, packageIdentifier, document));\n+\n+        newConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return newConfig;\n+    }\n+\n+    /**\n+     * Processes lifecycle section of each packaage and adds it to the config.\n+     *\n+     * @param newConfig instance of config that services are to be added to\n+     * @param pkg       package object with package information\n+     */\n+    // TODO : Revisit after the Kernel config syntax is updated, DA currently does not understand the lifecycle syntax\n+    private void processPackage(Map<Object, Object> newConfig, PackageIdentifier packageIdentifier,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMDU0Ng=="}, "originalCommit": {"oid": "48457ace2e8873fcd3ff8cf165876729b97659d7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzE0ODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMTozNjo0OFrOFz-t-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODowOTo1NFrOF0bCpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0OTI3NA==", "bodyText": "This assumption may not be true if the job document has multiple versions of a package. It might be better to check with kernel instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r390049274", "createdAt": "2020-03-10T01:36:48Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each packaage and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen during\n+        // dependency resolution over the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4187eb8d80c1e0645e8a54b592a84ef3bfa52e7f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMzMxNg==", "bodyText": "I'm not very clear about how version info in the document is changing, so far when there was going to be one proposed version in the doc and dependency resolution locally could decide to resolve to the running version if it satisfies version constraint, in such a case parameter handling becomes difficult, because the chosen version after local dependency resolution may not be present in the job document so we wouldn't find the right parameters in the document. With your changes, will the job document always have the version that gets picked? If not, how do we find parameters for the package in it? since parameters can be different for different versions of the same package", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r390513316", "createdAt": "2020-03-10T18:09:54Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each packaage and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen during\n+        // dependency resolution over the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0OTI3NA=="}, "originalCommit": {"oid": "4187eb8d80c1e0645e8a54b592a84ef3bfa52e7f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzE2NTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMTo0NzoyOVrOFz-3-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0NTozOFrOF1svvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1MTgzMw==", "bodyText": "We might also want to put the version constraints of each deployment fleet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r390051833", "createdAt": "2020-03-10T01:47:29Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each packaage and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen during\n+        // dependency resolution over the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return Collections.EMPTY_MAP;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax, then change the following code accordingly\n+\n+        // Generate dependencies\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4187eb8d80c1e0645e8a54b592a84ef3bfa52e7f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMDI4Ng==", "bodyText": "Could you elaborate a little on how this information is supposed to be stored, when you say each fleet? do you mean there should be multiple config key value pairs for fleet - package version constraint? what happens when a package is not in all fleets?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r390510286", "createdAt": "2020-03-10T18:05:05Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each packaage and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen during\n+        // dependency resolution over the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return Collections.EMPTY_MAP;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax, then change the following code accordingly\n+\n+        // Generate dependencies\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1MTgzMw=="}, "originalCommit": {"oid": "4187eb8d80c1e0645e8a54b592a84ef3bfa52e7f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyMTkzMg==", "bodyText": "I'm fine with your current implementation, but we might need some more discussions later about how to store this version constraint information.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391821932", "createdAt": "2020-03-12T18:45:04Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each packaage and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen during\n+        // dependency resolution over the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return Collections.EMPTY_MAP;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax, then change the following code accordingly\n+\n+        // Generate dependencies\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1MTgzMw=="}, "originalCommit": {"oid": "4187eb8d80c1e0645e8a54b592a84ef3bfa52e7f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MTk2NA==", "bodyText": "yeah, as discussed in the backlog meeting, we need a discussion but currently I'm storing the info you send as it is in kernel config", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391851964", "createdAt": "2020-03-12T19:45:38Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AllArgsConstructor\n+public class KernelConfigResolver {\n+\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n+\n+    /**\n+     * Create a kernel config map from a list of package identifiers and deployment document.\n+     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * transform it to a kernel config key-value pair.\n+     *\n+     * @param packageIdentifiers   a list of package identifiers\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @return a kernel config map\n+     */\n+    public Map<Object, Object> resolve(List<PackageIdentifier> packageIdentifiers, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packageIdentifiers.forEach(packageIdentifier -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each packaage and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, DeploymentDocument document) {\n+        // If package-version does not exist in deployment document, the running version on device was chosen during\n+        // dependency resolution over the one proposed in deployment, we do not need to update this service\n+        if (packageExistsInDeployment(document, packageIdentifier)) {\n+            return Collections.EMPTY_MAP;\n+        }\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax, then change the following code accordingly\n+\n+        // Generate dependencies\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1MTgzMw=="}, "originalCommit": {"oid": "4187eb8d80c1e0645e8a54b592a84ef3bfa52e7f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE5OTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoxNjowNFrOF1Mc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODowODozMlrOF1ptkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMjg2Mg==", "bodyText": "Could you use PlatformResolver.resolvePlatform() to get platform-specific lifecycle?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391322862", "createdAt": "2020-03-11T23:16:04Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyMDgzNQ==", "bodyText": "Kernel already does that when merging new config https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/config/Configuration.java#L145 Doing that here will need changes in merge API definition and will be redundant anyway, we can let config resolver not worry about platform for now, we do need platform for generating service dependencies but package recipe should support it first so there is a TODO in this class corresponding to that", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391420835", "createdAt": "2020-03-12T06:21:02Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMjg2Mg=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwMjI1Nw==", "bodyText": "Got it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391802257", "createdAt": "2020-03-12T18:08:32Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMjg2Mg=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcwNjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo1Nzo0NFrOF1RQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozNzo1M1rOF1qq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMTU4NA==", "bodyText": "This is a map, can you add information on what the map represents.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391401584", "createdAt": "2020-03-12T04:57:44Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxOTExMQ==", "bodyText": "Sure, will update", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391419111", "createdAt": "2020-03-12T06:14:21Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMTU4NA=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNzk1OA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391817958", "createdAt": "2020-03-12T18:37:53Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMTU4NA=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTczMjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxNjo1MFrOF1RggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozNzo0NVrOF1qqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY5Ng==", "bodyText": "To be future proof and consistent we can use Set to represent rootPackagesToRemove.\nYou can simply pull the PackageName from it for now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391405696", "createdAt": "2020-03-12T05:16:50Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxOTAyNA==", "bodyText": "rootPackagesToRemove is already a set, could you elaborate what you mean? a set of something else than String?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391419024", "createdAt": "2020-03-12T06:14:01Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY5Ng=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5ODUxOQ==", "bodyText": "I missed the main point, I meant Set", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391798519", "createdAt": "2020-03-12T18:01:34Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY5Ng=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5ODg2MQ==", "bodyText": "ok so somehow this parses angular brackets differently. I meant Set of PackageIdentifier", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391798861", "createdAt": "2020-03-12T18:02:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY5Ng=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNzg4NQ==", "bodyText": "Got it now, updated it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391817885", "createdAt": "2020-03-12T18:37:45Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,179 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     resolved packages to deploy\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY5Ng=="}, "originalCommit": {"oid": "a34df402e6143e1f115c0c0af8f0ff667acf6bb2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODIyNzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNDoyNVrOF1p5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozMjoxNFrOF1sXMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTMzOQ==", "bodyText": "I'm going to mark this as deprecated because job document does not have this information based on the latest changes. When do you need this list?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391805339", "createdAt": "2020-03-12T18:14:25Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -32,6 +35,6 @@\n     Set<PackageParameter> parameters;\n \n     @JsonProperty(\"Dependencies\")\n-    List<NameVersionPair> listOfDependentPackages;\n+    List<PackageIdentifier> listOfDependencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c0e1330923f33df76e52f23c89c583b93b2b69"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NTY4Mg==", "bodyText": "Yes, we won't need that once deployment service starts using  deployment task", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391845682", "createdAt": "2020-03-12T19:32:14Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -32,6 +35,6 @@\n     Set<PackageParameter> parameters;\n \n     @JsonProperty(\"Dependencies\")\n-    List<NameVersionPair> listOfDependentPackages;\n+    List<PackageIdentifier> listOfDependencies;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTMzOQ=="}, "originalCommit": {"oid": "b6c0e1330923f33df76e52f23c89c583b93b2b69"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODIzNzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/state/ParseAndValidateState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNzowMVrOF1p_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozMjo1MVrOF1sYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNjgyMQ==", "bodyText": "Besides naming changes, do you need this function in parameter resolution?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391806821", "createdAt": "2020-03-12T18:17:01Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/state/ParseAndValidateState.java", "diffHunk": "@@ -69,12 +69,12 @@ public void proceed() throws DeploymentFailureException {\n             PackageMetadata currentPackageMetdata = entry.getValue();\n             if (nameToPackageConfig.containsKey(packageName)) {\n                 DeploymentPackageConfiguration deploymentPackageConfiguration = nameToPackageConfig.get(packageName);\n-                if (deploymentPackageConfiguration.getListOfDependentPackages() != null) {\n-                    for (NameVersionPair dependencyNameVersion : deploymentPackageConfiguration\n-                            .getListOfDependentPackages()) {\n-                        if (nameToPackageMetadata.containsKey(dependencyNameVersion.getPackageName())) {\n+                if (deploymentPackageConfiguration.getListOfDependencies() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748c8bc9567bd0f9ea801cae9076b938ccbd0e9d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NTk0OQ==", "bodyText": "No I do not need this, left it there so the existing state machine code at least builds while we refactor", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391845949", "createdAt": "2020-03-12T19:32:51Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/state/ParseAndValidateState.java", "diffHunk": "@@ -69,12 +69,12 @@ public void proceed() throws DeploymentFailureException {\n             PackageMetadata currentPackageMetdata = entry.getValue();\n             if (nameToPackageConfig.containsKey(packageName)) {\n                 DeploymentPackageConfiguration deploymentPackageConfiguration = nameToPackageConfig.get(packageName);\n-                if (deploymentPackageConfiguration.getListOfDependentPackages() != null) {\n-                    for (NameVersionPair dependencyNameVersion : deploymentPackageConfiguration\n-                            .getListOfDependentPackages()) {\n-                        if (nameToPackageMetadata.containsKey(dependencyNameVersion.getPackageName())) {\n+                if (deploymentPackageConfiguration.getListOfDependencies() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNjgyMQ=="}, "originalCommit": {"oid": "748c8bc9567bd0f9ea801cae9076b938ccbd0e9d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI4MjE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozMDo1NFrOF1qcxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozNDozMFrOF1sbPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDM0MA==", "bodyText": "I'm assuming the \"dependencies\" has platform-specific definitions https://github.com/aws/aws-greengrass-kernel/blob/73a8bec3a4d64c4b1499bded048a6523279dcfaf/src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java#L232-L238\nDoes kernel config resolve the platform as well when merging?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391814340", "createdAt": "2020-03-12T18:30:54Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,182 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748c8bc9567bd0f9ea801cae9076b938ccbd0e9d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NjcxOQ==", "bodyText": "There is a TODO for this, config resolver has to pick platform specific dependencies but the package recipe and hence package POJO needs to support that first, Kernel won't be able to distinguish between those since we're giving it a plain list, we can do the platform specific work next sprint if I recall correctly from yesterday's standup", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391846719", "createdAt": "2020-03-12T19:34:30Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,182 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<String> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDM0MA=="}, "originalCommit": {"oid": "748c8bc9567bd0f9ea801cae9076b938ccbd0e9d"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODM2MTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODo1NTowNVrOF1rO8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozNzozN1rOF1sgtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNzE4Nw==", "bodyText": "Just to confirm, parameters are only allowed for \"lifecycle\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391827187", "createdAt": "2020-03-12T18:55:05Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);\n+        return resolvedServiceConfig;\n+    }\n+\n+    /*\n+     * For each lifecycle key-value pair of a package, substitute parameter values.\n+     */\n+    private Object interpolate(Object configValue, Set<PackageParameter> packageParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa72910b4a55e3dae36d31b770fe1b2247614c04"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMDUzNg==", "bodyText": "Maybe I'm underestimating things, why don't we flatten the config to String, run a replaceAll, and reconstruct the config tree?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391830536", "createdAt": "2020-03-12T19:01:26Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);\n+        return resolvedServiceConfig;\n+    }\n+\n+    /*\n+     * For each lifecycle key-value pair of a package, substitute parameter values.\n+     */\n+    private Object interpolate(Object configValue, Set<PackageParameter> packageParameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNzE4Nw=="}, "originalCommit": {"oid": "aa72910b4a55e3dae36d31b770fe1b2247614c04"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0ODExNg==", "bodyText": "Parameters should be allowed for anything that goes as it is to the service's kernel config. Although package recipe calls all of that 'lifecycle' and Kernel calls only part of that lifecycle, there's another TODO to bring recipe format into alignment with Kernel config and we need to make changed to this code accordingly. For converting to string and doing replaceall, I wanted to avoid that to avoid serialzing - deserializing over and over, and I'm not sure if the YAML string format will be retained, but I can make a note of this and give it a shot", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391848116", "createdAt": "2020-03-12T19:37:37Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);\n+        return resolvedServiceConfig;\n+    }\n+\n+    /*\n+     * For each lifecycle key-value pair of a package, substitute parameter values.\n+     */\n+    private Object interpolate(Object configValue, Set<PackageParameter> packageParameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNzE4Nw=="}, "originalCommit": {"oid": "aa72910b4a55e3dae36d31b770fe1b2247614c04"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODM5Mjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTowNToyMFrOF1rjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozODoxOVrOF1sh_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMjQxMQ==", "bodyText": "Currently this packageVersion.toString().equals(packageConfig.getResolvedVersion()) is always true, but let's keep the check here just in case any logic changes in dependency resolver.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391832411", "createdAt": "2020-03-12T19:05:20Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);\n+        return resolvedServiceConfig;\n+    }\n+\n+    /*\n+     * For each lifecycle key-value pair of a package, substitute parameter values.\n+     */\n+    private Object interpolate(Object configValue, Set<PackageParameter> packageParameters) {\n+\n+        Object result = configValue;\n+        if (configValue instanceof String) {\n+            String value = (String) configValue;\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            result = value;\n+\n+            // TODO : Handle system parameters\n+        }\n+        if (configValue instanceof Map) {\n+            Map<String, Object> childConfigMap = (Map<String, Object>) configValue;\n+            Map<Object, Object> resolvedChildConfig = new HashMap<>();\n+            for (Map.Entry<String, Object> childLifecycle : childConfigMap.entrySet()) {\n+                resolvedChildConfig\n+                        .put(childLifecycle.getKey(), interpolate(childLifecycle.getValue(), packageParameters));\n+            }\n+            result = resolvedChildConfig;\n+        }\n+        // TODO : Do we want to support other config types than map of\n+        // string k,v pairs? e.g. how should lists be handled?\n+        return result;\n     }\n+\n+\n+    /*\n+     * Recompute main service dependencies for deployment.\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n+                                                     DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n+                        .collect(Collectors.toSet());\n+        kernelDependencies\n+                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n+        kernelDependencies.addAll(document.getRootPackages());\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", kernelDependencies));\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    /*\n+     * Get configuration for a package-version combination from deployment document.\n+     */\n+    private Optional<DeploymentPackageConfiguration> getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                                            String packageName,\n+                                                                                            String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa72910b4a55e3dae36d31b770fe1b2247614c04"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0ODQ0Nw==", "bodyText": "Yes, I'll leave the check as it is here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391848447", "createdAt": "2020-03-12T19:38:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);\n+        return resolvedServiceConfig;\n+    }\n+\n+    /*\n+     * For each lifecycle key-value pair of a package, substitute parameter values.\n+     */\n+    private Object interpolate(Object configValue, Set<PackageParameter> packageParameters) {\n+\n+        Object result = configValue;\n+        if (configValue instanceof String) {\n+            String value = (String) configValue;\n+\n+            // Handle package parameters\n+            for (final PackageParameter parameter : packageParameters) {\n+                value = value.replace(String.format(PARAMETER_REFERENCE_FORMAT, parameter.getName()),\n+                        parameter.getValue());\n+            }\n+            result = value;\n+\n+            // TODO : Handle system parameters\n+        }\n+        if (configValue instanceof Map) {\n+            Map<String, Object> childConfigMap = (Map<String, Object>) configValue;\n+            Map<Object, Object> resolvedChildConfig = new HashMap<>();\n+            for (Map.Entry<String, Object> childLifecycle : childConfigMap.entrySet()) {\n+                resolvedChildConfig\n+                        .put(childLifecycle.getKey(), interpolate(childLifecycle.getValue(), packageParameters));\n+            }\n+            result = resolvedChildConfig;\n+        }\n+        // TODO : Do we want to support other config types than map of\n+        // string k,v pairs? e.g. how should lists be handled?\n+        return result;\n     }\n+\n+\n+    /*\n+     * Recompute main service dependencies for deployment.\n+     */\n+    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n+                                                     DeploymentDocument document) {\n+        Set<String> kernelDependencies =\n+                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n+                        .collect(Collectors.toSet());\n+        kernelDependencies\n+                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n+        kernelDependencies.addAll(document.getRootPackages());\n+\n+        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n+        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", kernelDependencies));\n+\n+        return mainLifecycleMap;\n+    }\n+\n+    /*\n+     * Get configuration for a package-version combination from deployment document.\n+     */\n+    private Optional<DeploymentPackageConfiguration> getMatchingPackageConfigFromDeployment(DeploymentDocument document,\n+                                                                                            String packageName,\n+                                                                                            String packageVersion) {\n+        return document.getDeploymentPackageConfigurationList().stream()\n+                .filter(packageConfig -> packageName.equals(packageConfig.getPackageName()) && packageVersion.toString()\n+                        .equals(packageConfig.getResolvedVersion())).findAny();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMjQxMQ=="}, "originalCommit": {"oid": "aa72910b4a55e3dae36d31b770fe1b2247614c04"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODY4ODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDozMToxN1rOF1uVYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0Mjo0MVrOF1upjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3Nzk4NA==", "bodyText": "According to yesterday's discussion, we don't need the versionConstraint since it can be derived from the recipe file for each package. It can also lead to error cases, for example:\nDeployment 1: Group A: pkgA-1.0 -> pkgD-2.0 (constraint: pkgD < 3.0) => resolved constraint: pkgD: < 3.0\nDeployment 2: Group B: pkgB-1.0 -> pkgD-2.0 (constraint: pkgD > 1.0) => resolved constraint: pkgD: >1.0 && < 3.0\nDeployment 3: Group A: pkgA-1.0 -> pkgD-3.0 (constraint: pkgD > 3.0) => constraint conflict!\n\nIn this case Deployment 3 will fail because the constraint brought by it conflicts with the existing constraint on device. However, in this case it shouldn't fail.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391877984", "createdAt": "2020-03-12T20:31:17Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b0ffe7591f294d8e4d67f9fc893bca872279b6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MzE0OA==", "bodyText": "Let me speak with Hui and do that in a new PR, will need to change the interface back to the old one too", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/101#discussion_r391883148", "createdAt": "2020-03-12T20:42:41Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -1,31 +1,184 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n package com.aws.iot.evergreen.packagemanager;\n \n import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import lombok.AllArgsConstructor;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n+@AllArgsConstructor\n public class KernelConfigResolver {\n-    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n-    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n-    private final PackageCache packageCache;\n \n-    public KernelConfigResolver(PackageCache packageCache) {\n-        this.packageCache = packageCache;\n-    }\n+    private static final String SERVICE_DEPENDENCIES_CONFIG_KEY = \"dependencies\";\n+    private static final String VERSION_CONFIG_KEY = \"version\";\n+    private static final String VERSION_CONSTRAINT_CONFIG_KEY = \"versionconstraint\";\n+    private static final String SERVICE_NAMESPACE_CONFIG_KEY = \"services\";\n+    private static final String PARAMETER_REFERENCE_FORMAT = \"{{params:%s.value}}\";\n+\n+    private final PackageCache packageCache;\n+    private final Kernel kernel;\n \n     /**\n      * Create a kernel config map from a list of package identifiers and deployment document.\n-     * For each package, it first retrieves its recipe, then merge the parameter values into the recipe, and last\n+     * For each package, it first retrieves its recipe, then merges the parameter values into the recipe, and last\n      * transform it to a kernel config key-value pair.\n-     * @param pkgs a map of package identifiers to version constraints\n-     * @param document deployment document\n+     *\n+     * @param packagesToDeploy     map of package identifiers to version constraints for resolved packages that are\n+     *                             to be deployed\n+     * @param document             deployment document\n+     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n-    public Map<Object, Object> resolve(Map<PackageIdentifier, String> pkgs, DeploymentDocument document)\n-            throws InterruptedException {\n-        return new HashMap<>();\n+    public Map<Object, Object> resolve(Map<PackageIdentifier, String> packagesToDeploy, DeploymentDocument document,\n+                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+\n+        Map<Object, Object> servicesConfig = new HashMap<>();\n+\n+        packagesToDeploy.forEach((packageIdentifier, versionConstraint) -> servicesConfig\n+                .put(packageIdentifier.getName(), getServiceConfig(packageIdentifier, versionConstraint, document)));\n+\n+        servicesConfig.put(kernel.getMain().getName(), getUpdatedMainConfig(rootPackagesToRemove, document));\n+\n+        // Services need to be under the services namespace in kernel config\n+        return Collections.singletonMap(SERVICE_NAMESPACE_CONFIG_KEY, servicesConfig);\n+    }\n+\n+    /*\n+     * Processe lifecycle section of each package and add it to the config.\n+     */\n+    private Map<Object, Object> getServiceConfig(PackageIdentifier packageIdentifier, String versionConstraint,\n+                                                 DeploymentDocument document) {\n+\n+        Package pkg = packageCache.getRecipe(packageIdentifier);\n+\n+        Map<Object, Object> resolvedServiceConfig = new HashMap<>();\n+\n+        // TODO : Package recipe format is not in alignment with the changed Kernel config syntax,\n+        // which leads to inconsistent naming, e.g. lifecycle per new Kernel config syntax is one of several config\n+        // keys while per current package recipe format it's the entire config for that package\n+        // These incosistencies need to be addressed\n+\n+        // Interpolate parameters\n+        Set<PackageParameter> resolvedParams = resolveParameterValuesToUse(document, pkg);\n+        for (Map.Entry<String, Object> configKVPair : pkg.getLifecycle().entrySet()) {\n+            resolvedServiceConfig.put(configKVPair.getKey(), interpolate(configKVPair.getValue(), resolvedParams));\n+        }\n+\n+        // TODO : Update package recipe format to include all information that service dependencies config\n+        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // then change the following code accordingly\n+\n+        // Generate dependencies\n+        // TODO : Only platform specific dependencies should be added once deployment document and\n+        // package recipe format supports platform wise dependency specification\n+        Set<String> dependencyServiceNames = pkg.getDependencies().keySet();\n+        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, String.join(\", \", dependencyServiceNames));\n+\n+        resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedServiceConfig.put(VERSION_CONSTRAINT_CONFIG_KEY, versionConstraint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3Nzk4NA=="}, "originalCommit": {"oid": "42b0ffe7591f294d8e4d67f9fc893bca872279b6"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4868, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}