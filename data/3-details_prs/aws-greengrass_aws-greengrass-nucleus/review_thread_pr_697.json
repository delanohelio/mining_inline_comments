{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzkzODI2", "number": 697, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozODozN1rOE8d6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo1OToxNFrOE8ebDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQwMDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozODozN1rOH4mctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozODoxM1rOH5N7eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjI0Ng==", "bodyText": "Doesn't this break local deployments?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/697#discussion_r529112246", "createdAt": "2020-11-24T01:38:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -239,41 +244,56 @@ ComponentMetadata getPackageMetadata(@NonNull ComponentIdentifier pkgId) throws\n         return new ComponentMetadata(pkgId, dependencyMetadata);\n     }\n \n+    Optional<ComponentIdentifier> findBestMatchAvailableComponent(@NonNull String componentName,\n+                                                                  @NonNull Requirement requirement)\n+            throws PackageLoadingException {\n+        List<ComponentIdentifier> componentIdentifierList = listAvailableComponent(componentName, requirement);\n+\n+        if (componentIdentifierList.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(componentIdentifierList.get(0));\n+        }\n+    }\n+\n     /**\n-     * list PackageMetadata for available packages that satisfies the requirement.\n-     *\n-     * @param packageName the target package\n-     * @param requirement version requirement\n-     * @return a list of PackageMetadata that satisfies the requirement.\n-     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * List available component (versions) that satisfies the requirement in descending order.\n+     * @param componentName target component's name\n+     * @param requirement   semver requirement\n+     * @return component id list contains all satisfied version, in descending order\n+     * @throws PackageLoadingException  when fails to read recipe directory or parse recipe file name\n      */\n-    List<ComponentMetadata> listAvailablePackageMetadata(@NonNull String packageName, @NonNull Requirement requirement)\n-            throws PackagingException {\n-        File[] recipeFiles = getAllRecipeFiles();\n+    List<ComponentIdentifier> listAvailableComponent(@NonNull String componentName, @NonNull Requirement requirement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217037738af17df8c993e10ab45bf39f7f1250b5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNDUwNg==", "bodyText": "Nah. The old one isn't used any more except in the unit test. It can be safely removed.\nNew logic all changed to use the listAvailableComponent which returns the list of id.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/697#discussion_r529124506", "createdAt": "2020-11-24T01:56:41Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -239,41 +244,56 @@ ComponentMetadata getPackageMetadata(@NonNull ComponentIdentifier pkgId) throws\n         return new ComponentMetadata(pkgId, dependencyMetadata);\n     }\n \n+    Optional<ComponentIdentifier> findBestMatchAvailableComponent(@NonNull String componentName,\n+                                                                  @NonNull Requirement requirement)\n+            throws PackageLoadingException {\n+        List<ComponentIdentifier> componentIdentifierList = listAvailableComponent(componentName, requirement);\n+\n+        if (componentIdentifierList.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(componentIdentifierList.get(0));\n+        }\n+    }\n+\n     /**\n-     * list PackageMetadata for available packages that satisfies the requirement.\n-     *\n-     * @param packageName the target package\n-     * @param requirement version requirement\n-     * @return a list of PackageMetadata that satisfies the requirement.\n-     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * List available component (versions) that satisfies the requirement in descending order.\n+     * @param componentName target component's name\n+     * @param requirement   semver requirement\n+     * @return component id list contains all satisfied version, in descending order\n+     * @throws PackageLoadingException  when fails to read recipe directory or parse recipe file name\n      */\n-    List<ComponentMetadata> listAvailablePackageMetadata(@NonNull String packageName, @NonNull Requirement requirement)\n-            throws PackagingException {\n-        File[] recipeFiles = getAllRecipeFiles();\n+    List<ComponentIdentifier> listAvailableComponent(@NonNull String componentName, @NonNull Requirement requirement)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjI0Ng=="}, "originalCommit": {"oid": "217037738af17df8c993e10ab45bf39f7f1250b5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNjQ1NA==", "bodyText": "But if you're now looking for very specifically named recipe files, that will break the local deployment", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/697#discussion_r529126454", "createdAt": "2020-11-24T01:58:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -239,41 +244,56 @@ ComponentMetadata getPackageMetadata(@NonNull ComponentIdentifier pkgId) throws\n         return new ComponentMetadata(pkgId, dependencyMetadata);\n     }\n \n+    Optional<ComponentIdentifier> findBestMatchAvailableComponent(@NonNull String componentName,\n+                                                                  @NonNull Requirement requirement)\n+            throws PackageLoadingException {\n+        List<ComponentIdentifier> componentIdentifierList = listAvailableComponent(componentName, requirement);\n+\n+        if (componentIdentifierList.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(componentIdentifierList.get(0));\n+        }\n+    }\n+\n     /**\n-     * list PackageMetadata for available packages that satisfies the requirement.\n-     *\n-     * @param packageName the target package\n-     * @param requirement version requirement\n-     * @return a list of PackageMetadata that satisfies the requirement.\n-     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * List available component (versions) that satisfies the requirement in descending order.\n+     * @param componentName target component's name\n+     * @param requirement   semver requirement\n+     * @return component id list contains all satisfied version, in descending order\n+     * @throws PackageLoadingException  when fails to read recipe directory or parse recipe file name\n      */\n-    List<ComponentMetadata> listAvailablePackageMetadata(@NonNull String packageName, @NonNull Requirement requirement)\n-            throws PackagingException {\n-        File[] recipeFiles = getAllRecipeFiles();\n+    List<ComponentIdentifier> listAvailableComponent(@NonNull String componentName, @NonNull Requirement requirement)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjI0Ng=="}, "originalCommit": {"oid": "217037738af17df8c993e10ab45bf39f7f1250b5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1OTA5Nw==", "bodyText": "Synced offline and we are good. I also got a corresponding cli change: aws-greengrass/aws-greengrass-cli#80. Added to the PR description so that others can also be aware.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/697#discussion_r529759097", "createdAt": "2020-11-24T17:38:13Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -239,41 +244,56 @@ ComponentMetadata getPackageMetadata(@NonNull ComponentIdentifier pkgId) throws\n         return new ComponentMetadata(pkgId, dependencyMetadata);\n     }\n \n+    Optional<ComponentIdentifier> findBestMatchAvailableComponent(@NonNull String componentName,\n+                                                                  @NonNull Requirement requirement)\n+            throws PackageLoadingException {\n+        List<ComponentIdentifier> componentIdentifierList = listAvailableComponent(componentName, requirement);\n+\n+        if (componentIdentifierList.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(componentIdentifierList.get(0));\n+        }\n+    }\n+\n     /**\n-     * list PackageMetadata for available packages that satisfies the requirement.\n-     *\n-     * @param packageName the target package\n-     * @param requirement version requirement\n-     * @return a list of PackageMetadata that satisfies the requirement.\n-     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * List available component (versions) that satisfies the requirement in descending order.\n+     * @param componentName target component's name\n+     * @param requirement   semver requirement\n+     * @return component id list contains all satisfied version, in descending order\n+     * @throws PackageLoadingException  when fails to read recipe directory or parse recipe file name\n      */\n-    List<ComponentMetadata> listAvailablePackageMetadata(@NonNull String packageName, @NonNull Requirement requirement)\n-            throws PackagingException {\n-        File[] recipeFiles = getAllRecipeFiles();\n+    List<ComponentIdentifier> listAvailableComponent(@NonNull String componentName, @NonNull Requirement requirement)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMjI0Ng=="}, "originalCommit": {"oid": "217037738af17df8c993e10ab45bf39f7f1250b5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODQ4NDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/COMPONENT_STORE_README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTo1OToxNFrOH4nV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjowMTo0OVrOH4nfqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNjkwOA==", "bodyText": "does lose", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/697#discussion_r529126908", "createdAt": "2020-11-24T01:59:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/COMPONENT_STORE_README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Nucleus Component Store\n+\n+## Recipe Folder\n+Folder root: `{componentStoreRoot}/recipes`\n+\n+### Recipe File\n+\n+#### File Name \n+\n+**{ComponentNameHash}@{Semver}.recipe.yaml**\n+\n+The file name needs to be cross-platform safe. See below for details for each part.\n+\n+1. ComponentNameHash\n+    1. Hash = Base64.getUrlEncoder().withoutPadding((SHA_256(ComponentName))). \n+    1. Padding is omitted to avoid confusion.\n+    1. Hash does lost the ability to convert it back, but we only need and foresee one-way conversion of file name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134e10015f11e12b4a4a4f608395f2c1543d110b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyOTM4NA==", "bodyText": "hah thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/697#discussion_r529129384", "createdAt": "2020-11-24T02:01:49Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/COMPONENT_STORE_README.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Nucleus Component Store\n+\n+## Recipe Folder\n+Folder root: `{componentStoreRoot}/recipes`\n+\n+### Recipe File\n+\n+#### File Name \n+\n+**{ComponentNameHash}@{Semver}.recipe.yaml**\n+\n+The file name needs to be cross-platform safe. See below for details for each part.\n+\n+1. ComponentNameHash\n+    1. Hash = Base64.getUrlEncoder().withoutPadding((SHA_256(ComponentName))). \n+    1. Padding is omitted to avoid confusion.\n+    1. Hash does lost the ability to convert it back, but we only need and foresee one-way conversion of file name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNjkwOA=="}, "originalCommit": {"oid": "134e10015f11e12b4a4a4f608395f2c1543d110b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 266, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}