{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjY4MjIw", "number": 462, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzo0NjoyNlrOEl6Z9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMToyMzoxNVrOEmyZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTg5Njg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMzo0NjoyNlrOHVpVqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo1NzoyMFrOHWILfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg==", "bodyText": "shouldn't we literally try forever as long as they have configured a cloud connection (certs)?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492459432", "createdAt": "2020-09-22T03:46:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNzQ2Ng==", "bodyText": "I think that will be unnecessary resource consumption. I think it should be triggered when network availability is detected. If its a reconnection it is already taken care by the mqtt client. If it is the first time, device should start in offline mode and then there needs to be a mechanism to indicate network availability. We have discussed this and it will probably be post Re:invent.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492927466", "createdAt": "2020-09-22T17:55:18Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTI3NQ==", "bodyText": "Post re:invent is not a solution. We cannot have the device be a brick, which this will be since you can't deploy anything to it because we just gave up", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492929275", "createdAt": "2020-09-22T17:58:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMTY2NA==", "bodyText": "@fengwa-aws thoughts?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492931664", "createdAt": "2020-09-22T18:02:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0ODc0OQ==", "bodyText": "I agree with Michael that we cannot brick the device. Doesn't the AWS SDK handle reconnect automatically? Is there a way the application code can be notified that and retry the subscription when the MQTT connection is resumed?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492948749", "createdAt": "2020-09-22T18:30:20Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MDM0OQ==", "bodyText": "I thought the AWS SDK also retries - I remember looking at the CRT and they do retry some commands\nIn GGv1 we had this devices effectively get bricked because IoT core doesn't send a response if subscribe is throttled - we need to confirm whether the SDK retries or retry ourselves (with backoff)\nThe customer had to use their own mechanism for restarting devices - in the case of an IoT core outage, when it comes back and if a significant amount of devices try to reconnect at the same time this will cause throttling and we need to be able to handle it\nWe should retry forever", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492950349", "createdAt": "2020-09-22T18:33:22Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1NTY5Mg==", "bodyText": "I realized my previous comment is irrelevant and please ignore it. I agree with Rob and Michael that the subscribe operation should be retried until it succeeds.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492955692", "createdAt": "2020-09-22T18:42:18Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MzU2Mg==", "bodyText": "ok, For now I will change it to retry forever. We can discuss device resource consumption and make optimizations for that in future.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492963562", "createdAt": "2020-09-22T18:55:22Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NDczMw==", "bodyText": "The backoff can be pretty extreme. Maybe as much as 30 minutes or 1 hour.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r492964733", "createdAt": "2020-09-22T18:57:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -402,15 +407,30 @@ public void requestNextPendingJobDocument() {\n      * @throws ConnectionUnavailableException When connection to cloud is not available\n      *\n      */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public void subscribeToJobsTopics()   {\n+        BaseRetryableAccessor retryableAccessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1OTQzMg=="}, "originalCommit": {"oid": "3bd40b83282b4854b3bb4602fe7866fe4d6054c0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTgyMDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoyOToyOFrOHWOj-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjo0MjoxOFrOHWO1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTMwNQ==", "bodyText": "can this be package-private?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493069305", "createdAt": "2020-09-22T22:29:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -129,6 +139,8 @@\n \n     private IotJobsClient iotJobsClient;\n     private MqttClientConnection connection;\n+    @Setter // For tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1fa868c5417b01afbdf74e3b87be4403fca6488"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3MzkxOQ==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493073919", "createdAt": "2020-09-22T22:42:18Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -129,6 +139,8 @@\n \n     private IotJobsClient iotJobsClient;\n     private MqttClientConnection connection;\n+    @Setter // For tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTMwNQ=="}, "originalCommit": {"oid": "f1fa868c5417b01afbdf74e3b87be4403fca6488"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTg1NDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjo0Mzo0N1rOHWO4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzozNzowN1rOHWP6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDQ3NA==", "bodyText": "Can the recursive call cause stack overflow eventually in extreme cases? Let's say if the device is offline for a month, then the stack can be filled up, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493074474", "createdAt": "2020-09-22T22:43:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -463,10 +452,41 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n             subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n             logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n         } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+            Throwable cause = e.getCause();\n+            if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                //TODO: If network is not available then it will throw MqttException\n+                // If there is any other problem like thingName is not specified in the request then also\n+                // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                // exposed. Will make required change in CRT package to expose the error code and then update this\n+                logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                waitAndRetrySubscribingToJobDescriptionTopic();\n+            }\n+            if (cause instanceof InterruptedException) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                return;\n+            }\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            waitAndRetrySubscribingToJobDescriptionTopic();\n+        } catch (InterruptedException e) {\n+            logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n         }\n     }\n \n+    private void waitAndRetrySubscribingToJobDescriptionTopic() {\n+        try {\n+            // Wait for sometime and then try to subscribe again\n+            Random jitter = new Random();\n+            Thread.sleep(waitTimeToSubscribeAgain + jitter.nextInt(10_000));\n+        } catch (InterruptedException interruptedException) {\n+            logger.atWarn().log(\"Interrupted while subscribing to Iot jobs topics\");\n+            return;\n+        }\n+        subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MTAwOQ==", "bodyText": "Yes that's a possibility. I can change this to a loop. But I think there may be other overflows like disk full due to logs (may reduce by not logging in retry branches) or buffer full for I/O.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493091009", "createdAt": "2020-09-22T23:35:42Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -463,10 +452,41 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n             subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n             logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n         } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+            Throwable cause = e.getCause();\n+            if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                //TODO: If network is not available then it will throw MqttException\n+                // If there is any other problem like thingName is not specified in the request then also\n+                // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                // exposed. Will make required change in CRT package to expose the error code and then update this\n+                logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                waitAndRetrySubscribingToJobDescriptionTopic();\n+            }\n+            if (cause instanceof InterruptedException) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                return;\n+            }\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            waitAndRetrySubscribingToJobDescriptionTopic();\n+        } catch (InterruptedException e) {\n+            logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n         }\n     }\n \n+    private void waitAndRetrySubscribingToJobDescriptionTopic() {\n+        try {\n+            // Wait for sometime and then try to subscribe again\n+            Random jitter = new Random();\n+            Thread.sleep(waitTimeToSubscribeAgain + jitter.nextInt(10_000));\n+        } catch (InterruptedException interruptedException) {\n+            logger.atWarn().log(\"Interrupted while subscribing to Iot jobs topics\");\n+            return;\n+        }\n+        subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDQ3NA=="}, "originalCommit": {"oid": "54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MTUyNw==", "bodyText": "Definitely loop instead. Logs are cleaned up", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493091527", "createdAt": "2020-09-22T23:37:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -463,10 +452,41 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n             subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n             logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n         } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+            Throwable cause = e.getCause();\n+            if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                //TODO: If network is not available then it will throw MqttException\n+                // If there is any other problem like thingName is not specified in the request then also\n+                // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                // exposed. Will make required change in CRT package to expose the error code and then update this\n+                logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                waitAndRetrySubscribingToJobDescriptionTopic();\n+            }\n+            if (cause instanceof InterruptedException) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                return;\n+            }\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            waitAndRetrySubscribingToJobDescriptionTopic();\n+        } catch (InterruptedException e) {\n+            logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n         }\n     }\n \n+    private void waitAndRetrySubscribingToJobDescriptionTopic() {\n+        try {\n+            // Wait for sometime and then try to subscribe again\n+            Random jitter = new Random();\n+            Thread.sleep(waitTimeToSubscribeAgain + jitter.nextInt(10_000));\n+        } catch (InterruptedException interruptedException) {\n+            logger.atWarn().log(\"Interrupted while subscribing to Iot jobs topics\");\n+            return;\n+        }\n+        subscribeToGetNextJobDescription(describeJobExecutionResponseConsumer, rejectedError -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDQ3NA=="}, "originalCommit": {"oid": "54c9dc0873ca8aa6ab15c8fa09f23e7b9cb8c637"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk0Njc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyMjowOVrOHW2kPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOToxNToxN1rOHW9WHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDczMg==", "bodyText": "sleep before retrying?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493724732", "createdAt": "2020-09-23T16:22:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -445,25 +435,45 @@ public void subscribeToJobsTopics()   {\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n     protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionResponse> consumerAccept,\n-                                                    Consumer<RejectedError> consumerReject)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n+                                                    Consumer<RejectedError> consumerReject) {\n \n-        logger.atInfo().log(\"Subscribing to deployment job execution update.\");\n+        logger.atDebug().log(\"Subscribing to deployment job execution update.\");\n         DescribeJobExecutionSubscriptionRequest describeJobExecutionSubscriptionRequest =\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                    break;\n+                }\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            } catch (InterruptedException e) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                break;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8199d8cb3ce8396a3b27cff14302363bd13371a3"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNTgwNw==", "bodyText": "Added", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493835807", "createdAt": "2020-09-23T19:15:17Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -445,25 +435,45 @@ public void subscribeToJobsTopics()   {\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n     protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionResponse> consumerAccept,\n-                                                    Consumer<RejectedError> consumerReject)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n+                                                    Consumer<RejectedError> consumerReject) {\n \n-        logger.atInfo().log(\"Subscribing to deployment job execution update.\");\n+        logger.atDebug().log(\"Subscribing to deployment job execution update.\");\n         DescribeJobExecutionSubscriptionRequest describeJobExecutionSubscriptionRequest =\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                    break;\n+                }\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);\n+            } catch (InterruptedException e) {\n+                logger.atWarn().log(SUBSCRIPTION_JOB_DESCRIPTION_INTERRUPTED);\n+                break;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDczMg=="}, "originalCommit": {"oid": "8199d8cb3ce8396a3b27cff14302363bd13371a3"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk0OTA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyMjo0M1rOHW2ltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyMjo0M1rOHW2ltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNTExMQ==", "bodyText": "just use an atomicinteger", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493725111", "createdAt": "2020-09-23T16:22:43Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/deployment/IotJobsHelperTest.java", "diffHunk": "@@ -177,6 +183,68 @@ public void GIVEN_connected_to_iot_WHEN_subscribe_to_jobs_topics_THEN_get_notifi\n                 eq(QualityOfService.AT_LEAST_ONCE));\n     }\n \n+    @Test\n+    public void GIVEN_not_connected_to_iot_WHEN_subscribe_to_eventnotifications_topic_timesout_THEN_retry(ExtensionContext context)\n+            throws Exception {\n+        ignoreExceptionOfType(context, TimeoutException.class);\n+        CompletableFuture<Integer> integerCompletableFuture = CompletableFuture.completedFuture(1);\n+        CompletableFuture<Integer> exceptionallyCompletedFuture = new CompletableFuture<>();\n+        exceptionallyCompletedFuture.completeExceptionally(new TimeoutException());\n+        final int[] count = {0};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8199d8cb3ce8396a3b27cff14302363bd13371a3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTA2OTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMToyMjo0N1rOHXBdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjozMjoxMVrOHXu1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzI2OQ==", "bodyText": "Will this create a lot of warn logs?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493903269", "createdAt": "2020-09-23T21:22:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -445,25 +435,54 @@ public void subscribeToJobsTopics()   {\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n     protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionResponse> consumerAccept,\n-                                                    Consumer<RejectedError> consumerReject)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n+                                                    Consumer<RejectedError> consumerReject) {\n \n-        logger.atInfo().log(\"Subscribing to deployment job execution update.\");\n+        logger.atDebug().log(\"Subscribing to deployment job execution update.\");\n         DescribeJobExecutionSubscriptionRequest describeJobExecutionSubscriptionRequest =\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce2fb505609c434a214a54acd6a0af31c671db8"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NjUzMA==", "bodyText": "This is logging a cause so I think it should be catching attention. Debug log will just get lost.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r494646530", "createdAt": "2020-09-24T22:32:11Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -445,25 +435,54 @@ public void subscribeToJobsTopics()   {\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n     protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionResponse> consumerAccept,\n-                                                    Consumer<RejectedError> consumerReject)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n+                                                    Consumer<RejectedError> consumerReject) {\n \n-        logger.atInfo().log(\"Subscribing to deployment job execution update.\");\n+        logger.atDebug().log(\"Subscribing to deployment job execution update.\");\n         DescribeJobExecutionSubscriptionRequest describeJobExecutionSubscriptionRequest =\n                 new DescribeJobExecutionSubscriptionRequest();\n         describeJobExecutionSubscriptionRequest.thingName = Coerce.toString(deviceConfiguration.getThingName());\n         describeJobExecutionSubscriptionRequest.jobId = \"$next\";\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n-                        QualityOfService.AT_LEAST_ONCE, consumerAccept);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            subscribed = iotJobsClient.SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n-                    QualityOfService.AT_LEAST_ONCE, consumerReject);\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-            logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient\n+                    .SubscribeToDescribeJobExecutionAccepted(describeJobExecutionSubscriptionRequest,\n+                            QualityOfService.AT_LEAST_ONCE, consumerAccept);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                subscribed = iotJobsClient\n+                        .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n+                                QualityOfService.AT_LEAST_ONCE, consumerReject);\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job execution update.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_JOB_DESCRIPTION_RETRY_MESSAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzI2OQ=="}, "originalCommit": {"oid": "1ce2fb505609c434a214a54acd6a0af31c671db8"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTA3MTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMToyMzoxNVrOHXBeZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjozMjoyM1rOHXu1UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzQ2Mg==", "bodyText": "Same here. will this create a lot of warn logs? Maybe change it to debug?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r493903462", "createdAt": "2020-09-23T21:23:15Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -475,19 +494,48 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n      * @throws InterruptedException When this thread was interrupted\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n-    protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent> eventHandler)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n-        logger.atInfo().log(\"Subscribing to deployment job event notifications.\");\n+    protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent> eventHandler) {\n+\n+        logger.atDebug().log(\"Subscribing to deployment job event notifications.\");\n         JobExecutionsChangedSubscriptionRequest request = new JobExecutionsChangedSubscriptionRequest();\n         request.thingName = Coerce.toString(deviceConfiguration.getThingName());\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToJobExecutionsChangedEvents(request, QualityOfService.AT_LEAST_ONCE, eventHandler);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient.SubscribeToJobExecutionsChangedEvents(request,\n+                    QualityOfService.AT_LEAST_ONCE, eventHandler);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job event notifications.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_EVENT_NOTIFICATIONS_RETRY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce2fb505609c434a214a54acd6a0af31c671db8"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0NjYwOA==", "bodyText": "Same as above", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/462#discussion_r494646608", "createdAt": "2020-09-24T22:32:23Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -475,19 +494,48 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n      * @throws InterruptedException When this thread was interrupted\n      * @throws TimeoutException     if the operation does not complete within the given time\n      */\n-    protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent> eventHandler)\n-            throws ExecutionException, InterruptedException, TimeoutException {\n-        logger.atInfo().log(\"Subscribing to deployment job event notifications.\");\n+    protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent> eventHandler) {\n+\n+        logger.atDebug().log(\"Subscribing to deployment job event notifications.\");\n         JobExecutionsChangedSubscriptionRequest request = new JobExecutionsChangedSubscriptionRequest();\n         request.thingName = Coerce.toString(deviceConfiguration.getThingName());\n-        CompletableFuture<Integer> subscribed = iotJobsClient\n-                .SubscribeToJobExecutionsChangedEvents(request, QualityOfService.AT_LEAST_ONCE, eventHandler);\n-        try {\n-            subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n-        } catch (ExecutionException e) {\n-            unwrapExecutionException(e);\n+\n+        while (true) {\n+            CompletableFuture<Integer> subscribed = iotJobsClient.SubscribeToJobExecutionsChangedEvents(request,\n+                    QualityOfService.AT_LEAST_ONCE, eventHandler);\n+            try {\n+                subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+                logger.atInfo().log(\"Subscribed to deployment job event notifications.\");\n+                break;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(SUBSCRIPTION_EVENT_NOTIFICATIONS_RETRY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMzQ2Mg=="}, "originalCommit": {"oid": "1ce2fb505609c434a214a54acd6a0af31c671db8"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 540, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}