{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTU4NDYz", "number": 665, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjowNjowMlrOE39J_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDozNToxMFrOE4WCEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTA5MTE3OnYy", "diffSide": "RIGHT", "path": "scripts/loader", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjowNjowMlrOHxmZnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjowNzozN1rOHxmbig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MTQyMQ==", "bodyText": "I'm pretty sure I added this once and it didn't work. Have you tested this to make sure it works as expected?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r521771421", "createdAt": "2020-11-12T02:06:02Z", "author": {"login": "MikeDombo"}, "path": "scripts/loader", "diffHunk": "@@ -24,7 +24,7 @@ launch_kernel() {\n     JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n   fi\n \n-  JVM_OPTIONS=\"$JVM_OPTIONS -Droot=$GG_ROOT\"\n+  JVM_OPTIONS=\"$JVM_OPTIONS -Droot=\\\"$GG_ROOT\\\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MTkxNA==", "bodyText": "Right, I still need to test in UATs and run some manual tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r521771914", "createdAt": "2020-11-12T02:07:37Z", "author": {"login": "hui-yang"}, "path": "scripts/loader", "diffHunk": "@@ -24,7 +24,7 @@ launch_kernel() {\n     JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n   fi\n \n-  JVM_OPTIONS=\"$JVM_OPTIONS -Droot=$GG_ROOT\"\n+  JVM_OPTIONS=\"$JVM_OPTIONS -Droot=\\\"$GG_ROOT\\\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MTQyMQ=="}, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTA5ODc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjowOTo0N1rOHxmd5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjowOTo0N1rOHxmd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MjUxNg==", "bodyText": "use Files.exists instead", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r521772516", "createdAt": "2020-11-12T02:09:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "diffHunk": "@@ -106,8 +115,11 @@ public Path getServiceConfigPath() {\n     }\n \n     public boolean isLaunchDirSetup() {\n-        // GG_NEEDS_REVIEW: TODO: check for file and directory corruptions\n-        return currentDir.toFile().exists();\n+        return validateLaunchDirSetup(currentDir);\n+    }\n+\n+    private boolean validateLaunchDirSetup(Path path) {\n+        return path.toFile().exists() && getLoaderPathFromLaunchDir(path).toFile().exists();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTA5OTg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoxMDoxNlrOHxmehA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDozNToyOVrOHyNYaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MjY3Ng==", "bodyText": "use deleteIfExists that way it won't complain if it doesn't exist.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r521772676", "createdAt": "2020-11-12T02:10:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "diffHunk": "@@ -237,8 +255,12 @@ public void prepareBootstrap(String deploymentId) throws IOException {\n         Path existingLaunchDir = Files.readSymbolicLink(currentDir).toAbsolutePath();\n         copyFolderRecursively(existingLaunchDir, newLaunchDir, REPLACE_EXISTING, NOFOLLOW_LINKS, COPY_ATTRIBUTES);\n \n+        cleanup();\n+        setupLinkToDirectory(newDir, newLaunchDir);\n         setupLinkToDirectory(oldDir, existingLaunchDir);\n+        Files.delete(currentDir);\n         setupLinkToDirectory(currentDir, newLaunchDir);\n+        Files.delete(newDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMTM4MA==", "bodyText": "Both should exist otherwise won't reach here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r522301380", "createdAt": "2020-11-12T17:52:25Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "diffHunk": "@@ -237,8 +255,12 @@ public void prepareBootstrap(String deploymentId) throws IOException {\n         Path existingLaunchDir = Files.readSymbolicLink(currentDir).toAbsolutePath();\n         copyFolderRecursively(existingLaunchDir, newLaunchDir, REPLACE_EXISTING, NOFOLLOW_LINKS, COPY_ATTRIBUTES);\n \n+        cleanup();\n+        setupLinkToDirectory(newDir, newLaunchDir);\n         setupLinkToDirectory(oldDir, existingLaunchDir);\n+        Files.delete(currentDir);\n         setupLinkToDirectory(currentDir, newLaunchDir);\n+        Files.delete(newDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MjY3Ng=="}, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxMDA4OQ==", "bodyText": "Even though you say that, I'd feel better if you just add the ifExists. Less room for throwing exceptions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r522410089", "createdAt": "2020-11-12T20:35:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "diffHunk": "@@ -237,8 +255,12 @@ public void prepareBootstrap(String deploymentId) throws IOException {\n         Path existingLaunchDir = Files.readSymbolicLink(currentDir).toAbsolutePath();\n         copyFolderRecursively(existingLaunchDir, newLaunchDir, REPLACE_EXISTING, NOFOLLOW_LINKS, COPY_ATTRIBUTES);\n \n+        cleanup();\n+        setupLinkToDirectory(newDir, newLaunchDir);\n         setupLinkToDirectory(oldDir, existingLaunchDir);\n+        Files.delete(currentDir);\n         setupLinkToDirectory(currentDir, newLaunchDir);\n+        Files.delete(newDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MjY3Ng=="}, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTEwMDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoxMDoyNlrOHxmexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoxMDoyNlrOHxmexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3Mjc0Mg==", "bodyText": "at least log?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r521772742", "createdAt": "2020-11-12T02:10:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "diffHunk": "@@ -251,7 +273,21 @@ public void prepareBootstrap(String deploymentId) throws IOException {\n      */\n     public void setupLinkToDirectory(Path link, Path directory) throws IOException {\n         logger.atDebug().kv(\"link\", link).kv(\"directory\", directory).log(\"Set up link to directory\");\n-        Files.deleteIfExists(link);\n         Files.createSymbolicLink(link, directory);\n     }\n+\n+    private void cleanup() {\n+        try {\n+            Files.deleteIfExists(brokenDir);\n+        } catch (IOException ignore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTEwMjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/CommitableReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoxMToxN1rOHxmf0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1Mzo1M1rOHyGy-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MzAwOA==", "bodyText": "definitely needs a unit test", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r521773008", "createdAt": "2020-11-12T02:11:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/CommitableReader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public final class CommitableReader {\n+    private static final Logger logger = LogManager.getLogger(CommitableReader.class);\n+\n+    private final Path target;\n+    private final Path backup;\n+\n+    private CommitableReader(Path target, Path backup) {\n+        this.target = target;\n+        this.backup = backup;\n+    }\n+\n+    public static CommitableReader of(Path path) {\n+        return new CommitableReader(path, CommitableFile.getBackupFile(path));\n+    }\n+\n+    /**\n+     * Read and validate the content of the given CommitableFile.\n+     *\n+     * @param validator CrashableFunction to read and validate file content\n+     * @throws IOException on I/O error\n+     */\n+    public void read(CrashableFunction<InputStream, Void, IOException> validator) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMjIwMA==", "bodyText": "Currently covered in classes where it's used. But I can also add some explicitly", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r522302200", "createdAt": "2020-11-12T17:53:53Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/util/CommitableReader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public final class CommitableReader {\n+    private static final Logger logger = LogManager.getLogger(CommitableReader.class);\n+\n+    private final Path target;\n+    private final Path backup;\n+\n+    private CommitableReader(Path target, Path backup) {\n+        this.target = target;\n+        this.backup = backup;\n+    }\n+\n+    public static CommitableReader of(Path path) {\n+        return new CommitableReader(path, CommitableFile.getBackupFile(path));\n+    }\n+\n+    /**\n+     * Read and validate the content of the given CommitableFile.\n+     *\n+     * @param validator CrashableFunction to read and validate file content\n+     * @throws IOException on I/O error\n+     */\n+    public void read(CrashableFunction<InputStream, Void, IOException> validator) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MzAwOA=="}, "originalCommit": {"oid": "ad9b4f528ed1a5155a648f43b2ad3a9b818274d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTE2Njg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDozNToxMFrOHyNX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDozNToxMFrOHyNX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwOTk0MQ==", "bodyText": "deleteIfExists", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/665#discussion_r522409941", "createdAt": "2020-11-12T20:35:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelAlternatives.java", "diffHunk": "@@ -208,6 +225,7 @@ public void prepareRollback() throws IOException {\n             return;\n         }\n         setupLinkToDirectory(brokenDir, Files.readSymbolicLink(currentDir).toAbsolutePath());\n+        Files.delete(currentDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789dc09db7a920692478bc4de94961b738d04761"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 221, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}