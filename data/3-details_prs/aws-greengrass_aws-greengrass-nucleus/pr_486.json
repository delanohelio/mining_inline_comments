{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NjAwNzc4", "number": 486, "title": "Device deployment", "bodyText": "Description of changes:\nChanges:\n\nSubscribe to devices classic shadow to receive device deployment.\nCarry out the deployment when a notification is received\nAfter deployment, update the reported section of the shadow with the configuration device is running.\nAfter deployment, publish device status via FSS\n\nUpdated read me with details.\nHow was this change tested:\nInteg and e2e test\nAny additional information or context required to review the change:\nChecklist:\n\n[ X] Updated the README if applicable\n Updated or added new unit tests\n[ X] Updated or added new integration tests\n[ X] Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-09-29T06:50:54Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486", "merged": true, "mergeCommit": {"oid": "4305965ba948ddd31543f99a5d32e9292808728a"}, "closed": true, "closedAt": "2020-10-03T01:02:53Z", "author": {"login": "fahadmohammed01"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNie2PgH2gAyNDk0NjAwNzc4Ojc4OTZiOGRjOTM1MDViOTk2OGZkZTM4MmIwZjhiZDc3YmMwY2Y0Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOtVGagFqTUwMTQ0OTIyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7896b8dc93505b9968fde382b0f8bd77bc0cf467", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7896b8dc93505b9968fde382b0f8bd77bc0cf467", "committedDate": "2020-09-29T06:48:43Z", "message": "shadow deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTQ0NjQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-498144641", "createdAt": "2020-09-29T06:53:52Z", "commit": {"oid": "7896b8dc93505b9968fde382b0f8bd77bc0cf467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo1Mzo1MlrOHZdXwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo1Mzo1MlrOHZdXwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NzY2NA==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\nFix: Rethrow the InterruptedException or reinterrupt the current thread using Thread.currentThread().interrupt() so that higher-level interrupt handlers can function correctly.\nIf you are wrapping the InterruptedException inside a RuntimeException, call Thread.currentThread().interrupt() before throwing the RuntimeException.\nLearn more about interrupts and dealing with InterruptedException", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r496457664", "createdAt": "2020-09-29T06:53:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        subscribeToShadowTopics();\n+        // Get the shadow state when kernel starts up by publishing to get topic\n+        publishToGetDeviceShadowTopic();\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7896b8dc93505b9968fde382b0f8bd77bc0cf467"}, "originalPosition": 188}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06a16b506873d37447e9aa9608afc68914d92c0", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e06a16b506873d37447e9aa9608afc68914d92c0", "committedDate": "2020-09-29T06:59:16Z", "message": "shadow deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ecf9319b50e7a07453d0242a5b8694519ce79c1", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ecf9319b50e7a07453d0242a5b8694519ce79c1", "committedDate": "2020-09-29T07:01:55Z", "message": "merged from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55df8e97d68f76a13a693d62348446f8f2f3ac77", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/55df8e97d68f76a13a693d62348446f8f2f3ac77", "committedDate": "2020-09-29T18:03:58Z", "message": "Merge branch 'master' into device_deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b4413f4df99c46dbb246db8801cddfe230b0cc9", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6b4413f4df99c46dbb246db8801cddfe230b0cc9", "committedDate": "2020-09-29T18:49:44Z", "message": "fixed pmd violations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd86d313163a98488e17c9908b303239d8d87b9a", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fd86d313163a98488e17c9908b303239d8d87b9a", "committedDate": "2020-09-29T19:04:01Z", "message": "fixed pmd violations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dc0b98f0c5a15ea0020b5cc9dbd89c92ee20b8a", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7dc0b98f0c5a15ea0020b5cc9dbd89c92ee20b8a", "committedDate": "2020-09-29T20:19:17Z", "message": "Merge branch 'master' into device_deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17b447e17338ce13fe7c6d6b9c26fa617473ea6", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e17b447e17338ce13fe7c6d6b9c26fa617473ea6", "committedDate": "2020-09-30T00:09:45Z", "message": "moved subscribe to a separate thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3eeb2e97f28a4fff64ff537ea8bd747646a4efa2", "committedDate": "2020-09-30T00:10:19Z", "message": "Merge branch 'master' into device_deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDEwNTU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-499010559", "createdAt": "2020-09-30T00:23:57Z", "commit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyMzo1N1rOHaJOYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjowNjoxMlrOHaK1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NjE2MA==", "bodyText": "With CLI over IPC we should not be needing LocalDeploymentListener. If its not too much, remove this class in this PR.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497176160", "createdAt": "2020-09-30T00:23:57Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -150,10 +150,11 @@ public DeploymentService(Topics topics) {\n     @Override\n     public void postInject() {\n         super.postInject();\n-        // Informing kernel about IotJobsHelper and LocalDeploymentListener so kernel can instantiate,\n-        // inject dependencies and call post inject.\n+        // Informing kernel about IotJobsHelper ShadowDeploymentListener and LocalDeploymentListener,\n+        // so kernel can instantiate,inject dependencies and call post inject.\n         // This is required because both the classes are independent and not Greengrass services\n         context.get(IotJobsHelper.class);\n+        context.get(ShadowDeploymentListener.class);\n         context.get(LocalDeploymentListener.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MDk1MA==", "bodyText": "Is empty deployment doc valid?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497190950", "createdAt": "2020-09-30T01:18:14Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -395,16 +408,16 @@ private DefaultDeploymentTask createDefaultNewDeployment(Deployment deployment)\n     }\n \n     private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) throws InvalidRequestException {\n-        String jobDocumentString = deployment.getDeploymentDocument();\n-        if (Utils.isEmpty(jobDocumentString)) {\n+\n+        if (deployment.getDeploymentDocument() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MTM1Ng==", "bodyText": "Deserialize?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497191356", "createdAt": "2020-09-30T01:20:03Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -422,14 +435,18 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n                             }\n                         });\n                     }\n-\n                     document = DeploymentDocumentConverter\n                             .convertFromLocalOverrideRequestAndRoot(localOverrideRequest, rootComponents);\n                     break;\n                 case IOT_JOBS:\n-                    FleetConfiguration config = OBJECT_MAPPER.readValue(jobDocumentString, FleetConfiguration.class);\n+                    FleetConfiguration config = OBJECT_MAPPER.readValue((String) deployment.getDeploymentDocument(),\n+                            FleetConfiguration.class);\n                     document = DeploymentDocumentConverter.convertFromFleetConfiguration(config);\n                     break;\n+                case SHADOW:\n+                    document = DeploymentDocumentConverter.convertFromFleetConfiguration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5NzExMw==", "bodyText": "We need to check if the exception qualifies for being retryable. https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java#L460 - Similar TODO needs to be added here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497197113", "createdAt": "2020-09-30T01:43:36Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5Nzg5Nw==", "bodyText": "This TODO should be in FleetStatusService, not here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497197897", "createdAt": "2020-09-30T01:46:45Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5ODIxNw==", "bodyText": "Should be called CONFIGURATION_ARN not DEPLOYMENT_ARN", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497198217", "createdAt": "2020-09-30T01:48:04Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5OTc3MA==", "bodyText": "If version 3 was cancelled then the version coming in the deployment be version 2 or version 4?\nIf it will be 2 then this will not provide desired cancellation behavior.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497199770", "createdAt": "2020-09-30T01:54:15Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.convertValue(configuration, FleetConfiguration.class);\n+        synchronized (ShadowDeploymentListener.class) {\n+            if (lastVersion != null && lastVersion > version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTA0NQ==", "bodyText": "Why is this needed? This is not safe. The document from any source should be json and then DeploymentService parses it depending on the deploymentType.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497201045", "createdAt": "2020-09-30T01:59:19Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/model/Deployment.java", "diffHunk": "@@ -41,7 +41,7 @@\n      * @param deploymentType deployment type\n      * @param id deployment id\n      */\n-    public Deployment(String deploymentDocument, DeploymentType deploymentType, String id) {\n+    public Deployment(Object deploymentDocument, DeploymentType deploymentType, String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTMwNw==", "bodyText": "You don't need this conversion here. Just pull put the configuration arn from the map. This conversion should happen in DeploymentService. Keeping it here just makes it confusing in the DeploymentService and now I know why you do not deserialize over there. But I would prefer deserializing there, unless there is some other reason for this. You can just serialize it here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497201307", "createdAt": "2020-09-30T02:00:24Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.convertValue(configuration, FleetConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTk4OA==", "bodyText": "I don't understand this reasoning. Why do we need to persist data for rollback here?\nIn my mind a desired state corresponds to a config arn, so we should not be deploying a config arn multiple times.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497201988", "createdAt": "2020-09-30T02:03:31Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjYwNg==", "bodyText": "Change the name to CONFIGURATION_ARN", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497202606", "createdAt": "2020-09-30T02:06:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.convertValue(configuration, FleetConfiguration.class);\n+        synchronized (ShadowDeploymentListener.class) {\n+            if (lastVersion != null && lastVersion > version) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .kv(\"SHADOW_VERSION\", version)\n+                        .log(\"Old deployment notification, Ignoring...\");\n+                return;\n+            }\n+            if (lastConfigurationArn != null && lastConfigurationArn.equals(fleetConfiguration.getConfigurationArn())) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .log(\"Duplicate deployment notification, Ignoring...\");\n+                return;\n+            }\n+            lastConfigurationArn = fleetConfiguration.getConfigurationArn();\n+            lastVersion = version;\n+        }\n+        configArnToDesiredStateMap.compute(fleetConfiguration.getConfigurationArn(), (arn, pair) -> {\n+            if (pair == null) {\n+                pair = new Pair(1, configuration);\n+            } else {\n+                pair.setLeft(pair.getLeft() + 1);\n+            }\n+            return pair;\n+        });\n+        Deployment deployment =\n+                new Deployment(fleetConfiguration, DeploymentType.SHADOW, fleetConfiguration.getConfigurationArn());\n+        deploymentsQueue.add(deployment);\n+    }\n+\n+\n+    private MqttClientConnection getMqttClientConnection() {\n+        return new WrapperMqttClientConnection(mqttClient);\n+    }\n+\n+    @Data\n+    @SuppressWarnings(\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\")\n+    @SuppressFBWarnings\n+    public static class DeviceDeploymentDetails {\n+        @JsonProperty(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NjU0NTYz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-499654563", "createdAt": "2020-09-30T17:23:02Z", "commit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMzowMlrOHan7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMzowMlrOHan7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3OTEzMA==", "bodyText": "I would not call it JOB status as that refers to Iot Jobs. Would prefer DEPLOYMENT_STATUS", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497679130", "createdAt": "2020-09-30T17:23:02Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.convertValue(configuration, FleetConfiguration.class);\n+        synchronized (ShadowDeploymentListener.class) {\n+            if (lastVersion != null && lastVersion > version) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .kv(\"SHADOW_VERSION\", version)\n+                        .log(\"Old deployment notification, Ignoring...\");\n+                return;\n+            }\n+            if (lastConfigurationArn != null && lastConfigurationArn.equals(fleetConfiguration.getConfigurationArn())) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .log(\"Duplicate deployment notification, Ignoring...\");\n+                return;\n+            }\n+            lastConfigurationArn = fleetConfiguration.getConfigurationArn();\n+            lastVersion = version;\n+        }\n+        configArnToDesiredStateMap.compute(fleetConfiguration.getConfigurationArn(), (arn, pair) -> {\n+            if (pair == null) {\n+                pair = new Pair(1, configuration);\n+            } else {\n+                pair.setLeft(pair.getLeft() + 1);\n+            }\n+            return pair;\n+        });\n+        Deployment deployment =\n+                new Deployment(fleetConfiguration, DeploymentType.SHADOW, fleetConfiguration.getConfigurationArn());\n+        deploymentsQueue.add(deployment);\n+    }\n+\n+\n+    private MqttClientConnection getMqttClientConnection() {\n+        return new WrapperMqttClientConnection(mqttClient);\n+    }\n+\n+    @Data\n+    @SuppressWarnings(\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\")\n+    @SuppressFBWarnings\n+    public static class DeviceDeploymentDetails {\n+        @JsonProperty(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN)\n+        private String configurationArn;\n+        @JsonProperty(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 254}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTE4NjQw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-498918640", "createdAt": "2020-09-29T21:49:01Z", "commit": {"oid": "7dc0b98f0c5a15ea0020b5cc9dbd89c92ee20b8a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo1MDoxMlrOHaDbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0OTo1MFrOHauzGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MTIyMA==", "bodyText": "nit: IotJobsHelper, ShadowDeploymentListener and instantiate, inject", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497081220", "createdAt": "2020-09-29T21:50:12Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -150,10 +150,11 @@ public DeploymentService(Topics topics) {\n     @Override\n     public void postInject() {\n         super.postInject();\n-        // Informing kernel about IotJobsHelper and LocalDeploymentListener so kernel can instantiate,\n-        // inject dependencies and call post inject.\n+        // Informing kernel about IotJobsHelper ShadowDeploymentListener and LocalDeploymentListener,\n+        // so kernel can instantiate,inject dependencies and call post inject.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc0b98f0c5a15ea0020b5cc9dbd89c92ee20b8a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MjE1Mw==", "bodyText": "Do we need to compare the id of current deployment and new shadow deployment here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497082153", "createdAt": "2020-09-29T21:52:19Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -180,11 +181,21 @@ protected void startup() throws InterruptedException {\n                 if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n                         .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n                         && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Canceling current deployment\");\n                     // Assuming cancel will either cancel the current deployment or wait till it finishes\n                     cancelCurrentDeployment();\n                 }\n+                // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n+                // and wait till the new device deployment can be picked up.\n+                if (deployment.getDeploymentType() == Deployment.DeploymentType.SHADOW\n+                        && currentDeploymentTaskMetadata != null\n+                        && currentDeploymentTaskMetadata.getDeploymentType() == Deployment.DeploymentType.SHADOW) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc0b98f0c5a15ea0020b5cc9dbd89c92ee20b8a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MjQ4NQ==", "bodyText": "Is this deployment Id basically fleet config arn?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497082485", "createdAt": "2020-09-29T21:53:05Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -180,11 +181,21 @@ protected void startup() throws InterruptedException {\n                 if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n                         .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n                         && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc0b98f0c5a15ea0020b5cc9dbd89c92ee20b8a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4NDcxOA==", "bodyText": "Can we reuse util.SerializerFactory if possible?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497784718", "createdAt": "2020-09-30T20:36:06Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4Njc2NQ==", "bodyText": "In case of failure and rollback, is it ok to not update the reported state? Or do we need to update reported state with a newer timestamp?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497786765", "createdAt": "2020-09-30T20:40:06Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTk4OA=="}, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4NzYyNw==", "bodyText": "Do we support updating device info in runtime? If yes, how can we start these listeners if device info is added to config?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497787627", "createdAt": "2020-09-30T20:41:54Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4OTY1NA==", "bodyText": "Not sure if I understand what this code is doing. What is count used for?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497789654", "createdAt": "2020-09-30T20:45:55Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5MTc3MA==", "bodyText": "Why do we need 3 different classes of deploymentDetails for each type?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497791770", "createdAt": "2020-09-30T20:49:50Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.convertValue(configuration, FleetConfiguration.class);\n+        synchronized (ShadowDeploymentListener.class) {\n+            if (lastVersion != null && lastVersion > version) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .kv(\"SHADOW_VERSION\", version)\n+                        .log(\"Old deployment notification, Ignoring...\");\n+                return;\n+            }\n+            if (lastConfigurationArn != null && lastConfigurationArn.equals(fleetConfiguration.getConfigurationArn())) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .log(\"Duplicate deployment notification, Ignoring...\");\n+                return;\n+            }\n+            lastConfigurationArn = fleetConfiguration.getConfigurationArn();\n+            lastVersion = version;\n+        }\n+        configArnToDesiredStateMap.compute(fleetConfiguration.getConfigurationArn(), (arn, pair) -> {\n+            if (pair == null) {\n+                pair = new Pair(1, configuration);\n+            } else {\n+                pair.setLeft(pair.getLeft() + 1);\n+            }\n+            return pair;\n+        });\n+        Deployment deployment =\n+                new Deployment(fleetConfiguration, DeploymentType.SHADOW, fleetConfiguration.getConfigurationArn());\n+        deploymentsQueue.add(deployment);\n+    }\n+\n+\n+    private MqttClientConnection getMqttClientConnection() {\n+        return new WrapperMqttClientConnection(mqttClient);\n+    }\n+\n+    @Data\n+    @SuppressWarnings(\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\")\n+    @SuppressFBWarnings\n+    public static class DeviceDeploymentDetails {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 251}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da370faf1b864c8d6731f962fa970a027e0ce7d3", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/da370faf1b864c8d6731f962fa970a027e0ce7d3", "committedDate": "2020-09-30T21:06:17Z", "message": "publish status via FSS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83c02c0db1fc599a8231284b5db7e06d6ce2e33f", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/83c02c0db1fc599a8231284b5db7e06d6ce2e33f", "committedDate": "2020-09-30T21:06:44Z", "message": "Merge branch 'device_deployment' of github.com:aws/aws-greengrass-kernel into device_deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e89b2a4026ee8e5b5d85cc738d181d89620d6083", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e89b2a4026ee8e5b5d85cc738d181d89620d6083", "committedDate": "2020-09-30T21:38:13Z", "message": "addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab71c93314932918e891461b29ad80edfc5777d", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/aab71c93314932918e891461b29ad80edfc5777d", "committedDate": "2020-09-30T22:01:54Z", "message": "Merge branch 'master' into device_deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTQ4MDg5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-499948089", "createdAt": "2020-10-01T01:00:22Z", "commit": {"oid": "aab71c93314932918e891461b29ad80edfc5777d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTowMDoyM1rOHa1QGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToyMDo0MFrOHa2C_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzQ5OA==", "bodyText": "nit - equals", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497897498", "createdAt": "2020-10-01T01:00:23Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -180,11 +181,21 @@ protected void startup() throws InterruptedException {\n                 if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n                         .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n                         && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Canceling current deployment\");\n                     // Assuming cancel will either cancel the current deployment or wait till it finishes\n                     cancelCurrentDeployment();\n                 }\n+                // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n+                // and wait till the new device deployment can be picked up.\n+                if (deployment.getDeploymentType() == Deployment.DeploymentType.SHADOW\n+                        && currentDeploymentTaskMetadata != null\n+                        && currentDeploymentTaskMetadata.getDeploymentType() == Deployment.DeploymentType.SHADOW) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab71c93314932918e891461b29ad80edfc5777d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwMDE5Ng==", "bodyText": "Why switching from empty to null check?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497900196", "createdAt": "2020-10-01T01:04:45Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -395,16 +408,16 @@ private DefaultDeploymentTask createDefaultNewDeployment(Deployment deployment)\n     }\n \n     private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) throws InvalidRequestException {\n-        String jobDocumentString = deployment.getDeploymentDocument();\n-        if (Utils.isEmpty(jobDocumentString)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab71c93314932918e891461b29ad80edfc5777d"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNTI0Nw==", "bodyText": "Doesn't rollback happen as part of the deployment execution, or is this rollback referring to the kernel update deployment rollback? I'm confused why there will be two different status entries with same config arn like this comment says", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497905247", "createdAt": "2020-10-01T01:12:33Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTk4OA=="}, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjAzNw==", "bodyText": "Why not use isDeviceConfiguredToTalkToCloud() here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497906037", "createdAt": "2020-10-01T01:13:44Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.aws.greengrass.util.SerializerFactory;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_CONFIGURATION_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+\n+    @Setter\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab71c93314932918e891461b29ad80edfc5777d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxMDA4NA==", "bodyText": "This else block doesn't seem to be doing anything too different from the if block for jobs above, can we unify them?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497910084", "createdAt": "2020-10-01T01:19:54Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -235,6 +242,16 @@ private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n                     deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID));\n             isDeploymentInProgress.set(false);\n             updateEventTriggeredFleetStatusData();\n+        } else if (type == SHADOW) {\n+            String status = deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_STATUS).toString();\n+            if (DeploymentStatus.IN_PROGRESS.toString().equals(status)) {\n+                isDeploymentInProgress.set(true);\n+                return true;\n+            }\n+            logger.atDebug().log(\"Updating Fleet Status service for shadow deployment with Configuration: {}\",\n+                    deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_CONFIGURATION_ARN));\n+            isDeploymentInProgress.set(false);\n+            updateEventTriggeredFleetStatusData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab71c93314932918e891461b29ad80edfc5777d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxMDUyNg==", "bodyText": "+1, will be nice if we could clean up a bit", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r497910526", "createdAt": "2020-10-01T01:20:40Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.FleetConfiguration;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Data;\n+import lombok.Getter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import static com.aws.greengrass.deployment.DeploymentService.DEPLOYMENTS_QUEUE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEPLOYMENT_TYPE;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    protected static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    @Inject\n+    @Named(DEPLOYMENTS_QUEUE)\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n+    @Inject\n+    private MqttClient mqttClient;\n+\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    //Once deployment succeeds, the reported state of the shadow needs to be synced with the desired state.\n+    //This map keeps track of configArn to desired state mapping. During rollback, the same configArn will be present\n+    // multiple deployments so a pair is used to keep track of the count of deployments with the same config arn.\n+    // The count is used for clean up purposes.\n+    private final Map<String, Pair<Integer, Map<String, Object>>> configArnToDesiredStateMap = new HashMap<>();\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        try {\n+            deviceConfiguration.validate();\n+        } catch (DeviceConfigurationException e) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        //TODO: publish status via FSS\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS));\n+\n+        String configurationArn = (String)\n+                deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_DEVICE_DEPLOYMENT_ARN);\n+        Pair<Integer, Map<String, Object>> configurationCountPair = configArnToDesiredStateMap.get(configurationArn);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(configurationCountPair.getRight());\n+\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        if (DeploymentStatus.SUCCEEDED.equals(status) || DeploymentStatus.FAILED.equals(status)) {\n+            configurationCountPair.setLeft(configurationCountPair.getLeft() - 1);\n+            if (configurationCountPair.getLeft() == 0) {\n+                configArnToDesiredStateMap.remove(configurationArn);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.convertValue(configuration, FleetConfiguration.class);\n+        synchronized (ShadowDeploymentListener.class) {\n+            if (lastVersion != null && lastVersion > version) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .kv(\"SHADOW_VERSION\", version)\n+                        .log(\"Old deployment notification, Ignoring...\");\n+                return;\n+            }\n+            if (lastConfigurationArn != null && lastConfigurationArn.equals(fleetConfiguration.getConfigurationArn())) {\n+                logger.atInfo().kv(\"CONFIGURATION_ARN\", fleetConfiguration.getConfigurationArn())\n+                        .log(\"Duplicate deployment notification, Ignoring...\");\n+                return;\n+            }\n+            lastConfigurationArn = fleetConfiguration.getConfigurationArn();\n+            lastVersion = version;\n+        }\n+        configArnToDesiredStateMap.compute(fleetConfiguration.getConfigurationArn(), (arn, pair) -> {\n+            if (pair == null) {\n+                pair = new Pair(1, configuration);\n+            } else {\n+                pair.setLeft(pair.getLeft() + 1);\n+            }\n+            return pair;\n+        });\n+        Deployment deployment =\n+                new Deployment(fleetConfiguration, DeploymentType.SHADOW, fleetConfiguration.getConfigurationArn());\n+        deploymentsQueue.add(deployment);\n+    }\n+\n+\n+    private MqttClientConnection getMqttClientConnection() {\n+        return new WrapperMqttClientConnection(mqttClient);\n+    }\n+\n+    @Data\n+    @SuppressWarnings(\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\")\n+    @SuppressFBWarnings\n+    public static class DeviceDeploymentDetails {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5MTc3MA=="}, "originalCommit": {"oid": "3eeb2e97f28a4fff64ff537ea8bd747646a4efa2"}, "originalPosition": 251}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82a10983edcbaebdbb49ddfb280f4d18626efb78", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/82a10983edcbaebdbb49ddfb280f4d18626efb78", "committedDate": "2020-10-02T01:42:55Z", "message": "Merge branch 'master' into device_deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93125aa91fc311cbeda4e63564092d4cc7ff6ccb", "committedDate": "2020-10-02T02:08:40Z", "message": "addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbe4c0f41f0b40fa8e5bb778434ce481839a953", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cbbe4c0f41f0b40fa8e5bb778434ce481839a953", "committedDate": "2020-10-02T02:42:37Z", "message": "addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4280c1382d684d45eade0413abfa3c177e021fd", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a4280c1382d684d45eade0413abfa3c177e021fd", "committedDate": "2020-10-02T02:50:02Z", "message": "added more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "963130c63aff7f3dcd83517673e37682388d2140", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/963130c63aff7f3dcd83517673e37682388d2140", "committedDate": "2020-10-02T04:24:07Z", "message": "minor bug fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODU0NDQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-500854449", "createdAt": "2020-10-02T04:27:10Z", "commit": {"oid": "963130c63aff7f3dcd83517673e37682388d2140"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDoyNzoxMFrOHbg_FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDoyNzoxMVrOHbg_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDAzNg==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem\nYou are using a ConcurrentLinkedQueue, but your usage of peek(), null check, and remove() may not be thread-safe at lines: 176, 179, 184, and 198. If the ConcurrentLinkedQueue contains only one element and two threads perform this same check at the same time , the second thread's call to remove() will throw NoSuchElementException.\nFix\nConsider using poll() (does not throw an exception, but it may return null, which you can check for) or handling the exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498614036", "createdAt": "2020-10-02T04:27:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.aws.greengrass.util.SerializerFactory;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_ID_KEY_NAME;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_STATUS_KEY_NAME;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    public static final String CONFIGURATION_ARN_LOG_KEY_NAME = \"CONFIGURATION_ARN\";\n+    private final Queue<Pair<String, Map<String, Object>>> desiredStateQueue = new ConcurrentLinkedQueue<>();\n+    @Inject\n+    private DeploymentQueue deploymentQueue;\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+    @Inject\n+    private MqttClient mqttClient;\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    @Setter\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        if (!deviceConfiguration.isDeviceConfiguredToTalkToCloud()) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(\"Caught exception while subscribing to shadow topics, \"\n+                            + \"will retry shortly\");\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                    return;\n+                }\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    @SuppressFBWarnings\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n+\n+        String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+\n+            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n+            // discard configurations that might have got added to the queue but the deployment\n+            // got discarded before being processed due to a new shadow deployment\n+            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n+                desiredStateQueue.poll();\n+                desired = desiredStateQueue.peek();\n+            }\n+\n+            if (desired == null) {\n+                logger.atError().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                        .log(\"Unable to update shadow for deployment\");\n+                return true;\n+            }\n+\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(desired.getRight());\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                desiredStateQueue.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963130c63aff7f3dcd83517673e37682388d2140"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDAzNw==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem\nYou are using a ConcurrentLinkedQueue, but your usage of peek(), null check, and remove() may not be thread-safe at lines: 181, 184, 198, and 179. If the ConcurrentLinkedQueue contains only one element and two threads perform this same check at the same time , the second thread's call to remove() will throw NoSuchElementException.\nFix\nConsider using poll() (does not throw an exception, but it may return null, which you can check for) or handling the exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498614037", "createdAt": "2020-10-02T04:27:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.aws.greengrass.util.SerializerFactory;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_ID_KEY_NAME;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_STATUS_KEY_NAME;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    public static final String CONFIGURATION_ARN_LOG_KEY_NAME = \"CONFIGURATION_ARN\";\n+    private final Queue<Pair<String, Map<String, Object>>> desiredStateQueue = new ConcurrentLinkedQueue<>();\n+    @Inject\n+    private DeploymentQueue deploymentQueue;\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+    @Inject\n+    private MqttClient mqttClient;\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    @Setter\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        if (!deviceConfiguration.isDeviceConfiguredToTalkToCloud()) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(\"Caught exception while subscribing to shadow topics, \"\n+                            + \"will retry shortly\");\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                    return;\n+                }\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    @SuppressFBWarnings\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n+\n+        String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+\n+            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n+            // discard configurations that might have got added to the queue but the deployment\n+            // got discarded before being processed due to a new shadow deployment\n+            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n+                desiredStateQueue.poll();\n+                desired = desiredStateQueue.peek();\n+            }\n+\n+            if (desired == null) {\n+                logger.atError().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                        .log(\"Unable to update shadow for deployment\");\n+                return true;\n+            }\n+\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(desired.getRight());\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                desiredStateQueue.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963130c63aff7f3dcd83517673e37682388d2140"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDAzOQ==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem\nYou are using a ConcurrentLinkedQueue, but your usage of peek() and peek() may not be thread-safe at lines: 176, 179, and 181. If the ConcurrentLinkedQueue contains only one element and another thread removes that element, this thread's call to peek() will get null. This null may be used at lines: 179 and 184. The removes that can remove the element are at lines: 198 and 180.\nFix\nConsider calling peek(), checking instead of your current check if the returned object is null, and only then using that object.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498614039", "createdAt": "2020-10-02T04:27:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.aws.greengrass.util.SerializerFactory;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_ID_KEY_NAME;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_STATUS_KEY_NAME;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    public static final String CONFIGURATION_ARN_LOG_KEY_NAME = \"CONFIGURATION_ARN\";\n+    private final Queue<Pair<String, Map<String, Object>>> desiredStateQueue = new ConcurrentLinkedQueue<>();\n+    @Inject\n+    private DeploymentQueue deploymentQueue;\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+    @Inject\n+    private MqttClient mqttClient;\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    @Setter\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        if (!deviceConfiguration.isDeviceConfiguredToTalkToCloud()) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(\"Caught exception while subscribing to shadow topics, \"\n+                            + \"will retry shortly\");\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                    return;\n+                }\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    @SuppressFBWarnings\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n+\n+        String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+\n+            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n+            // discard configurations that might have got added to the queue but the deployment\n+            // got discarded before being processed due to a new shadow deployment\n+            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n+                desiredStateQueue.poll();\n+                desired = desiredStateQueue.peek();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963130c63aff7f3dcd83517673e37682388d2140"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzU0NzE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-501354718", "createdAt": "2020-10-02T18:23:25Z", "commit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyMzoyNlrOHb3bsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozNjoxOFrOHb306Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTgxMA==", "bodyText": "Why do we need this iteration? How about keeping a reference to the last shadow deployment, and in offer(), directly remove the previous reference from queue on a new shadow deployment", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498981810", "createdAt": "2020-10-02T18:23:26Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentQueue.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class DeploymentQueue {\n+\n+    private static final Logger logger = LogManager.getLogger(DeploymentQueue.class);\n+    private final ConcurrentLinkedQueue<Deployment> deploymentsQueue = new ConcurrentLinkedQueue();\n+\n+    /**\n+     * Add a deployment to the queue.\n+     *\n+     * @param deployment deployment\n+     */\n+    public synchronized boolean offer(Deployment deployment) {\n+        //For shadow deployment when desired state is reverted, it can result in scheduling a deployment which is\n+        // same as\n+        if (!deployment.getDeploymentType().equals(DeploymentType.SHADOW) && deploymentsQueue.contains(deployment)) {\n+            return false;\n+        }\n+        return deploymentsQueue.offer(deployment);\n+    }\n+\n+    /**\n+     * Get the next deployment to be deployed.\n+     *\n+     * @return deployment\n+     */\n+    public synchronized Deployment peekNextDeployment() {\n+        Deployment deployment = deploymentsQueue.peek();\n+        // Discarding is not at schedule time because the deployment service does not remove the deployments atomically\n+        // Deployment service first peeks and determine if the next deployment is actionable.\n+        while (deployment != null && canDeploymentBeDiscarded(deployment)) {\n+            logger.atInfo().kv(\"DEPLOYMENT_ID\", deployment.getId())\n+                    .kv(\"DEPLOYMENT_TYPE\", deployment.getDeploymentType())\n+                    .log(\"Discarding device deployment\");\n+            deploymentsQueue.remove();\n+            deployment = deploymentsQueue.peek();\n+        }\n+        return deployment;\n+    }\n+\n+    /**\n+     * Removed the deployment from the head of the queue.\n+     */\n+    public synchronized void remove() {\n+        deploymentsQueue.remove();\n+    }\n+\n+    public boolean isEmpty() {\n+        return deploymentsQueue.isEmpty();\n+    }\n+\n+    private boolean canDeploymentBeDiscarded(Deployment selectedDeployment) {\n+        // If the selected deployment is of type shadow and there is another deployment in the queue\n+        // the selected deployment can be discarded. ShadowDeploymentListener ensures that shadow deployments are\n+        // queued based on the order in which they are created in the cloud.\n+        if (selectedDeployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n+            Iterator<Deployment> iterator = deploymentsQueue.iterator();\n+            while (iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MjYwOA==", "bodyText": "nit: we can still keep peek as method name", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498982608", "createdAt": "2020-10-02T18:25:01Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentQueue.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class DeploymentQueue {\n+\n+    private static final Logger logger = LogManager.getLogger(DeploymentQueue.class);\n+    private final ConcurrentLinkedQueue<Deployment> deploymentsQueue = new ConcurrentLinkedQueue();\n+\n+    /**\n+     * Add a deployment to the queue.\n+     *\n+     * @param deployment deployment\n+     */\n+    public synchronized boolean offer(Deployment deployment) {\n+        //For shadow deployment when desired state is reverted, it can result in scheduling a deployment which is\n+        // same as\n+        if (!deployment.getDeploymentType().equals(DeploymentType.SHADOW) && deploymentsQueue.contains(deployment)) {\n+            return false;\n+        }\n+        return deploymentsQueue.offer(deployment);\n+    }\n+\n+    /**\n+     * Get the next deployment to be deployed.\n+     *\n+     * @return deployment\n+     */\n+    public synchronized Deployment peekNextDeployment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NDY4Mw==", "bodyText": "Do we still cancel the deployment if config arn is the same?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498984683", "createdAt": "2020-10-02T18:29:04Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -186,28 +179,36 @@ protected void startup() throws InterruptedException {\n                     // Assuming cancel will either cancel the current deployment or wait till it finishes\n                     cancelCurrentDeployment();\n                 }\n-                // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                // and wait till the new device deployment can be picked up.\n-                if (deployment.getDeploymentType() == Deployment.DeploymentType.SHADOW\n-                        && currentDeploymentTaskMetadata != null\n-                        && currentDeploymentTaskMetadata.getDeploymentType() == Deployment.DeploymentType.SHADOW) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current device deployment\");\n-                    cancelCurrentDeployment();\n-                    continue;\n-                }\n                 if (currentDeploymentTaskMetadata != null && deployment.getId()\n                         .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n                         .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n                     // Duplicate message and already processing this deployment so nothing is needed\n-                    deploymentsQueue.remove();\n+                    deploymentQueue.remove();\n                     continue;\n                 }\n+                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n+                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n+                    // and wait till the new device deployment can be picked up.\n+                    if (currentDeploymentTaskMetadata != null\n+                            && currentDeploymentTaskMetadata.getDeploymentType().equals(DeploymentType.SHADOW)) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"Canceling current device deployment\");\n+                        cancelCurrentDeployment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTMxOA==", "bodyText": "How does LAST_SUCCESSFUL_DEPLOYMENT_ID_TOPIC work? Is it not for shadow deployment only?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498985318", "createdAt": "2020-10-02T18:30:13Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +242,8 @@ private void finishCurrentDeployment() throws InterruptedException {\n                     Topics deploymentGroupTopics = config.lookupTopics(GROUP_TO_ROOT_COMPONENTS_TOPICS,\n                             deploymentDocument.getGroupName());\n \n+                    config.lookup(LAST_SUCCESSFUL_DEPLOYMENT_ID_TOPIC)\n+                            .withValue(currentDeploymentTaskMetadata.getDeploymentId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NjQzMw==", "bodyText": "Cool.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498986433", "createdAt": "2020-10-02T18:32:34Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -73,40 +63,13 @@ public void persistAndPublishDeploymentStatus(String deploymentId, DeploymentTyp\n         //While this method is being run, another thread could be running the publishPersistedStatusUpdates\n         // method which consumes the data in config from the same topics. These two thread needs to be synchronized\n         synchronized (deploymentType) {\n-            logger.atDebug().kv(JOB_ID_LOG_KEY_NAME, deploymentId).kv(\"JobStatus\", status).log(\"Storing job status\");\n-            // TODO: Consider making DeploymentDetailsIotJobs and LocalDeploymentDetails inherit from the same base\n-            //  class with deployment type as common parameter and store those objects directly instead of Map\n-            Map<String, Object> deploymentDetails = null;\n-\n-            switch (deploymentType) {\n-                case IOT_JOBS:\n-                    IotJobsHelper.DeploymentDetailsIotJobs deploymentDetailsIotJobs =\n-                            new IotJobsHelper.DeploymentDetailsIotJobs();\n-                    deploymentDetailsIotJobs.setJobId(deploymentId);\n-                    deploymentDetailsIotJobs.setJobStatus(JobStatus.valueOf(status));\n-                    deploymentDetailsIotJobs.setStatusDetails(statusDetails);\n-                    deploymentDetailsIotJobs.setDeploymentType(DeploymentType.IOT_JOBS);\n-                    deploymentDetails = deploymentDetailsIotJobs.convertToMapOfObjects();\n-                    break;\n-                case LOCAL:\n-                    CLIServiceAgent.LocalDeploymentDetails localDeploymentDetails =\n-                            new CLIServiceAgent.LocalDeploymentDetails();\n-                    localDeploymentDetails.setDeploymentId(deploymentId);\n-                    localDeploymentDetails.setDeploymentType(DeploymentType.LOCAL);\n-                    localDeploymentDetails.setStatus(DeploymentStatus.valueOf(status));\n-                    deploymentDetails = localDeploymentDetails.convertToMapOfObject();\n-                    break;\n-                case SHADOW:\n-                    DeviceDeploymentDetails deviceDeploymentDetails = new DeviceDeploymentDetails();\n-                    deviceDeploymentDetails.setConfigurationArn(deploymentId);\n-                    deviceDeploymentDetails.setStatus(DeploymentStatus.valueOf(status));\n-                    deviceDeploymentDetails.setDeploymentType(DeploymentType.SHADOW);\n-                    deploymentDetails = deviceDeploymentDetails.convertToMapOfObjects();\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unexpected deploymentType: \" + deploymentType);\n-            }\n-\n+            logger.atDebug().kv(DEPLOYMENT_ID_KEY_NAME, deploymentId).kv(DEPLOYMENT_STATUS_KEY_NAME, status)\n+                    .log(\"Storing deployment status\");\n+            Map<String, Object> deploymentDetails = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzI2Ng==", "bodyText": "Seems LocalDeploymentListener is removed and ShadowDeploymentListener added", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498987266", "createdAt": "2020-10-02T18:34:15Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -150,16 +143,16 @@ public DeploymentService(Topics topics) {\n     @Override\n     public void postInject() {\n         super.postInject();\n-        // Informing kernel about IotJobsHelper ShadowDeploymentListener and LocalDeploymentListener,\n-        // so kernel can instantiate,inject dependencies and call post inject.\n+        // Informing kernel about IotJobsHelper and LocalDeploymentListener,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODI2NQ==", "bodyText": "Add javadoc for desiredState?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r498988265", "createdAt": "2020-10-02T18:36:18Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -52,21 +46,17 @@\n     private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n     private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n     private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    private final Queue<Pair<String, Map<String, Object>>> desiredState = new ConcurrentLinkedQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93125aa91fc311cbeda4e63564092d4cc7ff6ccb"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b92f4e4fdbad97df7b9253bd5052af6f3489320", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2b92f4e4fdbad97df7b9253bd5052af6f3489320", "committedDate": "2020-10-02T19:05:07Z", "message": "added comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3986cdad197ccbb7759fbe548d92583e0368d77d", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3986cdad197ccbb7759fbe548d92583e0368d77d", "committedDate": "2020-10-02T19:06:07Z", "message": "Merge branch 'master' into device_deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c96af29d22ab1f36037dd9e06abdf7145629af", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f6c96af29d22ab1f36037dd9e06abdf7145629af", "committedDate": "2020-10-02T19:46:40Z", "message": "addressed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDA1ODEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-501405812", "createdAt": "2020-10-02T19:48:56Z", "commit": {"oid": "f6c96af29d22ab1f36037dd9e06abdf7145629af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDM2NTcw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-501436570", "createdAt": "2020-10-02T20:44:38Z", "commit": {"oid": "f6c96af29d22ab1f36037dd9e06abdf7145629af"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0NDozOVrOHb7G9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0NDozOVrOHb7G9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MjAzOQ==", "bodyText": "Nit - just say Get next deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r499042039", "createdAt": "2020-10-02T20:44:39Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentQueue.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class DeploymentQueue {\n+\n+    private static final Logger logger = LogManager.getLogger(DeploymentQueue.class);\n+    private final ConcurrentLinkedQueue<Deployment> deploymentsQueue = new ConcurrentLinkedQueue();\n+\n+    /**\n+     * Add a deployment to the queue.\n+     *\n+     * @param deployment deployment\n+     */\n+    public synchronized boolean offer(Deployment deployment) {\n+        //For shadow deployment when desired state is reverted, it can result in scheduling a deployment which is\n+        // same as\n+        if (!DeploymentType.SHADOW.equals(deployment.getDeploymentType()) && deploymentsQueue.contains(deployment)) {\n+            return false;\n+        }\n+        return deploymentsQueue.offer(deployment);\n+    }\n+\n+    /**\n+     * Get the next deployment to be deployed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c96af29d22ab1f36037dd9e06abdf7145629af"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDQ5MjI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#pullrequestreview-501449224", "createdAt": "2020-10-02T21:09:04Z", "commit": {"oid": "f6c96af29d22ab1f36037dd9e06abdf7145629af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTowOTowNFrOHb7rvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTowOTowNFrOHb7rvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MTQ1Mg==", "bodyText": "How do we handle effective cancellations? We should be removing (synchronized with DeploymentService) from deployment queue if possible right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/486#discussion_r499051452", "createdAt": "2020-10-02T21:09:04Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.aws.greengrass.deployment;\n+\n+import com.aws.greengrass.dependency.InjectionActions;\n+import com.aws.greengrass.deployment.model.Deployment;\n+import com.aws.greengrass.ipc.services.cli.models.DeploymentStatus;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import com.aws.greengrass.mqttclient.MqttClient;\n+import com.aws.greengrass.mqttclient.WrapperMqttClientConnection;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Pair;\n+import com.aws.greengrass.util.SerializerFactory;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.iotshadow.IotShadowClient;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.GetShadowSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.ShadowState;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowRequest;\n+import software.amazon.awssdk.iot.iotshadow.model.UpdateShadowSubscriptionRequest;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_ID_KEY_NAME;\n+import static com.aws.greengrass.deployment.DeploymentStatusKeeper.DEPLOYMENT_STATUS_KEY_NAME;\n+import static com.aws.greengrass.deployment.model.Deployment.DeploymentType;\n+\n+public class ShadowDeploymentListener implements InjectionActions {\n+\n+    private static final long TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS = Duration.ofMinutes(1).getSeconds();\n+    private static final long WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS = Duration.ofMinutes(2).toMillis();\n+    private static final Logger logger = LogManager.getLogger(ShadowDeploymentListener.class);\n+    public static final String CONFIGURATION_ARN_LOG_KEY_NAME = \"CONFIGURATION_ARN\";\n+    //Keeps track of the deployment config-arn and the desired state, in the order in which deployments\n+    //were received.\n+    private final Queue<Pair<String, Map<String, Object>>> desiredStateQueue = new ConcurrentLinkedQueue<>();\n+    @Inject\n+    private DeploymentQueue deploymentQueue;\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+    @Inject\n+    private MqttClient mqttClient;\n+    @Inject\n+    private ExecutorService executorService;\n+    @Inject\n+    private DeviceConfiguration deviceConfiguration;\n+    @Setter\n+    private IotShadowClient iotShadowClient;\n+    private String thingName;\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            executorService.execute(() -> {\n+                // Get the shadow state when connection is re-established by publishing to get topic\n+                publishToGetDeviceShadowTopic();\n+                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.SHADOW);\n+            });\n+        }\n+    };\n+    private String lastConfigurationArn;\n+    private Integer lastVersion;\n+\n+    @Override\n+    public void postInject() {\n+\n+        if (!deviceConfiguration.isDeviceConfiguredToTalkToCloud()) {\n+            logger.atWarn().log(\"Device not configured to talk to AWS Iot cloud. Device will run in offline mode\");\n+            return;\n+        }\n+\n+        this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.iotShadowClient = new IotShadowClient(getMqttClientConnection());\n+        mqttClient.addToCallbackEvents(callbacks);\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.SHADOW,\n+                this::deploymentStatusChanged, ShadowDeploymentListener.class.getName());\n+        executorService.execute(() -> {\n+            subscribeToShadowTopics();\n+            // Get the shadow state when kernel starts up by publishing to get topic\n+            publishToGetDeviceShadowTopic();\n+        });\n+    }\n+\n+\n+    /*\n+        Subscribe to \"$aws/things/{thingName}/shadow/update/accepted\" topic to get notified when shadow is updated\n+        Subscribe to \"$aws/things/{thingName}/shadow/get/accepted\" topic to retrieve shadow by publishing to get topic\n+     */\n+    private void subscribeToShadowTopics() {\n+        while (true) {\n+            try {\n+                UpdateShadowSubscriptionRequest updateShadowSubscriptionRequest = new UpdateShadowSubscriptionRequest();\n+                updateShadowSubscriptionRequest.thingName = thingName;\n+                iotShadowClient.SubscribeToUpdateShadowAccepted(updateShadowSubscriptionRequest,\n+                        QualityOfService.AT_LEAST_ONCE, updateShadowResponse ->\n+                                shadowUpdated(updateShadowResponse.state.desired, updateShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing updateShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                GetShadowSubscriptionRequest request = new GetShadowSubscriptionRequest();\n+                request.thingName = thingName;\n+                logger.info(\"Subscribed to update device shadow topics\" + thingName);\n+                iotShadowClient.SubscribeToGetShadowAccepted(request, QualityOfService.AT_MOST_ONCE,\n+                        getShadowResponse -> shadowUpdated(getShadowResponse.state.desired, getShadowResponse.version),\n+                        (e) -> logger.atError().log(\"Error processing getShadowResponse\", e))\n+                        .get(TIMEOUT_FOR_SUBSCRIBING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                logger.info(\"Subscribed to get device shadow topics\" + thingName);\n+                return;\n+            } catch (ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof MqttException || cause instanceof TimeoutException) {\n+                    //TODO: If network is not available then it will throw MqttException\n+                    // If there is any other problem like thingName is not specified in the request then also\n+                    // it throws Mqtt exception. This can be identified based on error code. Currently error code is not\n+                    // exposed. Will make required change in CRT package to expose the error code and then update this\n+                    logger.atWarn().setCause(cause).log(\"Caught exception while subscribing to shadow topics, \"\n+                            + \"will retry shortly\");\n+                }\n+                if (cause instanceof InterruptedException) {\n+                    logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                    return;\n+                }\n+                logger.atError().setCause(e).log(\"Caught exception while subscribing to shadow topics, \"\n+                        + \"will retry shortly\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Subscribe to shadow topics timed out, will retry shortly\");\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while subscribing to shadow topics\");\n+                return;\n+            }\n+            try {\n+                // Wait for sometime and then try to subscribe again\n+                Random jitter = new Random();\n+                Thread.sleep(WAIT_TIME_TO_SUBSCRIBE_AGAIN_IN_MS + jitter.nextInt(10_000));\n+            } catch (InterruptedException interruptedException) {\n+                logger.atWarn().log(\"Interrupted while subscribing to device shadow topics\");\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void publishToGetDeviceShadowTopic() {\n+        GetShadowRequest getShadowRequest = new GetShadowRequest();\n+        getShadowRequest.thingName = thingName;\n+        iotShadowClient.PublishGetShadow(getShadowRequest, QualityOfService.AT_LEAST_ONCE);\n+    }\n+\n+    @SuppressFBWarnings\n+    private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n+        DeploymentStatus status = DeploymentStatus.valueOf((String)\n+                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n+\n+        String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n+        // only update reported state when the deployment succeeds.\n+        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+\n+            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n+            // discard configurations that might have got added to the queue but the deployment\n+            // got discarded before being processed due to a new shadow deployment\n+            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n+                desiredStateQueue.poll();\n+                desired = desiredStateQueue.peek();\n+            }\n+\n+            if (desired == null) {\n+                logger.atError().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                        .log(\"Unable to update shadow for deployment\");\n+                return true;\n+            }\n+\n+            try {\n+                ShadowState shadowState = new ShadowState();\n+                shadowState.reported = new HashMap<>(desired.getRight());\n+                UpdateShadowRequest updateShadowRequest = new UpdateShadowRequest();\n+                updateShadowRequest.thingName = thingName;\n+                updateShadowRequest.state = shadowState;\n+                iotShadowClient.PublishUpdateShadow(updateShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+                desiredStateQueue.remove();\n+                logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                        .log(\"Updated reported state for deployment\");\n+                return true;\n+            } catch (InterruptedException e) {\n+                //Since this method can run as runnable cannot throw exception so handling exceptions here\n+                logger.atWarn().log(\"Interrupted while publishing reported state\");\n+            } catch (ExecutionException e) {\n+                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+            } catch (TimeoutException e) {\n+                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    protected void shadowUpdated(Map<String, Object> configuration, Integer version) {\n+        if (configuration == null || configuration.isEmpty()) {\n+            logger.debug(\"Empty desired state, no device deployments created yet\");\n+            return;\n+        }\n+        String configurationArn = (String) configuration.get(\"configurationArn\");\n+        synchronized (ShadowDeploymentListener.class) {\n+            if (lastVersion != null && lastVersion > version) {\n+                logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                        .kv(\"SHADOW_VERSION\", version)\n+                        .log(\"Old deployment notification, Ignoring...\");\n+                return;\n+            }\n+            if (lastConfigurationArn != null && lastConfigurationArn.equals(configurationArn)) {\n+                logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                        .log(\"Duplicate deployment notification, Ignoring...\");\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c96af29d22ab1f36037dd9e06abdf7145629af"}, "originalPosition": 234}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}