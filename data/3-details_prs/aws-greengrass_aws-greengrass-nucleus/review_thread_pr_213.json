{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjU2MDcx", "number": 213, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxNzoxNFrOD1i4Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyMzowMlrOD14HFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDcyNjEwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxNzoxNFrOGLCXxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxNzoxNFrOGLCXxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjM3NQ==", "bodyText": "Great!!! What about in context.close(), we try to find these and call shutdownNow?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226375", "createdAt": "2020-04-24T01:17:14Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "diffHunk": "@@ -25,24 +29,39 @@\n import static org.junit.jupiter.api.Assertions.assertSame;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.Mockito.mock;\n \n @SuppressWarnings({\"PMD.CloseResource\", \"PMD.NonStaticInitializer\"})\n @ExtendWith(EGExtension.class)\n public class LifecycleTest {\n     static int seq;\n     static CountDownLatch cd;\n+    private Context context;\n \n-    @Test\n-    public void T1() {\n-        cd = new CountDownLatch(2);\n-        Context context = new Context();\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n         ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n         ExecutorService cachedPool = Executors.newCachedThreadPool();\n         context.put(ScheduledThreadPoolExecutor.class, ses);\n         context.put(ScheduledExecutorService.class, ses);\n         context.put(Executor.class, cachedPool);\n         context.put(ExecutorService.class, cachedPool);\n         context.put(ThreadPoolExecutor.class, ses);\n+        context.put(Kernel.class, mock(Kernel.class));\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        context.get(ScheduledThreadPoolExecutor.class).shutdownNow();\n+        context.get(ExecutorService.class).shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDcyNjEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxNzoxN1rOGLCXzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxNzoxN1rOGLCXzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjM4Mw==", "bodyText": "Good job. I've seen you added this so many times...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226383", "createdAt": "2020-04-24T01:17:17Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -102,11 +101,12 @@ public void setup() {\n     }\n \n     @AfterEach\n-    void afterEach() {\n+    void afterEach() throws InterruptedException {\n         deploymentService.shutdown();\n         if (deploymentServiceThread != null && deploymentServiceThread.isAlive()) {\n             deploymentServiceThread.interrupt();\n         }\n+        mockKernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDcyODY3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxODozNVrOGLCZPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMjozNzowNVrOGLDwSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjc1MQ==", "bodyText": "Did mock cause issue?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226751", "createdAt": "2020-04-24T01:18:35Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelTest.java", "diffHunk": "@@ -128,7 +128,7 @@ void GIVEN_kernel_and_services_WHEN_orderedDependencies_THEN_dependencies_are_re\n     @Test\n     void GIVEN_kernel_and_services_WHEN_orderedDependencies_with_a_cycle_THEN_no_dependencies_returned()\n             throws InputValidationException {\n-        KernelLifecycle kernelLifecycle = mock(KernelLifecycle.class);\n+        KernelLifecycle kernelLifecycle = spy(new KernelLifecycle(kernel, mock(KernelCommandLine.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI0OTAzMw==", "bodyText": "No, but it was unable to shut things down correctly since I was mocking the lifecycle. With the real lifecycle it can properly shutdown.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414249033", "createdAt": "2020-04-24T02:37:05Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelTest.java", "diffHunk": "@@ -128,7 +128,7 @@ void GIVEN_kernel_and_services_WHEN_orderedDependencies_THEN_dependencies_are_re\n     @Test\n     void GIVEN_kernel_and_services_WHEN_orderedDependencies_with_a_cycle_THEN_no_dependencies_returned()\n             throws InputValidationException {\n-        KernelLifecycle kernelLifecycle = mock(KernelLifecycle.class);\n+        KernelLifecycle kernelLifecycle = spy(new KernelLifecycle(kernel, mock(KernelCommandLine.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjc1MQ=="}, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDcyOTE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/MergeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxODo0NlrOGLCZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxODo0NlrOGLCZeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjgxMA==", "bodyText": "nit: format", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226810", "createdAt": "2020-04-24T01:18:46Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/MergeTest.java", "diffHunk": "@@ -42,10 +42,12 @@ public void setup() {\n \n     @Test\n     public void testSomeMethod() throws Exception {\n-        Configuration c = new Configuration(new Context());\n-        c.read(Kernel.class.getResource(\"config.yaml\"), false);\n-        Configuration b = new Configuration(new Context()).copyFrom(c);\n-        assertEquals(c.getRoot(), b.getRoot());\n+        try(Context context = new Context()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDczMjA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/ThreadProtector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToyMDoxNVrOGLCbKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToyMDoxNVrOGLCbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNzI0Mg==", "bodyText": "Nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414227242", "createdAt": "2020-04-24T01:20:15Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/ThreadProtector.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.testcommons.testutilities;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"PMD.SystemPrintln\")\n+public class ThreadProtector implements AfterAllCallback {\n+    private static final Set<String> ALLOWED_THREAD_NAMES = new HashSet<>(Arrays.asList(\"main\", \"Monitor Ctrl-Break\"));\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) throws Exception {\n+        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();\n+        List<String> liveThreads =\n+                threadSet.stream().filter(Thread::isAlive).filter(t -> t.getThreadGroup().getName().equals(\"main\"))\n+                        .map(Thread::getName).filter(Objects::nonNull)\n+                        .filter(name -> !ALLOWED_THREAD_NAMES.contains(name)).collect(Collectors.toList());\n+        if (!liveThreads.isEmpty()) {\n+            // Don't fail tests right now. Too many things would break.\n+            // fail(\"Threads are still running: \" + liveThreads);\n+            System.err.println(\"Threads are still running: \" + liveThreads);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODIwNDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyMzowMlrOGLhrJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyNDowMlrOGLhtrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTIzOQ==", "bodyText": "Why do we need this new condition?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414739239", "createdAt": "2020-04-24T17:23:02Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -131,7 +131,7 @@ private Topic initStateTopic(final Topics topics) {\n \n     private synchronized void initDependenciesTopic() {\n         externalDependenciesTopic.subscribe((what, node) -> {\n-            if (!WhatHappened.changed.equals(what)) {\n+            if (!WhatHappened.changed.equals(what) || node.getModtime() <= 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTg4NA==", "bodyText": "I use dflt in the constructor to initialize it with an empty list, but that does publish, so there's a race between the publish and this subscribe. So I added this check since dflt uses a modification time of 1.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414739884", "createdAt": "2020-04-24T17:24:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -131,7 +131,7 @@ private Topic initStateTopic(final Topics topics) {\n \n     private synchronized void initDependenciesTopic() {\n         externalDependenciesTopic.subscribe((what, node) -> {\n-            if (!WhatHappened.changed.equals(what)) {\n+            if (!WhatHappened.changed.equals(what) || node.getModtime() <= 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTIzOQ=="}, "originalCommit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4646, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}