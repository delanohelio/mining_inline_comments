{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDc4MDE3", "number": 237, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0ODo0N1rOD8IL9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzo1ODoxMVrOD8lySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc1Mjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0ODo0N1rOGU4IWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozNTowMlrOGU8WAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0NDM0Nw==", "bodyText": "Can this not be a Map<String, Map<...>> so that we can do dependency syntax validation right at the time of parsing and don't move further at all?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r424544347", "createdAt": "2020-05-13T15:48:47Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -50,7 +52,7 @@\n     // TODO: Migrate to artifact objects, this is only a list of URLs at the moment\n     private final List<String> artifacts;\n \n-    private final Map<String, String> dependencies;\n+    private final Map<String, Object> dependencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e82224cf86d65b74997bb6ad2d4e684f921127"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMzM3Ng==", "bodyText": "Yeah I can try that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r424613376", "createdAt": "2020-05-13T17:35:02Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -50,7 +52,7 @@\n     // TODO: Migrate to artifact objects, this is only a list of URLs at the moment\n     private final List<String> artifacts;\n \n-    private final Map<String, String> dependencies;\n+    private final Map<String, Object> dependencies;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0NDM0Nw=="}, "originalCommit": {"oid": "68e82224cf86d65b74997bb6ad2d4e684f921127"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc1NzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0OTo0NlrOGU4LJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0OTo0NlrOGU4LJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0NTA2MA==", "bodyText": "Nit -move out to a method?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r424545060", "createdAt": "2020-05-13T15:49:46Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -146,7 +150,21 @@ PackageRecipe getPackageRecipe(@NonNull PackageIdentifier pkgId) throws PackageL\n      * @throws PackagingException if fails to find or parse the recipe\n      */\n     PackageMetadata getPackageMetadata(@NonNull PackageIdentifier pkgId) throws PackagingException {\n-        return new PackageMetadata(pkgId, getPackageRecipe(pkgId).getDependencies());\n+        Map<String, String> dependencyMetadata = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : getPackageRecipe(pkgId).getDependencies().entrySet()) {\n+            if (!(entry.getValue() instanceof Map)) {\n+                throw new PackageLoadingException(String.format(\"Illegal dependency syntax in package recipe of %s\",\n+                        pkgId));\n+            }\n+            Map<String, String> propMap = (Map<String, String>) entry.getValue();\n+            if (!propMap.containsKey(DEPENDENCY_VERSION_REQUIREMENTS_KEY)) {\n+                throw new PackageLoadingException(String.format(\n+                        \"Illegal dependency syntax in package recipe of %s: Missing %s\",\n+                        pkgId, DEPENDENCY_VERSION_REQUIREMENTS_KEY));\n+            }\n+            dependencyMetadata.put(entry.getKey(), propMap.get(DEPENDENCY_VERSION_REQUIREMENTS_KEY));\n+        }\n+        return new PackageMetadata(pkgId, dependencyMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e82224cf86d65b74997bb6ad2d4e684f921127"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc3MDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1MjozOFrOGU4TYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1MjozOFrOGU4TYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0NzE2OQ==", "bodyText": "Can also move this out to a method", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r424547169", "createdAt": "2020-05-13T15:52:38Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -102,13 +103,21 @@\n         }\n         resolvedServiceConfig.put(SETENV_CONFIG_NAMESPACE, resolvedSetEnvConfig);\n \n-        // TODO : Update package recipe format to include all information that service dependencies config\n-        // expects according to the new syntax e.g. dependencyType,\n-        // then change the following code accordingly\n-\n         // Generate dependencies\n-        List<String> dependencyServiceNames = new ArrayList<>(packageRecipe.getDependencies().keySet());\n-        resolvedServiceConfig.put(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC, dependencyServiceNames);\n+        List<String> dependencyConfig = new ArrayList<>();\n+        for (Map.Entry<String, Object> entry : packageRecipe.getDependencies().entrySet()) {\n+            if (!(entry.getValue() instanceof Map)) {\n+                throw new PackageLoadingException(String\n+                        .format(\"Illegal dependency syntax in package recipe of %s\", packageIdentifier));\n+            }\n+            Map<String, String> propMap = (Map<String, String>) entry.getValue();\n+            if (!propMap.containsKey(DEPENDENCY_TYPE_KEY)) {\n+                dependencyConfig.add(entry.getKey());\n+                continue;\n+            }\n+            dependencyConfig.add(entry.getKey() + \":\" + propMap.get(DEPENDENCY_TYPE_KEY));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e82224cf86d65b74997bb6ad2d4e684f921127"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODU5Mjg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzo1NTo0M1rOGVn8NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxNDoyMlrOGVom7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyNzY2OQ==", "bodyText": "Do you plan to turn this into a map as well instead of a string? Not necessary for this PR to keep changes smaller, but eventually, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r425327669", "createdAt": "2020-05-14T17:55:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -191,9 +189,9 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n \n         Map<Object, Object> mainServiceConfig = new HashMap<>();\n         ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n-        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+        kernel.getMain().getDependencies().forEach((evergreenService, dependencyType) -> {\n             if (!(evergreenService instanceof GenericExternalService)) {\n-                mainDependencies.add(evergreenService.getName());\n+                mainDependencies.add(evergreenService.getName() + \":\" + dependencyType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd5e9c7eae611fda27473b73c2c37443063352f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzODYwNA==", "bodyText": "Eventually. The reason that I didn't do it now is, turning dependencies into a map implicitly means each dependency node will be a Topics. We don't have proper support to remove a config node during config merge, so when we need to remove a dependency during deployments, the old dependency won't be removed. That's a blocker for now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r425338604", "createdAt": "2020-05-14T18:14:22Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -191,9 +189,9 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n \n         Map<Object, Object> mainServiceConfig = new HashMap<>();\n         ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n-        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+        kernel.getMain().getDependencies().forEach((evergreenService, dependencyType) -> {\n             if (!(evergreenService instanceof GenericExternalService)) {\n-                mainDependencies.add(evergreenService.getName());\n+                mainDependencies.add(evergreenService.getName() + \":\" + dependencyType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyNzY2OQ=="}, "originalCommit": {"oid": "abd5e9c7eae611fda27473b73c2c37443063352f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODYwMjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzo1ODoxMVrOGVoCUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxNzowOFrOGVos4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyOTIzMg==", "bodyText": "Why not change the data type in PackageMetadata to contain all the dependency info and not just the version requirement?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r425329232", "createdAt": "2020-05-14T17:58:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -146,7 +148,10 @@ PackageRecipe getPackageRecipe(@NonNull PackageIdentifier pkgId) throws PackageL\n      * @throws PackagingException if fails to find or parse the recipe\n      */\n     PackageMetadata getPackageMetadata(@NonNull PackageIdentifier pkgId) throws PackagingException {\n-        return new PackageMetadata(pkgId, getPackageRecipe(pkgId).getDependencies());\n+        Map<String, String> dependencyMetadata = new HashMap<>();\n+        getPackageRecipe(pkgId).getDependencies().forEach((name, prop) ->\n+                dependencyMetadata.put(name, prop.getVersionRequirements()));\n+        return new PackageMetadata(pkgId, dependencyMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd5e9c7eae611fda27473b73c2c37443063352f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MDEyOA==", "bodyText": "It seems to me the metadata does not include any information relevant to service runtime. The way we use Metadata today doesn't care about dependencyType. This might change when we have other dependency properties. But I think we should control what's exposed in metadata", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/237#discussion_r425340128", "createdAt": "2020-05-14T18:17:08Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -146,7 +148,10 @@ PackageRecipe getPackageRecipe(@NonNull PackageIdentifier pkgId) throws PackageL\n      * @throws PackagingException if fails to find or parse the recipe\n      */\n     PackageMetadata getPackageMetadata(@NonNull PackageIdentifier pkgId) throws PackagingException {\n-        return new PackageMetadata(pkgId, getPackageRecipe(pkgId).getDependencies());\n+        Map<String, String> dependencyMetadata = new HashMap<>();\n+        getPackageRecipe(pkgId).getDependencies().forEach((name, prop) ->\n+                dependencyMetadata.put(name, prop.getVersionRequirements()));\n+        return new PackageMetadata(pkgId, dependencyMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyOTIzMg=="}, "originalCommit": {"oid": "abd5e9c7eae611fda27473b73c2c37443063352f"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4689, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}