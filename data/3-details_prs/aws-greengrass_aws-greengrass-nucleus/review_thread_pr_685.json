{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwOTUwMjIz", "number": 685, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMzowODo0NFrOE46s4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMzoyNzowNlrOE46yUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTE3NDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMzowODo0NFrOHzHyAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMzowOTo1OFrOHzHyeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2NjkxMg==", "bodyText": "Shouldn't this be removed from line 216?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/685#discussion_r523366912", "createdAt": "2020-11-14T03:08:44Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -214,6 +217,12 @@ protected MqttClient(DeviceConfiguration deviceConfiguration,\n                     return;\n                 }\n \n+                // Only reconnect when the region changed if the proxy exists\n+                if (node.childOf(DEVICE_PARAM_AWS_REGION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653d3fb820f8928033d2868e0be4aaf6d2bba085"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2NzAzMg==", "bodyText": "No, otherwise it would skip all region changes", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/685#discussion_r523367032", "createdAt": "2020-11-14T03:09:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -214,6 +217,12 @@ protected MqttClient(DeviceConfiguration deviceConfiguration,\n                     return;\n                 }\n \n+                // Only reconnect when the region changed if the proxy exists\n+                if (node.childOf(DEVICE_PARAM_AWS_REGION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2NjkxMg=="}, "originalCommit": {"oid": "653d3fb820f8928033d2868e0be4aaf6d2bba085"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTE4ODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMzoyNzowNlrOHzH4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMzozMDoyN1rOHzH5pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2ODU2OA==", "bodyText": "Does publish need to be synchronized?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/685#discussion_r523368568", "createdAt": "2020-11-14T03:27:06Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "diffHunk": "@@ -100,31 +99,46 @@ public void onConnectionResumed(boolean sessionPresent) {\n     CompletableFuture<Integer> subscribe(String topic, QualityOfService qos) {\n         return connect().thenCompose((b) -> {\n             logger.atDebug().kv(TOPIC_KEY, topic).kv(QOS_KEY, qos.name()).log(\"Subscribing to topic\");\n-            return connection.subscribe(topic, qos).thenApply((i) -> {\n-                subscriptionTopics.put(topic, qos);\n-                return i;\n-            });\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.subscribe(topic, qos).thenApply((i) -> {\n+                    subscriptionTopics.put(topic, qos);\n+                    return i;\n+                });\n+            }\n         });\n     }\n \n     CompletableFuture<Integer> unsubscribe(String topic) {\n         return connect().thenCompose((b) -> {\n             logger.atDebug().kv(TOPIC_KEY, topic).log(\"Unsubscribing from topic\");\n-            return connection.unsubscribe(topic).thenApply((i) -> {\n-                subscriptionTopics.remove(topic);\n-                return i;\n-            });\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.unsubscribe(topic).thenApply((i) -> {\n+                    subscriptionTopics.remove(topic);\n+                    return i;\n+                });\n+            }\n         });\n     }\n \n     CompletableFuture<Integer> publish(MqttMessage message, QualityOfService qos, boolean retain) {\n         return connect().thenCompose((b) -> {\n             logger.atTrace().kv(TOPIC_KEY, message.getTopic()).kv(QOS_KEY, qos.name()).kv(\"retain\", retain)\n                     .log(\"Publishing message\");\n-            return connection.publish(message, qos, retain);\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.publish(message, qos, retain);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ebb6a6d70dc737125c75d5eec6c60e1a7e7561"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2ODY2Mg==", "bodyText": "It is async so it won't block (for long). I'm synchronizing around usage of the connection", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/685#discussion_r523368662", "createdAt": "2020-11-14T03:28:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "diffHunk": "@@ -100,31 +99,46 @@ public void onConnectionResumed(boolean sessionPresent) {\n     CompletableFuture<Integer> subscribe(String topic, QualityOfService qos) {\n         return connect().thenCompose((b) -> {\n             logger.atDebug().kv(TOPIC_KEY, topic).kv(QOS_KEY, qos.name()).log(\"Subscribing to topic\");\n-            return connection.subscribe(topic, qos).thenApply((i) -> {\n-                subscriptionTopics.put(topic, qos);\n-                return i;\n-            });\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.subscribe(topic, qos).thenApply((i) -> {\n+                    subscriptionTopics.put(topic, qos);\n+                    return i;\n+                });\n+            }\n         });\n     }\n \n     CompletableFuture<Integer> unsubscribe(String topic) {\n         return connect().thenCompose((b) -> {\n             logger.atDebug().kv(TOPIC_KEY, topic).log(\"Unsubscribing from topic\");\n-            return connection.unsubscribe(topic).thenApply((i) -> {\n-                subscriptionTopics.remove(topic);\n-                return i;\n-            });\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.unsubscribe(topic).thenApply((i) -> {\n+                    subscriptionTopics.remove(topic);\n+                    return i;\n+                });\n+            }\n         });\n     }\n \n     CompletableFuture<Integer> publish(MqttMessage message, QualityOfService qos, boolean retain) {\n         return connect().thenCompose((b) -> {\n             logger.atTrace().kv(TOPIC_KEY, message.getTopic()).kv(QOS_KEY, qos.name()).kv(\"retain\", retain)\n                     .log(\"Publishing message\");\n-            return connection.publish(message, qos, retain);\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.publish(message, qos, retain);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2ODU2OA=="}, "originalCommit": {"oid": "d0ebb6a6d70dc737125c75d5eec6c60e1a7e7561"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2ODg2OA==", "bodyText": "Not clear, but I think that one problem is that the connection could be closed before I had a chance to use it, so that's why I added this locking and the throwIfNotConnected", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/685#discussion_r523368868", "createdAt": "2020-11-14T03:30:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "diffHunk": "@@ -100,31 +99,46 @@ public void onConnectionResumed(boolean sessionPresent) {\n     CompletableFuture<Integer> subscribe(String topic, QualityOfService qos) {\n         return connect().thenCompose((b) -> {\n             logger.atDebug().kv(TOPIC_KEY, topic).kv(QOS_KEY, qos.name()).log(\"Subscribing to topic\");\n-            return connection.subscribe(topic, qos).thenApply((i) -> {\n-                subscriptionTopics.put(topic, qos);\n-                return i;\n-            });\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.subscribe(topic, qos).thenApply((i) -> {\n+                    subscriptionTopics.put(topic, qos);\n+                    return i;\n+                });\n+            }\n         });\n     }\n \n     CompletableFuture<Integer> unsubscribe(String topic) {\n         return connect().thenCompose((b) -> {\n             logger.atDebug().kv(TOPIC_KEY, topic).log(\"Unsubscribing from topic\");\n-            return connection.unsubscribe(topic).thenApply((i) -> {\n-                subscriptionTopics.remove(topic);\n-                return i;\n-            });\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.unsubscribe(topic).thenApply((i) -> {\n+                    subscriptionTopics.remove(topic);\n+                    return i;\n+                });\n+            }\n         });\n     }\n \n     CompletableFuture<Integer> publish(MqttMessage message, QualityOfService qos, boolean retain) {\n         return connect().thenCompose((b) -> {\n             logger.atTrace().kv(TOPIC_KEY, message.getTopic()).kv(QOS_KEY, qos.name()).kv(\"retain\", retain)\n                     .log(\"Publishing message\");\n-            return connection.publish(message, qos, retain);\n+            synchronized (this) {\n+                throwIfNotConnected();\n+                return connection.publish(message, qos, retain);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM2ODU2OA=="}, "originalCommit": {"oid": "d0ebb6a6d70dc737125c75d5eec6c60e1a7e7561"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 252, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}