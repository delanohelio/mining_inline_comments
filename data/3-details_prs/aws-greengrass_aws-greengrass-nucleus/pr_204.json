{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDYwNTU3", "number": 204, "title": "Lots of race condition fixes and several fixes for handling of Exec", "bodyText": "Issue #, if available:\nDescription of changes:\nThis PR includes several fixes for how we handle Execs. This change should make it much, much more difficult (hopefully impossible) to leak processes. It does this by tracking all processes that we spawn from each GenericExternalService and ensures that they are all closed when the service is shutdown.\nAlso in this PR is another testing extension which uses pgrep to ensure that no spawned processes are still running once the test is over. If any processes are running, it will log them, kill them, and then fail the test. So that we don't need to add more extensions to every single test class every time, I have made a master EGExtension which will call out to all the other extensions which are loaded within it (currently the log watcher and the new process spawn protector).\nAdditionally, this PR has some state machine fixes which were causing the leaking processes. Essentially, the state machine would be transitioning from INSTALLED to RUNNING, but before it could report or handle the RUNNING, it was restarted by requested state change (although the requested state was not any different). This caused the state machine to unblock and loop around again. It would then re-enter the same case because the current state had not changed. It would then follow the same logic that it had just done to try and transition from INSTALLED to RUNNING. My solution adds a check to the state transition logic to know if that state transition is already underway, and if so it won't do anything because it knows that the service is already doing what it needs to do to get to the next state.\nIn addition to that fix, I have added another fix which is for transitions out of states which may be running something, they must go through STOPPING first, that way any processes that were running are first stopped.\nNote to reviewers\nThe vast majority of changed files can be safely ignored as it is just updating the JUnit extension name.\nWhy is this change necessary:\nThis change fixes a fundamental flaw of our Exec which was leaking processes during tests and caused our test machines to become unresponsive due to the number of extraneous processes.\nHow was this change tested:\nThis change has been run through all existing tests as well as by adding a new extension which checks that we do not leak processes.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-22T05:44:29Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204", "merged": true, "mergeCommit": {"oid": "a0cc481b707ecf9ccc782633bc8679d7edcd6638"}, "closed": true, "closedAt": "2020-04-22T23:52:00Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaCsUiAFqTM5Nzg4NTQyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaRD6DAFqTM5ODY2NDI4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODg1NDI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-397885424", "createdAt": "2020-04-22T06:42:35Z", "commit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0MjozNVrOGJl65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NToyN1rOGJmVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMTY1Mg==", "bodyText": "Why we need an extra check here? handleCurrentStateNew() is blocking until it either succeed/fails", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412711652", "createdAt": "2020-04-22T06:42:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -288,6 +295,13 @@ private boolean handleCurrentStateNew(Optional<State> desiredState) throws Inter\n         if (!desiredState.isPresent()) {\n             return true;\n         }\n+\n+        // We're already handling the new to installed transition, so don't do anything now.\n+        if (NEW_TO_INSTALLED.equals(currentStateTransition)) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMjUwMQ==", "bodyText": "both waiting dependency ready and [started but running isn't reported yet] are included in INSTALLED state. IMO a cleaner solution is to split out Starting as a separate state, and only go to STOPPING from STARTING/RUNNING", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412712501", "createdAt": "2020-04-22T06:44:17Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -464,15 +480,14 @@ private void handleCurrentStateErrored(Optional<State> desiredState) throws Inte\n         }\n \n         switch (prevState) {\n+            // For both installed and running, make sure we stop first before retrying\n+            case INSTALLED:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNjM4MQ==", "bodyText": "should we add more Exec details here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412716381", "createdAt": "2020-04-22T06:51:36Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -163,26 +160,25 @@ private void handleRunScript() throws InterruptedException {\n \n     @Override\n     @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n-                e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n+                try {\n+                    e.close();\n+                    logger.atInfo().setEventType(\"generic-service-shutdown\").log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzI0NQ==", "bodyText": "If you remove inShutdown, do you need to cancel this callback in the shutdown() function?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412717245", "createdAt": "2020-04-22T06:53:08Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -81,70 +80,68 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void install() throws InterruptedException {\n-        if (run(\"install\", null) == RunStatus.Errored) {\n+        if (run(\"install\", null).getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in install\");\n         }\n     }\n \n+    // Synchronize startup() and shutdown() as both are non-blocking, but need to have coordination\n+    // to operate properly\n     @Override\n-    public void startup() throws InterruptedException {\n-        RunStatus result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n-            runScript = null;\n-            if (getState() == State.INSTALLED) {\n-                if (exit == 0) {\n-                    reportState(State.RUNNING);\n-                } else {\n-                    serviceErrored(\"Non-zero exit code in startup\");\n+    public synchronized void startup() throws InterruptedException {\n+        Pair<RunStatus, Exec> result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback\n+            synchronized (this) {\n+                if (State.INSTALLED.equals(getState())) {\n+                    if (exit == 0) {\n+                        reportState(State.RUNNING);\n+                    } else {\n+                        serviceErrored(\"Non-zero exit code in startup\");\n+                    }\n                 }\n             }\n         });\n \n-        runScript = currentScript;\n-        if (result == RunStatus.Errored) {\n+        if (result.getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in startup\");\n-        } else if (result == RunStatus.NothingDone) {\n+        } else if (result.getLeft() == RunStatus.NothingDone) {\n             handleRunScript();\n         }\n     }\n \n     @SuppressWarnings(\"PMD.CloseResource\")\n-    private void handleRunScript() throws InterruptedException {\n-        // sync block will ensure that the call back can execute only after\n-        // the service transition state based on RunStatus result\n-        Object lock = new Object();\n-        synchronized (lock) {\n-            RunStatus result = run(LIFECYCLE_RUN_NAMESPACE_TOPIC, exit -> {\n-                synchronized (lock) {\n-                    runScript = null;\n-                    if (!inShutdown) {\n-                        if (exit == 0) {\n-                            this.requestStop();\n-                            logger.atInfo().setEventType(\"generic-service-stopping\")\n-                                    .log(\"Service finished running\");\n-                        } else {\n-                            reportState(State.ERRORED);\n-                            logger.atError().setEventType(\"generic-service-errored\")\n-                                    .addKeyValue(\"exitCode\", exit).log();\n-                        }\n+    private synchronized void handleRunScript() throws InterruptedException {\n+        Pair<RunStatus, Exec> result = run(LIFECYCLE_RUN_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback\n+            synchronized (this) {\n+                if (State.RUNNING.equals(getState())) {\n+                    if (exit == 0) {\n+                        this.requestStop();\n+                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n+                    } else {\n+                        reportState(State.ERRORED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxODUzMw==", "bodyText": "My PR https://github.com/aws/aws-greengrass-kernel/pull/189/files was trying to solve the same issue. My approach is to block the loop until a valid new desired state appears, so that we don't enter the same loop twice. I personally feel creating a hard-coded variable for this is confusing. We can discuss about this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412718533", "createdAt": "2020-04-22T06:55:27Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -320,24 +334,27 @@ private boolean handleCurrentStateNew(Optional<State> desiredState) throws Inter\n \n     private boolean handleCurrentStateInstalled(Optional<State> desiredState,\n                                                 AtomicReference<Future> triggerTimeOutReference) {\n-        stopBackingTask();\n         if (!desiredState.isPresent()) {\n             return true;\n         }\n \n         switch (desiredState.get()) {\n-            case FINISHED:\n-                updateStateAndBroadcast(State.FINISHED);\n-                return false;\n+            // For new or finished, make sure to stop first because we may be\n+            // currently transitioning from installed to running\n             case NEW:\n-                // This happens if a restart is requested while we're currently INSTALLED\n-                updateStateAndBroadcast(State.NEW);\n+            case FINISHED:\n+                updateStateAndBroadcast(State.STOPPING);\n                 return false;\n             case RUNNING:\n-                handleStateTransitionInstalledToRunning(triggerTimeOutReference);\n+                // If we are already handling the installed to running transition, then don't do anything\n+                if (!INSTALLED_TO_RUNNING.equals(currentStateTransition)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944", "committedDate": "2020-04-22T06:15:34Z", "message": "Remove check for main's state since it may be FINISHED which is legal"}, "afterCommit": {"oid": "30062b98b73861ac25e8a6334d8e5aaf5a689d53", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/30062b98b73861ac25e8a6334d8e5aaf5a689d53", "committedDate": "2020-04-22T16:17:02Z", "message": "Remove check for main's state since it may be FINISHED which is legal"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30062b98b73861ac25e8a6334d8e5aaf5a689d53", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/30062b98b73861ac25e8a6334d8e5aaf5a689d53", "committedDate": "2020-04-22T16:17:02Z", "message": "Remove check for main's state since it may be FINISHED which is legal"}, "afterCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/776cac06a2051fde32aa8c07a98f87d9fec0b8f4", "committedDate": "2020-04-22T18:23:30Z", "message": "Remove check for main's state since it may be FINISHED which is legal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDY4MzA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398468306", "createdAt": "2020-04-22T18:33:32Z", "commit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMzozMlrOGKFG6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NToxOFrOGKGASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjYzNA==", "bodyText": "Like the comment here explaining the \"why\".", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413222634", "createdAt": "2020-04-22T18:33:32Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -81,70 +81,89 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void install() throws InterruptedException {\n-        if (run(\"install\", null) == RunStatus.Errored) {\n+        try {\n+            stopAllProcesses();\n+        } catch (IOException e) {\n+            logger.atWarn().kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to stop all processes before performing install\", e);\n+        }\n+\n+        if (run(\"install\", null).getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in install\");\n         }\n     }\n \n+    // Synchronize startup() and shutdown() as both are non-blocking, but need to have coordination\n+    // to operate properly\n     @Override\n-    public void startup() throws InterruptedException {\n-        RunStatus result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n-            runScript = null;\n-            if (getState() == State.INSTALLED) {\n-                if (exit == 0) {\n-                    reportState(State.RUNNING);\n-                } else {\n-                    serviceErrored(\"Non-zero exit code in startup\");\n+    public synchronized void startup() throws InterruptedException {\n+        try {\n+            stopAllProcesses();\n+        } catch (IOException e) {\n+            logger.atWarn().kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to stop all processes before performing startup\", e);\n+        }\n+\n+        Pair<RunStatus, Exec> result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMDUwNg==", "bodyText": "Without knowing too much about the close impl, would this close throw any exception on failure and we need to handle?\nIf close could take some time, let's add logs both before and after the statement.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413230506", "createdAt": "2020-04-22T18:45:19Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +181,33 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n+        try {\n+            stopAllProcesses();\n+            logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+        } catch (IOException ioe) {\n+            logger.atError(\"generic-service-shutdown-error\", ioe)\n+                    .kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to shutdown all processes\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() throws IOException {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n                 e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+                logger.atInfo().log(\"Shutdown process {}\", e);\n+                processes.remove(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNzMyMQ==", "bodyText": "You are very nice. lol.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413237321", "createdAt": "2020-04-22T18:55:18Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/SpawnedProcessProtector.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.testcommons.testutilities;\n+\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.zeroturnaround.process.PidUtil;\n+import org.zeroturnaround.process.Processes;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@SuppressWarnings(\"PMD.SystemPrintln\")\n+public class SpawnedProcessProtector implements AfterAllCallback {\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) throws Exception {\n+        // TODO: Will need a similar solution as below for windows.\n+        if (Exec.isWindows) {\n+            return;\n+        }\n+\n+        String[] cmd = {\"pgrep\", \"-P\", String.valueOf(PidUtil.getMyPid())};\n+        Process proc = Runtime.getRuntime().exec(cmd);\n+        assertTrue(proc.waitFor(5, TimeUnit.SECONDS), \"Able to run pgrep and find child processes\");\n+\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()))) {\n+            List<String> childPids = br.lines().collect(Collectors.toList());\n+\n+            if (!childPids.isEmpty()) {\n+                System.err.println(\"Not all child PIDs were stopped before the test ended!\");\n+                System.err.println(\"Going to try killing them for you, but this is a problem which must be fixed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDk5NDI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398499425", "createdAt": "2020-04-22T19:15:43Z", "commit": {"oid": "4877e0ee6c46242e69395b275c82593f900d0281"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4877e0ee6c46242e69395b275c82593f900d0281", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4877e0ee6c46242e69395b275c82593f900d0281", "committedDate": "2020-04-22T19:12:42Z", "message": "Address PR comments, always log exit code from scripts"}, "afterCommit": {"oid": "177887d35d1b506ae968d4580424d154fe7d6e41", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/177887d35d1b506ae968d4580424d154fe7d6e41", "committedDate": "2020-04-22T19:18:01Z", "message": "Address PR comments, always log exit code from scripts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "177887d35d1b506ae968d4580424d154fe7d6e41", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/177887d35d1b506ae968d4580424d154fe7d6e41", "committedDate": "2020-04-22T19:18:01Z", "message": "Address PR comments, always log exit code from scripts"}, "afterCommit": {"oid": "fd5f40ed4f0613687b462344d00d8e2d855dc51d", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fd5f40ed4f0613687b462344d00d8e2d855dc51d", "committedDate": "2020-04-22T20:30:34Z", "message": "Address PR comments, always log exit code from scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTY0MTUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398564153", "createdAt": "2020-04-22T20:33:25Z", "commit": {"oid": "fd5f40ed4f0613687b462344d00d8e2d855dc51d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c0981992ef4163078e269f5b6844587e572b77", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/80c0981992ef4163078e269f5b6844587e572b77", "committedDate": "2020-04-22T21:37:40Z", "message": "Fix race condition in GenericExternalService causing processes to keep running"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2b2e9b44b0d703fddd9c75585ab4256108f9abf", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c2b2e9b44b0d703fddd9c75585ab4256108f9abf", "committedDate": "2020-04-22T21:39:23Z", "message": "Add spawned process protection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e32c0e6036fb574802566f45b27ad93c41b02d9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e32c0e6036fb574802566f45b27ad93c41b02d9", "committedDate": "2020-04-22T21:39:23Z", "message": "Fix issue due to unblocking the queue when there was no change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16b83b8e4a9dc4b3597904b04c4e020f43514601", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/16b83b8e4a9dc4b3597904b04c4e020f43514601", "committedDate": "2020-04-22T21:39:23Z", "message": "Remove check for main's state since it may be FINISHED which is legal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41001d28da65f9ba40e485ec93163cc8aad9108a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/41001d28da65f9ba40e485ec93163cc8aad9108a", "committedDate": "2020-04-22T21:39:23Z", "message": "Address PR comments, always log exit code from scripts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd5f40ed4f0613687b462344d00d8e2d855dc51d", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fd5f40ed4f0613687b462344d00d8e2d855dc51d", "committedDate": "2020-04-22T20:30:34Z", "message": "Address PR comments, always log exit code from scripts"}, "afterCommit": {"oid": "fe91f4e25ff27b7ba6431734a3487430d29eda48", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe91f4e25ff27b7ba6431734a3487430d29eda48", "committedDate": "2020-04-22T21:40:50Z", "message": "Fix more state machine bugs which caused test failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe91f4e25ff27b7ba6431734a3487430d29eda48", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe91f4e25ff27b7ba6431734a3487430d29eda48", "committedDate": "2020-04-22T21:40:50Z", "message": "Fix more state machine bugs which caused test failures"}, "afterCommit": {"oid": "795d07504459c727cdb5e35a2ec2d77445fa5302", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/795d07504459c727cdb5e35a2ec2d77445fa5302", "committedDate": "2020-04-22T21:44:13Z", "message": "Fix more state machine bugs which caused test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d07d4481b85c4c5967ad59179b9d63891026f5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/58d07d4481b85c4c5967ad59179b9d63891026f5", "committedDate": "2020-04-22T21:56:32Z", "message": "Fix more state machine bugs which caused test failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "795d07504459c727cdb5e35a2ec2d77445fa5302", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/795d07504459c727cdb5e35a2ec2d77445fa5302", "committedDate": "2020-04-22T21:44:13Z", "message": "Fix more state machine bugs which caused test failures"}, "afterCommit": {"oid": "58d07d4481b85c4c5967ad59179b9d63891026f5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/58d07d4481b85c4c5967ad59179b9d63891026f5", "committedDate": "2020-04-22T21:56:32Z", "message": "Fix more state machine bugs which caused test failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjMxMzY5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398631369", "createdAt": "2020-04-22T22:21:39Z", "commit": {"oid": "58d07d4481b85c4c5967ad59179b9d63891026f5"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjoyMTozOVrOGKOQ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjoyMTozOVrOGKOQ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3MjY2NA==", "bodyText": "nit. It is used to determine", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413372664", "createdAt": "2020-04-22T22:21:39Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -48,6 +50,21 @@\n     private static final int MAXIMUM_CONTINUAL_ERROR = 3;\n     private static final Pair<State, State> INSTALLED_TO_RUNNING = new Pair<>(State.INSTALLED, State.RUNNING);\n \n+    /*\n+     * State generation is a value representing how many times the service has been in the INSTALLED state.\n+     * It is used determine if an action should be taken when that action would be run asynchronously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d07d4481b85c4c5967ad59179b9d63891026f5"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/68660fc6f20942649593a7843a443c6b46d3b641", "committedDate": "2020-04-22T22:40:20Z", "message": "Fix E2E test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjQ0MjEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398644211", "createdAt": "2020-04-22T22:50:07Z", "commit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjUxNTM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398651538", "createdAt": "2020-04-22T23:08:06Z", "commit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzowODowNlrOGKPfsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzowODowNlrOGKPfsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjgxOA==", "bodyText": "You want to remove the process from the map anyways. This logic should be outside the if check", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413392818", "createdAt": "2020-04-22T23:08:06Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +169,32 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n-                e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+        stopAllProcesses();\n+        logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n+                logger.atInfo().log(\"Shutting down process {}\", e);\n+                try {\n+                    e.close();\n+                    logger.atInfo().log(\"Shutdown completed for process {}\", e);\n+                    processes.remove(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b0d3e8de5f0f5023468120251a909f97c6cd7a7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4b0d3e8de5f0f5023468120251a909f97c6cd7a7", "committedDate": "2020-04-22T23:14:59Z", "message": "Remove closed processes from the list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjU1NDEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398655412", "createdAt": "2020-04-22T23:17:46Z", "commit": {"oid": "4b0d3e8de5f0f5023468120251a909f97c6cd7a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjY0Mjgw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#pullrequestreview-398664280", "createdAt": "2020-04-22T23:40:46Z", "commit": {"oid": "4b0d3e8de5f0f5023468120251a909f97c6cd7a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2149, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}