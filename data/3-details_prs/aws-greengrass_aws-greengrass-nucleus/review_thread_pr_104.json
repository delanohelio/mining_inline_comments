{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1Nzk0MDA4", "number": 104, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMzo0NlrODmcnMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNDoyMFrODmcn7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQxMjY3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/ServiceConfigMergingTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMzo0NlrOFz3wIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo1MzozMFrOFz9Ilw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTEzNg==", "bodyText": "Ideally with this change we should only need to check for \"RUNNING\" since it should first go to running before finished.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104#discussion_r389935136", "createdAt": "2020-03-09T20:13:46Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/ServiceConfigMergingTest.java", "diffHunk": "@@ -161,21 +160,20 @@ void GIVEN_kernel_running_single_service_WHEN_merge_change_adding_nested_depende\n         CountDownLatch newServiceStarted = new CountDownLatch(1);\n \n         // Check that new_service2 starts, then new_service, and then main gets restarted\n-        kernel.context.addGlobalStateChangeListener((service, prevState) -> {\n-            if (service.getName().equals(\"new_service2\") && service.getState().equals(State.RUNNING)) {\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"new_service2\") && newState.equals(State.RUNNING)) {\n                 newService2Started.countDown();\n             }\n             if (newService2Started.getCount() == 0) {\n-                if (service.getName().equals(\"new_service\") && service.getState().equals(State.RUNNING)) {\n+                if (service.getName().equals(\"new_service\") && newState.equals(State.RUNNING)) {\n                     newServiceStarted.countDown();\n                 }\n             }\n             // Only count main as started if its dependency (new_service) has already been started\n-            // TODO change to use new state from event instead of getState()\n             if (newServiceStarted.getCount() == 0) {\n                 if (service.getName().equals(\"main\")\n-                        && (service.getState().equals(State.RUNNING) || service.getState().equals(State.FINISHED))\n-                        && prevState.equals(State.INSTALLED)) {\n+                        && (newState.equals(State.RUNNING) || newState.equals(State.FINISHED))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7407e7123f1b80350c44f846893b82f73595a1b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMzMxOQ==", "bodyText": "Correct! Thanks for catching this. Forgot to change it...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104#discussion_r390023319", "createdAt": "2020-03-09T23:53:30Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/ServiceConfigMergingTest.java", "diffHunk": "@@ -161,21 +160,20 @@ void GIVEN_kernel_running_single_service_WHEN_merge_change_adding_nested_depende\n         CountDownLatch newServiceStarted = new CountDownLatch(1);\n \n         // Check that new_service2 starts, then new_service, and then main gets restarted\n-        kernel.context.addGlobalStateChangeListener((service, prevState) -> {\n-            if (service.getName().equals(\"new_service2\") && service.getState().equals(State.RUNNING)) {\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"new_service2\") && newState.equals(State.RUNNING)) {\n                 newService2Started.countDown();\n             }\n             if (newService2Started.getCount() == 0) {\n-                if (service.getName().equals(\"new_service\") && service.getState().equals(State.RUNNING)) {\n+                if (service.getName().equals(\"new_service\") && newState.equals(State.RUNNING)) {\n                     newServiceStarted.countDown();\n                 }\n             }\n             // Only count main as started if its dependency (new_service) has already been started\n-            // TODO change to use new state from event instead of getState()\n             if (newServiceStarted.getCount() == 0) {\n                 if (service.getName().equals(\"main\")\n-                        && (service.getState().equals(State.RUNNING) || service.getState().equals(State.FINISHED))\n-                        && prevState.equals(State.INSTALLED)) {\n+                        && (newState.equals(State.RUNNING) || newState.equals(State.FINISHED))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTEzNg=="}, "originalCommit": {"oid": "f7407e7123f1b80350c44f846893b82f73595a1b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQxNDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNDoyMFrOFz3xTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNDoyMFrOFz3xTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTQzOA==", "bodyText": "Excellent!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/104#discussion_r389935438", "createdAt": "2020-03-09T20:14:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -44,10 +44,10 @@\n \n     private static final Logger log = LogManager.getLogger(LifecycleIPCAgent.class);\n \n-    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, oldState, newState) -> {\n         Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n         if (callbacks != null) {\n-            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+            callbacks.values().forEach(x -> x.accept(oldState, newState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7407e7123f1b80350c44f846893b82f73595a1b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4878, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}