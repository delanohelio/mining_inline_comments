{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTYwOTg2", "number": 415, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNToyMlrOEhZaUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1NzoxM1rOEqgjbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU0ODAxOnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNToyMlrOHOsMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxOTo1NVrOHOspMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjI0NA==", "bodyText": "Why do we force AWS_SESSION_TOKEN? I think that's only required if that are assumed roles involved (ie: optional if a static key / secret is used as an IAM user)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485166244", "createdAt": "2020-09-08T20:05:22Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then\n+  echo \"Failed. Please set AWS credentials in your shell\"\n+  exit 1\n+fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MzU1NA==", "bodyText": "You're right! We shouldn't force the token.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485173554", "createdAt": "2020-09-08T20:19:55Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then\n+  echo \"Failed. Please set AWS credentials in your shell\"\n+  exit 1\n+fi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjI0NA=="}, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU0OTg1OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNTo1NVrOHOsNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoyMjozM1rOHOsuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjUyMg==", "bodyText": "Should these be inputs to the script or reasonable defaults?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485166522", "createdAt": "2020-09-08T20:05:55Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then\n+  echo \"Failed. Please set AWS credentials in your shell\"\n+  exit 1\n+fi\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }\n+  cd \"$INSTALLER_DIR\"\n+fi\n+\n+# copy over HTTP jar\n+mkdir -p \"$HTTP_INSTALL_DIR\"\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+\n+# run Greengrass2\n+echo 'Starting Greengrass2'\n+java -Droot=\"$GG_ROOT_DIR\" -Dlog.level=ERROR -jar \"$KERNEL_DIR/lib/Greengrass.jar\" \\\n+    --provision true --aws-region us-east-1 \\\n+    --thing-name TiloTestDevice0 \\\n+    --setup-tes true -tra tiloTestRoleAlias", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3NDg2MA==", "bodyText": "Working on accept input with default value like \"MyIotRoleForTes\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485174860", "createdAt": "2020-09-08T20:22:33Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then\n+  echo \"Failed. Please set AWS credentials in your shell\"\n+  exit 1\n+fi\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }\n+  cd \"$INSTALLER_DIR\"\n+fi\n+\n+# copy over HTTP jar\n+mkdir -p \"$HTTP_INSTALL_DIR\"\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+\n+# run Greengrass2\n+echo 'Starting Greengrass2'\n+java -Droot=\"$GG_ROOT_DIR\" -Dlog.level=ERROR -jar \"$KERNEL_DIR/lib/Greengrass.jar\" \\\n+    --provision true --aws-region us-east-1 \\\n+    --thing-name TiloTestDevice0 \\\n+    --setup-tes true -tra tiloTestRoleAlias", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjUyMg=="}, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU1NTA0OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNzozN1rOHOsRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNzozN1rOHOsRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzM2MQ==", "bodyText": "Why are we including the commit hash here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485167361", "createdAt": "2020-09-08T20:07:37Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU1NTU0OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNzo0OVrOHOsRXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxNToyOFrOHOsgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzQ1Mw==", "bodyText": "Why are we including the commit hash here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485167453", "createdAt": "2020-09-08T20:07:49Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MTM2Mw==", "bodyText": "Just to note that this script works for that build... will change to the final name", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485171363", "createdAt": "2020-09-08T20:15:28Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzQ1Mw=="}, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDYxMTYyOnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoyNToyMlrOHOsziA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoyNToyMlrOHOsziA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3NjIwMA==", "bodyText": "should not force these at all. Credentials can also come from EC2 or from a profile file. The kernel handles all those scenarios, so I'd just allow it to complain if there's a problem", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485176200", "createdAt": "2020-09-08T20:25:22Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTM0NzY0OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1MzowMlrOHPZ6tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTowOTowNlrOHPaZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNTMxNw==", "bodyText": "Is it intentional to append 2?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485915317", "createdAt": "2020-09-09T20:53:02Z", "author": {"login": "hui-yang"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMzIxOA==", "bodyText": "Yeah... but we probably don't need \"2\" to distinguish it because 1 won't create a working directory", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485923218", "createdAt": "2020-09-09T21:09:06Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNTMxNw=="}, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTM0OTA5OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1MzoyOFrOHPZ7nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxODoxM1rOHPaqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNTU1MQ==", "bodyText": "Can we make it work with /bin/sh?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485915551", "createdAt": "2020-09-09T20:53:28Z", "author": {"login": "hui-yang"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNzYwNA==", "bodyText": "that would be most generalizable. CLI install/run scripts all use bash for now. we should change those as well", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485927604", "createdAt": "2020-09-09T21:18:13Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNTU1MQ=="}, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTM1OTc1OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1NjozMVrOHPaB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0NDoyNFrOHTFTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzE2NA==", "bodyText": "Do we need bash? Probably should add a followup for this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r485917164", "createdAt": "2020-09-09T20:56:31Z", "author": {"login": "hui-yang"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then\n+  echo \"Failed. Please set AWS credentials in your shell\"\n+  exit 1\n+fi\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MTk2OA==", "bodyText": "Should be using /bin/sh", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r489771968", "createdAt": "2020-09-16T21:44:24Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env bash\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+# Sep 4, 2020 5:37:36 PM GMT-0400\n+KERNEL_DIR=\"aws-greengrass-248256ad1d9c1c636a7910a332f13e588b66af27\"\n+# 79011c549a3f29167fe36dc53936aa7ded8eff4a Sep 3, 2020 4:57:16 PM GMT-0400\n+CLI_DIR=\"aws-greengrass-cli-1.0-SNAPSHOT\"\n+# Sep 4, 2020 1:18:52 PM GMT-0400\n+HTTP_JAR=\"aws-greengrass-http-03d5e8465816c40259932ed3747786c5c4a3570d.jar\"\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# check credentials are set\n+if [ -z \"$AWS_ACCESS_KEY_ID\" ] || [ -z \"$AWS_SECRET_ACCESS_KEY\" ] || [ -z \"$AWS_SESSION_TOKEN\" ]; then\n+  echo \"Failed. Please set AWS credentials in your shell\"\n+  exit 1\n+fi\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzE2NA=="}, "originalCommit": {"oid": "f7b3aaca379f36f3fb1ad4eac90ff4be13a01e20"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDQ3OTg4OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0NToxMFrOHTFVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0NToxMFrOHTFVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjI4OQ==", "bodyText": "why only ERROR? I'd prefer INFO, or at the very least WARN.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r489772289", "createdAt": "2020-09-16T21:45:10Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+KERNEL_DIR=\"aws-greengrass\"\n+CLI_DIR=\"aws-greengrass-cli\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# provision name defaults\n+thing_name=\"MyIotThing\"\n+iot_policy_name=\"MyIotThingPolicy\"\n+tes_role_name=\"MyIotRoleForTes\"\n+tes_role_alias=\"MyIotRoleAliasForTes\"\n+\n+CUSTOMIZE=false\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -c|--customize)\n+    CUSTOMIZE=true\n+    shift\n+    ;;\n+    -tn|--thing-name)\n+    thing_name=$2\n+    shift\n+    ;;\n+  esac\n+done\n+\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }\n+  cd \"$INSTALLER_DIR\"\n+else\n+  echo \"Greengrass CLI already installed\"\n+fi\n+\n+# prompt user inputs if customize is set\n+echo 'Later we will provision the device by creating required IoT/IAM roles and policies'\n+if \"$CUSTOMIZE\"; then\n+  echo 'Please provide input (press Enter to accept [default]):'\n+\n+  curr_default_val=$thing_name\n+  printf \"IoT Thing name [%s]: \" \"$curr_default_val\"\n+  read -r thing_name\n+  thing_name=${thing_name:-$curr_default_val}\n+\n+  curr_default_val=$iot_policy_name\n+  printf \"IoT policy name [%s]: \" \"$curr_default_val\"\n+  read -r iot_policy_name\n+  iot_policy_name=${iot_policy_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_name\n+  printf \"TES IAM role name [%s]: \" $curr_default_val\n+  read -r  tes_role_name\n+  tes_role_name=${tes_role_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_alias\n+  printf \"TES IoT role alias [%s]: \" $curr_default_val\n+  read -r tes_role_alias\n+  tes_role_alias=${tes_role_alias:-$curr_default_val}\n+else\n+  echo 'Using defaults for provisioning'\n+fi\n+\n+# copy over HTTP jar\n+mkdir -p \"$HTTP_INSTALL_DIR\"\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+\n+# run Greengrass\n+echo 'Starting Greengrass'\n+java -Droot=\"$GG_ROOT_DIR\" -Dlog.level=ERROR -jar \"$KERNEL_DIR/lib/Greengrass.jar\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6936f6713a41019568262d975435380cfb60bfce"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDQ4MjQ2OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0NjowNlrOHTFWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0Mzo0MFrOHb7Ffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjcwNA==", "bodyText": "So, the customer needs to unzip the kernel zip file and put it in the proper location in order for this script to work?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r489772704", "createdAt": "2020-09-16T21:46:06Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+KERNEL_DIR=\"aws-greengrass\"\n+CLI_DIR=\"aws-greengrass-cli\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# provision name defaults\n+thing_name=\"MyIotThing\"\n+iot_policy_name=\"MyIotThingPolicy\"\n+tes_role_name=\"MyIotRoleForTes\"\n+tes_role_alias=\"MyIotRoleAliasForTes\"\n+\n+CUSTOMIZE=false\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -c|--customize)\n+    CUSTOMIZE=true\n+    shift\n+    ;;\n+    -tn|--thing-name)\n+    thing_name=$2\n+    shift\n+    ;;\n+  esac\n+done\n+\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }\n+  cd \"$INSTALLER_DIR\"\n+else\n+  echo \"Greengrass CLI already installed\"\n+fi\n+\n+# prompt user inputs if customize is set\n+echo 'Later we will provision the device by creating required IoT/IAM roles and policies'\n+if \"$CUSTOMIZE\"; then\n+  echo 'Please provide input (press Enter to accept [default]):'\n+\n+  curr_default_val=$thing_name\n+  printf \"IoT Thing name [%s]: \" \"$curr_default_val\"\n+  read -r thing_name\n+  thing_name=${thing_name:-$curr_default_val}\n+\n+  curr_default_val=$iot_policy_name\n+  printf \"IoT policy name [%s]: \" \"$curr_default_val\"\n+  read -r iot_policy_name\n+  iot_policy_name=${iot_policy_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_name\n+  printf \"TES IAM role name [%s]: \" $curr_default_val\n+  read -r  tes_role_name\n+  tes_role_name=${tes_role_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_alias\n+  printf \"TES IoT role alias [%s]: \" $curr_default_val\n+  read -r tes_role_alias\n+  tes_role_alias=${tes_role_alias:-$curr_default_val}\n+else\n+  echo 'Using defaults for provisioning'\n+fi\n+\n+# copy over HTTP jar\n+mkdir -p \"$HTTP_INSTALL_DIR\"\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+\n+# run Greengrass\n+echo 'Starting Greengrass'\n+java -Droot=\"$GG_ROOT_DIR\" -Dlog.level=ERROR -jar \"$KERNEL_DIR/lib/Greengrass.jar\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6936f6713a41019568262d975435380cfb60bfce"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MzE2NQ==", "bodyText": "Not only the kernel zip. They need CLI and HTTP.jar in place as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r489783165", "createdAt": "2020-09-16T22:12:19Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+KERNEL_DIR=\"aws-greengrass\"\n+CLI_DIR=\"aws-greengrass-cli\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# provision name defaults\n+thing_name=\"MyIotThing\"\n+iot_policy_name=\"MyIotThingPolicy\"\n+tes_role_name=\"MyIotRoleForTes\"\n+tes_role_alias=\"MyIotRoleAliasForTes\"\n+\n+CUSTOMIZE=false\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -c|--customize)\n+    CUSTOMIZE=true\n+    shift\n+    ;;\n+    -tn|--thing-name)\n+    thing_name=$2\n+    shift\n+    ;;\n+  esac\n+done\n+\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }\n+  cd \"$INSTALLER_DIR\"\n+else\n+  echo \"Greengrass CLI already installed\"\n+fi\n+\n+# prompt user inputs if customize is set\n+echo 'Later we will provision the device by creating required IoT/IAM roles and policies'\n+if \"$CUSTOMIZE\"; then\n+  echo 'Please provide input (press Enter to accept [default]):'\n+\n+  curr_default_val=$thing_name\n+  printf \"IoT Thing name [%s]: \" \"$curr_default_val\"\n+  read -r thing_name\n+  thing_name=${thing_name:-$curr_default_val}\n+\n+  curr_default_val=$iot_policy_name\n+  printf \"IoT policy name [%s]: \" \"$curr_default_val\"\n+  read -r iot_policy_name\n+  iot_policy_name=${iot_policy_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_name\n+  printf \"TES IAM role name [%s]: \" $curr_default_val\n+  read -r  tes_role_name\n+  tes_role_name=${tes_role_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_alias\n+  printf \"TES IoT role alias [%s]: \" $curr_default_val\n+  read -r tes_role_alias\n+  tes_role_alias=${tes_role_alias:-$curr_default_val}\n+else\n+  echo 'Using defaults for provisioning'\n+fi\n+\n+# copy over HTTP jar\n+mkdir -p \"$HTTP_INSTALL_DIR\"\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+\n+# run Greengrass\n+echo 'Starting Greengrass'\n+java -Droot=\"$GG_ROOT_DIR\" -Dlog.level=ERROR -jar \"$KERNEL_DIR/lib/Greengrass.jar\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjcwNA=="}, "originalCommit": {"oid": "6936f6713a41019568262d975435380cfb60bfce"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTY2Mw==", "bodyText": "If this is supposed to be \"easy\" then let's not make the customer unzip stuff. Take our current beta kernel artifacts and go from there.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499041663", "createdAt": "2020-10-02T20:43:40Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+KERNEL_DIR=\"aws-greengrass\"\n+CLI_DIR=\"aws-greengrass-cli\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# provision name defaults\n+thing_name=\"MyIotThing\"\n+iot_policy_name=\"MyIotThingPolicy\"\n+tes_role_name=\"MyIotRoleForTes\"\n+tes_role_alias=\"MyIotRoleAliasForTes\"\n+\n+CUSTOMIZE=false\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -c|--customize)\n+    CUSTOMIZE=true\n+    shift\n+    ;;\n+    -tn|--thing-name)\n+    thing_name=$2\n+    shift\n+    ;;\n+  esac\n+done\n+\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  cd \"$CLI_DIR\"\n+  bash install.sh || { echo 'CLI installation failed'; exit 1; }\n+  cd \"$INSTALLER_DIR\"\n+else\n+  echo \"Greengrass CLI already installed\"\n+fi\n+\n+# prompt user inputs if customize is set\n+echo 'Later we will provision the device by creating required IoT/IAM roles and policies'\n+if \"$CUSTOMIZE\"; then\n+  echo 'Please provide input (press Enter to accept [default]):'\n+\n+  curr_default_val=$thing_name\n+  printf \"IoT Thing name [%s]: \" \"$curr_default_val\"\n+  read -r thing_name\n+  thing_name=${thing_name:-$curr_default_val}\n+\n+  curr_default_val=$iot_policy_name\n+  printf \"IoT policy name [%s]: \" \"$curr_default_val\"\n+  read -r iot_policy_name\n+  iot_policy_name=${iot_policy_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_name\n+  printf \"TES IAM role name [%s]: \" $curr_default_val\n+  read -r  tes_role_name\n+  tes_role_name=${tes_role_name:-$curr_default_val}\n+\n+  curr_default_val=$tes_role_alias\n+  printf \"TES IoT role alias [%s]: \" $curr_default_val\n+  read -r tes_role_alias\n+  tes_role_alias=${tes_role_alias:-$curr_default_val}\n+else\n+  echo 'Using defaults for provisioning'\n+fi\n+\n+# copy over HTTP jar\n+mkdir -p \"$HTTP_INSTALL_DIR\"\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+\n+# run Greengrass\n+echo 'Starting Greengrass'\n+java -Droot=\"$GG_ROOT_DIR\" -Dlog.level=ERROR -jar \"$KERNEL_DIR/lib/Greengrass.jar\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjcwNA=="}, "originalCommit": {"oid": "6936f6713a41019568262d975435380cfb60bfce"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDQ4NDcyOnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0Njo1OFrOHTFYIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTo0Njo1OFrOHTFYIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MzA4OA==", "bodyText": "not sure about this.... it will blow away everything, this is very very dangerous and I definitely would not have this be the default experience with no user input", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r489773088", "createdAt": "2020-09-16T21:46:58Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+INSTALLER_DIR=\"$(pwd)\"\n+GG_ROOT_DIR=\"$HOME/.greengrass\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+\n+KERNEL_DIR=\"aws-greengrass\"\n+CLI_DIR=\"aws-greengrass-cli\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# provision name defaults\n+thing_name=\"MyIotThing\"\n+iot_policy_name=\"MyIotThingPolicy\"\n+tes_role_name=\"MyIotRoleForTes\"\n+tes_role_alias=\"MyIotRoleAliasForTes\"\n+\n+CUSTOMIZE=false\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -c|--customize)\n+    CUSTOMIZE=true\n+    shift\n+    ;;\n+    -tn|--thing-name)\n+    thing_name=$2\n+    shift\n+    ;;\n+  esac\n+done\n+\n+\n+# make sure files exist\n+for i in $KERNEL_DIR $CLI_DIR $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# remove existing installation if exists\n+if [ -d \"$GG_ROOT_DIR\" ] ; then\n+  echo 'removing old installation'\n+  rm -rf \"$GG_ROOT_DIR\"\n+fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6936f6713a41019568262d975435380cfb60bfce"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTExNDY2OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMjo1NFrOHcm_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMjo1NFrOHcm_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTEzMw==", "bodyText": "use /bin/sh", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499761133", "createdAt": "2020-10-05T17:32:54Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,63 @@\n+#!/usr/bin/env bash\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete existing directory: $GG_ROOT_DIR\"\n+  read -r -p \"Are you sure (y/n)?\" choice\n+  case \"$choice\" in\n+    y|Y ) rm -rf \"$GG_ROOT_DIR\";;\n+    n|N ) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  sudo bash \"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5619bd18eb19f441c5a4dceda974d6dd26c5231"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTExODA2OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMzo1MlrOHcnCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMzo1MlrOHcnCEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTY4Mw==", "bodyText": "add an echo \"You can now start Greengrass\", since your script isn't starting it up, it may be a bit confusing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499761683", "createdAt": "2020-10-05T17:33:52Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,63 @@\n+#!/usr/bin/env bash\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete existing directory: $GG_ROOT_DIR\"\n+  read -r -p \"Are you sure (y/n)?\" choice\n+  case \"$choice\" in\n+    y|Y ) rm -rf \"$GG_ROOT_DIR\";;\n+    n|N ) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if ! type 'greengrass-cli' &> /dev/null; then\n+  echo \"Installing Greengrass CLI\"\n+  sudo bash \"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }\n+else\n+  echo \"Greengrass CLI already installed\"\n+fi\n+\n+# copy over local dashboard jar\n+mkdir -p \"$HTTP_INSTALL_DIR\" || { echo 'Install failed. cannot create local dashboard directory'; exit 1; }\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+echo \"local dashboard installed\"\n+\n+echo \"Installation complete\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5619bd18eb19f441c5a4dceda974d6dd26c5231"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTgwMDE0OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowMjoxMFrOHctrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0OTo1OVrOHdQ-qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MDY1MA==", "bodyText": "Maybe want to give them the command to run or -h to display a set of options for bootstrapping.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499870650", "createdAt": "2020-10-05T21:02:10Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+    -ld|--launch-default)\n+    LAUNCH_WITH_DEFAULT=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete the existing directory: $GG_ROOT_DIR\"\n+  echo \"Are you sure (y/n)?\"\n+  read -r choice\n+  case \"$choice\" in\n+    y|Y) rm -rf \"$GG_ROOT_DIR\";;\n+    *) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if type 'greengrass-cli' > /dev/null 2>&1; then\n+  echo \"Greengrass CLI already installed\"\n+else\n+  echo \"Installing Greengrass CLI\"\n+  sudo ./\"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }\n+fi\n+\n+# copy over local dashboard jar\n+mkdir -p \"$HTTP_INSTALL_DIR\" || { echo 'Install failed. cannot create local dashboard directory'; exit 1; }\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+echo \"local dashboard installed\"\n+\n+echo \"Installation complete. Installed at: $GG_ROOT_DIR\"\n+\n+if \"$LAUNCH_WITH_DEFAULT\"; then\n+  echo \"Starting Greengrass\"\n+  java -Droot=\"$GG_ROOT_DIR\" -Dlog.store=FILE -jar lib/Greengrass.jar \\\n+    --aws-region \"$AWS_REGION\" --provision true --setup-tes true\n+else\n+  echo \"You can now start Greengrass\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5ODQ3Mg==", "bodyText": "I think a sample command to run is in the instruction docs which is given along this script?\nLike step 10 of this section: https://alpha-docs-aws.amazon.com/greengrass/v2/developerguide/getting-started.html#install-greengrass-v2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499898472", "createdAt": "2020-10-05T22:05:52Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+    -ld|--launch-default)\n+    LAUNCH_WITH_DEFAULT=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete the existing directory: $GG_ROOT_DIR\"\n+  echo \"Are you sure (y/n)?\"\n+  read -r choice\n+  case \"$choice\" in\n+    y|Y) rm -rf \"$GG_ROOT_DIR\";;\n+    *) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if type 'greengrass-cli' > /dev/null 2>&1; then\n+  echo \"Greengrass CLI already installed\"\n+else\n+  echo \"Installing Greengrass CLI\"\n+  sudo ./\"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }\n+fi\n+\n+# copy over local dashboard jar\n+mkdir -p \"$HTTP_INSTALL_DIR\" || { echo 'Install failed. cannot create local dashboard directory'; exit 1; }\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+echo \"local dashboard installed\"\n+\n+echo \"Installation complete. Installed at: $GG_ROOT_DIR\"\n+\n+if \"$LAUNCH_WITH_DEFAULT\"; then\n+  echo \"Starting Greengrass\"\n+  java -Droot=\"$GG_ROOT_DIR\" -Dlog.store=FILE -jar lib/Greengrass.jar \\\n+    --aws-region \"$AWS_REGION\" --provision true --setup-tes true\n+else\n+  echo \"You can now start Greengrass\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MDY1MA=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0ODkzOQ==", "bodyText": "Sure. I guess that's fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r500448939", "createdAt": "2020-10-06T16:49:59Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+    -ld|--launch-default)\n+    LAUNCH_WITH_DEFAULT=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete the existing directory: $GG_ROOT_DIR\"\n+  echo \"Are you sure (y/n)?\"\n+  read -r choice\n+  case \"$choice\" in\n+    y|Y) rm -rf \"$GG_ROOT_DIR\";;\n+    *) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if type 'greengrass-cli' > /dev/null 2>&1; then\n+  echo \"Greengrass CLI already installed\"\n+else\n+  echo \"Installing Greengrass CLI\"\n+  sudo ./\"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }\n+fi\n+\n+# copy over local dashboard jar\n+mkdir -p \"$HTTP_INSTALL_DIR\" || { echo 'Install failed. cannot create local dashboard directory'; exit 1; }\n+cp $HTTP_JAR \"$HTTP_INSTALL_DIR/\"\n+echo \"local dashboard installed\"\n+\n+echo \"Installation complete. Installed at: $GG_ROOT_DIR\"\n+\n+if \"$LAUNCH_WITH_DEFAULT\"; then\n+  echo \"Starting Greengrass\"\n+  java -Droot=\"$GG_ROOT_DIR\" -Dlog.store=FILE -jar lib/Greengrass.jar \\\n+    --aws-region \"$AWS_REGION\" --provision true --setup-tes true\n+else\n+  echo \"You can now start Greengrass\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MDY1MA=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTgwODc3OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowNTowNFrOHctw9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1MDozN1rOHdRAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MTk4OA==", "bodyText": "Should this be changed now to avoid a change very soon? Can we bypass this decision by looking 2 directories deep?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499871988", "createdAt": "2020-10-05T21:05:04Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5ODQ3OQ==", "bodyText": "You mean changing evergreen to aws-greengrass?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499898479", "createdAt": "2020-10-05T22:05:53Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MTk4OA=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNDI3OA==", "bodyText": "I suppose that depends on whether evergreen is scrubbed between now and a couple of weeks.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499914278", "createdAt": "2020-10-05T22:51:41Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MTk4OA=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0OTM2NQ==", "bodyText": "Probably not worth fixing right now since the docs will need updating as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r500449365", "createdAt": "2020-10-06T16:50:37Z", "author": {"login": "philcali"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MTk4OA=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA5MDA2OnYy", "diffSide": "RIGHT", "path": "scripts/install-beta.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1NzoxM1rOHcwctA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzo1MTo1MFrOHcxdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNTk1Ng==", "bodyText": "Should this be sudo?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499915956", "createdAt": "2020-10-05T22:57:13Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+    -ld|--launch-default)\n+    LAUNCH_WITH_DEFAULT=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete the existing directory: $GG_ROOT_DIR\"\n+  echo \"Are you sure (y/n)?\"\n+  read -r choice\n+  case \"$choice\" in\n+    y|Y) rm -rf \"$GG_ROOT_DIR\";;\n+    *) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if type 'greengrass-cli' > /dev/null 2>&1; then\n+  echo \"Greengrass CLI already installed\"\n+else\n+  echo \"Installing Greengrass CLI\"\n+  sudo ./\"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMTMxMg==", "bodyText": "CLI install script links to /usr/local/bin/ which requires sudo.\nThis line: https://github.com/aws/aws-greengrass-cli/blob/master/install.sh#L18\nIf we run it without sudo, it'll first do a failed attempt and output \"Permission denied\" then retry with sudo.\nSo might as well just sudo here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499931312", "createdAt": "2020-10-05T23:48:28Z", "author": {"login": "tilo-chen"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+    -ld|--launch-default)\n+    LAUNCH_WITH_DEFAULT=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete the existing directory: $GG_ROOT_DIR\"\n+  echo \"Are you sure (y/n)?\"\n+  read -r choice\n+  case \"$choice\" in\n+    y|Y) rm -rf \"$GG_ROOT_DIR\";;\n+    *) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if type 'greengrass-cli' > /dev/null 2>&1; then\n+  echo \"Greengrass CLI already installed\"\n+else\n+  echo \"Installing Greengrass CLI\"\n+  sudo ./\"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNTk1Ng=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMjQ1Mg==", "bodyText": "No, do not run it as sudo because then the autocomplete won't install. Just run it as normal.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/415#discussion_r499932452", "createdAt": "2020-10-05T23:51:50Z", "author": {"login": "MikeDombo"}, "path": "scripts/install-beta.sh", "diffHunk": "@@ -0,0 +1,84 @@\n+#!/bin/sh\n+# If no options provided, will unzip and install the CLI and local dashboard\n+#\n+# OPTIONS\n+# [-r|--root] <root dir>: specify Greengrass root directory for installation\n+# [-f|--fresh-install]: delete previous Greengrass installation if exists\n+# [-ld|--launch-default]: after install, launch Greengrass with default params for provision and running\n+\n+# defaults\n+GG_ROOT_DIR=\"/greengrass/v2\"\n+HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+FRESH_INSTALL=false\n+LAUNCH_WITH_DEFAULT=false\n+AWS_REGION=\"us-east-1\"\n+\n+# expected files\n+NUCLEUS_ZIP=\"aws.greengrass.nucleus.zip\"\n+CLI_ZIP=\"aws-greengrass-cli.zip\"\n+CLI_DIR=\"evergreen-cli-1.0-SNAPSHOT\"\n+HTTP_JAR=\"aws-greengrass-http.jar\"\n+\n+# make sure required file/directory exist\n+for i in $NUCLEUS_ZIP $CLI_ZIP $HTTP_JAR ; do\n+  if [ ! -e $i ] ; then\n+    echo \"Install failed. $i not found\"\n+    exit 1\n+  fi\n+done\n+\n+# get arguments\n+for arg in \"$@\" ; do\n+  case $arg in\n+    -r|--root)\n+    GG_ROOT_DIR=$2\n+    HTTP_INSTALL_DIR=\"$GG_ROOT_DIR/plugins/trusted\"\n+    shift\n+    ;;\n+    -f|--fresh-install)\n+    FRESH_INSTALL=true\n+    shift\n+    ;;\n+    -ld|--launch-default)\n+    LAUNCH_WITH_DEFAULT=true\n+    shift\n+    ;;\n+  esac\n+done\n+\n+# unzip\n+(unzip $CLI_ZIP && unzip $NUCLEUS_ZIP) || { echo \"Install failed. Cannot unzip\"; exit 1; }\n+\n+# remove existing installation if requested\n+if \"$FRESH_INSTALL\" && [ -d \"$GG_ROOT_DIR\" ]; then\n+  echo \"Attempting fresh install. This will delete the existing directory: $GG_ROOT_DIR\"\n+  echo \"Are you sure (y/n)?\"\n+  read -r choice\n+  case \"$choice\" in\n+    y|Y) rm -rf \"$GG_ROOT_DIR\";;\n+    *) echo \"Aborted.\";;\n+  esac\n+fi\n+\n+# install CLI if not already\n+if type 'greengrass-cli' > /dev/null 2>&1; then\n+  echo \"Greengrass CLI already installed\"\n+else\n+  echo \"Installing Greengrass CLI\"\n+  sudo ./\"$CLI_DIR/install.sh\" || { echo 'Install failed. cannot install CLI'; exit 1; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNTk1Ng=="}, "originalCommit": {"oid": "b5998acaf9d44139bb0a45279c24f2f130d6432c"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 763, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}