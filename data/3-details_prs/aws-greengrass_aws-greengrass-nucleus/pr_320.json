{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNTAxMDcy", "number": 320, "title": "Add negative caching in TES", "bodyText": "Issue #, if available:\nDescription of changes:\nAdd IotCloudResponse to get both response body and status code from cloud request\nAdd negative caching in CredentialsHandler to cache different error for for different time\nAdd unit tests for each case (no status code,4xx,5xx,unknown code) to verify error expiration\nWhy is this change necessary:\nTES takes in error code from cloud to decide negative caching expiry policy\nHow was this change tested:\nmvn verify\nTESTest\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-17T22:14:33Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320", "merged": true, "mergeCommit": {"oid": "908f3ac09bce824610c7a65beeecbc7347fca805"}, "closed": true, "closedAt": "2020-07-29T01:29:34Z", "author": {"login": "youtuyy"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc17TAxAH2gAyNDUxNTAxMDcyOmE0ZDdmODYyYzkyOWQ5NTYwODkwZjUxYmJjNjAxOGI0OGU3ZmJmY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5gSougFqTQ1NzEyNTEyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a4d7f862c929d9560890f51bbc6018b48e7fbfcb", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a4d7f862c929d9560890f51bbc6018b48e7fbfcb", "committedDate": "2020-07-17T22:09:14Z", "message": "Add IotCloudResponse class to pass in status code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b160fe64572b1f67b23886a4d31abba7a7c6da3", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9b160fe64572b1f67b23886a4d31abba7a7c6da3", "committedDate": "2020-07-17T22:20:09Z", "message": "reformat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzc3MDI4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-451777028", "createdAt": "2020-07-20T16:39:04Z", "commit": {"oid": "9b160fe64572b1f67b23886a4d31abba7a7c6da3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjozOTowNFrOG0WZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjozOTowNFrOG0WZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjEzNw==", "bodyText": "May be we should not convert it to string, as it could be used by other clients which might just want to deal with bytes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r457546137", "createdAt": "2020-07-20T16:39:04Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -95,34 +96,37 @@ public void onResponseHeaders(HttpStream httpStream, int i, int i1, HttpHeader[]\n             @Override\n             public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n                 responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n+                response.setResponseBody(responseBody.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b160fe64572b1f67b23886a4d31abba7a7c6da3"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzc4NTY5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-451778569", "createdAt": "2020-07-20T16:41:03Z", "commit": {"oid": "9b160fe64572b1f67b23886a4d31abba7a7c6da3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0MTowM1rOG0WeZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0MTowM1rOG0WeZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NzM2Ng==", "bodyText": "Do you want to use @Data here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r457547366", "createdAt": "2020-07-20T16:41:03Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/iot/model/IotCloudResponse.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.aws.iot.evergreen.iot.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Setter\n+public class IotCloudResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b160fe64572b1f67b23886a4d31abba7a7c6da3"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4414c26854953e0d9587af99d4273f7d5bbc22eb", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4414c26854953e0d9587af99d4273f7d5bbc22eb", "committedDate": "2020-07-20T23:22:17Z", "message": "Add retry and ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eef00de3eb77d677a092c994c04422eb9489031", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2eef00de3eb77d677a092c994c04422eb9489031", "committedDate": "2020-07-20T23:22:58Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "227550e3690594de161b2c0ea6223d9d5ec9a1f1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/227550e3690594de161b2c0ea6223d9d5ec9a1f1", "committedDate": "2020-07-21T02:47:03Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e665ff4fefa484f003dfa8d6c4368d49e8a202c1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e665ff4fefa484f003dfa8d6c4368d49e8a202c1", "committedDate": "2020-07-21T03:17:20Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b809d55fb20bdd9d1816af86b8909d7c087747f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6b809d55fb20bdd9d1816af86b8909d7c087747f", "committedDate": "2020-07-21T05:25:02Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7e970c1838b3bdccb8e35d3f94c054b9fd0012d", "committedDate": "2020-07-21T16:38:18Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjg2MzI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-452686326", "createdAt": "2020-07-21T17:39:55Z", "commit": {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTo1NlrOG1C2xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTo1NlrOG1C2xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDUwMw==", "bodyText": "I think this method might get called multiple times, you cannot assume that its only called once.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r458274503", "createdAt": "2020-07-21T17:39:56Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -95,8 +95,7 @@ public void onResponseHeaders(HttpStream httpStream, int i, int i1, HttpHeader[]\n \n             @Override\n             public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n-                responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n-                response.setResponseBody(responseBody.toString());\n+                response.setResponseBody(bodyBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjg2NjY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-452686667", "createdAt": "2020-07-21T17:40:25Z", "commit": {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0MDoyNVrOG1C35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0MDoyNVrOG1C35w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDc5MQ==", "bodyText": "Great. Thanks for adding this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r458274791", "createdAt": "2020-07-21T17:40:25Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -55,16 +59,12 @@ public IotCloudResponse sendHttpRequest(final IotConnectionManager connManager,\n         final HttpRequestBodyStream httpRequestBodyStream = body == null ? null : createHttpRequestBodyStream(body);\n         final HttpRequest request = new HttpRequest(verb, path, headers, httpRequestBodyStream);\n \n-        IotCloudResponse response;\n         try (HttpClientConnection conn = connManager.getConnection()) {\n-            // TODO: Make it exponential backoff, create backoff util for common use.\n-            int numAttempts = 0;\n-            do {\n-                numAttempts++;\n-                response = getHttpResponse(conn, request);\n-            } while (numAttempts < 1);\n+            BaseRetryableAccessor accessor = new BaseRetryableAccessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjg3NzI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-452687727", "createdAt": "2020-07-21T17:41:52Z", "commit": {"oid": "c7e970c1838b3bdccb8e35d3f94c054b9fd0012d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0d9518001bed6456806fc0558cde84677b93589", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c0d9518001bed6456806fc0558cde84677b93589", "committedDate": "2020-07-22T00:00:26Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120b09c98751a5318980c13c1819ced01a26625a", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/120b09c98751a5318980c13c1819ced01a26625a", "committedDate": "2020-07-24T16:39:19Z", "message": "Add negative caching and ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b27d0b7053ad7fc3b17ca2448920c6080a683c49", "committedDate": "2020-07-24T16:42:56Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjM3NzQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-455237747", "createdAt": "2020-07-24T23:54:18Z", "commit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzo1NDoxOFrOG3AjTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzo1NDoxOFrOG3AjTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzkwMQ==", "bodyText": "Is there a reason to introduce byte array separately and not part of IotCloudResponse ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460333901", "createdAt": "2020-07-24T23:54:18Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -83,7 +86,8 @@ public boolean resetPosition() {\n \n     private HttpStreamResponseHandler createResponseHandler(CompletableFuture<Integer> reqCompleted,\n                                                             Map<String, String> responseHeaders,\n-                                                            StringBuilder responseBody) {\n+                                                            ByteArrayOutputStream responseByteArray,\n+                                                            IotCloudResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjM5OTQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-455239945", "createdAt": "2020-07-25T00:07:32Z", "commit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDowNzozMlrOG3Aspg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDoxNTowNVrOG3Axlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNjI5NA==", "bodyText": "We also need to cover the case when lets say role alias is invalid, then we will receive a response with 200, but response will be error from cloud like \"role alias is invalid\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460336294", "createdAt": "2020-07-25T00:07:32Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -92,45 +97,61 @@ public void handle(final HttpExchange exchange) throws IOException {\n             response = tesCache.get(iotCredentialsPath).credentials;\n             return response;\n         }\n-        \n+\n+        // Get new credentials from cloud\n+        LOGGER.info(\"IAM credentials not found in cache or already expired. Fetching new ones from TES\");\n         Instant newExpiry = tesCache.get(iotCredentialsPath).expiry;\n \n         try {\n-            final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n-                    iotCredentialsPath,\n-                    IOT_CREDENTIALS_HTTP_VERB, null);\n-\n-            try {\n-                response = translateToAwsSdkFormat(credentials);\n-                String expiryString = parseExpiryFromResponse(credentials);\n-                Instant expiry = Instant.parse(expiryString);\n-\n-                if (expiry.isBefore(Instant.now(clock))) {\n-                    String responseString = \"TES responded with expired credentials: \" + credentials;\n-                    response = responseString.getBytes(StandardCharsets.UTF_8);\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-                    LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n-                } else {\n-                    newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_OK;\n-\n-                    if (newExpiry.isBefore(Instant.now(clock))) {\n-                        LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n-                                expiry.toString(),\n-                                TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+            final IotCloudResponse cloudResponse = iotCloudHelper\n+                    .sendHttpRequest(iotConnectionManager, iotCredentialsPath, IOT_CREDENTIALS_HTTP_VERB, null);\n+            final String credentials = cloudResponse.toString();\n+            final int cloudResponseCode = cloudResponse.getStatusCode();\n+\n+            if (cloudResponseCode == 0) {\n+                // Client errors should expire immediately\n+                String responseString = \"Failed to get credentials from TES\";\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                newExpiry = Instant.now(clock);\n+                tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+            } else if (cloudResponseCode == HttpURLConnection.HTTP_OK) {\n+                // Get response successfully, cache credentials according to expiry in response\n+                try {\n+                    response = translateToAwsSdkFormat(credentials);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNjY1MQ==", "bodyText": "nit:\nexpiryTime = UNKNOWN_ERROR_CACHE_IN_MIN;\nif (statusCode >= 400 && statusCode < 500) {\n    expiryTime = CLOUD_4XX_ERROR_CACHE_IN_MIN;\n} else if (statusCode >= 500 && statusCode < 600) {\n   expiryTime = CLOUD_5XX_ERROR_CACHE_IN_MIN;\n}\nreturn Instant.now(clock).plus(Duration.ofMinutes(expiryTime);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460336651", "createdAt": "2020-07-25T00:09:32Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -166,7 +187,28 @@ private String parseExpiryFromResponse(final String credentials) throws AWSIotEx\n         }\n     }\n \n-    private boolean areCredentialsValid() {\n+    private Instant getExpiryPolicyForErr(int statusCode) {\n+        Instant t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNzMxOA==", "bodyText": "Lets increase the backoff time to may be 200ms? Does the retryer backs off exponentially? Then overall if it takes around 1-2 seconds to retry under no network conditions, thats ideal. We dont want to give up too early.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460337318", "createdAt": "2020-07-25T00:13:35Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/iot/IotCloudHelper.java", "diffHunk": "@@ -36,6 +41,8 @@\n     // TODO: revisit all timeout values\n     // Max wait time for device to receive HTTP response from IOT CLOUD\n     private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofSeconds(30).getSeconds();\n+    private static final int RETRY_COUNT = 3;\n+    private static final int BACKOFF_MILLIS = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzNzU1OQ==", "bodyText": "Lets add a test case, when Iot cloud returns a response like \"role not found\" with a 200.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r460337559", "createdAt": "2020-07-25T00:15:05Z", "author": {"login": "prateek-y"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -171,4 +175,100 @@ public void GIVEN_unparsable_response_WHEN_called_handle_THEN_returns_error(\n         verify(mockStream, times(1)).write(expectedReponse);\n         mockStream.close();\n     }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_no_response_code_WHEN_called_handle_THEN_expire_immediately() throws Exception {\n+        String responseStr = \"\";\n+        IotCloudResponse mockResponse = new IotCloudResponse(responseStr.getBytes(StandardCharsets.UTF_8), 0);\n+        when(mockCloudHelper.sendHttpRequest(any(), any(), any(), any())).thenReturn(mockResponse);\n+        CredentialRequestHandler handler =\n+                new CredentialRequestHandler(ROLE_ALIAS, mockCloudHelper, mockConnectionManager);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        OutputStream mockStream = mock(OutputStream.class);\n+        when(mockExchange.getResponseBody()).thenReturn(mockStream);\n+        handler.handle(mockExchange);\n+        byte[] expectedResponse = \"Failed to get credentials from TES\".getBytes();\n+        int expectedStatus = 500;\n+        // expire immediately\n+        assertFalse(handler.areCredentialsValid());\n+        verify(mockExchange, times(1)).sendResponseHeaders(expectedStatus, expectedResponse.length);\n+        verify(mockStream, times(1)).write(expectedResponse);\n+        mockStream.close();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_4xx_response_code_WHEN_called_handle_THEN_expire_in_2_minutes() throws Exception {\n+        byte[] response = {};\n+        IotCloudResponse mockResponse = new IotCloudResponse(response, 400);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27d0b7053ad7fc3b17ca2448920c6080a683c49"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e498d4ce1f8559d6c09d6b5222116d6a814addf", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e498d4ce1f8559d6c09d6b5222116d6a814addf", "committedDate": "2020-07-28T01:38:39Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3557aab3dd39069ff36d49199499901112bc0395", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3557aab3dd39069ff36d49199499901112bc0395", "committedDate": "2020-07-28T16:29:17Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDU4NTY0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-457058564", "createdAt": "2020-07-28T21:58:51Z", "commit": {"oid": "3557aab3dd39069ff36d49199499901112bc0395"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1ODo1MVrOG4gy3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1ODo1MVrOG4gy3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMDc0OA==", "bodyText": "Could you add a test for this case too?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#discussion_r461910748", "createdAt": "2020-07-28T21:58:51Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -82,55 +86,77 @@ public void handle(final HttpExchange exchange) throws IOException {\n \n     /**\n      * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     *\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n+        byte[] response;\n         LOGGER.debug(\"Got request for credentials\");\n \n         if (areCredentialsValid()) {\n             response = tesCache.get(iotCredentialsPath).credentials;\n             return response;\n         }\n-        \n+\n+        // Get new credentials from cloud\n+        LOGGER.info(\"IAM credentials not found in cache or already expired. Fetching new ones from TES\");\n         Instant newExpiry = tesCache.get(iotCredentialsPath).expiry;\n \n         try {\n-            final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n-                    iotCredentialsPath,\n-                    IOT_CREDENTIALS_HTTP_VERB, null);\n-\n-            try {\n-                response = translateToAwsSdkFormat(credentials);\n-                String expiryString = parseExpiryFromResponse(credentials);\n-                Instant expiry = Instant.parse(expiryString);\n-\n-                if (expiry.isBefore(Instant.now(clock))) {\n-                    String responseString = \"TES responded with expired credentials: \" + credentials;\n-                    response = responseString.getBytes(StandardCharsets.UTF_8);\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-                    LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n-                } else {\n-                    newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n-                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_OK;\n-\n-                    if (newExpiry.isBefore(Instant.now(clock))) {\n-                        LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n-                                expiry.toString(),\n-                                TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+            final IotCloudResponse cloudResponse = iotCloudHelper\n+                    .sendHttpRequest(iotConnectionManager, iotCredentialsPath, IOT_CREDENTIALS_HTTP_VERB, null);\n+            final String credentials = cloudResponse.toString();\n+            final int cloudResponseCode = cloudResponse.getStatusCode();\n+\n+            if (cloudResponseCode == 0) {\n+                // Client errors should expire immediately\n+                String responseString = \"Failed to get credentials from TES\";\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                newExpiry = Instant.now(clock);\n+                tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+            } else if (cloudResponseCode == HttpURLConnection.HTTP_OK) {\n+                // Get response successfully, cache credentials according to expiry in response\n+                try {\n+                    response = translateToAwsSdkFormat(credentials);\n+                    String expiryString = parseExpiryFromResponse(credentials);\n+                    Instant expiry = Instant.parse(expiryString);\n+\n+                    if (expiry.isBefore(Instant.now(clock))) {\n+                        String responseString = \"TES responded with expired credentials: \" + credentials;\n+                        response = responseString.getBytes(StandardCharsets.UTF_8);\n+                        tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                        LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n                     } else {\n-                        LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                        newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                        tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_OK;\n+\n+                        if (newExpiry.isBefore(Instant.now(clock))) {\n+                            LOGGER.warn(\n+                                    \"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                                    expiry.toString(), TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                        } else {\n+                            LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                        }\n                     }\n+                } catch (AWSIotException e) {\n+                    String responseString = \"Bad TES response: \" + credentials;\n+                    response = responseString.getBytes(StandardCharsets.UTF_8);\n+                    tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                    LOGGER.error(\"Unable to parse response body\", e);\n                 }\n-            } catch (AWSIotException e) {\n-                String responseString = \"Bad TES response: \" + credentials;\n+            } else {\n+                // Cloud errors should be cached\n+                String responseString =\n+                        String.format(\"TES responded with status code: %d\", cloudResponseCode, credentials);\n                 response = responseString.getBytes(StandardCharsets.UTF_8);\n-                tesCache.get(iotCredentialsPath).responseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n-                LOGGER.error(\"Unable to parse response body\", e);\n+                newExpiry = getExpiryPolicyForErr(cloudResponseCode);\n+                tesCache.get(iotCredentialsPath).responseCode = cloudResponseCode;\n             }\n-\n         } catch (AWSIotException e) {\n-            // TODO: Generate 4xx, 5xx responses for all error scenarios\n+            // Http connection error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3557aab3dd39069ff36d49199499901112bc0395"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60c7a95656ca32b23df24f22b981fccaa405d35", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e60c7a95656ca32b23df24f22b981fccaa405d35", "committedDate": "2020-07-28T22:43:59Z", "message": "Merge branch 'master' into tes-cloud-statuscode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ce7fd3776622f655562a550b839beb5bac596d6", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1ce7fd3776622f655562a550b839beb5bac596d6", "committedDate": "2020-07-28T23:32:15Z", "message": "add ut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTIyNjUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-457122653", "createdAt": "2020-07-29T00:48:33Z", "commit": {"oid": "1ce7fd3776622f655562a550b839beb5bac596d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTI1MTIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/320#pullrequestreview-457125120", "createdAt": "2020-07-29T00:57:05Z", "commit": {"oid": "1ce7fd3776622f655562a550b839beb5bac596d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2907, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}