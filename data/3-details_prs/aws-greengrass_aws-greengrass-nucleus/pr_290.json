{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NjM4ODgy", "number": 290, "title": "replace the old mqtt client from awssdk with the new one", "bodyText": "This PR is based on the old one : #289\nIssue #, if available:\nTo replace the old mqtt client from the awsskd and use the new mqtt client from the current repo\nDescription of changes:\nMake the changes in the file of IotJobsHelper and the corresponding tests.\nHow was this change tested:\nmvn verify\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-06-25T03:44:06Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290", "merged": true, "mergeCommit": {"oid": "bc361be8a57b56629968a217bed5c10a5f02a131"}, "closed": true, "closedAt": "2020-07-21T03:16:01Z", "author": {"login": "awszztt"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcumbw5gFqTQzNzE0OTkxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc29DMAgH2gAyNDM5NjM4ODgyOjg5NTA2ZDNiNWI1NTQ1ODkxZTY4ZmRmN2ZmZjBiMzA2Y2VmYTk3NzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTQ5OTEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-437149910", "createdAt": "2020-06-25T03:53:19Z", "commit": {"oid": "2833de2597b3b5b62f2678f35ccabe49ff9c5d6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMzo1MzoxOVrOGoqeTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMzo1MzoxOVrOGoqeTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MjEwOA==", "bodyText": "[nit]\nJust throw the new exception instead of storing it as a variable first.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r445292108", "createdAt": "2020-06-25T03:53:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/WrapperMqttClientConnection.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttConnectionConfig;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+\n+public class WrapperMqttClientConnection extends MqttClientConnection {\n+\n+     private final MqttClient mqttClient;\n+     private final Map<String, UnsubscribeRequest> unsubscriptions = new ConcurrentHashMap<>();\n+     private static final String errMsg = \"The operation is not supported by the class of WrapperMqttClientConnection\";\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param mqttClient is from package of com.aws.iot.evergreen.mqtt to replace\n+     *                   the old MqttClient from software.amazon.awssdk.crt.mqtt.MqttClient\n+     */\n+    @Inject\n+    public WrapperMqttClientConnection(MqttClient mqttClient) {\n+        super(getMqttConnectionConfig());\n+        this.mqttClient = mqttClient;\n+    }\n+\n+    /*\n+     * This is to initialize a valid MqttConnectionConfig which could be used\n+     * in the WrapperMqttClientConnection\n+     *\n+     * @return MqttConnectionConfig\n+     */\n+    private static MqttConnectionConfig getMqttConnectionConfig() {\n+        try (EventLoopGroup eventLoopGroup = new EventLoopGroup(0);\n+            HostResolver resolver = new HostResolver(eventLoopGroup);\n+            ClientBootstrap clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n+            software.amazon.awssdk.crt.mqtt.MqttClient oldMqttClient =\n+                     new software.amazon.awssdk.crt.mqtt.MqttClient(clientBootstrap);) {\n+            String clientId = \"fakeClientId\";\n+            String endpoint = \"fakeEndpoint\";\n+            int portNumber = 1;\n+            MqttConnectionConfig fakeConfig = new MqttConnectionConfig();\n+            fakeConfig.setMqttClient(oldMqttClient);\n+            fakeConfig.setPort(portNumber);\n+            fakeConfig.setClientId(clientId);\n+            fakeConfig.setEndpoint(endpoint);\n+            return fakeConfig;\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> subscribe(String topic, QualityOfService qos, Consumer<MqttMessage> handler) {\n+        CompletableFuture<Integer> future = new CompletableFuture<>();\n+        SubscribeRequest request = SubscribeRequest.builder()\n+                .topic(topic).qos(qos).callback(handler).build();\n+        UnsubscribeRequest unsubscribeRequest = UnsubscribeRequest.builder()\n+                .topic(request.getTopic()).callback(request.getCallback()).build();\n+        unsubscriptions.put(request.getTopic(), unsubscribeRequest);\n+        try {\n+            mqttClient.subscribe(request);\n+            future.complete(0);\n+            return future;\n+        } catch (ExecutionException | InterruptedException | TimeoutException e) {\n+            unsubscriptions.remove(request.getTopic());\n+            future.completeExceptionally(e);\n+            return future;\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> subscribe(String topic, QualityOfService qos) {\n+        UnsupportedOperationException e = new UnsupportedOperationException(errMsg);\n+        throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2833de2597b3b5b62f2678f35ccabe49ff9c5d6e"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b22706e3a38f629869d55568b977a32d04639679", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b22706e3a38f629869d55568b977a32d04639679", "committedDate": "2020-06-25T18:07:30Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "d87b1933c69c648f548cc939f01929facb8bfd87", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d87b1933c69c648f548cc939f01929facb8bfd87", "committedDate": "2020-06-25T18:43:33Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d87b1933c69c648f548cc939f01929facb8bfd87", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d87b1933c69c648f548cc939f01929facb8bfd87", "committedDate": "2020-06-25T18:43:33Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "ee5bd2e5f47b79dffd5a8b911b336e46915748d3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ee5bd2e5f47b79dffd5a8b911b336e46915748d3", "committedDate": "2020-06-25T18:47:56Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee5bd2e5f47b79dffd5a8b911b336e46915748d3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ee5bd2e5f47b79dffd5a8b911b336e46915748d3", "committedDate": "2020-06-25T18:47:56Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "387954e527d5e7594471f8b06fd8fd2a167c6e89", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/387954e527d5e7594471f8b06fd8fd2a167c6e89", "committedDate": "2020-06-25T19:42:10Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "387954e527d5e7594471f8b06fd8fd2a167c6e89", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/387954e527d5e7594471f8b06fd8fd2a167c6e89", "committedDate": "2020-06-25T19:42:10Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "0f0094c08ac07558826cc4b2e9a2da2efbd51f22", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0f0094c08ac07558826cc4b2e9a2da2efbd51f22", "committedDate": "2020-06-25T19:45:40Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f0094c08ac07558826cc4b2e9a2da2efbd51f22", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0f0094c08ac07558826cc4b2e9a2da2efbd51f22", "committedDate": "2020-06-25T19:45:40Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "0792b7a21c8315eae57af29e12ba9488b3226a47", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0792b7a21c8315eae57af29e12ba9488b3226a47", "committedDate": "2020-06-25T19:51:32Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0792b7a21c8315eae57af29e12ba9488b3226a47", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0792b7a21c8315eae57af29e12ba9488b3226a47", "committedDate": "2020-06-25T19:51:32Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "3a1f058b1efcd1e6983dda7c5960434e6e958a8b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a1f058b1efcd1e6983dda7c5960434e6e958a8b", "committedDate": "2020-06-25T20:18:44Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a1f058b1efcd1e6983dda7c5960434e6e958a8b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a1f058b1efcd1e6983dda7c5960434e6e958a8b", "committedDate": "2020-06-25T20:18:44Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "c85d4d7262f47b85bd9a513b7fc2523a0a19b621", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c85d4d7262f47b85bd9a513b7fc2523a0a19b621", "committedDate": "2020-06-25T20:21:52Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c85d4d7262f47b85bd9a513b7fc2523a0a19b621", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c85d4d7262f47b85bd9a513b7fc2523a0a19b621", "committedDate": "2020-06-25T20:21:52Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "4ab54f62adf3637be409a97b35857e9da1d1dad5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ab54f62adf3637be409a97b35857e9da1d1dad5", "committedDate": "2020-06-25T23:09:48Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ab54f62adf3637be409a97b35857e9da1d1dad5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ab54f62adf3637be409a97b35857e9da1d1dad5", "committedDate": "2020-06-25T23:09:48Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "1fa02dff99c2de66259e64de6f87cabe957ffb48", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1fa02dff99c2de66259e64de6f87cabe957ffb48", "committedDate": "2020-06-25T23:24:33Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fa02dff99c2de66259e64de6f87cabe957ffb48", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1fa02dff99c2de66259e64de6f87cabe957ffb48", "committedDate": "2020-06-25T23:24:33Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}, "afterCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93567495f6f557b8ab745e6e039e890d17875c43", "committedDate": "2020-06-25T23:26:53Z", "message": "Move unsubscribe out of callback and *always* unsubscribe from job updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjU1ODE1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-438655815", "createdAt": "2020-06-27T00:37:00Z", "commit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDozNzowMFrOGpx3Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMTo0NTo1NlrOGqjWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTc1NQ==", "bodyText": "This is a breaking change. This functionality exists in the current implementation. If you plan to do this in separate PR, add a sim task for it, so it is not missed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r446461755", "createdAt": "2020-06-27T00:37:00Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -84,27 +83,28 @@ void afterEach() {\n         cleanup();\n     }\n \n+    // Disabled until we have spooling for offline messaging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjU3MQ==", "bodyText": "We need equivalent of this code in the new client.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r446462571", "createdAt": "2020-06-27T00:43:27Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -209,198 +193,45 @@\n         }\n     };\n \n-    @Getter\n-    private MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n-        @Override\n-        public void onConnectionInterrupted(int errorCode) {\n-            //TODO: what about error code 0\n-            if (errorCode != 0) {\n-                logger.atWarn().kv(\"error\", CRT.awsErrorString(errorCode)).log(\"Connection interrupted\");\n-                //TODO: Detect this using secondary mechanisms like checking if internet is availalble\n-                // instead of using ping to Mqtt server. Mqtt ping is expensive and should be used as the last resort.\n-            }\n-        }\n-\n-        @Override\n-        @SuppressFBWarnings\n-        public void onConnectionResumed(boolean sessionPresent) {\n-            logger.atInfo().kv(\"sessionPresent\", sessionPresent).log(\"Connection resumed\");\n-            executorService.submit(() -> {\n-                subscribeToJobsTopics();\n-                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.IOT_JOBS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NDE4MA==", "bodyText": "Do both TimeoutException blocks need to exist? Sync with michael on this, he said both are possible.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r446464180", "createdAt": "2020-06-27T00:55:43Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -418,14 +249,18 @@ private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n                 logger.atWarn().setCause(e).kv(STATUS_LOG_KEY_NAME, status)\n                         .log(UPDATE_DEPLOYMENT_STATUS_MQTT_ERROR_LOG);\n                 return false;\n+            } else if (e.getCause() instanceof TimeoutException) {\n+                // assuming this is due to network issue\n+                logger.info(UPDATE_DEPLOYMENT_STATUS_TIMEOUT_ERROR_LOG);\n+                return false;\n             }\n-            //This happens when job status update gets rejected from the Iot Cloud\n-            //Want to remove this job from the list and continue updating others\n+            // This happens when job status update gets rejected from the Iot Cloud\n+            // Want to remove this job from the list and continue updating others\n             logger.atError().kv(STATUS_LOG_KEY_NAME, status).kv(JOB_ID_LOG_KEY_NAME, jobId).setCause(e)\n                     .log(\"Job status update rejected\");\n             return true;\n         } catch (TimeoutException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NzM4NQ==", "bodyText": "I do not think we need the fake config. Read the comment above about using the connection in the AwsIotMqttClient", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r447267385", "createdAt": "2020-06-29T21:34:22Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/WrapperMqttClientConnection.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttConnectionConfig;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+\n+public class WrapperMqttClientConnection extends MqttClientConnection {\n+\n+    private final MqttClient mqttClient;\n+    private final Map<String, UnsubscribeRequest> unsubscriptions = new ConcurrentHashMap<>();\n+    private static final String errMsg = \"The operation is not supported by the class of WrapperMqttClientConnection\";\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param mqttClient is from package of com.aws.iot.evergreen.mqtt to replace the old MqttClient from\n+     *                   software.amazon.awssdk.crt.mqtt.MqttClient\n+     */\n+    @Inject\n+    public WrapperMqttClientConnection(MqttClient mqttClient) {\n+        super(getMqttConnectionConfig());\n+        this.mqttClient = mqttClient;\n+    }\n+\n+    /*\n+     * This is to initialize a valid MqttConnectionConfig which could be used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MTU0OQ==", "bodyText": "Why does this need to extend MqttClientConnection? I believe you need MqttClientConnection to initialize the iotJobsHelper.\nThe MqttClient has a list of AwsIotMqttClient which represents the connection. So can you get that connection to initialize the JobHelper? This way you can avoid initializing fake config for the connection.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r447271549", "createdAt": "2020-06-29T21:43:37Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/WrapperMqttClientConnection.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttConnectionConfig;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+\n+public class WrapperMqttClientConnection extends MqttClientConnection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MjY1MQ==", "bodyText": "You can use the connection represented by the MqttClient in this wrapper for initializing the jobsHelper", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r447272651", "createdAt": "2020-06-29T21:45:56Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -209,198 +193,45 @@\n         }\n     };\n \n-    @Getter\n-    private MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n-        @Override\n-        public void onConnectionInterrupted(int errorCode) {\n-            //TODO: what about error code 0\n-            if (errorCode != 0) {\n-                logger.atWarn().kv(\"error\", CRT.awsErrorString(errorCode)).log(\"Connection interrupted\");\n-                //TODO: Detect this using secondary mechanisms like checking if internet is availalble\n-                // instead of using ping to Mqtt server. Mqtt ping is expensive and should be used as the last resort.\n-            }\n-        }\n-\n-        @Override\n-        @SuppressFBWarnings\n-        public void onConnectionResumed(boolean sessionPresent) {\n-            logger.atInfo().kv(\"sessionPresent\", sessionPresent).log(\"Connection resumed\");\n-            executorService.submit(() -> {\n-                subscribeToJobsTopics();\n-                deploymentStatusKeeper.publishPersistedStatusUpdates(DeploymentType.IOT_JOBS);\n-            });\n-        }\n-    };\n-\n     /**\n      * Constructor for unit testing.\n      *\n      */\n     IotJobsHelper(DeviceConfiguration deviceConfiguration,\n-                  AWSIotMqttConnectionFactory awsIotMqttConnectionFactory,\n                   IotJobsClientFactory iotJobsClientFactory,\n                   LinkedBlockingQueue<Deployment> deploymentsQueue,\n                   DeploymentStatusKeeper deploymentStatusKeeper,\n                   ExecutorService executorService,\n-                  Kernel kernel) {\n+                  Kernel kernel,\n+                  WrapperMqttClientConnection connection) {\n         this.deviceConfiguration = deviceConfiguration;\n-        this.awsIotMqttConnectionFactory = awsIotMqttConnectionFactory;\n         this.iotJobsClientFactory = iotJobsClientFactory;\n         this.deploymentsQueue = deploymentsQueue;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n         this.executorService = executorService;\n         this.kernel = kernel;\n+        this.connection = connection;\n     }\n \n     @Override\n     @SuppressFBWarnings\n     public void postInject() {\n-\n-        //TODO: once connectToAWSIot and closeConnection is removed from post inject\n-        // this check should be removed\n-        if (postInjectInProgress.get()) {\n-            return;\n-        }\n-        postInjectInProgress.set(true);\n-\n-        //TODO: remove establishing mqtt connection logic when when MQTT proxy is implemented.\n-        executorService.submit(() -> {\n-            try {\n-                connectToAWSIot();\n-            } catch (InterruptedException e) {\n-               //TODO: re-evaluate the retry strategy,\n-               // re-connection attempts are made only for ConnectionUnavailableException\n-               logger.error(\"Failed to connect to IoT cloud\");\n-            }\n-        });\n-\n-        //TODO: remove closing mqtt connection logic from iot jobs handler when MQTT proxy is implemented.\n-        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-            try {\n-                closeConnection();\n-            } catch (ExecutionException | InterruptedException e) {\n-                logger.atError().log(\"Error while closing IoT client\", e);\n-            }\n-        }));\n-\n+        // Mqtt Client would automatically connect to AWS Iot\n+        this.iotJobsClient = iotJobsClientFactory.getIotJobsClient(connection);\n+        logger.dfltKv(\"ThingName\", (Supplier<String>) () ->\n+                Coerce.toString(deviceConfiguration.getThingName()));\n+        subscribeToJobsTopics();\n+        logger.atInfo().log(\"Connection established to Iot cloud\");\n         deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.IOT_JOBS,\n                 this::deploymentStatusChanged);\n     }\n \n-    private void connectToAWSIot() throws InterruptedException {\n-        // If a device is unable to connect to AWS Iot upon starting due to network availability,\n-        // the device will retry connecting to AWS Iot cloud. Retry frequency used is the same as frequency\n-        // used by deployment service to poll for new deployments.\n-        boolean shouldRetry = true;\n-        while (shouldRetry && !receivedShutdown.get()) {\n-            shouldRetry = false;\n-            try {\n-                //TODO: Separate out making MQTT connection and IotJobs helper when MQTT proxy is used.\n-                connect();\n-            } catch (DeviceConfigurationException e) {\n-                //Since there is no device configuration, device should still be able to perform local deploymentsQueue\n-                logger.atWarn().setCause(e).log(\"Device not configured to communicate with AWS Iot Cloud \"\n-                        + \"Device will now operate in offline mode\");\n-            } catch (ConnectionUnavailableException e) {\n-                logger.atWarn().setCause(e).log(\"Fail to connect to IoT cloud due to connectivity issue,\"\n-                        + \" will retry later. Device will now operate in offline mode\");\n-                shouldRetry = true;\n-                Thread.sleep(INITIAL_CONNECT_RETRY_FREQUENCY);\n-            } catch (AWSIotException e) {\n-                //This is a non transient exception and might require customer's attention\n-                logger.atError().setCause(e).log(\"Caught an exception from AWS Iot cloud\");\n-                //TODO: Revisit if we should error the service in this case\n-            }\n-        }\n-    }\n-\n-    public static class AWSIotMqttConnectionFactory {\n-        /**\n-         * Get the mqtt connection from device configuration.\n-         *\n-         * @param deviceConfiguration The device configuration {@link DeviceConfiguration}\n-         * @param callbacks           Mqtt callbacks invoked on connection events\n-         * @return {@link MqttClientConnection}\n-         */\n-        public MqttClientConnection getAwsIotMqttConnection(DeviceConfiguration deviceConfiguration,\n-                                                            MqttClientConnectionEvents callbacks) {\n-            try (EventLoopGroup eventLoopGroup = new EventLoopGroup(1);\n-                 HostResolver resolver = new HostResolver(eventLoopGroup);\n-                 ClientBootstrap clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n-                 AwsIotMqttConnectionBuilder builder = AwsIotMqttConnectionBuilder\n-                         .newMtlsBuilderFromPath(Coerce.toString(deviceConfiguration.getCertificateFilePath()),\n-                                 Coerce.toString(deviceConfiguration.getPrivateKeyFilePath()))) {\n-                builder.withCertificateAuthorityFromPath(null, Coerce.toString(deviceConfiguration.getRootCAFilePath()))\n-                        //TODO: With MQTT proxy this will change\n-                        .withEndpoint(Coerce.toString(deviceConfiguration.getIotDataEndpoint()))\n-                        .withClientId(UUID.randomUUID().toString()).withCleanSession(true)\n-                        .withBootstrap(clientBootstrap).withConnectionEventCallbacks(callbacks)\n-                        .withKeepAliveMs(MQTT_KEEP_ALIVE_TIMEOUT).withPingTimeoutMs(MQTT_PING_TIMEOUT);\n-                return builder.build();\n-            }\n-        }\n-    }\n-\n     public static class IotJobsClientFactory {\n-        public IotJobsClient getIotJobsClient(MqttClientConnection connection) {\n+        public IotJobsClient getIotJobsClient(WrapperMqttClientConnection connection) {\n             return new IotJobsClient(connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93567495f6f557b8ab745e6e039e890d17875c43"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjU5NzIy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-441259722", "createdAt": "2020-07-01T23:37:49Z", "commit": {"oid": "dad88d7d2aaf700ef59997ebc172206e0cae738c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozNzo0OVrOGr4oLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozNzo0OVrOGr4oLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2OTc0Mg==", "bodyText": "You must not remove this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r448669742", "createdAt": "2020-07-01T23:37:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -51,28 +49,6 @@\n     @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n     private MqttClientConnection connection;\n \n-    private final MqttClientConnectionEvents connectionEventCallback = new MqttClientConnectionEvents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad88d7d2aaf700ef59997ebc172206e0cae738c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDc0NzY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-443074768", "createdAt": "2020-07-06T13:28:31Z", "commit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyODozMVrOGtXQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozNTozN1rOGtXhZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMDE0NA==", "bodyText": "Your recent changes should fix this test, please undo this change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450220144", "createdAt": "2020-07-06T13:28:31Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -84,27 +83,28 @@ void afterEach() {\n         cleanup();\n     }\n \n+    // Disabled until we have spooling for offline messaging\n     @Timeout(value = 10, unit = TimeUnit.MINUTES)\n-    @Test\n-    void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnects_THEN_job_executes_successfully(ExtensionContext context) throws Exception {\n+//    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMDg1Nw==", "bodyText": "Remove everything in this callback. It isn't doing anything useful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450220857", "createdAt": "2020-07-06T13:29:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -119,16 +111,39 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private MqttClient mqttClient;\n+\n     @Setter\n     @Inject\n     @Named(DEPLOYMENTS_QUEUE)\n     private LinkedBlockingQueue<Deployment> deploymentsQueue;\n \n-    private final AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n-    private final AtomicBoolean postInjectInProgress = new AtomicBoolean(false);\n-\n     private IotJobsClient iotJobsClient;\n-    private MqttClientConnection connection;\n+    private WrapperMqttClientConnection connection;\n+\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+            //TODO: what about error code 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMTE0NQ==", "bodyText": "Remove this log, the real callback already logs this information.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450221145", "createdAt": "2020-07-06T13:30:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -119,16 +111,39 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private MqttClient mqttClient;\n+\n     @Setter\n     @Inject\n     @Named(DEPLOYMENTS_QUEUE)\n     private LinkedBlockingQueue<Deployment> deploymentsQueue;\n \n-    private final AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n-    private final AtomicBoolean postInjectInProgress = new AtomicBoolean(false);\n-\n     private IotJobsClient iotJobsClient;\n-    private MqttClientConnection connection;\n+    private WrapperMqttClientConnection connection;\n+\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+            //TODO: what about error code 0\n+            if (errorCode != 0) {\n+                logger.atWarn().kv(\"error\", CRT.awsErrorString(errorCode)).log(\"Connection interrupted\");\n+                //TODO: Detect this using secondary mechanisms like checking if internet is availalble\n+                // instead of using ping to Mqtt server. Mqtt ping is expensive and should be used as the last resort.\n+            }\n+        }\n+\n+        @Override\n+        @SuppressFBWarnings\n+        public void onConnectionResumed(boolean sessionPresent) {\n+            logger.atInfo().kv(\"sessionPresent\", sessionPresent).log(\"Connection resumed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMjkxOQ==", "bodyText": "This needs to be a set because we need to support more than 1 callback", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450222919", "createdAt": "2020-07-06T13:33:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    MqttClientConnectionEvents callbacks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzEyOQ==", "bodyText": "Rename this. It should not be specific to deployment.\nAlso, take the sessionPresent as a parameter to this method, not as a field of the class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450223129", "createdAt": "2020-07-06T13:33:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    MqttClientConnectionEvents callbacks;\n+    @NonNull MqttClient mqttClient;\n+    @Builder.Default\n+    @NonNull boolean hasCallBacked = false;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClient.\n+     *  When the connection is back, this deploymentCallback should only be triggered by\n+     *  only one AwsIotMqttClient.\n+     */\n+    public synchronized void deploymentCallback() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNDAxNg==", "bodyText": "Do not check for all connected. If one connection is back, they all are, even if they don't realize it yet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450224016", "createdAt": "2020-07-06T13:34:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    MqttClientConnectionEvents callbacks;\n+    @NonNull MqttClient mqttClient;\n+    @Builder.Default\n+    @NonNull boolean hasCallBacked = false;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClient.\n+     *  When the connection is back, this deploymentCallback should only be triggered by\n+     *  only one AwsIotMqttClient.\n+     */\n+    public synchronized void deploymentCallback() {\n+        if (!hasCallBacked && !mqttClient.isAllConnectionConnected()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNDQ4Ng==", "bodyText": "This should not be set here. It need to be set  by onConnectionInterrupted.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r450224486", "createdAt": "2020-07-06T13:35:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    MqttClientConnectionEvents callbacks;\n+    @NonNull MqttClient mqttClient;\n+    @Builder.Default\n+    @NonNull boolean hasCallBacked = false;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClient.\n+     *  When the connection is back, this deploymentCallback should only be triggered by\n+     *  only one AwsIotMqttClient.\n+     */\n+    public synchronized void deploymentCallback() {\n+        if (!hasCallBacked && !mqttClient.isAllConnectionConnected()) {\n+            callbacks.onConnectionResumed(sessionPresent);\n+\n+            // If the deployment callBacked has been finished, set it to be true.\n+            hasCallBacked = true;\n+        }\n+\n+        // When all the AwsIotMqttClients are back online, the callBackEvent would not be called any more.\n+        // Set the hasCallBacked to the init state.\n+        if (mqttClient.isAllConnectionConnected()) {\n+            hasCallBacked = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3645d71aaaeb556a2fa4e66d78b505d421cb327d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTUwOTI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-444950926", "createdAt": "2020-07-08T16:47:43Z", "commit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0Nzo0M1rOGuwtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1NzowOVrOGuxEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NTY3Mw==", "bodyText": "Remove commented out code", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451685673", "createdAt": "2020-07-08T16:47:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -15,21 +14,18 @@\n import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.mqtt.MqttClient;\n+import com.aws.iot.evergreen.mqtt.WrapperMqttClientConnection;\n import com.aws.iot.evergreen.util.Coerce;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n-import software.amazon.awssdk.crt.CRT;\n-import software.amazon.awssdk.crt.io.ClientBootstrap;\n-import software.amazon.awssdk.crt.io.EventLoopGroup;\n-import software.amazon.awssdk.crt.io.HostResolver;\n-import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+//import software.amazon.awssdk.crt.CRT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NjUxNw==", "bodyText": "I don't think you really need this comment at all. If you want to keep it, I'd recommend just saying that this method isn't needed in this use case.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451686517", "createdAt": "2020-07-08T16:49:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -119,16 +111,33 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private MqttClient mqttClient;\n+\n     @Setter\n     @Inject\n     @Named(DEPLOYMENTS_QUEUE)\n     private LinkedBlockingQueue<Deployment> deploymentsQueue;\n \n-    private final AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n-    private final AtomicBoolean postInjectInProgress = new AtomicBoolean(false);\n-\n     private IotJobsClient iotJobsClient;\n-    private MqttClientConnection connection;\n+    private WrapperMqttClientConnection connection;\n+\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+            // Even though it would do nothing here, but this method could not be removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzI5NQ==", "bodyText": "Should not be public", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451687295", "createdAt": "2020-07-08T16:50:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -52,6 +52,7 @@\n     @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n     private MqttClientConnection connection;\n     private final AtomicBoolean currentlyConnected = new AtomicBoolean();\n+    public CallbackEventManager callbackEventManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzcwOA==", "bodyText": "Why are you doing this? The callbacks do not belong to these clients, the callbacks are global.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451687708", "createdAt": "2020-07-08T16:50:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -131,7 +134,10 @@ private synchronized boolean connect() throws ExecutionException, InterruptedExc\n         // Always use the builder provider here so that the builder is updated with whatever\n         // the latest device config is\n         try (AwsIotMqttConnectionBuilder builder = builderProvider.get()) {\n-            builder.withConnectionEventCallbacks(connectionEventCallback);\n+            // To remove the customized callbacks that belongs to other AwsIotMqttClient.\n+            callbackEventManager.customizedCallbackEvents.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODU3MQ==", "bodyText": "This must not be a field. It need to be a parameter of the callback.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451688571", "createdAt": "2020-07-08T16:52:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> customizedCallbackEvents = new HashSet<>();\n+    @NonNull AtomicBoolean hasCallBacked;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClients\n+     *  and each AwsIotMqttClients may have multiple callback events.\n+     * @param curSessionPresent is specific for eacg AwsIotMqttClient controlled by the MqttClient.\n+     *                          If false, mqtt Client do the callback actions. Otherwise, do nothing.\n+     */\n+    public synchronized void runOnConnectionResumed(boolean curSessionPresent) {\n+        setSessionPresent(curSessionPresent);\n+        // This type of callback would only be triggered once by one of the AwsIotMqttClient.\n+        for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n+            if (!hasCallBacked.get()) {\n+                callback.onConnectionResumed(sessionPresent);\n+            }\n+        }\n+        // If all the one-time callbackEvents has been finished, hasCallbacked should be set to true.\n+        hasCallBacked.set(true);\n+\n+        // This type of callback is specific for each AwsIotMqttClient.\n+        for (MqttClientConnectionEvents callback : customizedCallbackEvents) {\n+            callback.onConnectionResumed(sessionPresent);\n+        }\n+    }\n+\n+    /**\n+     * To run method of OnConnectionInterrupted if the connections are dropped.\n+     * @param errorCode would shared by all the callbacks.\n+     */\n+    public synchronized void runOnConnectionInterrupted(int errorCode) {\n+        hasCallBacked.set(false);\n+        for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n+            callback.onConnectionInterrupted(errorCode);\n+        }\n+        for (MqttClientConnectionEvents callback : customizedCallbackEvents) {\n+            callback.onConnectionInterrupted(errorCode);\n+        }\n+    }\n+\n+    /**\n+     * To set up sessionPresent.\n+     * @param sessionPresent is set up based on the AwsIotMqttClient\n+     */\n+    public synchronized void setSessionPresent(boolean sessionPresent) {\n+        this.sessionPresent = sessionPresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4OTQxOQ==", "bodyText": "The way to proper use this is to use compare And Set. You want to compare to false and set to true only if it was false.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451689419", "createdAt": "2020-07-08T16:53:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> customizedCallbackEvents = new HashSet<>();\n+    @NonNull AtomicBoolean hasCallBacked;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClients\n+     *  and each AwsIotMqttClients may have multiple callback events.\n+     * @param curSessionPresent is specific for eacg AwsIotMqttClient controlled by the MqttClient.\n+     *                          If false, mqtt Client do the callback actions. Otherwise, do nothing.\n+     */\n+    public synchronized void runOnConnectionResumed(boolean curSessionPresent) {\n+        setSessionPresent(curSessionPresent);\n+        // This type of callback would only be triggered once by one of the AwsIotMqttClient.\n+        for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n+            if (!hasCallBacked.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4OTYxMw==", "bodyText": "Now that you're using atomic boolean, these don't need to be synchronized.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451689613", "createdAt": "2020-07-08T16:54:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> customizedCallbackEvents = new HashSet<>();\n+    @NonNull AtomicBoolean hasCallBacked;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClients\n+     *  and each AwsIotMqttClients may have multiple callback events.\n+     * @param curSessionPresent is specific for eacg AwsIotMqttClient controlled by the MqttClient.\n+     *                          If false, mqtt Client do the callback actions. Otherwise, do nothing.\n+     */\n+    public synchronized void runOnConnectionResumed(boolean curSessionPresent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4OTc1OA==", "bodyText": "All these fields should be private.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451689758", "createdAt": "2020-07-08T16:54:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MDY4NA==", "bodyText": "This is not what I would do. Go back to what you had before. Keep the callbacks as normal in the aws IoT client and then call this method in the callback manager from the callback defined in the IoT client.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451690684", "createdAt": "2020-07-08T16:55:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import lombok.Builder;\n+import lombok.NonNull;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Builder\n+public class CallbackEventManager {\n+    boolean sessionPresent;\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n+    @Builder.Default\n+    Set<MqttClientConnectionEvents> customizedCallbackEvents = new HashSet<>();\n+    @NonNull AtomicBoolean hasCallBacked;\n+\n+    /**\n+     *  A MqttClient may control multiple AwsIotMqttClients\n+     *  and each AwsIotMqttClients may have multiple callback events.\n+     * @param curSessionPresent is specific for eacg AwsIotMqttClient controlled by the MqttClient.\n+     *                          If false, mqtt Client do the callback actions. Otherwise, do nothing.\n+     */\n+    public synchronized void runOnConnectionResumed(boolean curSessionPresent) {\n+        setSessionPresent(curSessionPresent);\n+        // This type of callback would only be triggered once by one of the AwsIotMqttClient.\n+        for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n+            if (!hasCallBacked.get()) {\n+                callback.onConnectionResumed(sessionPresent);\n+            }\n+        }\n+        // If all the one-time callbackEvents has been finished, hasCallbacked should be set to true.\n+        hasCallBacked.set(true);\n+\n+        // This type of callback is specific for each AwsIotMqttClient.\n+        for (MqttClientConnectionEvents callback : customizedCallbackEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MTU1OQ==", "bodyText": "A builder is really unnecessary. You can just create the atomic boolean in the field declaration.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451691559", "createdAt": "2020-07-08T16:57:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/MqttClient.java", "diffHunk": "@@ -81,6 +84,10 @@\n     private final HostResolver hostResolver;\n     private final ClientBootstrap clientBootstrap;\n \n+    public AtomicBoolean hasCallbacked = new AtomicBoolean(false);\n+    public CallbackEventManager callbackEventManager =\n+            CallbackEventManager.builder().hasCallBacked(hasCallbacked).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTU4OTg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-444958984", "createdAt": "2020-07-08T16:58:03Z", "commit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1ODowNFrOGuxGXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1ODowNFrOGuxGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MjEyNA==", "bodyText": "No * imports. Please use the intellij.xml file in the code style directory to apply our coding style to your intellij environment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451692124", "createdAt": "2020-07-08T16:58:04Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -18,11 +18,7 @@\n import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n import com.aws.iot.evergreen.logging.impl.Slf4jLogAdapter;\n import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Tag;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTYwNTI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-444960525", "createdAt": "2020-07-08T17:00:04Z", "commit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzowMDowNFrOGuxLKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzowMDowNFrOGuxLKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MzM1Mg==", "bodyText": "I wouldn't do it this way, instead go back to how you had it before and just have the callback defined in this class call the callback manager.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451693352", "createdAt": "2020-07-08T17:00:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -131,7 +134,10 @@ private synchronized boolean connect() throws ExecutionException, InterruptedExc\n         // Always use the builder provider here so that the builder is updated with whatever\n         // the latest device config is\n         try (AwsIotMqttConnectionBuilder builder = builderProvider.get()) {\n-            builder.withConnectionEventCallbacks(connectionEventCallback);\n+            // To remove the customized callbacks that belongs to other AwsIotMqttClient.\n+            callbackEventManager.customizedCallbackEvents.clear();\n+            callbackEventManager.addToCallbackEvents(false, connectionEventCallback);\n+            builder.withConnectionEventCallbacks(callbackEventManager.getCallbackEvents());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTYxMjI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-444961227", "createdAt": "2020-07-08T17:00:58Z", "commit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzowMDo1OVrOGuxNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzowMDo1OVrOGuxNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5Mzg5OA==", "bodyText": "Rename this to add because it isn't setting but adding.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451693898", "createdAt": "2020-07-08T17:00:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/MqttClient.java", "diffHunk": "@@ -352,4 +359,8 @@ public synchronized void close() {\n         hostResolver.close();\n         eventLoopGroup.close();\n     }\n+\n+    public void setMqttEventCallback(MqttClientConnectionEvents callbacks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53877e8bf0ca8309500cec2cfb91270b823fedb"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTQ4MDM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-445148034", "createdAt": "2020-07-08T21:39:31Z", "commit": {"oid": "c244be16f9f28b426b4ab8eaf33a80bd1f5ef937"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozOTozMVrOGu6KCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozOTozMVrOGu6KCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MDUyMA==", "bodyText": "this check needs to go outside of the for loop, otherwise only the first one will be called, which isn't correct.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451840520", "createdAt": "2020-07-08T21:39:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -1,98 +1,47 @@\n package com.aws.iot.evergreen.mqtt;\n \n-import lombok.Builder;\n-import lombok.NonNull;\n import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n \n import java.util.HashSet;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-@Builder\n public class CallbackEventManager {\n-    boolean sessionPresent;\n-    @Builder.Default\n-    Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n-    @Builder.Default\n-    Set<MqttClientConnectionEvents> customizedCallbackEvents = new HashSet<>();\n-    @NonNull AtomicBoolean hasCallBacked;\n+    private final Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n+    private final AtomicBoolean hasCallBacked = new AtomicBoolean(false);\n \n     /**\n      *  A MqttClient may control multiple AwsIotMqttClients\n      *  and each AwsIotMqttClients may have multiple callback events.\n-     * @param curSessionPresent is specific for eacg AwsIotMqttClient controlled by the MqttClient.\n+     * @param curSessionPresent is specific for each AwsIotMqttClient controlled by the MqttClient.\n      *                          If false, mqtt Client do the callback actions. Otherwise, do nothing.\n      */\n-    public synchronized void runOnConnectionResumed(boolean curSessionPresent) {\n-        setSessionPresent(curSessionPresent);\n+    public void runOnConnectionResumed(boolean curSessionPresent) {\n         // This type of callback would only be triggered once by one of the AwsIotMqttClient.\n         for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n-            if (!hasCallBacked.get()) {\n-                callback.onConnectionResumed(sessionPresent);\n+            if (!hasCallBacked.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244be16f9f28b426b4ab8eaf33a80bd1f5ef937"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTQ4MzE2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-445148316", "createdAt": "2020-07-08T21:40:03Z", "commit": {"oid": "c244be16f9f28b426b4ab8eaf33a80bd1f5ef937"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0MDowM1rOGu6K9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0MDowM1rOGu6K9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MDc1OA==", "bodyText": "same here, this check needs to go outside of the for loop so that it calls all of the callbacks", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r451840758", "createdAt": "2020-07-08T21:40:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -1,98 +1,47 @@\n package com.aws.iot.evergreen.mqtt;\n \n-import lombok.Builder;\n-import lombok.NonNull;\n import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n \n import java.util.HashSet;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-@Builder\n public class CallbackEventManager {\n-    boolean sessionPresent;\n-    @Builder.Default\n-    Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n-    @Builder.Default\n-    Set<MqttClientConnectionEvents> customizedCallbackEvents = new HashSet<>();\n-    @NonNull AtomicBoolean hasCallBacked;\n+    private final Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();\n+    private final AtomicBoolean hasCallBacked = new AtomicBoolean(false);\n \n     /**\n      *  A MqttClient may control multiple AwsIotMqttClients\n      *  and each AwsIotMqttClients may have multiple callback events.\n-     * @param curSessionPresent is specific for eacg AwsIotMqttClient controlled by the MqttClient.\n+     * @param curSessionPresent is specific for each AwsIotMqttClient controlled by the MqttClient.\n      *                          If false, mqtt Client do the callback actions. Otherwise, do nothing.\n      */\n-    public synchronized void runOnConnectionResumed(boolean curSessionPresent) {\n-        setSessionPresent(curSessionPresent);\n+    public void runOnConnectionResumed(boolean curSessionPresent) {\n         // This type of callback would only be triggered once by one of the AwsIotMqttClient.\n         for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n-            if (!hasCallBacked.get()) {\n-                callback.onConnectionResumed(sessionPresent);\n+            if (!hasCallBacked.compareAndSet(false, true)) {\n+                callback.onConnectionResumed(curSessionPresent);\n             }\n         }\n-        // If all the one-time callbackEvents has been finished, hasCallbacked should be set to true.\n-        hasCallBacked.set(true);\n-\n-        // This type of callback is specific for each AwsIotMqttClient.\n-        for (MqttClientConnectionEvents callback : customizedCallbackEvents) {\n-            callback.onConnectionResumed(sessionPresent);\n-        }\n     }\n \n     /**\n      * To run method of OnConnectionInterrupted if the connections are dropped.\n      * @param errorCode would shared by all the callbacks.\n      */\n-    public synchronized void runOnConnectionInterrupted(int errorCode) {\n-        hasCallBacked.set(false);\n+    public void runOnConnectionInterrupted(int errorCode) {\n         for (MqttClientConnectionEvents callback : oneTimeCallbackEvents) {\n-            callback.onConnectionInterrupted(errorCode);\n-        }\n-        for (MqttClientConnectionEvents callback : customizedCallbackEvents) {\n-            callback.onConnectionInterrupted(errorCode);\n+            if (!hasCallBacked.compareAndSet(true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c244be16f9f28b426b4ab8eaf33a80bd1f5ef937"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzYxNTE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-447361518", "createdAt": "2020-07-13T15:31:09Z", "commit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMToxMFrOGwt3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozNDo1N1rOGwuBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNjI3MA==", "bodyText": "what warning is being suppressed? Get rid of the warning if we can.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453736270", "createdAt": "2020-07-13T15:31:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -119,16 +110,32 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private MqttClient mqttClient;\n+\n     @Setter\n     @Inject\n     @Named(DEPLOYMENTS_QUEUE)\n     private LinkedBlockingQueue<Deployment> deploymentsQueue;\n \n-    private final AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n-    private final AtomicBoolean postInjectInProgress = new AtomicBoolean(false);\n-\n     private IotJobsClient iotJobsClient;\n-    private MqttClientConnection connection;\n+    private WrapperMqttClientConnection connection;\n+\n+    @Getter\n+    public MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+        }\n+\n+        @Override\n+        @SuppressFBWarnings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNzQ3OA==", "bodyText": "Can you please move this log line up to the top of this method, so that the first thing it does is log.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453737478", "createdAt": "2020-07-13T15:32:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -73,6 +76,8 @@ public void onConnectionResumed(boolean sessionPresent) {\n             if (!sessionPresent) {\n                 resubscribe();\n             }\n+            // To run the callbacks shared by the different AwsIotMqttClient.\n+            callbackEventManager.runOnConnectionResumed(sessionPresent);\n             logger.atInfo().kv(\"sessionPresent\", sessionPresent).log(\"Connection resumed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNzY2MQ==", "bodyText": "get rid of this comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453737661", "createdAt": "2020-07-13T15:33:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -131,6 +138,7 @@ private synchronized boolean connect() throws ExecutionException, InterruptedExc\n         // Always use the builder provider here so that the builder is updated with whatever\n         // the latest device config is\n         try (AwsIotMqttConnectionBuilder builder = builderProvider.get()) {\n+            // To remove the customized callbacks that belongs to other AwsIotMqttClient.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNzg1Mw==", "bodyText": "change to CopyOnWriteSet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453737853", "createdAt": "2020-07-13T15:33:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/CallbackEventManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.aws.iot.evergreen.mqtt;\n+\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class CallbackEventManager {\n+    private final Set<MqttClientConnectionEvents> oneTimeCallbackEvents = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODg1OQ==", "bodyText": "might want to use Inject here instead of directly creating it so tat we can mock it easier. Up to you.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453738859", "createdAt": "2020-07-13T15:34:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/MqttClient.java", "diffHunk": "@@ -81,6 +83,8 @@\n     private final HostResolver hostResolver;\n     private final ClientBootstrap clientBootstrap;\n \n+    public CallbackEventManager callbackEventManager = new CallbackEventManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDE5NTEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-447419512", "createdAt": "2020-07-13T16:40:51Z", "commit": {"oid": "cc4f1d6010a92e05ee55e83e384cc13248be1e16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MDo1MVrOGwwvdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MDo1MVrOGwwvdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4MzQxMg==", "bodyText": "does this need a getter?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453783412", "createdAt": "2020-07-13T16:40:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -52,7 +52,9 @@\n     @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n     private MqttClientConnection connection;\n     private final AtomicBoolean currentlyConnected = new AtomicBoolean();\n+    private final CallbackEventManager callbackEventManager;\n \n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4f1d6010a92e05ee55e83e384cc13248be1e16"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDIwNDM3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-447420437", "createdAt": "2020-07-13T16:42:03Z", "commit": {"oid": "cc4f1d6010a92e05ee55e83e384cc13248be1e16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MjowM1rOGwwyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MjowM1rOGwwyUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NDE0Ng==", "bodyText": "add the copyright header to your IntelliJ settings.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453784146", "createdAt": "2020-07-13T16:42:03Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClientTest.java", "diffHunk": "@@ -1,85 +1,113 @@\n-/*\n- * Copyright Amazon.com Inc. or its affiliates.\n- * SPDX-License-Identifier: Apache-2.0\n- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4f1d6010a92e05ee55e83e384cc13248be1e16"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDIwOTIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-447420920", "createdAt": "2020-07-13T16:42:39Z", "commit": {"oid": "cc4f1d6010a92e05ee55e83e384cc13248be1e16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MjozOVrOGwwzuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MjozOVrOGwwzuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NDUwNw==", "bodyText": "Do not remove these extensions. Without them, the test will not work.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r453784507", "createdAt": "2020-07-13T16:42:39Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClientTest.java", "diffHunk": "@@ -1,85 +1,113 @@\n-/*\n- * Copyright Amazon.com Inc. or its affiliates.\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n package com.aws.iot.evergreen.mqtt;\n \n import com.aws.iot.evergreen.config.Topics;\n-import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n import software.amazon.awssdk.crt.mqtt.MqttClientConnectionEvents;\n-import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n import software.amazon.awssdk.iot.AwsIotMqttConnectionBuilder;\n \n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.TimeoutException;\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n \n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n-@SuppressWarnings(\"PMD.CloseResource\")\n-@ExtendWith({EGExtension.class, MockitoExtension.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc4f1d6010a92e05ee55e83e384cc13248be1e16"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Njc1ODky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-447675892", "createdAt": "2020-07-13T23:21:05Z", "commit": {"oid": "d9c35137f49402aa6702d11e36378ee798a64df6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzoyMTowNlrOGw-DjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzoyMToxOFrOGw-DyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwMTU0OA==", "bodyText": "can you move this even before the resubscribe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r454001548", "createdAt": "2020-07-13T23:21:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -74,6 +78,8 @@ public void onConnectionResumed(boolean sessionPresent) {\n                 resubscribe();\n             }\n             logger.atInfo().kv(\"sessionPresent\", sessionPresent).log(\"Connection resumed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9c35137f49402aa6702d11e36378ee798a64df6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwMTYwOA==", "bodyText": "still applies.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r454001608", "createdAt": "2020-07-13T23:21:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/mqtt/AwsIotMqttClient.java", "diffHunk": "@@ -131,6 +138,7 @@ private synchronized boolean connect() throws ExecutionException, InterruptedExc\n         // Always use the builder provider here so that the builder is updated with whatever\n         // the latest device config is\n         try (AwsIotMqttConnectionBuilder builder = builderProvider.get()) {\n+            // To remove the customized callbacks that belongs to other AwsIotMqttClient.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNzY2MQ=="}, "originalCommit": {"oid": "07b3782f554d5fa9afbba1294a14b23add110f53"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzIyNTA3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-448322507", "createdAt": "2020-07-14T17:37:35Z", "commit": {"oid": "6fdeb451d0c5a9649a688c25a51b3dfc9c6f14f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozNzozNVrOGxeMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozNzozNVrOGxeMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyODAxMQ==", "bodyText": "what is this file doing here? I think you did a bad merge.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r454528011", "createdAt": "2020-07-14T17:37:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialsProviderBuilder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fdeb451d0c5a9649a688c25a51b3dfc9c6f14f8"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30b6a622fd5f62cf869c7ebb6b5181fbfdf7438e", "author": {"user": {"login": "awszztt", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/30b6a622fd5f62cf869c7ebb6b5181fbfdf7438e", "committedDate": "2020-07-14T17:59:28Z", "message": "ignore the AWS_ERROR_INVALID_ARGUMENT(33)"}, "afterCommit": {"oid": "cc0a231b4e26185716cd190d3f055b8edfe637f9", "author": {"user": {"login": "awszztt", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cc0a231b4e26185716cd190d3f055b8edfe637f9", "committedDate": "2020-07-14T21:49:03Z", "message": "mqtt replacement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDkzODQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-448493846", "createdAt": "2020-07-14T21:54:30Z", "commit": {"oid": "cc0a231b4e26185716cd190d3f055b8edfe637f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1NDozMVrOGxmvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1NDozMVrOGxmvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODEwNg==", "bodyText": "this comment doesn't seem very necessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#discussion_r454668106", "createdAt": "2020-07-14T21:54:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -237,107 +226,41 @@ public void onConnectionResumed(boolean sessionPresent) {\n      *\n      */\n     IotJobsHelper(DeviceConfiguration deviceConfiguration,\n-                  AWSIotMqttConnectionFactory awsIotMqttConnectionFactory,\n                   IotJobsClientFactory iotJobsClientFactory,\n                   LinkedBlockingQueue<Deployment> deploymentsQueue,\n                   DeploymentStatusKeeper deploymentStatusKeeper,\n                   ExecutorService executorService,\n-                  Kernel kernel) {\n+                  Kernel kernel,\n+                  WrapperMqttConnectionFactory wrapperMqttConnectionFactory,\n+                  MqttClient mqttClient) {\n         this.deviceConfiguration = deviceConfiguration;\n-        this.awsIotMqttConnectionFactory = awsIotMqttConnectionFactory;\n         this.iotJobsClientFactory = iotJobsClientFactory;\n         this.deploymentsQueue = deploymentsQueue;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n         this.executorService = executorService;\n         this.kernel = kernel;\n+        this.wrapperMqttConnectionFactory = wrapperMqttConnectionFactory;\n+        this.mqttClient = mqttClient;\n     }\n \n     @Override\n     @SuppressFBWarnings\n     public void postInject() {\n-\n-        //TODO: once connectToAWSIot and closeConnection is removed from post inject\n-        // this check should be removed\n-        if (postInjectInProgress.get()) {\n-            return;\n-        }\n-        postInjectInProgress.set(true);\n-\n-        //TODO: remove establishing mqtt connection logic when when MQTT proxy is implemented.\n-        executorService.submit(() -> {\n-            try {\n-                connectToAWSIot();\n-            } catch (InterruptedException e) {\n-               //TODO: re-evaluate the retry strategy,\n-               // re-connection attempts are made only for ConnectionUnavailableException\n-               logger.error(\"Failed to connect to IoT cloud\");\n-            }\n-        });\n-\n-        //TODO: remove closing mqtt connection logic from iot jobs handler when MQTT proxy is implemented.\n-        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n-            try {\n-                closeConnection();\n-            } catch (ExecutionException | InterruptedException e) {\n-                logger.atError().log(\"Error while closing IoT client\", e);\n-            }\n-        }));\n-\n+        // Mqtt Client would automatically connect to AWS Iot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0a231b4e26185716cd190d3f055b8edfe637f9"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDk1OTYz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-448495963", "createdAt": "2020-07-14T21:58:37Z", "commit": {"oid": "cc0a231b4e26185716cd190d3f055b8edfe637f9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d9bdae55b8c5be7f96a140d15229bd43236eed", "author": {"user": {"login": "awszztt", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a6d9bdae55b8c5be7f96a140d15229bd43236eed", "committedDate": "2020-07-15T22:07:12Z", "message": "mqtt replacement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5783e857b3e28082f0dc002e0c406b8f2251bc3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b5783e857b3e28082f0dc002e0c406b8f2251bc3", "committedDate": "2020-07-15T22:07:13Z", "message": "Convert MqttClient to use futures instead of being sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aba08c3a292a99e1f213b5d59d13fab9c7dcb29", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7aba08c3a292a99e1f213b5d59d13fab9c7dcb29", "committedDate": "2020-07-15T22:07:13Z", "message": "Only publish with completable future"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f227e687bcb0eae85affa2ef3ed3f4d6d21c8b05", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f227e687bcb0eae85affa2ef3ed3f4d6d21c8b05", "committedDate": "2020-07-15T22:06:18Z", "message": "Merge branch 'master' into add_new_mqqt_client"}, "afterCommit": {"oid": "146acbae851a412c406d6cfc1e594a56d6b19131", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/146acbae851a412c406d6cfc1e594a56d6b19131", "committedDate": "2020-07-15T22:07:13Z", "message": "Comment out broken tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "146acbae851a412c406d6cfc1e594a56d6b19131", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/146acbae851a412c406d6cfc1e594a56d6b19131", "committedDate": "2020-07-15T22:07:13Z", "message": "Comment out broken tests"}, "afterCommit": {"oid": "b7dbd656a338ccd4eb01977cc9423eb8679fc7e9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b7dbd656a338ccd4eb01977cc9423eb8679fc7e9", "committedDate": "2020-07-15T22:10:15Z", "message": "Comment out broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "139c1e5a5f6f5e38ed808fcada96e82458e36173", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/139c1e5a5f6f5e38ed808fcada96e82458e36173", "committedDate": "2020-07-15T22:20:38Z", "message": "Comment out broken tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7dbd656a338ccd4eb01977cc9423eb8679fc7e9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b7dbd656a338ccd4eb01977cc9423eb8679fc7e9", "committedDate": "2020-07-15T22:10:15Z", "message": "Comment out broken tests"}, "afterCommit": {"oid": "139c1e5a5f6f5e38ed808fcada96e82458e36173", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/139c1e5a5f6f5e38ed808fcada96e82458e36173", "committedDate": "2020-07-15T22:20:38Z", "message": "Comment out broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19fcaaf93811c300b743f1ce1a8068c016ccf0ef", "author": {"user": {"login": "awszztt", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/19fcaaf93811c300b743f1ce1a8068c016ccf0ef", "committedDate": "2020-07-16T01:26:10Z", "message": "Temp: remove GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69be11a5eb71982b7d9a666bbb6d3b918c6d0cdb", "author": {"user": {"login": "awszztt", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/69be11a5eb71982b7d9a666bbb6d3b918c6d0cdb", "committedDate": "2020-07-16T03:23:54Z", "message": "Revert \"Temp: remove GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned for testing\"\n\nThis reverts commit 19fcaaf93811c300b743f1ce1a8068c016ccf0ef."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c925fb5d1ac8184a3b085249b571a1f5e396d6", "author": {"user": {"login": "awszztt", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/73c925fb5d1ac8184a3b085249b571a1f5e396d6", "committedDate": "2020-07-16T03:53:24Z", "message": "Remove unnecessary variable and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16009678debb2c05518529d873503737b759f591", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/16009678debb2c05518529d873503737b759f591", "committedDate": "2020-07-16T06:19:47Z", "message": "Merge branch 'master' into add_new_mqqt_client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTU0ODM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-449554834", "createdAt": "2020-07-16T06:57:30Z", "commit": {"oid": "16009678debb2c05518529d873503737b759f591"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDA2NDA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/290#pullrequestreview-450006406", "createdAt": "2020-07-16T16:16:09Z", "commit": {"oid": "16009678debb2c05518529d873503737b759f591"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89506d3b5b5545891e68fdf7fff0b306cefa9774", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/89506d3b5b5545891e68fdf7fff0b306cefa9774", "committedDate": "2020-07-21T02:45:41Z", "message": "Merge branch 'master' into add_new_mqqt_client"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2840, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}