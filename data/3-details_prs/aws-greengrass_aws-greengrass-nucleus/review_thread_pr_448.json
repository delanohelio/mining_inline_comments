{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTY0OTEy", "number": 448, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozMzoxM1rOEkv6EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozNjo1MFrOElv-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTY5MTA0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozMzoxM1rOHT3wug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjo0OToyMlrOHT4HEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5ODU4Ng==", "bodyText": "now that the endpoints are combined we should be able to remove this \"FCS_ENDPOINT\" and instead get the endpoint when we create the client, based on region and stage", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490598586", "createdAt": "2020-09-17T22:33:13Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -97,7 +98,7 @@\n  */\n @ExtendWith(EGExtension.class)\n public class BaseE2ETestCase implements AutoCloseable {\n-    private static final String FCS_ENDPOINT = \"https://bp5p2uvbx6.execute-api.us-east-1.amazonaws.com/Gamma\";\n+    private static final String FCS_ENDPOINT = \"https://evergreen-gamma.us-east-1.amazonaws.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa0d54fe587c255b4def368cfe5c1f5ce252448"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwMTIxMw==", "bodyText": "We should update the endpoint that we use and make it configurable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490601213", "createdAt": "2020-09-17T22:40:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -97,7 +98,7 @@\n  */\n @ExtendWith(EGExtension.class)\n public class BaseE2ETestCase implements AutoCloseable {\n-    private static final String FCS_ENDPOINT = \"https://bp5p2uvbx6.execute-api.us-east-1.amazonaws.com/Gamma\";\n+    private static final String FCS_ENDPOINT = \"https://evergreen-gamma.us-east-1.amazonaws.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5ODU4Ng=="}, "originalCommit": {"oid": "8fa0d54fe587c255b4def368cfe5c1f5ce252448"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwMjg2NA==", "bodyText": "I thought this is the updated endpoint, took it from the document which Paul shared. Configurable from where?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490602864", "createdAt": "2020-09-17T22:44:45Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -97,7 +98,7 @@\n  */\n @ExtendWith(EGExtension.class)\n public class BaseE2ETestCase implements AutoCloseable {\n-    private static final String FCS_ENDPOINT = \"https://bp5p2uvbx6.execute-api.us-east-1.amazonaws.com/Gamma\";\n+    private static final String FCS_ENDPOINT = \"https://evergreen-gamma.us-east-1.amazonaws.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5ODU4Ng=="}, "originalCommit": {"oid": "8fa0d54fe587c255b4def368cfe5c1f5ce252448"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwNDMwNw==", "bodyText": "I mean to update this one: https://github.com/aws/aws-greengrass-kernel/blob/5733d3c514f677ecf50bc7e00ba828368a7d22bc/src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java#L72\nAnd make that configurable through the DeviceConfiguration so that we can override it in the config.yaml during UATs. We definitely need this once the default is prod, but we still need to test in gamma.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490604307", "createdAt": "2020-09-17T22:49:22Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -97,7 +98,7 @@\n  */\n @ExtendWith(EGExtension.class)\n public class BaseE2ETestCase implements AutoCloseable {\n-    private static final String FCS_ENDPOINT = \"https://bp5p2uvbx6.execute-api.us-east-1.amazonaws.com/Gamma\";\n+    private static final String FCS_ENDPOINT = \"https://evergreen-gamma.us-east-1.amazonaws.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5ODU4Ng=="}, "originalCommit": {"oid": "8fa0d54fe587c255b4def368cfe5c1f5ce252448"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTcwNjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozOTo0OVrOHT36BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozOTo0OVrOHT36BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwMDk2NQ==", "bodyText": "print the exception to stderr/stdout as well or rethrow. Otherwise it won't be clear because the logger will be going to files, but this should be user-facing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490600965", "createdAt": "2020-09-17T22:39:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -169,7 +178,13 @@ public EvergreenSetup(PrintStream outStream, PrintStream errStream, String... se\n     @SuppressWarnings(\n             {\"PMD.NullAssignment\", \"PMD.AvoidCatchingThrowable\", \"PMD.DoNotCallSystemExit\", \"PMD.SystemPrintln\"})\n     public static void main(String[] args) {\n-        EvergreenSetup evergreenSetup = new EvergreenSetup(System.out, System.err, args);\n+        EvergreenSetup evergreenSetup = null;\n+        try {\n+            evergreenSetup = new EvergreenSetup(System.out, System.err, args);\n+        } catch (URISyntaxException | InvalidEnvironmentStageException e) {\n+            logger.atError().setCause(e).log(\"Error while initializing Evergreen setup\");\n+            System.exit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c9bbc95e53eb0113a339c2017445102da67a99"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgwNjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyNTo0NVrOHT4zNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDowMTo1NFrOHT5b3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNTYwNA==", "bodyText": "why?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490615604", "createdAt": "2020-09-17T23:25:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -169,7 +180,8 @@ public EvergreenSetup(PrintStream outStream, PrintStream errStream, String... se\n     @SuppressWarnings(\n             {\"PMD.NullAssignment\", \"PMD.AvoidCatchingThrowable\", \"PMD.DoNotCallSystemExit\", \"PMD.SystemPrintln\"})\n     public static void main(String[] args) {\n-        EvergreenSetup evergreenSetup = new EvergreenSetup(System.out, System.err, args);\n+        EvergreenSetup evergreenSetup = null;\n+        evergreenSetup = new EvergreenSetup(System.out, System.err, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f823bdc9c289c3192dd5b55744c0975b29a65f22"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNjAxMw==", "bodyText": "Removed a try block as I refactored my own code, forgot to revert", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490626013", "createdAt": "2020-09-18T00:01:54Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -169,7 +180,8 @@ public EvergreenSetup(PrintStream outStream, PrintStream errStream, String... se\n     @SuppressWarnings(\n             {\"PMD.NullAssignment\", \"PMD.AvoidCatchingThrowable\", \"PMD.DoNotCallSystemExit\", \"PMD.SystemPrintln\"})\n     public static void main(String[] args) {\n-        EvergreenSetup evergreenSetup = new EvergreenSetup(System.out, System.err, args);\n+        EvergreenSetup evergreenSetup = null;\n+        evergreenSetup = new EvergreenSetup(System.out, System.err, args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNTYwNA=="}, "originalCommit": {"oid": "f823bdc9c289c3192dd5b55744c0975b29a65f22"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgwNzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyNjozM1rOHT40GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0MDowN1rOHT__rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNTgzMw==", "bodyText": "make package-private since it is only in tests?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490615833", "createdAt": "2020-09-17T23:26:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -110,7 +118,8 @@\n     private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n     private final String[] setupArgs;\n     private final List<String> kernelArgs = new ArrayList<>();\n-    private final DeviceProvisioningHelper deviceProvisioningHelper;\n+    @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f823bdc9c289c3192dd5b55744c0975b29a65f22"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzQ4NA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490733484", "createdAt": "2020-09-18T06:40:07Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -110,7 +118,8 @@\n     private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n     private final String[] setupArgs;\n     private final List<String> kernelArgs = new ArrayList<>();\n-    private final DeviceProvisioningHelper deviceProvisioningHelper;\n+    @Setter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNTgzMw=="}, "originalCommit": {"oid": "f823bdc9c289c3192dd5b55744c0975b29a65f22"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTkxMzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDoyMToxOFrOHT5xZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjoyNzowNlrOHT7w0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMTUyNw==", "bodyText": "This probably isn't accurate for prod.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490631527", "createdAt": "2020-09-18T00:21:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -64,26 +70,42 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n+\n+    //evergreen-<stage>.<region>.amazonaws.com\n+    public static final String GREENGRASS_ENDPOINT_FORMAT = \"evergreen-%s.%s.amazonaws.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afc20de873c76e6ead149a1668018126b48365f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NDE0NQ==", "bodyText": "Right. Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490664145", "createdAt": "2020-09-18T02:27:06Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -64,26 +70,42 @@\n  */\n @Getter\n public class DeviceProvisioningHelper {\n+\n+    //evergreen-<stage>.<region>.amazonaws.com\n+    public static final String GREENGRASS_ENDPOINT_FORMAT = \"evergreen-%s.%s.amazonaws.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMTUyNw=="}, "originalCommit": {"oid": "8afc20de873c76e6ead149a1668018126b48365f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDE1NzQ5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MDo1OFrOHT7-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0MDoyMVrOHT__-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzYzNg==", "bodyText": "These 2 FCS and GCS clients can be the same now that we have a shared endpoint.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490667636", "createdAt": "2020-09-18T02:40:58Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -145,13 +148,25 @@\n \n     protected Kernel kernel;\n \n-    protected static final IotClient iotClient = IotSdkClientFactory.getIotClient(GAMMA_REGION.toString(),\n-            new HashSet<>(Arrays.asList(InvalidRequestException.class, DeleteConflictException.class)));\n+    protected static IotClient iotClient;\n+\n+    static {\n+        try {\n+            iotClient = IotSdkClientFactory.getIotClient(GAMMA_REGION.toString(),\n+                        envStage,\n+                        new HashSet<>(Arrays.asList(InvalidRequestException.class, DeleteConflictException.class)));\n+        } catch (URISyntaxException e) {\n+            logger.atError().setCause(e).log(\"Caught exception while initializing Iot client\");\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    ;\n     private static AWSEvergreen fcsClient;\n     protected static final AWSEvergreen cmsClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             DeviceProvisioningHelper.GCS_ENDPOINT,\n+                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n                                                                                              GAMMA_REGION.toString()))\n                                                                              .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ba9864a2fab731a766d6b0bae0cb8fd806a6c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzU2Mw==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490733563", "createdAt": "2020-09-18T06:40:21Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -145,13 +148,25 @@\n \n     protected Kernel kernel;\n \n-    protected static final IotClient iotClient = IotSdkClientFactory.getIotClient(GAMMA_REGION.toString(),\n-            new HashSet<>(Arrays.asList(InvalidRequestException.class, DeleteConflictException.class)));\n+    protected static IotClient iotClient;\n+\n+    static {\n+        try {\n+            iotClient = IotSdkClientFactory.getIotClient(GAMMA_REGION.toString(),\n+                        envStage,\n+                        new HashSet<>(Arrays.asList(InvalidRequestException.class, DeleteConflictException.class)));\n+        } catch (URISyntaxException e) {\n+            logger.atError().setCause(e).log(\"Caught exception while initializing Iot client\");\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    ;\n     private static AWSEvergreen fcsClient;\n     protected static final AWSEvergreen cmsClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             DeviceProvisioningHelper.GCS_ENDPOINT,\n+                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n                                                                                              GAMMA_REGION.toString()))\n                                                                              .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NzYzNg=="}, "originalCommit": {"oid": "ff2ba9864a2fab731a766d6b0bae0cb8fd806a6c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDE1ODI4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MTozNFrOHT7-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MTozNFrOHT7-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2Nzc3NA==", "bodyText": "this can be removed, just get the gcs client", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490667774", "createdAt": "2020-09-18T02:41:34Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -340,7 +357,8 @@ private static void cleanUpTestComponentArtifactsFromS3() {\n     private static synchronized AWSEvergreen getFcsClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ba9864a2fab731a766d6b0bae0cb8fd806a6c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDE1OTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MjoyNlrOHT7_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0MjoyNlrOHT7_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2Nzk0Mw==", "bodyText": "default should be east-1 because that's all that evergreen is deployed to", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490667943", "createdAt": "2020-09-18T02:42:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -51,6 +55,8 @@\n \n     @Getter\n     private String providedConfigPathName;\n+    private String awsRegion = \"us-west-2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ba9864a2fab731a766d6b0bae0cb8fd806a6c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDE2MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0NjoxMlrOHT8Dbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjo0NjoxMlrOHT8Dbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2ODkxMQ==", "bodyText": "If the --region isn't specified, we should fallback to DeviceConfiguration.getRegion(). And if it is specified, then we should update the region in the DeviceConfiguration", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490668911", "createdAt": "2020-09-18T02:46:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -94,6 +100,14 @@ public void parseArgs(String... args) {\n                     rootAbsolutePath = getArg();\n                     Objects.requireNonNull(rootAbsolutePath, \"-r or --root requires an argument\");\n                     break;\n+                case \"--aws-region\":\n+                case \"-ar\":\n+                    awsRegion = getArg();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2ba9864a2fab731a766d6b0bae0cb8fd806a6c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYzMjEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0Njo0NlrOHUAKNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozNTo0OFrOHUUP_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNjE4Mw==", "bodyText": "does cloud prod actually work? We've only ever tested against gamma. Just wondering if the default should be gamma.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490736183", "createdAt": "2020-09-18T06:46:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -51,6 +57,8 @@\n \n     @Getter\n     private String providedConfigPathName;\n+    private String awsRegion = \"us-east-1\";\n+    private String envStage = \"prod\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NTM0MQ==", "bodyText": "It will eventually need to be prod, for all our testing we are configuring it so this should be fine", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491065341", "createdAt": "2020-09-18T16:35:48Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -51,6 +57,8 @@\n \n     @Getter\n     private String providedConfigPathName;\n+    private String awsRegion = \"us-east-1\";\n+    private String envStage = \"prod\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNjE4Mw=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYzNTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0Nzo0MFrOHUAL7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo1NTozM1rOHUU4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNjYyMw==", "bodyText": "use kernel.getContext().get(DeviceConfiguration.class) (this may be problematic to call in the constructor though)? We should be using the same device configuration object everywhere", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490736623", "createdAt": "2020-09-18T06:47:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -68,6 +76,7 @@ public static void main(String[] args) {\n \n     public KernelCommandLine(Kernel kernel) {\n         this.kernel = kernel;\n+        this.deviceConfiguration = new DeviceConfiguration(kernel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NDExOA==", "bodyText": "I think context will have the object when launch happens, but this (including parseArgs) will be hit before kernel launch.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491074118", "createdAt": "2020-09-18T16:52:41Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -68,6 +76,7 @@ public static void main(String[] args) {\n \n     public KernelCommandLine(Kernel kernel) {\n         this.kernel = kernel;\n+        this.deviceConfiguration = new DeviceConfiguration(kernel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNjYyMw=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NTY2MA==", "bodyText": "Context is created in the Kernel constructor.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491075660", "createdAt": "2020-09-18T16:55:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -68,6 +76,7 @@ public static void main(String[] args) {\n \n     public KernelCommandLine(Kernel kernel) {\n         this.kernel = kernel;\n+        this.deviceConfiguration = new DeviceConfiguration(kernel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNjYyMw=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYzNzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0ODozNFrOHUANdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0NzoyMlrOHUUn7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNzAxMw==", "bodyText": "you don't need to nullcheck. It is never allowed to be null", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r490737013", "createdAt": "2020-09-18T06:48:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -109,10 +126,18 @@ public void parseArgs(String... args) {\n         kernel.getConfig().lookup(\"system\", \"rootpath\").dflt(rootAbsolutePath)\n                 .subscribe((whatHappened, topic) -> initPaths(Coerce.toString(topic)));\n \n-        // Endpoint for Beta CMS in us-east-1\n-        // TODO: Once service is available in multiple regions, this should not be a static config and\n-        // use the region value to determine endpoint\n-        kernel.getContext().put(CONTEXT_COMPONENT_SERVICE_ENDPOINT, GCS_ENDPOINT);\n+        if (deviceConfiguration.getAWSRegion() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NjQ4Nw==", "bodyText": "This code should not rely on that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491066487", "createdAt": "2020-09-18T16:38:02Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -109,10 +126,18 @@ public void parseArgs(String... args) {\n         kernel.getConfig().lookup(\"system\", \"rootpath\").dflt(rootAbsolutePath)\n                 .subscribe((whatHappened, topic) -> initPaths(Coerce.toString(topic)));\n \n-        // Endpoint for Beta CMS in us-east-1\n-        // TODO: Once service is available in multiple regions, this should not be a static config and\n-        // use the region value to determine endpoint\n-        kernel.getContext().put(CONTEXT_COMPONENT_SERVICE_ENDPOINT, GCS_ENDPOINT);\n+        if (deviceConfiguration.getAWSRegion() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNzAxMw=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3MTQ2OA==", "bodyText": "You're getting the Topic, not the value and that topic is guaranteed to not be null. This is part of the interface of the DeviceConfiguration.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491071468", "createdAt": "2020-09-18T16:47:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -109,10 +126,18 @@ public void parseArgs(String... args) {\n         kernel.getConfig().lookup(\"system\", \"rootpath\").dflt(rootAbsolutePath)\n                 .subscribe((whatHappened, topic) -> initPaths(Coerce.toString(topic)));\n \n-        // Endpoint for Beta CMS in us-east-1\n-        // TODO: Once service is available in multiple regions, this should not be a static config and\n-        // use the region value to determine endpoint\n-        kernel.getContext().put(CONTEXT_COMPONENT_SERVICE_ENDPOINT, GCS_ENDPOINT);\n+        if (deviceConfiguration.getAWSRegion() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNzAxMw=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzAzNDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowNjoyMVrOHUXAig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTowMDo1MFrOHUYm9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMDUzOA==", "bodyText": "Do we have these 2 new throws?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491110538", "createdAt": "2020-09-18T18:06:21Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -136,12 +148,13 @@\n      * @param outStream writer to use to send text response to user\n      * @param errStream writer to use to send error response to user\n      * @param setupArgs CLI args for setup script\n+     * @throws URISyntaxException when IotEndpoint is malformed\n+     * @throws InvalidEnvironmentStageException when the environment stage configured is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMTMzOA==", "bodyText": "Also do we need to update the other constructor below?\nEvergreenSetup(PrintStream outStream, PrintStream errStream, DeviceProvisioningHelper deviceProvisioningHelper, String... setupArgs)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491111338", "createdAt": "2020-09-18T18:07:49Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -136,12 +148,13 @@\n      * @param outStream writer to use to send text response to user\n      * @param errStream writer to use to send error response to user\n      * @param setupArgs CLI args for setup script\n+     * @throws URISyntaxException when IotEndpoint is malformed\n+     * @throws InvalidEnvironmentStageException when the environment stage configured is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMDUzOA=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNjc1Ng==", "bodyText": "Not needed any longer. Removed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r491136756", "createdAt": "2020-09-18T19:00:50Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -136,12 +148,13 @@\n      * @param outStream writer to use to send text response to user\n      * @param errStream writer to use to send error response to user\n      * @param setupArgs CLI args for setup script\n+     * @throws URISyntaxException when IotEndpoint is malformed\n+     * @throws InvalidEnvironmentStageException when the environment stage configured is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMDUzOA=="}, "originalCommit": {"oid": "6db99d993142919df9d118e5cccfc7e5da8cbce4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDE4NjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozNjo1MFrOHVZYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo0MToxNFrOHVZiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODAzMQ==", "bodyText": "[No need to change]\nwhy?\nTo keep device/cloud consistency, I can add this into the common serializer instead of just device side.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r492198031", "createdAt": "2020-09-21T16:36:50Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -46,7 +47,9 @@\n         com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n         try {\n             componentRecipe =\n-                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent,\n+                    SerializerFactory.getRecipeSerializer()\n+                            .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0db1863abedaa38e896c3baf399532e7b2a741"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMDYxOA==", "bodyText": "Caused by: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"componentDependencies\" (class com.amazon.aws.iot.greengrass.component.common.ComponentRecipe$ComponentRecipeBuilder), not marked as ignorable (8 known properties: \"recipeFormatVersion\", \"manifests\", \"componentType\", \"componentName\", \"componentVersion\", \"componentDescription\", \"componentSource\", \"componentPublisher\"])\n\nIs why. Cloud broke us.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/448#discussion_r492200618", "createdAt": "2020-09-21T16:41:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -46,7 +47,9 @@\n         com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n         try {\n             componentRecipe =\n-                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent,\n+                    SerializerFactory.getRecipeSerializer()\n+                            .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5ODAzMQ=="}, "originalCommit": {"oid": "3d0db1863abedaa38e896c3baf399532e7b2a741"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 518, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}