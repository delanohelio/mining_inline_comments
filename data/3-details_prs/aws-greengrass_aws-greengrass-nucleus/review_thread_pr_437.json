{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTQ2Njcx", "number": 437, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo0NDowMlrOEjXVOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0MzoyNFrOEjZcUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE3ODgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/ComponentUpdatePolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo0NDowMlrOHRrVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjozMToxMFrOHRuPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzczMA==", "bodyText": "Why aren't we just using the SDK's model?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488297730", "createdAt": "2020-09-14T23:44:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/ComponentUpdatePolicy.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@EqualsAndHashCode\n+@ToString\n+public class ComponentUpdatePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0f310a4e8468817cabdea4913b34d80483ec15"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MzUzNg==", "bodyText": "Updated to use the enum from the sdk's model.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488343536", "createdAt": "2020-09-15T02:24:11Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/ComponentUpdatePolicy.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@EqualsAndHashCode\n+@ToString\n+public class ComponentUpdatePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzczMA=="}, "originalCommit": {"oid": "af0f310a4e8468817cabdea4913b34d80483ec15"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTUwMg==", "bodyText": "Is this class still needed if we're using the SDK model?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488345502", "createdAt": "2020-09-15T02:31:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/ComponentUpdatePolicy.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@EqualsAndHashCode\n+@ToString\n+public class ComponentUpdatePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzczMA=="}, "originalCommit": {"oid": "af0f310a4e8468817cabdea4913b34d80483ec15"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTMzMzMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTowMjowN1rOHRstsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyNDo0MFrOHRuIaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDQzNQ==", "bodyText": "It's weird that we don't use tag as key anymore but still use it here and in discardPendingUpdateAction.\nCan we have something like this?\nprivate final Map<String, Pair<DeploymentDocument, Crashable>> pendingActions = new LinkedHashMap<>();", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488320435", "createdAt": "2020-09-15T01:02:07Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -98,21 +102,27 @@ protected synchronized void runUpdateActions() {\n      * @return true if there is a pending action for specified tag\n      */\n     public boolean hasPendingUpdateAction(String tag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "533e46f2b0becabde96aca179737992e0c13ecd1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0MzY1OQ==", "bodyText": "updated to final Map<String, Pair<Long, Crashable>> pendingActions = new new LinkedHashMap<>();", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488343659", "createdAt": "2020-09-15T02:24:40Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -98,21 +102,27 @@ protected synchronized void runUpdateActions() {\n      * @return true if there is a pending action for specified tag\n      */\n     public boolean hasPendingUpdateAction(String tag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDQzNQ=="}, "originalCommit": {"oid": "533e46f2b0becabde96aca179737992e0c13ecd1"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTUwODY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjozNDo0MlrOHRuThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1NzoyMlrOHRwsTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjUwMg==", "bodyText": "nit - a precomponent event, is it 'precomponent update event'?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488346502", "createdAt": "2020-09-15T02:34:42Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -40,13 +43,18 @@\n @ImplementsService(name = \"SafeSystemUpdate\", autostart = true)\n @Singleton\n public class UpdateSystemSafelyService extends EvergreenService {\n-    private final Map<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    // String identifies the action, the pair consist of timeout and an action. The timeout\n+    // represents the value in seconds the kernel will wait for components to respond to\n+    // an Precomponent event", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTYxNQ==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488385615", "createdAt": "2020-09-15T04:57:22Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -40,13 +43,18 @@\n @ImplementsService(name = \"SafeSystemUpdate\", autostart = true)\n @Singleton\n public class UpdateSystemSafelyService extends EvergreenService {\n-    private final Map<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    // String identifies the action, the pair consist of timeout and an action. The timeout\n+    // represents the value in seconds the kernel will wait for components to respond to\n+    // an Precomponent event", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjUwMg=="}, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTUxMTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjozNjozNFrOHRuVeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1NzoxOVrOHRwsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzAwMA==", "bodyText": "This comment seems to be incomplete", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488347000", "createdAt": "2020-09-15T02:36:34Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -189,9 +169,43 @@ protected void startup() throws InterruptedException {\n         }\n     }\n \n-    //only for testing\n-    public void setDefaultTimeOutInMs(long defaultTimeOutInMs) {\n-        this.defaultTimeOutInMs = defaultTimeOutInMs;\n+    /*\n+     If multiple updates are present, get the max time-out. Currently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTYwMg==", "bodyText": "nice catch, updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488385602", "createdAt": "2020-09-15T04:57:19Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -189,9 +169,43 @@ protected void startup() throws InterruptedException {\n         }\n     }\n \n-    //only for testing\n-    public void setDefaultTimeOutInMs(long defaultTimeOutInMs) {\n-        this.defaultTimeOutInMs = defaultTimeOutInMs;\n+    /*\n+     If multiple updates are present, get the max time-out. Currently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzAwMA=="}, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTUxNjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjozOTowOFrOHRuYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTowNjoyNFrOHRw2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzcwOA==", "bodyText": "Is it okay to fail silently when the component seems to have done its part by responding to the update event in a timely manner?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488347708", "createdAt": "2020-09-15T02:39:08Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -189,9 +169,43 @@ protected void startup() throws InterruptedException {\n         }\n     }\n \n-    //only for testing\n-    public void setDefaultTimeOutInMs(long defaultTimeOutInMs) {\n-        this.defaultTimeOutInMs = defaultTimeOutInMs;\n+    /*\n+     If multiple updates are present, get the max time-out. Currently\n+     */\n+    private long getMaxTimeoutInMillis() {\n+        Optional<Long> maxTimeoutInSec = pendingActions.values().stream()\n+                .map(pair -> pair.getLeft())\n+                .max(Long::compareTo);\n+        return TimeUnit.SECONDS.toMillis(maxTimeoutInSec.get());\n     }\n \n+    private long getTimeToReCheck(long timeout, List<Future<DeferUpdateRequest>> deferRequestFutures)\n+            throws InterruptedException {\n+        final long currentTimeMillis = clock.millis();\n+        long maxTimeToReCheck = currentTimeMillis;\n+        while ((clock.millis() - currentTimeMillis) < timeout && !deferRequestFutures.isEmpty()) {\n+            Iterator<Future<DeferUpdateRequest>> iterator = deferRequestFutures.iterator();\n+            while (iterator.hasNext()) {\n+                Future<DeferUpdateRequest> fut = iterator.next();\n+                if (fut.isDone()) {\n+                    try {\n+                        DeferUpdateRequest deferRequest = fut.get();\n+                        long timeToRecheck = currentTimeMillis + deferRequest.getRecheckTimeInMs();\n+                        if (timeToRecheck > maxTimeToReCheck) {\n+                            maxTimeToReCheck = timeToRecheck;\n+                            logger.atInfo().setEventType(\"service-update-deferred\")\n+                                    .log(\"deferred by {} for {} millis with message {}\",\n+                                            deferRequest.getMessage(), deferRequest.getRecheckTimeInMs(),\n+                                            deferRequest.getMessage());\n+                        }\n+                    } catch (ExecutionException e) {\n+                        logger.error(\"Failed to process component update request\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4ODExMw==", "bodyText": "This should not happen as LifecycleIPCAgent does not complete this future exceptionally.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488388113", "createdAt": "2020-09-15T05:06:24Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -189,9 +169,43 @@ protected void startup() throws InterruptedException {\n         }\n     }\n \n-    //only for testing\n-    public void setDefaultTimeOutInMs(long defaultTimeOutInMs) {\n-        this.defaultTimeOutInMs = defaultTimeOutInMs;\n+    /*\n+     If multiple updates are present, get the max time-out. Currently\n+     */\n+    private long getMaxTimeoutInMillis() {\n+        Optional<Long> maxTimeoutInSec = pendingActions.values().stream()\n+                .map(pair -> pair.getLeft())\n+                .max(Long::compareTo);\n+        return TimeUnit.SECONDS.toMillis(maxTimeoutInSec.get());\n     }\n \n+    private long getTimeToReCheck(long timeout, List<Future<DeferUpdateRequest>> deferRequestFutures)\n+            throws InterruptedException {\n+        final long currentTimeMillis = clock.millis();\n+        long maxTimeToReCheck = currentTimeMillis;\n+        while ((clock.millis() - currentTimeMillis) < timeout && !deferRequestFutures.isEmpty()) {\n+            Iterator<Future<DeferUpdateRequest>> iterator = deferRequestFutures.iterator();\n+            while (iterator.hasNext()) {\n+                Future<DeferUpdateRequest> fut = iterator.next();\n+                if (fut.isDone()) {\n+                    try {\n+                        DeferUpdateRequest deferRequest = fut.get();\n+                        long timeToRecheck = currentTimeMillis + deferRequest.getRecheckTimeInMs();\n+                        if (timeToRecheck > maxTimeToReCheck) {\n+                            maxTimeToReCheck = timeToRecheck;\n+                            logger.atInfo().setEventType(\"service-update-deferred\")\n+                                    .log(\"deferred by {} for {} millis with message {}\",\n+                                            deferRequest.getMessage(), deferRequest.getRecheckTimeInMs(),\n+                                            deferRequest.getMessage());\n+                        }\n+                    } catch (ExecutionException e) {\n+                        logger.error(\"Failed to process component update request\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NzcwOA=="}, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTUyMTk4OnYy", "diffSide": "RIGHT", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0MTo0N1rOHRubbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1NzowOVrOHRwsFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODUyNQ==", "bodyText": "wildcard?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488348525", "createdAt": "2020-09-15T02:41:47Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -39,6 +40,8 @@\n import java.util.HashMap;\n import java.util.List;\n \n+import static com.aws.iot.evergreen.deployment.model.ComponentUpdatePolicyAction.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTU1Ng==", "bodyText": "removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488385556", "createdAt": "2020-09-15T04:57:09Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -39,6 +40,8 @@\n import java.util.HashMap;\n import java.util.List;\n \n+import static com.aws.iot.evergreen.deployment.model.ComponentUpdatePolicyAction.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODUyNQ=="}, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTUyNDY1OnYy", "diffSide": "RIGHT", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0MzoyNFrOHRudKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo1NzozMlrOHRwsbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODk2OQ==", "bodyText": "Should this fail? This import doesn't seem consistent with the other imports which use the sdk model class", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488348969", "createdAt": "2020-09-15T02:43:24Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -7,9 +7,10 @@\n \n import com.aws.iot.evergreen.config.Topics;\n import com.aws.iot.evergreen.deployment.DeploymentService;\n+import com.aws.iot.evergreen.deployment.model.ComponentUpdatePolicy;\n+import com.aws.iot.evergreen.deployment.model.ComponentUpdatePolicyAction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTY0NQ==", "bodyText": "Yes, missed this one in benchmark tests. updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/437#discussion_r488385645", "createdAt": "2020-09-15T04:57:32Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -7,9 +7,10 @@\n \n import com.aws.iot.evergreen.config.Topics;\n import com.aws.iot.evergreen.deployment.DeploymentService;\n+import com.aws.iot.evergreen.deployment.model.ComponentUpdatePolicy;\n+import com.aws.iot.evergreen.deployment.model.ComponentUpdatePolicyAction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODk2OQ=="}, "originalCommit": {"oid": "f7bd28e66e667729a35e4445fc399b2d955db4cc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 795, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}