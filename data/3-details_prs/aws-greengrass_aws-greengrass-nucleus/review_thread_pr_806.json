{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Njg2NzMy", "number": 806, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyODozMVrOFKJ-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQyMDoxMDo1MlrOFYkyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTkzNjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyODozMVrOIMz1sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxODowMzo1NVrOINGdAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMzE1NA==", "bodyText": "So we're moving this line in nucleus bootstrap script: echo \"{configuration:/jvmOptions}\" > \"$KERNEL_ROOT/alts/current/launch.params\"\nto here. Nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r550303154", "createdAt": "2020-12-30T19:28:31Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);\n+\n         setupProxy();\n+\n         return this;\n     }\n \n     private void setupProxy() {\n         ProxyUtils.setProxyProperties(context.get(DeviceConfiguration.class));\n     }\n \n+    private void initializeNucleusServiceConfigIfNotExist(KernelAlternatives kernelAlternatives,\n+                                                          DeviceConfiguration deviceConfiguration) {\n+        Topics nucleusLifecycle = getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                deviceConfiguration.getNucleusComponentName(), SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        // Persist initial Nucleus launch parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYwODEzMQ==", "bodyText": "Yeah. The bootstrap script only gets to run in deployments. Here in provisioning I need to set it up explicitly", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r550608131", "createdAt": "2020-12-31T18:03:55Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);\n+\n         setupProxy();\n+\n         return this;\n     }\n \n     private void setupProxy() {\n         ProxyUtils.setProxyProperties(context.get(DeviceConfiguration.class));\n     }\n \n+    private void initializeNucleusServiceConfigIfNotExist(KernelAlternatives kernelAlternatives,\n+                                                          DeviceConfiguration deviceConfiguration) {\n+        Topics nucleusLifecycle = getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                deviceConfiguration.getNucleusComponentName(), SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        // Persist initial Nucleus launch parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMzE1NA=="}, "originalCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTk1MjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTozNzowM1rOIMz-3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxODowNjo1OVrOINGmUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNTUwMA==", "bodyText": "Hmm why exclude -Droot?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r550305500", "createdAt": "2020-12-30T19:37:03Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -349,6 +354,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDYxMDUxNA==", "bodyText": "The loader script will pass in -Droot https://github.com/aws-greengrass/aws-greengrass-nucleus/blob/main/scripts/loader#L27\nThe Nucleus root path won't be changed even if customers configure it in jvmOptions via deployments", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r550610514", "createdAt": "2020-12-31T18:06:59Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -349,6 +354,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNTUwMA=="}, "originalCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTQzODE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1Mzo1M1rOIYCyHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1ODo1M1rOIYC_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4MjMzNA==", "bodyText": "After adding getting the recipe from the build file, will we still keep the properties file as well for version? or should the version now come from the recipe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562082334", "createdAt": "2021-01-21T17:53:53Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);\n+\n         setupProxy();\n+\n         return this;\n     }\n \n     private void setupProxy() {\n         ProxyUtils.setProxyProperties(context.get(DeviceConfiguration.class));\n     }\n \n+    private void initializeNucleusServiceConfigIfNotExist(KernelAlternatives kernelAlternatives,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NTg4Mw==", "bodyText": "Ideally properties file can be removed. Let me see if I can get the order of the events correct", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562085883", "createdAt": "2021-01-21T17:58:53Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);\n+\n         setupProxy();\n+\n         return this;\n     }\n \n     private void setupProxy() {\n         ProxyUtils.setProxyProperties(context.get(DeviceConfiguration.class));\n     }\n \n+    private void initializeNucleusServiceConfigIfNotExist(KernelAlternatives kernelAlternatives,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4MjMzNA=="}, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTQ1MjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1Njo1MlrOIYC6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo1MDowOVrOIZ31VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NDQ0MQ==", "bodyText": "There's some initialization logic in DeviceConfiguration.initializeNucleusComponentConfig() for initializing version and a few more things for the Nucleus component config, is there a way we can consolidate that with this here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562084441", "createdAt": "2021-01-21T17:56:52Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA5Nzk5Ng==", "bodyText": "I put it here because the interpolation should happen after all configs are loaded. Let me see if this can be optimized.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562097996", "createdAt": "2021-01-21T18:17:33Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NDQ0MQ=="}, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwMDA4NA==", "bodyText": "I did some experiments. initializeNucleusComponentConfig was called in DeviceConfiguration constructor. Since I introduced ComponentStore RecipeLoader etc here in the init, changes in initializeNucleusComponentConfig will cause circular dependency issues.\nI still kept the logic here for now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r564000084", "createdAt": "2021-01-25T19:50:09Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NDQ0MQ=="}, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTQ2MzMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1OToxNVrOIYDBCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo0Nzo0OVrOIZ3wCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NjE1NA==", "bodyText": "Should we remove the default for the jvmOptions config from the Nucleus recipe now that the default it evaluated here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562086154", "createdAt": "2021-01-21T17:59:15Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -355,6 +360,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+        return getTopic(DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQyNTYyNQ==", "bodyText": "Do you mean this should be removed instead of default to empty string? https://code.amazon.com/packages/GreengrassV2ComponentsReleaseCDK/blobs/47911fb22576071ee8ec09c7bf0eef3ef421ae35/--/lib/components/greengrass-nucleus.ts#L68", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563425625", "createdAt": "2021-01-25T01:59:22Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -355,6 +360,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+        return getTopic(DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NjE1NA=="}, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk5ODczMA==", "bodyText": "I'm keep it in mind when updating the cdk", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563998730", "createdAt": "2021-01-25T19:47:49Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -355,6 +360,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+        return getTopic(DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NjE1NA=="}, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTg4ODU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/lifecyclemanager/LogManagerHelperTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODowODo0M1rOIZz4Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODowODo0M1rOIZz4Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzNTMyMw==", "bodyText": "remove.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563935323", "createdAt": "2021-01-25T18:08:43Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/lifecyclemanager/LogManagerHelperTest.java", "diffHunk": "@@ -168,7 +167,7 @@ void GIVEN_null_logger_config_WHEN_subscribe_THEN_correctly_reconfigures_all_log\n         NucleusPaths nucleusPaths = mock(NucleusPaths.class);\n         Topics rootConfigTopics = mock(Topics.class);\n         when(rootConfigTopics.findOrDefault(any(), anyString(), anyString(), anyString())).thenReturn(new ArrayList<>());\n-        when(configuration.lookup(anyString(), anyString())).thenReturn(mock(Topic.class));\n+        //lenient().when(configuration.lookup(anyString(), anyString())).thenReturn(mock(Topic.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTg5NjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODoxMDo0MFrOIZz9HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTozOTozNlrOIZ3bmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzNjU0MQ==", "bodyText": "We need to modify the pipeline to write the version number into the recipe now instead of properties?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563936541", "createdAt": "2021-01-25T18:10:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -506,22 +604,19 @@ public String getNucleusVersion() {\n      *\n      * @return version from the zip file, or a default if the version can't be determined\n      */\n-    public static String getVersionFromBuildMetadataFile() {\n+    public static String getVersionFromBuildRecipeFile() {\n         try {\n-            try (InputStream is = Files\n-                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n-                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n-                NUCLEUS_BUILD_PROPERTIES.load(is);\n-            }\n-\n-            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n-            if (version != null) {\n-                return version;\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe recipe = getRecipeSerializer()\n+                    .readValue(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                                    .resolve(NUCLEUS_RECIPE_FILENAME).toFile(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk5MzQ5OQ==", "bodyText": "Yes. Two options\n\nUpdate version in recipe\nKeep build.properties and here we interpolate the recipe with correct version\n\nI'm currently going with #1 but it can be changed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563993499", "createdAt": "2021-01-25T19:39:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -506,22 +604,19 @@ public String getNucleusVersion() {\n      *\n      * @return version from the zip file, or a default if the version can't be determined\n      */\n-    public static String getVersionFromBuildMetadataFile() {\n+    public static String getVersionFromBuildRecipeFile() {\n         try {\n-            try (InputStream is = Files\n-                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n-                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n-                NUCLEUS_BUILD_PROPERTIES.load(is);\n-            }\n-\n-            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n-            if (version != null) {\n-                return version;\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe recipe = getRecipeSerializer()\n+                    .readValue(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                                    .resolve(NUCLEUS_RECIPE_FILENAME).toFile(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzNjU0MQ=="}, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTkwNjgxOnYy", "diffSide": "RIGHT", "path": "conf/recipe.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODoxMzozNlrOIZ0D2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo0MToyOVrOIZ3f-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzODI2Ng==", "bodyText": "double check that this recipe matches exactly what is in the CDK.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563938266", "createdAt": "2021-01-25T18:13:36Z", "author": {"login": "MikeDombo"}, "path": "conf/recipe.yaml", "diffHunk": "@@ -1,3 +1,8 @@\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk5NDYxOA==", "bodyText": "Yes, I've verified in UAT but I will be updating CDK to update the recipe", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563994618", "createdAt": "2021-01-25T19:41:29Z", "author": {"login": "hui-yang"}, "path": "conf/recipe.yaml", "diffHunk": "@@ -1,3 +1,8 @@\n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzODI2Ng=="}, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTkyNDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODoxNzo1N1rOIZ0Owg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODoxNzo1N1rOIZ0Owg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk0MTA1OA==", "bodyText": "Can you add a skip for directories? We currently get a false error that some directory is not a recipe, which we can safely ignore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563941058", "createdAt": "2021-01-25T18:17:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -510,57 +511,72 @@ private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidReques\n         }\n     }\n \n-    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n     private void copyRecipesToComponentStore(Path from) throws IOException {\n         try (Stream<Path> files = Files.walk(from)) {\n             for (Path r : files.collect(Collectors.toList())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTkzODgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODoyMToyNVrOIZ0Xlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTo0MjowMlrOIZ3hRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk0MzMxOA==", "bodyText": "you can't put this here since in most cases this code will never execute. Put this somewhere that always executes so that we always pass the version in.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563943318", "createdAt": "2021-01-25T18:21:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +235,95 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+            // Copy artifact to component store\n+            // TODO\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            String componentVersion = componentRecipe.getVersion().toString();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).dflt(componentVersion);\n+\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk5NDk0OA==", "bodyText": "Ok. I can move it back to where it was", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563994948", "createdAt": "2021-01-25T19:42:02Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +235,95 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+            // Copy artifact to component store\n+            // TODO\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            String componentVersion = componentRecipe.getVersion().toString();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).dflt(componentVersion);\n+\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk0MzMxOA=="}, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MjYyNDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyMjoxMFrOIbZ-cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMzo0NToxNlrOIbgwoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODA0OQ==", "bodyText": "Should this be replaceAndWait() or dflt() ? What happens when Nucleus restarts and already has lifecycle config from the tlog?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565608049", "createdAt": "2021-01-27T20:22:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +246,97 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,\n+                    COPY_ATTRIBUTES);\n+            Permissions.setArtifactPermission(unpackArtifactPath, FileSystemPermission.builder()\n+                    .ownerRead(true).ownerExecute(true).groupRead(true).groupExecute(true)\n+                    .otherRead(true).otherExecute(true).build());\n+\n+            KernelConfigResolver kernelConfigResolver = kernel.getContext().get(KernelConfigResolver.class);\n+            // Add Nucleus dependencies\n+            Map<String, DependencyProperties> nucleusDependencies = componentRecipe.getDependencies();\n+            if (nucleusDependencies == null) {\n+                nucleusDependencies = Collections.emptyMap();\n+            }\n+            kernel.getConfig().lookup(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                    nucleusComponentName, SERVICE_DEPENDENCIES_NAMESPACE_TOPIC)\n+                    .dflt(kernelConfigResolver.generateServiceDependencies(nucleusDependencies));\n+\n+            // Add Nucleus lifecycle (after config interpolation)\n+            Object interpolatedLifecycle = kernelConfigResolver.interpolate(componentRecipe.getLifecycle(),\n+                    new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getVersion()),\n+                    nucleusDependencies.keySet(),\n+                    kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).toPOJO());\n+            nucleusLifecycle.replaceAndWait((Map<String, Object>) interpolatedLifecycle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTcxOTIwMQ==", "bodyText": "It's prevented with this check https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806/files/77b497ecff63d8fdcc1771c88d586700ab512160#diff-3de627667101ba5b23e01542a659fd03c9a728449b99d59d0c309ccdbe5badc5R276-R281\nTopics only has updateFromMap and replaceAndWait, but no dflt", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565719201", "createdAt": "2021-01-27T23:45:16Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +246,97 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,\n+                    COPY_ATTRIBUTES);\n+            Permissions.setArtifactPermission(unpackArtifactPath, FileSystemPermission.builder()\n+                    .ownerRead(true).ownerExecute(true).groupRead(true).groupExecute(true)\n+                    .otherRead(true).otherExecute(true).build());\n+\n+            KernelConfigResolver kernelConfigResolver = kernel.getContext().get(KernelConfigResolver.class);\n+            // Add Nucleus dependencies\n+            Map<String, DependencyProperties> nucleusDependencies = componentRecipe.getDependencies();\n+            if (nucleusDependencies == null) {\n+                nucleusDependencies = Collections.emptyMap();\n+            }\n+            kernel.getConfig().lookup(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                    nucleusComponentName, SERVICE_DEPENDENCIES_NAMESPACE_TOPIC)\n+                    .dflt(kernelConfigResolver.generateServiceDependencies(nucleusDependencies));\n+\n+            // Add Nucleus lifecycle (after config interpolation)\n+            Object interpolatedLifecycle = kernelConfigResolver.interpolate(componentRecipe.getLifecycle(),\n+                    new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getVersion()),\n+                    nucleusDependencies.keySet(),\n+                    kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).toPOJO());\n+            nucleusLifecycle.replaceAndWait((Map<String, Object>) interpolatedLifecycle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODA0OQ=="}, "originalCommit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MjYyNzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyMjo1OFrOIbaAKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMTo1ODo0MlrOIbdgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODQ5MQ==", "bodyText": "This is being done in initializeNucleusComponentConfig as well, is this duplicate?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565608491", "createdAt": "2021-01-27T20:22:58Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +246,97 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTY2NTk1NQ==", "bodyText": "initializeNucleusComponentConfig only knows about the fallback version 2.0.0.\nYou have a good point though. I will move SETENV_CONFIG_NAMESPACE.GGC_VERSION_ENV setting to a common code path after version is initialized.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565665955", "createdAt": "2021-01-27T21:58:42Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +246,97 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODQ5MQ=="}, "originalCommit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzQ3NzI1OnYy", "diffSide": "RIGHT", "path": "assembly.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDozNjozMFrOIbh_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDozNjozMFrOIbh_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTczOTI2Ng==", "bodyText": "remove the properties file?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565739266", "createdAt": "2021-01-28T00:36:30Z", "author": {"login": "MikeDombo"}, "path": "assembly.xml", "diffHunk": "@@ -27,6 +27,7 @@\n             <outputDirectory>/conf</outputDirectory>\n             <includes>\n                 <include>nucleus-build.properties</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzQ4OTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo0MToxNFrOIbiF4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo0MToxNFrOIbiF4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0MTAyNg==", "bodyText": "use isEmpty?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565741026", "createdAt": "2021-01-28T00:41:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzQ5MTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo0MjoyOVrOIbiHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo0MjoyOVrOIbiHcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0MTQyNg==", "bodyText": "validate that the path actually exists before attempting to copy it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565741426", "createdAt": "2021-01-28T00:42:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzUxNzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo1MjozNVrOIbiV_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo1MjozNVrOIbiV_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0NTE1MQ==", "bodyText": "Is this hardcoded name correct/the only way to do it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565745151", "createdAt": "2021-01-28T00:52:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzUyMTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo1NDoyNVrOIbiYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxODo1NzoxNVrOIcGR0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0NTc4NA==", "bodyText": "this might be copying too much, if I don't unpack into a directory which contains only the zip stuff, like if I unzip into my home directory.\nWe may want to restrict the copying more. Just something to consider anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565745784", "createdAt": "2021-01-28T00:54:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMzMjAzNg==", "bodyText": "If it's ok not to copy over the license files, I can explicitly copy the bin/ conf/ lib/ directories only", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r566332036", "createdAt": "2021-01-28T18:54:13Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0NTc4NA=="}, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMzMzkwNg==", "bodyText": "Seems ok to me.\n@jbutler @philcali  any issues with this? We still distribute the licenses, we'd just not be copying them into the unzip path.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r566333906", "createdAt": "2021-01-28T18:57:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0NTc4NA=="}, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMzEyODc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/http/apache/internal/conn/SdkTlsSocketFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQyMDoxMDo1MlrOIipiHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQyMDoxMzozOVrOIipohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzIwMjk3Mg==", "bodyText": "Why did you do this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r573202972", "createdAt": "2021-02-09T20:10:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/http/apache/internal/conn/SdkTlsSocketFactory.java", "diffHunk": "@@ -52,7 +52,7 @@ protected final void prepareSocket(final SSLSocket socket) {\n         // BEGIN GG MODIFICATIONS\n         try {\n             SSLParameters params = new SSLParameters();\n-            params.setApplicationProtocols(new String[]{\"x-amzn-http-ca\", \"http/1.1\"});\n+            //params.setApplicationProtocols(new String[]{\"x-amzn-http-ca\", \"http/1.1\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44175a5e78f135e96887138a0d6045a4e57d013f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzIwNDYxNQ==", "bodyText": "It's a mistake. I'll fix it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r573204615", "createdAt": "2021-02-09T20:13:39Z", "author": {"login": "hui-yang"}, "path": "src/main/java/software/amazon/awssdk/http/apache/internal/conn/SdkTlsSocketFactory.java", "diffHunk": "@@ -52,7 +52,7 @@ protected final void prepareSocket(final SSLSocket socket) {\n         // BEGIN GG MODIFICATIONS\n         try {\n             SSLParameters params = new SSLParameters();\n-            params.setApplicationProtocols(new String[]{\"x-amzn-http-ca\", \"http/1.1\"});\n+            //params.setApplicationProtocols(new String[]{\"x-amzn-http-ca\", \"http/1.1\"});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzIwMjk3Mg=="}, "originalCommit": {"oid": "44175a5e78f135e96887138a0d6045a4e57d013f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 180, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}