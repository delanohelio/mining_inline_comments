{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTExNjcx", "number": 543, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNjowOFrOEvZzgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMzowMlrOEycabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQxMzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNjowOFrOHkXaTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1ODoxM1rOHkYQ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NDM1MQ==", "bodyText": "needs proxy support too", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507894351", "createdAt": "2020-10-19T16:36:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNTU1MQ==", "bodyText": "I keep ProxyUtils.getClientConfiguration() above. What else do I need to do here to support proxy?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507905551", "createdAt": "2020-10-19T16:54:12Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NDM1MQ=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwODMxNw==", "bodyText": "OK, I see now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507908317", "createdAt": "2020-10-19T16:58:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NDM1MQ=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQxNzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNzoyNFrOHkXdQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyMDoxMVrOHkZFyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTEwNA==", "bodyText": "can we just have a null password? or empty array", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507895104", "createdAt": "2020-10-19T16:37:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);\n         String region = Coerce.toString(deviceConfiguration.getAWSRegion());\n \n         if (!Utils.isEmpty(region)) {\n             if (!Utils.isEmpty(greengrassServiceEndpoint)) {\n                 // Region and endpoint are both required when updating endpoint config\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n                         .addKeyValue(\"service-region\", region).log();\n                 EndpointConfiguration endpointConfiguration =\n                         new EndpointConfiguration(greengrassServiceEndpoint, region);\n                 clientBuilder.withEndpointConfiguration(endpointConfiguration);\n             } else {\n                 // This section is to override default region if needed\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-region\", region).log();\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-region\", region).log();\n                 clientBuilder.withRegion(region);\n             }\n         }\n \n-        if (credentialsProvider != null) {\n-            clientBuilder.withCredentials(credentialsProvider);\n+        this.cmsClient = clientBuilder.build();\n+    }\n+\n+    private void configureClientMutualTLS(ClientConfiguration clientConfiguration,\n+                                          DeviceConfiguration deviceConfiguration) throws TLSAuthException {\n+        if (clientConfiguration == null) {\n+            return;\n+        }\n+        String certificatePath = Coerce.toString(deviceConfiguration.getCertificateFilePath());\n+        String privateKeyPath = Coerce.toString(deviceConfiguration.getPrivateKeyFilePath());\n+        String rootCAPath = Coerce.toString(deviceConfiguration.getRootCAFilePath());\n+        if (Utils.isEmpty(certificatePath) || Utils.isEmpty(privateKeyPath) || Utils.isEmpty(rootCAPath)) {\n+            return;\n+        }\n+\n+        TrustManager[] trustManagers = createTrustManagers(rootCAPath);\n+        KeyManager[] keyManagers = createKeyManagers(privateKeyPath, certificatePath);\n+        SSLContext sslContext = null;\n+        try {\n+            sslContext = SSLContext.getInstance(\"TLSv1.2\");\n+            sslContext.init(keyManagers, trustManagers, null);\n+        } catch (GeneralSecurityException e) {\n+            throw new TLSAuthException(\"Failed to initialize TLS context\", e);\n         }\n \n-        this.cmsClient = clientBuilder.build();\n+        SSLConnectionSocketFactory sslConnectionSocketFactory =\n+                new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n+        clientConfiguration.getApacheHttpClientConfig().setSslSocketFactory(sslConnectionSocketFactory);\n+    }\n+\n+    private TrustManager[] createTrustManagers(String rootCAPath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> trustCertificates = EncryptionUtils.loadX509Certificates(rootCAPath);\n+\n+            KeyStore tmKeyStore = KeyStore.getInstance(\"JKS\");\n+            tmKeyStore.load(null, null);\n+            for (X509Certificate certificate : trustCertificates) {\n+                X500Principal principal = certificate.getSubjectX500Principal();\n+                String name = principal.getName(\"RFC2253\");\n+                tmKeyStore.setCertificateEntry(name, certificate);\n+            }\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\"X509\");\n+            trustManagerFactory.init(tmKeyStore);\n+            return trustManagerFactory.getTrustManagers();\n+        } catch (GeneralSecurityException | IOException e) {\n+            throw new TLSAuthException(\"Failed to get trust manager\", e);\n+        }\n+    }\n+\n+    private KeyManager[] createKeyManagers(String privateKeyPath, String certificatePath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> certificateChain = EncryptionUtils.loadX509Certificates(certificatePath);\n+\n+            PrivateKey privateKey = EncryptionUtils.loadPrivateKey(privateKeyPath);\n+\n+            KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+            keyStore.load(null);\n+            keyStore.setKeyEntry(\"private-key\", privateKey, \"password\".toCharArray(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwOTU5NA==", "bodyText": "If it's supposed to have private key, why do we need to support null password? Please clarify what you mean, thanks.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507909594", "createdAt": "2020-10-19T16:59:59Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);\n         String region = Coerce.toString(deviceConfiguration.getAWSRegion());\n \n         if (!Utils.isEmpty(region)) {\n             if (!Utils.isEmpty(greengrassServiceEndpoint)) {\n                 // Region and endpoint are both required when updating endpoint config\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n                         .addKeyValue(\"service-region\", region).log();\n                 EndpointConfiguration endpointConfiguration =\n                         new EndpointConfiguration(greengrassServiceEndpoint, region);\n                 clientBuilder.withEndpointConfiguration(endpointConfiguration);\n             } else {\n                 // This section is to override default region if needed\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-region\", region).log();\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-region\", region).log();\n                 clientBuilder.withRegion(region);\n             }\n         }\n \n-        if (credentialsProvider != null) {\n-            clientBuilder.withCredentials(credentialsProvider);\n+        this.cmsClient = clientBuilder.build();\n+    }\n+\n+    private void configureClientMutualTLS(ClientConfiguration clientConfiguration,\n+                                          DeviceConfiguration deviceConfiguration) throws TLSAuthException {\n+        if (clientConfiguration == null) {\n+            return;\n+        }\n+        String certificatePath = Coerce.toString(deviceConfiguration.getCertificateFilePath());\n+        String privateKeyPath = Coerce.toString(deviceConfiguration.getPrivateKeyFilePath());\n+        String rootCAPath = Coerce.toString(deviceConfiguration.getRootCAFilePath());\n+        if (Utils.isEmpty(certificatePath) || Utils.isEmpty(privateKeyPath) || Utils.isEmpty(rootCAPath)) {\n+            return;\n+        }\n+\n+        TrustManager[] trustManagers = createTrustManagers(rootCAPath);\n+        KeyManager[] keyManagers = createKeyManagers(privateKeyPath, certificatePath);\n+        SSLContext sslContext = null;\n+        try {\n+            sslContext = SSLContext.getInstance(\"TLSv1.2\");\n+            sslContext.init(keyManagers, trustManagers, null);\n+        } catch (GeneralSecurityException e) {\n+            throw new TLSAuthException(\"Failed to initialize TLS context\", e);\n         }\n \n-        this.cmsClient = clientBuilder.build();\n+        SSLConnectionSocketFactory sslConnectionSocketFactory =\n+                new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n+        clientConfiguration.getApacheHttpClientConfig().setSslSocketFactory(sslConnectionSocketFactory);\n+    }\n+\n+    private TrustManager[] createTrustManagers(String rootCAPath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> trustCertificates = EncryptionUtils.loadX509Certificates(rootCAPath);\n+\n+            KeyStore tmKeyStore = KeyStore.getInstance(\"JKS\");\n+            tmKeyStore.load(null, null);\n+            for (X509Certificate certificate : trustCertificates) {\n+                X500Principal principal = certificate.getSubjectX500Principal();\n+                String name = principal.getName(\"RFC2253\");\n+                tmKeyStore.setCertificateEntry(name, certificate);\n+            }\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\"X509\");\n+            trustManagerFactory.init(tmKeyStore);\n+            return trustManagerFactory.getTrustManagers();\n+        } catch (GeneralSecurityException | IOException e) {\n+            throw new TLSAuthException(\"Failed to get trust manager\", e);\n+        }\n+    }\n+\n+    private KeyManager[] createKeyManagers(String privateKeyPath, String certificatePath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> certificateChain = EncryptionUtils.loadX509Certificates(certificatePath);\n+\n+            PrivateKey privateKey = EncryptionUtils.loadPrivateKey(privateKeyPath);\n+\n+            KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+            keyStore.load(null);\n+            keyStore.setKeyEntry(\"private-key\", privateKey, \"password\".toCharArray(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTEwNA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMDk2OA==", "bodyText": "you are setting a password called \"password\". Can we not do that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507910968", "createdAt": "2020-10-19T17:02:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);\n         String region = Coerce.toString(deviceConfiguration.getAWSRegion());\n \n         if (!Utils.isEmpty(region)) {\n             if (!Utils.isEmpty(greengrassServiceEndpoint)) {\n                 // Region and endpoint are both required when updating endpoint config\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n                         .addKeyValue(\"service-region\", region).log();\n                 EndpointConfiguration endpointConfiguration =\n                         new EndpointConfiguration(greengrassServiceEndpoint, region);\n                 clientBuilder.withEndpointConfiguration(endpointConfiguration);\n             } else {\n                 // This section is to override default region if needed\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-region\", region).log();\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-region\", region).log();\n                 clientBuilder.withRegion(region);\n             }\n         }\n \n-        if (credentialsProvider != null) {\n-            clientBuilder.withCredentials(credentialsProvider);\n+        this.cmsClient = clientBuilder.build();\n+    }\n+\n+    private void configureClientMutualTLS(ClientConfiguration clientConfiguration,\n+                                          DeviceConfiguration deviceConfiguration) throws TLSAuthException {\n+        if (clientConfiguration == null) {\n+            return;\n+        }\n+        String certificatePath = Coerce.toString(deviceConfiguration.getCertificateFilePath());\n+        String privateKeyPath = Coerce.toString(deviceConfiguration.getPrivateKeyFilePath());\n+        String rootCAPath = Coerce.toString(deviceConfiguration.getRootCAFilePath());\n+        if (Utils.isEmpty(certificatePath) || Utils.isEmpty(privateKeyPath) || Utils.isEmpty(rootCAPath)) {\n+            return;\n+        }\n+\n+        TrustManager[] trustManagers = createTrustManagers(rootCAPath);\n+        KeyManager[] keyManagers = createKeyManagers(privateKeyPath, certificatePath);\n+        SSLContext sslContext = null;\n+        try {\n+            sslContext = SSLContext.getInstance(\"TLSv1.2\");\n+            sslContext.init(keyManagers, trustManagers, null);\n+        } catch (GeneralSecurityException e) {\n+            throw new TLSAuthException(\"Failed to initialize TLS context\", e);\n         }\n \n-        this.cmsClient = clientBuilder.build();\n+        SSLConnectionSocketFactory sslConnectionSocketFactory =\n+                new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n+        clientConfiguration.getApacheHttpClientConfig().setSslSocketFactory(sslConnectionSocketFactory);\n+    }\n+\n+    private TrustManager[] createTrustManagers(String rootCAPath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> trustCertificates = EncryptionUtils.loadX509Certificates(rootCAPath);\n+\n+            KeyStore tmKeyStore = KeyStore.getInstance(\"JKS\");\n+            tmKeyStore.load(null, null);\n+            for (X509Certificate certificate : trustCertificates) {\n+                X500Principal principal = certificate.getSubjectX500Principal();\n+                String name = principal.getName(\"RFC2253\");\n+                tmKeyStore.setCertificateEntry(name, certificate);\n+            }\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\"X509\");\n+            trustManagerFactory.init(tmKeyStore);\n+            return trustManagerFactory.getTrustManagers();\n+        } catch (GeneralSecurityException | IOException e) {\n+            throw new TLSAuthException(\"Failed to get trust manager\", e);\n+        }\n+    }\n+\n+    private KeyManager[] createKeyManagers(String privateKeyPath, String certificatePath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> certificateChain = EncryptionUtils.loadX509Certificates(certificatePath);\n+\n+            PrivateKey privateKey = EncryptionUtils.loadPrivateKey(privateKeyPath);\n+\n+            KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+            keyStore.load(null);\n+            keyStore.setKeyEntry(\"private-key\", privateKey, \"password\".toCharArray(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTEwNA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTg2Ng==", "bodyText": "Got you. Sure, it can be changed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507921866", "createdAt": "2020-10-19T17:20:11Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/GreengrassComponentServiceClientFactory.java", "diffHunk": "@@ -34,36 +51,104 @@\n      *\n      * @param greengrassServiceEndpoint String containing service endpoint\n      * @param deviceConfiguration       Device configuration\n-     * @param credentialsProvider       AWS Credentials provider for device credentials\n      */\n     @Inject\n     public GreengrassComponentServiceClientFactory(\n             @Named(CONTEXT_COMPONENT_SERVICE_ENDPOINT) String greengrassServiceEndpoint,\n-            DeviceConfiguration deviceConfiguration,\n-            LazyCredentialProvider credentialsProvider) {\n+            DeviceConfiguration deviceConfiguration) {\n+\n+        ClientConfiguration clientConfiguration = ProxyUtils.getClientConfiguration();\n+        try {\n+            configureClientMutualTLS(clientConfiguration, deviceConfiguration);\n+        } catch (TLSAuthException e) {\n+            logger.atWarn(\"configure-greengrass-mutual-auth\")\n+                    .log(\"Error during configure greengrass client mutual auth\", e);\n+        }\n         AWSEvergreenClientBuilder clientBuilder =\n-                AWSEvergreenClientBuilder.standard().withClientConfiguration(ProxyUtils.getClientConfiguration());\n+                AWSEvergreenClientBuilder.standard().withClientConfiguration(clientConfiguration);\n         String region = Coerce.toString(deviceConfiguration.getAWSRegion());\n \n         if (!Utils.isEmpty(region)) {\n             if (!Utils.isEmpty(greengrassServiceEndpoint)) {\n                 // Region and endpoint are both required when updating endpoint config\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n                         .addKeyValue(\"service-region\", region).log();\n                 EndpointConfiguration endpointConfiguration =\n                         new EndpointConfiguration(greengrassServiceEndpoint, region);\n                 clientBuilder.withEndpointConfiguration(endpointConfiguration);\n             } else {\n                 // This section is to override default region if needed\n-                logger.atInfo(\"initialize-cms-client\").addKeyValue(\"service-region\", region).log();\n+                logger.atInfo(\"initialize-greengrass-client\").addKeyValue(\"service-region\", region).log();\n                 clientBuilder.withRegion(region);\n             }\n         }\n \n-        if (credentialsProvider != null) {\n-            clientBuilder.withCredentials(credentialsProvider);\n+        this.cmsClient = clientBuilder.build();\n+    }\n+\n+    private void configureClientMutualTLS(ClientConfiguration clientConfiguration,\n+                                          DeviceConfiguration deviceConfiguration) throws TLSAuthException {\n+        if (clientConfiguration == null) {\n+            return;\n+        }\n+        String certificatePath = Coerce.toString(deviceConfiguration.getCertificateFilePath());\n+        String privateKeyPath = Coerce.toString(deviceConfiguration.getPrivateKeyFilePath());\n+        String rootCAPath = Coerce.toString(deviceConfiguration.getRootCAFilePath());\n+        if (Utils.isEmpty(certificatePath) || Utils.isEmpty(privateKeyPath) || Utils.isEmpty(rootCAPath)) {\n+            return;\n+        }\n+\n+        TrustManager[] trustManagers = createTrustManagers(rootCAPath);\n+        KeyManager[] keyManagers = createKeyManagers(privateKeyPath, certificatePath);\n+        SSLContext sslContext = null;\n+        try {\n+            sslContext = SSLContext.getInstance(\"TLSv1.2\");\n+            sslContext.init(keyManagers, trustManagers, null);\n+        } catch (GeneralSecurityException e) {\n+            throw new TLSAuthException(\"Failed to initialize TLS context\", e);\n         }\n \n-        this.cmsClient = clientBuilder.build();\n+        SSLConnectionSocketFactory sslConnectionSocketFactory =\n+                new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);\n+        clientConfiguration.getApacheHttpClientConfig().setSslSocketFactory(sslConnectionSocketFactory);\n+    }\n+\n+    private TrustManager[] createTrustManagers(String rootCAPath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> trustCertificates = EncryptionUtils.loadX509Certificates(rootCAPath);\n+\n+            KeyStore tmKeyStore = KeyStore.getInstance(\"JKS\");\n+            tmKeyStore.load(null, null);\n+            for (X509Certificate certificate : trustCertificates) {\n+                X500Principal principal = certificate.getSubjectX500Principal();\n+                String name = principal.getName(\"RFC2253\");\n+                tmKeyStore.setCertificateEntry(name, certificate);\n+            }\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\"X509\");\n+            trustManagerFactory.init(tmKeyStore);\n+            return trustManagerFactory.getTrustManagers();\n+        } catch (GeneralSecurityException | IOException e) {\n+            throw new TLSAuthException(\"Failed to get trust manager\", e);\n+        }\n+    }\n+\n+    private KeyManager[] createKeyManagers(String privateKeyPath, String certificatePath) throws TLSAuthException {\n+        try {\n+            List<X509Certificate> certificateChain = EncryptionUtils.loadX509Certificates(certificatePath);\n+\n+            PrivateKey privateKey = EncryptionUtils.loadPrivateKey(privateKeyPath);\n+\n+            KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+            keyStore.load(null);\n+            keyStore.setKeyEntry(\"private-key\", privateKey, \"password\".toCharArray(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTEwNA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQyMTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozODoyM1rOHkXftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1Mjo0M1rOHkYCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTczMg==", "bodyText": "since we have this now, you should be able to remove greengrass permissions from the TES role that we create for customers (not the one we use in testing though)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507895732", "createdAt": "2020-10-19T16:38:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ public ThingInfo createThing(IotClient client, String policyName, String thingNa\n                     \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n                             + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n                             + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n-                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\",\\n\"\n+                            + \"                \\\"greengrass:*\\\"\\n],\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNDY2NQ==", "bodyText": "Can you point me the location of TES permission? Thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507904665", "createdAt": "2020-10-19T16:52:43Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -154,7 +154,8 @@ public ThingInfo createThing(IotClient client, String policyName, String thingNa\n                     \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n                             + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n                             + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n-                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\",\\n\"\n+                            + \"                \\\"greengrass:*\\\"\\n],\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NTczMg=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQyNjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozOToyOFrOHkXigg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzowMTozMVrOHkYZ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjQ1MA==", "bodyText": "yikes. Link to where you got this from.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507896450", "createdAt": "2020-10-19T16:39:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand\n+        int pkcs1Length = pkcs1Bytes.length;\n+        int totalLength = pkcs1Length + 22;\n+        byte[] pkcs8Header = {0x30, (byte) 0x82, (byte) ((totalLength >> 8) & 0xff), (byte) (totalLength & 0xff),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwMzk0Mw==", "bodyText": "Here is the reference:\nhttps://github.com/Mastercard/client-encryption-java/blob/master/src/main/java/com/mastercard/developer/utils/EncryptionUtils.java#L95-L100\nIt basically changes pkcs1 to pkcs8. The other option is BouncyCastle PEM parser so we can avoid this hack. But it's ~800KB overhead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507903943", "createdAt": "2020-10-19T16:51:38Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand\n+        int pkcs1Length = pkcs1Bytes.length;\n+        int totalLength = pkcs1Length + 22;\n+        byte[] pkcs8Header = {0x30, (byte) 0x82, (byte) ((totalLength >> 8) & 0xff), (byte) (totalLength & 0xff),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjQ1MA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNDY2MA==", "bodyText": "Link it in the code so we have traceability.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507904660", "createdAt": "2020-10-19T16:52:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand\n+        int pkcs1Length = pkcs1Bytes.length;\n+        int totalLength = pkcs1Length + 22;\n+        byte[] pkcs8Header = {0x30, (byte) 0x82, (byte) ((totalLength >> 8) & 0xff), (byte) (totalLength & 0xff),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjQ1MA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMDY1Mg==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507910652", "createdAt": "2020-10-19T17:01:31Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand\n+        int pkcs1Length = pkcs1Bytes.length;\n+        int totalLength = pkcs1Length + 22;\n+        byte[] pkcs8Header = {0x30, (byte) 0x82, (byte) ((totalLength >> 8) & 0xff), (byte) (totalLength & 0xff),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjQ1MA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQyNzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozOTo0MlrOHkXjGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1MjoxMFrOHkYBIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjYwMA==", "bodyText": "use bouncycastle instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507896600", "createdAt": "2020-10-19T16:39:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwMjcwNQ==", "bodyText": "bouncycastle is ~800KB\nhttps://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on/1.66\nDo we want to have it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507902705", "createdAt": "2020-10-19T16:49:41Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjYwMA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNDI5MQ==", "bodyText": "Not for just these methods. Though DCM was going to use bouncycastle...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507904291", "createdAt": "2020-10-19T16:52:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjYwMA=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQzMDk2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/aws/greengrass/util/encryption/certificate-2048.pem", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MDozN1rOHkXlTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjoyNDoxMFrOHkoNcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzE2Ng==", "bodyText": "even though these keys won't do anything, appsec won't like it. Can we instead generate the key during the test?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r507897166", "createdAt": "2020-10-19T16:40:37Z", "author": {"login": "MikeDombo"}, "path": "src/test/resources/com/aws/greengrass/util/encryption/certificate-2048.pem", "diffHunk": "@@ -0,0 +1,19 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDITCCAgmgAwIBAgIJANLIazc8xI4iMA0GCSqGSIb3DQEBBQUAMCcxJTAjBgNV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2OTU4NA==", "bodyText": "changed to generate them in unit tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r508169584", "createdAt": "2020-10-20T02:24:10Z", "author": {"login": "wikimonkey"}, "path": "src/test/resources/com/aws/greengrass/util/encryption/certificate-2048.pem", "diffHunk": "@@ -0,0 +1,19 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDITCCAgmgAwIBAgIJANLIazc8xI4iMA0GCSqGSIb3DQEBBQUAMCcxJTAjBgNV", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzE2Ng=="}, "originalCommit": {"oid": "f5e1ee33012101657c13bee05c8fb17ffeaff4bd"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzE1MDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowNDowOVrOHmv1DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowNDowOVrOHmv1DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5MTU2NA==", "bodyText": "... I'd say if you didn't find this from Master Card, this is going to take days or weeks to implement. Great job...\nI assume this would be reliable as long as it works... But better to recheck with Device SDK's implementation - if we can find it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r510391564", "createdAt": "2020-10-22T19:04:09Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/util/EncryptionUtils.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.greengrass.util;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public final class EncryptionUtils {\n+\n+    private static final String PKCS_1_PEM_HEADER = \"-----BEGIN RSA PRIVATE KEY-----\";\n+    private static final String PKCS_1_PEM_FOOTER = \"-----END RSA PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_HEADER = \"-----BEGIN PRIVATE KEY-----\";\n+    private static final String PKCS_8_PEM_FOOTER = \"-----END PRIVATE KEY-----\";\n+\n+    private EncryptionUtils() {\n+    }\n+\n+    /**\n+     * Populate a list of X509 encryption certificate objects from the given file path.\n+     *\n+     * @param certificatePath certificate file path\n+     * @return a list of X590 certificate objects\n+     * @throws IOException          file IO error\n+     * @throws CertificateException can't populate certificates\n+     */\n+    public static List<X509Certificate> loadX509Certificates(String certificatePath)\n+            throws IOException, CertificateException {\n+        try (InputStream certificateInputStream = Files.newInputStream(Paths.get(certificatePath))) {\n+            CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            return new ArrayList<>(\n+                    (Collection<? extends X509Certificate>) factory.generateCertificates(certificateInputStream));\n+        }\n+    }\n+\n+    /**\n+     * Load a RSA private key from the given file path.\n+     *\n+     * @param keyPath key file path\n+     * @return a RSA private key\n+     * @throws IOException              file IO error\n+     * @throws GeneralSecurityException can't load private key\n+     */\n+    public static PrivateKey loadPrivateKey(String keyPath) throws IOException, GeneralSecurityException {\n+        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));\n+        String keyString = new String(keyBytes, StandardCharsets.UTF_8);\n+\n+        if (keyString.contains(PKCS_1_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_1_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_1_PEM_FOOTER, \"\");\n+            return readPkcs1PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        if (keyString.contains(PKCS_8_PEM_HEADER)) {\n+            keyString = keyString.replace(PKCS_8_PEM_HEADER, \"\");\n+            keyString = keyString.replace(PKCS_8_PEM_FOOTER, \"\");\n+            return readPkcs8PrivateKey(Base64.decodeBase64(keyString));\n+        }\n+\n+        return readPkcs8PrivateKey(keyBytes);\n+    }\n+\n+    private static PrivateKey readPkcs8PrivateKey(byte[] pkcs8Bytes) throws GeneralSecurityException {\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8Bytes);\n+        return keyFactory.generatePrivate(keySpec);\n+    }\n+\n+    private static PrivateKey readPkcs1PrivateKey(byte[] pkcs1Bytes) throws GeneralSecurityException {\n+        // We can't use Java internal APIs to parse ASN.1 structures, so we build a PKCS#8 key Java can understand\n+        int pkcs1Length = pkcs1Bytes.length;\n+        int totalLength = pkcs1Length + 22;\n+        // reference to https://github.com/Mastercard/client-encryption-java/blob/master/src/main/java/com/mastercard/developer/utils/EncryptionUtils.java#L95-L100\n+        // this method can save us from importing BouncyCastle as dependency\n+        byte[] pkcs8Header = {0x30, (byte) 0x82, (byte) ((totalLength >> 8) & 0xff), (byte) (totalLength & 0xff),\n+                // Sequence + total length\n+                0x2, 0x1, 0x0, // Integer (0)\n+                0x30, 0xD, 0x6, 0x9, 0x2A, (byte) 0x86, 0x48, (byte) 0x86, (byte) 0xF7, 0xD, 0x1, 0x1, 0x1, 0x5, 0x0,\n+                // Sequence: 1.2.840.113549.1.1.1, NULL\n+                0x4, (byte) 0x82, (byte) ((pkcs1Length >> 8) & 0xff), (byte) (pkcs1Length & 0xff)\n+                // Octet string + length\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3541001eb9cef044b9139edaac2bdcf69a9f001c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzI5NzczOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMzowMlrOHpFqcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMzowMlrOHpFqcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0NjQ1MA==", "bodyText": "nice...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/543#discussion_r512846450", "createdAt": "2020-10-27T16:33:02Z", "author": {"login": "leaf94"}, "path": "pom.xml", "diffHunk": "@@ -101,7 +101,7 @@\n         <dependency>\n             <groupId>com.amazonaws.services</groupId>\n             <artifactId>evergreen</artifactId>\n-            <version>1.0.0-SNAPSHOT</version>\n+            <version>1.0.0-MR-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8545a209407aef29c6bcfdf325be6ca096ead3e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 338, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}