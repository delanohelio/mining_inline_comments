{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDg3Mjk2", "number": 176, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxMzo0OFrODw38wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1MFrODw3_Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc0OTEyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxMzo0OFrOGEHLNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyOTo1OVrOGEHa2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTA0Nw==", "bodyText": "I assume this was for testing locally? We do want to clean.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/176#discussion_r406965047", "createdAt": "2020-04-10T22:13:48Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -78,8 +78,8 @@ void afterEach() {\n     @AfterAll\n     static void afterAll() {\n         // Cleanup all IoT thing resources we created\n-        Utils.cleanAllCreatedThings();\n-        Utils.cleanAllCreatedJobs();\n+        // Utils.cleanAllCreatedThings();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5d761dba290ec3d1ac4707e6f9beb1008615d93"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTA0OQ==", "bodyText": "Yeah. Will clean up.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/176#discussion_r406969049", "createdAt": "2020-04-10T22:29:59Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -78,8 +78,8 @@ void afterEach() {\n     @AfterAll\n     static void afterAll() {\n         // Cleanup all IoT thing resources we created\n-        Utils.cleanAllCreatedThings();\n-        Utils.cleanAllCreatedJobs();\n+        // Utils.cleanAllCreatedThings();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTA0Nw=="}, "originalCommit": {"oid": "b5d761dba290ec3d1ac4707e6f9beb1008615d93"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc1MTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNTowMlrOGEHMfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMTozMVrOGEHcPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTM3Mg==", "bodyText": "Should we unwrap the execution exception to determine if it is retryable or not?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/176#discussion_r406965372", "createdAt": "2020-04-10T22:15:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -56,9 +56,9 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             kernel.mergeInNewConfig(document.getDeploymentId(), document.getTimestamp(), newConfig).get();\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Finish deployment task\");\n-        } catch (PackageVersionConflictException | UnexpectedPackagingException e) {\n+        } catch (PackageVersionConflictException | UnexpectedPackagingException | ExecutionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5d761dba290ec3d1ac4707e6f9beb1008615d93"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTQwNw==", "bodyText": "We should. I think right now we don't have a retryable case. I'll add a comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/176#discussion_r406969407", "createdAt": "2020-04-10T22:31:31Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -56,9 +56,9 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             kernel.mergeInNewConfig(document.getDeploymentId(), document.getTimestamp(), newConfig).get();\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Finish deployment task\");\n-        } catch (PackageVersionConflictException | UnexpectedPackagingException e) {\n+        } catch (PackageVersionConflictException | UnexpectedPackagingException | ExecutionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTM3Mg=="}, "originalCommit": {"oid": "b5d761dba290ec3d1ac4707e6f9beb1008615d93"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc1NTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1MFrOGEHPKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNzoxN1rOGEHhug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjA1Ng==", "bodyText": "I think I have a fix here: https://github.com/aws/aws-greengrass-kernel/pull/175/files#diff-ed690837067a5ad8d1e95dbc8da15ae8R287\nMaking it return true will use break in the state machine. That way the state machine will wait for the next event instead of spinning here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/176#discussion_r406966056", "createdAt": "2020-04-10T22:17:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -289,9 +290,13 @@ private boolean handleCurrentStateBroken(Optional<State> desiredState) {\n         // we'll transition out of BROKEN state to give it a new chance.\n         if (State.NEW.equals(desiredState.get())) {\n             updateStateAndBroadcast(State.NEW);\n-        } else {\n-            logger.atError().setEventType(\"service-broken\")\n-                    .log(\"service is broken. Deployment is needed\");\n+        }\n+        // TODO: (fengwa@) Fix this temporary hack of reducing the busy loop spinning.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(10L).toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5d761dba290ec3d1ac4707e6f9beb1008615d93"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDgxMA==", "bodyText": "Nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/176#discussion_r406970810", "createdAt": "2020-04-10T22:37:17Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -289,9 +290,13 @@ private boolean handleCurrentStateBroken(Optional<State> desiredState) {\n         // we'll transition out of BROKEN state to give it a new chance.\n         if (State.NEW.equals(desiredState.get())) {\n             updateStateAndBroadcast(State.NEW);\n-        } else {\n-            logger.atError().setEventType(\"service-broken\")\n-                    .log(\"service is broken. Deployment is needed\");\n+        }\n+        // TODO: (fengwa@) Fix this temporary hack of reducing the busy loop spinning.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(10L).toMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjA1Ng=="}, "originalCommit": {"oid": "b5d761dba290ec3d1ac4707e6f9beb1008615d93"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4570, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}