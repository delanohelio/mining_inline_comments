{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2Mjk5NjQy", "number": 781, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoyNzo1NVrOFDtpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0OTowOVrOFDvaPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDM3ODgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoyNzo1NVrOIDgJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MTowNlrOIDg5bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MzM5NQ==", "bodyText": "why is this a warning? We have too many logs from IPC already IMO.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540543395", "createdAt": "2020-12-10T22:27:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -41,7 +41,8 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n \n     @Override\n     final protected void onContinuationClosed() {\n-        LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        LOGGER.warn(\"{} stream continuation closed.\", getOperationName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b3c4094f3586488fd12175351b16181a1e077d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTYzMQ==", "bodyText": "Needs to be updated in Sdk code. For now I am changing in nucleus.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540555631", "createdAt": "2020-12-10T22:51:06Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -41,7 +41,8 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n \n     @Override\n     final protected void onContinuationClosed() {\n-        LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        LOGGER.warn(\"{} stream continuation closed.\", getOperationName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MzM5NQ=="}, "originalCommit": {"oid": "76b3c4094f3586488fd12175351b16181a1e077d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDU3Nzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxOToxNVrOIDh7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoxOTo0MFrOIDjdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MjU4Nw==", "bodyText": "every request is a stream, right? seems too many info logs.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540572587", "createdAt": "2020-12-10T23:19:15Z", "author": {"login": "fengwang666"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -162,17 +163,17 @@ final protected OperationContinuationHandlerContext getContext () {\n      */\n     @Override\n     final public CompletableFuture<Void> closeStream() {\n-        LOGGER.debug(\"[{}] closing stream\", getOperationName());\n+        LOGGER.info(\"[{}] closing stream\", getOperationName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzU3Mg==", "bodyText": "Ya we can keep this as debug log", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540597572", "createdAt": "2020-12-11T00:19:40Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -162,17 +163,17 @@ final protected OperationContinuationHandlerContext getContext () {\n      */\n     @Override\n     final public CompletableFuture<Void> closeStream() {\n-        LOGGER.debug(\"[{}] closing stream\", getOperationName());\n+        LOGGER.info(\"[{}] closing stream\", getOperationName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MjU4Nw=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDY2NTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0ODoxNFrOIDisEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDozOToyNlrOIDj5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng==", "bodyText": "Is this correct? In this parent class ServerConnectionContinuationHandler:\n    protected void onContinuationClosed() {\n        this.close();\n    }", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540584976", "createdAt": "2020-12-10T23:48:14Z", "author": {"login": "fengwang666"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -42,6 +42,7 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n     @Override\n     final protected void onContinuationClosed() {\n         LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        continuation.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzI4OA==", "bodyText": "They both seem to ultimately go to same code path for continuation.decRef(). But this.close() seems more safe as it also marks the continuation as null. @DavidOgunsAWS ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540597288", "createdAt": "2020-12-11T00:19:03Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -42,6 +42,7 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n     @Override\n     final protected void onContinuationClosed() {\n         LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        continuation.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMzE4OQ==", "bodyText": "Have verified this.close() also works", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540603189", "createdAt": "2020-12-11T00:35:11Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -42,6 +42,7 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n     @Override\n     final protected void onContinuationClosed() {\n         LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        continuation.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMzg5NQ==", "bodyText": "This is correct. onContinuationClosed() may be invoked via paths not related to known calls that terminate. In these cases, we wouldn't want to miss deRef()ing the object.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540603895", "createdAt": "2020-12-11T00:37:15Z", "author": {"login": "DavidOgunsAWS"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -42,6 +42,7 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n     @Override\n     final protected void onContinuationClosed() {\n         LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        continuation.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNDY3Mw==", "bodyText": "I'm asking why not call super.onContinuationClosed()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540604673", "createdAt": "2020-12-11T00:39:26Z", "author": {"login": "fengwang666"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -42,6 +42,7 @@ public OperationContinuationHandler(final OperationContinuationHandlerContext co\n     @Override\n     final protected void onContinuationClosed() {\n         LOGGER.debug(\"{} stream continuation closed.\", getOperationName());\n+        continuation.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDk3Ng=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDY2ODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0OTowOVrOIDithA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyNzoxN1rOIDjoOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTM0OA==", "bodyText": "This long if condition requires comments.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540585348", "createdAt": "2020-12-10T23:49:09Z", "author": {"login": "fengwang666"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -242,21 +243,29 @@ private void invokeAfterHandleRequest() {\n     }\n \n     @Override\n-    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int i) {\n+    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int messageFlags) {\n         LOGGER.debug(\"Continuation native id: \" + continuation.getNativeHandle());\n-        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n \n+        //We can prevent a client from sending a request, and hanging up before receiving a response\n+        //but doing so will prevent any work from being done\n+        if (initialRequest == null && (messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0) {\n+            LOGGER.warn(\"Not invoking \" + getOperationName() + \" operation for client request received with a terminate flag set to 1\");\n+            return;\n+        }\n+        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n         try {\n             if (initialRequest != null) {\n-                //TODO: FIX empty close messages arrive here and throw exception\n-                final StreamingRequestType streamEvent = serviceModel.fromJson(getStreamingRequestClass(), bytes);\n-                //exceptions occurring during this processing will result in closure of stream\n-                handleStreamEvent(streamEvent);\n+                if ((messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0 && (bytes == null || bytes.length == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5MTM1NA==", "bodyText": "This condition reads \"if the incoming message is terminating the stream and the payload of the message itself is empty.\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540591354", "createdAt": "2020-12-11T00:03:57Z", "author": {"login": "DavidOgunsAWS"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -242,21 +243,29 @@ private void invokeAfterHandleRequest() {\n     }\n \n     @Override\n-    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int i) {\n+    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int messageFlags) {\n         LOGGER.debug(\"Continuation native id: \" + continuation.getNativeHandle());\n-        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n \n+        //We can prevent a client from sending a request, and hanging up before receiving a response\n+        //but doing so will prevent any work from being done\n+        if (initialRequest == null && (messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0) {\n+            LOGGER.warn(\"Not invoking \" + getOperationName() + \" operation for client request received with a terminate flag set to 1\");\n+            return;\n+        }\n+        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n         try {\n             if (initialRequest != null) {\n-                //TODO: FIX empty close messages arrive here and throw exception\n-                final StreamingRequestType streamEvent = serviceModel.fromJson(getStreamingRequestClass(), bytes);\n-                //exceptions occurring during this processing will result in closure of stream\n-                handleStreamEvent(streamEvent);\n+                if ((messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0 && (bytes == null || bytes.length == 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTM0OA=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMDM3Nw==", "bodyText": "I have added the comment to nucleus code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/781#discussion_r540600377", "createdAt": "2020-12-11T00:27:17Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/OperationContinuationHandler.java", "diffHunk": "@@ -242,21 +243,29 @@ private void invokeAfterHandleRequest() {\n     }\n \n     @Override\n-    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int i) {\n+    final protected void onContinuationMessage(List<Header> list, byte[] bytes, MessageType messageType, int messageFlags) {\n         LOGGER.debug(\"Continuation native id: \" + continuation.getNativeHandle());\n-        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n \n+        //We can prevent a client from sending a request, and hanging up before receiving a response\n+        //but doing so will prevent any work from being done\n+        if (initialRequest == null && (messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0) {\n+            LOGGER.warn(\"Not invoking \" + getOperationName() + \" operation for client request received with a terminate flag set to 1\");\n+            return;\n+        }\n+        final EventStreamRPCServiceModel serviceModel = getOperationModelContext().getServiceModel();\n         try {\n             if (initialRequest != null) {\n-                //TODO: FIX empty close messages arrive here and throw exception\n-                final StreamingRequestType streamEvent = serviceModel.fromJson(getStreamingRequestClass(), bytes);\n-                //exceptions occurring during this processing will result in closure of stream\n-                handleStreamEvent(streamEvent);\n+                if ((messageFlags & MessageFlags.TerminateStream.getByteValue()) != 0 && (bytes == null || bytes.length == 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NTM0OA=="}, "originalCommit": {"oid": "667ae3b18bb21b9cb44e87353db6078a22fb3b24"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 152, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}