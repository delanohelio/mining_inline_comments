{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTk0NDQw", "number": 500, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDowODowNlrOEr1ntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjozMzozM1rOEr603A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDAyNzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDowODowNlrOHe1Bpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDowODowNlrOHe1Bpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4ODEwMg==", "bodyText": "Very smart!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/500#discussion_r502088102", "createdAt": "2020-10-09T00:08:06Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -118,32 +117,36 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n \n     private static List<DeploymentPackageConfiguration> buildDeploymentPackageConfigurations(\n             LocalOverrideRequest localOverrideRequest, Map<String, String> newRootComponents) {\n-        List<DeploymentPackageConfiguration> packageConfigurations;\n+        Map<String, DeploymentPackageConfiguration> packageConfigurations;\n \n         // convert Deployment Config from getComponentNameToConfig, which doesn't include root components necessarily\n         if (localOverrideRequest.getComponentNameToConfig() == null || localOverrideRequest.getComponentNameToConfig()\n                 .isEmpty()) {\n-            packageConfigurations = new ArrayList<>();\n+            packageConfigurations = new HashMap<>();\n         } else {\n             packageConfigurations = localOverrideRequest.getComponentNameToConfig().entrySet().stream()\n-                    .map(entry -> new DeploymentPackageConfiguration(entry.getKey(), false, ANY_VERSION,\n-                            entry.getValue())).collect(Collectors.toList());\n+                    .collect(Collectors.toMap(\n+                            Map.Entry::getKey,\n+                            entry -> new DeploymentPackageConfiguration(\n+                                    entry.getKey(), false, ANY_VERSION, entry.getValue())\n+                    ));\n         }\n+\n+        if (localOverrideRequest.getConfigurationUpdate() != null) {\n+            localOverrideRequest.getConfigurationUpdate().forEach((componentName, configUpdate) -> {\n+                packageConfigurations.computeIfAbsent(componentName, DeploymentPackageConfiguration::new);\n+                packageConfigurations.get(componentName).setConfigurationUpdateOperation(configUpdate);\n+                packageConfigurations.get(componentName).setResolvedVersion(ANY_VERSION);\n+            });\n+        }\n+\n         // Add to or update root component with version in the configuration lists\n         newRootComponents.forEach((rootComponentName, version) -> {\n-            Optional<DeploymentPackageConfiguration> optionalConfiguration = packageConfigurations.stream()\n-                    .filter(packageConfiguration -> packageConfiguration.getPackageName().equals(rootComponentName))\n-                    .findAny();\n-\n-            if (optionalConfiguration.isPresent()) {\n-                // if found, update the version requirement to be equal to the requested version\n-                optionalConfiguration.get().setResolvedVersion(version);\n-                optionalConfiguration.get().setRootComponent(true);\n-            } else {\n-                // if not found, create it with version requirement as the requested version\n-                packageConfigurations.add(new DeploymentPackageConfiguration(rootComponentName, true, version, null));\n-            }\n+            DeploymentPackageConfiguration pkg =\n+                    packageConfigurations.computeIfAbsent(rootComponentName, DeploymentPackageConfiguration::new);\n+            pkg.setResolvedVersion(version);\n+            pkg.setRootComponent(true);\n         });\n-        return packageConfigurations;\n+        return new ArrayList<>(packageConfigurations.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c4c1c918ac5ec9c31d0ec9d24f89a9a4676516"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDg4MDI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/model/ConfigurationUpdateOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjozMzozM1rOHe81bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNjozMzozM1rOHe81bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIxNjA0Nw==", "bodyText": "will it be common model?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/500#discussion_r502216047", "createdAt": "2020-10-09T06:33:33Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/deployment/model/ConfigurationUpdateOperation.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.deployment.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+public class ConfigurationUpdateOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c614228f9e69330398e66450e12e071a1f43543d"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 603, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}