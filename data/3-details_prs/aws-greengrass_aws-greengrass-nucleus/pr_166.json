{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDMxNTIz", "number": 166, "title": "[Bug Fix] EG Service's reportState should not lost!", "bodyText": "Do not clear stateEventQueue when adding element to it\nAdd a new boolean latest parameter to globalServiceStateChanged and make the necessary wiring\nFix tests\nIncrease size of stateEventQueue\n\nIssue #, if available:\nP34431396\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-08T19:18:44Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166", "merged": true, "mergeCommit": {"oid": "f3b4428d632318064fae4796da6d5e33ef462026"}, "closed": true, "closedAt": "2020-04-13T20:06:41Z", "author": {"login": "fufranci"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVstdTAH2gAyNDAxMDMxNTIzOjRhN2ZiNjdmYjg1NzA4OWYzMDVmODc1OWVjZWMzM2E3YzljZjA2NTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXUlNWgFqTM5MjQwMDYwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4a7fb67fb857089f305f8759ecec33a7c9cf0652", "committedDate": "2020-04-08T19:03:58Z", "message": "* Do not clear `stateEventQueue` when adding element to it\n* Add a new boolean `latest` parameter to `globalServiceStateChanged` and make the necessary wiring\n* Fix tests\n* Increase size of `stateEventQueue`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjYzMjU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-390263259", "createdAt": "2020-04-08T19:21:53Z", "commit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyMTo1M1rOGC9h5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyMTo1M1rOGC9h5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1ODQzOQ==", "bodyText": "given that these branches are the same, just get rid of the if.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r405758439", "createdAt": "2020-04-08T19:21:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -335,12 +334,11 @@ private void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n+    @SuppressFBWarnings({\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"DB_DUPLICATE_BRANCHES\"})\n     private void enqueueStateEvent(Object event) {\n         synchronized (stateEventLock) {\n             if (event instanceof State) {\n                 // override existing reportState\n-                stateEventQueue.clear();\n                 stateEventQueue.offer(event);\n             } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDQxNDMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-390441431", "createdAt": "2020-04-09T01:50:26Z", "commit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MDoyNlrOGDG2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MDo1NlrOGDG3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTIzMg==", "bodyText": "Nit - You seem to have added some space here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r405911232", "createdAt": "2020-04-09T01:50:26Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -412,7 +410,7 @@ public final void requestReinstall() {\n             setDesiredState(State.INSTALLED, State.NEW, State.RUNNING);\n         }\n     }\n-\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTM0Mg==", "bodyText": "Also please remove the new suppression for findbugs warning", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r405911342", "createdAt": "2020-04-09T01:50:56Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -335,12 +334,11 @@ private void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n+    @SuppressFBWarnings({\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"DB_DUPLICATE_BRANCHES\"})\n     private void enqueueStateEvent(Object event) {\n         synchronized (stateEventLock) {\n             if (event instanceof State) {\n                 // override existing reportState\n-                stateEventQueue.clear();\n                 stateEventQueue.offer(event);\n             } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1ODQzOQ=="}, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c059384653cc3100887da0ff6eade822211962ee", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c059384653cc3100887da0ff6eade822211962ee", "committedDate": "2020-04-09T19:28:48Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f12b54817dc741ec76ced54406faae2e7806dc", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/99f12b54817dc741ec76ced54406faae2e7806dc", "committedDate": "2020-04-09T19:37:00Z", "message": "Removed dead space"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDg2MDMw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-391086030", "createdAt": "2020-04-09T19:51:05Z", "commit": {"oid": "99f12b54817dc741ec76ced54406faae2e7806dc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da17402e6f2ca390677befcdb36e31ce0cb62f9b", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/da17402e6f2ca390677befcdb36e31ce0cb62f9b", "committedDate": "2020-04-09T19:59:45Z", "message": "Merge remote-tracking branch 'origin/master' into report_state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/642fd9f01fcdc580fa50930e7040fb1365e1974a", "committedDate": "2020-04-09T20:10:39Z", "message": "Fix PMD violation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTIyMjU2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-391122256", "createdAt": "2020-04-09T20:49:53Z", "commit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo0OTo1M1rOGDo5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1ODoxOFrOGDpKoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTA0Mg==", "bodyText": "not a problem, but why the change from array to linked?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406469042", "createdAt": "2020-04-09T20:49:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -76,8 +76,7 @@\n \n     // A state event can be a state transition event, or a desired state updated notification.\n     // TODO: make class of StateEvent instead of generic object.\n-    private final BlockingQueue<Object> stateEventQueue = new ArrayBlockingQueue<>(1);\n-    private final Object stateEventLock = new Object();\n+    private final BlockingQueue<Object> stateEventQueue = new LinkedBlockingQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTQ1Mw==", "bodyText": "remove print stack trace.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406469453", "createdAt": "2020-04-09T20:50:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);\n+        } catch (InterruptedException e) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTk2Ng==", "bodyText": "this put is blocking, so it won't be able to put until there is room. Is this what we want? If so, we need to be careful with the InterruptedException since that means that the thread wants to be shutdown. As such, that signal should be propagated by not catching it, but changing the signature instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406469966", "createdAt": "2020-04-09T20:51:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDM5OA==", "bodyText": "you can also use AtomicInteger for this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406470398", "createdAt": "2020-04-09T20:52:29Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -15,11 +17,23 @@\n import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n+import javax.inject.Inject;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n @ExtendWith(MockitoExtension.class)\n-class EvergreenServiceTest extends EGServiceTestUtil {\n+public class EvergreenServiceTest extends EGServiceTestUtil {\n+    private static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final int NUM = 100;\n \n-    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static int n = 0; // Easy way to pass n without creating a mutable integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MTc0Nw==", "bodyText": "do not await without a timeout. Use assertTrue(cd.await(<timeout>))", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406471747", "createdAt": "2020-04-09T20:55:01Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;\n+        });\n+\n+        context.get(AwesomeService.class).requestStart();\n+        cd.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3Mjk1OQ==", "bodyText": "don't report stopping as no customer service should ever do this. Try ERRORED instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406472959", "createdAt": "2020-04-09T20:57:32Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MzM3Ng==", "bodyText": "Why not have this be a countdownlatch also? That way you can wait for it to reach 0 instead of just sleeping 10 seconds.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406473376", "createdAt": "2020-04-09T20:58:18Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTgzMzU3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-391183357", "createdAt": "2020-04-09T22:57:16Z", "commit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo1NzoxNlrOGDsGhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo1NzoxNlrOGDsGhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTQ3OQ==", "bodyText": "NIT: add \"interrupted\" in the error message", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406521479", "createdAt": "2020-04-09T22:57:16Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);\n+        } catch (InterruptedException e) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e8bc89bf816248773a337cd14098258c7b51f7", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5e8bc89bf816248773a337cd14098258c7b51f7", "committedDate": "2020-04-10T00:37:24Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a10fbad6785762c26c8a4cb4ea1f03ba53d5a781", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a10fbad6785762c26c8a4cb4ea1f03ba53d5a781", "committedDate": "2020-04-10T16:19:18Z", "message": "Merge remote-tracking branch 'origin/master' into report_state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTM4MDk2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-391538096", "createdAt": "2020-04-10T16:37:38Z", "commit": {"oid": "a10fbad6785762c26c8a4cb4ea1f03ba53d5a781"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozNzozOFrOGD_cHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozNzozOFrOGD_cHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODMwMg==", "bodyText": "this can be removed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406838302", "createdAt": "2020-04-10T16:37:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -197,18 +197,8 @@ void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10fbad6785762c26c8a4cb4ea1f03ba53d5a781"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "015a88caaa7fadfd503a9e2fd80f004783ba998e", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/015a88caaa7fadfd503a9e2fd80f004783ba998e", "committedDate": "2020-04-10T16:54:35Z", "message": "Remove unnecessary SuppressFBWarnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97c2518e21824378421016481fb77be0de87c094", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/97c2518e21824378421016481fb77be0de87c094", "committedDate": "2020-04-10T18:58:31Z", "message": "address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjIwMDk5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-391620099", "createdAt": "2020-04-10T19:29:03Z", "commit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOTowNFrOGEDruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOTowNFrOGEDruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzMg==", "bodyText": "please add comments for what is going on here and why.\nThis seems a bit dangerous to me since we use the queue to unblock the thread, but here you're going to be removing things from the queue, possibly racing with the lifecycle thread it would seem.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406907832", "createdAt": "2020-04-10T19:29:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -145,7 +145,11 @@ synchronized void reportState(State newState) {\n \n     private Optional<State> getReportState() {\n         Object top = stateEventQueue.poll();\n-        if (top instanceof State) {\n+        while (top != null && !(top instanceof State)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjUyMjc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-392252274", "createdAt": "2020-04-13T16:19:40Z", "commit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoxOTo0MFrOGEr3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoxOTo0MFrOGEr3Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NjE1NA==", "bodyText": "I'd still prefer using the logic of\nif (event instanceof State || stateEventQueue.emtpy()) {\n  stateEventQueue.offer(event);\n} \n\nrequire lifecycle change calls can be invoked arbitrary many times, causing the \"DesiredStateUpdated\" event to accumulate in the queue.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407566154", "createdAt": "2020-04-13T16:19:40Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -195,20 +199,9 @@ void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        if (!stateEventQueue.offer(event)) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65ce5d92be64049a795d80c3f4d419dc8c1f91e7", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/65ce5d92be64049a795d80c3f4d419dc8c1f91e7", "committedDate": "2020-04-13T17:02:20Z", "message": "Merge branch 'master' into report_state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjg0NzE2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-392284716", "createdAt": "2020-04-13T17:09:04Z", "commit": {"oid": "65ce5d92be64049a795d80c3f4d419dc8c1f91e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowOTowNVrOGEtglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowOTowNVrOGEtglg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzExMA==", "bodyText": "isEmpty isn't necessarily correct given that it contains both states and strings, but this state change is only for states.\nI think that given this limitation, I'd rather not have the latest argument added to this. Also, since none of your changes are using the latest at all. Let's reinvestigate if we need it at a later date. For now, I'm happy to just have the fix to unbound the queue.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407593110", "createdAt": "2020-04-13T17:09:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -100,7 +99,8 @@ private void updateStateAndBroadcast(State newState) {\n         synchronized (State.class) {\n             prevState = currentState;\n             stateTopic.withValue(newState);\n-            evergreenService.getContext().globalNotifyStateChanged(evergreenService, prevState, newState);\n+            evergreenService.getContext().globalNotifyStateChanged(evergreenService, prevState, newState,\n+                    stateEventQueue.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65ce5d92be64049a795d80c3f4d419dc8c1f91e7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9935cc03b7bab092cd0d80d8f8150d8e9cd80417", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9935cc03b7bab092cd0d80d8f8150d8e9cd80417", "committedDate": "2020-04-13T17:54:51Z", "message": "remove `latest`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzMxMDky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-392331092", "createdAt": "2020-04-13T18:17:57Z", "commit": {"oid": "9935cc03b7bab092cd0d80d8f8150d8e9cd80417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoxNzo1OFrOGEv2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoxNzo1OFrOGEv2ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMTQ2MA==", "bodyText": "Why keep this at all?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407631460", "createdAt": "2020-04-13T18:17:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -257,9 +257,10 @@ public synchronized void removeGlobalStateChangeListener(GlobalStateChangeListen\n      * @param changedService the service which had a state change\n      * @param oldState  the old state of the service\n      * @param newState the new state of the service\n+     * @param latest True if this is the latest state. False if there are more state changes coming.\n      */\n     public synchronized void globalNotifyStateChanged(EvergreenService changedService, final State oldState,\n-                                                      final State newState) {\n+                                                      final State newState, boolean latest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9935cc03b7bab092cd0d80d8f8150d8e9cd80417"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4b3be0d89acb92246c62ce5b8fd4fa66fdded1c", "author": {"user": {"login": "fufranci", "name": "Francis Fu"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4b3be0d89acb92246c62ce5b8fd4fa66fdded1c", "committedDate": "2020-04-13T18:28:44Z", "message": "Missed some `latest` usage.\nRemoved them as well."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzU0Nzg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-392354788", "createdAt": "2020-04-13T18:53:44Z", "commit": {"oid": "f4b3be0d89acb92246c62ce5b8fd4fa66fdded1c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzYzNTM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-392363538", "createdAt": "2020-04-13T19:06:46Z", "commit": {"oid": "f4b3be0d89acb92246c62ce5b8fd4fa66fdded1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c9a306c0935a66bb47e7c60269b634522b4041b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1c9a306c0935a66bb47e7c60269b634522b4041b", "committedDate": "2020-04-13T19:33:10Z", "message": "Merge branch 'master' into report_state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDAwNjA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#pullrequestreview-392400606", "createdAt": "2020-04-13T20:05:05Z", "commit": {"oid": "1c9a306c0935a66bb47e7c60269b634522b4041b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2428, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}