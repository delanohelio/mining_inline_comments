{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTQ2MjYx", "number": 125, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MjoyNFrODpnaNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNDo1N1rODp-QYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTYzODk0OnYy", "diffSide": "RIGHT", "path": "src/it/java/com/aws/iot/evergreen/it/kernel/KernelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MjoyNFrOF4575A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTowNDowM1rOF48esQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzc5Ng==", "bodyText": "Let's get rid of reading from the log file here. Set it to console and refactor the test to use the log watcher capability.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395213796", "createdAt": "2020-03-19T17:52:24Z", "author": {"login": "MikeDombo"}, "path": "src/it/java/com/aws/iot/evergreen/it/kernel/KernelTest.java", "diffHunk": "@@ -22,48 +22,115 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n @ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n     private static final String LOG_FILE_NAME = \"KernelTest.log\";\n     private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n \n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n-    }\n+\n+    private static final ExpectedMessage[] EXPECTED_MESSAGES = {new ExpectedMessage(0, \"MAIN IS RUNNING\", \"Main service\"),\n+            //new ExpectedMessage(\"docs.docker.com/\", \"docker hello world\"),\n+            new ExpectedMessage(0, \"tick-tock\", \"periodic\", 3), new ExpectedMessage(0, \"ANSWER=42\", \"global setenv\"),\n+            new ExpectedMessage(0, \"EVERGREEN_UID=\", \"generated unique token\"),\n+            new ExpectedMessage(0, \"version: 0.12.1\", \"moquette mqtt server\"),\n+            new ExpectedMessage(0, \"JUSTME=fancy a spot of tea?\", \"local setenv in main service\"),\n+            new ExpectedMessage(1, \"NEWMAIN\", \"Assignment to 'run' script'\"),\n+            new ExpectedMessage(2, \"JUSTME=fancy a spot of coffee?\", \"merge yaml\"),\n+            new ExpectedMessage(2, \"I'm Frodo\", \"merge adding dependency\")};\n+\n+    private static final CountDownLatch[] COUNT_DOWN_LATCHES =\n+            {new CountDownLatch(6), new CountDownLatch(1), new CountDownLatch(2)};\n \n     @BeforeAll\n     static void beforeAll() {\n         // TODO Refactor with Log Listener\n         // override log store to a file for legacy kernel test to verify logs\n-        System.setProperty(\"log.fmt\", \"JSON\");\n         System.setProperty(\"log.store\", \"FILE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1NTQ3Mw==", "bodyText": "Did it. Was able to remove all of this and tests get simplified a lot!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395255473", "createdAt": "2020-03-19T19:04:03Z", "author": {"login": "leaf94"}, "path": "src/it/java/com/aws/iot/evergreen/it/kernel/KernelTest.java", "diffHunk": "@@ -22,48 +22,115 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n @ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n     private static final String LOG_FILE_NAME = \"KernelTest.log\";\n     private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n \n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n-    }\n+\n+    private static final ExpectedMessage[] EXPECTED_MESSAGES = {new ExpectedMessage(0, \"MAIN IS RUNNING\", \"Main service\"),\n+            //new ExpectedMessage(\"docs.docker.com/\", \"docker hello world\"),\n+            new ExpectedMessage(0, \"tick-tock\", \"periodic\", 3), new ExpectedMessage(0, \"ANSWER=42\", \"global setenv\"),\n+            new ExpectedMessage(0, \"EVERGREEN_UID=\", \"generated unique token\"),\n+            new ExpectedMessage(0, \"version: 0.12.1\", \"moquette mqtt server\"),\n+            new ExpectedMessage(0, \"JUSTME=fancy a spot of tea?\", \"local setenv in main service\"),\n+            new ExpectedMessage(1, \"NEWMAIN\", \"Assignment to 'run' script'\"),\n+            new ExpectedMessage(2, \"JUSTME=fancy a spot of coffee?\", \"merge yaml\"),\n+            new ExpectedMessage(2, \"I'm Frodo\", \"merge adding dependency\")};\n+\n+    private static final CountDownLatch[] COUNT_DOWN_LATCHES =\n+            {new CountDownLatch(6), new CountDownLatch(1), new CountDownLatch(2)};\n \n     @BeforeAll\n     static void beforeAll() {\n         // TODO Refactor with Log Listener\n         // override log store to a file for legacy kernel test to verify logs\n-        System.setProperty(\"log.fmt\", \"JSON\");\n         System.setProperty(\"log.store\", \"FILE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzc5Ng=="}, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTY0NDQ4OnYy", "diffSide": "RIGHT", "path": "src/it/java/com/aws/iot/evergreen/it/kernel/KernelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1Mzo0OVrOF45_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjoyNTozMlrOF5kySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNDcwOQ==", "bodyText": "Combine these strings.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395214709", "createdAt": "2020-03-19T17:53:49Z", "author": {"login": "MikeDombo"}, "path": "src/it/java/com/aws/iot/evergreen/it/kernel/KernelTest.java", "diffHunk": "@@ -22,48 +22,115 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n @ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n     private static final String LOG_FILE_NAME = \"KernelTest.log\";\n     private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n \n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n-    }\n+\n+    private static final ExpectedMessage[] EXPECTED_MESSAGES = {new ExpectedMessage(0, \"MAIN IS RUNNING\", \"Main service\"),\n+            //new ExpectedMessage(\"docs.docker.com/\", \"docker hello world\"),\n+            new ExpectedMessage(0, \"tick-tock\", \"periodic\", 3), new ExpectedMessage(0, \"ANSWER=42\", \"global setenv\"),\n+            new ExpectedMessage(0, \"EVERGREEN_UID=\", \"generated unique token\"),\n+            new ExpectedMessage(0, \"version: 0.12.1\", \"moquette mqtt server\"),\n+            new ExpectedMessage(0, \"JUSTME=fancy a spot of tea?\", \"local setenv in main service\"),\n+            new ExpectedMessage(1, \"NEWMAIN\", \"Assignment to 'run' script'\"),\n+            new ExpectedMessage(2, \"JUSTME=fancy a spot of coffee?\", \"merge yaml\"),\n+            new ExpectedMessage(2, \"I'm Frodo\", \"merge adding dependency\")};\n+\n+    private static final CountDownLatch[] COUNT_DOWN_LATCHES =\n+            {new CountDownLatch(6), new CountDownLatch(1), new CountDownLatch(2)};\n \n     @BeforeAll\n     static void beforeAll() {\n         // TODO Refactor with Log Listener\n         // override log store to a file for legacy kernel test to verify logs\n-        System.setProperty(\"log.fmt\", \"JSON\");\n         System.setProperty(\"log.store\", \"FILE\");\n         System.setProperty(\"log.level\", \"INFO\");\n         System.setProperty(\"log.storeName\", LOG_FILE_PATH_NAME);\n         System.out.println(\"Storing log to: \" + LOG_FILE_PATH_NAME);\n     }\n \n     @Test\n-    void testErrorRetry() throws InterruptedException {\n+    void GIVEN_the_ultimate_config_WHEN_kernel_starts_THEN_services_starts_with_env_set() throws Exception {\n+\n+        // start logWatcher with a separate thread\n+        new Thread(getLogWatcher()).start();\n+\n+        // launch kernel\n         Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-i\", getClass().getResource(\"config_broken.yaml\").toString());\n+        kernel.parseArgs(\"-i\", this.getClass().getResource(\"config.yaml\").toString());\n+        kernel.launch();\n+\n+        testGroup(0);\n+        System.out.println(\"Group 0 passed, now for the harder stuff\");\n+\n+        kernel.find(\"services\", \"main\", \"lifecycle\", \"run\")\n+                .setValue(\"while true; do\\n\" + \"        date; sleep 5; echo NEWMAIN\\n\" + \"     \" + \"   done\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNTg1MA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395915850", "createdAt": "2020-03-20T22:25:32Z", "author": {"login": "leaf94"}, "path": "src/it/java/com/aws/iot/evergreen/it/kernel/KernelTest.java", "diffHunk": "@@ -22,48 +22,115 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n @ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n     private static final String LOG_FILE_NAME = \"KernelTest.log\";\n     private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n \n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n-    }\n+\n+    private static final ExpectedMessage[] EXPECTED_MESSAGES = {new ExpectedMessage(0, \"MAIN IS RUNNING\", \"Main service\"),\n+            //new ExpectedMessage(\"docs.docker.com/\", \"docker hello world\"),\n+            new ExpectedMessage(0, \"tick-tock\", \"periodic\", 3), new ExpectedMessage(0, \"ANSWER=42\", \"global setenv\"),\n+            new ExpectedMessage(0, \"EVERGREEN_UID=\", \"generated unique token\"),\n+            new ExpectedMessage(0, \"version: 0.12.1\", \"moquette mqtt server\"),\n+            new ExpectedMessage(0, \"JUSTME=fancy a spot of tea?\", \"local setenv in main service\"),\n+            new ExpectedMessage(1, \"NEWMAIN\", \"Assignment to 'run' script'\"),\n+            new ExpectedMessage(2, \"JUSTME=fancy a spot of coffee?\", \"merge yaml\"),\n+            new ExpectedMessage(2, \"I'm Frodo\", \"merge adding dependency\")};\n+\n+    private static final CountDownLatch[] COUNT_DOWN_LATCHES =\n+            {new CountDownLatch(6), new CountDownLatch(1), new CountDownLatch(2)};\n \n     @BeforeAll\n     static void beforeAll() {\n         // TODO Refactor with Log Listener\n         // override log store to a file for legacy kernel test to verify logs\n-        System.setProperty(\"log.fmt\", \"JSON\");\n         System.setProperty(\"log.store\", \"FILE\");\n         System.setProperty(\"log.level\", \"INFO\");\n         System.setProperty(\"log.storeName\", LOG_FILE_PATH_NAME);\n         System.out.println(\"Storing log to: \" + LOG_FILE_PATH_NAME);\n     }\n \n     @Test\n-    void testErrorRetry() throws InterruptedException {\n+    void GIVEN_the_ultimate_config_WHEN_kernel_starts_THEN_services_starts_with_env_set() throws Exception {\n+\n+        // start logWatcher with a separate thread\n+        new Thread(getLogWatcher()).start();\n+\n+        // launch kernel\n         Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-i\", getClass().getResource(\"config_broken.yaml\").toString());\n+        kernel.parseArgs(\"-i\", this.getClass().getResource(\"config.yaml\").toString());\n+        kernel.launch();\n+\n+        testGroup(0);\n+        System.out.println(\"Group 0 passed, now for the harder stuff\");\n+\n+        kernel.find(\"services\", \"main\", \"lifecycle\", \"run\")\n+                .setValue(\"while true; do\\n\" + \"        date; sleep 5; echo NEWMAIN\\n\" + \"     \" + \"   done\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNDcwOQ=="}, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTY0OTkxOnYy", "diffSide": "LEFT", "path": "src/it/resources/com/aws/iot/evergreen/it/kernel/config_broken.yaml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1NToxOFrOF46C-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToxNTowNlrOF481yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTYxMQ==", "bodyText": "Why are we removing this stuff? I thought it was used in our assertions?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395215611", "createdAt": "2020-03-19T17:55:18Z", "author": {"login": "MikeDombo"}, "path": "src/it/resources/com/aws/iot/evergreen/it/kernel/config_broken.yaml", "diffHunk": "@@ -26,18 +26,10 @@ services:\n       install:\n         all: echo All installed\n       run: |-\n-        echo $PATH\n-        pwd\n-        printenv\n-        echo RUNNING\n+        echo main of config_broken is running\n         while true; do\n         date; sleep 5;\n         done\n-      download:\n-        hw.jar: http://foo/hw.jar\n     dependencies:\n       - installErrorRetry\n-      - runErrorRetry\n-    setenv:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1ODQyMQ==", "bodyText": "I removed some other unrelated entries. runErrorRetry didn't get removed. I think because now this becomes end of line, diff displays removing original line and adding same line with a EOF at the end", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395258421", "createdAt": "2020-03-19T19:09:34Z", "author": {"login": "leaf94"}, "path": "src/it/resources/com/aws/iot/evergreen/it/kernel/config_broken.yaml", "diffHunk": "@@ -26,18 +26,10 @@ services:\n       install:\n         all: echo All installed\n       run: |-\n-        echo $PATH\n-        pwd\n-        printenv\n-        echo RUNNING\n+        echo main of config_broken is running\n         while true; do\n         date; sleep 5;\n         done\n-      download:\n-        hw.jar: http://foo/hw.jar\n     dependencies:\n       - installErrorRetry\n-      - runErrorRetry\n-    setenv:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTYxMQ=="}, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1OTU2NQ==", "bodyText": "I was referring to the setenv. Why was that stuff, and the things below it removed?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395259565", "createdAt": "2020-03-19T19:11:44Z", "author": {"login": "MikeDombo"}, "path": "src/it/resources/com/aws/iot/evergreen/it/kernel/config_broken.yaml", "diffHunk": "@@ -26,18 +26,10 @@ services:\n       install:\n         all: echo All installed\n       run: |-\n-        echo $PATH\n-        pwd\n-        printenv\n-        echo RUNNING\n+        echo main of config_broken is running\n         while true; do\n         date; sleep 5;\n         done\n-      download:\n-        hw.jar: http://foo/hw.jar\n     dependencies:\n       - installErrorRetry\n-      - runErrorRetry\n-    setenv:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTYxMQ=="}, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2MTM4NA==", "bodyText": "Those are not used for assertions for the error retry test. The Error retry test just verifies expected state transitions happens for 3 services.\nI think we just copied the entire main from the original config.yaml...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395261384", "createdAt": "2020-03-19T19:15:06Z", "author": {"login": "leaf94"}, "path": "src/it/resources/com/aws/iot/evergreen/it/kernel/config_broken.yaml", "diffHunk": "@@ -26,18 +26,10 @@ services:\n       install:\n         all: echo All installed\n       run: |-\n-        echo $PATH\n-        pwd\n-        printenv\n-        echo RUNNING\n+        echo main of config_broken is running\n         while true; do\n         date; sleep 5;\n         done\n-      download:\n-        hw.jar: http://foo/hw.jar\n     dependencies:\n       - installErrorRetry\n-      - runErrorRetry\n-    setenv:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNTYxMQ=="}, "originalCommit": {"oid": "b48391f64778912c90f9f3ce8158b4c19002d50b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY2ODI2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0OToxMFrOF5EHaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo1OToyN1rOF5b8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MDU4NA==", "bodyText": "should this be inside the test case? same as COUNT_DOWN_LATCHES", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395380584", "createdAt": "2020-03-19T23:49:10Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -7,63 +7,104 @@\n import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n import com.aws.iot.evergreen.kernel.EvergreenService;\n import com.aws.iot.evergreen.kernel.Kernel;\n-import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.fasterxml.jackson.jr.ob.JSON;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n \n-import java.io.File;\n-import java.io.RandomAccessFile;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n-    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n-\n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n+    private static final ExpectedStdoutPattern[] EXPECTED_MESSAGES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1509ba289f5e33f68b17ae5d438abb8ebbcbdcd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODIyNQ==", "bodyText": "Yeah. It could. Third option is this could also be encapsulated in some private method. I'd prefer leaving it at outside of the test \"main\", so that test \"main\" is small and readable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395758225", "createdAt": "2020-03-20T16:37:57Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -7,63 +7,104 @@\n import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n import com.aws.iot.evergreen.kernel.EvergreenService;\n import com.aws.iot.evergreen.kernel.Kernel;\n-import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.fasterxml.jackson.jr.ob.JSON;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n \n-import java.io.File;\n-import java.io.RandomAccessFile;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n-    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n-\n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n+    private static final ExpectedStdoutPattern[] EXPECTED_MESSAGES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MDU4NA=="}, "originalCommit": {"oid": "e1509ba289f5e33f68b17ae5d438abb8ebbcbdcd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDk2MQ==", "bodyText": "Also they are used in other helper methods. Class fields just reduced the extra work passing local variables around.\nPersonally I actually prefer keeping variables \"local\" to provide stronger context, but I guess people still enjoy the easiness brought by the global variable... So for now, I think both ways are fine for our team. We could definitely push for some team convention if necessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395770961", "createdAt": "2020-03-20T16:59:27Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -7,63 +7,104 @@\n import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n import com.aws.iot.evergreen.kernel.EvergreenService;\n import com.aws.iot.evergreen.kernel.Kernel;\n-import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.fasterxml.jackson.jr.ob.JSON;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n \n-import java.io.File;\n-import java.io.RandomAccessFile;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n-    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n-\n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n+    private static final ExpectedStdoutPattern[] EXPECTED_MESSAGES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MDU4NA=="}, "originalCommit": {"oid": "e1509ba289f5e33f68b17ae5d438abb8ebbcbdcd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3MjMyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MTo0NlrOF5EJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjozNjowNFrOF5bGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTI0Ng==", "bodyText": "Arrow Anti Pattern", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395381246", "createdAt": "2020-03-19T23:51:46Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -7,63 +7,104 @@\n import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n import com.aws.iot.evergreen.kernel.EvergreenService;\n import com.aws.iot.evergreen.kernel.Kernel;\n-import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.fasterxml.jackson.jr.ob.JSON;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n \n-import java.io.File;\n-import java.io.RandomAccessFile;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n-    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n-\n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n+    private static final ExpectedStdoutPattern[] EXPECTED_MESSAGES =\n+            {new ExpectedStdoutPattern(0, \"MAIN IS RUNNING\", \"Main service\"),\n+                    //new ExpectedStdoutPattern(\"docs.docker.com/\", \"docker hello world\"),\n+                    new ExpectedStdoutPattern(0, \"tick-tock\", \"periodic\", 3),\n+                    new ExpectedStdoutPattern(0, \"ANSWER=42\", \"global setenv\"),\n+                    new ExpectedStdoutPattern(0, \"EVERGREEN_UID=\", \"generated unique token\"),\n+                    new ExpectedStdoutPattern(0, \"version: 0.12.1\", \"moquette mqtt server\"),\n+                    new ExpectedStdoutPattern(0, \"JUSTME=fancy a spot of tea?\", \"local setenv in main service\"),\n+                    new ExpectedStdoutPattern(1, \"NEWMAIN\", \"Assignment to 'run' script'\"),\n+                    new ExpectedStdoutPattern(2, \"JUSTME=fancy a spot of coffee?\", \"merge yaml\"),\n+                    new ExpectedStdoutPattern(2, \"I'm Frodo\", \"merge adding dependency\")};\n+\n+    private static final CountDownLatch[] COUNT_DOWN_LATCHES =\n+            {new CountDownLatch(6), new CountDownLatch(1), new CountDownLatch(2)};\n+\n+    @Test\n+    void GIVEN_expected_stdout_patterns_WHEN_kernel_launches_THEN_all_expected_patterns_are_seen() throws Exception {\n+\n+        // add log listener to verify stdout pattern\n+        Consumer<EvergreenStructuredLogMessage> logListener = getLogListener();\n+        Log4jLogEventBuilder.addGlobalListener(logListener);\n+\n+        // launch kernel\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", this.getClass().getResource(\"config.yaml\").toString());\n+        kernel.launch();\n+\n+        testGroup(0);\n+        System.out.println(\"Group 0 passed, now for the harder stuff\");\n+\n+        kernel.find(\"services\", \"main\", \"lifecycle\", \"run\")\n+                .setValue(\"while true; do\\ndate; sleep 5; echo NEWMAIN\\ndone\");\n+        testGroup(1);\n+\n+        System.out.println(\"Group 1 passed, now merging delta.yaml\");\n+        kernel.mergeInNewConfig(\"ID\", System.currentTimeMillis(),\n+                (Map<Object, Object>) JSON.std.with(new YAMLFactory()).anyFrom(getClass().getResource(\"delta.yaml\")))\n+                .get(60, TimeUnit.SECONDS);\n+        testGroup(2);\n+        System.out.println(\"Group 2 passed. We made integrationtests.\");\n+\n+        // clean up\n+        Log4jLogEventBuilder.removeGlobalListener(logListener);\n+\n+        kernel.shutdown();\n     }\n \n-    @BeforeAll\n-    static void beforeAll() {\n-        // TODO Refactor with Log Listener\n-        // override log store to a file for legacy kernel test to verify logs\n-        System.setProperty(\"log.fmt\", \"JSON\");\n-        System.setProperty(\"log.store\", \"FILE\");\n-        System.setProperty(\"log.level\", \"INFO\");\n-        System.setProperty(\"log.storeName\", LOG_FILE_PATH_NAME);\n-        System.out.println(\"Storing log to: \" + LOG_FILE_PATH_NAME);\n+    private Consumer<EvergreenStructuredLogMessage> getLogListener() {\n+        return evergreenStructuredLogMessage -> {\n+            String stdoutStr = evergreenStructuredLogMessage.getContexts().get(\"stdout\");\n+\n+            if (stdoutStr != null && stdoutStr.length() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1509ba289f5e33f68b17ae5d438abb8ebbcbdcd"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1NzA5MA==", "bodyText": "Good catch! I've upgraded it!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395757090", "createdAt": "2020-03-20T16:36:04Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -7,63 +7,104 @@\n import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n import com.aws.iot.evergreen.kernel.EvergreenService;\n import com.aws.iot.evergreen.kernel.Kernel;\n-import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import com.fasterxml.jackson.jr.ob.JSON;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n \n-import java.io.File;\n-import java.io.RandomAccessFile;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n class KernelTest extends AbstractBaseITCase {\n-    static final int[] gc = new int[10];\n-    static final CountDownLatch[] OK = new CountDownLatch[10];\n-    private static final Expected[] expectations = {new Expected(0, \"\\\"stdout\\\":\\\"RUNNING\\\"\", \"Main service\"),\n-            //new Expected(\"docs.docker.com/\", \"docker hello world\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"tick-tock\\\"\", \"periodic\", 3),\n-            new Expected(0, \"\\\"stdout\\\":\\\"ANSWER=42\\\"\", \"global setenv\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"EVERGREEN_UID=\", \"generated unique token\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"version: 0.12.1\\\"\", \"moquette mqtt server\"),\n-            new Expected(0, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of tea?\\\"\", \"local setenv in main service\"),\n-            new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n-            new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n-    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n-\n-    static {\n-        for (int i = gc.length; --i >= 0; ) {\n-            OK[i] = new CountDownLatch(gc[i]);\n-        }\n+    private static final ExpectedStdoutPattern[] EXPECTED_MESSAGES =\n+            {new ExpectedStdoutPattern(0, \"MAIN IS RUNNING\", \"Main service\"),\n+                    //new ExpectedStdoutPattern(\"docs.docker.com/\", \"docker hello world\"),\n+                    new ExpectedStdoutPattern(0, \"tick-tock\", \"periodic\", 3),\n+                    new ExpectedStdoutPattern(0, \"ANSWER=42\", \"global setenv\"),\n+                    new ExpectedStdoutPattern(0, \"EVERGREEN_UID=\", \"generated unique token\"),\n+                    new ExpectedStdoutPattern(0, \"version: 0.12.1\", \"moquette mqtt server\"),\n+                    new ExpectedStdoutPattern(0, \"JUSTME=fancy a spot of tea?\", \"local setenv in main service\"),\n+                    new ExpectedStdoutPattern(1, \"NEWMAIN\", \"Assignment to 'run' script'\"),\n+                    new ExpectedStdoutPattern(2, \"JUSTME=fancy a spot of coffee?\", \"merge yaml\"),\n+                    new ExpectedStdoutPattern(2, \"I'm Frodo\", \"merge adding dependency\")};\n+\n+    private static final CountDownLatch[] COUNT_DOWN_LATCHES =\n+            {new CountDownLatch(6), new CountDownLatch(1), new CountDownLatch(2)};\n+\n+    @Test\n+    void GIVEN_expected_stdout_patterns_WHEN_kernel_launches_THEN_all_expected_patterns_are_seen() throws Exception {\n+\n+        // add log listener to verify stdout pattern\n+        Consumer<EvergreenStructuredLogMessage> logListener = getLogListener();\n+        Log4jLogEventBuilder.addGlobalListener(logListener);\n+\n+        // launch kernel\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", this.getClass().getResource(\"config.yaml\").toString());\n+        kernel.launch();\n+\n+        testGroup(0);\n+        System.out.println(\"Group 0 passed, now for the harder stuff\");\n+\n+        kernel.find(\"services\", \"main\", \"lifecycle\", \"run\")\n+                .setValue(\"while true; do\\ndate; sleep 5; echo NEWMAIN\\ndone\");\n+        testGroup(1);\n+\n+        System.out.println(\"Group 1 passed, now merging delta.yaml\");\n+        kernel.mergeInNewConfig(\"ID\", System.currentTimeMillis(),\n+                (Map<Object, Object>) JSON.std.with(new YAMLFactory()).anyFrom(getClass().getResource(\"delta.yaml\")))\n+                .get(60, TimeUnit.SECONDS);\n+        testGroup(2);\n+        System.out.println(\"Group 2 passed. We made integrationtests.\");\n+\n+        // clean up\n+        Log4jLogEventBuilder.removeGlobalListener(logListener);\n+\n+        kernel.shutdown();\n     }\n \n-    @BeforeAll\n-    static void beforeAll() {\n-        // TODO Refactor with Log Listener\n-        // override log store to a file for legacy kernel test to verify logs\n-        System.setProperty(\"log.fmt\", \"JSON\");\n-        System.setProperty(\"log.store\", \"FILE\");\n-        System.setProperty(\"log.level\", \"INFO\");\n-        System.setProperty(\"log.storeName\", LOG_FILE_PATH_NAME);\n-        System.out.println(\"Storing log to: \" + LOG_FILE_PATH_NAME);\n+    private Consumer<EvergreenStructuredLogMessage> getLogListener() {\n+        return evergreenStructuredLogMessage -> {\n+            String stdoutStr = evergreenStructuredLogMessage.getContexts().get(\"stdout\");\n+\n+            if (stdoutStr != null && stdoutStr.length() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTI0Ng=="}, "originalCommit": {"oid": "e1509ba289f5e33f68b17ae5d438abb8ebbcbdcd"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM4MDYyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNDoyNlrOF5eyJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo0NzoxNFrOF5kFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzUxMA==", "bodyText": "make this extend the baseit?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395817510", "createdAt": "2020-03-20T18:24:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -49,13 +47,12 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-public class DeploymentServiceIntegrationTest {\n+class DeploymentServiceIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d6a939cf22e998f5ff1cce26941c419cf38a37d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNDMxOQ==", "bodyText": "Unfortunately this one can't... Coz it needs a static path and baseit provides it as instance var.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395904319", "createdAt": "2020-03-20T21:47:14Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -49,13 +47,12 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-@ExtendWith(PerformanceReporting.class)\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-public class DeploymentServiceIntegrationTest {\n+class DeploymentServiceIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzUxMA=="}, "originalCommit": {"oid": "4d6a939cf22e998f5ff1cce26941c419cf38a37d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM4MjA5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNDo1N1rOF5ezIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMDowNFrOF5kVpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzc2Mg==", "bodyText": "why remove the extend?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395817762", "createdAt": "2020-03-20T18:24:57Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -42,17 +41,21 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-@ExtendWith(PerformanceReporting.class)\n-class IPCServicesTest extends AbstractBaseITCase {\n+class IPCServicesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d6a939cf22e998f5ff1cce26941c419cf38a37d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODUxOA==", "bodyText": "So the problem is that as of now, two of our integration test classes, that create one kernel per class, need the root static, while other 5 that creates one kernel per test, need a different root path for every test.\nSo I changed the baseIT to provide the root path in @BeforeEach to provide every test a different temp directory to be safe. That also means it can't provide the static path, therefore baseIT can't be used by tests that need static path.\nI was thinking even removing base IT once... But maybe that still has value since most of our tests initialize a new kernel per @Test", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/125#discussion_r395908518", "createdAt": "2020-03-20T22:00:04Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -42,17 +41,21 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-@ExtendWith(PerformanceReporting.class)\n-class IPCServicesTest extends AbstractBaseITCase {\n+class IPCServicesTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzc2Mg=="}, "originalCommit": {"oid": "4d6a939cf22e998f5ff1cce26941c419cf38a37d"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4927, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}