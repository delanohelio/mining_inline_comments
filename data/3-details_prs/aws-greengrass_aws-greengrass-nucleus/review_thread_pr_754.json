{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMDU2OTI3", "number": 754, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyMjoxN1rOFAc81Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyMjoxN1rOFAc81Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDE4NjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/Unarchiver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyMjoxN1rOH-wTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyMzoyNFrOH-wYFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2NTE2MA==", "bodyText": "Can we go one step further and cache the crc together with the unarchived artifacts? Then we don't need to compute the CRC every time. Only compute again if the cache CRC doesn't match with the one in the zip.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/754#discussion_r535565160", "createdAt": "2020-12-03T20:22:17Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/Unarchiver.java", "diffHunk": "@@ -41,8 +45,13 @@ static void unzip(File zipFile, File destDir) throws IOException {\n                     Utils.createPaths(newFile.toPath());\n                 } else {\n                     Utils.createPaths(newFile.getParentFile().toPath());\n-                    try (OutputStream fos = Files.newOutputStream(newFile.toPath())) {\n-                        IOUtils.copy(zis, fos);\n+                    // Only unarchive when the destination file doesn't exist, the file sizes don't match, or the\n+                    // CRCs don't match\n+                    if (!newFile.exists() || zipEntry.getCrc() == -1 || zipEntry.getSize() != newFile.length()\n+                            || zipEntry.getCrc() != crc32(newFile)) {\n+                        try (OutputStream fos = Files.newOutputStream(newFile.toPath())) {\n+                            IOUtils.copy(zis, fos);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4641b26d45a6c8f99b6790e77d205ab5f8fedf26"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2NjM1Nw==", "bodyText": "We do need to compute it. The computation is based on the CRC of the file on disk, which is the one that we're interested in. The CRC in the ZIP is precomputed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/754#discussion_r535566357", "createdAt": "2020-12-03T20:23:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/Unarchiver.java", "diffHunk": "@@ -41,8 +45,13 @@ static void unzip(File zipFile, File destDir) throws IOException {\n                     Utils.createPaths(newFile.toPath());\n                 } else {\n                     Utils.createPaths(newFile.getParentFile().toPath());\n-                    try (OutputStream fos = Files.newOutputStream(newFile.toPath())) {\n-                        IOUtils.copy(zis, fos);\n+                    // Only unarchive when the destination file doesn't exist, the file sizes don't match, or the\n+                    // CRCs don't match\n+                    if (!newFile.exists() || zipEntry.getCrc() == -1 || zipEntry.getSize() != newFile.length()\n+                            || zipEntry.getCrc() != crc32(newFile)) {\n+                        try (OutputStream fos = Files.newOutputStream(newFile.toPath())) {\n+                            IOUtils.copy(zis, fos);\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2NTE2MA=="}, "originalCommit": {"oid": "4641b26d45a6c8f99b6790e77d205ab5f8fedf26"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 123, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}