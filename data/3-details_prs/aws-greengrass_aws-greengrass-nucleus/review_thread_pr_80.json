{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjQxNDM0", "number": 80, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNjozMFrODjWFyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzoyMzozMFrODjWvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg4NjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNjozMFrOFvGgNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0MzozOFrOFvGx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMzk0Mg==", "bodyText": "What's in proposedPackages? Isn't it the full list of resolved packages that need to be downloaded? If that's the case, why do you need recursion here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384933942", "createdAt": "2020-02-27T06:26:30Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {\n+            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(), activePackages));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODQ5NA==", "bodyText": "proposedPackages are the proposed trees. After dependency resolution and downloading, resolved packages should be registered in registry, and recipes as well as artifacts are downloaded. So in this step, loading resolved tree per registry info.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938494", "createdAt": "2020-02-27T06:43:38Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {\n+            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(), activePackages));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMzk0Mg=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg5MDUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyODo1MFrOFvGiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0Mzo0OVrOFvGyQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDQ5MQ==", "bodyText": "The conventional way is to use assertThrows for asserting exceptions in Junit5.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384934491", "createdAt": "2020-02-27T06:28:50Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        entryA.getDependsOn().put(\"B\", new PackageRegistryEntry.Reference(\"B\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+        entryA.getDependsOn().put(\"C\", new PackageRegistryEntry.Reference(\"C\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+        entryB.getDependsOn().put(\"D\", new PackageRegistryEntry.Reference(\"D\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+\n+        Map<String, PackageRegistryEntry> activePackages = new HashMap<>();\n+        activePackages.put(\"A\", entryA);\n+        activePackages.put(\"B\", entryB);\n+        activePackages.put(\"C\", entryC);\n+        activePackages.put(\"D\", entryD);\n+\n+        Package pkgA = new Package(null, \"A\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"A\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgA));\n+        Package pkgB = new Package(null, \"B\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"B\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgB));\n+        Package pkgC = new Package(null, \"C\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"C\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgC));\n+        Package pkgD = new Package(null, \"D\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"D\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgD));\n+        Package pkg = packageManager.loadPackage(\"A\", activePackages);\n+\n+        assertThat(pkg.getPackageName(), is(\"A\"));\n+        assertThat(pkg.getDependencyPackages().size(), is(2));\n+        assertThat(pkg.getDependencyPackages().contains(pkgB), is(true));\n+        assertThat(pkg.getDependencyPackages().contains(pkgC), is(true));\n+        pkg = pkg.getDependencyPackages().stream().filter(p -> p.getPackageName().equals(\"B\")).findAny().orElse(null);\n+        assertThat(pkg, notNullValue());\n+        assertThat(pkg.getDependencyPackages().size(), is(1));\n+        assertThat(pkg.getDependencyPackages().contains(pkgD), is(true));\n+    }\n+\n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_from_store_THEN_store_throw_exception()\n+            throws IOException, PackagingException {\n+        when(packageStore.getPackage(anyString(), any())).thenThrow(new IOException());\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        try {\n+            packageManager.loadPackage(\"A\", Collections.singletonMap(\"A\", entryA));\n+            fail();\n+        } catch (PackageLoadingException e) {\n+            assertThat(e.getMessage(), is(\"failed to load package A from package store\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODU2Mg==", "bodyText": "Good to know, thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938562", "createdAt": "2020-02-27T06:43:49Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        entryA.getDependsOn().put(\"B\", new PackageRegistryEntry.Reference(\"B\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+        entryA.getDependsOn().put(\"C\", new PackageRegistryEntry.Reference(\"C\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+        entryB.getDependsOn().put(\"D\", new PackageRegistryEntry.Reference(\"D\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+\n+        Map<String, PackageRegistryEntry> activePackages = new HashMap<>();\n+        activePackages.put(\"A\", entryA);\n+        activePackages.put(\"B\", entryB);\n+        activePackages.put(\"C\", entryC);\n+        activePackages.put(\"D\", entryD);\n+\n+        Package pkgA = new Package(null, \"A\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"A\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgA));\n+        Package pkgB = new Package(null, \"B\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"B\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgB));\n+        Package pkgC = new Package(null, \"C\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"C\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgC));\n+        Package pkgD = new Package(null, \"D\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"D\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgD));\n+        Package pkg = packageManager.loadPackage(\"A\", activePackages);\n+\n+        assertThat(pkg.getPackageName(), is(\"A\"));\n+        assertThat(pkg.getDependencyPackages().size(), is(2));\n+        assertThat(pkg.getDependencyPackages().contains(pkgB), is(true));\n+        assertThat(pkg.getDependencyPackages().contains(pkgC), is(true));\n+        pkg = pkg.getDependencyPackages().stream().filter(p -> p.getPackageName().equals(\"B\")).findAny().orElse(null);\n+        assertThat(pkg, notNullValue());\n+        assertThat(pkg.getDependencyPackages().size(), is(1));\n+        assertThat(pkg.getDependencyPackages().contains(pkgD), is(true));\n+    }\n+\n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_from_store_THEN_store_throw_exception()\n+            throws IOException, PackagingException {\n+        when(packageStore.getPackage(anyString(), any())).thenThrow(new IOException());\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        try {\n+            packageManager.loadPackage(\"A\", Collections.singletonMap(\"A\", entryA));\n+            fail();\n+        } catch (PackageLoadingException e) {\n+            assertThat(e.getMessage(), is(\"failed to load package A from package store\"));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDQ5MQ=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg5MTU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyOTozNFrOFvGjCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NDozOFrOFvGzDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDY2Nw==", "bodyText": "throws Exception is fine. In unit tests, you don't need to put all the detail exceptions in the method signature.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384934667", "createdAt": "2020-02-27T06:29:34Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODc2NA==", "bodyText": "IDE did it for me. Yes, can use exception instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938764", "createdAt": "2020-02-27T06:44:38Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDY2Nw=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkwMDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozNDo0M1rOFvGogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1NDozM1rOFvG9Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjA2NA==", "bodyText": "[nit]\nMake this javadoc with 2 asterisks. /**.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384936064", "createdAt": "2020-02-27T06:34:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MTM1NA==", "bodyText": "private method doesn't require java doc. The comment is just for helping understand. I can delete them since the method now is descriptive itself.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384941354", "createdAt": "2020-02-27T06:54:33Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjA2NA=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkxNTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0Mjo1NVrOFvGxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzoyMTozM1rOFvHdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODMwMg==", "bodyText": "This method will constantly re-run right if a package appears multiple times? Should you maybe check at the beginning to see if the package even needs to be loaded?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938302", "createdAt": "2020-02-27T06:42:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MTExMQ==", "bodyText": "It should trust the info in package registry at this point is correct. The package can appear in different trees. Circular dependency should be checked before dependency resolution. So I don't quite get what checks I can do.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384941111", "createdAt": "2020-02-27T06:53:43Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODMwMg=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0NDU3MQ==", "bodyText": "Check that it was loaded already, and thus you don't need to load it again. If A depends on B and C depends on B as well, then B is \"loaded\" twice, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384944571", "createdAt": "2020-02-27T07:05:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODMwMg=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0OTUzMg==", "bodyText": "Good point. Please check the latest change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384949532", "createdAt": "2020-02-27T07:21:33Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODMwMg=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkxNzUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NDoyMFrOFvGytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzowODo1NFrOFvHNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODY3Nw==", "bodyText": "Can you add comments to these test to describe the scenario that you're testing, specifically what conflicts exist and how you're expecting that they should resolve. Since I know you thought about it for a while, it would be very helpful to us readers to have the insights you had.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938677", "createdAt": "2020-02-27T06:44:20Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MTE2MA==", "bodyText": "sure.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384941160", "createdAt": "2020-02-27T06:53:54Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODY3Nw=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0NTYxNA==", "bodyText": "BTW, the test you specified is for testing load package function (last step). I plan to add a lot more tests on dependency resolution later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384945614", "createdAt": "2020-02-27T07:08:54Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODY3Nw=="}, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzk5MjY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzoyMzozMFrOFvHfrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0MDo0N1rOFvYklw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MDE4OA==", "bodyText": "Shouldn't this be a class field so that the cache always applies?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384950188", "createdAt": "2020-02-27T07:23:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -167,14 +167,20 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n             throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n+        Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1Mzc4Ng==", "bodyText": "I would say not. Because one deployment one call of package resolution, the packages may got refreshed with newer version. If we would like to cache multi-versions of packages, I would say that is package store responsibility. I think this level of optimization should be sufficient.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384953786", "createdAt": "2020-02-27T07:34:31Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -167,14 +167,20 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n             throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n+        Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MDE4OA=="}, "originalCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTk1MA==", "bodyText": "The PackageRegistryEntry contains the version, right? So it is safe to just keep writing into the same map, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384959950", "createdAt": "2020-02-27T07:51:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -167,14 +167,20 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n             throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n+        Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MDE4OA=="}, "originalCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjYzOA==", "bodyText": "Why do we want to keep expanding on this map? Then you have to think about how to clean up it. The deployment is not time critical, what's the concern of reloading the packages?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384976638", "createdAt": "2020-02-27T08:32:17Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -167,14 +167,20 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n             throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n+        Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MDE4OA=="}, "originalCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyOTk3NQ==", "bodyText": "My assumption would be that performing the load is expensive, so I'm thinking to trade off memory for speed. But if you think that loading is actually cheap then the cache that you've added here should be fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r385229975", "createdAt": "2020-02-27T16:40:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -167,14 +167,20 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n             throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n+        Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MDE4OA=="}, "originalCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4818, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}