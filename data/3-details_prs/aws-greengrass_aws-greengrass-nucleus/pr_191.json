{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjYyMzY5", "number": 191, "title": "Add integration with Package Management Service", "bodyText": "Description of changes:\n\nAdd integration with Package Manager Service using SDK client\n\nTHINGS TO NOTE:\n\nCurrently the SDK client uses default configuration and environment credentials. I will update that further as I try to get the integ tests to work, current plan is to pick up the endpoint and credentials from the kernel context but open to a discussion.\nThe default behavior for package manager is to look in the local package store for available recipes before calling the service. If files are found locally, the package manager service is NOT called. This has implications on implementation of integ tests, if you want to use package service as source for E2E tests, you will need to upload your test artifacts to the service. An alternative method is to follow the DeploymentTaskIntegration test where the artifacts need are just copied to a local store and the call to PMS is skipped.\nThe Evergreen Service SDK has been manually uploaded to the same account as distribution as the Evergreen IPC SDK\n\nHow was this change tested:\n\nUnit tested\nIntegration test to follow in separate PR\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-17T17:48:20Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191", "merged": true, "mergeCommit": {"oid": "1538fb961125041e04402a8fa2f874c409622e02"}, "closed": true, "closedAt": "2020-04-28T17:28:40Z", "author": {"login": "chaurah"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcafBWtgBqjMyNjU2ODA1NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccHUV7gFqTQwMjA1Njg1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b66b3f5eaef5a20decb02a864996d076ad7750b5", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b66b3f5eaef5a20decb02a864996d076ad7750b5", "committedDate": "2020-04-17T17:32:37Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "c5d9155d7ae8fdb5d621570aa515523483674c7c", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c5d9155d7ae8fdb5d621570aa515523483674c7c", "committedDate": "2020-04-23T15:56:25Z", "message": "Add integration with Package Management Service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Mzg1Mjkx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-399385291", "createdAt": "2020-04-23T18:53:39Z", "commit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODo1MzozOVrOGK3NUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODo1NDo1M1rOGK3Qhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0MzQ3NQ==", "bodyText": "Why set this here? Why not just set it in the field?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414043475", "createdAt": "2020-04-23T18:53:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,76 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_TYPE_YAML = \"YAML\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger;\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0NDI5NQ==", "bodyText": "I could be wrong, but I thought that the object mapper had a bytebuffer overload so you don't need to copy it into a byte[].", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414044295", "createdAt": "2020-04-23T18:54:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,76 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_TYPE_YAML = \"YAML\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger;\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(PACKAGE_RECIPE_TYPE_YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            byte [] recipe = new byte[recipeBuf.remaining()];\n+            recipeBuf.get(recipe);\n+            return OBJECT_MAPPER.readValue(recipe, PackageRecipe.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5c9486b3825354fb8afea977e6b85d7a9e91823b", "committedDate": "2020-04-23T18:48:25Z", "message": "Merge branch 'master' into pms-integration"}, "afterCommit": {"oid": "60c2bf328fa6fa7ebfd7b823c42dae5314882fc5", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/60c2bf328fa6fa7ebfd7b823c42dae5314882fc5", "committedDate": "2020-04-23T21:20:29Z", "message": "Add integration with Package Management Service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60c2bf328fa6fa7ebfd7b823c42dae5314882fc5", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/60c2bf328fa6fa7ebfd7b823c42dae5314882fc5", "committedDate": "2020-04-23T21:20:29Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/53934839fa7b27b39284705dd288f011ab984eef", "committedDate": "2020-04-23T23:05:10Z", "message": "Add integration with Package Management Service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTQ2NzY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-399546767", "createdAt": "2020-04-23T23:32:36Z", "commit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTQ4NzA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-399548706", "createdAt": "2020-04-23T23:37:50Z", "commit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNzo1MFrOGLAYdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0MzoxMVrOGLAg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5Mzc4Mg==", "bodyText": ".log()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414193782", "createdAt": "2020-04-23T23:37:50Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzkxOQ==", "bodyText": "same", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414193919", "createdAt": "2020-04-23T23:38:10Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\");\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTMwOA==", "bodyText": "Do we need setter?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414195308", "createdAt": "2020-04-23T23:41:22Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTk2Mg==", "bodyText": "same", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414195962", "createdAt": "2020-04-23T23:43:11Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-artifact-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTQ5MTE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-399549118", "createdAt": "2020-04-23T23:38:47Z", "commit": {"oid": "60c2bf328fa6fa7ebfd7b823c42dae5314882fc5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozOTozMVrOGLAbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MTo1N1rOGLAtuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDU3Ng==", "bodyText": "Is this a dependency of SDK? Why is it added explicitly if so?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414194576", "createdAt": "2020-04-23T23:39:31Z", "author": {"login": "abanthiy"}, "path": "pom.xml", "diffHunk": "@@ -85,6 +85,21 @@\n             <artifactId>evergreen-java-sdk</artifactId>\n             <version>0.0.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws.services</groupId>\n+            <artifactId>greengrasspackagemanagement</artifactId>\n+            <version>1.11.1-SNAPSHOT</version>\n+        </dependency>\n+        <!-- TODO: This is temporary, adding because there is some confusion about which version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODAyMg==", "bodyText": "This is not an exception in downloading the recipe. The received recipe is of invalid format right? So I think the message should be changed indicate that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414198022", "createdAt": "2020-04-23T23:48:34Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODQ5Ng==", "bodyText": "How does client handle timeout?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414198496", "createdAt": "2020-04-23T23:49:56Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODU5Nw==", "bodyText": "5XX?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414198597", "createdAt": "2020-04-23T23:50:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTIyNQ==", "bodyText": "Why is there no client in the name of this type? Is this standard?\nThis is a REST client I believe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414199225", "createdAt": "2020-04-23T23:51:57Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/53934839fa7b27b39284705dd288f011ab984eef", "committedDate": "2020-04-23T23:05:10Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "994455d048ea263e9b4b3ab87f4a4109f99cf6a9", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/994455d048ea263e9b4b3ab87f4a4109f99cf6a9", "committedDate": "2020-04-24T02:02:04Z", "message": "Add integration with Package Management Service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "994455d048ea263e9b4b3ab87f4a4109f99cf6a9", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/994455d048ea263e9b4b3ab87f4a4109f99cf6a9", "committedDate": "2020-04-24T02:02:04Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a298d4d7ab36f552996997fdbddea2f5c997a310", "committedDate": "2020-04-24T02:43:12Z", "message": "Add integration with Package Management Service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjA5MzMy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-399609332", "createdAt": "2020-04-24T03:03:43Z", "commit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzowMzo0M1rOGLERkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzowMzo0M1rOGLERkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NzU1NA==", "bodyText": "Is this public or is it pulling from our private cloudfront?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414257554", "createdAt": "2020-04-24T03:03:43Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -85,6 +85,21 @@\n             <artifactId>evergreen-java-sdk</artifactId>\n             <version>0.0.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws.services</groupId>\n+            <artifactId>greengrasspackagemanagement</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjExMTky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-399611192", "createdAt": "2020-04-24T03:10:46Z", "commit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxMDo0NlrOGLEZ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxMjoxOFrOGLEb_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1OTY4OA==", "bodyText": "For unit testing keep this package private if possible.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414259688", "createdAt": "2020-04-24T03:10:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\")\n+                  .log();\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion)\n+                  .log();\n+            clientBuilder.withEndpointConfiguration(\n+                    new AwsClientBuilder.EndpointConfiguration(greengrassServiceEndpoint, greengrassServiceRegion));\n+            this.pmsClient = clientBuilder.build();\n+        }\n+        // TODO: Might need to retrieve AWS credentials from custom credential provider\n+    }\n+\n+    /**\n+     * Constructor for unit testing.\n+     * @param client AWSGreengrassPackageManagement object\n+     */\n+    public GreengrassPackageServiceClientFactory(AWSGreengrassPackageManagement client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MDIyMg==", "bodyText": "Never seen this before, is this from the new client or is this in our code?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414260222", "createdAt": "2020-04-24T03:12:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTQxODY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-400141868", "createdAt": "2020-04-24T17:33:17Z", "commit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzozMzoxN1rOGLiD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0Mzo1OVrOGLidJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NTU5OA==", "bodyText": "We should be able to avoid creating this. Let's sync up offline.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414745598", "createdAt": "2020-04-24T17:33:17Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\")\n+                  .log();\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion)\n+                  .log();\n+            clientBuilder.withEndpointConfiguration(\n+                    new AwsClientBuilder.EndpointConfiguration(greengrassServiceEndpoint, greengrassServiceRegion));\n+            this.pmsClient = clientBuilder.build();\n+        }\n+        // TODO: Might need to retrieve AWS credentials from custom credential provider\n+    }\n+\n+    /**\n+     * Constructor for unit testing.\n+     * @param client AWSGreengrassPackageManagement object\n+     */\n+    public GreengrassPackageServiceClientFactory(AWSGreengrassPackageManagement client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODQ4OQ==", "bodyText": "Try only the line\nGetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n\nfor catching exceptions for calling PMS.\nThen try parsing logic for handling parsing/loading exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414748489", "createdAt": "2020-04-24T17:38:12Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODY3Mw==", "bodyText": "No need to implement fully but what about Service Exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414748673", "createdAt": "2020-04-24T17:38:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTY1NQ==", "bodyText": "Let's not check this in, shall we? Cloud team should be able to return a 200 instead of 302 easily...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414749655", "createdAt": "2020-04-24T17:40:11Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -50,9 +71,45 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) {\n-        //TODO retrieve artifact presigned download URL from cloud as redirection\n-        return \"placeholder\";\n+    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n+        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n+                                                                        .withPackageARN(packageArn);\n+\n+        GetArtifactResult getArtifactResult = null;\n+        // TODO: This is horribly bad code, but unfortunately, the service is configured to return 302 redirect and\n+        // the auto-generated SDK does NOT like that. The only way to handle this at the moment is to catch the\n+        // exception for the redirect. This response code needs a revisit from the service side either to change the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MTQ2NQ==", "bodyText": "One of the point of having clientFactory is that you could mock it.\nIf you do:\nclientFactory = mock(ClientFactory);\nwhen(clientFactory.getClient()).thenReturn(mockClient);\n\nthis.helper = new Helper(clientFactory);\n\nThen you could remove both spy and constructor for unit test", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414751465", "createdAt": "2020-04-24T17:43:02Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+import java.nio.ByteBuffer;\n+\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+class GreengrassPackageServiceHelperTest {\n+\n+    @Mock\n+    private AWSGreengrassPackageManagement client;\n+\n+    private GreengrassPackageServiceClientFactory clientFactory;\n+    private GreengrassPackageServiceHelper helper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        this.clientFactory = new GreengrassPackageServiceClientFactory(client);\n+        this.helper = spy(new GreengrassPackageServiceHelper(clientFactory));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MjAzOQ==", "bodyText": "If we do getPackage(any()) here, we need to verify the argument to ensure client is called with the argument we expect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414752039", "createdAt": "2020-04-24T17:43:59Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+import java.nio.ByteBuffer;\n+\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+class GreengrassPackageServiceHelperTest {\n+\n+    @Mock\n+    private AWSGreengrassPackageManagement client;\n+\n+    private GreengrassPackageServiceClientFactory clientFactory;\n+    private GreengrassPackageServiceHelper helper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        this.clientFactory = new GreengrassPackageServiceClientFactory(client);\n+        this.helper = spy(new GreengrassPackageServiceHelper(clientFactory));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_url_WHEN_attempt_download_THEN_task_succeed() throws Exception {\n+        String recipeContents =\n+                TestHelper.getPackageRecipeForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.0.0\");\n+        ByteBuffer testRecipeBytes = ByteBuffer.wrap(recipeContents.getBytes());\n+        GetPackageResult testResult = new GetPackageResult().withRecipe(testRecipeBytes);\n+        doReturn(testResult).when(client).getPackage(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a298d4d7ab36f552996997fdbddea2f5c997a310", "committedDate": "2020-04-24T02:43:12Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/64279c0608b329430f4769076456f9d26ad81775", "committedDate": "2020-04-27T16:53:09Z", "message": "Add integration with Package Management Service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTYzNjA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-401163605", "createdAt": "2020-04-27T17:19:56Z", "commit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxOTo1NlrOGMurRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyNjozN1rOGMu99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMDgzNg==", "bodyText": "remove this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r416000836", "createdAt": "2020-04-27T17:19:56Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,74 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNTYyMA==", "bodyText": "remove the first one?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r416005620", "createdAt": "2020-04-27T17:26:37Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -12,22 +19,36 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n+import java.util.Map;\n+import javax.inject.Inject;\n \n public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n     private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n     private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String HTTP_HEADER_LOCATION = \"Location\";\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT\n+            = \"Failed to download artifact %s for package %s, http response from server was %d\";\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassRepositoryDownloader(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n \n     @SuppressWarnings({\"PMD.AssignmentInOperand\", \"AvoidFileStream\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/64279c0608b329430f4769076456f9d26ad81775", "committedDate": "2020-04-27T16:53:09Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "4bfe437997054a89a26a86b7c650c7795418544b", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4bfe437997054a89a26a86b7c650c7795418544b", "committedDate": "2020-04-27T17:47:33Z", "message": "Add integration with Package Management Service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8209fc286f2a452a1db885f7407cbe3d3b9d0d97", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8209fc286f2a452a1db885f7407cbe3d3b9d0d97", "committedDate": "2020-04-27T21:23:57Z", "message": "Add integration with Package Management Service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bfe437997054a89a26a86b7c650c7795418544b", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4bfe437997054a89a26a86b7c650c7795418544b", "committedDate": "2020-04-27T17:47:33Z", "message": "Add integration with Package Management Service"}, "afterCommit": {"oid": "8209fc286f2a452a1db885f7407cbe3d3b9d0d97", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8209fc286f2a452a1db885f7407cbe3d3b9d0d97", "committedDate": "2020-04-27T21:23:57Z", "message": "Add integration with Package Management Service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzU4NDQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-401358445", "createdAt": "2020-04-27T21:59:57Z", "commit": {"oid": "8209fc286f2a452a1db885f7407cbe3d3b9d0d97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDU2ODUx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#pullrequestreview-402056851", "createdAt": "2020-04-28T17:27:32Z", "commit": {"oid": "8209fc286f2a452a1db885f7407cbe3d3b9d0d97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2135, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}