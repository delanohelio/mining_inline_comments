{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDU3MzQ5", "number": 52, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNjozMlrODdIjVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNTo1NlrODdbpNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc1NDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNjozMlrOFlkCDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyNToyNFrOFlpHgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMTk4Mg==", "bodyText": "I think these comments are pretty unnecessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r374931982", "createdAt": "2020-02-04T21:26:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -43,92 +43,57 @@\n \n @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\", justification = \"Need hardcoded paths to find what OS we're on\")\n public class EvergreenService implements InjectionActions, Subscriber, Closeable {\n-    public static final String stateTopicName = \"_State\";\n-    private static final Pattern depParse = Pattern.compile(\" *([^,:;& ]+)(:([^,; ]+))?[,; ]*\");\n-    private static final HashMap<String, Integer> ranks = new HashMap<>();\n \n-    static {\n-        // figure out what OS we're running and add applicable tags\n-        // The more specific a tag is, the higher its rank should be\n-        // TODO: a loopy set of hacks\n-        ranks.put(\"all\", 0);\n-        ranks.put(\"any\", 0);\n-        if (Files.exists(Paths.get(\"/bin/bash\")) || Files.exists(Paths.get(\"/usr/bin/bash\"))) {\n-            ranks.put(\"unix\", 3);\n-            ranks.put(\"posix\", 3);\n-        }\n-        if (Files.exists(Paths.get(\"/proc\"))) {\n-            ranks.put(\"linux\", 10);\n-        }\n-        if (Files.exists(Paths.get(\"/usr/bin/apt-get\"))) {\n-            ranks.put(\"debian\", 11);\n-        }\n-        if (Exec.isWindows) {\n-            ranks.put(\"windows\", 5);\n-        }\n-        if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n-            ranks.put(\"fedora\", 11);\n-        }\n-        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n-        if (sysver.contains(\"ubuntu\")) {\n-            ranks.put(\"ubuntu\", 20);\n-        }\n-        if (sysver.contains(\"darwin\")) {\n-            ranks.put(\"macos\", 20);\n-        }\n-        if (sysver.contains(\"raspbian\")) {\n-            ranks.put(\"raspbian\", 22);\n-        }\n-        if (sysver.contains(\"qnx\")) {\n-            ranks.put(\"qnx\", 22);\n-        }\n-        if (sysver.contains(\"cygwin\")) {\n-            ranks.put(\"cygwin\", 22);\n-        }\n-        if (sysver.contains(\"freebsd\")) {\n-            ranks.put(\"freebsd\", 22);\n-        }\n-        if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n-            ranks.put(\"solaris\", 22);\n-        }\n-        try {\n-            ranks.put(InetAddress.getLocalHost().getHostName(), 99);\n-        } catch (UnknownHostException ex) {\n-        }\n-    }\n+    // static variables\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final Pattern DEP_PARSE = Pattern.compile(\" *([^,:;& ]+)(:([^,; ]+))?[,; ]*\");\n+    private static final Map<String, Integer> RANKS = buildRanks();\n \n+    // instance variables\n+    // public\n     public final Topics config;\n-    protected final CopyOnWriteArrayList<EvergreenService> explicitDependencies = new CopyOnWriteArrayList<>();\n-    final Object dependencyReadyLock = new Object();\n-    private final Topic state;\n     public Context context;\n+\n+    // protected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Mzg3NQ==", "bodyText": "I added them when I had to deal with 10+ fields initially since it adds a lot readability. Could be removed as long as everyone feels comfortable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r374993875", "createdAt": "2020-02-05T00:04:55Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -43,92 +43,57 @@\n \n @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\", justification = \"Need hardcoded paths to find what OS we're on\")\n public class EvergreenService implements InjectionActions, Subscriber, Closeable {\n-    public static final String stateTopicName = \"_State\";\n-    private static final Pattern depParse = Pattern.compile(\" *([^,:;& ]+)(:([^,; ]+))?[,; ]*\");\n-    private static final HashMap<String, Integer> ranks = new HashMap<>();\n \n-    static {\n-        // figure out what OS we're running and add applicable tags\n-        // The more specific a tag is, the higher its rank should be\n-        // TODO: a loopy set of hacks\n-        ranks.put(\"all\", 0);\n-        ranks.put(\"any\", 0);\n-        if (Files.exists(Paths.get(\"/bin/bash\")) || Files.exists(Paths.get(\"/usr/bin/bash\"))) {\n-            ranks.put(\"unix\", 3);\n-            ranks.put(\"posix\", 3);\n-        }\n-        if (Files.exists(Paths.get(\"/proc\"))) {\n-            ranks.put(\"linux\", 10);\n-        }\n-        if (Files.exists(Paths.get(\"/usr/bin/apt-get\"))) {\n-            ranks.put(\"debian\", 11);\n-        }\n-        if (Exec.isWindows) {\n-            ranks.put(\"windows\", 5);\n-        }\n-        if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n-            ranks.put(\"fedora\", 11);\n-        }\n-        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n-        if (sysver.contains(\"ubuntu\")) {\n-            ranks.put(\"ubuntu\", 20);\n-        }\n-        if (sysver.contains(\"darwin\")) {\n-            ranks.put(\"macos\", 20);\n-        }\n-        if (sysver.contains(\"raspbian\")) {\n-            ranks.put(\"raspbian\", 22);\n-        }\n-        if (sysver.contains(\"qnx\")) {\n-            ranks.put(\"qnx\", 22);\n-        }\n-        if (sysver.contains(\"cygwin\")) {\n-            ranks.put(\"cygwin\", 22);\n-        }\n-        if (sysver.contains(\"freebsd\")) {\n-            ranks.put(\"freebsd\", 22);\n-        }\n-        if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n-            ranks.put(\"solaris\", 22);\n-        }\n-        try {\n-            ranks.put(InetAddress.getLocalHost().getHostName(), 99);\n-        } catch (UnknownHostException ex) {\n-        }\n-    }\n+    // static variables\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final Pattern DEP_PARSE = Pattern.compile(\" *([^,:;& ]+)(:([^,; ]+))?[,; ]*\");\n+    private static final Map<String, Integer> RANKS = buildRanks();\n \n+    // instance variables\n+    // public\n     public final Topics config;\n-    protected final CopyOnWriteArrayList<EvergreenService> explicitDependencies = new CopyOnWriteArrayList<>();\n-    final Object dependencyReadyLock = new Object();\n-    private final Topic state;\n     public Context context;\n+\n+    // protected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMTk4Mg=="}, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTI5Ng==", "bodyText": "+1, feel unnecessary for comments like //protected , //public , etc.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r375015296", "createdAt": "2020-02-05T01:25:24Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -43,92 +43,57 @@\n \n @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\", justification = \"Need hardcoded paths to find what OS we're on\")\n public class EvergreenService implements InjectionActions, Subscriber, Closeable {\n-    public static final String stateTopicName = \"_State\";\n-    private static final Pattern depParse = Pattern.compile(\" *([^,:;& ]+)(:([^,; ]+))?[,; ]*\");\n-    private static final HashMap<String, Integer> ranks = new HashMap<>();\n \n-    static {\n-        // figure out what OS we're running and add applicable tags\n-        // The more specific a tag is, the higher its rank should be\n-        // TODO: a loopy set of hacks\n-        ranks.put(\"all\", 0);\n-        ranks.put(\"any\", 0);\n-        if (Files.exists(Paths.get(\"/bin/bash\")) || Files.exists(Paths.get(\"/usr/bin/bash\"))) {\n-            ranks.put(\"unix\", 3);\n-            ranks.put(\"posix\", 3);\n-        }\n-        if (Files.exists(Paths.get(\"/proc\"))) {\n-            ranks.put(\"linux\", 10);\n-        }\n-        if (Files.exists(Paths.get(\"/usr/bin/apt-get\"))) {\n-            ranks.put(\"debian\", 11);\n-        }\n-        if (Exec.isWindows) {\n-            ranks.put(\"windows\", 5);\n-        }\n-        if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n-            ranks.put(\"fedora\", 11);\n-        }\n-        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n-        if (sysver.contains(\"ubuntu\")) {\n-            ranks.put(\"ubuntu\", 20);\n-        }\n-        if (sysver.contains(\"darwin\")) {\n-            ranks.put(\"macos\", 20);\n-        }\n-        if (sysver.contains(\"raspbian\")) {\n-            ranks.put(\"raspbian\", 22);\n-        }\n-        if (sysver.contains(\"qnx\")) {\n-            ranks.put(\"qnx\", 22);\n-        }\n-        if (sysver.contains(\"cygwin\")) {\n-            ranks.put(\"cygwin\", 22);\n-        }\n-        if (sysver.contains(\"freebsd\")) {\n-            ranks.put(\"freebsd\", 22);\n-        }\n-        if (sysver.contains(\"solaris\") || sysver.contains(\"sunos\")) {\n-            ranks.put(\"solaris\", 22);\n-        }\n-        try {\n-            ranks.put(InetAddress.getLocalHost().getHostName(), 99);\n-        } catch (UnknownHostException ex) {\n-        }\n-    }\n+    // static variables\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final Pattern DEP_PARSE = Pattern.compile(\" *([^,:;& ]+)(:([^,; ]+))?[,; ]*\");\n+    private static final Map<String, Integer> RANKS = buildRanks();\n \n+    // instance variables\n+    // public\n     public final Topics config;\n-    protected final CopyOnWriteArrayList<EvergreenService> explicitDependencies = new CopyOnWriteArrayList<>();\n-    final Object dependencyReadyLock = new Object();\n-    private final Topic state;\n     public Context context;\n+\n+    // protected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMTk4Mg=="}, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc1OTg1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyODoyOVrOFlkFkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDoyMzo0OFrOFloHrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMjg4Mw==", "bodyText": "Anything here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r374932883", "createdAt": "2020-02-04T21:28:29Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.util.Log;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class EvergreenServiceTest {\n+\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final String EVERGREEN_SERVICE_FULL_NAME = \"EvergreenServiceFullName\";\n+\n+    private EvergreenService evergreenService;\n+\n+    @Mock\n+    private Topics config;\n+\n+    @Mock\n+    private Topic stateTopic;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private Log log;\n+\n+    @Captor\n+    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Mockito.when(config.createLeafChild(Mockito.any())).thenReturn(stateTopic);\n+\n+        evergreenService = new EvergreenService(config);\n+        evergreenService.context = context;\n+    }\n+\n+    @Test\n+    void testConstructor() {\n+        // GIVEN\n+        // beforeEach\n+\n+        // WHEN\n+        // beforeEach", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5MzIzMg==", "bodyText": "Nah. I added these because I struggled with myself when I feel readers may be confused why this test directly starts verification so I put the comment to indicate the GIVEN and WHEN are inside beforeEach.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r374993232", "createdAt": "2020-02-05T00:02:44Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.util.Log;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class EvergreenServiceTest {\n+\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final String EVERGREEN_SERVICE_FULL_NAME = \"EvergreenServiceFullName\";\n+\n+    private EvergreenService evergreenService;\n+\n+    @Mock\n+    private Topics config;\n+\n+    @Mock\n+    private Topic stateTopic;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private Log log;\n+\n+    @Captor\n+    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Mockito.when(config.createLeafChild(Mockito.any())).thenReturn(stateTopic);\n+\n+        evergreenService = new EvergreenService(config);\n+        evergreenService.context = context;\n+    }\n+\n+    @Test\n+    void testConstructor() {\n+        // GIVEN\n+        // beforeEach\n+\n+        // WHEN\n+        // beforeEach", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMjg4Mw=="}, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5ODM3Mw==", "bodyText": "OK, that was not clear to me :D. Can you just say\n// GIVEN\n// provided in the beforeEach\n\nOr something along those lines?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r374998373", "createdAt": "2020-02-05T00:21:37Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.util.Log;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class EvergreenServiceTest {\n+\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final String EVERGREEN_SERVICE_FULL_NAME = \"EvergreenServiceFullName\";\n+\n+    private EvergreenService evergreenService;\n+\n+    @Mock\n+    private Topics config;\n+\n+    @Mock\n+    private Topic stateTopic;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private Log log;\n+\n+    @Captor\n+    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Mockito.when(config.createLeafChild(Mockito.any())).thenReturn(stateTopic);\n+\n+        evergreenService = new EvergreenService(config);\n+        evergreenService.context = context;\n+    }\n+\n+    @Test\n+    void testConstructor() {\n+        // GIVEN\n+        // beforeEach\n+\n+        // WHEN\n+        // beforeEach", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMjg4Mw=="}, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5ODk1Nw==", "bodyText": "Absolutely! Changed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r374998957", "createdAt": "2020-02-05T00:23:48Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.util.Log;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class EvergreenServiceTest {\n+\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final String EVERGREEN_SERVICE_FULL_NAME = \"EvergreenServiceFullName\";\n+\n+    private EvergreenService evergreenService;\n+\n+    @Mock\n+    private Topics config;\n+\n+    @Mock\n+    private Topic stateTopic;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private Log log;\n+\n+    @Captor\n+    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Mockito.when(config.createLeafChild(Mockito.any())).thenReturn(stateTopic);\n+\n+        evergreenService = new EvergreenService(config);\n+        evergreenService.context = context;\n+    }\n+\n+    @Test\n+    void testConstructor() {\n+        // GIVEN\n+        // beforeEach\n+\n+        // WHEN\n+        // beforeEach", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMjg4Mw=="}, "originalCommit": {"oid": "73bdb945896ef2ebe8d58c6d6e1658f98beb429a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg2NzI0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxMToxOFrOFmB6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMzoyNzozNlrOFmKvJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMTQ3NA==", "bodyText": "Should use the latest: 3.2.4, and mockito core isn't needed, only this dep is required.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r375421474", "createdAt": "2020-02-05T18:11:18Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -21,6 +21,18 @@\n             <version>5.5.2</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <version>2.21.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-junit-jupiter</artifactId>\n+            <version>2.23.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252a3d304e55290f22fd9bc24df2ceea55e11c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2NjExOA==", "bodyText": "Changed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r375566118", "createdAt": "2020-02-05T23:27:36Z", "author": {"login": "leaf94"}, "path": "pom.xml", "diffHunk": "@@ -21,6 +21,18 @@\n             <version>5.5.2</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <version>2.21.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-junit-jupiter</artifactId>\n+            <version>2.23.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMTQ3NA=="}, "originalCommit": {"oid": "46252a3d304e55290f22fd9bc24df2ceea55e11c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg4MjE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNTo1NlrOFmCDww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMzoyOToyM1rOFmKxXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzkzOQ==", "bodyText": "For Greenlake we had the practice of putting the scenario into the test name such as \"GIVEN_a_service_in_new_WHEN_setState_to_installing_THEN_service_gets_installed\" or whatever. We don't necessarily need to follow that, but I would at least suggest explaining what is Given, what is the When, and what is the Then in your comments. Just having the blocks doesn't explain enough.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r375423939", "createdAt": "2020-02-05T18:15:56Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.util.Log;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class EvergreenServiceTest {\n+\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final String EVERGREEN_SERVICE_FULL_NAME = \"EvergreenServiceFullName\";\n+\n+    private EvergreenService evergreenService;\n+\n+    @Mock\n+    private Topics config;\n+\n+    @Mock\n+    private Topic stateTopic;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private Log log;\n+\n+    @Captor\n+    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Mockito.when(config.createLeafChild(Mockito.any())).thenReturn(stateTopic);\n+\n+        evergreenService = new EvergreenService(config);\n+        evergreenService.context = context;\n+    }\n+\n+    @Test\n+    void testConstructor() {\n+        // GIVEN\n+        // provided in the beforeEach\n+\n+        // WHEN\n+        // provided in the beforeEach\n+\n+        // THEN\n+        // verify config\n+        Assertions.assertSame(config, evergreenService.config);\n+        Mockito.verify(config).createLeafChild(STATE_TOPIC_NAME);\n+\n+        // verify stateTopic\n+        Mockito.verify(stateTopic).setParentNeedsToKnow(false);\n+        Mockito.verify(stateTopic).setValue(Long.MAX_VALUE, State.New);\n+        Mockito.verify(stateTopic).validate(validatorArgumentCaptor.capture());\n+        Mockito.verify(stateTopic).subscribe(evergreenService);\n+        Mockito.verifyNoMoreInteractions(stateTopic);\n+\n+        // verify validator\n+        Validator validator = validatorArgumentCaptor.getValue();\n+        State returnedState = (State) validator.validate(State.New, null);\n+        Assertions.assertSame(State.New, returnedState);\n+    }\n+\n+    @Test\n+    void getState() {\n+        Mockito.when(stateTopic.getOnce()).thenReturn(State.New);\n+\n+        Assertions.assertSame(State.New, evergreenService.getState());\n+\n+        Mockito.verify(stateTopic).getOnce();\n+    }\n+\n+    @Test\n+    void setState() {\n+        // GIVEN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252a3d304e55290f22fd9bc24df2ceea55e11c"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2NjY4Nw==", "bodyText": "I actually like this practice a lot since it helps a lot reading and maintaining unit tests. Will start adding this pattern.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/52#discussion_r375566687", "createdAt": "2020-02-05T23:29:23Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.util.Log;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class EvergreenServiceTest {\n+\n+    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final String EVERGREEN_SERVICE_FULL_NAME = \"EvergreenServiceFullName\";\n+\n+    private EvergreenService evergreenService;\n+\n+    @Mock\n+    private Topics config;\n+\n+    @Mock\n+    private Topic stateTopic;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private Log log;\n+\n+    @Captor\n+    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        Mockito.when(config.createLeafChild(Mockito.any())).thenReturn(stateTopic);\n+\n+        evergreenService = new EvergreenService(config);\n+        evergreenService.context = context;\n+    }\n+\n+    @Test\n+    void testConstructor() {\n+        // GIVEN\n+        // provided in the beforeEach\n+\n+        // WHEN\n+        // provided in the beforeEach\n+\n+        // THEN\n+        // verify config\n+        Assertions.assertSame(config, evergreenService.config);\n+        Mockito.verify(config).createLeafChild(STATE_TOPIC_NAME);\n+\n+        // verify stateTopic\n+        Mockito.verify(stateTopic).setParentNeedsToKnow(false);\n+        Mockito.verify(stateTopic).setValue(Long.MAX_VALUE, State.New);\n+        Mockito.verify(stateTopic).validate(validatorArgumentCaptor.capture());\n+        Mockito.verify(stateTopic).subscribe(evergreenService);\n+        Mockito.verifyNoMoreInteractions(stateTopic);\n+\n+        // verify validator\n+        Validator validator = validatorArgumentCaptor.getValue();\n+        State returnedState = (State) validator.validate(State.New, null);\n+        Assertions.assertSame(State.New, returnedState);\n+    }\n+\n+    @Test\n+    void getState() {\n+        Mockito.when(stateTopic.getOnce()).thenReturn(State.New);\n+\n+        Assertions.assertSame(State.New, evergreenService.getState());\n+\n+        Mockito.verify(stateTopic).getOnce();\n+    }\n+\n+    @Test\n+    void setState() {\n+        // GIVEN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzkzOQ=="}, "originalCommit": {"oid": "46252a3d304e55290f22fd9bc24df2ceea55e11c"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 65, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}