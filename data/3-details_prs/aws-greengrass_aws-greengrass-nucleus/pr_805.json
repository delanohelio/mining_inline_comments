{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDQ4Njc2", "number": 805, "title": "improvement(easysetup): Do not attempt creating role policy if it exists", "bodyText": "Issue #, if available:\n#802\nDescription of changes:\nWhen --provision option is set during setup, it currently creates the token exchange IAM role policy directly. Users may create the role/role alias/policy resources outside the setup in order to scope down the permissions needed on the device for setup even further. In that case, checking for the resource through the GetPolicy API first and creating only if the resource does not exist would be desirable.\nWhy is this change necessary:\nHow was this change tested:\nManually tested provisioning and starting nucleus\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-24T19:12:39Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805", "merged": true, "mergeCommit": {"oid": "893a8e1720da2c23e8de6e5577288036665aedb9"}, "closed": true, "closedAt": "2021-01-13T21:18:59Z", "author": {"login": "shaguptashaikh"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpZhfKAFqTU1ODcxMDkwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdv0PufgH2gAyNTQ1NDQ4Njc2OmZmYTM2MWVhMzE1ZjU0YTcwZTdhMmY0NWJiMGFlMGI2Nzk4ZTIzNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzEwOTAw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#pullrequestreview-558710900", "createdAt": "2020-12-24T20:12:20Z", "commit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDoxMjoyMFrOILUmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDoxMjoyMFrOILUmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MjY1Ng==", "bodyText": "is it possible to use the Arn datatype instead of building it ourselves using string formatting?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r548742656", "createdAt": "2020-12-24T20:12:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -390,31 +399,55 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n      * @param roleName           name of target role\n      * @param rolePolicyName     name of policy to create and attach\n      * @param rolePolicyDocument document of policy to create and attach\n+     * @param awsRegion          aws region\n      * @return ARN of created policy\n      */\n-    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName,\n-                                                      String rolePolicyDocument) {\n-        try {\n+    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName, String rolePolicyDocument,\n+                                                      Region awsRegion) {\n+        Optional<String> tesRolePolicyArnOptional = getPolicyArn(rolePolicyName, awsRegion);\n+        if (tesRolePolicyArnOptional.isPresent()) {\n+            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n+                    + \"already%n\", rolePolicyName);\n+            return tesRolePolicyArnOptional;\n+        } else {\n             String tesRolePolicyArn;\n             CreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                     software.amazon.awssdk.services.iam.model.CreatePolicyRequest.builder().policyName(rolePolicyName)\n                             .policyDocument(rolePolicyDocument).build());\n             tesRolePolicyArn = createPolicyResponse.policy().arn();\n             outStream.printf(\"IAM role policy for TES \\\"%s\\\" created. This policy DOES NOT have S3 access, please \"\n-                            + \"modify it with your private components' artifact buckets/objects as needed when you \"\n+                    + \"modify it with your private components' artifact buckets/objects as needed when you \"\n                     + \"create and deploy private components %n\", rolePolicyName);\n             outStream.println(\"Attaching IAM role policy for TES to IAM role for TES...\");\n             iamClient.attachRolePolicy(\n                     AttachRolePolicyRequest.builder().roleName(roleName).policyArn(tesRolePolicyArn).build());\n             return Optional.of(tesRolePolicyArn);\n-        } catch (EntityAlreadyExistsException e) {\n-            // TODO: [P41215965] get and reuse the policy. non trivial because we can only get IAM policy by ARN\n-            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n-                    + \"already%n\", rolePolicyName);\n-            return Optional.empty();\n         }\n     }\n \n+    private Optional<String> getPolicyArn(String policyName, Region awsRegion) {\n+        String partition = awsRegion.metadata().partition().id();\n+        try {\n+            String policyArn = String.format(MANAGED_IAM_POLICY_ARN_FORMAT, partition, policyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzA5NDU2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#pullrequestreview-559309456", "createdAt": "2020-12-28T21:33:21Z", "commit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTozMzoyMlrOIMCacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTozODowM1rOIMCewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5MzM2Mg==", "bodyText": "Just realized this, should we change e2e tests to target prod?\nMaybe add a separate task for this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r549493362", "createdAt": "2020-12-28T21:33:22Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -419,7 +428,8 @@ protected void setupTesRoleAndAlias() throws InterruptedException {\n         deviceProvisioningHelper.setupIoTRoleForTes(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n         if (tesRolePolicyArn == null || !tesRolePolicyArn.isPresent()) {\n             tesRolePolicyArn = deviceProvisioningHelper\n-                    .createAndAttachRolePolicy(TES_ROLE_NAME, TES_ROLE_POLICY_NAME, TES_ROLE_POLICY_DOCUMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5MzgzOA==", "bodyText": "Update the required permission for e2e tests in readme https://github.com/aws-greengrass/aws-greengrass-nucleus/blame/main/DEVELOPING.md#L51-L57", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r549493838", "createdAt": "2020-12-28T21:35:20Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -142,6 +147,7 @@ public DeviceProvisioningHelper(String awsRegion, String environmentStage, Print\n                 : EnvironmentStage.fromString(environmentStage);\n         this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, envStage);\n         this.iamClient = IamSdkClientFactory.getIamClient(awsRegion);\n+        this.stsClient = StsSdkClientFactory.getStsClient(awsRegion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NDQ2Ng==", "bodyText": "Do we have a managed policy?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r549494466", "createdAt": "2020-12-28T21:38:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -108,6 +110,8 @@\n     private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n     private static final String GREENGRASS_CLI_COMPONENT_NAME = \"aws.greengrass.Cli\";\n     private static final String INITIAL_DEPLOYMENT_NAME_FORMAT = \"Deployment for %s\";\n+    private static final String IAM_POLICY_ARN_FORMAT = \"arn:%s:iam::%s:policy/%s\";\n+    private static final String MANAGED_IAM_POLICY_ARN_FORMAT = \"arn:%s:iam::aws:policy/%s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7262e9bce97047947776bcaac5e6c960290690c", "committedDate": "2020-12-24T19:10:35Z", "message": "improvement(easysetup): Do not attempt creating role policy if it exists"}, "afterCommit": {"oid": "e5592c067f47c90f9a49315e45d97cbee2f916b2", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5592c067f47c90f9a49315e45d97cbee2f916b2", "committedDate": "2021-01-05T17:50:21Z", "message": "improvement(easysetup): Do not attempt creating role policy if it exists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTQ2Nzcw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#pullrequestreview-562946770", "createdAt": "2021-01-06T18:32:08Z", "commit": {"oid": "e5592c067f47c90f9a49315e45d97cbee2f916b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMjowOFrOIPRyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMjowOFrOIPRyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDkwNg==", "bodyText": "Add a comment for what these 2 cases are trying to do.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r552890906", "createdAt": "2021-01-06T18:32:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -390,31 +398,54 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n      * @param roleName           name of target role\n      * @param rolePolicyName     name of policy to create and attach\n      * @param rolePolicyDocument document of policy to create and attach\n+     * @param awsRegion          aws region\n      * @return ARN of created policy\n      */\n-    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName,\n-                                                      String rolePolicyDocument) {\n-        try {\n+    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName, String rolePolicyDocument,\n+                                                      Region awsRegion) {\n+        Optional<String> tesRolePolicyArnOptional = getPolicyArn(rolePolicyName, awsRegion);\n+        if (tesRolePolicyArnOptional.isPresent()) {\n+            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n+                    + \"already%n\", rolePolicyName);\n+            return tesRolePolicyArnOptional;\n+        } else {\n             String tesRolePolicyArn;\n             CreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                     software.amazon.awssdk.services.iam.model.CreatePolicyRequest.builder().policyName(rolePolicyName)\n                             .policyDocument(rolePolicyDocument).build());\n             tesRolePolicyArn = createPolicyResponse.policy().arn();\n             outStream.printf(\"IAM role policy for TES \\\"%s\\\" created. This policy DOES NOT have S3 access, please \"\n-                            + \"modify it with your private components' artifact buckets/objects as needed when you \"\n+                    + \"modify it with your private components' artifact buckets/objects as needed when you \"\n                     + \"create and deploy private components %n\", rolePolicyName);\n             outStream.println(\"Attaching IAM role policy for TES to IAM role for TES...\");\n             iamClient.attachRolePolicy(\n                     AttachRolePolicyRequest.builder().roleName(roleName).policyArn(tesRolePolicyArn).build());\n             return Optional.of(tesRolePolicyArn);\n-        } catch (EntityAlreadyExistsException e) {\n-            // TODO: [P41215965] get and reuse the policy. non trivial because we can only get IAM policy by ARN\n-            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n-                    + \"already%n\", rolePolicyName);\n-            return Optional.empty();\n         }\n     }\n \n+    private Optional<String> getPolicyArn(String policyName, Region awsRegion) {\n+        String partition = awsRegion.metadata().partition().id();\n+        Arn.Builder policyArnBuilder = Arn.builder().partition(partition).service(\"iam\").resource(policyName);\n+        try {\n+            return Optional.of(iamClient.getPolicy(software.amazon.awssdk.services.iam.model.GetPolicyRequest.builder()\n+                    .policyArn(policyArnBuilder.build().toString()).build()).policy().arn());\n+        } catch (ResourceNotFoundException | NoSuchEntityException mnf) {\n+            try {\n+                return Optional.of(iamClient.getPolicy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5592c067f47c90f9a49315e45d97cbee2f916b2"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6477b749743a3ad7e6cd2825e4a207ca50beebc2", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6477b749743a3ad7e6cd2825e4a207ca50beebc2", "committedDate": "2021-01-12T21:53:07Z", "message": "improvement(easysetup): Do not attempt creating role policy if it exists"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5592c067f47c90f9a49315e45d97cbee2f916b2", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5592c067f47c90f9a49315e45d97cbee2f916b2", "committedDate": "2021-01-05T17:50:21Z", "message": "improvement(easysetup): Do not attempt creating role policy if it exists"}, "afterCommit": {"oid": "6477b749743a3ad7e6cd2825e4a207ca50beebc2", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6477b749743a3ad7e6cd2825e4a207ca50beebc2", "committedDate": "2021-01-12T21:53:07Z", "message": "improvement(easysetup): Do not attempt creating role policy if it exists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NzM4MjQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#pullrequestreview-566738246", "createdAt": "2021-01-12T22:02:46Z", "commit": {"oid": "6477b749743a3ad7e6cd2825e4a207ca50beebc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NTE2Nzg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#pullrequestreview-567516788", "createdAt": "2021-01-13T18:43:08Z", "commit": {"oid": "6477b749743a3ad7e6cd2825e4a207ca50beebc2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffa361ea315f54a70e7a2f45bb0ae0b6798e2370", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ffa361ea315f54a70e7a2f45bb0ae0b6798e2370", "committedDate": "2021-01-13T18:43:55Z", "message": "Merge branch 'main' into policy-get-first"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2597, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}