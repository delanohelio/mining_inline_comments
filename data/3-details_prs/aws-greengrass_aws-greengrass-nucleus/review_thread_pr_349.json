{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODMwNTU3", "number": 349, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxOTo1N1rOEVEriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoxNjoyNVrOEWCJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTMyMjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxOTo1N1rOG7n1lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxOTo1N1rOG7n1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTg2Mw==", "bodyText": "don't pass the exception as a string, just pass it as e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465171863", "createdAt": "2020-08-04T16:19:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());\n+        } catch (IOException | IllegalArgumentException e) {\n+            serviceErrored(e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTMyNDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyMDozM1rOG7n3EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyMDozM1rOG7n3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MjI0MA==", "bodyText": "maybe don't create a new method. Evergreen can restart your service for you if you call requestRestart", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465172240", "createdAt": "2020-08-04T16:20:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAyODAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNDoyMlrOG7urJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo1Mjo0OFrOG7yy1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw==", "bodyText": "Would this work without restarting all components?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465283877", "createdAt": "2020-08-04T19:34:22Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTk1Mw==", "bodyText": "No, env vars are only set once, so running components won't get it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465285953", "createdAt": "2020-08-04T19:38:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw=="}, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NzQwMA==", "bodyText": "So, we cannot change the port without restarting the kernel. I think we would need to disallow changing that. :(", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465287400", "createdAt": "2020-08-04T19:41:20Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw=="}, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MTM4Mg==", "bodyText": "I see. I will remove the port related changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465351382", "createdAt": "2020-08-04T21:52:48Z", "author": {"login": "youtuyy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -133,6 +135,20 @@ private void validateConfig() {\n                 .build());\n     }\n \n+    private void restartServer() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        try {\n+            server = new HttpServerImpl(port, this.credentialRequestHandler);\n+            server.start();\n+            logger.atInfo().log(\"Restarted Token Server at port {}\", port);\n+            setEnvVariablesForDependencies(server.getServerPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Mzg3Nw=="}, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAzNjM3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNzowNVrOG7uwfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNzowNVrOG7uwfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NTI0Ng==", "bodyText": "nit: move this out to a method. its being repeated now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r465285246", "createdAt": "2020-08-04T19:37:05Z", "author": {"login": "prateek-y"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -147,6 +159,29 @@ void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returne\n             networkUtils.recoverNetwork();\n         }\n \n+        // Should fetch new credentials after updating roleAlias\n+        kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS)\n+                .lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC).withValue(newRoleAliasName);\n+        deviceProvisioningHelper.setupIoTRoleForTes(roleName, newRoleAliasName, thingInfo.getCertificateArn());\n+        con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"GET\");\n+        token = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY)\n+                .iterator().next().getName();\n+        assertNotNull(token);\n+        con.setRequestProperty(\"Authorization\", token);\n+        assertEquals(HTTP_200, con.getResponseCode());\n+        StringBuilder newResponse = new StringBuilder();\n+        try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97abf0b76631ef1192a9adbcd76a571b21bc2d33"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDYxMjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNTozNVrOG9A5FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNTozNVrOG9A5FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDkzMw==", "bodyText": "nit: make \"GET\" a constant", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466630933", "createdAt": "2020-08-06T19:15:35Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -111,6 +113,17 @@ public void setIotCredentialsPath(String iotRoleAlias) {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n+            if (!exchange.getRequestMethod().equals(\"GET\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDYxNDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNjoxM1rOG9A6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNTowNFrOG9HCDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMTI5Mg==", "bodyText": "I think this is warn, since customers should not do this at all. This might be indicative of a rogue process.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466631292", "createdAt": "2020-08-06T19:16:13Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -111,6 +113,17 @@ public void setIotCredentialsPath(String iotRoleAlias) {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n+            if (!exchange.getRequestMethod().equals(\"GET\")) {\n+                LOGGER.atInfo().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTUzMw==", "bodyText": "makes sense", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466731533", "createdAt": "2020-08-06T23:05:04Z", "author": {"login": "youtuyy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -111,6 +113,17 @@ public void setIotCredentialsPath(String iotRoleAlias) {\n     @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n     public void handle(final HttpExchange exchange) throws IOException {\n         try {\n+            if (!exchange.getRequestMethod().equals(\"GET\")) {\n+                LOGGER.atInfo().log(\"Unsupported http method for {}. GET is supported.\", exchange.getRequestMethod());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMTI5Mg=="}, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDYxOTc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNzo1MlrOG9A9iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxNzo1MlrOG9A9iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMjA3Mw==", "bodyText": "lets add all verbs for sake of completeness", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466632073", "createdAt": "2020-08-06T19:17:52Z", "author": {"login": "prateek-y"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -113,6 +118,43 @@ public void GIVEN_credential_handler_WHEN_called_handle_THEN_returns_creds() thr\n         mockStream.close();\n     }\n \n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405() throws Exception {\n+        CredentialRequestHandler handler = new CredentialRequestHandler(\n+                mockCloudHelper,\n+                mockConnectionManager,\n+                mockAuthNHandler,\n+                mockAuthZHandler);\n+        handler.setIotCredentialsPath(ROLE_ALIAS);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        when(mockExchange.getRequestMethod()).thenReturn(\"POST\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDYzMzc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyMjoyN1rOG9BGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyMjoyN1rOG9BGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDMzNg==", "bodyText": "let's also handle the case, when customer sends a URI with prefixed, suffixed with another string. Something like \"/something\" +TES_URI, TES_URI + \"/something\".", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466634336", "createdAt": "2020-08-06T19:22:27Z", "author": {"login": "prateek-y"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -113,6 +118,43 @@ public void GIVEN_credential_handler_WHEN_called_handle_THEN_returns_creds() thr\n         mockStream.close();\n     }\n \n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_credential_handler_WHEN_unsupported_request_method_THEN_return_405() throws Exception {\n+        CredentialRequestHandler handler = new CredentialRequestHandler(\n+                mockCloudHelper,\n+                mockConnectionManager,\n+                mockAuthNHandler,\n+                mockAuthZHandler);\n+        handler.setIotCredentialsPath(ROLE_ALIAS);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        when(mockExchange.getRequestMethod()).thenReturn(\"POST\");\n+        handler.handle(mockExchange);\n+\n+        int expectedStatus = 405;\n+        int expectedResponseLength = -1;\n+        verify(mockExchange, times(1)).sendResponseHeaders(expectedStatus, expectedResponseLength);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void GIVEN_credential_handler_WHEN_unsupported_uri_THEN_return_400() throws Exception {\n+        CredentialRequestHandler handler = new CredentialRequestHandler(\n+                mockCloudHelper,\n+                mockConnectionManager,\n+                mockAuthNHandler,\n+                mockAuthZHandler);\n+        handler.setIotCredentialsPath(ROLE_ALIAS);\n+        HttpExchange mockExchange = mock(HttpExchange.class);\n+        when(mockExchange.getRequestMethod()).thenReturn(REQUEST_METHOD);\n+        when(mockExchange.getRequestURI()).thenReturn(URI.create(\"badURI\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDYzNTQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyMzowM1rOG9BHcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyMzowM1rOG9BHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDYwOQ==", "bodyText": "wondering if we can extract all this to a private method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466634609", "createdAt": "2020-08-06T19:23:03Z", "author": {"login": "prateek-y"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -449,6 +509,8 @@ public void GIVEN_connection_error_WHEN_called_handle_THEN_expire_immediately(Ex\n         when(mockExchange.getResponseBody()).thenReturn(mockStream);\n         Headers mockHeader = mock(Headers.class);\n         when(mockExchange.getRequestHeaders()).thenReturn(mockHeader);\n+        when(mockExchange.getRequestURI()).thenReturn(TES_URI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDY0MTIzOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyNDo0NlrOG9BK2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyNDo0NlrOG9BK2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNTQ4MQ==", "bodyText": "Lets send a random body with post as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466635481", "createdAt": "2020-08-06T19:24:46Z", "author": {"login": "prateek-y"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -95,63 +107,72 @@ static void tearDown() {\n         try {\n             kernel.shutdown();\n         } finally {\n-            deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION,\n-                    Collections.singleton(InvalidRequestException.class)), thingInfo);\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, roleAliasName, thingInfo.getCertificateArn());\n+            deviceProvisioningHelper.cleanThing(\n+                    IotSdkClientFactory.getIotClient(AWS_REGION, Collections.singleton(InvalidRequestException.class)),\n+                    thingInfo);\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, roleAliasName, thingInfo.getCertificateArn());\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         }\n     }\n \n     @Test\n     void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+        String urlString =\n+                kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n         assertNotNull(urlString);\n         URL url = new URL(urlString);\n         // Get the first token from the token map\n-        String token = kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY).iterator().next().getName();\n+        String token =\n+                kernel.getConfig().findTopics(SERVICES_NAMESPACE_TOPIC, AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY)\n+                        .iterator().next().getName();\n         assertNotNull(token);\n+        String response = getResponseString(url, token);\n+        assertThat(response, matchesPattern(AWS_CREDENTIALS_PATTERN));\n+\n+        // Should reject unsupported method\n         HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c259ac7b2e8842aea00f8dc6f465ab6f275ecab0"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTM5Mzg3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoxNjoyNVrOG9ISgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoyMTo0MlrOG9IYHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjEyOQ==", "bodyText": "remove?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466752129", "createdAt": "2020-08-07T00:16:25Z", "author": {"login": "prateek-y"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -95,63 +108,85 @@ static void tearDown() {\n         try {\n             kernel.shutdown();\n         } finally {\n-            deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION,\n-                    Collections.singleton(InvalidRequestException.class)), thingInfo);\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, roleAliasName, thingInfo.getCertificateArn());\n+            deviceProvisioningHelper.cleanThing(\n+                    IotSdkClientFactory.getIotClient(AWS_REGION, Collections.singleton(InvalidRequestException.class)),\n+                    thingInfo);\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, roleAliasName, thingInfo.getCertificateArn());\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         }\n     }\n \n     @Test\n-    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned(ExtensionContext context)\n+            throws Exception {\n+        //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8295ac20691505761d8dffb48f9718d56f0dea"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzU2Ng==", "bodyText": "ah, sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/349#discussion_r466753566", "createdAt": "2020-08-07T00:21:42Z", "author": {"login": "youtuyy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/tes/TESTest.java", "diffHunk": "@@ -95,63 +108,85 @@ static void tearDown() {\n         try {\n             kernel.shutdown();\n         } finally {\n-            deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION,\n-                    Collections.singleton(InvalidRequestException.class)), thingInfo);\n-            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION), IamSdkClientFactory.getIamClient(),\n-                    roleName, roleAliasName, thingInfo.getCertificateArn());\n+            deviceProvisioningHelper.cleanThing(\n+                    IotSdkClientFactory.getIotClient(AWS_REGION, Collections.singleton(InvalidRequestException.class)),\n+                    thingInfo);\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, roleAliasName, thingInfo.getCertificateArn());\n+            IotJobsUtils.cleanUpIotRoleForTest(IotSdkClientFactory.getIotClient(AWS_REGION),\n+                    IamSdkClientFactory.getIamClient(), roleName, newRoleAliasName, thingInfo.getCertificateArn());\n         }\n     }\n \n     @Test\n-    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n-        String urlString = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, TES_URI_ENV_VARIABLE_NAME).getOnce().toString();\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned(ExtensionContext context)\n+            throws Exception {\n+        //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjEyOQ=="}, "originalCommit": {"oid": "bd8295ac20691505761d8dffb48f9718d56f0dea"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4511, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}