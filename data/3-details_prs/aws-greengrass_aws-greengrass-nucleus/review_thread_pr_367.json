{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjEyMDM1", "number": 367, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODowNjo1OVrOEZmJkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowOTowMlrOEb0XOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjc0ODk4OnYy", "diffSide": "RIGHT", "path": "scripts/loader", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODowNjo1OVrOHCgJGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo0MDo1OFrOHEKQkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4NTgxNw==", "bodyText": "Why cp instead of jar? The jar we build can be run directly.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r472385817", "createdAt": "2020-08-18T18:06:59Z", "author": {"login": "MikeDombo"}, "path": "scripts/loader", "diffHunk": "@@ -13,64 +11,61 @@ LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n CONFIG_FILE=\"\"\n \n launch_kernel() {\n-  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+  if [ ! -d ${LAUNCH_DIR} ] ; then\n     echo FATAL: No Kernel found!\n     exit 1\n   fi\n \n-  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  if [ -f \"${LAUNCH_DIR}/launch.params\" ] ; then\n+    JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  fi\n \n   OPTIONS=\"--root $GG_ROOT\"\n-  if [[ ! -z ${CONFIG_FILE} ]]; then\n+  if [ ! -z ${CONFIG_FILE} ]; then\n     OPTIONS=\"$OPTIONS --config $CONFIG_FILE\"\n   fi\n   echo \"jvm options: \"${JVM_OPTIONS}\n   echo \"kernel options: \"${OPTIONS}\n-  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  java ${JVM_OPTIONS} -Dlog.store=FILE -Dlog.storeName=\"$GG_ROOT/logs/evergreen.log\" -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1375c722921e4d4f4f84223a803ff2888f95a0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ1OTUyNw==", "bodyText": "I didn't want to hardcode the jar name. Is it possible to do the same if we run jar directly?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r472459527", "createdAt": "2020-08-18T20:16:12Z", "author": {"login": "hui-yang"}, "path": "scripts/loader", "diffHunk": "@@ -13,64 +11,61 @@ LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n CONFIG_FILE=\"\"\n \n launch_kernel() {\n-  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+  if [ ! -d ${LAUNCH_DIR} ] ; then\n     echo FATAL: No Kernel found!\n     exit 1\n   fi\n \n-  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  if [ -f \"${LAUNCH_DIR}/launch.params\" ] ; then\n+    JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  fi\n \n   OPTIONS=\"--root $GG_ROOT\"\n-  if [[ ! -z ${CONFIG_FILE} ]]; then\n+  if [ ! -z ${CONFIG_FILE} ]; then\n     OPTIONS=\"$OPTIONS --config $CONFIG_FILE\"\n   fi\n   echo \"jvm options: \"${JVM_OPTIONS}\n   echo \"kernel options: \"${OPTIONS}\n-  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  java ${JVM_OPTIONS} -Dlog.store=FILE -Dlog.storeName=\"$GG_ROOT/logs/evergreen.log\" -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4NTgxNw=="}, "originalCommit": {"oid": "cb1375c722921e4d4f4f84223a803ff2888f95a0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2MTE5OA==", "bodyText": "As long as there's only 1 jar file in the lib, then using * should still work", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r472461198", "createdAt": "2020-08-18T20:18:07Z", "author": {"login": "MikeDombo"}, "path": "scripts/loader", "diffHunk": "@@ -13,64 +11,61 @@ LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n CONFIG_FILE=\"\"\n \n launch_kernel() {\n-  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+  if [ ! -d ${LAUNCH_DIR} ] ; then\n     echo FATAL: No Kernel found!\n     exit 1\n   fi\n \n-  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  if [ -f \"${LAUNCH_DIR}/launch.params\" ] ; then\n+    JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  fi\n \n   OPTIONS=\"--root $GG_ROOT\"\n-  if [[ ! -z ${CONFIG_FILE} ]]; then\n+  if [ ! -z ${CONFIG_FILE} ]; then\n     OPTIONS=\"$OPTIONS --config $CONFIG_FILE\"\n   fi\n   echo \"jvm options: \"${JVM_OPTIONS}\n   echo \"kernel options: \"${OPTIONS}\n-  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  java ${JVM_OPTIONS} -Dlog.store=FILE -Dlog.storeName=\"$GG_ROOT/logs/evergreen.log\" -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4NTgxNw=="}, "originalCommit": {"oid": "cb1375c722921e4d4f4f84223a803ff2888f95a0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyNDQzNQ==", "bodyText": "Why is jar name not deterministic?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r474124435", "createdAt": "2020-08-20T16:40:58Z", "author": {"login": "leaf94"}, "path": "scripts/loader", "diffHunk": "@@ -13,64 +11,61 @@ LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n CONFIG_FILE=\"\"\n \n launch_kernel() {\n-  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+  if [ ! -d ${LAUNCH_DIR} ] ; then\n     echo FATAL: No Kernel found!\n     exit 1\n   fi\n \n-  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  if [ -f \"${LAUNCH_DIR}/launch.params\" ] ; then\n+    JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  fi\n \n   OPTIONS=\"--root $GG_ROOT\"\n-  if [[ ! -z ${CONFIG_FILE} ]]; then\n+  if [ ! -z ${CONFIG_FILE} ]; then\n     OPTIONS=\"$OPTIONS --config $CONFIG_FILE\"\n   fi\n   echo \"jvm options: \"${JVM_OPTIONS}\n   echo \"kernel options: \"${OPTIONS}\n-  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  java ${JVM_OPTIONS} -Dlog.store=FILE -Dlog.storeName=\"$GG_ROOT/logs/evergreen.log\" -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4NTgxNw=="}, "originalCommit": {"oid": "cb1375c722921e4d4f4f84223a803ff2888f95a0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjc1NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/easysetup/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODowOTowN1rOHCgNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODowOTowN1rOHCgNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4NzAwMQ==", "bodyText": "also needs TES related parameters right? Since TES isn't optional for cloud connection", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r472387001", "createdAt": "2020-08-18T18:09:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/README.md", "diffHunk": "@@ -33,3 +33,16 @@ OPTIONS\n \t--install-cli, -ic \t\tY/N Indicate if you want to install Evergreen device CLI. {}\n ```\n \n+## Set up steps with Greengrass zip file\n+This workflow has been implemented for Ubuntu. Use as a reference.\n+```\n+# Move GreengrassCore-2.0.0.zip to test device\n+# Set up aws creds\n+unzip GreengrassCore-2.0.0.zip -d GreengrassCore\n+java -Droot=~/gg_home -Dlog.level=ERROR -jar ./GreengrassCore/lib/Evergreen.jar --provision true --aws-region us-east-1 --thing-name test-device", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1375c722921e4d4f4f84223a803ff2888f95a0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzU1OTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowMDozN1rOHELMRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowMDozN1rOHELMRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTcxOA==", "bodyText": "This might be able to be entirely moved to Kernel::parseArgs", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r474139718", "createdAt": "2020-08-20T17:00:37Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -93,7 +89,7 @@ public void launch() {\n         startupAllServices();\n     }\n \n-    private void initConfigAndTlog() {\n+    void initConfigAndTlog() {\n         Path transactionLogPath = kernel.getConfigPath().resolve(\"config.tlog\");\n         Path configurationFile = kernel.getConfigPath().resolve(\"config.yaml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e34406dbae67c9c1469d4751d4545c184e8b7180"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzU2MzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowMTo0NlrOHELOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowMTo0NlrOHELOyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MDM2MQ==", "bodyText": "Nice... Now the provision override drawback is also eliminated. I will update the README after you merge this in. Please remind me afterwards~", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r474140361", "createdAt": "2020-08-20T17:01:46Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -499,8 +501,17 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         return rootPackageNameAndVersionMap;\n     }\n \n+    /**\n+     * Parse kernel arguments and initialized configuration.\n+     *\n+     * @param args CLI args\n+     * @return Kernel instance\n+     */\n     public Kernel parseArgs(String... args) {\n         kernelCommandLine.parseArgs(args);\n+\n+        config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        kernelLifecycle.initConfigAndTlog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e34406dbae67c9c1469d4751d4545c184e8b7180"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU0MDMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/platforms/Platform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzozNDozMFrOHFvdTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzozNDozMFrOHFvdTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MjQ3Ng==", "bodyText": "why is this a separate platform? Systemd isn't a platform, but something which can be installed on multiple different platforms.\nI'd probably have a separate inheritance hierarchy for this feature set. It can still be accessible through the platform instance, but it shouldn't be in the same hierarchy.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475782476", "createdAt": "2020-08-24T17:34:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/platforms/Platform.java", "diffHunk": "@@ -27,17 +34,44 @@ public static synchronized Platform getInstance() {\n             INSTANCE = new WindowsPlatform();\n         } else if (PlatformResolver.RANKS.get().containsKey(\"qnx\")) {\n             INSTANCE = new QNXPlatform();\n+        } else if (SystemServiceManager.SYSTEMD.equals(getSystemServiceManager())) {\n+            INSTANCE = new SystemdUnixPlatform();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924bea326025de95240b2275ac25855ef7b70bbc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU0NzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/platforms/SystemdUnixPlatform.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzozNjozMFrOHFvhrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0OTowMFrOHFv7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MzU5OQ==", "bodyText": "use shellrunner?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475783599", "createdAt": "2020-08-24T17:36:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/platforms/SystemdUnixPlatform.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util.platforms;\n+\n+import com.aws.iot.evergreen.kernel.KernelAlternatives;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+\n+public class SystemdUnixPlatform extends UnixPlatform {\n+    private static final String PID_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_PID_FILE\";\n+    private static final String LOADER_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_FILE\";\n+    private static final String SERVICE_CONFIG_FILE_PATH = \"/etc/systemd/system/greengrass.service\";\n+    private static final String SED_CMD = \"sed -i -e \\\"s#%s#%s#g\\\" %s\";\n+\n+    @Override\n+    public boolean setupSystemService(KernelAlternatives kernelAlternatives) {\n+        try {\n+            kernelAlternatives.setupInitLaunchDirIfAbsent();\n+            Path serviceConfig = kernelAlternatives.getServiceTemplatePath();\n+            runCommand(String.format(SED_CMD, PID_FILE_PARAM, kernelAlternatives.getLoaderPidPath(), serviceConfig));\n+            runCommand(String.format(SED_CMD, LOADER_FILE_PARAM, kernelAlternatives.getLoaderPath(), serviceConfig));\n+            runCommand(String.format(\"sudo cp %s %s\", serviceConfig, SERVICE_CONFIG_FILE_PATH));\n+            runCommand(\"sudo systemctl daemon-reload\");\n+            runCommand(\"sudo systemctl unmask greengrass.service\");\n+            runCommand(\"sudo systemctl start greengrass.service\");\n+            runCommand(\"sudo systemctl enable greengrass.service\");\n+            logger.atInfo().log(\"Successfully set up systemd service\");\n+            return true;\n+        } catch (IOException | InterruptedException | URISyntaxException e) {\n+            logger.atError().log(\"Failed to set up systemd service\", e);\n+        }\n+        return false;\n+    }\n+\n+    private boolean runCommand(String command) throws IOException, InterruptedException {\n+        return new Exec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924bea326025de95240b2275ac25855ef7b70bbc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MDIyNQ==", "bodyText": "Shellrunner is designed for running commands on behalf of EG services, and some env var settings don't apply", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475790225", "createdAt": "2020-08-24T17:49:00Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/util/platforms/SystemdUnixPlatform.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util.platforms;\n+\n+import com.aws.iot.evergreen.kernel.KernelAlternatives;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+\n+public class SystemdUnixPlatform extends UnixPlatform {\n+    private static final String PID_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_PID_FILE\";\n+    private static final String LOADER_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_FILE\";\n+    private static final String SERVICE_CONFIG_FILE_PATH = \"/etc/systemd/system/greengrass.service\";\n+    private static final String SED_CMD = \"sed -i -e \\\"s#%s#%s#g\\\" %s\";\n+\n+    @Override\n+    public boolean setupSystemService(KernelAlternatives kernelAlternatives) {\n+        try {\n+            kernelAlternatives.setupInitLaunchDirIfAbsent();\n+            Path serviceConfig = kernelAlternatives.getServiceTemplatePath();\n+            runCommand(String.format(SED_CMD, PID_FILE_PARAM, kernelAlternatives.getLoaderPidPath(), serviceConfig));\n+            runCommand(String.format(SED_CMD, LOADER_FILE_PARAM, kernelAlternatives.getLoaderPath(), serviceConfig));\n+            runCommand(String.format(\"sudo cp %s %s\", serviceConfig, SERVICE_CONFIG_FILE_PATH));\n+            runCommand(\"sudo systemctl daemon-reload\");\n+            runCommand(\"sudo systemctl unmask greengrass.service\");\n+            runCommand(\"sudo systemctl start greengrass.service\");\n+            runCommand(\"sudo systemctl enable greengrass.service\");\n+            logger.atInfo().log(\"Successfully set up systemd service\");\n+            return true;\n+        } catch (IOException | InterruptedException | URISyntaxException e) {\n+            logger.atError().log(\"Failed to set up systemd service\", e);\n+        }\n+        return false;\n+    }\n+\n+    private boolean runCommand(String command) throws IOException, InterruptedException {\n+        return new Exec()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MzU5OQ=="}, "originalCommit": {"oid": "924bea326025de95240b2275ac25855ef7b70bbc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU0OTIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelperTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzozNzowNFrOHFvi6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzozNzowNFrOHFvi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MzkxNA==", "bodyText": "can we put this into an afterEach so it can't be forgotten?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475783914", "createdAt": "2020-08-24T17:37:04Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelperTest.java", "diffHunk": "@@ -192,6 +193,7 @@ public void GIVEN_test_tes_role_config_WHEN_role_info_provided_THEN_add_config_t\n         assertEquals(\"roleAliasName\", kernel.getConfig()\n                 .lookup(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS, PARAMETERS_CONFIG_KEY,\n                         IOT_ROLE_ALIAS_TOPIC).getOnce());\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924bea326025de95240b2275ac25855ef7b70bbc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxNjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/orchestration/SystemdUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyODowNlrOHF265Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyODowNlrOHF265Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDc0MQ==", "bodyText": "why are these running as sudo? Won't the kernel be running as root at this point? Systems may not have sudo, or won't be configured with passwordless sudo, so I'd maybe just make it a requirement that GG is running as root for this feature.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475904741", "createdAt": "2020-08-24T21:28:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/orchestration/SystemdUtils.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util.orchestration;\n+\n+import com.aws.iot.evergreen.kernel.KernelAlternatives;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+\n+public class SystemdUtils extends SystemServiceUtils {\n+    private static final String PID_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_PID_FILE\";\n+    private static final String LOADER_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_FILE\";\n+    private static final String SERVICE_CONFIG_FILE_PATH = \"/etc/systemd/system/greengrass.service\";\n+    private static final String SED_CMD = \"sed -i -e \\\"s#%s#%s#g\\\" %s\";\n+\n+    @Override\n+    public boolean setupSystemService(KernelAlternatives kernelAlternatives) {\n+        try {\n+            kernelAlternatives.setupInitLaunchDirIfAbsent();\n+            Path serviceConfig = kernelAlternatives.getServiceTemplatePath();\n+            runCommand(String.format(SED_CMD, PID_FILE_PARAM, kernelAlternatives.getLoaderPidPath(), serviceConfig));\n+            runCommand(String.format(SED_CMD, LOADER_FILE_PARAM, kernelAlternatives.getLoaderPath(), serviceConfig));\n+            runCommand(String.format(\"sudo cp %s %s\", serviceConfig, SERVICE_CONFIG_FILE_PATH));\n+            runCommand(\"sudo systemctl daemon-reload\");\n+            runCommand(\"sudo systemctl unmask greengrass.service\");\n+            runCommand(\"sudo systemctl start greengrass.service\");\n+            runCommand(\"sudo systemctl enable greengrass.service\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/platforms/Platform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyODoyMlrOHF27Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTo0ODo0NVrOHF3dxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDg0Ng==", "bodyText": "unused?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475904846", "createdAt": "2020-08-24T21:28:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/platforms/Platform.java", "diffHunk": "@@ -6,11 +6,14 @@\n package com.aws.iot.evergreen.util.platforms;\n \n import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.util.Exec;\n \n import java.io.IOException;\n \n public abstract class Platform {\n+    protected static final Logger logger = LogManager.getLogger(Platform.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxMzY3MQ==", "bodyText": "Used by child classes", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475913671", "createdAt": "2020-08-24T21:48:45Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/util/platforms/Platform.java", "diffHunk": "@@ -6,11 +6,14 @@\n package com.aws.iot.evergreen.util.platforms;\n \n import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.util.Exec;\n \n import java.io.IOException;\n \n public abstract class Platform {\n+    protected static final Logger logger = LogManager.getLogger(Platform.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNDg0Ng=="}, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxOTY3OnYy", "diffSide": "LEFT", "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyOToxNFrOHF287Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTozMzozM1rOHF3D5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTI2MQ==", "bodyText": "this is the test change, where's the source change?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475905261", "createdAt": "2020-08-24T21:29:14Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "diffHunk": "@@ -56,7 +55,6 @@ void GIVEN_setup_script_WHEN_script_is_used_with_short_arg_notations_THEN_setup_\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithIotConfiguration(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).setupIoTRoleForTes(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithTesRoleInfo(any(), any());\n-        verify(deviceProvisioningHelper, times(1)).setUpEmptyPackagesForFirstPartyServices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTk5NA==", "bodyText": "In EvergreenSetup, do you suggest completely removing the method?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475905994", "createdAt": "2020-08-24T21:31:01Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "diffHunk": "@@ -56,7 +55,6 @@ void GIVEN_setup_script_WHEN_script_is_used_with_short_arg_notations_THEN_setup_\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithIotConfiguration(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).setupIoTRoleForTes(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithTesRoleInfo(any(), any());\n-        verify(deviceProvisioningHelper, times(1)).setUpEmptyPackagesForFirstPartyServices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTI2MQ=="}, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNjU5MQ==", "bodyText": "Missed it, I see it now. If it is unused, then yeah remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475906591", "createdAt": "2020-08-24T21:32:21Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "diffHunk": "@@ -56,7 +55,6 @@ void GIVEN_setup_script_WHEN_script_is_used_with_short_arg_notations_THEN_setup_\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithIotConfiguration(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).setupIoTRoleForTes(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithTesRoleInfo(any(), any());\n-        verify(deviceProvisioningHelper, times(1)).setUpEmptyPackagesForFirstPartyServices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTI2MQ=="}, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNzA0NA==", "bodyText": "The format of the component it creates is wrong now, so it definitely needs to be removed or fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r475907044", "createdAt": "2020-08-24T21:33:33Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "diffHunk": "@@ -56,7 +55,6 @@ void GIVEN_setup_script_WHEN_script_is_used_with_short_arg_notations_THEN_setup_\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithIotConfiguration(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).setupIoTRoleForTes(any(), any(), any());\n         verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithTesRoleInfo(any(), any());\n-        verify(deviceProvisioningHelper, times(1)).setUpEmptyPackagesForFirstPartyServices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwNTI2MQ=="}, "originalCommit": {"oid": "1a3dcfbf85860a95ee278ca9d2f3d3224bcdc868"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjA0OTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/orchestration/SystemdUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowOTowMlrOHF-U6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0ODoyOFrOHF_6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyNjA4OQ==", "bodyText": "why are we using sed? Let's use java", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r476026089", "createdAt": "2020-08-25T01:09:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/orchestration/SystemdUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util.orchestration;\n+\n+import com.aws.iot.evergreen.kernel.KernelAlternatives;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+\n+public class SystemdUtils implements SystemServiceUtils {\n+    protected static final Logger logger = LogManager.getLogger(SystemdUtils.class);\n+    private static final String PID_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_PID_FILE\";\n+    private static final String LOADER_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_FILE\";\n+    private static final String SERVICE_CONFIG_FILE_PATH = \"/etc/systemd/system/greengrass.service\";\n+    private static final String SED_CMD = \"sed -i -e \\\"s#%s#%s#g\\\" %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946c19afe9b12bdd4bc0e9104d965a88c9e568ff"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1MjExMA==", "bodyText": "I intend to prepare the file content and permission before moving it in place.\nAdd to backlog for now as discussed offline.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/367#discussion_r476052110", "createdAt": "2020-08-25T01:48:28Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/util/orchestration/SystemdUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util.orchestration;\n+\n+import com.aws.iot.evergreen.kernel.KernelAlternatives;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+\n+public class SystemdUtils implements SystemServiceUtils {\n+    protected static final Logger logger = LogManager.getLogger(SystemdUtils.class);\n+    private static final String PID_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_PID_FILE\";\n+    private static final String LOADER_FILE_PARAM = \"REPLACE_WITH_GG_LOADER_FILE\";\n+    private static final String SERVICE_CONFIG_FILE_PATH = \"/etc/systemd/system/greengrass.service\";\n+    private static final String SED_CMD = \"sed -i -e \\\"s#%s#%s#g\\\" %s\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyNjA4OQ=="}, "originalCommit": {"oid": "946c19afe9b12bdd4bc0e9104d965a88c9e568ff"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}